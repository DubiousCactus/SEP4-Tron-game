
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00004bf0  00004c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004bf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000660  00800152  00800152  00004cd6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004cd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f8  00000000  00000000  00004d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000423e  00000000  00000000  00005240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ac  00000000  00000000  0000947e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003ae7  00000000  00000000  0000a72a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000139c  00000000  00000000  0000e214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cc8  00000000  00000000  0000f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029d3  00000000  00000000  00011278  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000468  00000000  00000000  00013c4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__vector_13>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__vector_16>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__vector_20>
      54:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__vector_21>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__vector_28>
      74:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__vector_29>
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	1f 01       	movw	r2, r30
      7e:	57 01       	movw	r10, r14
      80:	57 01       	movw	r10, r14
      82:	3b 01       	movw	r6, r22
      84:	57 01       	movw	r10, r14
      86:	57 01       	movw	r10, r14
      88:	57 01       	movw	r10, r14
      8a:	57 01       	movw	r10, r14
      8c:	57 01       	movw	r10, r14
      8e:	57 01       	movw	r10, r14
      90:	57 01       	movw	r10, r14
      92:	57 01       	movw	r10, r14
      94:	57 01       	movw	r10, r14
      96:	57 01       	movw	r10, r14
      98:	57 01       	movw	r10, r14
      9a:	57 01       	movw	r10, r14
      9c:	57 01       	movw	r10, r14
      9e:	57 01       	movw	r10, r14
      a0:	49 01       	movw	r8, r18
      a2:	57 01       	movw	r10, r14
      a4:	57 01       	movw	r10, r14
      a6:	57 01       	movw	r10, r14
      a8:	2d 01       	movw	r4, r26
      aa:	57 01       	movw	r10, r14
      ac:	57 01       	movw	r10, r14
      ae:	57 01       	movw	r10, r14
      b0:	57 01       	movw	r10, r14
      b2:	57 01       	movw	r10, r14
      b4:	57 01       	movw	r10, r14
      b6:	57 01       	movw	r10, r14
      b8:	57 01       	movw	r10, r14
      ba:	57 01       	movw	r10, r14
      bc:	26 01       	movw	r4, r12
      be:	57 01       	movw	r10, r14
      c0:	57 01       	movw	r10, r14
      c2:	42 01       	movw	r8, r4
      c4:	57 01       	movw	r10, r14
      c6:	57 01       	movw	r10, r14
      c8:	57 01       	movw	r10, r14
      ca:	57 01       	movw	r10, r14
      cc:	57 01       	movw	r10, r14
      ce:	57 01       	movw	r10, r14
      d0:	57 01       	movw	r10, r14
      d2:	57 01       	movw	r10, r14
      d4:	57 01       	movw	r10, r14
      d6:	57 01       	movw	r10, r14
      d8:	57 01       	movw	r10, r14
      da:	57 01       	movw	r10, r14
      dc:	57 01       	movw	r10, r14
      de:	57 01       	movw	r10, r14
      e0:	50 01       	movw	r10, r0
      e2:	57 01       	movw	r10, r14
      e4:	57 01       	movw	r10, r14
      e6:	57 01       	movw	r10, r14
      e8:	34 01       	movw	r6, r8
      ea:	07 63       	ori	r16, 0x37	; 55
      ec:	42 36       	cpi	r20, 0x62	; 98
      ee:	b7 9b       	sbis	0x16, 7	; 22
      f0:	d8 a7       	std	Y+40, r29	; 0x28
      f2:	1a 39       	cpi	r17, 0x9A	; 154
      f4:	68 56       	subi	r22, 0x68	; 104
      f6:	18 ae       	std	Y+56, r1	; 0x38
      f8:	ba ab       	std	Y+50, r27	; 0x32
      fa:	55 8c       	ldd	r5, Z+29	; 0x1d
      fc:	1d 3c       	cpi	r17, 0xCD	; 205
      fe:	b7 cc       	rjmp	.-1682   	; 0xfffffa6e <__eeprom_end+0xff7efa6e>
     100:	57 63       	ori	r21, 0x37	; 55
     102:	bd 6d       	ori	r27, 0xDD	; 221
     104:	ed fd       	.word	0xfded	; ????
     106:	75 3e       	cpi	r23, 0xE5	; 229
     108:	f6 17       	cp	r31, r22
     10a:	72 31       	cpi	r23, 0x12	; 18
     10c:	bf 00       	.word	0x00bf	; ????
     10e:	00 00       	nop
     110:	80 3f       	cpi	r24, 0xF0	; 240
     112:	08 00       	.word	0x0008	; ????
     114:	00 00       	nop
     116:	be 92       	st	-X, r11
     118:	24 49       	sbci	r18, 0x94	; 148
     11a:	12 3e       	cpi	r17, 0xE2	; 226
     11c:	ab aa       	std	Y+51, r10	; 0x33
     11e:	aa 2a       	or	r10, r26
     120:	be cd       	rjmp	.-1156   	; 0xfffffc9e <__eeprom_end+0xff7efc9e>
     122:	cc cc       	rjmp	.-1640   	; 0xfffffabc <__eeprom_end+0xff7efabc>
     124:	4c 3e       	cpi	r20, 0xEC	; 236
     126:	00 00       	nop
     128:	00 80       	ld	r0, Z
     12a:	be ab       	std	Y+54, r27	; 0x36
     12c:	aa aa       	std	Y+50, r10	; 0x32
     12e:	aa 3e       	cpi	r26, 0xEA	; 234
     130:	00 00       	nop
     132:	00 00       	nop
     134:	bf 00       	.word	0x00bf	; ????
     136:	00 00       	nop
     138:	80 3f       	cpi	r24, 0xF0	; 240
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 08       	sbc	r0, r0
     140:	41 78       	andi	r20, 0x81	; 129
     142:	d3 bb       	out	0x13, r29	; 19
     144:	43 87       	std	Z+11, r20	; 0x0b
     146:	d1 13       	cpse	r29, r17
     148:	3d 19       	sub	r19, r13
     14a:	0e 3c       	cpi	r16, 0xCE	; 206
     14c:	c3 bd       	out	0x23, r28	; 35
     14e:	42 82       	std	Z+2, r4	; 0x02
     150:	ad 2b       	or	r26, r29
     152:	3e 68       	ori	r19, 0x8E	; 142
     154:	ec 82       	std	Y+4, r14	; 0x04
     156:	76 be       	out	0x36, r7	; 54
     158:	d9 8f       	std	Y+25, r29	; 0x19
     15a:	e1 a9       	ldd	r30, Z+49	; 0x31
     15c:	3e 4c       	sbci	r19, 0xCE	; 206
     15e:	80 ef       	ldi	r24, 0xF0	; 240
     160:	ff be       	out	0x3f, r15	; 63
     162:	01 c4       	rjmp	.+2050   	; 0x966 <__stack+0x67>
     164:	ff 7f       	andi	r31, 0xFF	; 255
     166:	3f 00       	.word	0x003f	; ????
     168:	00 00       	nop
	...

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	d8 e0       	ldi	r29, 0x08	; 8
     174:	de bf       	out	0x3e, r29	; 62
     176:	cd bf       	out	0x3d, r28	; 61

00000178 <__do_copy_data>:
     178:	11 e0       	ldi	r17, 0x01	; 1
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	e0 ef       	ldi	r30, 0xF0	; 240
     180:	fb e4       	ldi	r31, 0x4B	; 75
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
     184:	05 90       	lpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	a2 35       	cpi	r26, 0x52	; 82
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
     18e:	27 e0       	ldi	r18, 0x07	; 7
     190:	a2 e5       	ldi	r26, 0x52	; 82
     192:	b1 e0       	ldi	r27, 0x01	; 1
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a2 3b       	cpi	r26, 0xB2	; 178
     19a:	b2 07       	cpc	r27, r18
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 0f 0a 	call	0x141e	; 0x141e <main>
     1a2:	0c 94 f6 25 	jmp	0x4bec	; 0x4bec <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <communicate_serial>:
static SemaphoreHandle_t xPlayerTwoSemaphore = NULL;

static Score score;

void communicate_serial(void *pvParameters)
{
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	00 d0       	rcall	.+0      	; 0x1b0 <communicate_serial+0x6>
     1b0:	1f 92       	push	r1
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	9b 83       	std	Y+3, r25	; 0x03
     1b8:	8a 83       	std	Y+2, r24	; 0x02
	//Variables
	uint8_t data[] = "";
     1ba:	19 82       	std	Y+1, r1	; 0x01

	_received_chars_queue = xQueueCreate(_COM_RX_QUEUE_LENGTH, (unsigned portBASE_TYPE) sizeof (uint8_t));
     1bc:	8e e1       	ldi	r24, 0x1E	; 30
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	0e 94 90 14 	call	0x2920	; 0x2920 <xQueueGenericCreate>
     1c6:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
     1ca:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
	init_com(_received_chars_queue);
     1ce:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     1d2:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
     1d6:	0e 94 a4 0a 	call	0x1548	; 0x1548 <init_com>

	for(;;){

		/*Constantly checking data coming from the PC*/
		if (xQueueReceive(_received_chars_queue, &data, (TickType_t) 10)) {
     1da:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     1de:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	4a e0       	ldi	r20, 0x0A	; 10
     1e6:	50 e0       	ldi	r21, 0x00	; 0
     1e8:	be 01       	movw	r22, r28
     1ea:	6f 5f       	subi	r22, 0xFF	; 255
     1ec:	7f 4f       	sbci	r23, 0xFF	; 255
     1ee:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <xQueueGenericReceive>
     1f2:	88 23       	and	r24, r24
     1f4:	09 f4       	brne	.+2      	; 0x1f8 <communicate_serial+0x4e>
     1f6:	66 c0       	rjmp	.+204    	; 0x2c4 <communicate_serial+0x11a>
			if(xSemaphoreTake(xPlayerTwoSemaphore, (TickType_t) 10)) {
     1f8:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <xPlayerTwoSemaphore>
     1fc:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <xPlayerTwoSemaphore+0x1>
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	4a e0       	ldi	r20, 0x0A	; 10
     204:	50 e0       	ldi	r21, 0x00	; 0
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <xQueueGenericReceive>
     20e:	88 23       	and	r24, r24
     210:	09 f4       	brne	.+2      	; 0x214 <communicate_serial+0x6a>
     212:	58 c0       	rjmp	.+176    	; 0x2c4 <communicate_serial+0x11a>
				switch (data[0]) {
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	88 2f       	mov	r24, r24
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	09 2e       	mov	r0, r25
     21c:	00 0c       	add	r0, r0
     21e:	aa 0b       	sbc	r26, r26
     220:	bb 0b       	sbc	r27, r27
     222:	41 e4       	ldi	r20, 0x41	; 65
     224:	50 e0       	ldi	r21, 0x00	; 0
     226:	26 e3       	ldi	r18, 0x36	; 54
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	84 1b       	sub	r24, r20
     22c:	95 0b       	sbc	r25, r21
     22e:	28 17       	cp	r18, r24
     230:	39 07       	cpc	r19, r25
     232:	e8 f1       	brcs	.+122    	; 0x2ae <communicate_serial+0x104>
     234:	82 5c       	subi	r24, 0xC2	; 194
     236:	9f 4f       	sbci	r25, 0xFF	; 255
     238:	fc 01       	movw	r30, r24
     23a:	0c 94 bf 24 	jmp	0x497e	; 0x497e <__tablejump2__>
					case 0x41 :
					turn_player(&playerTwo, LEFT);		//A
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	8b ec       	ldi	r24, 0xCB	; 203
     244:	92 e0       	ldi	r25, 0x02	; 2
     246:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <turn_player>
					break;
     24a:	31 c0       	rjmp	.+98     	; 0x2ae <communicate_serial+0x104>
					case 0x61 :
					turn_player(&playerTwo, LEFT);		//a
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	8b ec       	ldi	r24, 0xCB	; 203
     252:	92 e0       	ldi	r25, 0x02	; 2
     254:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <turn_player>
					break;
     258:	2a c0       	rjmp	.+84     	; 0x2ae <communicate_serial+0x104>
					case 0x57 :
					turn_player(&playerTwo, UP);		//W
     25a:	62 e0       	ldi	r22, 0x02	; 2
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	8b ec       	ldi	r24, 0xCB	; 203
     260:	92 e0       	ldi	r25, 0x02	; 2
     262:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <turn_player>
					break;
     266:	23 c0       	rjmp	.+70     	; 0x2ae <communicate_serial+0x104>
					case 0x77 :
					turn_player(&playerTwo, UP);		//w
     268:	62 e0       	ldi	r22, 0x02	; 2
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	8b ec       	ldi	r24, 0xCB	; 203
     26e:	92 e0       	ldi	r25, 0x02	; 2
     270:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <turn_player>
					break;
     274:	1c c0       	rjmp	.+56     	; 0x2ae <communicate_serial+0x104>
					case 0x44 :
					turn_player(&playerTwo, RIGHT);		//D
     276:	61 e0       	ldi	r22, 0x01	; 1
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	8b ec       	ldi	r24, 0xCB	; 203
     27c:	92 e0       	ldi	r25, 0x02	; 2
     27e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <turn_player>
					break;
     282:	15 c0       	rjmp	.+42     	; 0x2ae <communicate_serial+0x104>
					case 0x64 :
					turn_player(&playerTwo, RIGHT);		//d
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	8b ec       	ldi	r24, 0xCB	; 203
     28a:	92 e0       	ldi	r25, 0x02	; 2
     28c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <turn_player>
					break;
     290:	0e c0       	rjmp	.+28     	; 0x2ae <communicate_serial+0x104>
					case 0x53 :
					turn_player(&playerTwo, DOWN);		//S
     292:	63 e0       	ldi	r22, 0x03	; 3
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	8b ec       	ldi	r24, 0xCB	; 203
     298:	92 e0       	ldi	r25, 0x02	; 2
     29a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <turn_player>
					break;
     29e:	07 c0       	rjmp	.+14     	; 0x2ae <communicate_serial+0x104>
					case 0x73 :
					turn_player(&playerTwo, DOWN);		//s
     2a0:	63 e0       	ldi	r22, 0x03	; 3
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	8b ec       	ldi	r24, 0xCB	; 203
     2a6:	92 e0       	ldi	r25, 0x02	; 2
     2a8:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <turn_player>
					break;
     2ac:	00 00       	nop
				}
				xSemaphoreGive(xPlayerTwoSemaphore);
     2ae:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <xPlayerTwoSemaphore>
     2b2:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <xPlayerTwoSemaphore+0x1>
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	40 e0       	ldi	r20, 0x00	; 0
     2ba:	50 e0       	ldi	r21, 0x00	; 0
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <xQueueGenericSend>
			}
		}

		vTaskDelay(20);
     2c4:	84 e1       	ldi	r24, 0x14	; 20
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 0b 1b 	call	0x3616	; 0x3616 <vTaskDelay>
	}
     2cc:	86 cf       	rjmp	.-244    	; 0x1da <communicate_serial+0x30>

000002ce <make_frame>:
	vTaskDelete(NULL);
}

/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
     2ce:	0f 93       	push	r16
     2d0:	1f 93       	push	r17
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	2a 97       	sbiw	r28, 0x0a	; 10
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	de bf       	out	0x3e, r29	; 62
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	cd bf       	out	0x3d, r28	; 61
     2e6:	9a 87       	std	Y+10, r25	; 0x0a
     2e8:	89 87       	std	Y+9, r24	; 0x09
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     2ea:	1a 82       	std	Y+2, r1	; 0x02
     2ec:	19 82       	std	Y+1, r1	; 0x01
     2ee:	1a c0       	rjmp	.+52     	; 0x324 <make_frame+0x56>
			for (int i = 0; i < 14; i++) { //For each column
     2f0:	1c 82       	std	Y+4, r1	; 0x04
     2f2:	1b 82       	std	Y+3, r1	; 0x03
     2f4:	0e c0       	rjmp	.+28     	; 0x312 <make_frame+0x44>
				frame_buffer[i]	= 0;
     2f6:	8b 81       	ldd	r24, Y+3	; 0x03
     2f8:	9c 81       	ldd	r25, Y+4	; 0x04
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	8c 5a       	subi	r24, 0xAC	; 172
     300:	9e 4f       	sbci	r25, 0xFE	; 254
     302:	fc 01       	movw	r30, r24
     304:	11 82       	std	Z+1, r1	; 0x01
     306:	10 82       	st	Z, r1
/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
			for (int i = 0; i < 14; i++) { //For each column
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	9c 81       	ldd	r25, Y+4	; 0x04
     30c:	01 96       	adiw	r24, 0x01	; 1
     30e:	9c 83       	std	Y+4, r25	; 0x04
     310:	8b 83       	std	Y+3, r24	; 0x03
     312:	8b 81       	ldd	r24, Y+3	; 0x03
     314:	9c 81       	ldd	r25, Y+4	; 0x04
     316:	0e 97       	sbiw	r24, 0x0e	; 14
     318:	74 f3       	brlt	.-36     	; 0x2f6 <make_frame+0x28>

/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	9a 81       	ldd	r25, Y+2	; 0x02
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	9a 83       	std	Y+2, r25	; 0x02
     322:	89 83       	std	Y+1, r24	; 0x01
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	9a 81       	ldd	r25, Y+2	; 0x02
     328:	0a 97       	sbiw	r24, 0x0a	; 10
     32a:	14 f3       	brlt	.-60     	; 0x2f0 <make_frame+0x22>
			for (int i = 0; i < 14; i++) { //For each column
				frame_buffer[i]	= 0;
			}
		}

		if(xSemaphoreTake(xGameStateSemaphore, (TickType_t) 10)){
     32c:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <xGameStateSemaphore>
     330:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <xGameStateSemaphore+0x1>
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	4a e0       	ldi	r20, 0x0A	; 10
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <xQueueGenericReceive>
     342:	88 23       	and	r24, r24
     344:	09 f4       	brne	.+2      	; 0x348 <make_frame+0x7a>
     346:	78 c0       	rjmp	.+240    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
			/* Create frame from gameState */
			for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     348:	1e 82       	std	Y+6, r1	; 0x06
     34a:	1d 82       	std	Y+5, r1	; 0x05
     34c:	65 c0       	rjmp	.+202    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
				for (int i = 0; i < 14; i++) { //For each column
     34e:	18 86       	std	Y+8, r1	; 0x08
     350:	1f 82       	std	Y+7, r1	; 0x07
     352:	58 c0       	rjmp	.+176    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
					if (gameState[i][j] != 0) { //Add up
     354:	8f 81       	ldd	r24, Y+7	; 0x07
     356:	98 85       	ldd	r25, Y+8	; 0x08
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	9c 01       	movw	r18, r24
     35e:	22 0f       	add	r18, r18
     360:	33 1f       	adc	r19, r19
     362:	22 0f       	add	r18, r18
     364:	33 1f       	adc	r19, r19
     366:	82 0f       	add	r24, r18
     368:	93 1f       	adc	r25, r19
     36a:	2d 81       	ldd	r18, Y+5	; 0x05
     36c:	3e 81       	ldd	r19, Y+6	; 0x06
     36e:	82 0f       	add	r24, r18
     370:	93 1f       	adc	r25, r19
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	80 59       	subi	r24, 0x90	; 144
     378:	9e 4f       	sbci	r25, 0xFE	; 254
     37a:	fc 01       	movw	r30, r24
     37c:	80 81       	ld	r24, Z
     37e:	91 81       	ldd	r25, Z+1	; 0x01
     380:	89 2b       	or	r24, r25
     382:	d9 f1       	breq	.+118    	; 0x3fa <make_frame+0x12c>
						frame_buffer[i]	+= (int) (pow(2,  j) + 0.5);
     384:	8f 81       	ldd	r24, Y+7	; 0x07
     386:	98 85       	ldd	r25, Y+8	; 0x08
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	8c 5a       	subi	r24, 0xAC	; 172
     38e:	9e 4f       	sbci	r25, 0xFE	; 254
     390:	fc 01       	movw	r30, r24
     392:	00 81       	ld	r16, Z
     394:	11 81       	ldd	r17, Z+1	; 0x01
     396:	8d 81       	ldd	r24, Y+5	; 0x05
     398:	9e 81       	ldd	r25, Y+6	; 0x06
     39a:	09 2e       	mov	r0, r25
     39c:	00 0c       	add	r0, r0
     39e:	aa 0b       	sbc	r26, r26
     3a0:	bb 0b       	sbc	r27, r27
     3a2:	bc 01       	movw	r22, r24
     3a4:	cd 01       	movw	r24, r26
     3a6:	0e 94 ad 21 	call	0x435a	; 0x435a <__floatsisf>
     3aa:	dc 01       	movw	r26, r24
     3ac:	cb 01       	movw	r24, r22
     3ae:	9c 01       	movw	r18, r24
     3b0:	ad 01       	movw	r20, r26
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e4       	ldi	r25, 0x40	; 64
     3ba:	0e 94 39 22 	call	0x4472	; 0x4472 <pow>
     3be:	dc 01       	movw	r26, r24
     3c0:	cb 01       	movw	r24, r22
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	5f e3       	ldi	r21, 0x3F	; 63
     3ca:	bc 01       	movw	r22, r24
     3cc:	cd 01       	movw	r24, r26
     3ce:	0e 94 09 21 	call	0x4212	; 0x4212 <__addsf3>
     3d2:	dc 01       	movw	r26, r24
     3d4:	cb 01       	movw	r24, r22
     3d6:	bc 01       	movw	r22, r24
     3d8:	cd 01       	movw	r24, r26
     3da:	0e 94 75 21 	call	0x42ea	; 0x42ea <__fixsfsi>
     3de:	dc 01       	movw	r26, r24
     3e0:	cb 01       	movw	r24, r22
     3e2:	98 01       	movw	r18, r16
     3e4:	28 0f       	add	r18, r24
     3e6:	39 1f       	adc	r19, r25
     3e8:	8f 81       	ldd	r24, Y+7	; 0x07
     3ea:	98 85       	ldd	r25, Y+8	; 0x08
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	8c 5a       	subi	r24, 0xAC	; 172
     3f2:	9e 4f       	sbci	r25, 0xFE	; 254
     3f4:	fc 01       	movw	r30, r24
     3f6:	31 83       	std	Z+1, r19	; 0x01
     3f8:	20 83       	st	Z, r18
		}

		if(xSemaphoreTake(xGameStateSemaphore, (TickType_t) 10)){
			/* Create frame from gameState */
			for (int j = 0; j < 10; j++) { //Cumulate bits of each line
				for (int i = 0; i < 14; i++) { //For each column
     3fa:	8f 81       	ldd	r24, Y+7	; 0x07
     3fc:	98 85       	ldd	r25, Y+8	; 0x08
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	98 87       	std	Y+8, r25	; 0x08
     402:	8f 83       	std	Y+7, r24	; 0x07
     404:	8f 81       	ldd	r24, Y+7	; 0x07
     406:	98 85       	ldd	r25, Y+8	; 0x08
     408:	0e 97       	sbiw	r24, 0x0e	; 14
     40a:	0c f4       	brge	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	a3 cf       	rjmp	.-186    	; 0x354 <make_frame+0x86>
			}
		}

		if(xSemaphoreTake(xGameStateSemaphore, (TickType_t) 10)){
			/* Create frame from gameState */
			for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     40e:	8d 81       	ldd	r24, Y+5	; 0x05
     410:	9e 81       	ldd	r25, Y+6	; 0x06
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	9e 83       	std	Y+6, r25	; 0x06
     416:	8d 83       	std	Y+5, r24	; 0x05
     418:	8d 81       	ldd	r24, Y+5	; 0x05
     41a:	9e 81       	ldd	r25, Y+6	; 0x06
     41c:	0a 97       	sbiw	r24, 0x0a	; 10
     41e:	0c f4       	brge	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	96 cf       	rjmp	.-212    	; 0x34e <make_frame+0x80>
					if (gameState[i][j] != 0) { //Add up
						frame_buffer[i]	+= (int) (pow(2,  j) + 0.5);
					}
				}
			}
			xSemaphoreGive(xGameStateSemaphore);
     422:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <xGameStateSemaphore>
     426:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <xGameStateSemaphore+0x1>
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	60 e0       	ldi	r22, 0x00	; 0
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <xQueueGenericSend>
		}


		vTaskDelay(50);
     438:	82 e3       	ldi	r24, 0x32	; 50
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	0e 94 0b 1b 	call	0x3616	; 0x3616 <vTaskDelay>
	}
     440:	54 cf       	rjmp	.-344    	; 0x2ea <make_frame+0x1c>

00000442 <die>:

	vTaskDelete(NULL);
}

void die()
{
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
	//TODO
	com_send_bytes("DEAD!\n", 6);
     44a:	66 e0       	ldi	r22, 0x06	; 6
     44c:	8a e0       	ldi	r24, 0x0A	; 10
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	0e 94 21 0b 	call	0x1642	; 0x1642 <com_send_bytes>
}
     454:	00 00       	nop
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <move_player>:

void move_player(Player* player)
{
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	00 d0       	rcall	.+0      	; 0x462 <move_player+0x6>
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	9a 83       	std	Y+2, r25	; 0x02
     468:	89 83       	std	Y+1, r24	; 0x01
	switch ((*player).direction) {
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	9a 81       	ldd	r25, Y+2	; 0x02
     46e:	fc 01       	movw	r30, r24
     470:	84 81       	ldd	r24, Z+4	; 0x04
     472:	88 2f       	mov	r24, r24
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	91 05       	cpc	r25, r1
     47a:	21 f1       	breq	.+72     	; 0x4c4 <move_player+0x68>
     47c:	82 30       	cpi	r24, 0x02	; 2
     47e:	91 05       	cpc	r25, r1
     480:	1c f4       	brge	.+6      	; 0x488 <move_player+0x2c>
     482:	89 2b       	or	r24, r25
     484:	41 f0       	breq	.+16     	; 0x496 <move_player+0x3a>
				(*player).y++;
			break;
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     486:	65 c0       	rjmp	.+202    	; 0x552 <move_player+0xf6>
	com_send_bytes("DEAD!\n", 6);
}

void move_player(Player* player)
{
	switch ((*player).direction) {
     488:	82 30       	cpi	r24, 0x02	; 2
     48a:	91 05       	cpc	r25, r1
     48c:	81 f1       	breq	.+96     	; 0x4ee <move_player+0x92>
     48e:	03 97       	sbiw	r24, 0x03	; 3
     490:	09 f4       	brne	.+2      	; 0x494 <move_player+0x38>
     492:	43 c0       	rjmp	.+134    	; 0x51a <move_player+0xbe>
				(*player).y++;
			break;
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     494:	5e c0       	rjmp	.+188    	; 0x552 <move_player+0xf6>

void move_player(Player* player)
{
	switch ((*player).direction) {
		case LEFT:
			if ((*player).x > 0)
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	9a 81       	ldd	r25, Y+2	; 0x02
     49a:	fc 01       	movw	r30, r24
     49c:	80 81       	ld	r24, Z
     49e:	91 81       	ldd	r25, Z+1	; 0x01
     4a0:	18 16       	cp	r1, r24
     4a2:	19 06       	cpc	r1, r25
     4a4:	0c f0       	brlt	.+2      	; 0x4a8 <move_player+0x4c>
     4a6:	4e c0       	rjmp	.+156    	; 0x544 <move_player+0xe8>
				(*player).x--;
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	9a 81       	ldd	r25, Y+2	; 0x02
     4ac:	fc 01       	movw	r30, r24
     4ae:	80 81       	ld	r24, Z
     4b0:	91 81       	ldd	r25, Z+1	; 0x01
     4b2:	9c 01       	movw	r18, r24
     4b4:	21 50       	subi	r18, 0x01	; 1
     4b6:	31 09       	sbc	r19, r1
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	9a 81       	ldd	r25, Y+2	; 0x02
     4bc:	fc 01       	movw	r30, r24
     4be:	31 83       	std	Z+1, r19	; 0x01
     4c0:	20 83       	st	Z, r18
			break;
     4c2:	40 c0       	rjmp	.+128    	; 0x544 <move_player+0xe8>
		case RIGHT:
			if ((*player).x < 14)
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	9a 81       	ldd	r25, Y+2	; 0x02
     4c8:	fc 01       	movw	r30, r24
     4ca:	80 81       	ld	r24, Z
     4cc:	91 81       	ldd	r25, Z+1	; 0x01
     4ce:	0e 97       	sbiw	r24, 0x0e	; 14
     4d0:	dc f5       	brge	.+118    	; 0x548 <move_player+0xec>
				(*player).x++;
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	9a 81       	ldd	r25, Y+2	; 0x02
     4d6:	fc 01       	movw	r30, r24
     4d8:	80 81       	ld	r24, Z
     4da:	91 81       	ldd	r25, Z+1	; 0x01
     4dc:	9c 01       	movw	r18, r24
     4de:	2f 5f       	subi	r18, 0xFF	; 255
     4e0:	3f 4f       	sbci	r19, 0xFF	; 255
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	fc 01       	movw	r30, r24
     4e8:	31 83       	std	Z+1, r19	; 0x01
     4ea:	20 83       	st	Z, r18
			break;
     4ec:	2d c0       	rjmp	.+90     	; 0x548 <move_player+0xec>
		case UP:
			if ((*player).y > 0)
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	9a 81       	ldd	r25, Y+2	; 0x02
     4f2:	fc 01       	movw	r30, r24
     4f4:	82 81       	ldd	r24, Z+2	; 0x02
     4f6:	93 81       	ldd	r25, Z+3	; 0x03
     4f8:	18 16       	cp	r1, r24
     4fa:	19 06       	cpc	r1, r25
     4fc:	3c f5       	brge	.+78     	; 0x54c <move_player+0xf0>
				(*player).y--;
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	9a 81       	ldd	r25, Y+2	; 0x02
     502:	fc 01       	movw	r30, r24
     504:	82 81       	ldd	r24, Z+2	; 0x02
     506:	93 81       	ldd	r25, Z+3	; 0x03
     508:	9c 01       	movw	r18, r24
     50a:	21 50       	subi	r18, 0x01	; 1
     50c:	31 09       	sbc	r19, r1
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	9a 81       	ldd	r25, Y+2	; 0x02
     512:	fc 01       	movw	r30, r24
     514:	33 83       	std	Z+3, r19	; 0x03
     516:	22 83       	std	Z+2, r18	; 0x02
			break;
     518:	19 c0       	rjmp	.+50     	; 0x54c <move_player+0xf0>
		case DOWN:
			if ((*player).y < 10)
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	9a 81       	ldd	r25, Y+2	; 0x02
     51e:	fc 01       	movw	r30, r24
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	93 81       	ldd	r25, Z+3	; 0x03
     524:	0a 97       	sbiw	r24, 0x0a	; 10
     526:	a4 f4       	brge	.+40     	; 0x550 <move_player+0xf4>
				(*player).y++;
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	fc 01       	movw	r30, r24
     52e:	82 81       	ldd	r24, Z+2	; 0x02
     530:	93 81       	ldd	r25, Z+3	; 0x03
     532:	9c 01       	movw	r18, r24
     534:	2f 5f       	subi	r18, 0xFF	; 255
     536:	3f 4f       	sbci	r19, 0xFF	; 255
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	9a 81       	ldd	r25, Y+2	; 0x02
     53c:	fc 01       	movw	r30, r24
     53e:	33 83       	std	Z+3, r19	; 0x03
     540:	22 83       	std	Z+2, r18	; 0x02
			break;
     542:	06 c0       	rjmp	.+12     	; 0x550 <move_player+0xf4>
{
	switch ((*player).direction) {
		case LEFT:
			if ((*player).x > 0)
				(*player).x--;
			break;
     544:	00 00       	nop
     546:	05 c0       	rjmp	.+10     	; 0x552 <move_player+0xf6>
		case RIGHT:
			if ((*player).x < 14)
				(*player).x++;
			break;
     548:	00 00       	nop
     54a:	03 c0       	rjmp	.+6      	; 0x552 <move_player+0xf6>
		case UP:
			if ((*player).y > 0)
				(*player).y--;
			break;
     54c:	00 00       	nop
     54e:	01 c0       	rjmp	.+2      	; 0x552 <move_player+0xf6>
		case DOWN:
			if ((*player).y < 10)
				(*player).y++;
			break;
     550:	00 00       	nop
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     552:	00 00       	nop
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <draw_players_lines>:

/* Returns true if collision */
uint8_t draw_players_lines(Player *player, int playerId)
  {
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	63 97       	sbiw	r28, 0x13	; 19
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
     572:	99 8b       	std	Y+17, r25	; 0x11
     574:	88 8b       	std	Y+16, r24	; 0x10
     576:	7b 8b       	std	Y+19, r23	; 0x13
     578:	6a 8b       	std	Y+18, r22	; 0x12
	uint8_t collision = false;	
     57a:	19 82       	std	Y+1, r1	; 0x01
	int from, to;

	for (int i = 0; i < (*player).turnsCount + 1; i++) {
     57c:	1f 82       	std	Y+7, r1	; 0x07
     57e:	1e 82       	std	Y+6, r1	; 0x06
     580:	3f c3       	rjmp	.+1662   	; 0xc00 <__stack+0x301>

		if (i < (*player).turnsCount) { //Processing every turn
     582:	88 89       	ldd	r24, Y+16	; 0x10
     584:	99 89       	ldd	r25, Y+17	; 0x11
     586:	8f 5b       	subi	r24, 0xBF	; 191
     588:	9f 4f       	sbci	r25, 0xFF	; 255
     58a:	fc 01       	movw	r30, r24
     58c:	20 81       	ld	r18, Z
     58e:	31 81       	ldd	r19, Z+1	; 0x01
     590:	8e 81       	ldd	r24, Y+6	; 0x06
     592:	9f 81       	ldd	r25, Y+7	; 0x07
     594:	82 17       	cp	r24, r18
     596:	93 07       	cpc	r25, r19
     598:	0c f0       	brlt	.+2      	; 0x59c <draw_players_lines+0x3e>
     59a:	d0 c1       	rjmp	.+928    	; 0x93c <__stack+0x3d>

			if ((*player).turns[i].x == (*player).turns[i + 1].x) { //Draw vertical line
     59c:	28 89       	ldd	r18, Y+16	; 0x10
     59e:	39 89       	ldd	r19, Y+17	; 0x11
     5a0:	8e 81       	ldd	r24, Y+6	; 0x06
     5a2:	9f 81       	ldd	r25, Y+7	; 0x07
     5a4:	88 0f       	add	r24, r24
     5a6:	99 1f       	adc	r25, r25
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	82 0f       	add	r24, r18
     5ae:	93 1f       	adc	r25, r19
     5b0:	05 96       	adiw	r24, 0x05	; 5
     5b2:	fc 01       	movw	r30, r24
     5b4:	20 81       	ld	r18, Z
     5b6:	31 81       	ldd	r19, Z+1	; 0x01
     5b8:	8e 81       	ldd	r24, Y+6	; 0x06
     5ba:	9f 81       	ldd	r25, Y+7	; 0x07
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	48 89       	ldd	r20, Y+16	; 0x10
     5c0:	59 89       	ldd	r21, Y+17	; 0x11
     5c2:	88 0f       	add	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	88 0f       	add	r24, r24
     5c8:	99 1f       	adc	r25, r25
     5ca:	84 0f       	add	r24, r20
     5cc:	95 1f       	adc	r25, r21
     5ce:	05 96       	adiw	r24, 0x05	; 5
     5d0:	fc 01       	movw	r30, r24
     5d2:	80 81       	ld	r24, Z
     5d4:	91 81       	ldd	r25, Z+1	; 0x01
     5d6:	28 17       	cp	r18, r24
     5d8:	39 07       	cpc	r19, r25
     5da:	09 f0       	breq	.+2      	; 0x5de <draw_players_lines+0x80>
     5dc:	c7 c0       	rjmp	.+398    	; 0x76c <draw_players_lines+0x20e>

				from = (*player).turns[i].y;
     5de:	28 89       	ldd	r18, Y+16	; 0x10
     5e0:	39 89       	ldd	r19, Y+17	; 0x11
     5e2:	8e 81       	ldd	r24, Y+6	; 0x06
     5e4:	9f 81       	ldd	r25, Y+7	; 0x07
     5e6:	88 0f       	add	r24, r24
     5e8:	99 1f       	adc	r25, r25
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	82 0f       	add	r24, r18
     5f0:	93 1f       	adc	r25, r19
     5f2:	07 96       	adiw	r24, 0x07	; 7
     5f4:	fc 01       	movw	r30, r24
     5f6:	80 81       	ld	r24, Z
     5f8:	91 81       	ldd	r25, Z+1	; 0x01
     5fa:	9b 83       	std	Y+3, r25	; 0x03
     5fc:	8a 83       	std	Y+2, r24	; 0x02
				to = (*player).turns[i + 1].y;
     5fe:	8e 81       	ldd	r24, Y+6	; 0x06
     600:	9f 81       	ldd	r25, Y+7	; 0x07
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	28 89       	ldd	r18, Y+16	; 0x10
     606:	39 89       	ldd	r19, Y+17	; 0x11
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	88 0f       	add	r24, r24
     60e:	99 1f       	adc	r25, r25
     610:	82 0f       	add	r24, r18
     612:	93 1f       	adc	r25, r19
     614:	07 96       	adiw	r24, 0x07	; 7
     616:	fc 01       	movw	r30, r24
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	9d 83       	std	Y+5, r25	; 0x05
     61e:	8c 83       	std	Y+4, r24	; 0x04

				if (from > to) {
     620:	2a 81       	ldd	r18, Y+2	; 0x02
     622:	3b 81       	ldd	r19, Y+3	; 0x03
     624:	8c 81       	ldd	r24, Y+4	; 0x04
     626:	9d 81       	ldd	r25, Y+5	; 0x05
     628:	82 17       	cp	r24, r18
     62a:	93 07       	cpc	r25, r19
     62c:	ac f4       	brge	.+42     	; 0x658 <draw_players_lines+0xfa>
					to = from;
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	9b 81       	ldd	r25, Y+3	; 0x03
     632:	9d 83       	std	Y+5, r25	; 0x05
     634:	8c 83       	std	Y+4, r24	; 0x04
					from = (*player).turns[i + 1].y;
     636:	8e 81       	ldd	r24, Y+6	; 0x06
     638:	9f 81       	ldd	r25, Y+7	; 0x07
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	28 89       	ldd	r18, Y+16	; 0x10
     63e:	39 89       	ldd	r19, Y+17	; 0x11
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	82 0f       	add	r24, r18
     64a:	93 1f       	adc	r25, r19
     64c:	07 96       	adiw	r24, 0x07	; 7
     64e:	fc 01       	movw	r30, r24
     650:	80 81       	ld	r24, Z
     652:	91 81       	ldd	r25, Z+1	; 0x01
     654:	9b 83       	std	Y+3, r25	; 0x03
     656:	8a 83       	std	Y+2, r24	; 0x02
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     658:	8a 81       	ldd	r24, Y+2	; 0x02
     65a:	9b 81       	ldd	r25, Y+3	; 0x03
     65c:	99 87       	std	Y+9, r25	; 0x09
     65e:	88 87       	std	Y+8, r24	; 0x08
     660:	7c c0       	rjmp	.+248    	; 0x75a <draw_players_lines+0x1fc>
					if ((playerId == 1 && gameState[(*player).turns[i].x][j] == 2)
     662:	8a 89       	ldd	r24, Y+18	; 0x12
     664:	9b 89       	ldd	r25, Y+19	; 0x13
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	21 f5       	brne	.+72     	; 0x6b2 <draw_players_lines+0x154>
     66a:	28 89       	ldd	r18, Y+16	; 0x10
     66c:	39 89       	ldd	r19, Y+17	; 0x11
     66e:	8e 81       	ldd	r24, Y+6	; 0x06
     670:	9f 81       	ldd	r25, Y+7	; 0x07
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	88 0f       	add	r24, r24
     678:	99 1f       	adc	r25, r25
     67a:	82 0f       	add	r24, r18
     67c:	93 1f       	adc	r25, r19
     67e:	05 96       	adiw	r24, 0x05	; 5
     680:	fc 01       	movw	r30, r24
     682:	80 81       	ld	r24, Z
     684:	91 81       	ldd	r25, Z+1	; 0x01
     686:	88 0f       	add	r24, r24
     688:	99 1f       	adc	r25, r25
     68a:	9c 01       	movw	r18, r24
     68c:	22 0f       	add	r18, r18
     68e:	33 1f       	adc	r19, r19
     690:	22 0f       	add	r18, r18
     692:	33 1f       	adc	r19, r19
     694:	82 0f       	add	r24, r18
     696:	93 1f       	adc	r25, r19
     698:	28 85       	ldd	r18, Y+8	; 0x08
     69a:	39 85       	ldd	r19, Y+9	; 0x09
     69c:	82 0f       	add	r24, r18
     69e:	93 1f       	adc	r25, r19
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	80 59       	subi	r24, 0x90	; 144
     6a6:	9e 4f       	sbci	r25, 0xFE	; 254
     6a8:	fc 01       	movw	r30, r24
     6aa:	80 81       	ld	r24, Z
     6ac:	91 81       	ldd	r25, Z+1	; 0x01
     6ae:	02 97       	sbiw	r24, 0x02	; 2
     6b0:	41 f1       	breq	.+80     	; 0x702 <draw_players_lines+0x1a4>
							|| (playerId == 2 && gameState[(*player).turns[i].x][j] == 1)) //Collision !
     6b2:	8a 89       	ldd	r24, Y+18	; 0x12
     6b4:	9b 89       	ldd	r25, Y+19	; 0x13
     6b6:	02 97       	sbiw	r24, 0x02	; 2
     6b8:	39 f5       	brne	.+78     	; 0x708 <draw_players_lines+0x1aa>
     6ba:	28 89       	ldd	r18, Y+16	; 0x10
     6bc:	39 89       	ldd	r19, Y+17	; 0x11
     6be:	8e 81       	ldd	r24, Y+6	; 0x06
     6c0:	9f 81       	ldd	r25, Y+7	; 0x07
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	82 0f       	add	r24, r18
     6cc:	93 1f       	adc	r25, r19
     6ce:	05 96       	adiw	r24, 0x05	; 5
     6d0:	fc 01       	movw	r30, r24
     6d2:	80 81       	ld	r24, Z
     6d4:	91 81       	ldd	r25, Z+1	; 0x01
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	9c 01       	movw	r18, r24
     6dc:	22 0f       	add	r18, r18
     6de:	33 1f       	adc	r19, r19
     6e0:	22 0f       	add	r18, r18
     6e2:	33 1f       	adc	r19, r19
     6e4:	82 0f       	add	r24, r18
     6e6:	93 1f       	adc	r25, r19
     6e8:	28 85       	ldd	r18, Y+8	; 0x08
     6ea:	39 85       	ldd	r19, Y+9	; 0x09
     6ec:	82 0f       	add	r24, r18
     6ee:	93 1f       	adc	r25, r19
     6f0:	88 0f       	add	r24, r24
     6f2:	99 1f       	adc	r25, r25
     6f4:	80 59       	subi	r24, 0x90	; 144
     6f6:	9e 4f       	sbci	r25, 0xFE	; 254
     6f8:	fc 01       	movw	r30, r24
     6fa:	80 81       	ld	r24, Z
     6fc:	91 81       	ldd	r25, Z+1	; 0x01
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	19 f4       	brne	.+6      	; 0x708 <draw_players_lines+0x1aa>
						collision = true;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	89 83       	std	Y+1, r24	; 0x01
     706:	24 c0       	rjmp	.+72     	; 0x750 <draw_players_lines+0x1f2>
					else
						gameState[(*player).turns[i].x][j] = playerId;
     708:	28 89       	ldd	r18, Y+16	; 0x10
     70a:	39 89       	ldd	r19, Y+17	; 0x11
     70c:	8e 81       	ldd	r24, Y+6	; 0x06
     70e:	9f 81       	ldd	r25, Y+7	; 0x07
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	88 0f       	add	r24, r24
     716:	99 1f       	adc	r25, r25
     718:	82 0f       	add	r24, r18
     71a:	93 1f       	adc	r25, r19
     71c:	05 96       	adiw	r24, 0x05	; 5
     71e:	fc 01       	movw	r30, r24
     720:	80 81       	ld	r24, Z
     722:	91 81       	ldd	r25, Z+1	; 0x01
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	9c 01       	movw	r18, r24
     72a:	22 0f       	add	r18, r18
     72c:	33 1f       	adc	r19, r19
     72e:	22 0f       	add	r18, r18
     730:	33 1f       	adc	r19, r19
     732:	82 0f       	add	r24, r18
     734:	93 1f       	adc	r25, r19
     736:	28 85       	ldd	r18, Y+8	; 0x08
     738:	39 85       	ldd	r19, Y+9	; 0x09
     73a:	82 0f       	add	r24, r18
     73c:	93 1f       	adc	r25, r19
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	80 59       	subi	r24, 0x90	; 144
     744:	9e 4f       	sbci	r25, 0xFE	; 254
     746:	2a 89       	ldd	r18, Y+18	; 0x12
     748:	3b 89       	ldd	r19, Y+19	; 0x13
     74a:	fc 01       	movw	r30, r24
     74c:	31 83       	std	Z+1, r19	; 0x01
     74e:	20 83       	st	Z, r18
					to = from;
					from = (*player).turns[i + 1].y;
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     750:	88 85       	ldd	r24, Y+8	; 0x08
     752:	99 85       	ldd	r25, Y+9	; 0x09
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	99 87       	std	Y+9, r25	; 0x09
     758:	88 87       	std	Y+8, r24	; 0x08
     75a:	28 85       	ldd	r18, Y+8	; 0x08
     75c:	39 85       	ldd	r19, Y+9	; 0x09
     75e:	8c 81       	ldd	r24, Y+4	; 0x04
     760:	9d 81       	ldd	r25, Y+5	; 0x05
     762:	82 17       	cp	r24, r18
     764:	93 07       	cpc	r25, r19
     766:	0c f0       	brlt	.+2      	; 0x76a <draw_players_lines+0x20c>
     768:	7c cf       	rjmp	.-264    	; 0x662 <draw_players_lines+0x104>
     76a:	45 c2       	rjmp	.+1162   	; 0xbf6 <__stack+0x2f7>
						collision = true;
					else
						gameState[(*player).turns[i].x][j] = playerId;
				}

			} else if ((*player).turns[i].y == (*player).turns[i + 1].y) { //Draw horizontal line
     76c:	28 89       	ldd	r18, Y+16	; 0x10
     76e:	39 89       	ldd	r19, Y+17	; 0x11
     770:	8e 81       	ldd	r24, Y+6	; 0x06
     772:	9f 81       	ldd	r25, Y+7	; 0x07
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	88 0f       	add	r24, r24
     77a:	99 1f       	adc	r25, r25
     77c:	82 0f       	add	r24, r18
     77e:	93 1f       	adc	r25, r19
     780:	07 96       	adiw	r24, 0x07	; 7
     782:	fc 01       	movw	r30, r24
     784:	20 81       	ld	r18, Z
     786:	31 81       	ldd	r19, Z+1	; 0x01
     788:	8e 81       	ldd	r24, Y+6	; 0x06
     78a:	9f 81       	ldd	r25, Y+7	; 0x07
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	48 89       	ldd	r20, Y+16	; 0x10
     790:	59 89       	ldd	r21, Y+17	; 0x11
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	84 0f       	add	r24, r20
     79c:	95 1f       	adc	r25, r21
     79e:	07 96       	adiw	r24, 0x07	; 7
     7a0:	fc 01       	movw	r30, r24
     7a2:	80 81       	ld	r24, Z
     7a4:	91 81       	ldd	r25, Z+1	; 0x01
     7a6:	28 17       	cp	r18, r24
     7a8:	39 07       	cpc	r19, r25
     7aa:	09 f0       	breq	.+2      	; 0x7ae <draw_players_lines+0x250>
     7ac:	24 c2       	rjmp	.+1096   	; 0xbf6 <__stack+0x2f7>

				from = (*player).turns[i].x;
     7ae:	28 89       	ldd	r18, Y+16	; 0x10
     7b0:	39 89       	ldd	r19, Y+17	; 0x11
     7b2:	8e 81       	ldd	r24, Y+6	; 0x06
     7b4:	9f 81       	ldd	r25, Y+7	; 0x07
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	82 0f       	add	r24, r18
     7c0:	93 1f       	adc	r25, r19
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	fc 01       	movw	r30, r24
     7c6:	80 81       	ld	r24, Z
     7c8:	91 81       	ldd	r25, Z+1	; 0x01
     7ca:	9b 83       	std	Y+3, r25	; 0x03
     7cc:	8a 83       	std	Y+2, r24	; 0x02
				to = (*player).turns[i + 1].x;
     7ce:	8e 81       	ldd	r24, Y+6	; 0x06
     7d0:	9f 81       	ldd	r25, Y+7	; 0x07
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	28 89       	ldd	r18, Y+16	; 0x10
     7d6:	39 89       	ldd	r19, Y+17	; 0x11
     7d8:	88 0f       	add	r24, r24
     7da:	99 1f       	adc	r25, r25
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	82 0f       	add	r24, r18
     7e2:	93 1f       	adc	r25, r19
     7e4:	05 96       	adiw	r24, 0x05	; 5
     7e6:	fc 01       	movw	r30, r24
     7e8:	80 81       	ld	r24, Z
     7ea:	91 81       	ldd	r25, Z+1	; 0x01
     7ec:	9d 83       	std	Y+5, r25	; 0x05
     7ee:	8c 83       	std	Y+4, r24	; 0x04

				if (from > to) {
     7f0:	2a 81       	ldd	r18, Y+2	; 0x02
     7f2:	3b 81       	ldd	r19, Y+3	; 0x03
     7f4:	8c 81       	ldd	r24, Y+4	; 0x04
     7f6:	9d 81       	ldd	r25, Y+5	; 0x05
     7f8:	82 17       	cp	r24, r18
     7fa:	93 07       	cpc	r25, r19
     7fc:	ac f4       	brge	.+42     	; 0x828 <draw_players_lines+0x2ca>
					to = from;
     7fe:	8a 81       	ldd	r24, Y+2	; 0x02
     800:	9b 81       	ldd	r25, Y+3	; 0x03
     802:	9d 83       	std	Y+5, r25	; 0x05
     804:	8c 83       	std	Y+4, r24	; 0x04
					from = (*player).turns[i + 1].x;
     806:	8e 81       	ldd	r24, Y+6	; 0x06
     808:	9f 81       	ldd	r25, Y+7	; 0x07
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	28 89       	ldd	r18, Y+16	; 0x10
     80e:	39 89       	ldd	r19, Y+17	; 0x11
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	82 0f       	add	r24, r18
     81a:	93 1f       	adc	r25, r19
     81c:	05 96       	adiw	r24, 0x05	; 5
     81e:	fc 01       	movw	r30, r24
     820:	80 81       	ld	r24, Z
     822:	91 81       	ldd	r25, Z+1	; 0x01
     824:	9b 83       	std	Y+3, r25	; 0x03
     826:	8a 83       	std	Y+2, r24	; 0x02
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	9b 81       	ldd	r25, Y+3	; 0x03
     82c:	9b 87       	std	Y+11, r25	; 0x0b
     82e:	8a 87       	std	Y+10, r24	; 0x0a
     830:	7c c0       	rjmp	.+248    	; 0x92a <__stack+0x2b>
					if ((playerId == 1 && gameState[j][(*player).turns[i].y] == 2)
     832:	8a 89       	ldd	r24, Y+18	; 0x12
     834:	9b 89       	ldd	r25, Y+19	; 0x13
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	21 f5       	brne	.+72     	; 0x882 <draw_players_lines+0x324>
     83a:	28 89       	ldd	r18, Y+16	; 0x10
     83c:	39 89       	ldd	r19, Y+17	; 0x11
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	9f 81       	ldd	r25, Y+7	; 0x07
     842:	88 0f       	add	r24, r24
     844:	99 1f       	adc	r25, r25
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	82 0f       	add	r24, r18
     84c:	93 1f       	adc	r25, r19
     84e:	07 96       	adiw	r24, 0x07	; 7
     850:	fc 01       	movw	r30, r24
     852:	20 81       	ld	r18, Z
     854:	31 81       	ldd	r19, Z+1	; 0x01
     856:	8a 85       	ldd	r24, Y+10	; 0x0a
     858:	9b 85       	ldd	r25, Y+11	; 0x0b
     85a:	88 0f       	add	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	ac 01       	movw	r20, r24
     860:	44 0f       	add	r20, r20
     862:	55 1f       	adc	r21, r21
     864:	44 0f       	add	r20, r20
     866:	55 1f       	adc	r21, r21
     868:	84 0f       	add	r24, r20
     86a:	95 1f       	adc	r25, r21
     86c:	82 0f       	add	r24, r18
     86e:	93 1f       	adc	r25, r19
     870:	88 0f       	add	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	80 59       	subi	r24, 0x90	; 144
     876:	9e 4f       	sbci	r25, 0xFE	; 254
     878:	fc 01       	movw	r30, r24
     87a:	80 81       	ld	r24, Z
     87c:	91 81       	ldd	r25, Z+1	; 0x01
     87e:	02 97       	sbiw	r24, 0x02	; 2
     880:	41 f1       	breq	.+80     	; 0x8d2 <draw_players_lines+0x374>
						   || (playerId == 2 && gameState[j][(*player).turns[i].y] == 1)) //Collision !
     882:	8a 89       	ldd	r24, Y+18	; 0x12
     884:	9b 89       	ldd	r25, Y+19	; 0x13
     886:	02 97       	sbiw	r24, 0x02	; 2
     888:	39 f5       	brne	.+78     	; 0x8d8 <draw_players_lines+0x37a>
     88a:	28 89       	ldd	r18, Y+16	; 0x10
     88c:	39 89       	ldd	r19, Y+17	; 0x11
     88e:	8e 81       	ldd	r24, Y+6	; 0x06
     890:	9f 81       	ldd	r25, Y+7	; 0x07
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	88 0f       	add	r24, r24
     898:	99 1f       	adc	r25, r25
     89a:	82 0f       	add	r24, r18
     89c:	93 1f       	adc	r25, r19
     89e:	07 96       	adiw	r24, 0x07	; 7
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 81       	ld	r18, Z
     8a4:	31 81       	ldd	r19, Z+1	; 0x01
     8a6:	8a 85       	ldd	r24, Y+10	; 0x0a
     8a8:	9b 85       	ldd	r25, Y+11	; 0x0b
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	ac 01       	movw	r20, r24
     8b0:	44 0f       	add	r20, r20
     8b2:	55 1f       	adc	r21, r21
     8b4:	44 0f       	add	r20, r20
     8b6:	55 1f       	adc	r21, r21
     8b8:	84 0f       	add	r24, r20
     8ba:	95 1f       	adc	r25, r21
     8bc:	82 0f       	add	r24, r18
     8be:	93 1f       	adc	r25, r19
     8c0:	88 0f       	add	r24, r24
     8c2:	99 1f       	adc	r25, r25
     8c4:	80 59       	subi	r24, 0x90	; 144
     8c6:	9e 4f       	sbci	r25, 0xFE	; 254
     8c8:	fc 01       	movw	r30, r24
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	19 f4       	brne	.+6      	; 0x8d8 <draw_players_lines+0x37a>
						collision = true;
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	89 83       	std	Y+1, r24	; 0x01
     8d6:	24 c0       	rjmp	.+72     	; 0x920 <__stack+0x21>
					else
						gameState[j][(*player).turns[i].y] = playerId;
     8d8:	28 89       	ldd	r18, Y+16	; 0x10
     8da:	39 89       	ldd	r19, Y+17	; 0x11
     8dc:	8e 81       	ldd	r24, Y+6	; 0x06
     8de:	9f 81       	ldd	r25, Y+7	; 0x07
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	88 0f       	add	r24, r24
     8e6:	99 1f       	adc	r25, r25
     8e8:	82 0f       	add	r24, r18
     8ea:	93 1f       	adc	r25, r19
     8ec:	07 96       	adiw	r24, 0x07	; 7
     8ee:	fc 01       	movw	r30, r24
     8f0:	20 81       	ld	r18, Z
     8f2:	31 81       	ldd	r19, Z+1	; 0x01
     8f4:	8a 85       	ldd	r24, Y+10	; 0x0a
     8f6:	9b 85       	ldd	r25, Y+11	; 0x0b
     8f8:	88 0f       	add	r24, r24
     8fa:	99 1f       	adc	r25, r25
     8fc:	ac 01       	movw	r20, r24
     8fe:	44 0f       	add	r20, r20
     900:	55 1f       	adc	r21, r21
     902:	44 0f       	add	r20, r20
     904:	55 1f       	adc	r21, r21
     906:	84 0f       	add	r24, r20
     908:	95 1f       	adc	r25, r21
     90a:	82 0f       	add	r24, r18
     90c:	93 1f       	adc	r25, r19
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	80 59       	subi	r24, 0x90	; 144
     914:	9e 4f       	sbci	r25, 0xFE	; 254
     916:	2a 89       	ldd	r18, Y+18	; 0x12
     918:	3b 89       	ldd	r19, Y+19	; 0x13
     91a:	fc 01       	movw	r30, r24
     91c:	31 83       	std	Z+1, r19	; 0x01
     91e:	20 83       	st	Z, r18
					to = from;
					from = (*player).turns[i + 1].x;
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     920:	8a 85       	ldd	r24, Y+10	; 0x0a
     922:	9b 85       	ldd	r25, Y+11	; 0x0b
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	9b 87       	std	Y+11, r25	; 0x0b
     928:	8a 87       	std	Y+10, r24	; 0x0a
     92a:	2a 85       	ldd	r18, Y+10	; 0x0a
     92c:	3b 85       	ldd	r19, Y+11	; 0x0b
     92e:	8c 81       	ldd	r24, Y+4	; 0x04
     930:	9d 81       	ldd	r25, Y+5	; 0x05
     932:	82 17       	cp	r24, r18
     934:	93 07       	cpc	r25, r19
     936:	0c f0       	brlt	.+2      	; 0x93a <__stack+0x3b>
     938:	7c cf       	rjmp	.-264    	; 0x832 <draw_players_lines+0x2d4>
     93a:	5d c1       	rjmp	.+698    	; 0xbf6 <__stack+0x2f7>

			}

		} else { //Processing the current position

			if ((*player).turns[i].x == (*player).x) { //Draw vertical line
     93c:	28 89       	ldd	r18, Y+16	; 0x10
     93e:	39 89       	ldd	r19, Y+17	; 0x11
     940:	8e 81       	ldd	r24, Y+6	; 0x06
     942:	9f 81       	ldd	r25, Y+7	; 0x07
     944:	88 0f       	add	r24, r24
     946:	99 1f       	adc	r25, r25
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	82 0f       	add	r24, r18
     94e:	93 1f       	adc	r25, r19
     950:	05 96       	adiw	r24, 0x05	; 5
     952:	fc 01       	movw	r30, r24
     954:	20 81       	ld	r18, Z
     956:	31 81       	ldd	r19, Z+1	; 0x01
     958:	88 89       	ldd	r24, Y+16	; 0x10
     95a:	99 89       	ldd	r25, Y+17	; 0x11
     95c:	fc 01       	movw	r30, r24
     95e:	80 81       	ld	r24, Z
     960:	91 81       	ldd	r25, Z+1	; 0x01
     962:	28 17       	cp	r18, r24
     964:	39 07       	cpc	r19, r25
     966:	09 f0       	breq	.+2      	; 0x96a <__stack+0x6b>
     968:	98 c0       	rjmp	.+304    	; 0xa9a <__stack+0x19b>

				from = (*player).turns[i].y;
     96a:	28 89       	ldd	r18, Y+16	; 0x10
     96c:	39 89       	ldd	r19, Y+17	; 0x11
     96e:	8e 81       	ldd	r24, Y+6	; 0x06
     970:	9f 81       	ldd	r25, Y+7	; 0x07
     972:	88 0f       	add	r24, r24
     974:	99 1f       	adc	r25, r25
     976:	88 0f       	add	r24, r24
     978:	99 1f       	adc	r25, r25
     97a:	82 0f       	add	r24, r18
     97c:	93 1f       	adc	r25, r19
     97e:	07 96       	adiw	r24, 0x07	; 7
     980:	fc 01       	movw	r30, r24
     982:	80 81       	ld	r24, Z
     984:	91 81       	ldd	r25, Z+1	; 0x01
     986:	9b 83       	std	Y+3, r25	; 0x03
     988:	8a 83       	std	Y+2, r24	; 0x02
				to = (*player).y;
     98a:	88 89       	ldd	r24, Y+16	; 0x10
     98c:	99 89       	ldd	r25, Y+17	; 0x11
     98e:	fc 01       	movw	r30, r24
     990:	82 81       	ldd	r24, Z+2	; 0x02
     992:	93 81       	ldd	r25, Z+3	; 0x03
     994:	9d 83       	std	Y+5, r25	; 0x05
     996:	8c 83       	std	Y+4, r24	; 0x04

				if (from > to) {
     998:	2a 81       	ldd	r18, Y+2	; 0x02
     99a:	3b 81       	ldd	r19, Y+3	; 0x03
     99c:	8c 81       	ldd	r24, Y+4	; 0x04
     99e:	9d 81       	ldd	r25, Y+5	; 0x05
     9a0:	82 17       	cp	r24, r18
     9a2:	93 07       	cpc	r25, r19
     9a4:	5c f4       	brge	.+22     	; 0x9bc <__stack+0xbd>
					to = from;
     9a6:	8a 81       	ldd	r24, Y+2	; 0x02
     9a8:	9b 81       	ldd	r25, Y+3	; 0x03
     9aa:	9d 83       	std	Y+5, r25	; 0x05
     9ac:	8c 83       	std	Y+4, r24	; 0x04
					from = (*player).y;
     9ae:	88 89       	ldd	r24, Y+16	; 0x10
     9b0:	99 89       	ldd	r25, Y+17	; 0x11
     9b2:	fc 01       	movw	r30, r24
     9b4:	82 81       	ldd	r24, Z+2	; 0x02
     9b6:	93 81       	ldd	r25, Z+3	; 0x03
     9b8:	9b 83       	std	Y+3, r25	; 0x03
     9ba:	8a 83       	std	Y+2, r24	; 0x02
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     9bc:	8a 81       	ldd	r24, Y+2	; 0x02
     9be:	9b 81       	ldd	r25, Y+3	; 0x03
     9c0:	9d 87       	std	Y+13, r25	; 0x0d
     9c2:	8c 87       	std	Y+12, r24	; 0x0c
     9c4:	61 c0       	rjmp	.+194    	; 0xa88 <__stack+0x189>
					if ((playerId == 1 && gameState[(*player).x][j] == 2)
     9c6:	8a 89       	ldd	r24, Y+18	; 0x12
     9c8:	9b 89       	ldd	r25, Y+19	; 0x13
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	d9 f4       	brne	.+54     	; 0xa04 <__stack+0x105>
     9ce:	88 89       	ldd	r24, Y+16	; 0x10
     9d0:	99 89       	ldd	r25, Y+17	; 0x11
     9d2:	fc 01       	movw	r30, r24
     9d4:	80 81       	ld	r24, Z
     9d6:	91 81       	ldd	r25, Z+1	; 0x01
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	9c 01       	movw	r18, r24
     9de:	22 0f       	add	r18, r18
     9e0:	33 1f       	adc	r19, r19
     9e2:	22 0f       	add	r18, r18
     9e4:	33 1f       	adc	r19, r19
     9e6:	82 0f       	add	r24, r18
     9e8:	93 1f       	adc	r25, r19
     9ea:	2c 85       	ldd	r18, Y+12	; 0x0c
     9ec:	3d 85       	ldd	r19, Y+13	; 0x0d
     9ee:	82 0f       	add	r24, r18
     9f0:	93 1f       	adc	r25, r19
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	80 59       	subi	r24, 0x90	; 144
     9f8:	9e 4f       	sbci	r25, 0xFE	; 254
     9fa:	fc 01       	movw	r30, r24
     9fc:	80 81       	ld	r24, Z
     9fe:	91 81       	ldd	r25, Z+1	; 0x01
     a00:	02 97       	sbiw	r24, 0x02	; 2
     a02:	f9 f0       	breq	.+62     	; 0xa42 <__stack+0x143>
						   || (playerId == 2 && gameState[(*player).x][j] == 1)) //Collision !
     a04:	8a 89       	ldd	r24, Y+18	; 0x12
     a06:	9b 89       	ldd	r25, Y+19	; 0x13
     a08:	02 97       	sbiw	r24, 0x02	; 2
     a0a:	f1 f4       	brne	.+60     	; 0xa48 <__stack+0x149>
     a0c:	88 89       	ldd	r24, Y+16	; 0x10
     a0e:	99 89       	ldd	r25, Y+17	; 0x11
     a10:	fc 01       	movw	r30, r24
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	9c 01       	movw	r18, r24
     a1c:	22 0f       	add	r18, r18
     a1e:	33 1f       	adc	r19, r19
     a20:	22 0f       	add	r18, r18
     a22:	33 1f       	adc	r19, r19
     a24:	82 0f       	add	r24, r18
     a26:	93 1f       	adc	r25, r19
     a28:	2c 85       	ldd	r18, Y+12	; 0x0c
     a2a:	3d 85       	ldd	r19, Y+13	; 0x0d
     a2c:	82 0f       	add	r24, r18
     a2e:	93 1f       	adc	r25, r19
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	80 59       	subi	r24, 0x90	; 144
     a36:	9e 4f       	sbci	r25, 0xFE	; 254
     a38:	fc 01       	movw	r30, r24
     a3a:	80 81       	ld	r24, Z
     a3c:	91 81       	ldd	r25, Z+1	; 0x01
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__stack+0x149>
						collision = true;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	89 83       	std	Y+1, r24	; 0x01
     a46:	1b c0       	rjmp	.+54     	; 0xa7e <__stack+0x17f>
					else
						gameState[(*player).x][j] = playerId;
     a48:	88 89       	ldd	r24, Y+16	; 0x10
     a4a:	99 89       	ldd	r25, Y+17	; 0x11
     a4c:	fc 01       	movw	r30, r24
     a4e:	80 81       	ld	r24, Z
     a50:	91 81       	ldd	r25, Z+1	; 0x01
     a52:	88 0f       	add	r24, r24
     a54:	99 1f       	adc	r25, r25
     a56:	9c 01       	movw	r18, r24
     a58:	22 0f       	add	r18, r18
     a5a:	33 1f       	adc	r19, r19
     a5c:	22 0f       	add	r18, r18
     a5e:	33 1f       	adc	r19, r19
     a60:	82 0f       	add	r24, r18
     a62:	93 1f       	adc	r25, r19
     a64:	2c 85       	ldd	r18, Y+12	; 0x0c
     a66:	3d 85       	ldd	r19, Y+13	; 0x0d
     a68:	82 0f       	add	r24, r18
     a6a:	93 1f       	adc	r25, r19
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	80 59       	subi	r24, 0x90	; 144
     a72:	9e 4f       	sbci	r25, 0xFE	; 254
     a74:	2a 89       	ldd	r18, Y+18	; 0x12
     a76:	3b 89       	ldd	r19, Y+19	; 0x13
     a78:	fc 01       	movw	r30, r24
     a7a:	31 83       	std	Z+1, r19	; 0x01
     a7c:	20 83       	st	Z, r18
					to = from;
					from = (*player).y;
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     a7e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a80:	9d 85       	ldd	r25, Y+13	; 0x0d
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	9d 87       	std	Y+13, r25	; 0x0d
     a86:	8c 87       	std	Y+12, r24	; 0x0c
     a88:	2c 85       	ldd	r18, Y+12	; 0x0c
     a8a:	3d 85       	ldd	r19, Y+13	; 0x0d
     a8c:	8c 81       	ldd	r24, Y+4	; 0x04
     a8e:	9d 81       	ldd	r25, Y+5	; 0x05
     a90:	82 17       	cp	r24, r18
     a92:	93 07       	cpc	r25, r19
     a94:	0c f0       	brlt	.+2      	; 0xa98 <__stack+0x199>
     a96:	97 cf       	rjmp	.-210    	; 0x9c6 <__stack+0xc7>
     a98:	ae c0       	rjmp	.+348    	; 0xbf6 <__stack+0x2f7>
						collision = true;
					else
						gameState[(*player).x][j] = playerId;
				}

			} else if ((*player).turns[i].y == (*player).y) { //Draw horizontal line
     a9a:	28 89       	ldd	r18, Y+16	; 0x10
     a9c:	39 89       	ldd	r19, Y+17	; 0x11
     a9e:	8e 81       	ldd	r24, Y+6	; 0x06
     aa0:	9f 81       	ldd	r25, Y+7	; 0x07
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	82 0f       	add	r24, r18
     aac:	93 1f       	adc	r25, r19
     aae:	07 96       	adiw	r24, 0x07	; 7
     ab0:	fc 01       	movw	r30, r24
     ab2:	20 81       	ld	r18, Z
     ab4:	31 81       	ldd	r19, Z+1	; 0x01
     ab6:	88 89       	ldd	r24, Y+16	; 0x10
     ab8:	99 89       	ldd	r25, Y+17	; 0x11
     aba:	fc 01       	movw	r30, r24
     abc:	82 81       	ldd	r24, Z+2	; 0x02
     abe:	93 81       	ldd	r25, Z+3	; 0x03
     ac0:	28 17       	cp	r18, r24
     ac2:	39 07       	cpc	r19, r25
     ac4:	09 f0       	breq	.+2      	; 0xac8 <__stack+0x1c9>
     ac6:	97 c0       	rjmp	.+302    	; 0xbf6 <__stack+0x2f7>

				from = (*player).turns[i].x;
     ac8:	28 89       	ldd	r18, Y+16	; 0x10
     aca:	39 89       	ldd	r19, Y+17	; 0x11
     acc:	8e 81       	ldd	r24, Y+6	; 0x06
     ace:	9f 81       	ldd	r25, Y+7	; 0x07
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	82 0f       	add	r24, r18
     ada:	93 1f       	adc	r25, r19
     adc:	05 96       	adiw	r24, 0x05	; 5
     ade:	fc 01       	movw	r30, r24
     ae0:	80 81       	ld	r24, Z
     ae2:	91 81       	ldd	r25, Z+1	; 0x01
     ae4:	9b 83       	std	Y+3, r25	; 0x03
     ae6:	8a 83       	std	Y+2, r24	; 0x02
				to = (*player).x;
     ae8:	88 89       	ldd	r24, Y+16	; 0x10
     aea:	99 89       	ldd	r25, Y+17	; 0x11
     aec:	fc 01       	movw	r30, r24
     aee:	80 81       	ld	r24, Z
     af0:	91 81       	ldd	r25, Z+1	; 0x01
     af2:	9d 83       	std	Y+5, r25	; 0x05
     af4:	8c 83       	std	Y+4, r24	; 0x04

				if (from > to) {
     af6:	2a 81       	ldd	r18, Y+2	; 0x02
     af8:	3b 81       	ldd	r19, Y+3	; 0x03
     afa:	8c 81       	ldd	r24, Y+4	; 0x04
     afc:	9d 81       	ldd	r25, Y+5	; 0x05
     afe:	82 17       	cp	r24, r18
     b00:	93 07       	cpc	r25, r19
     b02:	5c f4       	brge	.+22     	; 0xb1a <__stack+0x21b>
					to = from;
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	9b 81       	ldd	r25, Y+3	; 0x03
     b08:	9d 83       	std	Y+5, r25	; 0x05
     b0a:	8c 83       	std	Y+4, r24	; 0x04
					from = (*player).x;
     b0c:	88 89       	ldd	r24, Y+16	; 0x10
     b0e:	99 89       	ldd	r25, Y+17	; 0x11
     b10:	fc 01       	movw	r30, r24
     b12:	80 81       	ld	r24, Z
     b14:	91 81       	ldd	r25, Z+1	; 0x01
     b16:	9b 83       	std	Y+3, r25	; 0x03
     b18:	8a 83       	std	Y+2, r24	; 0x02
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     b1a:	8a 81       	ldd	r24, Y+2	; 0x02
     b1c:	9b 81       	ldd	r25, Y+3	; 0x03
     b1e:	9f 87       	std	Y+15, r25	; 0x0f
     b20:	8e 87       	std	Y+14, r24	; 0x0e
     b22:	61 c0       	rjmp	.+194    	; 0xbe6 <__stack+0x2e7>
					if ((playerId == 1 && gameState[j][(*player).y] == 2) || (playerId == 2 && gameState[j][(*player).y] == 1)) //Collision !
     b24:	8a 89       	ldd	r24, Y+18	; 0x12
     b26:	9b 89       	ldd	r25, Y+19	; 0x13
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	d9 f4       	brne	.+54     	; 0xb62 <__stack+0x263>
     b2c:	88 89       	ldd	r24, Y+16	; 0x10
     b2e:	99 89       	ldd	r25, Y+17	; 0x11
     b30:	fc 01       	movw	r30, r24
     b32:	22 81       	ldd	r18, Z+2	; 0x02
     b34:	33 81       	ldd	r19, Z+3	; 0x03
     b36:	8e 85       	ldd	r24, Y+14	; 0x0e
     b38:	9f 85       	ldd	r25, Y+15	; 0x0f
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	ac 01       	movw	r20, r24
     b40:	44 0f       	add	r20, r20
     b42:	55 1f       	adc	r21, r21
     b44:	44 0f       	add	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	84 0f       	add	r24, r20
     b4a:	95 1f       	adc	r25, r21
     b4c:	82 0f       	add	r24, r18
     b4e:	93 1f       	adc	r25, r19
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	80 59       	subi	r24, 0x90	; 144
     b56:	9e 4f       	sbci	r25, 0xFE	; 254
     b58:	fc 01       	movw	r30, r24
     b5a:	80 81       	ld	r24, Z
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	02 97       	sbiw	r24, 0x02	; 2
     b60:	f9 f0       	breq	.+62     	; 0xba0 <__stack+0x2a1>
     b62:	8a 89       	ldd	r24, Y+18	; 0x12
     b64:	9b 89       	ldd	r25, Y+19	; 0x13
     b66:	02 97       	sbiw	r24, 0x02	; 2
     b68:	f1 f4       	brne	.+60     	; 0xba6 <__stack+0x2a7>
     b6a:	88 89       	ldd	r24, Y+16	; 0x10
     b6c:	99 89       	ldd	r25, Y+17	; 0x11
     b6e:	fc 01       	movw	r30, r24
     b70:	22 81       	ldd	r18, Z+2	; 0x02
     b72:	33 81       	ldd	r19, Z+3	; 0x03
     b74:	8e 85       	ldd	r24, Y+14	; 0x0e
     b76:	9f 85       	ldd	r25, Y+15	; 0x0f
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	ac 01       	movw	r20, r24
     b7e:	44 0f       	add	r20, r20
     b80:	55 1f       	adc	r21, r21
     b82:	44 0f       	add	r20, r20
     b84:	55 1f       	adc	r21, r21
     b86:	84 0f       	add	r24, r20
     b88:	95 1f       	adc	r25, r21
     b8a:	82 0f       	add	r24, r18
     b8c:	93 1f       	adc	r25, r19
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	80 59       	subi	r24, 0x90	; 144
     b94:	9e 4f       	sbci	r25, 0xFE	; 254
     b96:	fc 01       	movw	r30, r24
     b98:	80 81       	ld	r24, Z
     b9a:	91 81       	ldd	r25, Z+1	; 0x01
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	19 f4       	brne	.+6      	; 0xba6 <__stack+0x2a7>
						collision = true;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	89 83       	std	Y+1, r24	; 0x01
     ba4:	1b c0       	rjmp	.+54     	; 0xbdc <__stack+0x2dd>
					else
						gameState[j][(*player).y] = playerId;
     ba6:	88 89       	ldd	r24, Y+16	; 0x10
     ba8:	99 89       	ldd	r25, Y+17	; 0x11
     baa:	fc 01       	movw	r30, r24
     bac:	22 81       	ldd	r18, Z+2	; 0x02
     bae:	33 81       	ldd	r19, Z+3	; 0x03
     bb0:	8e 85       	ldd	r24, Y+14	; 0x0e
     bb2:	9f 85       	ldd	r25, Y+15	; 0x0f
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	ac 01       	movw	r20, r24
     bba:	44 0f       	add	r20, r20
     bbc:	55 1f       	adc	r21, r21
     bbe:	44 0f       	add	r20, r20
     bc0:	55 1f       	adc	r21, r21
     bc2:	84 0f       	add	r24, r20
     bc4:	95 1f       	adc	r25, r21
     bc6:	82 0f       	add	r24, r18
     bc8:	93 1f       	adc	r25, r19
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	80 59       	subi	r24, 0x90	; 144
     bd0:	9e 4f       	sbci	r25, 0xFE	; 254
     bd2:	2a 89       	ldd	r18, Y+18	; 0x12
     bd4:	3b 89       	ldd	r19, Y+19	; 0x13
     bd6:	fc 01       	movw	r30, r24
     bd8:	31 83       	std	Z+1, r19	; 0x01
     bda:	20 83       	st	Z, r18
					to = from;
					from = (*player).x;
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     bdc:	8e 85       	ldd	r24, Y+14	; 0x0e
     bde:	9f 85       	ldd	r25, Y+15	; 0x0f
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	9f 87       	std	Y+15, r25	; 0x0f
     be4:	8e 87       	std	Y+14, r24	; 0x0e
     be6:	2e 85       	ldd	r18, Y+14	; 0x0e
     be8:	3f 85       	ldd	r19, Y+15	; 0x0f
     bea:	8c 81       	ldd	r24, Y+4	; 0x04
     bec:	9d 81       	ldd	r25, Y+5	; 0x05
     bee:	82 17       	cp	r24, r18
     bf0:	93 07       	cpc	r25, r19
     bf2:	0c f0       	brlt	.+2      	; 0xbf6 <__stack+0x2f7>
     bf4:	97 cf       	rjmp	.-210    	; 0xb24 <__stack+0x225>
uint8_t draw_players_lines(Player *player, int playerId)
  {
	uint8_t collision = false;	
	int from, to;

	for (int i = 0; i < (*player).turnsCount + 1; i++) {
     bf6:	8e 81       	ldd	r24, Y+6	; 0x06
     bf8:	9f 81       	ldd	r25, Y+7	; 0x07
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	9f 83       	std	Y+7, r25	; 0x07
     bfe:	8e 83       	std	Y+6, r24	; 0x06
     c00:	88 89       	ldd	r24, Y+16	; 0x10
     c02:	99 89       	ldd	r25, Y+17	; 0x11
     c04:	8f 5b       	subi	r24, 0xBF	; 191
     c06:	9f 4f       	sbci	r25, 0xFF	; 255
     c08:	fc 01       	movw	r30, r24
     c0a:	80 81       	ld	r24, Z
     c0c:	91 81       	ldd	r25, Z+1	; 0x01
     c0e:	9c 01       	movw	r18, r24
     c10:	2f 5f       	subi	r18, 0xFF	; 255
     c12:	3f 4f       	sbci	r19, 0xFF	; 255
     c14:	8e 81       	ldd	r24, Y+6	; 0x06
     c16:	9f 81       	ldd	r25, Y+7	; 0x07
     c18:	82 17       	cp	r24, r18
     c1a:	93 07       	cpc	r25, r19
     c1c:	0c f4       	brge	.+2      	; 0xc20 <__stack+0x321>
     c1e:	b1 cc       	rjmp	.-1694   	; 0x582 <draw_players_lines+0x24>
			}

		}
	}

	return collision;
     c20:	89 81       	ldd	r24, Y+1	; 0x01
}
     c22:	63 96       	adiw	r28, 0x13	; 19
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	de bf       	out	0x3e, r29	; 62
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret

00000c34 <game_processing>:

/* TODO: protect gameState with a mutex */
void game_processing(void *pvParameters)
{
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	29 97       	sbiw	r28, 0x09	; 9
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	99 87       	std	Y+9, r25	; 0x09
     c4a:	88 87       	std	Y+8, r24	; 0x08
	/* Populate gameState from the players' positions and tracks:
	* Start at turn[i] to compare with turn[i - 1] for each player
	*/

	bool collision = false;
     c4c:	19 82       	std	Y+1, r1	; 0x01

	for(;;) {

		while(!collision) {
     c4e:	f1 c0       	rjmp	.+482    	; 0xe32 <game_processing+0x1fe>
			if (xSemaphoreTake(xGameStateSemaphore, (TickType_t) 10) && xSemaphoreTake(xPlayerOneSemaphore, (TickType_t) 10) && xSemaphoreTake(xPlayerTwoSemaphore, (TickType_t) 10)) {
     c50:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <xGameStateSemaphore>
     c54:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <xGameStateSemaphore+0x1>
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	4a e0       	ldi	r20, 0x0A	; 10
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <xQueueGenericReceive>
     c66:	88 23       	and	r24, r24
     c68:	09 f4       	brne	.+2      	; 0xc6c <game_processing+0x38>
     c6a:	df c0       	rjmp	.+446    	; 0xe2a <game_processing+0x1f6>
     c6c:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <xPlayerOneSemaphore>
     c70:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <xPlayerOneSemaphore+0x1>
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	4a e0       	ldi	r20, 0x0A	; 10
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <xQueueGenericReceive>
     c82:	88 23       	and	r24, r24
     c84:	09 f4       	brne	.+2      	; 0xc88 <game_processing+0x54>
     c86:	d1 c0       	rjmp	.+418    	; 0xe2a <game_processing+0x1f6>
     c88:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <xPlayerTwoSemaphore>
     c8c:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <xPlayerTwoSemaphore+0x1>
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	4a e0       	ldi	r20, 0x0A	; 10
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <xQueueGenericReceive>
     c9e:	88 23       	and	r24, r24
     ca0:	09 f4       	brne	.+2      	; 0xca4 <game_processing+0x70>
     ca2:	c3 c0       	rjmp	.+390    	; 0xe2a <game_processing+0x1f6>
				for (int p = 1; p <= 2; p++) {
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	9b 83       	std	Y+3, r25	; 0x03
     caa:	8a 83       	std	Y+2, r24	; 0x02
     cac:	b9 c0       	rjmp	.+370    	; 0xe20 <game_processing+0x1ec>
					/* Erase player */
					for (int i = 0; i < 14; i++)
     cae:	1d 82       	std	Y+5, r1	; 0x05
     cb0:	1c 82       	std	Y+4, r1	; 0x04
     cb2:	60 c0       	rjmp	.+192    	; 0xd74 <game_processing+0x140>
					for (int j = 0; j < 10; j++)
     cb4:	1f 82       	std	Y+7, r1	; 0x07
     cb6:	1e 82       	std	Y+6, r1	; 0x06
     cb8:	53 c0       	rjmp	.+166    	; 0xd60 <game_processing+0x12c>
					if ((p == 0 && gameState[i][j] == 1)
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	9b 81       	ldd	r25, Y+3	; 0x03
     cbe:	89 2b       	or	r24, r25
     cc0:	c1 f4       	brne	.+48     	; 0xcf2 <game_processing+0xbe>
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	9d 81       	ldd	r25, Y+5	; 0x05
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	9c 01       	movw	r18, r24
     ccc:	22 0f       	add	r18, r18
     cce:	33 1f       	adc	r19, r19
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	82 0f       	add	r24, r18
     cd6:	93 1f       	adc	r25, r19
     cd8:	2e 81       	ldd	r18, Y+6	; 0x06
     cda:	3f 81       	ldd	r19, Y+7	; 0x07
     cdc:	82 0f       	add	r24, r18
     cde:	93 1f       	adc	r25, r19
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	80 59       	subi	r24, 0x90	; 144
     ce6:	9e 4f       	sbci	r25, 0xFE	; 254
     ce8:	fc 01       	movw	r30, r24
     cea:	80 81       	ld	r24, Z
     cec:	91 81       	ldd	r25, Z+1	; 0x01
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	e1 f0       	breq	.+56     	; 0xd2a <game_processing+0xf6>
					|| (p == 1 && gameState[i][j] == 2))
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	9b 81       	ldd	r25, Y+3	; 0x03
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	71 f5       	brne	.+92     	; 0xd56 <game_processing+0x122>
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	9d 81       	ldd	r25, Y+5	; 0x05
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	9c 01       	movw	r18, r24
     d04:	22 0f       	add	r18, r18
     d06:	33 1f       	adc	r19, r19
     d08:	22 0f       	add	r18, r18
     d0a:	33 1f       	adc	r19, r19
     d0c:	82 0f       	add	r24, r18
     d0e:	93 1f       	adc	r25, r19
     d10:	2e 81       	ldd	r18, Y+6	; 0x06
     d12:	3f 81       	ldd	r19, Y+7	; 0x07
     d14:	82 0f       	add	r24, r18
     d16:	93 1f       	adc	r25, r19
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	80 59       	subi	r24, 0x90	; 144
     d1e:	9e 4f       	sbci	r25, 0xFE	; 254
     d20:	fc 01       	movw	r30, r24
     d22:	80 81       	ld	r24, Z
     d24:	91 81       	ldd	r25, Z+1	; 0x01
     d26:	02 97       	sbiw	r24, 0x02	; 2
     d28:	b1 f4       	brne	.+44     	; 0xd56 <game_processing+0x122>
					gameState[i][j] = 0;
     d2a:	8c 81       	ldd	r24, Y+4	; 0x04
     d2c:	9d 81       	ldd	r25, Y+5	; 0x05
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	9c 01       	movw	r18, r24
     d34:	22 0f       	add	r18, r18
     d36:	33 1f       	adc	r19, r19
     d38:	22 0f       	add	r18, r18
     d3a:	33 1f       	adc	r19, r19
     d3c:	82 0f       	add	r24, r18
     d3e:	93 1f       	adc	r25, r19
     d40:	2e 81       	ldd	r18, Y+6	; 0x06
     d42:	3f 81       	ldd	r19, Y+7	; 0x07
     d44:	82 0f       	add	r24, r18
     d46:	93 1f       	adc	r25, r19
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	80 59       	subi	r24, 0x90	; 144
     d4e:	9e 4f       	sbci	r25, 0xFE	; 254
     d50:	fc 01       	movw	r30, r24
     d52:	11 82       	std	Z+1, r1	; 0x01
     d54:	10 82       	st	Z, r1
		while(!collision) {
			if (xSemaphoreTake(xGameStateSemaphore, (TickType_t) 10) && xSemaphoreTake(xPlayerOneSemaphore, (TickType_t) 10) && xSemaphoreTake(xPlayerTwoSemaphore, (TickType_t) 10)) {
				for (int p = 1; p <= 2; p++) {
					/* Erase player */
					for (int i = 0; i < 14; i++)
					for (int j = 0; j < 10; j++)
     d56:	8e 81       	ldd	r24, Y+6	; 0x06
     d58:	9f 81       	ldd	r25, Y+7	; 0x07
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	9f 83       	std	Y+7, r25	; 0x07
     d5e:	8e 83       	std	Y+6, r24	; 0x06
     d60:	8e 81       	ldd	r24, Y+6	; 0x06
     d62:	9f 81       	ldd	r25, Y+7	; 0x07
     d64:	0a 97       	sbiw	r24, 0x0a	; 10
     d66:	0c f4       	brge	.+2      	; 0xd6a <game_processing+0x136>
     d68:	a8 cf       	rjmp	.-176    	; 0xcba <game_processing+0x86>

		while(!collision) {
			if (xSemaphoreTake(xGameStateSemaphore, (TickType_t) 10) && xSemaphoreTake(xPlayerOneSemaphore, (TickType_t) 10) && xSemaphoreTake(xPlayerTwoSemaphore, (TickType_t) 10)) {
				for (int p = 1; p <= 2; p++) {
					/* Erase player */
					for (int i = 0; i < 14; i++)
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	9d 81       	ldd	r25, Y+5	; 0x05
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	9d 83       	std	Y+5, r25	; 0x05
     d72:	8c 83       	std	Y+4, r24	; 0x04
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	0e 97       	sbiw	r24, 0x0e	; 14
     d7a:	0c f4       	brge	.+2      	; 0xd7e <game_processing+0x14a>
     d7c:	9b cf       	rjmp	.-202    	; 0xcb4 <game_processing+0x80>
					gameState[i][j] = 0;
			
			

					/* Move players in their current direction */
					if (p == 1) {
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	9b 81       	ldd	r25, Y+3	; 0x03
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	91 f4       	brne	.+36     	; 0xdaa <game_processing+0x176>
						collision = draw_players_lines(&playerOne, p);
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	9b 81       	ldd	r25, Y+3	; 0x03
     d8a:	bc 01       	movw	r22, r24
     d8c:	88 e8       	ldi	r24, 0x88	; 136
     d8e:	92 e0       	ldi	r25, 0x02	; 2
     d90:	0e 94 af 02 	call	0x55e	; 0x55e <draw_players_lines>
     d94:	98 2f       	mov	r25, r24
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	99 23       	and	r25, r25
     d9a:	09 f4       	brne	.+2      	; 0xd9e <game_processing+0x16a>
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	89 83       	std	Y+1, r24	; 0x01
						move_player(&playerOne);
     da0:	88 e8       	ldi	r24, 0x88	; 136
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	0e 94 2e 02 	call	0x45c	; 0x45c <move_player>
     da8:	15 c0       	rjmp	.+42     	; 0xdd4 <game_processing+0x1a0>
					} else if (p == 2) {
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	9b 81       	ldd	r25, Y+3	; 0x03
     dae:	02 97       	sbiw	r24, 0x02	; 2
     db0:	89 f4       	brne	.+34     	; 0xdd4 <game_processing+0x1a0>
						collision = draw_players_lines(&playerTwo, p);
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	9b 81       	ldd	r25, Y+3	; 0x03
     db6:	bc 01       	movw	r22, r24
     db8:	8b ec       	ldi	r24, 0xCB	; 203
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	0e 94 af 02 	call	0x55e	; 0x55e <draw_players_lines>
     dc0:	98 2f       	mov	r25, r24
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	99 23       	and	r25, r25
     dc6:	09 f4       	brne	.+2      	; 0xdca <game_processing+0x196>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	89 83       	std	Y+1, r24	; 0x01
						move_player(&playerTwo);
     dcc:	8b ec       	ldi	r24, 0xCB	; 203
     dce:	92 e0       	ldi	r25, 0x02	; 2
     dd0:	0e 94 2e 02 	call	0x45c	; 0x45c <move_player>
					}
					xSemaphoreGive(xGameStateSemaphore);
     dd4:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <xGameStateSemaphore>
     dd8:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <xGameStateSemaphore+0x1>
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <xQueueGenericSend>
					xSemaphoreGive(xPlayerOneSemaphore);
     dea:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <xPlayerOneSemaphore>
     dee:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <xPlayerOneSemaphore+0x1>
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	40 e0       	ldi	r20, 0x00	; 0
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <xQueueGenericSend>
					xSemaphoreGive(xPlayerTwoSemaphore);
     e00:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <xPlayerTwoSemaphore>
     e04:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <xPlayerTwoSemaphore+0x1>
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <xQueueGenericSend>

	for(;;) {

		while(!collision) {
			if (xSemaphoreTake(xGameStateSemaphore, (TickType_t) 10) && xSemaphoreTake(xPlayerOneSemaphore, (TickType_t) 10) && xSemaphoreTake(xPlayerTwoSemaphore, (TickType_t) 10)) {
				for (int p = 1; p <= 2; p++) {
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	9b 81       	ldd	r25, Y+3	; 0x03
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	9b 83       	std	Y+3, r25	; 0x03
     e1e:	8a 83       	std	Y+2, r24	; 0x02
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	9b 81       	ldd	r25, Y+3	; 0x03
     e24:	03 97       	sbiw	r24, 0x03	; 3
     e26:	0c f4       	brge	.+2      	; 0xe2a <game_processing+0x1f6>
     e28:	42 cf       	rjmp	.-380    	; 0xcae <game_processing+0x7a>
					xSemaphoreGive(xGameStateSemaphore);
					xSemaphoreGive(xPlayerOneSemaphore);
					xSemaphoreGive(xPlayerTwoSemaphore);
				}
			}
			vTaskDelay(1000);
     e2a:	88 ee       	ldi	r24, 0xE8	; 232
     e2c:	93 e0       	ldi	r25, 0x03	; 3
     e2e:	0e 94 0b 1b 	call	0x3616	; 0x3616 <vTaskDelay>

	bool collision = false;

	for(;;) {

		while(!collision) {
     e32:	99 81       	ldd	r25, Y+1	; 0x01
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	89 27       	eor	r24, r25
     e38:	88 23       	and	r24, r24
     e3a:	09 f0       	breq	.+2      	; 0xe3e <game_processing+0x20a>
     e3c:	09 cf       	rjmp	.-494    	; 0xc50 <game_processing+0x1c>
				}
			}
			vTaskDelay(1000);
		}

		die();
     e3e:	0e 94 21 02 	call	0x442	; 0x442 <die>
	}
     e42:	05 cf       	rjmp	.-502    	; 0xc4e <game_processing+0x1a>

00000e44 <read_joystick>:
	vTaskDelete(NULL);
}


void read_joystick(void *pvParameters)
{
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	2c 97       	sbiw	r28, 0x0c	; 12
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	9c 87       	std	Y+12, r25	; 0x0c
     e5a:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t left;
	uint8_t up;
	uint8_t down;
	uint8_t pushed;
	Direction direction;
	uint8_t debounceCounter = 0;
     e5c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t debounceThreshold = 15;
     e5e:	8f e0       	ldi	r24, 0x0F	; 15
     e60:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t turnPlayer = 0;
     e62:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t isPressing = 0;
     e64:	1c 82       	std	Y+4, r1	; 0x04

	for (;;) {
		/*Constantly checking joystick state*/
		right	= !(PINC >> 1 & 0x01);
     e66:	86 e2       	ldi	r24, 0x26	; 38
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	fc 01       	movw	r30, r24
     e6c:	80 81       	ld	r24, Z
     e6e:	86 95       	lsr	r24
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	81 70       	andi	r24, 0x01	; 1
     e76:	99 27       	eor	r25, r25
     e78:	21 e0       	ldi	r18, 0x01	; 1
     e7a:	89 2b       	or	r24, r25
     e7c:	09 f0       	breq	.+2      	; 0xe80 <read_joystick+0x3c>
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	2e 83       	std	Y+6, r18	; 0x06
		left	= !(PINC >> 7 & 0x01);
     e82:	86 e2       	ldi	r24, 0x26	; 38
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	fc 01       	movw	r30, r24
     e88:	80 81       	ld	r24, Z
     e8a:	88 1f       	adc	r24, r24
     e8c:	88 27       	eor	r24, r24
     e8e:	88 1f       	adc	r24, r24
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	81 70       	andi	r24, 0x01	; 1
     e96:	99 27       	eor	r25, r25
     e98:	21 e0       	ldi	r18, 0x01	; 1
     e9a:	89 2b       	or	r24, r25
     e9c:	09 f0       	breq	.+2      	; 0xea0 <read_joystick+0x5c>
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	2f 83       	std	Y+7, r18	; 0x07
		up		= !(PINC >> 6 & 0x01);
     ea2:	86 e2       	ldi	r24, 0x26	; 38
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	fc 01       	movw	r30, r24
     ea8:	80 81       	ld	r24, Z
     eaa:	82 95       	swap	r24
     eac:	86 95       	lsr	r24
     eae:	86 95       	lsr	r24
     eb0:	83 70       	andi	r24, 0x03	; 3
     eb2:	88 2f       	mov	r24, r24
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	81 70       	andi	r24, 0x01	; 1
     eb8:	99 27       	eor	r25, r25
     eba:	21 e0       	ldi	r18, 0x01	; 1
     ebc:	89 2b       	or	r24, r25
     ebe:	09 f0       	breq	.+2      	; 0xec2 <read_joystick+0x7e>
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	28 87       	std	Y+8, r18	; 0x08
		down	= !(PINC >> 0 & 0x01);
     ec4:	86 e2       	ldi	r24, 0x26	; 38
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	fc 01       	movw	r30, r24
     eca:	80 81       	ld	r24, Z
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	81 70       	andi	r24, 0x01	; 1
     ed2:	99 27       	eor	r25, r25
     ed4:	21 e0       	ldi	r18, 0x01	; 1
     ed6:	89 2b       	or	r24, r25
     ed8:	09 f0       	breq	.+2      	; 0xedc <read_joystick+0x98>
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	29 87       	std	Y+9, r18	; 0x09
		pushed  = !(PIND >> 3 & 0x01);
     ede:	89 e2       	ldi	r24, 0x29	; 41
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	fc 01       	movw	r30, r24
     ee4:	80 81       	ld	r24, Z
     ee6:	86 95       	lsr	r24
     ee8:	86 95       	lsr	r24
     eea:	86 95       	lsr	r24
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	81 70       	andi	r24, 0x01	; 1
     ef2:	99 27       	eor	r25, r25
     ef4:	21 e0       	ldi	r18, 0x01	; 1
     ef6:	89 2b       	or	r24, r25
     ef8:	09 f0       	breq	.+2      	; 0xefc <read_joystick+0xb8>
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	2a 87       	std	Y+10, r18	; 0x0a

		if (down){
     efe:	89 85       	ldd	r24, Y+9	; 0x09
     f00:	88 23       	and	r24, r24
     f02:	39 f0       	breq	.+14     	; 0xf12 <read_joystick+0xce>
			direction = DOWN;
     f04:	83 e0       	ldi	r24, 0x03	; 3
     f06:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	8c 83       	std	Y+4, r24	; 0x04
     f10:	23 c0       	rjmp	.+70     	; 0xf58 <read_joystick+0x114>
		} else if (right) {
     f12:	8e 81       	ldd	r24, Y+6	; 0x06
     f14:	88 23       	and	r24, r24
     f16:	39 f0       	breq	.+14     	; 0xf26 <read_joystick+0xe2>
			direction = RIGHT;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	8c 83       	std	Y+4, r24	; 0x04
     f24:	19 c0       	rjmp	.+50     	; 0xf58 <read_joystick+0x114>
		} else if (up) {
     f26:	88 85       	ldd	r24, Y+8	; 0x08
     f28:	88 23       	and	r24, r24
     f2a:	39 f0       	breq	.+14     	; 0xf3a <read_joystick+0xf6>
			direction = UP;
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	8c 83       	std	Y+4, r24	; 0x04
     f38:	0f c0       	rjmp	.+30     	; 0xf58 <read_joystick+0x114>
		} else if (left) {
     f3a:	8f 81       	ldd	r24, Y+7	; 0x07
     f3c:	88 23       	and	r24, r24
     f3e:	31 f0       	breq	.+12     	; 0xf4c <read_joystick+0x108>
			direction = LEFT;
     f40:	19 82       	std	Y+1, r1	; 0x01
			turnPlayer = 1;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	8c 83       	std	Y+4, r24	; 0x04
     f4a:	06 c0       	rjmp	.+12     	; 0xf58 <read_joystick+0x114>
		} else if (pushed) {
     f4c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f4e:	88 23       	and	r24, r24
     f50:	11 f0       	breq	.+4      	; 0xf56 <read_joystick+0x112>
			//TODO: pause game
			debounceCounter = 0;
     f52:	1a 82       	std	Y+2, r1	; 0x02
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <read_joystick+0x114>
		} else {
			isPressing = 0;
     f56:	1c 82       	std	Y+4, r1	; 0x04
			//debounceCounter = 0;
		}

		if (turnPlayer && !isPressing && (++debounceCounter >= debounceThreshold)) {
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	88 23       	and	r24, r24
     f5c:	61 f1       	breq	.+88     	; 0xfb6 <read_joystick+0x172>
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	88 23       	and	r24, r24
     f62:	49 f5       	brne	.+82     	; 0xfb6 <read_joystick+0x172>
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	8a 83       	std	Y+2, r24	; 0x02
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	8d 81       	ldd	r24, Y+5	; 0x05
     f6e:	98 17       	cp	r25, r24
     f70:	10 f1       	brcs	.+68     	; 0xfb6 <read_joystick+0x172>
			if (xSemaphoreTake(xPlayerOneSemaphore, (TickType_t) 10)) {
     f72:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <xPlayerOneSemaphore>
     f76:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <xPlayerOneSemaphore+0x1>
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	4a e0       	ldi	r20, 0x0A	; 10
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <xQueueGenericReceive>
     f88:	88 23       	and	r24, r24
     f8a:	a9 f0       	breq	.+42     	; 0xfb6 <read_joystick+0x172>
				turn_player(&playerOne, direction);
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	bc 01       	movw	r22, r24
     f94:	88 e8       	ldi	r24, 0x88	; 136
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <turn_player>
				turnPlayer = 0;
     f9c:	1b 82       	std	Y+3, r1	; 0x03
				debounceCounter = 0;
     f9e:	1a 82       	std	Y+2, r1	; 0x02
				xSemaphoreGive(xPlayerOneSemaphore);
     fa0:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <xPlayerOneSemaphore>
     fa4:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <xPlayerOneSemaphore+0x1>
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <xQueueGenericSend>
			}
		}

		vTaskDelay(20);
     fb6:	84 e1       	ldi	r24, 0x14	; 20
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 0b 1b 	call	0x3616	; 0x3616 <vTaskDelay>
	}
     fbe:	53 cf       	rjmp	.-346    	; 0xe66 <read_joystick+0x22>

00000fc0 <turn_player>:



/* Changes the player's direction: will be applied in game_processing() */
void turn_player(Player *player, Direction direction)
{
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <turn_player+0x6>
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <turn_player+0x8>
     fc8:	1f 92       	push	r1
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	9c 83       	std	Y+4, r25	; 0x04
     fd0:	8b 83       	std	Y+3, r24	; 0x03
     fd2:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t validTurn = false, doTurn = false;
     fd4:	19 82       	std	Y+1, r1	; 0x01
     fd6:	1a 82       	std	Y+2, r1	; 0x02

	if ((*player).direction != direction)
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	fc 01       	movw	r30, r24
     fde:	94 81       	ldd	r25, Z+4	; 0x04
     fe0:	8d 81       	ldd	r24, Y+5	; 0x05
     fe2:	98 17       	cp	r25, r24
     fe4:	11 f0       	breq	.+4      	; 0xfea <turn_player+0x2a>
		doTurn = true;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	8a 83       	std	Y+2, r24	; 0x02

	switch (direction) {
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	88 2f       	mov	r24, r24
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	91 05       	cpc	r25, r1
     ff4:	09 f4       	brne	.+2      	; 0xff8 <turn_player+0x38>
     ff6:	49 c0       	rjmp	.+146    	; 0x108a <turn_player+0xca>
     ff8:	82 30       	cpi	r24, 0x02	; 2
     ffa:	91 05       	cpc	r25, r1
     ffc:	1c f4       	brge	.+6      	; 0x1004 <turn_player+0x44>
     ffe:	89 2b       	or	r24, r25
    1000:	81 f1       	breq	.+96     	; 0x1062 <turn_player+0xa2>
    1002:	5e c0       	rjmp	.+188    	; 0x10c0 <turn_player+0x100>
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	91 05       	cpc	r25, r1
    1008:	19 f0       	breq	.+6      	; 0x1010 <turn_player+0x50>
    100a:	03 97       	sbiw	r24, 0x03	; 3
    100c:	b1 f0       	breq	.+44     	; 0x103a <turn_player+0x7a>
    100e:	58 c0       	rjmp	.+176    	; 0x10c0 <turn_player+0x100>
		case UP:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	fc 01       	movw	r30, r24
    1016:	84 81       	ldd	r24, Z+4	; 0x04
    1018:	88 23       	and	r24, r24
    101a:	39 f0       	breq	.+14     	; 0x102a <turn_player+0x6a>
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	fc 01       	movw	r30, r24
    1022:	84 81       	ldd	r24, Z+4	; 0x04
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	09 f0       	breq	.+2      	; 0x102a <turn_player+0x6a>
    1028:	44 c0       	rjmp	.+136    	; 0x10b2 <turn_player+0xf2>
				(*player).direction = direction;
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	2d 81       	ldd	r18, Y+5	; 0x05
    1030:	fc 01       	movw	r30, r24
    1032:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
    1038:	3c c0       	rjmp	.+120    	; 0x10b2 <turn_player+0xf2>
		case DOWN:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	fc 01       	movw	r30, r24
    1040:	84 81       	ldd	r24, Z+4	; 0x04
    1042:	88 23       	and	r24, r24
    1044:	31 f0       	breq	.+12     	; 0x1052 <turn_player+0x92>
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	fc 01       	movw	r30, r24
    104c:	84 81       	ldd	r24, Z+4	; 0x04
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	91 f5       	brne	.+100    	; 0x10b6 <turn_player+0xf6>
				(*player).direction = direction;
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	2d 81       	ldd	r18, Y+5	; 0x05
    1058:	fc 01       	movw	r30, r24
    105a:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
    1060:	2a c0       	rjmp	.+84     	; 0x10b6 <turn_player+0xf6>
		case LEFT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	9c 81       	ldd	r25, Y+4	; 0x04
    1066:	fc 01       	movw	r30, r24
    1068:	84 81       	ldd	r24, Z+4	; 0x04
    106a:	82 30       	cpi	r24, 0x02	; 2
    106c:	31 f0       	breq	.+12     	; 0x107a <turn_player+0xba>
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	9c 81       	ldd	r25, Y+4	; 0x04
    1072:	fc 01       	movw	r30, r24
    1074:	84 81       	ldd	r24, Z+4	; 0x04
    1076:	83 30       	cpi	r24, 0x03	; 3
    1078:	01 f5       	brne	.+64     	; 0x10ba <turn_player+0xfa>
				(*player).direction = direction;
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	9c 81       	ldd	r25, Y+4	; 0x04
    107e:	2d 81       	ldd	r18, Y+5	; 0x05
    1080:	fc 01       	movw	r30, r24
    1082:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
    1088:	18 c0       	rjmp	.+48     	; 0x10ba <turn_player+0xfa>
		case RIGHT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	fc 01       	movw	r30, r24
    1090:	84 81       	ldd	r24, Z+4	; 0x04
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	31 f0       	breq	.+12     	; 0x10a2 <turn_player+0xe2>
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	fc 01       	movw	r30, r24
    109c:	84 81       	ldd	r24, Z+4	; 0x04
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	71 f4       	brne	.+28     	; 0x10be <turn_player+0xfe>
				(*player).direction = direction;
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	9c 81       	ldd	r25, Y+4	; 0x04
    10a6:	2d 81       	ldd	r18, Y+5	; 0x05
    10a8:	fc 01       	movw	r30, r24
    10aa:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
    10b0:	06 c0       	rjmp	.+12     	; 0x10be <turn_player+0xfe>
		case UP:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
    10b2:	00 00       	nop
    10b4:	05 c0       	rjmp	.+10     	; 0x10c0 <turn_player+0x100>
		case DOWN:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
    10b6:	00 00       	nop
    10b8:	03 c0       	rjmp	.+6      	; 0x10c0 <turn_player+0x100>
		case LEFT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
    10ba:	00 00       	nop
    10bc:	01 c0       	rjmp	.+2      	; 0x10c0 <turn_player+0x100>
		case RIGHT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
    10be:	00 00       	nop
	}

	if (doTurn && validTurn) { //New turn !
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	88 23       	and	r24, r24
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <turn_player+0x108>
    10c6:	68 c0       	rjmp	.+208    	; 0x1198 <turn_player+0x1d8>
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	88 23       	and	r24, r24
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <turn_player+0x110>
    10ce:	64 c0       	rjmp	.+200    	; 0x1198 <turn_player+0x1d8>
		(*player).turnsCount++;
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	8f 5b       	subi	r24, 0xBF	; 191
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	fc 01       	movw	r30, r24
    10da:	80 81       	ld	r24, Z
    10dc:	91 81       	ldd	r25, Z+1	; 0x01
    10de:	9c 01       	movw	r18, r24
    10e0:	2f 5f       	subi	r18, 0xFF	; 255
    10e2:	3f 4f       	sbci	r19, 0xFF	; 255
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	8f 5b       	subi	r24, 0xBF	; 191
    10ea:	9f 4f       	sbci	r25, 0xFF	; 255
    10ec:	fc 01       	movw	r30, r24
    10ee:	31 83       	std	Z+1, r19	; 0x01
    10f0:	20 83       	st	Z, r18

		if ((*player).turnsCount < MAXTURNS && (*player).turns[(*player).turnsCount].x == -1) { //Free turn slot
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	8f 5b       	subi	r24, 0xBF	; 191
    10f8:	9f 4f       	sbci	r25, 0xFF	; 255
    10fa:	fc 01       	movw	r30, r24
    10fc:	80 81       	ld	r24, Z
    10fe:	91 81       	ldd	r25, Z+1	; 0x01
    1100:	0e 97       	sbiw	r24, 0x0e	; 14
    1102:	0c f0       	brlt	.+2      	; 0x1106 <turn_player+0x146>
    1104:	45 c0       	rjmp	.+138    	; 0x1190 <turn_player+0x1d0>
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	8f 5b       	subi	r24, 0xBF	; 191
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	fc 01       	movw	r30, r24
    1110:	80 81       	ld	r24, Z
    1112:	91 81       	ldd	r25, Z+1	; 0x01
    1114:	2b 81       	ldd	r18, Y+3	; 0x03
    1116:	3c 81       	ldd	r19, Y+4	; 0x04
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	82 0f       	add	r24, r18
    1122:	93 1f       	adc	r25, r19
    1124:	05 96       	adiw	r24, 0x05	; 5
    1126:	fc 01       	movw	r30, r24
    1128:	80 81       	ld	r24, Z
    112a:	91 81       	ldd	r25, Z+1	; 0x01
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	81 f5       	brne	.+96     	; 0x1190 <turn_player+0x1d0>
			(*player).turns[(*player).turnsCount].x = (*player).x;
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	8f 5b       	subi	r24, 0xBF	; 191
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	fc 01       	movw	r30, r24
    113a:	80 81       	ld	r24, Z
    113c:	91 81       	ldd	r25, Z+1	; 0x01
    113e:	2b 81       	ldd	r18, Y+3	; 0x03
    1140:	3c 81       	ldd	r19, Y+4	; 0x04
    1142:	f9 01       	movw	r30, r18
    1144:	20 81       	ld	r18, Z
    1146:	31 81       	ldd	r19, Z+1	; 0x01
    1148:	4b 81       	ldd	r20, Y+3	; 0x03
    114a:	5c 81       	ldd	r21, Y+4	; 0x04
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	84 0f       	add	r24, r20
    1156:	95 1f       	adc	r25, r21
    1158:	05 96       	adiw	r24, 0x05	; 5
    115a:	fc 01       	movw	r30, r24
    115c:	31 83       	std	Z+1, r19	; 0x01
    115e:	20 83       	st	Z, r18
			(*player).turns[(*player).turnsCount].y =  (*player).y;
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	9c 81       	ldd	r25, Y+4	; 0x04
    1164:	8f 5b       	subi	r24, 0xBF	; 191
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	fc 01       	movw	r30, r24
    116a:	80 81       	ld	r24, Z
    116c:	91 81       	ldd	r25, Z+1	; 0x01
    116e:	2b 81       	ldd	r18, Y+3	; 0x03
    1170:	3c 81       	ldd	r19, Y+4	; 0x04
    1172:	f9 01       	movw	r30, r18
    1174:	22 81       	ldd	r18, Z+2	; 0x02
    1176:	33 81       	ldd	r19, Z+3	; 0x03
    1178:	4b 81       	ldd	r20, Y+3	; 0x03
    117a:	5c 81       	ldd	r21, Y+4	; 0x04
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	84 0f       	add	r24, r20
    1186:	95 1f       	adc	r25, r21
    1188:	07 96       	adiw	r24, 0x07	; 7
    118a:	fc 01       	movw	r30, r24
    118c:	31 83       	std	Z+1, r19	; 0x01
    118e:	20 83       	st	Z, r18
		} else {
			//TODO
		}

		move_player(player);
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	0e 94 2e 02 	call	0x45c	; 0x45c <move_player>
	}
}
    1198:	00 00       	nop
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	08 95       	ret

000011aa <init_players>:

/* Initialize the players' positions and turns */
void init_players()
{
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <init_players+0x6>
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <init_players+0x8>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <init_players+0xa>
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62

	for (int i = 0; i < MAXTURNS + 1; i++) { //MAXTURNS + 1 because turn[0] is the init position, not a turn
    11b8:	1a 82       	std	Y+2, r1	; 0x02
    11ba:	19 82       	std	Y+1, r1	; 0x01
    11bc:	39 c0       	rjmp	.+114    	; 0x1230 <init_players+0x86>
		playerOne.turns[i].x = -1;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	83 57       	subi	r24, 0x73	; 115
    11cc:	9d 4f       	sbci	r25, 0xFD	; 253
    11ce:	2f ef       	ldi	r18, 0xFF	; 255
    11d0:	3f ef       	ldi	r19, 0xFF	; 255
    11d2:	fc 01       	movw	r30, r24
    11d4:	31 83       	std	Z+1, r19	; 0x01
    11d6:	20 83       	st	Z, r18
		playerOne.turns[i].y = -1;
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	81 57       	subi	r24, 0x71	; 113
    11e6:	9d 4f       	sbci	r25, 0xFD	; 253
    11e8:	2f ef       	ldi	r18, 0xFF	; 255
    11ea:	3f ef       	ldi	r19, 0xFF	; 255
    11ec:	fc 01       	movw	r30, r24
    11ee:	31 83       	std	Z+1, r19	; 0x01
    11f0:	20 83       	st	Z, r18
		playerTwo.turns[i].x = -1;
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	80 53       	subi	r24, 0x30	; 48
    1200:	9d 4f       	sbci	r25, 0xFD	; 253
    1202:	2f ef       	ldi	r18, 0xFF	; 255
    1204:	3f ef       	ldi	r19, 0xFF	; 255
    1206:	fc 01       	movw	r30, r24
    1208:	31 83       	std	Z+1, r19	; 0x01
    120a:	20 83       	st	Z, r18
		playerTwo.turns[i].y = -1;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	8e 52       	subi	r24, 0x2E	; 46
    121a:	9d 4f       	sbci	r25, 0xFD	; 253
    121c:	2f ef       	ldi	r18, 0xFF	; 255
    121e:	3f ef       	ldi	r19, 0xFF	; 255
    1220:	fc 01       	movw	r30, r24
    1222:	31 83       	std	Z+1, r19	; 0x01
    1224:	20 83       	st	Z, r18

/* Initialize the players' positions and turns */
void init_players()
{

	for (int i = 0; i < MAXTURNS + 1; i++) { //MAXTURNS + 1 because turn[0] is the init position, not a turn
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	9a 81       	ldd	r25, Y+2	; 0x02
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	0f 97       	sbiw	r24, 0x0f	; 15
    1236:	1c f2       	brlt	.-122    	; 0x11be <init_players+0x14>
		playerOne.turns[i].y = -1;
		playerTwo.turns[i].x = -1;
		playerTwo.turns[i].y = -1;
	}

	playerOne.turnsCount = 0;
    1238:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <playerOne+0x42>
    123c:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <playerOne+0x41>
	playerTwo.turnsCount = 0;
    1240:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <playerTwo+0x42>
    1244:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <playerTwo+0x41>

	playerOne.x = 0;
    1248:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <playerOne+0x1>
    124c:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <playerOne>
	playerOne.y = 5;
    1250:	85 e0       	ldi	r24, 0x05	; 5
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <playerOne+0x3>
    1258:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <playerOne+0x2>
	playerOne.direction = RIGHT;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <playerOne+0x4>
	Turn turn0;
	turn0.x = 0;
    1262:	1c 82       	std	Y+4, r1	; 0x04
    1264:	1b 82       	std	Y+3, r1	; 0x03
	turn0.y = 5;
    1266:	85 e0       	ldi	r24, 0x05	; 5
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
	playerOne.turns[0] = turn0;
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	ad 81       	ldd	r26, Y+5	; 0x05
    1274:	be 81       	ldd	r27, Y+6	; 0x06
    1276:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <playerOne+0x5>
    127a:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <playerOne+0x6>
    127e:	a0 93 8f 02 	sts	0x028F, r26	; 0x80028f <playerOne+0x7>
    1282:	b0 93 90 02 	sts	0x0290, r27	; 0x800290 <playerOne+0x8>

	playerTwo.x = 13;
    1286:	8d e0       	ldi	r24, 0x0D	; 13
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <playerTwo+0x1>
    128e:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <playerTwo>
	playerTwo.y = 5;
    1292:	85 e0       	ldi	r24, 0x05	; 5
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <playerTwo+0x3>
    129a:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <playerTwo+0x2>
	playerTwo.direction = LEFT;
    129e:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <playerTwo+0x4>
	turn0;
	turn0.x = 13;
    12a2:	8d e0       	ldi	r24, 0x0D	; 13
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	9c 83       	std	Y+4, r25	; 0x04
    12a8:	8b 83       	std	Y+3, r24	; 0x03
	turn0.y = 5;
    12aa:	85 e0       	ldi	r24, 0x05	; 5
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9e 83       	std	Y+6, r25	; 0x06
    12b0:	8d 83       	std	Y+5, r24	; 0x05
	playerTwo.turns[0] = turn0;
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	ad 81       	ldd	r26, Y+5	; 0x05
    12b8:	be 81       	ldd	r27, Y+6	; 0x06
    12ba:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <playerTwo+0x5>
    12be:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <playerTwo+0x6>
    12c2:	a0 93 d2 02 	sts	0x02D2, r26	; 0x8002d2 <playerTwo+0x7>
    12c6:	b0 93 d3 02 	sts	0x02D3, r27	; 0x8002d3 <playerTwo+0x8>
}
    12ca:	00 00       	nop
    12cc:	26 96       	adiw	r28, 0x06	; 6
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	08 95       	ret

000012de <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
	// Set SER to 1
	PORTD |= _BV(PORTD2);
    12e6:	8b e2       	ldi	r24, 0x2B	; 43
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	2b e2       	ldi	r18, 0x2B	; 43
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	f9 01       	movw	r30, r18
    12f0:	20 81       	ld	r18, Z
    12f2:	24 60       	ori	r18, 0x04	; 4
    12f4:	fc 01       	movw	r30, r24
    12f6:	20 83       	st	Z, r18
}
    12f8:	00 00       	nop
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	08 95       	ret

00001300 <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
	// one SCK pulse
	PORTD |= _BV(PORTD5);
    1308:	8b e2       	ldi	r24, 0x2B	; 43
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	2b e2       	ldi	r18, 0x2B	; 43
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	f9 01       	movw	r30, r18
    1312:	20 81       	ld	r18, Z
    1314:	20 62       	ori	r18, 0x20	; 32
    1316:	fc 01       	movw	r30, r24
    1318:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
    131a:	8b e2       	ldi	r24, 0x2B	; 43
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	2b e2       	ldi	r18, 0x2B	; 43
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	f9 01       	movw	r30, r18
    1324:	20 81       	ld	r18, Z
    1326:	2f 7d       	andi	r18, 0xDF	; 223
    1328:	fc 01       	movw	r30, r24
    132a:	20 83       	st	Z, r18
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
    132c:	8b e2       	ldi	r24, 0x2B	; 43
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	2b e2       	ldi	r18, 0x2B	; 43
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	f9 01       	movw	r30, r18
    1336:	20 81       	ld	r18, Z
    1338:	20 61       	ori	r18, 0x10	; 16
    133a:	fc 01       	movw	r30, r24
    133c:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
    133e:	8b e2       	ldi	r24, 0x2B	; 43
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	2b e2       	ldi	r18, 0x2B	; 43
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	f9 01       	movw	r30, r18
    1348:	20 81       	ld	r18, Z
    134a:	2f 7e       	andi	r18, 0xEF	; 239
    134c:	fc 01       	movw	r30, r24
    134e:	20 83       	st	Z, r18
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
    1350:	8b e2       	ldi	r24, 0x2B	; 43
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	2b e2       	ldi	r18, 0x2B	; 43
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	f9 01       	movw	r30, r18
    135a:	20 81       	ld	r18, Z
    135c:	2b 7f       	andi	r18, 0xFB	; 251
    135e:	fc 01       	movw	r30, r24
    1360:	20 83       	st	Z, r18
}
    1362:	00 00       	nop
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	08 95       	ret

0000136a <load_col_value>:

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	00 d0       	rcall	.+0      	; 0x1370 <load_col_value+0x6>
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	9a 83       	std	Y+2, r25	; 0x02
    1376:	89 83       	std	Y+1, r24	; 0x01
	PORTA = ~(col_value & 0xFF);
    1378:	82 e2       	ldi	r24, 0x22	; 34
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	29 81       	ldd	r18, Y+1	; 0x01
    137e:	20 95       	com	r18
    1380:	fc 01       	movw	r30, r24
    1382:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
    1384:	85 e2       	ldi	r24, 0x25	; 37
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	25 e2       	ldi	r18, 0x25	; 37
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	f9 01       	movw	r30, r18
    138e:	20 81       	ld	r18, Z
    1390:	23 60       	ori	r18, 0x03	; 3
    1392:	fc 01       	movw	r30, r24
    1394:	20 83       	st	Z, r18
	PORTB &= ~((col_value >> 8) & 0x03);
    1396:	85 e2       	ldi	r24, 0x25	; 37
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	25 e2       	ldi	r18, 0x25	; 37
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	f9 01       	movw	r30, r18
    13a0:	40 81       	ld	r20, Z
    13a2:	29 81       	ldd	r18, Y+1	; 0x01
    13a4:	3a 81       	ldd	r19, Y+2	; 0x02
    13a6:	23 2f       	mov	r18, r19
    13a8:	33 27       	eor	r19, r19
    13aa:	23 70       	andi	r18, 0x03	; 3
    13ac:	20 95       	com	r18
    13ae:	24 23       	and	r18, r20
    13b0:	fc 01       	movw	r30, r24
    13b2:	20 83       	st	Z, r18
}
    13b4:	00 00       	nop
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <handle_display>:

//-----------------------------------------
void handle_display(void)
{
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
	static uint8_t col = 0;
	
	if (col == 0)
    13c8:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <col.2847>
    13cc:	88 23       	and	r24, r24
    13ce:	11 f4       	brne	.+4      	; 0x13d4 <handle_display+0x14>
		prepare_shiftregister();
    13d0:	0e 94 6f 09 	call	0x12de	; 0x12de <prepare_shiftregister>
	
	load_col_value(frame_buffer[col]);
    13d4:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <col.2847>
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	8c 5a       	subi	r24, 0xAC	; 172
    13e2:	9e 4f       	sbci	r25, 0xFE	; 254
    13e4:	fc 01       	movw	r30, r24
    13e6:	80 81       	ld	r24, Z
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	0e 94 b5 09 	call	0x136a	; 0x136a <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
    13ee:	0e 94 80 09 	call	0x1300	; 0x1300 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	if (col++ > 13)
    13f2:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <col.2847>
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	98 0f       	add	r25, r24
    13fa:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <col.2847>
    13fe:	8e 30       	cpi	r24, 0x0E	; 14
    1400:	10 f0       	brcs	.+4      	; 0x1406 <handle_display+0x46>
		col = 0;
    1402:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <col.2847>
}
    1406:	00 00       	nop
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	08 95       	ret

0000140e <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
	//
}
    1416:	00 00       	nop
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	08 95       	ret

0000141e <main>:

//-----------------------------------------
int main(void)
{
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	00 d0       	rcall	.+0      	; 0x142a <main+0xc>
    142a:	00 d0       	rcall	.+0      	; 0x142c <main+0xe>
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
    1430:	0e 94 3b 0b 	call	0x1676	; 0x1676 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
    1434:	8b e2       	ldi	r24, 0x2B	; 43
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	2b e2       	ldi	r18, 0x2B	; 43
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	f9 01       	movw	r30, r18
    143e:	20 81       	ld	r18, Z
    1440:	2f 7b       	andi	r18, 0xBF	; 191
    1442:	fc 01       	movw	r30, r24
    1444:	20 83       	st	Z, r18

	/* Semaphores creation */
	xGameStateSemaphore = xSemaphoreCreateMutex();
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	0e 94 49 15 	call	0x2a92	; 0x2a92 <xQueueCreateMutex>
    144c:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <xGameStateSemaphore+0x1>
    1450:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <xGameStateSemaphore>
	xPlayerOneSemaphore = xSemaphoreCreateMutex();
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	0e 94 49 15 	call	0x2a92	; 0x2a92 <xQueueCreateMutex>
    145a:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <xPlayerOneSemaphore+0x1>
    145e:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <xPlayerOneSemaphore>
	xPlayerTwoSemaphore = xSemaphoreCreateMutex();
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	0e 94 49 15 	call	0x2a92	; 0x2a92 <xQueueCreateMutex>
    1468:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <xPlayerTwoSemaphore+0x1>
    146c:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <xPlayerTwoSemaphore>

	init_players();
    1470:	0e 94 d5 08 	call	0x11aa	; 0x11aa <init_players>

	BaseType_t taskReadJoystick = xTaskCreate(read_joystick, (const char*)"Read joystick", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
    1474:	e1 2c       	mov	r14, r1
    1476:	f1 2c       	mov	r15, r1
    1478:	00 e0       	ldi	r16, 0x00	; 0
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	45 e5       	ldi	r20, 0x55	; 85
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	61 e1       	ldi	r22, 0x11	; 17
    1484:	71 e0       	ldi	r23, 0x01	; 1
    1486:	82 e2       	ldi	r24, 0x22	; 34
    1488:	97 e0       	ldi	r25, 0x07	; 7
    148a:	0e 94 2e 19 	call	0x325c	; 0x325c <xTaskCreate>
    148e:	89 83       	std	Y+1, r24	; 0x01
	BaseType_t taskGameProcessing = xTaskCreate(game_processing, (const char*)"Game processing", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
    1490:	e1 2c       	mov	r14, r1
    1492:	f1 2c       	mov	r15, r1
    1494:	00 e0       	ldi	r16, 0x00	; 0
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	45 e5       	ldi	r20, 0x55	; 85
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	6f e1       	ldi	r22, 0x1F	; 31
    14a0:	71 e0       	ldi	r23, 0x01	; 1
    14a2:	8a e1       	ldi	r24, 0x1A	; 26
    14a4:	96 e0       	ldi	r25, 0x06	; 6
    14a6:	0e 94 2e 19 	call	0x325c	; 0x325c <xTaskCreate>
    14aa:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t taskMakeFrame = xTaskCreate(make_frame, (const char*)"Make frame", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL );
    14ac:	e1 2c       	mov	r14, r1
    14ae:	f1 2c       	mov	r15, r1
    14b0:	00 e0       	ldi	r16, 0x00	; 0
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	45 e5       	ldi	r20, 0x55	; 85
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	6f e2       	ldi	r22, 0x2F	; 47
    14bc:	71 e0       	ldi	r23, 0x01	; 1
    14be:	87 e6       	ldi	r24, 0x67	; 103
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	0e 94 2e 19 	call	0x325c	; 0x325c <xTaskCreate>
    14c6:	8b 83       	std	Y+3, r24	; 0x03
	BaseType_t taskCommunicateSerial = xTaskCreate(communicate_serial, (const char*)"Communicate serial", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
    14c8:	e1 2c       	mov	r14, r1
    14ca:	f1 2c       	mov	r15, r1
    14cc:	00 e0       	ldi	r16, 0x00	; 0
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	45 e5       	ldi	r20, 0x55	; 85
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	6a e3       	ldi	r22, 0x3A	; 58
    14d8:	71 e0       	ldi	r23, 0x01	; 1
    14da:	85 ed       	ldi	r24, 0xD5	; 213
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 2e 19 	call	0x325c	; 0x325c <xTaskCreate>
    14e2:	8c 83       	std	Y+4, r24	; 0x04

	// Start the display handler timer
	init_display_timer(handle_display);
    14e4:	80 ee       	ldi	r24, 0xE0	; 224
    14e6:	99 e0       	ldi	r25, 0x09	; 9
    14e8:	0e 94 b7 0a 	call	0x156e	; 0x156e <init_display_timer>
	
	sei();
    14ec:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
    14ee:	0e 94 2e 1b 	call	0x365c	; 0x365c <vTaskStartScheduler>
	
	//Should never reach here
	while (1) {}
    14f2:	ff cf       	rjmp	.-2      	; 0x14f2 <main+0xd4>

000014f4 <_com_call_back>:

// Pointer to application display handler
static display_callback_ptr_t cb_ptr = NULL;

// ----------------------------------------------------------------------------------------------------------------------
static void _com_call_back(serial_p _com_serial_instance, uint8_t serial_last_received_byte) {
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <_com_call_back+0x6>
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <_com_call_back+0x8>
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	9b 83       	std	Y+3, r25	; 0x03
    1502:	8a 83       	std	Y+2, r24	; 0x02
    1504:	6c 83       	std	Y+4, r22	; 0x04
	if (_x_rx_com_queue) {
    1506:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_x_rx_com_queue>
    150a:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <_x_rx_com_queue+0x1>
    150e:	89 2b       	or	r24, r25
    1510:	99 f0       	breq	.+38     	; 0x1538 <_com_call_back+0x44>
		signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
    1512:	19 82       	std	Y+1, r1	; 0x01

		xQueueSendFromISR( _x_rx_com_queue, &serial_last_received_byte, &xHigherPriorityTaskWoken );
    1514:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_x_rx_com_queue>
    1518:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <_x_rx_com_queue+0x1>
    151c:	be 01       	movw	r22, r28
    151e:	6c 5f       	subi	r22, 0xFC	; 252
    1520:	7f 4f       	sbci	r23, 0xFF	; 255
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	ae 01       	movw	r20, r28
    1526:	4f 5f       	subi	r20, 0xFF	; 255
    1528:	5f 4f       	sbci	r21, 0xFF	; 255
    152a:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <xQueueGenericSendFromISR>

		if( xHigherPriorityTaskWoken != pdFALSE )
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	88 23       	and	r24, r24
    1532:	11 f0       	breq	.+4      	; 0x1538 <_com_call_back+0x44>
		{
			taskYIELD();
    1534:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vPortYield>
		}
	}
}
    1538:	00 00       	nop
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	08 95       	ret

00001548 <init_com>:

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	00 d0       	rcall	.+0      	; 0x154e <init_com+0x6>
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01
	_x_rx_com_queue = x_rx_queue;
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <_x_rx_com_queue+0x1>
    155e:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_x_rx_com_queue>
}
    1562:	00 00       	nop
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	08 95       	ret

0000156e <init_display_timer>:

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	00 d0       	rcall	.+0      	; 0x1574 <init_display_timer+0x6>
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	9a 83       	std	Y+2, r25	; 0x02
    157a:	89 83       	std	Y+1, r24	; 0x01
	cb_ptr = cb;
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <cb_ptr+0x1>
    1584:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
    1588:	87 e4       	ldi	r24, 0x47	; 71
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	2a e0       	ldi	r18, 0x0A	; 10
    158e:	fc 01       	movw	r30, r24
    1590:	20 83       	st	Z, r18
	TCCR0A |= _BV(WGM01); // Mode 2
    1592:	84 e4       	ldi	r24, 0x44	; 68
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	24 e4       	ldi	r18, 0x44	; 68
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	f9 01       	movw	r30, r18
    159c:	20 81       	ld	r18, Z
    159e:	22 60       	ori	r18, 0x02	; 2
    15a0:	fc 01       	movw	r30, r24
    15a2:	20 83       	st	Z, r18
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
    15a4:	8e e6       	ldi	r24, 0x6E	; 110
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	2e e6       	ldi	r18, 0x6E	; 110
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	f9 01       	movw	r30, r18
    15ae:	20 81       	ld	r18, Z
    15b0:	22 60       	ori	r18, 0x02	; 2
    15b2:	fc 01       	movw	r30, r24
    15b4:	20 83       	st	Z, r18
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
    15b6:	85 e4       	ldi	r24, 0x45	; 69
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	25 e4       	ldi	r18, 0x45	; 69
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	f9 01       	movw	r30, r18
    15c0:	20 81       	ld	r18, Z
    15c2:	25 60       	ori	r18, 0x05	; 5
    15c4:	fc 01       	movw	r30, r24
    15c6:	20 83       	st	Z, r18
}
    15c8:	00 00       	nop
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	08 95       	ret

000015d4 <__vector_16>:

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
    15d4:	1f 92       	push	r1
    15d6:	0f 92       	push	r0
    15d8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    15dc:	0f 92       	push	r0
    15de:	11 24       	eor	r1, r1
    15e0:	2f 93       	push	r18
    15e2:	3f 93       	push	r19
    15e4:	4f 93       	push	r20
    15e6:	5f 93       	push	r21
    15e8:	6f 93       	push	r22
    15ea:	7f 93       	push	r23
    15ec:	8f 93       	push	r24
    15ee:	9f 93       	push	r25
    15f0:	af 93       	push	r26
    15f2:	bf 93       	push	r27
    15f4:	ef 93       	push	r30
    15f6:	ff 93       	push	r31
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
	if (cb_ptr)
    1600:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <cb_ptr>
    1604:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <cb_ptr+0x1>
    1608:	89 2b       	or	r24, r25
    160a:	31 f0       	breq	.+12     	; 0x1618 <__vector_16+0x44>
	{
		cb_ptr();
    160c:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <cb_ptr>
    1610:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <cb_ptr+0x1>
    1614:	fc 01       	movw	r30, r24
    1616:	09 95       	icall
	}
}
    1618:	00 00       	nop
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	ff 91       	pop	r31
    1620:	ef 91       	pop	r30
    1622:	bf 91       	pop	r27
    1624:	af 91       	pop	r26
    1626:	9f 91       	pop	r25
    1628:	8f 91       	pop	r24
    162a:	7f 91       	pop	r23
    162c:	6f 91       	pop	r22
    162e:	5f 91       	pop	r21
    1630:	4f 91       	pop	r20
    1632:	3f 91       	pop	r19
    1634:	2f 91       	pop	r18
    1636:	0f 90       	pop	r0
    1638:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    163c:	0f 90       	pop	r0
    163e:	1f 90       	pop	r1
    1640:	18 95       	reti

00001642 <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	00 d0       	rcall	.+0      	; 0x1648 <com_send_bytes+0x6>
    1648:	1f 92       	push	r1
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	6b 83       	std	Y+3, r22	; 0x03
	serial_send_bytes(_com_serial_instance, bytes, len);
    1654:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_com_serial_instance>
    1658:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <_com_serial_instance+0x1>
    165c:	29 81       	ldd	r18, Y+1	; 0x01
    165e:	3a 81       	ldd	r19, Y+2	; 0x02
    1660:	4b 81       	ldd	r20, Y+3	; 0x03
    1662:	b9 01       	movw	r22, r18
    1664:	0e 94 35 12 	call	0x246a	; 0x246a <serial_send_bytes>
}
    1668:	00 00       	nop
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	df 91       	pop	r29
    1672:	cf 91       	pop	r28
    1674:	08 95       	ret

00001676 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
    1676:	8f 92       	push	r8
    1678:	9f 92       	push	r9
    167a:	af 92       	push	r10
    167c:	bf 92       	push	r11
    167e:	cf 92       	push	r12
    1680:	df 92       	push	r13
    1682:	ef 92       	push	r14
    1684:	0f 93       	push	r16
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
    168e:	8b e1       	ldi	r24, 0x1B	; 27
    1690:	93 e0       	ldi	r25, 0x03	; 3
    1692:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <buffer_init>
	buffer_init(&_com_tx_buffer);
    1696:	8e e3       	ldi	r24, 0x3E	; 62
    1698:	93 e0       	ldi	r25, 0x03	; 3
    169a:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
    169e:	0f 2e       	mov	r0, r31
    16a0:	fa e7       	ldi	r31, 0x7A	; 122
    16a2:	8f 2e       	mov	r8, r31
    16a4:	fa e0       	ldi	r31, 0x0A	; 10
    16a6:	9f 2e       	mov	r9, r31
    16a8:	f0 2d       	mov	r31, r0
    16aa:	0f 2e       	mov	r0, r31
    16ac:	fe e3       	ldi	r31, 0x3E	; 62
    16ae:	af 2e       	mov	r10, r31
    16b0:	f3 e0       	ldi	r31, 0x03	; 3
    16b2:	bf 2e       	mov	r11, r31
    16b4:	f0 2d       	mov	r31, r0
    16b6:	0f 2e       	mov	r0, r31
    16b8:	fb e1       	ldi	r31, 0x1B	; 27
    16ba:	cf 2e       	mov	r12, r31
    16bc:	f3 e0       	ldi	r31, 0x03	; 3
    16be:	df 2e       	mov	r13, r31
    16c0:	f0 2d       	mov	r31, r0
    16c2:	e1 2c       	mov	r14, r1
    16c4:	00 e0       	ldi	r16, 0x00	; 0
    16c6:	23 e0       	ldi	r18, 0x03	; 3
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	52 ec       	ldi	r21, 0xC2	; 194
    16cc:	61 e0       	ldi	r22, 0x01	; 1
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	0e 94 74 11 	call	0x22e8	; 0x22e8 <serial_new_instance>
    16d6:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <_com_serial_instance+0x1>
    16da:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
    16de:	88 e2       	ldi	r24, 0x28	; 40
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	28 e2       	ldi	r18, 0x28	; 40
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	f9 01       	movw	r30, r18
    16e8:	20 81       	ld	r18, Z
    16ea:	23 6c       	ori	r18, 0xC3	; 195
    16ec:	fc 01       	movw	r30, r24
    16ee:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
    16f0:	8b e2       	ldi	r24, 0x2B	; 43
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	2b e2       	ldi	r18, 0x2B	; 43
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	f9 01       	movw	r30, r18
    16fa:	20 81       	ld	r18, Z
    16fc:	28 60       	ori	r18, 0x08	; 8
    16fe:	fc 01       	movw	r30, r24
    1700:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
    1702:	8a e2       	ldi	r24, 0x2A	; 42
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	2a e2       	ldi	r18, 0x2A	; 42
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	f9 01       	movw	r30, r18
    170c:	20 81       	ld	r18, Z
    170e:	24 67       	ori	r18, 0x74	; 116
    1710:	fc 01       	movw	r30, r24
    1712:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
    1714:	8b e2       	ldi	r24, 0x2B	; 43
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	2b e2       	ldi	r18, 0x2B	; 43
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	f9 01       	movw	r30, r18
    171e:	20 81       	ld	r18, Z
    1720:	20 64       	ori	r18, 0x40	; 64
    1722:	fc 01       	movw	r30, r24
    1724:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
    1726:	81 e2       	ldi	r24, 0x21	; 33
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	fc 01       	movw	r30, r24
    172c:	80 81       	ld	r24, Z
    172e:	81 e2       	ldi	r24, 0x21	; 33
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	2f ef       	ldi	r18, 0xFF	; 255
    1734:	fc 01       	movw	r30, r24
    1736:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
    1738:	84 e2       	ldi	r24, 0x24	; 36
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	24 e2       	ldi	r18, 0x24	; 36
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	f9 01       	movw	r30, r18
    1742:	20 81       	ld	r18, Z
    1744:	23 60       	ori	r18, 0x03	; 3
    1746:	fc 01       	movw	r30, r24
    1748:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
    174a:	84 e2       	ldi	r24, 0x24	; 36
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	24 e2       	ldi	r18, 0x24	; 36
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	f9 01       	movw	r30, r18
    1754:	20 81       	ld	r18, Z
    1756:	2c 63       	ori	r18, 0x3C	; 60
    1758:	fc 01       	movw	r30, r24
    175a:	20 83       	st	Z, r18
}
    175c:	00 00       	nop
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	0f 91       	pop	r16
    1764:	ef 90       	pop	r14
    1766:	df 90       	pop	r13
    1768:	cf 90       	pop	r12
    176a:	bf 90       	pop	r11
    176c:	af 90       	pop	r10
    176e:	9f 90       	pop	r9
    1770:	8f 90       	pop	r8
    1772:	08 95       	ret

00001774 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	1f 92       	push	r1
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
    1780:	85 e2       	ldi	r24, 0x25	; 37
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	25 e2       	ldi	r18, 0x25	; 37
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	f9 01       	movw	r30, r18
    178a:	20 81       	ld	r18, Z
    178c:	23 7c       	andi	r18, 0xC3	; 195
    178e:	fc 01       	movw	r30, r24
    1790:	20 83       	st	Z, r18
		PORTB |= task_no << 2;
    1792:	85 e2       	ldi	r24, 0x25	; 37
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	25 e2       	ldi	r18, 0x25	; 37
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	f9 01       	movw	r30, r18
    179c:	20 81       	ld	r18, Z
    179e:	42 2f       	mov	r20, r18
    17a0:	29 81       	ldd	r18, Y+1	; 0x01
    17a2:	22 2f       	mov	r18, r18
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	22 0f       	add	r18, r18
    17a8:	33 1f       	adc	r19, r19
    17aa:	22 0f       	add	r18, r18
    17ac:	33 1f       	adc	r19, r19
    17ae:	24 2b       	or	r18, r20
    17b0:	fc 01       	movw	r30, r24
    17b2:	20 83       	st	Z, r18
	}
    17b4:	00 00       	nop
    17b6:	0f 90       	pop	r0
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	08 95       	ret

000017be <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	1f 92       	push	r1
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
    17ca:	85 e2       	ldi	r24, 0x25	; 37
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	25 e2       	ldi	r18, 0x25	; 37
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	f9 01       	movw	r30, r18
    17d4:	20 81       	ld	r18, Z
    17d6:	23 7c       	andi	r18, 0xC3	; 195
    17d8:	fc 01       	movw	r30, r24
    17da:	20 83       	st	Z, r18
	}
    17dc:	00 00       	nop
    17de:	0f 90       	pop	r0
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	08 95       	ret

000017e6 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <buffer_init+0x6>
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	9a 83       	std	Y+2, r25	; 0x02
    17f2:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	fc 01       	movw	r30, r24
    17fa:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1800:	fc 01       	movw	r30, r24
    1802:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	9a 81       	ldd	r25, Y+2	; 0x02
    1808:	fc 01       	movw	r30, r24
    180a:	12 a2       	std	Z+34, r1	; 0x22
}
    180c:	00 00       	nop
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	08 95       	ret

00001818 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	00 d0       	rcall	.+0      	; 0x181e <buffer_get_item+0x6>
    181e:	00 d0       	rcall	.+0      	; 0x1820 <buffer_get_item+0x8>
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	7c 83       	std	Y+4, r23	; 0x04
    182a:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	fc 01       	movw	r30, r24
    1832:	82 a1       	ldd	r24, Z+34	; 0x22
    1834:	88 23       	and	r24, r24
    1836:	81 f1       	breq	.+96     	; 0x1898 <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	fc 01       	movw	r30, r24
    183e:	81 a1       	ldd	r24, Z+33	; 0x21
    1840:	88 2f       	mov	r24, r24
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	29 81       	ldd	r18, Y+1	; 0x01
    1846:	3a 81       	ldd	r19, Y+2	; 0x02
    1848:	82 0f       	add	r24, r18
    184a:	93 1f       	adc	r25, r19
    184c:	fc 01       	movw	r30, r24
    184e:	20 81       	ld	r18, Z
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	fc 01       	movw	r30, r24
    1856:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	9a 81       	ldd	r25, Y+2	; 0x02
    185c:	fc 01       	movw	r30, r24
    185e:	81 a1       	ldd	r24, Z+33	; 0x21
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	01 96       	adiw	r24, 0x01	; 1
    1866:	8f 71       	andi	r24, 0x1F	; 31
    1868:	90 78       	andi	r25, 0x80	; 128
    186a:	99 23       	and	r25, r25
    186c:	24 f4       	brge	.+8      	; 0x1876 <buffer_get_item+0x5e>
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	80 6e       	ori	r24, 0xE0	; 224
    1872:	9f 6f       	ori	r25, 0xFF	; 255
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	28 2f       	mov	r18, r24
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	9a 81       	ldd	r25, Y+2	; 0x02
    187c:	fc 01       	movw	r30, r24
    187e:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	9a 81       	ldd	r25, Y+2	; 0x02
    1884:	fc 01       	movw	r30, r24
    1886:	82 a1       	ldd	r24, Z+34	; 0x22
    1888:	2f ef       	ldi	r18, 0xFF	; 255
    188a:	28 0f       	add	r18, r24
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	9a 81       	ldd	r25, Y+2	; 0x02
    1890:	fc 01       	movw	r30, r24
    1892:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	01 c0       	rjmp	.+2      	; 0x189a <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
    1898:	81 e0       	ldi	r24, 0x01	; 1
}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	08 95       	ret

000018a8 <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <buffer_put_item+0x6>
    18ae:	1f 92       	push	r1
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	9a 83       	std	Y+2, r25	; 0x02
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	9a 81       	ldd	r25, Y+2	; 0x02
    18be:	fc 01       	movw	r30, r24
    18c0:	82 a1       	ldd	r24, Z+34	; 0x22
    18c2:	80 32       	cpi	r24, 0x20	; 32
    18c4:	68 f5       	brcc	.+90     	; 0x1920 <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	fc 01       	movw	r30, r24
    18cc:	80 a1       	ldd	r24, Z+32	; 0x20
    18ce:	88 2f       	mov	r24, r24
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	29 81       	ldd	r18, Y+1	; 0x01
    18d4:	3a 81       	ldd	r19, Y+2	; 0x02
    18d6:	82 0f       	add	r24, r18
    18d8:	93 1f       	adc	r25, r19
    18da:	2b 81       	ldd	r18, Y+3	; 0x03
    18dc:	fc 01       	movw	r30, r24
    18de:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	9a 81       	ldd	r25, Y+2	; 0x02
    18e4:	fc 01       	movw	r30, r24
    18e6:	80 a1       	ldd	r24, Z+32	; 0x20
    18e8:	88 2f       	mov	r24, r24
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	8f 71       	andi	r24, 0x1F	; 31
    18f0:	90 78       	andi	r25, 0x80	; 128
    18f2:	99 23       	and	r25, r25
    18f4:	24 f4       	brge	.+8      	; 0x18fe <buffer_put_item+0x56>
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	80 6e       	ori	r24, 0xE0	; 224
    18fa:	9f 6f       	ori	r25, 0xFF	; 255
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	28 2f       	mov	r18, r24
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	9a 81       	ldd	r25, Y+2	; 0x02
    1904:	fc 01       	movw	r30, r24
    1906:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	fc 01       	movw	r30, r24
    190e:	82 a1       	ldd	r24, Z+34	; 0x22
    1910:	21 e0       	ldi	r18, 0x01	; 1
    1912:	28 0f       	add	r18, r24
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	fc 01       	movw	r30, r24
    191a:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
    1920:	82 e0       	ldi	r24, 0x02	; 2
}
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	08 95       	ret

0000192e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	00 d0       	rcall	.+0      	; 0x1934 <vListInitialise+0x6>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	9c 01       	movw	r18, r24
    1942:	2d 5f       	subi	r18, 0xFD	; 253
    1944:	3f 4f       	sbci	r19, 0xFF	; 255
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	fc 01       	movw	r30, r24
    194c:	32 83       	std	Z+2, r19	; 0x02
    194e:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	9a 81       	ldd	r25, Y+2	; 0x02
    1954:	2f ef       	ldi	r18, 0xFF	; 255
    1956:	3f ef       	ldi	r19, 0xFF	; 255
    1958:	fc 01       	movw	r30, r24
    195a:	34 83       	std	Z+4, r19	; 0x04
    195c:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	9c 01       	movw	r18, r24
    1964:	2d 5f       	subi	r18, 0xFD	; 253
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	9a 81       	ldd	r25, Y+2	; 0x02
    196c:	fc 01       	movw	r30, r24
    196e:	36 83       	std	Z+6, r19	; 0x06
    1970:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	9a 81       	ldd	r25, Y+2	; 0x02
    1976:	9c 01       	movw	r18, r24
    1978:	2d 5f       	subi	r18, 0xFD	; 253
    197a:	3f 4f       	sbci	r19, 0xFF	; 255
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	9a 81       	ldd	r25, Y+2	; 0x02
    1980:	fc 01       	movw	r30, r24
    1982:	30 87       	std	Z+8, r19	; 0x08
    1984:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	fc 01       	movw	r30, r24
    198c:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    198e:	00 00       	nop
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	08 95       	ret

0000199a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <vListInitialiseItem+0x6>
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	fc 01       	movw	r30, r24
    19ae:	11 86       	std	Z+9, r1	; 0x09
    19b0:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    19b2:	00 00       	nop
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	08 95       	ret

000019be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <vListInsertEnd+0x6>
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <vListInsertEnd+0x8>
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <vListInsertEnd+0xa>
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	9c 83       	std	Y+4, r25	; 0x04
    19ce:	8b 83       	std	Y+3, r24	; 0x03
    19d0:	7e 83       	std	Y+6, r23	; 0x06
    19d2:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	fc 01       	movw	r30, r24
    19da:	81 81       	ldd	r24, Z+1	; 0x01
    19dc:	92 81       	ldd	r25, Z+2	; 0x02
    19de:	9a 83       	std	Y+2, r25	; 0x02
    19e0:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	9e 81       	ldd	r25, Y+6	; 0x06
    19e6:	29 81       	ldd	r18, Y+1	; 0x01
    19e8:	3a 81       	ldd	r19, Y+2	; 0x02
    19ea:	fc 01       	movw	r30, r24
    19ec:	33 83       	std	Z+3, r19	; 0x03
    19ee:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	9a 81       	ldd	r25, Y+2	; 0x02
    19f4:	fc 01       	movw	r30, r24
    19f6:	24 81       	ldd	r18, Z+4	; 0x04
    19f8:	35 81       	ldd	r19, Z+5	; 0x05
    19fa:	8d 81       	ldd	r24, Y+5	; 0x05
    19fc:	9e 81       	ldd	r25, Y+6	; 0x06
    19fe:	fc 01       	movw	r30, r24
    1a00:	35 83       	std	Z+5, r19	; 0x05
    1a02:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	9a 81       	ldd	r25, Y+2	; 0x02
    1a08:	fc 01       	movw	r30, r24
    1a0a:	84 81       	ldd	r24, Z+4	; 0x04
    1a0c:	95 81       	ldd	r25, Z+5	; 0x05
    1a0e:	2d 81       	ldd	r18, Y+5	; 0x05
    1a10:	3e 81       	ldd	r19, Y+6	; 0x06
    1a12:	fc 01       	movw	r30, r24
    1a14:	33 83       	std	Z+3, r19	; 0x03
    1a16:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a1e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a20:	fc 01       	movw	r30, r24
    1a22:	35 83       	std	Z+5, r19	; 0x05
    1a24:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a2e:	fc 01       	movw	r30, r24
    1a30:	31 87       	std	Z+9, r19	; 0x09
    1a32:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	fc 01       	movw	r30, r24
    1a3a:	80 81       	ld	r24, Z
    1a3c:	21 e0       	ldi	r18, 0x01	; 1
    1a3e:	28 0f       	add	r18, r24
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	fc 01       	movw	r30, r24
    1a46:	20 83       	st	Z, r18
}
    1a48:	00 00       	nop
    1a4a:	26 96       	adiw	r28, 0x06	; 6
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	28 97       	sbiw	r28, 0x08	; 8
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	9e 83       	std	Y+6, r25	; 0x06
    1a72:	8d 83       	std	Y+5, r24	; 0x05
    1a74:	78 87       	std	Y+8, r23	; 0x08
    1a76:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1a78:	8f 81       	ldd	r24, Y+7	; 0x07
    1a7a:	98 85       	ldd	r25, Y+8	; 0x08
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	80 81       	ld	r24, Z
    1a80:	91 81       	ldd	r25, Z+1	; 0x01
    1a82:	9c 83       	std	Y+4, r25	; 0x04
    1a84:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	01 96       	adiw	r24, 0x01	; 1
    1a8c:	41 f4       	brne	.+16     	; 0x1a9e <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	fc 01       	movw	r30, r24
    1a94:	87 81       	ldd	r24, Z+7	; 0x07
    1a96:	90 85       	ldd	r25, Z+8	; 0x08
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	1a c0       	rjmp	.+52     	; 0x1ad2 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	03 96       	adiw	r24, 0x03	; 3
    1aa4:	9a 83       	std	Y+2, r25	; 0x02
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	07 c0       	rjmp	.+14     	; 0x1ab8 <vListInsert+0x5c>
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	fc 01       	movw	r30, r24
    1ab0:	82 81       	ldd	r24, Z+2	; 0x02
    1ab2:	93 81       	ldd	r25, Z+3	; 0x03
    1ab4:	9a 83       	std	Y+2, r25	; 0x02
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	9a 81       	ldd	r25, Y+2	; 0x02
    1abc:	fc 01       	movw	r30, r24
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	93 81       	ldd	r25, Z+3	; 0x03
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	20 81       	ld	r18, Z
    1ac6:	31 81       	ldd	r19, Z+1	; 0x01
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	82 17       	cp	r24, r18
    1ace:	93 07       	cpc	r25, r19
    1ad0:	60 f7       	brcc	.-40     	; 0x1aaa <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	22 81       	ldd	r18, Z+2	; 0x02
    1ada:	33 81       	ldd	r19, Z+3	; 0x03
    1adc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ade:	98 85       	ldd	r25, Y+8	; 0x08
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	33 83       	std	Z+3, r19	; 0x03
    1ae4:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1ae6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae8:	98 85       	ldd	r25, Y+8	; 0x08
    1aea:	fc 01       	movw	r30, r24
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	2f 81       	ldd	r18, Y+7	; 0x07
    1af2:	38 85       	ldd	r19, Y+8	; 0x08
    1af4:	fc 01       	movw	r30, r24
    1af6:	35 83       	std	Z+5, r19	; 0x05
    1af8:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1afa:	8f 81       	ldd	r24, Y+7	; 0x07
    1afc:	98 85       	ldd	r25, Y+8	; 0x08
    1afe:	29 81       	ldd	r18, Y+1	; 0x01
    1b00:	3a 81       	ldd	r19, Y+2	; 0x02
    1b02:	fc 01       	movw	r30, r24
    1b04:	35 83       	std	Z+5, r19	; 0x05
    1b06:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b0e:	38 85       	ldd	r19, Y+8	; 0x08
    1b10:	fc 01       	movw	r30, r24
    1b12:	33 83       	std	Z+3, r19	; 0x03
    1b14:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1b16:	8f 81       	ldd	r24, Y+7	; 0x07
    1b18:	98 85       	ldd	r25, Y+8	; 0x08
    1b1a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b1c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b1e:	fc 01       	movw	r30, r24
    1b20:	31 87       	std	Z+9, r19	; 0x09
    1b22:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1b24:	8d 81       	ldd	r24, Y+5	; 0x05
    1b26:	9e 81       	ldd	r25, Y+6	; 0x06
    1b28:	fc 01       	movw	r30, r24
    1b2a:	80 81       	ld	r24, Z
    1b2c:	21 e0       	ldi	r18, 0x01	; 1
    1b2e:	28 0f       	add	r18, r24
    1b30:	8d 81       	ldd	r24, Y+5	; 0x05
    1b32:	9e 81       	ldd	r25, Y+6	; 0x06
    1b34:	fc 01       	movw	r30, r24
    1b36:	20 83       	st	Z, r18
}
    1b38:	00 00       	nop
    1b3a:	28 96       	adiw	r28, 0x08	; 8
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	08 95       	ret

00001b4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <uxListRemove+0x6>
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <uxListRemove+0x8>
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	9c 83       	std	Y+4, r25	; 0x04
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b60:	fc 01       	movw	r30, r24
    1b62:	80 85       	ldd	r24, Z+8	; 0x08
    1b64:	91 85       	ldd	r25, Z+9	; 0x09
    1b66:	9a 83       	std	Y+2, r25	; 0x02
    1b68:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6e:	fc 01       	movw	r30, r24
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	2b 81       	ldd	r18, Y+3	; 0x03
    1b76:	3c 81       	ldd	r19, Y+4	; 0x04
    1b78:	f9 01       	movw	r30, r18
    1b7a:	24 81       	ldd	r18, Z+4	; 0x04
    1b7c:	35 81       	ldd	r19, Z+5	; 0x05
    1b7e:	fc 01       	movw	r30, r24
    1b80:	35 83       	std	Z+5, r19	; 0x05
    1b82:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	fc 01       	movw	r30, r24
    1b8a:	84 81       	ldd	r24, Z+4	; 0x04
    1b8c:	95 81       	ldd	r25, Z+5	; 0x05
    1b8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b90:	3c 81       	ldd	r19, Y+4	; 0x04
    1b92:	f9 01       	movw	r30, r18
    1b94:	22 81       	ldd	r18, Z+2	; 0x02
    1b96:	33 81       	ldd	r19, Z+3	; 0x03
    1b98:	fc 01       	movw	r30, r24
    1b9a:	33 83       	std	Z+3, r19	; 0x03
    1b9c:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	21 81       	ldd	r18, Z+1	; 0x01
    1ba6:	32 81       	ldd	r19, Z+2	; 0x02
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	28 17       	cp	r18, r24
    1bae:	39 07       	cpc	r19, r25
    1bb0:	51 f4       	brne	.+20     	; 0x1bc6 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	24 81       	ldd	r18, Z+4	; 0x04
    1bba:	35 81       	ldd	r19, Z+5	; 0x05
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	32 83       	std	Z+2, r19	; 0x02
    1bc4:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	fc 01       	movw	r30, r24
    1bcc:	11 86       	std	Z+9, r1	; 0x09
    1bce:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	80 81       	ld	r24, Z
    1bd8:	2f ef       	ldi	r18, 0xFF	; 255
    1bda:	28 0f       	add	r18, r24
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	fc 01       	movw	r30, r24
    1be2:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	fc 01       	movw	r30, r24
    1bea:	80 81       	ld	r24, Z
}
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	08 95       	ret

00001bfa <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	28 97       	sbiw	r28, 0x08	; 8
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	9c 83       	std	Y+4, r25	; 0x04
    1c10:	8b 83       	std	Y+3, r24	; 0x03
    1c12:	7e 83       	std	Y+6, r23	; 0x06
    1c14:	6d 83       	std	Y+5, r22	; 0x05
    1c16:	58 87       	std	Y+8, r21	; 0x08
    1c18:	4f 83       	std	Y+7, r20	; 0x07
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	21 e1       	ldi	r18, 0x11	; 17
    1c20:	fc 01       	movw	r30, r24
    1c22:	20 83       	st	Z, r18
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	9c 81       	ldd	r25, Y+4	; 0x04
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	9c 83       	std	Y+4, r25	; 0x04
    1c2c:	8b 83       	std	Y+3, r24	; 0x03
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	9c 81       	ldd	r25, Y+4	; 0x04
    1c32:	22 e2       	ldi	r18, 0x22	; 34
    1c34:	fc 01       	movw	r30, r24
    1c36:	20 83       	st	Z, r18
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	9c 83       	std	Y+4, r25	; 0x04
    1c40:	8b 83       	std	Y+3, r24	; 0x03
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	23 e3       	ldi	r18, 0x33	; 51
    1c48:	fc 01       	movw	r30, r24
    1c4a:	20 83       	st	Z, r18
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	9c 83       	std	Y+4, r25	; 0x04
    1c54:	8b 83       	std	Y+3, r24	; 0x03
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5a:	9a 83       	std	Y+2, r25	; 0x02
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	29 81       	ldd	r18, Y+1	; 0x01
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	fc 01       	movw	r30, r24
    1c66:	20 83       	st	Z, r18
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	9c 83       	std	Y+4, r25	; 0x04
    1c70:	8b 83       	std	Y+3, r24	; 0x03
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	89 2f       	mov	r24, r25
    1c78:	99 27       	eor	r25, r25
    1c7a:	9a 83       	std	Y+2, r25	; 0x02
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	29 81       	ldd	r18, Y+1	; 0x01
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	fc 01       	movw	r30, r24
    1c86:	20 83       	st	Z, r18
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	9c 83       	std	Y+4, r25	; 0x04
    1c90:	8b 83       	std	Y+3, r24	; 0x03
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	fc 01       	movw	r30, r24
    1c98:	10 82       	st	Z, r1
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	9c 83       	std	Y+4, r25	; 0x04
    1ca2:	8b 83       	std	Y+3, r24	; 0x03
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	20 e8       	ldi	r18, 0x80	; 128
    1caa:	fc 01       	movw	r30, r24
    1cac:	20 83       	st	Z, r18
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	9c 83       	std	Y+4, r25	; 0x04
    1cb6:	8b 83       	std	Y+3, r24	; 0x03
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	10 82       	st	Z, r1
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	9c 83       	std	Y+4, r25	; 0x04
    1cc8:	8b 83       	std	Y+3, r24	; 0x03
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cce:	22 e0       	ldi	r18, 0x02	; 2
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	20 83       	st	Z, r18
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	9c 83       	std	Y+4, r25	; 0x04
    1cdc:	8b 83       	std	Y+3, r24	; 0x03
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	23 e0       	ldi	r18, 0x03	; 3
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	20 83       	st	Z, r18
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	9c 83       	std	Y+4, r25	; 0x04
    1cf0:	8b 83       	std	Y+3, r24	; 0x03
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	24 e0       	ldi	r18, 0x04	; 4
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	20 83       	st	Z, r18
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	9c 83       	std	Y+4, r25	; 0x04
    1d04:	8b 83       	std	Y+3, r24	; 0x03
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0a:	25 e0       	ldi	r18, 0x05	; 5
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	20 83       	st	Z, r18
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	9c 81       	ldd	r25, Y+4	; 0x04
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	9c 83       	std	Y+4, r25	; 0x04
    1d18:	8b 83       	std	Y+3, r24	; 0x03
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	26 e0       	ldi	r18, 0x06	; 6
    1d20:	fc 01       	movw	r30, r24
    1d22:	20 83       	st	Z, r18
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	9c 81       	ldd	r25, Y+4	; 0x04
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9c 83       	std	Y+4, r25	; 0x04
    1d2c:	8b 83       	std	Y+3, r24	; 0x03
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	27 e0       	ldi	r18, 0x07	; 7
    1d34:	fc 01       	movw	r30, r24
    1d36:	20 83       	st	Z, r18
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	9c 83       	std	Y+4, r25	; 0x04
    1d40:	8b 83       	std	Y+3, r24	; 0x03
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	28 e0       	ldi	r18, 0x08	; 8
    1d48:	fc 01       	movw	r30, r24
    1d4a:	20 83       	st	Z, r18
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	9c 83       	std	Y+4, r25	; 0x04
    1d54:	8b 83       	std	Y+3, r24	; 0x03
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	29 e0       	ldi	r18, 0x09	; 9
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	20 83       	st	Z, r18
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	9c 83       	std	Y+4, r25	; 0x04
    1d68:	8b 83       	std	Y+3, r24	; 0x03
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6e:	20 e1       	ldi	r18, 0x10	; 16
    1d70:	fc 01       	movw	r30, r24
    1d72:	20 83       	st	Z, r18
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	9c 83       	std	Y+4, r25	; 0x04
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	9c 81       	ldd	r25, Y+4	; 0x04
    1d82:	21 e1       	ldi	r18, 0x11	; 17
    1d84:	fc 01       	movw	r30, r24
    1d86:	20 83       	st	Z, r18
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	9c 83       	std	Y+4, r25	; 0x04
    1d90:	8b 83       	std	Y+3, r24	; 0x03
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	9c 81       	ldd	r25, Y+4	; 0x04
    1d96:	22 e1       	ldi	r18, 0x12	; 18
    1d98:	fc 01       	movw	r30, r24
    1d9a:	20 83       	st	Z, r18
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	9c 83       	std	Y+4, r25	; 0x04
    1da4:	8b 83       	std	Y+3, r24	; 0x03
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	9c 81       	ldd	r25, Y+4	; 0x04
    1daa:	23 e1       	ldi	r18, 0x13	; 19
    1dac:	fc 01       	movw	r30, r24
    1dae:	20 83       	st	Z, r18
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	9c 83       	std	Y+4, r25	; 0x04
    1db8:	8b 83       	std	Y+3, r24	; 0x03
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbe:	24 e1       	ldi	r18, 0x14	; 20
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	20 83       	st	Z, r18
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	9c 83       	std	Y+4, r25	; 0x04
    1dcc:	8b 83       	std	Y+3, r24	; 0x03
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd2:	25 e1       	ldi	r18, 0x15	; 21
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	20 83       	st	Z, r18
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	9c 83       	std	Y+4, r25	; 0x04
    1de0:	8b 83       	std	Y+3, r24	; 0x03
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	26 e1       	ldi	r18, 0x16	; 22
    1de8:	fc 01       	movw	r30, r24
    1dea:	20 83       	st	Z, r18
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9c 81       	ldd	r25, Y+4	; 0x04
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	9c 83       	std	Y+4, r25	; 0x04
    1df4:	8b 83       	std	Y+3, r24	; 0x03
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfa:	27 e1       	ldi	r18, 0x17	; 23
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	20 83       	st	Z, r18
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	9c 81       	ldd	r25, Y+4	; 0x04
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	9c 83       	std	Y+4, r25	; 0x04
    1e08:	8b 83       	std	Y+3, r24	; 0x03
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0e:	28 e1       	ldi	r18, 0x18	; 24
    1e10:	fc 01       	movw	r30, r24
    1e12:	20 83       	st	Z, r18
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	9c 81       	ldd	r25, Y+4	; 0x04
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	9c 83       	std	Y+4, r25	; 0x04
    1e1c:	8b 83       	std	Y+3, r24	; 0x03
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	29 e1       	ldi	r18, 0x19	; 25
    1e24:	fc 01       	movw	r30, r24
    1e26:	20 83       	st	Z, r18
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	9c 83       	std	Y+4, r25	; 0x04
    1e30:	8b 83       	std	Y+3, r24	; 0x03
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	9c 81       	ldd	r25, Y+4	; 0x04
    1e36:	20 e2       	ldi	r18, 0x20	; 32
    1e38:	fc 01       	movw	r30, r24
    1e3a:	20 83       	st	Z, r18
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	9c 83       	std	Y+4, r25	; 0x04
    1e44:	8b 83       	std	Y+3, r24	; 0x03
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4a:	21 e2       	ldi	r18, 0x21	; 33
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	20 83       	st	Z, r18
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	9c 83       	std	Y+4, r25	; 0x04
    1e58:	8b 83       	std	Y+3, r24	; 0x03
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	22 e2       	ldi	r18, 0x22	; 34
    1e60:	fc 01       	movw	r30, r24
    1e62:	20 83       	st	Z, r18
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	9c 83       	std	Y+4, r25	; 0x04
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	23 e2       	ldi	r18, 0x23	; 35
    1e74:	fc 01       	movw	r30, r24
    1e76:	20 83       	st	Z, r18
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	9c 83       	std	Y+4, r25	; 0x04
    1e80:	8b 83       	std	Y+3, r24	; 0x03
    1e82:	8f 81       	ldd	r24, Y+7	; 0x07
    1e84:	98 85       	ldd	r25, Y+8	; 0x08
    1e86:	9a 83       	std	Y+2, r25	; 0x02
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	29 81       	ldd	r18, Y+1	; 0x01
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	fc 01       	movw	r30, r24
    1e92:	20 83       	st	Z, r18
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	9c 81       	ldd	r25, Y+4	; 0x04
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	9c 83       	std	Y+4, r25	; 0x04
    1e9c:	8b 83       	std	Y+3, r24	; 0x03
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea2:	89 2f       	mov	r24, r25
    1ea4:	99 27       	eor	r25, r25
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	29 81       	ldd	r18, Y+1	; 0x01
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	20 83       	st	Z, r18
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	9c 83       	std	Y+4, r25	; 0x04
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec2:	26 e2       	ldi	r18, 0x26	; 38
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	20 83       	st	Z, r18
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	9c 83       	std	Y+4, r25	; 0x04
    1ed0:	8b 83       	std	Y+3, r24	; 0x03
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed6:	27 e2       	ldi	r18, 0x27	; 39
    1ed8:	fc 01       	movw	r30, r24
    1eda:	20 83       	st	Z, r18
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	9c 83       	std	Y+4, r25	; 0x04
    1ee4:	8b 83       	std	Y+3, r24	; 0x03
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	28 e2       	ldi	r18, 0x28	; 40
    1eec:	fc 01       	movw	r30, r24
    1eee:	20 83       	st	Z, r18
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	9c 83       	std	Y+4, r25	; 0x04
    1ef8:	8b 83       	std	Y+3, r24	; 0x03
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	29 e2       	ldi	r18, 0x29	; 41
    1f00:	fc 01       	movw	r30, r24
    1f02:	20 83       	st	Z, r18
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	9c 81       	ldd	r25, Y+4	; 0x04
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	9c 83       	std	Y+4, r25	; 0x04
    1f0c:	8b 83       	std	Y+3, r24	; 0x03
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	20 e3       	ldi	r18, 0x30	; 48
    1f14:	fc 01       	movw	r30, r24
    1f16:	20 83       	st	Z, r18
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	9c 83       	std	Y+4, r25	; 0x04
    1f20:	8b 83       	std	Y+3, r24	; 0x03
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	9c 81       	ldd	r25, Y+4	; 0x04
    1f26:	21 e3       	ldi	r18, 0x31	; 49
    1f28:	fc 01       	movw	r30, r24
    1f2a:	20 83       	st	Z, r18
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	9c 83       	std	Y+4, r25	; 0x04
    1f34:	8b 83       	std	Y+3, r24	; 0x03
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3a:	28 96       	adiw	r28, 0x08	; 8
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	08 95       	ret

00001f4c <xPortStartScheduler>:
    1f4c:	cf 93       	push	r28
    1f4e:	df 93       	push	r29
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	0e 94 93 10 	call	0x2126	; 0x2126 <prvSetupTimerInterrupt>
    1f58:	a0 91 51 07 	lds	r26, 0x0751	; 0x800751 <pxCurrentTCB>
    1f5c:	b0 91 52 07 	lds	r27, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    1f60:	cd 91       	ld	r28, X+
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	dd 91       	ld	r29, X+
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	ff 91       	pop	r31
    1f6a:	ef 91       	pop	r30
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	bf 91       	pop	r27
    1f72:	af 91       	pop	r26
    1f74:	9f 91       	pop	r25
    1f76:	8f 91       	pop	r24
    1f78:	7f 91       	pop	r23
    1f7a:	6f 91       	pop	r22
    1f7c:	5f 91       	pop	r21
    1f7e:	4f 91       	pop	r20
    1f80:	3f 91       	pop	r19
    1f82:	2f 91       	pop	r18
    1f84:	1f 91       	pop	r17
    1f86:	0f 91       	pop	r16
    1f88:	ff 90       	pop	r15
    1f8a:	ef 90       	pop	r14
    1f8c:	df 90       	pop	r13
    1f8e:	cf 90       	pop	r12
    1f90:	bf 90       	pop	r11
    1f92:	af 90       	pop	r10
    1f94:	9f 90       	pop	r9
    1f96:	8f 90       	pop	r8
    1f98:	7f 90       	pop	r7
    1f9a:	6f 90       	pop	r6
    1f9c:	5f 90       	pop	r5
    1f9e:	4f 90       	pop	r4
    1fa0:	3f 90       	pop	r3
    1fa2:	2f 90       	pop	r2
    1fa4:	1f 90       	pop	r1
    1fa6:	0f 90       	pop	r0
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	0f 90       	pop	r0
    1fac:	08 95       	ret
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	08 95       	ret

00001fb6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1fb6:	0f 92       	push	r0
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	f8 94       	cli
    1fbc:	0f 92       	push	r0
    1fbe:	1f 92       	push	r1
    1fc0:	11 24       	eor	r1, r1
    1fc2:	2f 92       	push	r2
    1fc4:	3f 92       	push	r3
    1fc6:	4f 92       	push	r4
    1fc8:	5f 92       	push	r5
    1fca:	6f 92       	push	r6
    1fcc:	7f 92       	push	r7
    1fce:	8f 92       	push	r8
    1fd0:	9f 92       	push	r9
    1fd2:	af 92       	push	r10
    1fd4:	bf 92       	push	r11
    1fd6:	cf 92       	push	r12
    1fd8:	df 92       	push	r13
    1fda:	ef 92       	push	r14
    1fdc:	ff 92       	push	r15
    1fde:	0f 93       	push	r16
    1fe0:	1f 93       	push	r17
    1fe2:	2f 93       	push	r18
    1fe4:	3f 93       	push	r19
    1fe6:	4f 93       	push	r20
    1fe8:	5f 93       	push	r21
    1fea:	6f 93       	push	r22
    1fec:	7f 93       	push	r23
    1fee:	8f 93       	push	r24
    1ff0:	9f 93       	push	r25
    1ff2:	af 93       	push	r26
    1ff4:	bf 93       	push	r27
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	ef 93       	push	r30
    1ffc:	ff 93       	push	r31
    1ffe:	a0 91 51 07 	lds	r26, 0x0751	; 0x800751 <pxCurrentTCB>
    2002:	b0 91 52 07 	lds	r27, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    2006:	0d b6       	in	r0, 0x3d	; 61
    2008:	0d 92       	st	X+, r0
    200a:	0e b6       	in	r0, 0x3e	; 62
    200c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    200e:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2012:	a0 91 51 07 	lds	r26, 0x0751	; 0x800751 <pxCurrentTCB>
    2016:	b0 91 52 07 	lds	r27, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    201a:	cd 91       	ld	r28, X+
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	dd 91       	ld	r29, X+
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	ff 91       	pop	r31
    2024:	ef 91       	pop	r30
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	bf 91       	pop	r27
    202c:	af 91       	pop	r26
    202e:	9f 91       	pop	r25
    2030:	8f 91       	pop	r24
    2032:	7f 91       	pop	r23
    2034:	6f 91       	pop	r22
    2036:	5f 91       	pop	r21
    2038:	4f 91       	pop	r20
    203a:	3f 91       	pop	r19
    203c:	2f 91       	pop	r18
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	ff 90       	pop	r15
    2044:	ef 90       	pop	r14
    2046:	df 90       	pop	r13
    2048:	cf 90       	pop	r12
    204a:	bf 90       	pop	r11
    204c:	af 90       	pop	r10
    204e:	9f 90       	pop	r9
    2050:	8f 90       	pop	r8
    2052:	7f 90       	pop	r7
    2054:	6f 90       	pop	r6
    2056:	5f 90       	pop	r5
    2058:	4f 90       	pop	r4
    205a:	3f 90       	pop	r3
    205c:	2f 90       	pop	r2
    205e:	1f 90       	pop	r1
    2060:	0f 90       	pop	r0
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2066:	08 95       	ret
	...

0000206a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    206a:	0f 92       	push	r0
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	0f 92       	push	r0
    2072:	1f 92       	push	r1
    2074:	11 24       	eor	r1, r1
    2076:	2f 92       	push	r2
    2078:	3f 92       	push	r3
    207a:	4f 92       	push	r4
    207c:	5f 92       	push	r5
    207e:	6f 92       	push	r6
    2080:	7f 92       	push	r7
    2082:	8f 92       	push	r8
    2084:	9f 92       	push	r9
    2086:	af 92       	push	r10
    2088:	bf 92       	push	r11
    208a:	cf 92       	push	r12
    208c:	df 92       	push	r13
    208e:	ef 92       	push	r14
    2090:	ff 92       	push	r15
    2092:	0f 93       	push	r16
    2094:	1f 93       	push	r17
    2096:	2f 93       	push	r18
    2098:	3f 93       	push	r19
    209a:	4f 93       	push	r20
    209c:	5f 93       	push	r21
    209e:	6f 93       	push	r22
    20a0:	7f 93       	push	r23
    20a2:	8f 93       	push	r24
    20a4:	9f 93       	push	r25
    20a6:	af 93       	push	r26
    20a8:	bf 93       	push	r27
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	ef 93       	push	r30
    20b0:	ff 93       	push	r31
    20b2:	a0 91 51 07 	lds	r26, 0x0751	; 0x800751 <pxCurrentTCB>
    20b6:	b0 91 52 07 	lds	r27, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    20ba:	0d b6       	in	r0, 0x3d	; 61
    20bc:	0d 92       	st	X+, r0
    20be:	0e b6       	in	r0, 0x3e	; 62
    20c0:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    20c2:	0e 94 07 1c 	call	0x380e	; 0x380e <xTaskIncrementTick>
    20c6:	88 23       	and	r24, r24
    20c8:	11 f0       	breq	.+4      	; 0x20ce <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    20ca:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    20ce:	a0 91 51 07 	lds	r26, 0x0751	; 0x800751 <pxCurrentTCB>
    20d2:	b0 91 52 07 	lds	r27, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    20d6:	cd 91       	ld	r28, X+
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	dd 91       	ld	r29, X+
    20dc:	de bf       	out	0x3e, r29	; 62
    20de:	ff 91       	pop	r31
    20e0:	ef 91       	pop	r30
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	bf 91       	pop	r27
    20e8:	af 91       	pop	r26
    20ea:	9f 91       	pop	r25
    20ec:	8f 91       	pop	r24
    20ee:	7f 91       	pop	r23
    20f0:	6f 91       	pop	r22
    20f2:	5f 91       	pop	r21
    20f4:	4f 91       	pop	r20
    20f6:	3f 91       	pop	r19
    20f8:	2f 91       	pop	r18
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	ff 90       	pop	r15
    2100:	ef 90       	pop	r14
    2102:	df 90       	pop	r13
    2104:	cf 90       	pop	r12
    2106:	bf 90       	pop	r11
    2108:	af 90       	pop	r10
    210a:	9f 90       	pop	r9
    210c:	8f 90       	pop	r8
    210e:	7f 90       	pop	r7
    2110:	6f 90       	pop	r6
    2112:	5f 90       	pop	r5
    2114:	4f 90       	pop	r4
    2116:	3f 90       	pop	r3
    2118:	2f 90       	pop	r2
    211a:	1f 90       	pop	r1
    211c:	0f 90       	pop	r0
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2122:	08 95       	ret
	...

00002126 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	00 d0       	rcall	.+0      	; 0x212c <prvSetupTimerInterrupt+0x6>
    212c:	00 d0       	rcall	.+0      	; 0x212e <prvSetupTimerInterrupt+0x8>
    212e:	00 d0       	rcall	.+0      	; 0x2130 <prvSetupTimerInterrupt+0xa>
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2134:	89 e9       	ldi	r24, 0x99	; 153
    2136:	99 e3       	ldi	r25, 0x39	; 57
    2138:	a0 e0       	ldi	r26, 0x00	; 0
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	9a 83       	std	Y+2, r25	; 0x02
    2140:	ab 83       	std	Y+3, r26	; 0x03
    2142:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	ab 81       	ldd	r26, Y+3	; 0x03
    214a:	bc 81       	ldd	r27, Y+4	; 0x04
    214c:	68 94       	set
    214e:	15 f8       	bld	r1, 5
    2150:	b6 95       	lsr	r27
    2152:	a7 95       	ror	r26
    2154:	97 95       	ror	r25
    2156:	87 95       	ror	r24
    2158:	16 94       	lsr	r1
    215a:	d1 f7       	brne	.-12     	; 0x2150 <prvSetupTimerInterrupt+0x2a>
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	ab 83       	std	Y+3, r26	; 0x03
    2162:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	9a 81       	ldd	r25, Y+2	; 0x02
    2168:	ab 81       	ldd	r26, Y+3	; 0x03
    216a:	bc 81       	ldd	r27, Y+4	; 0x04
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	a1 09       	sbc	r26, r1
    2170:	b1 09       	sbc	r27, r1
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	9a 83       	std	Y+2, r25	; 0x02
    2176:	ab 83       	std	Y+3, r26	; 0x03
    2178:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	9a 81       	ldd	r25, Y+2	; 0x02
    2182:	ab 81       	ldd	r26, Y+3	; 0x03
    2184:	bc 81       	ldd	r27, Y+4	; 0x04
    2186:	89 2f       	mov	r24, r25
    2188:	9a 2f       	mov	r25, r26
    218a:	ab 2f       	mov	r26, r27
    218c:	bb 27       	eor	r27, r27
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	9a 83       	std	Y+2, r25	; 0x02
    2192:	ab 83       	std	Y+3, r26	; 0x03
    2194:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    219a:	89 e8       	ldi	r24, 0x89	; 137
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	2e 81       	ldd	r18, Y+6	; 0x06
    21a0:	fc 01       	movw	r30, r24
    21a2:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    21a4:	88 e8       	ldi	r24, 0x88	; 136
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	2d 81       	ldd	r18, Y+5	; 0x05
    21aa:	fc 01       	movw	r30, r24
    21ac:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    21ae:	8b e0       	ldi	r24, 0x0B	; 11
    21b0:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    21b2:	81 e8       	ldi	r24, 0x81	; 129
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	2d 81       	ldd	r18, Y+5	; 0x05
    21b8:	fc 01       	movw	r30, r24
    21ba:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    21bc:	8f e6       	ldi	r24, 0x6F	; 111
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	fc 01       	movw	r30, r24
    21c2:	80 81       	ld	r24, Z
    21c4:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    21c6:	8d 81       	ldd	r24, Y+5	; 0x05
    21c8:	82 60       	ori	r24, 0x02	; 2
    21ca:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    21cc:	8f e6       	ldi	r24, 0x6F	; 111
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	2d 81       	ldd	r18, Y+5	; 0x05
    21d2:	fc 01       	movw	r30, r24
    21d4:	20 83       	st	Z, r18
}
    21d6:	00 00       	nop
    21d8:	26 96       	adiw	r28, 0x06	; 6
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	08 95       	ret

000021ea <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    21ea:	0e 94 35 10 	call	0x206a	; 0x206a <vPortYieldFromTick>
		asm volatile ( "reti" );
    21ee:	18 95       	reti
	...

000021f2 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <pvPortMalloc+0x6>
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <pvPortMalloc+0x8>
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	9c 83       	std	Y+4, r25	; 0x04
    2200:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    2202:	1a 82       	std	Y+2, r1	; 0x02
    2204:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    2206:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    220a:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pucAlignedHeap.2084>
    220e:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pucAlignedHeap.2084+0x1>
    2212:	89 2b       	or	r24, r25
    2214:	31 f4       	brne	.+12     	; 0x2222 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    2216:	82 e6       	ldi	r24, 0x62	; 98
    2218:	93 e0       	ldi	r25, 0x03	; 3
    221a:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <pucAlignedHeap.2084+0x1>
    221e:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <pucAlignedHeap.2084>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    2222:	20 91 49 07 	lds	r18, 0x0749	; 0x800749 <xNextFreeByte>
    2226:	30 91 4a 07 	lds	r19, 0x074A	; 0x80074a <xNextFreeByte+0x1>
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	82 0f       	add	r24, r18
    2230:	93 1f       	adc	r25, r19
    2232:	87 3e       	cpi	r24, 0xE7	; 231
    2234:	93 40       	sbci	r25, 0x03	; 3
    2236:	38 f5       	brcc	.+78     	; 0x2286 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    2238:	20 91 49 07 	lds	r18, 0x0749	; 0x800749 <xNextFreeByte>
    223c:	30 91 4a 07 	lds	r19, 0x074A	; 0x80074a <xNextFreeByte+0x1>
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	28 0f       	add	r18, r24
    2246:	39 1f       	adc	r19, r25
    2248:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <xNextFreeByte>
    224c:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    2250:	82 17       	cp	r24, r18
    2252:	93 07       	cpc	r25, r19
    2254:	c0 f4       	brcc	.+48     	; 0x2286 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    2256:	20 91 4b 07 	lds	r18, 0x074B	; 0x80074b <pucAlignedHeap.2084>
    225a:	30 91 4c 07 	lds	r19, 0x074C	; 0x80074c <pucAlignedHeap.2084+0x1>
    225e:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <xNextFreeByte>
    2262:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <xNextFreeByte+0x1>
    2266:	82 0f       	add	r24, r18
    2268:	93 1f       	adc	r25, r19
    226a:	9a 83       	std	Y+2, r25	; 0x02
    226c:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    226e:	20 91 49 07 	lds	r18, 0x0749	; 0x800749 <xNextFreeByte>
    2272:	30 91 4a 07 	lds	r19, 0x074A	; 0x80074a <xNextFreeByte+0x1>
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	82 0f       	add	r24, r18
    227c:	93 1f       	adc	r25, r19
    227e:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <xNextFreeByte+0x1>
    2282:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    2286:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	df 91       	pop	r29
    2298:	cf 91       	pop	r28
    229a:	08 95       	ret

0000229c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	00 d0       	rcall	.+0      	; 0x22a2 <vPortFree+0x6>
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	9a 83       	std	Y+2, r25	; 0x02
    22a8:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    22aa:	00 00       	nop
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	08 95       	ret

000022b6 <_serial_tx_int_on>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <_serial_tx_int_on+0x6>
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	9a 81       	ldd	r25, Y+2	; 0x02
    22c8:	05 97       	sbiw	r24, 0x05	; 5
    22ca:	29 81       	ldd	r18, Y+1	; 0x01
    22cc:	3a 81       	ldd	r19, Y+2	; 0x02
    22ce:	25 50       	subi	r18, 0x05	; 5
    22d0:	31 09       	sbc	r19, r1
    22d2:	f9 01       	movw	r30, r18
    22d4:	20 81       	ld	r18, Z
    22d6:	20 62       	ori	r18, 0x20	; 32
    22d8:	fc 01       	movw	r30, r24
    22da:	20 83       	st	Z, r18
    22dc:	00 00       	nop
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	08 95       	ret

000022e8 <serial_new_instance>:
    22e8:	8f 92       	push	r8
    22ea:	9f 92       	push	r9
    22ec:	af 92       	push	r10
    22ee:	bf 92       	push	r11
    22f0:	cf 92       	push	r12
    22f2:	df 92       	push	r13
    22f4:	ef 92       	push	r14
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	61 97       	sbiw	r28, 0x11	; 17
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	8c 83       	std	Y+4, r24	; 0x04
    2310:	4d 83       	std	Y+5, r20	; 0x05
    2312:	5e 83       	std	Y+6, r21	; 0x06
    2314:	6f 83       	std	Y+7, r22	; 0x07
    2316:	78 87       	std	Y+8, r23	; 0x08
    2318:	29 87       	std	Y+9, r18	; 0x09
    231a:	0a 87       	std	Y+10, r16	; 0x0a
    231c:	eb 86       	std	Y+11, r14	; 0x0b
    231e:	dd 86       	std	Y+13, r13	; 0x0d
    2320:	cc 86       	std	Y+12, r12	; 0x0c
    2322:	bf 86       	std	Y+15, r11	; 0x0f
    2324:	ae 86       	std	Y+14, r10	; 0x0e
    2326:	99 8a       	std	Y+17, r9	; 0x11
    2328:	88 8a       	std	Y+16, r8	; 0x10
    232a:	88 e0       	ldi	r24, 0x08	; 8
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	0e 94 c5 24 	call	0x498a	; 0x498a <malloc>
    2332:	9a 83       	std	Y+2, r25	; 0x02
    2334:	89 83       	std	Y+1, r24	; 0x01
    2336:	8c 81       	ldd	r24, Y+4	; 0x04
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	83 5b       	subi	r24, 0xB3	; 179
    2342:	98 4f       	sbci	r25, 0xF8	; 248
    2344:	29 81       	ldd	r18, Y+1	; 0x01
    2346:	3a 81       	ldd	r19, Y+2	; 0x02
    2348:	fc 01       	movw	r30, r24
    234a:	31 83       	std	Z+1, r19	; 0x01
    234c:	20 83       	st	Z, r18
    234e:	8c 81       	ldd	r24, Y+4	; 0x04
    2350:	88 2f       	mov	r24, r24
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	8a 5f       	subi	r24, 0xFA	; 250
    235a:	9e 4f       	sbci	r25, 0xFE	; 254
    235c:	fc 01       	movw	r30, r24
    235e:	20 81       	ld	r18, Z
    2360:	31 81       	ldd	r19, Z+1	; 0x01
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	fc 01       	movw	r30, r24
    2368:	31 83       	std	Z+1, r19	; 0x01
    236a:	20 83       	st	Z, r18
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	9a 81       	ldd	r25, Y+2	; 0x02
    2370:	2e 85       	ldd	r18, Y+14	; 0x0e
    2372:	3f 85       	ldd	r19, Y+15	; 0x0f
    2374:	fc 01       	movw	r30, r24
    2376:	33 83       	std	Z+3, r19	; 0x03
    2378:	22 83       	std	Z+2, r18	; 0x02
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	9a 81       	ldd	r25, Y+2	; 0x02
    237e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2380:	3d 85       	ldd	r19, Y+13	; 0x0d
    2382:	fc 01       	movw	r30, r24
    2384:	35 83       	std	Z+5, r19	; 0x05
    2386:	24 83       	std	Z+4, r18	; 0x04
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	9a 81       	ldd	r25, Y+2	; 0x02
    238c:	28 89       	ldd	r18, Y+16	; 0x10
    238e:	39 89       	ldd	r19, Y+17	; 0x11
    2390:	fc 01       	movw	r30, r24
    2392:	37 83       	std	Z+7, r19	; 0x07
    2394:	26 83       	std	Z+6, r18	; 0x06
    2396:	8f e5       	ldi	r24, 0x5F	; 95
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	fc 01       	movw	r30, r24
    239c:	80 81       	ld	r24, Z
    239e:	8b 83       	std	Y+3, r24	; 0x03
    23a0:	f8 94       	cli
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	9a 81       	ldd	r25, Y+2	; 0x02
    23a6:	fc 01       	movw	r30, r24
    23a8:	80 81       	ld	r24, Z
    23aa:	91 81       	ldd	r25, Z+1	; 0x01
    23ac:	06 97       	sbiw	r24, 0x06	; 6
    23ae:	29 81       	ldd	r18, Y+1	; 0x01
    23b0:	3a 81       	ldd	r19, Y+2	; 0x02
    23b2:	f9 01       	movw	r30, r18
    23b4:	20 81       	ld	r18, Z
    23b6:	31 81       	ldd	r19, Z+1	; 0x01
    23b8:	26 50       	subi	r18, 0x06	; 6
    23ba:	31 09       	sbc	r19, r1
    23bc:	f9 01       	movw	r30, r18
    23be:	20 81       	ld	r18, Z
    23c0:	22 60       	ori	r18, 0x02	; 2
    23c2:	fc 01       	movw	r30, r24
    23c4:	20 83       	st	Z, r18
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ca:	fc 01       	movw	r30, r24
    23cc:	80 81       	ld	r24, Z
    23ce:	91 81       	ldd	r25, Z+1	; 0x01
    23d0:	8c 01       	movw	r16, r24
    23d2:	02 50       	subi	r16, 0x02	; 2
    23d4:	11 09       	sbc	r17, r1
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	9e 81       	ldd	r25, Y+6	; 0x06
    23da:	af 81       	ldd	r26, Y+7	; 0x07
    23dc:	b8 85       	ldd	r27, Y+8	; 0x08
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	aa 1f       	adc	r26, r26
    23e4:	bb 1f       	adc	r27, r27
    23e6:	88 0f       	add	r24, r24
    23e8:	99 1f       	adc	r25, r25
    23ea:	aa 1f       	adc	r26, r26
    23ec:	bb 1f       	adc	r27, r27
    23ee:	88 0f       	add	r24, r24
    23f0:	99 1f       	adc	r25, r25
    23f2:	aa 1f       	adc	r26, r26
    23f4:	bb 1f       	adc	r27, r27
    23f6:	9c 01       	movw	r18, r24
    23f8:	ad 01       	movw	r20, r26
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	a1 ee       	ldi	r26, 0xE1	; 225
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	bc 01       	movw	r22, r24
    2404:	cd 01       	movw	r24, r26
    2406:	0e 94 9d 24 	call	0x493a	; 0x493a <__udivmodsi4>
    240a:	da 01       	movw	r26, r20
    240c:	c9 01       	movw	r24, r18
    240e:	81 50       	subi	r24, 0x01	; 1
    2410:	f8 01       	movw	r30, r16
    2412:	80 83       	st	Z, r24
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	9a 81       	ldd	r25, Y+2	; 0x02
    2418:	fc 01       	movw	r30, r24
    241a:	80 81       	ld	r24, Z
    241c:	91 81       	ldd	r25, Z+1	; 0x01
    241e:	05 97       	sbiw	r24, 0x05	; 5
    2420:	28 e9       	ldi	r18, 0x98	; 152
    2422:	fc 01       	movw	r30, r24
    2424:	20 83       	st	Z, r18
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	fc 01       	movw	r30, r24
    242c:	80 81       	ld	r24, Z
    242e:	91 81       	ldd	r25, Z+1	; 0x01
    2430:	04 97       	sbiw	r24, 0x04	; 4
    2432:	26 e0       	ldi	r18, 0x06	; 6
    2434:	fc 01       	movw	r30, r24
    2436:	20 83       	st	Z, r18
    2438:	8f e5       	ldi	r24, 0x5F	; 95
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	2b 81       	ldd	r18, Y+3	; 0x03
    243e:	fc 01       	movw	r30, r24
    2440:	20 83       	st	Z, r18
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	9a 81       	ldd	r25, Y+2	; 0x02
    2446:	61 96       	adiw	r28, 0x11	; 17
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	1f 91       	pop	r17
    2458:	0f 91       	pop	r16
    245a:	ef 90       	pop	r14
    245c:	df 90       	pop	r13
    245e:	cf 90       	pop	r12
    2460:	bf 90       	pop	r11
    2462:	af 90       	pop	r10
    2464:	9f 90       	pop	r9
    2466:	8f 90       	pop	r8
    2468:	08 95       	ret

0000246a <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	00 d0       	rcall	.+0      	; 0x2470 <serial_send_bytes+0x6>
    2470:	00 d0       	rcall	.+0      	; 0x2472 <serial_send_bytes+0x8>
    2472:	00 d0       	rcall	.+0      	; 0x2474 <serial_send_bytes+0xa>
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	9b 83       	std	Y+3, r25	; 0x03
    247a:	8a 83       	std	Y+2, r24	; 0x02
    247c:	7d 83       	std	Y+5, r23	; 0x05
    247e:	6c 83       	std	Y+4, r22	; 0x04
    2480:	4e 83       	std	Y+6, r20	; 0x06
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	9b 81       	ldd	r25, Y+3	; 0x03
    2486:	fc 01       	movw	r30, r24
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	89 2b       	or	r24, r25
    248e:	a9 f0       	breq	.+42     	; 0x24ba <serial_send_bytes+0x50>
    2490:	8e 81       	ldd	r24, Y+6	; 0x06
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	9b 81       	ldd	r25, Y+3	; 0x03
    249a:	fc 01       	movw	r30, r24
    249c:	82 81       	ldd	r24, Z+2	; 0x02
    249e:	93 81       	ldd	r25, Z+3	; 0x03
    24a0:	fc 01       	movw	r30, r24
    24a2:	82 a1       	ldd	r24, Z+34	; 0x22
    24a4:	88 2f       	mov	r24, r24
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	40 e2       	ldi	r20, 0x20	; 32
    24aa:	50 e0       	ldi	r21, 0x00	; 0
    24ac:	ba 01       	movw	r22, r20
    24ae:	68 1b       	sub	r22, r24
    24b0:	79 0b       	sbc	r23, r25
    24b2:	cb 01       	movw	r24, r22
    24b4:	82 17       	cp	r24, r18
    24b6:	93 07       	cpc	r25, r19
    24b8:	54 f0       	brlt	.+20     	; 0x24ce <serial_send_bytes+0x64>
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	9b 81       	ldd	r25, Y+3	; 0x03
    24be:	fc 01       	movw	r30, r24
    24c0:	82 81       	ldd	r24, Z+2	; 0x02
    24c2:	93 81       	ldd	r25, Z+3	; 0x03
    24c4:	89 2b       	or	r24, r25
    24c6:	29 f4       	brne	.+10     	; 0x24d2 <serial_send_bytes+0x68>
    24c8:	8e 81       	ldd	r24, Y+6	; 0x06
    24ca:	82 30       	cpi	r24, 0x02	; 2
    24cc:	10 f0       	brcs	.+4      	; 0x24d2 <serial_send_bytes+0x68>
		return BUFFER_FULL;
    24ce:	82 e0       	ldi	r24, 0x02	; 2
    24d0:	22 c0       	rjmp	.+68     	; 0x2516 <serial_send_bytes+0xac>
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    24d2:	19 82       	std	Y+1, r1	; 0x01
    24d4:	14 c0       	rjmp	.+40     	; 0x24fe <serial_send_bytes+0x94>
		buffer_put_item(handle->_tx_buf, buf[i]);
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	88 2f       	mov	r24, r24
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	2c 81       	ldd	r18, Y+4	; 0x04
    24de:	3d 81       	ldd	r19, Y+5	; 0x05
    24e0:	82 0f       	add	r24, r18
    24e2:	93 1f       	adc	r25, r19
    24e4:	fc 01       	movw	r30, r24
    24e6:	20 81       	ld	r18, Z
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	9b 81       	ldd	r25, Y+3	; 0x03
    24ec:	fc 01       	movw	r30, r24
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	62 2f       	mov	r22, r18
    24f4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	8f 5f       	subi	r24, 0xFF	; 255
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	99 81       	ldd	r25, Y+1	; 0x01
    2500:	8e 81       	ldd	r24, Y+6	; 0x06
    2502:	98 17       	cp	r25, r24
    2504:	40 f3       	brcs	.-48     	; 0x24d6 <serial_send_bytes+0x6c>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	9b 81       	ldd	r25, Y+3	; 0x03
    250a:	fc 01       	movw	r30, r24
    250c:	80 81       	ld	r24, Z
    250e:	91 81       	ldd	r25, Z+1	; 0x01
    2510:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <_serial_tx_int_on>
	return BUFFER_OK;
    2514:	80 e0       	ldi	r24, 0x00	; 0
}
    2516:	26 96       	adiw	r28, 0x06	; 6
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	08 95       	ret

00002528 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    2528:	1f 92       	push	r1
    252a:	0f 92       	push	r0
    252c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2530:	0f 92       	push	r0
    2532:	11 24       	eor	r1, r1
    2534:	2f 93       	push	r18
    2536:	3f 93       	push	r19
    2538:	4f 93       	push	r20
    253a:	5f 93       	push	r21
    253c:	6f 93       	push	r22
    253e:	7f 93       	push	r23
    2540:	8f 93       	push	r24
    2542:	9f 93       	push	r25
    2544:	af 93       	push	r26
    2546:	bf 93       	push	r27
    2548:	ef 93       	push	r30
    254a:	ff 93       	push	r31
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	1f 92       	push	r1
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    2556:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle>
    255a:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x1>
    255e:	89 2b       	or	r24, r25
    2560:	31 f1       	breq	.+76     	; 0x25ae <__vector_20+0x86>
		item = UDR0;
    2562:	86 ec       	ldi	r24, 0xC6	; 198
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	fc 01       	movw	r30, r24
    2568:	80 81       	ld	r24, Z
    256a:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    256c:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle>
    2570:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x1>
    2574:	fc 01       	movw	r30, r24
    2576:	84 81       	ldd	r24, Z+4	; 0x04
    2578:	95 81       	ldd	r25, Z+5	; 0x05
    257a:	69 81       	ldd	r22, Y+1	; 0x01
    257c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    2580:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle>
    2584:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x1>
    2588:	fc 01       	movw	r30, r24
    258a:	86 81       	ldd	r24, Z+6	; 0x06
    258c:	97 81       	ldd	r25, Z+7	; 0x07
    258e:	89 2b       	or	r24, r25
    2590:	71 f0       	breq	.+28     	; 0x25ae <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    2592:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle>
    2596:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x1>
    259a:	fc 01       	movw	r30, r24
    259c:	26 81       	ldd	r18, Z+6	; 0x06
    259e:	37 81       	ldd	r19, Z+7	; 0x07
    25a0:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle>
    25a4:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x1>
    25a8:	69 81       	ldd	r22, Y+1	; 0x01
    25aa:	f9 01       	movw	r30, r18
    25ac:	09 95       	icall
		}
	}
}
    25ae:	00 00       	nop
    25b0:	0f 90       	pop	r0
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	ff 91       	pop	r31
    25b8:	ef 91       	pop	r30
    25ba:	bf 91       	pop	r27
    25bc:	af 91       	pop	r26
    25be:	9f 91       	pop	r25
    25c0:	8f 91       	pop	r24
    25c2:	7f 91       	pop	r23
    25c4:	6f 91       	pop	r22
    25c6:	5f 91       	pop	r21
    25c8:	4f 91       	pop	r20
    25ca:	3f 91       	pop	r19
    25cc:	2f 91       	pop	r18
    25ce:	0f 90       	pop	r0
    25d0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    25d4:	0f 90       	pop	r0
    25d6:	1f 90       	pop	r1
    25d8:	18 95       	reti

000025da <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    25da:	1f 92       	push	r1
    25dc:	0f 92       	push	r0
    25de:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    25e2:	0f 92       	push	r0
    25e4:	11 24       	eor	r1, r1
    25e6:	2f 93       	push	r18
    25e8:	3f 93       	push	r19
    25ea:	4f 93       	push	r20
    25ec:	5f 93       	push	r21
    25ee:	6f 93       	push	r22
    25f0:	7f 93       	push	r23
    25f2:	8f 93       	push	r24
    25f4:	9f 93       	push	r25
    25f6:	af 93       	push	r26
    25f8:	bf 93       	push	r27
    25fa:	ef 93       	push	r30
    25fc:	ff 93       	push	r31
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	1f 92       	push	r1
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    2608:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle>
    260c:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x1>
    2610:	89 2b       	or	r24, r25
    2612:	f9 f0       	breq	.+62     	; 0x2652 <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    2614:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle>
    2618:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x1>
    261c:	fc 01       	movw	r30, r24
    261e:	82 81       	ldd	r24, Z+2	; 0x02
    2620:	93 81       	ldd	r25, Z+3	; 0x03
    2622:	9e 01       	movw	r18, r28
    2624:	2f 5f       	subi	r18, 0xFF	; 255
    2626:	3f 4f       	sbci	r19, 0xFF	; 255
    2628:	b9 01       	movw	r22, r18
    262a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <buffer_get_item>
    262e:	88 23       	and	r24, r24
    2630:	31 f4       	brne	.+12     	; 0x263e <__vector_21+0x64>
			UDR0 = item;
    2632:	86 ec       	ldi	r24, 0xC6	; 198
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	29 81       	ldd	r18, Y+1	; 0x01
    2638:	fc 01       	movw	r30, r24
    263a:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    263c:	13 c0       	rjmp	.+38     	; 0x2664 <__vector_21+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
			UDR0 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    263e:	81 ec       	ldi	r24, 0xC1	; 193
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	21 ec       	ldi	r18, 0xC1	; 193
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	f9 01       	movw	r30, r18
    2648:	20 81       	ld	r18, Z
    264a:	2f 7d       	andi	r18, 0xDF	; 223
    264c:	fc 01       	movw	r30, r24
    264e:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    2650:	09 c0       	rjmp	.+18     	; 0x2664 <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    2652:	81 ec       	ldi	r24, 0xC1	; 193
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	21 ec       	ldi	r18, 0xC1	; 193
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	f9 01       	movw	r30, r18
    265c:	20 81       	ld	r18, Z
    265e:	2f 7d       	andi	r18, 0xDF	; 223
    2660:	fc 01       	movw	r30, r24
    2662:	20 83       	st	Z, r18
	}
}
    2664:	00 00       	nop
    2666:	0f 90       	pop	r0
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	ff 91       	pop	r31
    266e:	ef 91       	pop	r30
    2670:	bf 91       	pop	r27
    2672:	af 91       	pop	r26
    2674:	9f 91       	pop	r25
    2676:	8f 91       	pop	r24
    2678:	7f 91       	pop	r23
    267a:	6f 91       	pop	r22
    267c:	5f 91       	pop	r21
    267e:	4f 91       	pop	r20
    2680:	3f 91       	pop	r19
    2682:	2f 91       	pop	r18
    2684:	0f 90       	pop	r0
    2686:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    268a:	0f 90       	pop	r0
    268c:	1f 90       	pop	r1
    268e:	18 95       	reti

00002690 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    2690:	1f 92       	push	r1
    2692:	0f 92       	push	r0
    2694:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2698:	0f 92       	push	r0
    269a:	11 24       	eor	r1, r1
    269c:	2f 93       	push	r18
    269e:	3f 93       	push	r19
    26a0:	4f 93       	push	r20
    26a2:	5f 93       	push	r21
    26a4:	6f 93       	push	r22
    26a6:	7f 93       	push	r23
    26a8:	8f 93       	push	r24
    26aa:	9f 93       	push	r25
    26ac:	af 93       	push	r26
    26ae:	bf 93       	push	r27
    26b0:	ef 93       	push	r30
    26b2:	ff 93       	push	r31
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	1f 92       	push	r1
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    26be:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ser_handle+0x2>
    26c2:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <_ser_handle+0x3>
    26c6:	89 2b       	or	r24, r25
    26c8:	31 f1       	breq	.+76     	; 0x2716 <__vector_28+0x86>
		item = UDR1;
    26ca:	8e ec       	ldi	r24, 0xCE	; 206
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	fc 01       	movw	r30, r24
    26d0:	80 81       	ld	r24, Z
    26d2:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    26d4:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ser_handle+0x2>
    26d8:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <_ser_handle+0x3>
    26dc:	fc 01       	movw	r30, r24
    26de:	84 81       	ldd	r24, Z+4	; 0x04
    26e0:	95 81       	ldd	r25, Z+5	; 0x05
    26e2:	69 81       	ldd	r22, Y+1	; 0x01
    26e4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    26e8:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ser_handle+0x2>
    26ec:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <_ser_handle+0x3>
    26f0:	fc 01       	movw	r30, r24
    26f2:	86 81       	ldd	r24, Z+6	; 0x06
    26f4:	97 81       	ldd	r25, Z+7	; 0x07
    26f6:	89 2b       	or	r24, r25
    26f8:	71 f0       	breq	.+28     	; 0x2716 <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    26fa:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ser_handle+0x2>
    26fe:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <_ser_handle+0x3>
    2702:	fc 01       	movw	r30, r24
    2704:	26 81       	ldd	r18, Z+6	; 0x06
    2706:	37 81       	ldd	r19, Z+7	; 0x07
    2708:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ser_handle+0x2>
    270c:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <_ser_handle+0x3>
    2710:	69 81       	ldd	r22, Y+1	; 0x01
    2712:	f9 01       	movw	r30, r18
    2714:	09 95       	icall
		}
	}
}
    2716:	00 00       	nop
    2718:	0f 90       	pop	r0
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	ff 91       	pop	r31
    2720:	ef 91       	pop	r30
    2722:	bf 91       	pop	r27
    2724:	af 91       	pop	r26
    2726:	9f 91       	pop	r25
    2728:	8f 91       	pop	r24
    272a:	7f 91       	pop	r23
    272c:	6f 91       	pop	r22
    272e:	5f 91       	pop	r21
    2730:	4f 91       	pop	r20
    2732:	3f 91       	pop	r19
    2734:	2f 91       	pop	r18
    2736:	0f 90       	pop	r0
    2738:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    273c:	0f 90       	pop	r0
    273e:	1f 90       	pop	r1
    2740:	18 95       	reti

00002742 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    2742:	1f 92       	push	r1
    2744:	0f 92       	push	r0
    2746:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    274a:	0f 92       	push	r0
    274c:	11 24       	eor	r1, r1
    274e:	2f 93       	push	r18
    2750:	3f 93       	push	r19
    2752:	4f 93       	push	r20
    2754:	5f 93       	push	r21
    2756:	6f 93       	push	r22
    2758:	7f 93       	push	r23
    275a:	8f 93       	push	r24
    275c:	9f 93       	push	r25
    275e:	af 93       	push	r26
    2760:	bf 93       	push	r27
    2762:	ef 93       	push	r30
    2764:	ff 93       	push	r31
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	1f 92       	push	r1
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    2770:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ser_handle+0x2>
    2774:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <_ser_handle+0x3>
    2778:	89 2b       	or	r24, r25
    277a:	f9 f0       	breq	.+62     	; 0x27ba <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    277c:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ser_handle+0x2>
    2780:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <_ser_handle+0x3>
    2784:	fc 01       	movw	r30, r24
    2786:	82 81       	ldd	r24, Z+2	; 0x02
    2788:	93 81       	ldd	r25, Z+3	; 0x03
    278a:	9e 01       	movw	r18, r28
    278c:	2f 5f       	subi	r18, 0xFF	; 255
    278e:	3f 4f       	sbci	r19, 0xFF	; 255
    2790:	b9 01       	movw	r22, r18
    2792:	0e 94 0c 0c 	call	0x1818	; 0x1818 <buffer_get_item>
    2796:	88 23       	and	r24, r24
    2798:	31 f4       	brne	.+12     	; 0x27a6 <__vector_29+0x64>
			UDR1 = item;
    279a:	8e ec       	ldi	r24, 0xCE	; 206
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	29 81       	ldd	r18, Y+1	; 0x01
    27a0:	fc 01       	movw	r30, r24
    27a2:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    27a4:	13 c0       	rjmp	.+38     	; 0x27cc <__vector_29+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
			UDR1 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    27a6:	89 ec       	ldi	r24, 0xC9	; 201
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	29 ec       	ldi	r18, 0xC9	; 201
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	f9 01       	movw	r30, r18
    27b0:	20 81       	ld	r18, Z
    27b2:	2f 7d       	andi	r18, 0xDF	; 223
    27b4:	fc 01       	movw	r30, r24
    27b6:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    27b8:	09 c0       	rjmp	.+18     	; 0x27cc <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    27ba:	89 ec       	ldi	r24, 0xC9	; 201
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	29 ec       	ldi	r18, 0xC9	; 201
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	f9 01       	movw	r30, r18
    27c4:	20 81       	ld	r18, Z
    27c6:	2f 7d       	andi	r18, 0xDF	; 223
    27c8:	fc 01       	movw	r30, r24
    27ca:	20 83       	st	Z, r18
	}
}
    27cc:	00 00       	nop
    27ce:	0f 90       	pop	r0
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	ff 91       	pop	r31
    27d6:	ef 91       	pop	r30
    27d8:	bf 91       	pop	r27
    27da:	af 91       	pop	r26
    27dc:	9f 91       	pop	r25
    27de:	8f 91       	pop	r24
    27e0:	7f 91       	pop	r23
    27e2:	6f 91       	pop	r22
    27e4:	5f 91       	pop	r21
    27e6:	4f 91       	pop	r20
    27e8:	3f 91       	pop	r19
    27ea:	2f 91       	pop	r18
    27ec:	0f 90       	pop	r0
    27ee:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    27f2:	0f 90       	pop	r0
    27f4:	1f 90       	pop	r1
    27f6:	18 95       	reti

000027f8 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <xQueueGenericReset+0x6>
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <xQueueGenericReset+0x8>
    2800:	1f 92       	push	r1
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
    2806:	9c 83       	std	Y+4, r25	; 0x04
    2808:	8b 83       	std	Y+3, r24	; 0x03
    280a:	6d 83       	std	Y+5, r22	; 0x05
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	9c 81       	ldd	r25, Y+4	; 0x04
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	0f 92       	push	r0
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	9a 81       	ldd	r25, Y+2	; 0x02
    281e:	fc 01       	movw	r30, r24
    2820:	80 81       	ld	r24, Z
    2822:	91 81       	ldd	r25, Z+1	; 0x01
    2824:	29 81       	ldd	r18, Y+1	; 0x01
    2826:	3a 81       	ldd	r19, Y+2	; 0x02
    2828:	f9 01       	movw	r30, r18
    282a:	23 8d       	ldd	r18, Z+27	; 0x1b
    282c:	42 2f       	mov	r20, r18
    282e:	50 e0       	ldi	r21, 0x00	; 0
    2830:	29 81       	ldd	r18, Y+1	; 0x01
    2832:	3a 81       	ldd	r19, Y+2	; 0x02
    2834:	f9 01       	movw	r30, r18
    2836:	24 8d       	ldd	r18, Z+28	; 0x1c
    2838:	22 2f       	mov	r18, r18
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	42 9f       	mul	r20, r18
    283e:	b0 01       	movw	r22, r0
    2840:	43 9f       	mul	r20, r19
    2842:	70 0d       	add	r23, r0
    2844:	52 9f       	mul	r21, r18
    2846:	70 0d       	add	r23, r0
    2848:	11 24       	eor	r1, r1
    284a:	9b 01       	movw	r18, r22
    284c:	28 0f       	add	r18, r24
    284e:	39 1f       	adc	r19, r25
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	9a 81       	ldd	r25, Y+2	; 0x02
    2854:	fc 01       	movw	r30, r24
    2856:	33 83       	std	Z+3, r19	; 0x03
    2858:	22 83       	std	Z+2, r18	; 0x02
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	9a 81       	ldd	r25, Y+2	; 0x02
    285e:	fc 01       	movw	r30, r24
    2860:	12 8e       	std	Z+26, r1	; 0x1a
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	9a 81       	ldd	r25, Y+2	; 0x02
    2866:	fc 01       	movw	r30, r24
    2868:	20 81       	ld	r18, Z
    286a:	31 81       	ldd	r19, Z+1	; 0x01
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	9a 81       	ldd	r25, Y+2	; 0x02
    2870:	fc 01       	movw	r30, r24
    2872:	35 83       	std	Z+5, r19	; 0x05
    2874:	24 83       	std	Z+4, r18	; 0x04
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	9a 81       	ldd	r25, Y+2	; 0x02
    287a:	fc 01       	movw	r30, r24
    287c:	80 81       	ld	r24, Z
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	29 81       	ldd	r18, Y+1	; 0x01
    2882:	3a 81       	ldd	r19, Y+2	; 0x02
    2884:	f9 01       	movw	r30, r18
    2886:	23 8d       	ldd	r18, Z+27	; 0x1b
    2888:	22 2f       	mov	r18, r18
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	a9 01       	movw	r20, r18
    288e:	41 50       	subi	r20, 0x01	; 1
    2890:	51 09       	sbc	r21, r1
    2892:	29 81       	ldd	r18, Y+1	; 0x01
    2894:	3a 81       	ldd	r19, Y+2	; 0x02
    2896:	f9 01       	movw	r30, r18
    2898:	24 8d       	ldd	r18, Z+28	; 0x1c
    289a:	22 2f       	mov	r18, r18
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	42 9f       	mul	r20, r18
    28a0:	b0 01       	movw	r22, r0
    28a2:	43 9f       	mul	r20, r19
    28a4:	70 0d       	add	r23, r0
    28a6:	52 9f       	mul	r21, r18
    28a8:	70 0d       	add	r23, r0
    28aa:	11 24       	eor	r1, r1
    28ac:	9b 01       	movw	r18, r22
    28ae:	28 0f       	add	r18, r24
    28b0:	39 1f       	adc	r19, r25
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	fc 01       	movw	r30, r24
    28b8:	37 83       	std	Z+7, r19	; 0x07
    28ba:	26 83       	std	Z+6, r18	; 0x06
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
    28c0:	2f ef       	ldi	r18, 0xFF	; 255
    28c2:	fc 01       	movw	r30, r24
    28c4:	25 8f       	std	Z+29, r18	; 0x1d
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ca:	2f ef       	ldi	r18, 0xFF	; 255
    28cc:	fc 01       	movw	r30, r24
    28ce:	26 8f       	std	Z+30, r18	; 0x1e
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	88 23       	and	r24, r24
    28d4:	81 f4       	brne	.+32     	; 0x28f6 <xQueueGenericReset+0xfe>
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	9a 81       	ldd	r25, Y+2	; 0x02
    28da:	fc 01       	movw	r30, r24
    28dc:	80 85       	ldd	r24, Z+8	; 0x08
    28de:	88 23       	and	r24, r24
    28e0:	a1 f0       	breq	.+40     	; 0x290a <xQueueGenericReset+0x112>
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	9a 81       	ldd	r25, Y+2	; 0x02
    28e6:	08 96       	adiw	r24, 0x08	; 8
    28e8:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <xTaskRemoveFromEventList>
    28ec:	88 23       	and	r24, r24
    28ee:	69 f0       	breq	.+26     	; 0x290a <xQueueGenericReset+0x112>
    28f0:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vPortYield>
    28f4:	0a c0       	rjmp	.+20     	; 0x290a <xQueueGenericReset+0x112>
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	9a 81       	ldd	r25, Y+2	; 0x02
    28fa:	08 96       	adiw	r24, 0x08	; 8
    28fc:	0e 94 97 0c 	call	0x192e	; 0x192e <vListInitialise>
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	41 96       	adiw	r24, 0x11	; 17
    2906:	0e 94 97 0c 	call	0x192e	; 0x192e <vListInitialise>
    290a:	0f 90       	pop	r0
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	08 95       	ret

00002920 <xQueueGenericCreate>:
    2920:	0f 93       	push	r16
    2922:	1f 93       	push	r17
    2924:	cf 93       	push	r28
    2926:	df 93       	push	r29
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	29 97       	sbiw	r28, 0x09	; 9
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	8f 83       	std	Y+7, r24	; 0x07
    293a:	68 87       	std	Y+8, r22	; 0x08
    293c:	49 87       	std	Y+9, r20	; 0x09
    293e:	88 85       	ldd	r24, Y+8	; 0x08
    2940:	88 23       	and	r24, r24
    2942:	19 f4       	brne	.+6      	; 0x294a <xQueueGenericCreate+0x2a>
    2944:	1a 82       	std	Y+2, r1	; 0x02
    2946:	19 82       	std	Y+1, r1	; 0x01
    2948:	0f c0       	rjmp	.+30     	; 0x2968 <xQueueGenericCreate+0x48>
    294a:	8f 81       	ldd	r24, Y+7	; 0x07
    294c:	48 2f       	mov	r20, r24
    294e:	50 e0       	ldi	r21, 0x00	; 0
    2950:	88 85       	ldd	r24, Y+8	; 0x08
    2952:	28 2f       	mov	r18, r24
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	42 9f       	mul	r20, r18
    2958:	c0 01       	movw	r24, r0
    295a:	43 9f       	mul	r20, r19
    295c:	90 0d       	add	r25, r0
    295e:	52 9f       	mul	r21, r18
    2960:	90 0d       	add	r25, r0
    2962:	11 24       	eor	r1, r1
    2964:	9a 83       	std	Y+2, r25	; 0x02
    2966:	89 83       	std	Y+1, r24	; 0x01
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	9a 81       	ldd	r25, Y+2	; 0x02
    296c:	81 96       	adiw	r24, 0x21	; 33
    296e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <pvPortMalloc>
    2972:	9c 83       	std	Y+4, r25	; 0x04
    2974:	8b 83       	std	Y+3, r24	; 0x03
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	9c 81       	ldd	r25, Y+4	; 0x04
    297a:	89 2b       	or	r24, r25
    297c:	81 f0       	breq	.+32     	; 0x299e <xQueueGenericCreate+0x7e>
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	9c 81       	ldd	r25, Y+4	; 0x04
    2982:	81 96       	adiw	r24, 0x21	; 33
    2984:	9e 83       	std	Y+6, r25	; 0x06
    2986:	8d 83       	std	Y+5, r24	; 0x05
    2988:	2b 81       	ldd	r18, Y+3	; 0x03
    298a:	3c 81       	ldd	r19, Y+4	; 0x04
    298c:	8d 81       	ldd	r24, Y+5	; 0x05
    298e:	9e 81       	ldd	r25, Y+6	; 0x06
    2990:	89 01       	movw	r16, r18
    2992:	29 85       	ldd	r18, Y+9	; 0x09
    2994:	ac 01       	movw	r20, r24
    2996:	68 85       	ldd	r22, Y+8	; 0x08
    2998:	8f 81       	ldd	r24, Y+7	; 0x07
    299a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <prvInitialiseNewQueue>
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	9c 81       	ldd	r25, Y+4	; 0x04
    29a2:	29 96       	adiw	r28, 0x09	; 9
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	1f 91       	pop	r17
    29b4:	0f 91       	pop	r16
    29b6:	08 95       	ret

000029b8 <prvInitialiseNewQueue>:
    29b8:	0f 93       	push	r16
    29ba:	1f 93       	push	r17
    29bc:	cf 93       	push	r28
    29be:	df 93       	push	r29
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
    29c4:	27 97       	sbiw	r28, 0x07	; 7
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	89 83       	std	Y+1, r24	; 0x01
    29d2:	6a 83       	std	Y+2, r22	; 0x02
    29d4:	5c 83       	std	Y+4, r21	; 0x04
    29d6:	4b 83       	std	Y+3, r20	; 0x03
    29d8:	2d 83       	std	Y+5, r18	; 0x05
    29da:	1f 83       	std	Y+7, r17	; 0x07
    29dc:	0e 83       	std	Y+6, r16	; 0x06
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	88 23       	and	r24, r24
    29e2:	41 f4       	brne	.+16     	; 0x29f4 <prvInitialiseNewQueue+0x3c>
    29e4:	8e 81       	ldd	r24, Y+6	; 0x06
    29e6:	9f 81       	ldd	r25, Y+7	; 0x07
    29e8:	2e 81       	ldd	r18, Y+6	; 0x06
    29ea:	3f 81       	ldd	r19, Y+7	; 0x07
    29ec:	fc 01       	movw	r30, r24
    29ee:	31 83       	std	Z+1, r19	; 0x01
    29f0:	20 83       	st	Z, r18
    29f2:	07 c0       	rjmp	.+14     	; 0x2a02 <prvInitialiseNewQueue+0x4a>
    29f4:	8e 81       	ldd	r24, Y+6	; 0x06
    29f6:	9f 81       	ldd	r25, Y+7	; 0x07
    29f8:	2b 81       	ldd	r18, Y+3	; 0x03
    29fa:	3c 81       	ldd	r19, Y+4	; 0x04
    29fc:	fc 01       	movw	r30, r24
    29fe:	31 83       	std	Z+1, r19	; 0x01
    2a00:	20 83       	st	Z, r18
    2a02:	8e 81       	ldd	r24, Y+6	; 0x06
    2a04:	9f 81       	ldd	r25, Y+7	; 0x07
    2a06:	29 81       	ldd	r18, Y+1	; 0x01
    2a08:	fc 01       	movw	r30, r24
    2a0a:	23 8f       	std	Z+27, r18	; 0x1b
    2a0c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a0e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a10:	2a 81       	ldd	r18, Y+2	; 0x02
    2a12:	fc 01       	movw	r30, r24
    2a14:	24 8f       	std	Z+28, r18	; 0x1c
    2a16:	8e 81       	ldd	r24, Y+6	; 0x06
    2a18:	9f 81       	ldd	r25, Y+7	; 0x07
    2a1a:	61 e0       	ldi	r22, 0x01	; 1
    2a1c:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <xQueueGenericReset>
    2a20:	8e 81       	ldd	r24, Y+6	; 0x06
    2a22:	9f 81       	ldd	r25, Y+7	; 0x07
    2a24:	2d 81       	ldd	r18, Y+5	; 0x05
    2a26:	fc 01       	movw	r30, r24
    2a28:	20 a3       	std	Z+32, r18	; 0x20
    2a2a:	00 00       	nop
    2a2c:	27 96       	adiw	r28, 0x07	; 7
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	1f 91       	pop	r17
    2a3e:	0f 91       	pop	r16
    2a40:	08 95       	ret

00002a42 <prvInitialiseMutex>:
    2a42:	cf 93       	push	r28
    2a44:	df 93       	push	r29
    2a46:	00 d0       	rcall	.+0      	; 0x2a48 <prvInitialiseMutex+0x6>
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
    2a4c:	9a 83       	std	Y+2, r25	; 0x02
    2a4e:	89 83       	std	Y+1, r24	; 0x01
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	9a 81       	ldd	r25, Y+2	; 0x02
    2a54:	89 2b       	or	r24, r25
    2a56:	b9 f0       	breq	.+46     	; 0x2a86 <prvInitialiseMutex+0x44>
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	13 82       	std	Z+3, r1	; 0x03
    2a60:	12 82       	std	Z+2, r1	; 0x02
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	9a 81       	ldd	r25, Y+2	; 0x02
    2a66:	fc 01       	movw	r30, r24
    2a68:	11 82       	std	Z+1, r1	; 0x01
    2a6a:	10 82       	st	Z, r1
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a70:	fc 01       	movw	r30, r24
    2a72:	16 82       	std	Z+6, r1	; 0x06
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	9a 81       	ldd	r25, Y+2	; 0x02
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	40 e0       	ldi	r20, 0x00	; 0
    2a7c:	50 e0       	ldi	r21, 0x00	; 0
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
    2a80:	70 e0       	ldi	r23, 0x00	; 0
    2a82:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <xQueueGenericSend>
    2a86:	00 00       	nop
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	df 91       	pop	r29
    2a8e:	cf 91       	pop	r28
    2a90:	08 95       	ret

00002a92 <xQueueCreateMutex>:
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
    2a96:	00 d0       	rcall	.+0      	; 0x2a98 <xQueueCreateMutex+0x6>
    2a98:	00 d0       	rcall	.+0      	; 0x2a9a <xQueueCreateMutex+0x8>
    2a9a:	1f 92       	push	r1
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	8d 83       	std	Y+5, r24	; 0x05
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	89 83       	std	Y+1, r24	; 0x01
    2aa6:	1a 82       	std	Y+2, r1	; 0x02
    2aa8:	4d 81       	ldd	r20, Y+5	; 0x05
    2aaa:	6a 81       	ldd	r22, Y+2	; 0x02
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	0e 94 90 14 	call	0x2920	; 0x2920 <xQueueGenericCreate>
    2ab2:	9c 83       	std	Y+4, r25	; 0x04
    2ab4:	8b 83       	std	Y+3, r24	; 0x03
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aba:	0e 94 21 15 	call	0x2a42	; 0x2a42 <prvInitialiseMutex>
    2abe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	08 95       	ret

00002ad2 <xQueueGenericSend>:
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	2e 97       	sbiw	r28, 0x0e	; 14
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	99 87       	std	Y+9, r25	; 0x09
    2ae8:	88 87       	std	Y+8, r24	; 0x08
    2aea:	7b 87       	std	Y+11, r23	; 0x0b
    2aec:	6a 87       	std	Y+10, r22	; 0x0a
    2aee:	5d 87       	std	Y+13, r21	; 0x0d
    2af0:	4c 87       	std	Y+12, r20	; 0x0c
    2af2:	2e 87       	std	Y+14, r18	; 0x0e
    2af4:	19 82       	std	Y+1, r1	; 0x01
    2af6:	88 85       	ldd	r24, Y+8	; 0x08
    2af8:	99 85       	ldd	r25, Y+9	; 0x09
    2afa:	9b 83       	std	Y+3, r25	; 0x03
    2afc:	8a 83       	std	Y+2, r24	; 0x02
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	f8 94       	cli
    2b02:	0f 92       	push	r0
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	9b 81       	ldd	r25, Y+3	; 0x03
    2b08:	fc 01       	movw	r30, r24
    2b0a:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b10:	fc 01       	movw	r30, r24
    2b12:	83 8d       	ldd	r24, Z+27	; 0x1b
    2b14:	28 17       	cp	r18, r24
    2b16:	18 f0       	brcs	.+6      	; 0x2b1e <xQueueGenericSend+0x4c>
    2b18:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b1a:	82 30       	cpi	r24, 0x02	; 2
    2b1c:	11 f5       	brne	.+68     	; 0x2b62 <xQueueGenericSend+0x90>
    2b1e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b20:	3b 85       	ldd	r19, Y+11	; 0x0b
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	9b 81       	ldd	r25, Y+3	; 0x03
    2b26:	4e 85       	ldd	r20, Y+14	; 0x0e
    2b28:	b9 01       	movw	r22, r18
    2b2a:	0e 94 6f 17 	call	0x2ede	; 0x2ede <prvCopyDataToQueue>
    2b2e:	8c 83       	std	Y+4, r24	; 0x04
    2b30:	8a 81       	ldd	r24, Y+2	; 0x02
    2b32:	9b 81       	ldd	r25, Y+3	; 0x03
    2b34:	fc 01       	movw	r30, r24
    2b36:	81 89       	ldd	r24, Z+17	; 0x11
    2b38:	88 23       	and	r24, r24
    2b3a:	51 f0       	breq	.+20     	; 0x2b50 <xQueueGenericSend+0x7e>
    2b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b40:	41 96       	adiw	r24, 0x11	; 17
    2b42:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <xTaskRemoveFromEventList>
    2b46:	88 23       	and	r24, r24
    2b48:	41 f0       	breq	.+16     	; 0x2b5a <xQueueGenericSend+0x88>
    2b4a:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vPortYield>
    2b4e:	05 c0       	rjmp	.+10     	; 0x2b5a <xQueueGenericSend+0x88>
    2b50:	8c 81       	ldd	r24, Y+4	; 0x04
    2b52:	88 23       	and	r24, r24
    2b54:	11 f0       	breq	.+4      	; 0x2b5a <xQueueGenericSend+0x88>
    2b56:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vPortYield>
    2b5a:	0f 90       	pop	r0
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	60 c0       	rjmp	.+192    	; 0x2c22 <xQueueGenericSend+0x150>
    2b62:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b64:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b66:	89 2b       	or	r24, r25
    2b68:	21 f4       	brne	.+8      	; 0x2b72 <xQueueGenericSend+0xa0>
    2b6a:	0f 90       	pop	r0
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	58 c0       	rjmp	.+176    	; 0x2c22 <xQueueGenericSend+0x150>
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	88 23       	and	r24, r24
    2b76:	31 f4       	brne	.+12     	; 0x2b84 <xQueueGenericSend+0xb2>
    2b78:	ce 01       	movw	r24, r28
    2b7a:	05 96       	adiw	r24, 0x05	; 5
    2b7c:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <vTaskSetTimeOutState>
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	89 83       	std	Y+1, r24	; 0x01
    2b84:	0f 90       	pop	r0
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <vTaskSuspendAll>
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	0f 92       	push	r0
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	9b 81       	ldd	r25, Y+3	; 0x03
    2b96:	fc 01       	movw	r30, r24
    2b98:	85 8d       	ldd	r24, Z+29	; 0x1d
    2b9a:	8f 3f       	cpi	r24, 0xFF	; 255
    2b9c:	21 f4       	brne	.+8      	; 0x2ba6 <xQueueGenericSend+0xd4>
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	15 8e       	std	Z+29, r1	; 0x1d
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    2baa:	fc 01       	movw	r30, r24
    2bac:	86 8d       	ldd	r24, Z+30	; 0x1e
    2bae:	8f 3f       	cpi	r24, 0xFF	; 255
    2bb0:	21 f4       	brne	.+8      	; 0x2bba <xQueueGenericSend+0xe8>
    2bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	16 8e       	std	Z+30, r1	; 0x1e
    2bba:	0f 90       	pop	r0
    2bbc:	0f be       	out	0x3f, r0	; 63
    2bbe:	9e 01       	movw	r18, r28
    2bc0:	24 5f       	subi	r18, 0xF4	; 244
    2bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc4:	ce 01       	movw	r24, r28
    2bc6:	05 96       	adiw	r24, 0x05	; 5
    2bc8:	b9 01       	movw	r22, r18
    2bca:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <xTaskCheckForTimeOut>
    2bce:	88 23       	and	r24, r24
    2bd0:	09 f5       	brne	.+66     	; 0x2c14 <xQueueGenericSend+0x142>
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd6:	0e 94 0c 19 	call	0x3218	; 0x3218 <prvIsQueueFull>
    2bda:	88 23       	and	r24, r24
    2bdc:	a1 f0       	breq	.+40     	; 0x2c06 <xQueueGenericSend+0x134>
    2bde:	2c 85       	ldd	r18, Y+12	; 0x0c
    2be0:	3d 85       	ldd	r19, Y+13	; 0x0d
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	9b 81       	ldd	r25, Y+3	; 0x03
    2be6:	08 96       	adiw	r24, 0x08	; 8
    2be8:	b9 01       	movw	r22, r18
    2bea:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <vTaskPlaceOnEventList>
    2bee:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf2:	0e 94 90 18 	call	0x3120	; 0x3120 <prvUnlockQueue>
    2bf6:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <xTaskResumeAll>
    2bfa:	88 23       	and	r24, r24
    2bfc:	09 f0       	breq	.+2      	; 0x2c00 <xQueueGenericSend+0x12e>
    2bfe:	7f cf       	rjmp	.-258    	; 0x2afe <xQueueGenericSend+0x2c>
    2c00:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vPortYield>
    2c04:	7c cf       	rjmp	.-264    	; 0x2afe <xQueueGenericSend+0x2c>
    2c06:	8a 81       	ldd	r24, Y+2	; 0x02
    2c08:	9b 81       	ldd	r25, Y+3	; 0x03
    2c0a:	0e 94 90 18 	call	0x3120	; 0x3120 <prvUnlockQueue>
    2c0e:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <xTaskResumeAll>
    2c12:	75 cf       	rjmp	.-278    	; 0x2afe <xQueueGenericSend+0x2c>
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	9b 81       	ldd	r25, Y+3	; 0x03
    2c18:	0e 94 90 18 	call	0x3120	; 0x3120 <prvUnlockQueue>
    2c1c:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <xTaskResumeAll>
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	2e 96       	adiw	r28, 0x0e	; 14
    2c24:	0f b6       	in	r0, 0x3f	; 63
    2c26:	f8 94       	cli
    2c28:	de bf       	out	0x3e, r29	; 62
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	cd bf       	out	0x3d, r28	; 61
    2c2e:	df 91       	pop	r29
    2c30:	cf 91       	pop	r28
    2c32:	08 95       	ret

00002c34 <xQueueGenericSendFromISR>:
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	2c 97       	sbiw	r28, 0x0c	; 12
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	9f 83       	std	Y+7, r25	; 0x07
    2c4a:	8e 83       	std	Y+6, r24	; 0x06
    2c4c:	79 87       	std	Y+9, r23	; 0x09
    2c4e:	68 87       	std	Y+8, r22	; 0x08
    2c50:	5b 87       	std	Y+11, r21	; 0x0b
    2c52:	4a 87       	std	Y+10, r20	; 0x0a
    2c54:	2c 87       	std	Y+12, r18	; 0x0c
    2c56:	8e 81       	ldd	r24, Y+6	; 0x06
    2c58:	9f 81       	ldd	r25, Y+7	; 0x07
    2c5a:	9b 83       	std	Y+3, r25	; 0x03
    2c5c:	8a 83       	std	Y+2, r24	; 0x02
    2c5e:	1c 82       	std	Y+4, r1	; 0x04
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	9b 81       	ldd	r25, Y+3	; 0x03
    2c64:	fc 01       	movw	r30, r24
    2c66:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2c70:	28 17       	cp	r18, r24
    2c72:	18 f0       	brcs	.+6      	; 0x2c7a <xQueueGenericSendFromISR+0x46>
    2c74:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c76:	82 30       	cpi	r24, 0x02	; 2
    2c78:	89 f5       	brne	.+98     	; 0x2cdc <xQueueGenericSendFromISR+0xa8>
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7e:	fc 01       	movw	r30, r24
    2c80:	86 8d       	ldd	r24, Z+30	; 0x1e
    2c82:	8d 83       	std	Y+5, r24	; 0x05
    2c84:	28 85       	ldd	r18, Y+8	; 0x08
    2c86:	39 85       	ldd	r19, Y+9	; 0x09
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8c:	4c 85       	ldd	r20, Y+12	; 0x0c
    2c8e:	b9 01       	movw	r22, r18
    2c90:	0e 94 6f 17 	call	0x2ede	; 0x2ede <prvCopyDataToQueue>
    2c94:	8d 81       	ldd	r24, Y+5	; 0x05
    2c96:	8f 3f       	cpi	r24, 0xFF	; 255
    2c98:	b9 f4       	brne	.+46     	; 0x2cc8 <xQueueGenericSendFromISR+0x94>
    2c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	81 89       	ldd	r24, Z+17	; 0x11
    2ca2:	88 23       	and	r24, r24
    2ca4:	c1 f0       	breq	.+48     	; 0x2cd6 <xQueueGenericSendFromISR+0xa2>
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    2caa:	41 96       	adiw	r24, 0x11	; 17
    2cac:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <xTaskRemoveFromEventList>
    2cb0:	88 23       	and	r24, r24
    2cb2:	89 f0       	breq	.+34     	; 0x2cd6 <xQueueGenericSendFromISR+0xa2>
    2cb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cb8:	89 2b       	or	r24, r25
    2cba:	69 f0       	breq	.+26     	; 0x2cd6 <xQueueGenericSendFromISR+0xa2>
    2cbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cc0:	21 e0       	ldi	r18, 0x01	; 1
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	20 83       	st	Z, r18
    2cc6:	07 c0       	rjmp	.+14     	; 0x2cd6 <xQueueGenericSendFromISR+0xa2>
    2cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cca:	8f 5f       	subi	r24, 0xFF	; 255
    2ccc:	28 2f       	mov	r18, r24
    2cce:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	26 8f       	std	Z+30, r18	; 0x1e
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	89 83       	std	Y+1, r24	; 0x01
    2cda:	01 c0       	rjmp	.+2      	; 0x2cde <xQueueGenericSendFromISR+0xaa>
    2cdc:	19 82       	std	Y+1, r1	; 0x01
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	2c 96       	adiw	r28, 0x0c	; 12
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	08 95       	ret

00002cf2 <xQueueGenericReceive>:
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	60 97       	sbiw	r28, 0x10	; 16
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
    2d06:	9b 87       	std	Y+11, r25	; 0x0b
    2d08:	8a 87       	std	Y+10, r24	; 0x0a
    2d0a:	7d 87       	std	Y+13, r23	; 0x0d
    2d0c:	6c 87       	std	Y+12, r22	; 0x0c
    2d0e:	5f 87       	std	Y+15, r21	; 0x0f
    2d10:	4e 87       	std	Y+14, r20	; 0x0e
    2d12:	28 8b       	std	Y+16, r18	; 0x10
    2d14:	19 82       	std	Y+1, r1	; 0x01
    2d16:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d18:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d1a:	9b 83       	std	Y+3, r25	; 0x03
    2d1c:	8a 83       	std	Y+2, r24	; 0x02
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	0f 92       	push	r0
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	9b 81       	ldd	r25, Y+3	; 0x03
    2d28:	fc 01       	movw	r30, r24
    2d2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d2c:	8c 83       	std	Y+4, r24	; 0x04
    2d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d30:	88 23       	and	r24, r24
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <xQueueGenericReceive+0x44>
    2d34:	51 c0       	rjmp	.+162    	; 0x2dd8 <xQueueGenericReceive+0xe6>
    2d36:	8a 81       	ldd	r24, Y+2	; 0x02
    2d38:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	86 81       	ldd	r24, Z+6	; 0x06
    2d3e:	97 81       	ldd	r25, Z+7	; 0x07
    2d40:	9e 83       	std	Y+6, r25	; 0x06
    2d42:	8d 83       	std	Y+5, r24	; 0x05
    2d44:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d46:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d48:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4c:	b9 01       	movw	r22, r18
    2d4e:	0e 94 3f 18 	call	0x307e	; 0x307e <prvCopyDataFromQueue>
    2d52:	88 89       	ldd	r24, Y+16	; 0x10
    2d54:	88 23       	and	r24, r24
    2d56:	31 f5       	brne	.+76     	; 0x2da4 <xQueueGenericReceive+0xb2>
    2d58:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5a:	2f ef       	ldi	r18, 0xFF	; 255
    2d5c:	28 0f       	add	r18, r24
    2d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d60:	9b 81       	ldd	r25, Y+3	; 0x03
    2d62:	fc 01       	movw	r30, r24
    2d64:	22 8f       	std	Z+26, r18	; 0x1a
    2d66:	8a 81       	ldd	r24, Y+2	; 0x02
    2d68:	9b 81       	ldd	r25, Y+3	; 0x03
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	89 2b       	or	r24, r25
    2d72:	41 f4       	brne	.+16     	; 0x2d84 <xQueueGenericReceive+0x92>
    2d74:	0e 94 86 20 	call	0x410c	; 0x410c <pvTaskIncrementMutexHeldCount>
    2d78:	9c 01       	movw	r18, r24
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7e:	fc 01       	movw	r30, r24
    2d80:	33 83       	std	Z+3, r19	; 0x03
    2d82:	22 83       	std	Z+2, r18	; 0x02
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	9b 81       	ldd	r25, Y+3	; 0x03
    2d88:	fc 01       	movw	r30, r24
    2d8a:	80 85       	ldd	r24, Z+8	; 0x08
    2d8c:	88 23       	and	r24, r24
    2d8e:	01 f1       	breq	.+64     	; 0x2dd0 <xQueueGenericReceive+0xde>
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	9b 81       	ldd	r25, Y+3	; 0x03
    2d94:	08 96       	adiw	r24, 0x08	; 8
    2d96:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <xTaskRemoveFromEventList>
    2d9a:	88 23       	and	r24, r24
    2d9c:	c9 f0       	breq	.+50     	; 0x2dd0 <xQueueGenericReceive+0xde>
    2d9e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vPortYield>
    2da2:	16 c0       	rjmp	.+44     	; 0x2dd0 <xQueueGenericReceive+0xde>
    2da4:	8a 81       	ldd	r24, Y+2	; 0x02
    2da6:	9b 81       	ldd	r25, Y+3	; 0x03
    2da8:	2d 81       	ldd	r18, Y+5	; 0x05
    2daa:	3e 81       	ldd	r19, Y+6	; 0x06
    2dac:	fc 01       	movw	r30, r24
    2dae:	37 83       	std	Z+7, r19	; 0x07
    2db0:	26 83       	std	Z+6, r18	; 0x06
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	9b 81       	ldd	r25, Y+3	; 0x03
    2db6:	fc 01       	movw	r30, r24
    2db8:	81 89       	ldd	r24, Z+17	; 0x11
    2dba:	88 23       	and	r24, r24
    2dbc:	49 f0       	breq	.+18     	; 0x2dd0 <xQueueGenericReceive+0xde>
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc2:	41 96       	adiw	r24, 0x11	; 17
    2dc4:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <xTaskRemoveFromEventList>
    2dc8:	88 23       	and	r24, r24
    2dca:	11 f0       	breq	.+4      	; 0x2dd0 <xQueueGenericReceive+0xde>
    2dcc:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vPortYield>
    2dd0:	0f 90       	pop	r0
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	7a c0       	rjmp	.+244    	; 0x2ecc <xQueueGenericReceive+0x1da>
    2dd8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dda:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ddc:	89 2b       	or	r24, r25
    2dde:	21 f4       	brne	.+8      	; 0x2de8 <xQueueGenericReceive+0xf6>
    2de0:	0f 90       	pop	r0
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	72 c0       	rjmp	.+228    	; 0x2ecc <xQueueGenericReceive+0x1da>
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	88 23       	and	r24, r24
    2dec:	31 f4       	brne	.+12     	; 0x2dfa <xQueueGenericReceive+0x108>
    2dee:	ce 01       	movw	r24, r28
    2df0:	07 96       	adiw	r24, 0x07	; 7
    2df2:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <vTaskSetTimeOutState>
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	89 83       	std	Y+1, r24	; 0x01
    2dfa:	0f 90       	pop	r0
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <vTaskSuspendAll>
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	0f 92       	push	r0
    2e08:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e10:	8f 3f       	cpi	r24, 0xFF	; 255
    2e12:	21 f4       	brne	.+8      	; 0x2e1c <xQueueGenericReceive+0x12a>
    2e14:	8a 81       	ldd	r24, Y+2	; 0x02
    2e16:	9b 81       	ldd	r25, Y+3	; 0x03
    2e18:	fc 01       	movw	r30, r24
    2e1a:	15 8e       	std	Z+29, r1	; 0x1d
    2e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e20:	fc 01       	movw	r30, r24
    2e22:	86 8d       	ldd	r24, Z+30	; 0x1e
    2e24:	8f 3f       	cpi	r24, 0xFF	; 255
    2e26:	21 f4       	brne	.+8      	; 0x2e30 <xQueueGenericReceive+0x13e>
    2e28:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	16 8e       	std	Z+30, r1	; 0x1e
    2e30:	0f 90       	pop	r0
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	9e 01       	movw	r18, r28
    2e36:	22 5f       	subi	r18, 0xF2	; 242
    2e38:	3f 4f       	sbci	r19, 0xFF	; 255
    2e3a:	ce 01       	movw	r24, r28
    2e3c:	07 96       	adiw	r24, 0x07	; 7
    2e3e:	b9 01       	movw	r22, r18
    2e40:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <xTaskCheckForTimeOut>
    2e44:	88 23       	and	r24, r24
    2e46:	a1 f5       	brne	.+104    	; 0x2eb0 <xQueueGenericReceive+0x1be>
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4c:	0e 94 ee 18 	call	0x31dc	; 0x31dc <prvIsQueueEmpty>
    2e50:	88 23       	and	r24, r24
    2e52:	39 f1       	breq	.+78     	; 0x2ea2 <xQueueGenericReceive+0x1b0>
    2e54:	8a 81       	ldd	r24, Y+2	; 0x02
    2e56:	9b 81       	ldd	r25, Y+3	; 0x03
    2e58:	fc 01       	movw	r30, r24
    2e5a:	80 81       	ld	r24, Z
    2e5c:	91 81       	ldd	r25, Z+1	; 0x01
    2e5e:	89 2b       	or	r24, r25
    2e60:	61 f4       	brne	.+24     	; 0x2e7a <xQueueGenericReceive+0x188>
    2e62:	0f b6       	in	r0, 0x3f	; 63
    2e64:	f8 94       	cli
    2e66:	0f 92       	push	r0
    2e68:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	82 81       	ldd	r24, Z+2	; 0x02
    2e70:	93 81       	ldd	r25, Z+3	; 0x03
    2e72:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <vTaskPriorityInherit>
    2e76:	0f 90       	pop	r0
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	2e 85       	ldd	r18, Y+14	; 0x0e
    2e7c:	3f 85       	ldd	r19, Y+15	; 0x0f
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	9b 81       	ldd	r25, Y+3	; 0x03
    2e82:	41 96       	adiw	r24, 0x11	; 17
    2e84:	b9 01       	movw	r22, r18
    2e86:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <vTaskPlaceOnEventList>
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8e:	0e 94 90 18 	call	0x3120	; 0x3120 <prvUnlockQueue>
    2e92:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <xTaskResumeAll>
    2e96:	88 23       	and	r24, r24
    2e98:	09 f0       	breq	.+2      	; 0x2e9c <xQueueGenericReceive+0x1aa>
    2e9a:	41 cf       	rjmp	.-382    	; 0x2d1e <xQueueGenericReceive+0x2c>
    2e9c:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vPortYield>
    2ea0:	3e cf       	rjmp	.-388    	; 0x2d1e <xQueueGenericReceive+0x2c>
    2ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea6:	0e 94 90 18 	call	0x3120	; 0x3120 <prvUnlockQueue>
    2eaa:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <xTaskResumeAll>
    2eae:	37 cf       	rjmp	.-402    	; 0x2d1e <xQueueGenericReceive+0x2c>
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb4:	0e 94 90 18 	call	0x3120	; 0x3120 <prvUnlockQueue>
    2eb8:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <xTaskResumeAll>
    2ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec0:	0e 94 ee 18 	call	0x31dc	; 0x31dc <prvIsQueueEmpty>
    2ec4:	88 23       	and	r24, r24
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <xQueueGenericReceive+0x1d8>
    2ec8:	2a cf       	rjmp	.-428    	; 0x2d1e <xQueueGenericReceive+0x2c>
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	60 96       	adiw	r28, 0x10	; 16
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	f8 94       	cli
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	cd bf       	out	0x3d, r28	; 61
    2ed8:	df 91       	pop	r29
    2eda:	cf 91       	pop	r28
    2edc:	08 95       	ret

00002ede <prvCopyDataToQueue>:
    2ede:	cf 93       	push	r28
    2ee0:	df 93       	push	r29
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	27 97       	sbiw	r28, 0x07	; 7
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61
    2ef2:	9c 83       	std	Y+4, r25	; 0x04
    2ef4:	8b 83       	std	Y+3, r24	; 0x03
    2ef6:	7e 83       	std	Y+6, r23	; 0x06
    2ef8:	6d 83       	std	Y+5, r22	; 0x05
    2efa:	4f 83       	std	Y+7, r20	; 0x07
    2efc:	19 82       	std	Y+1, r1	; 0x01
    2efe:	8b 81       	ldd	r24, Y+3	; 0x03
    2f00:	9c 81       	ldd	r25, Y+4	; 0x04
    2f02:	fc 01       	movw	r30, r24
    2f04:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f06:	8a 83       	std	Y+2, r24	; 0x02
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f10:	88 23       	and	r24, r24
    2f12:	b1 f4       	brne	.+44     	; 0x2f40 <prvCopyDataToQueue+0x62>
    2f14:	8b 81       	ldd	r24, Y+3	; 0x03
    2f16:	9c 81       	ldd	r25, Y+4	; 0x04
    2f18:	fc 01       	movw	r30, r24
    2f1a:	80 81       	ld	r24, Z
    2f1c:	91 81       	ldd	r25, Z+1	; 0x01
    2f1e:	89 2b       	or	r24, r25
    2f20:	09 f0       	breq	.+2      	; 0x2f24 <prvCopyDataToQueue+0x46>
    2f22:	9c c0       	rjmp	.+312    	; 0x305c <prvCopyDataToQueue+0x17e>
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	9c 81       	ldd	r25, Y+4	; 0x04
    2f28:	fc 01       	movw	r30, r24
    2f2a:	82 81       	ldd	r24, Z+2	; 0x02
    2f2c:	93 81       	ldd	r25, Z+3	; 0x03
    2f2e:	0e 94 09 20 	call	0x4012	; 0x4012 <xTaskPriorityDisinherit>
    2f32:	89 83       	std	Y+1, r24	; 0x01
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	9c 81       	ldd	r25, Y+4	; 0x04
    2f38:	fc 01       	movw	r30, r24
    2f3a:	13 82       	std	Z+3, r1	; 0x03
    2f3c:	12 82       	std	Z+2, r1	; 0x02
    2f3e:	8e c0       	rjmp	.+284    	; 0x305c <prvCopyDataToQueue+0x17e>
    2f40:	8f 81       	ldd	r24, Y+7	; 0x07
    2f42:	88 23       	and	r24, r24
    2f44:	d9 f5       	brne	.+118    	; 0x2fbc <prvCopyDataToQueue+0xde>
    2f46:	8b 81       	ldd	r24, Y+3	; 0x03
    2f48:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f4e:	48 2f       	mov	r20, r24
    2f50:	50 e0       	ldi	r21, 0x00	; 0
    2f52:	8b 81       	ldd	r24, Y+3	; 0x03
    2f54:	9c 81       	ldd	r25, Y+4	; 0x04
    2f56:	fc 01       	movw	r30, r24
    2f58:	84 81       	ldd	r24, Z+4	; 0x04
    2f5a:	95 81       	ldd	r25, Z+5	; 0x05
    2f5c:	2d 81       	ldd	r18, Y+5	; 0x05
    2f5e:	3e 81       	ldd	r19, Y+6	; 0x06
    2f60:	b9 01       	movw	r22, r18
    2f62:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <memcpy>
    2f66:	8b 81       	ldd	r24, Y+3	; 0x03
    2f68:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	24 81       	ldd	r18, Z+4	; 0x04
    2f6e:	35 81       	ldd	r19, Z+5	; 0x05
    2f70:	8b 81       	ldd	r24, Y+3	; 0x03
    2f72:	9c 81       	ldd	r25, Y+4	; 0x04
    2f74:	fc 01       	movw	r30, r24
    2f76:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f78:	88 2f       	mov	r24, r24
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	28 0f       	add	r18, r24
    2f7e:	39 1f       	adc	r19, r25
    2f80:	8b 81       	ldd	r24, Y+3	; 0x03
    2f82:	9c 81       	ldd	r25, Y+4	; 0x04
    2f84:	fc 01       	movw	r30, r24
    2f86:	35 83       	std	Z+5, r19	; 0x05
    2f88:	24 83       	std	Z+4, r18	; 0x04
    2f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f8e:	fc 01       	movw	r30, r24
    2f90:	24 81       	ldd	r18, Z+4	; 0x04
    2f92:	35 81       	ldd	r19, Z+5	; 0x05
    2f94:	8b 81       	ldd	r24, Y+3	; 0x03
    2f96:	9c 81       	ldd	r25, Y+4	; 0x04
    2f98:	fc 01       	movw	r30, r24
    2f9a:	82 81       	ldd	r24, Z+2	; 0x02
    2f9c:	93 81       	ldd	r25, Z+3	; 0x03
    2f9e:	28 17       	cp	r18, r24
    2fa0:	39 07       	cpc	r19, r25
    2fa2:	08 f4       	brcc	.+2      	; 0x2fa6 <prvCopyDataToQueue+0xc8>
    2fa4:	5b c0       	rjmp	.+182    	; 0x305c <prvCopyDataToQueue+0x17e>
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2faa:	fc 01       	movw	r30, r24
    2fac:	20 81       	ld	r18, Z
    2fae:	31 81       	ldd	r19, Z+1	; 0x01
    2fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	35 83       	std	Z+5, r19	; 0x05
    2fb8:	24 83       	std	Z+4, r18	; 0x04
    2fba:	50 c0       	rjmp	.+160    	; 0x305c <prvCopyDataToQueue+0x17e>
    2fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	84 8d       	ldd	r24, Z+28	; 0x1c
    2fc4:	48 2f       	mov	r20, r24
    2fc6:	50 e0       	ldi	r21, 0x00	; 0
    2fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fca:	9c 81       	ldd	r25, Y+4	; 0x04
    2fcc:	fc 01       	movw	r30, r24
    2fce:	86 81       	ldd	r24, Z+6	; 0x06
    2fd0:	97 81       	ldd	r25, Z+7	; 0x07
    2fd2:	2d 81       	ldd	r18, Y+5	; 0x05
    2fd4:	3e 81       	ldd	r19, Y+6	; 0x06
    2fd6:	b9 01       	movw	r22, r18
    2fd8:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <memcpy>
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe0:	fc 01       	movw	r30, r24
    2fe2:	26 81       	ldd	r18, Z+6	; 0x06
    2fe4:	37 81       	ldd	r19, Z+7	; 0x07
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fea:	fc 01       	movw	r30, r24
    2fec:	84 8d       	ldd	r24, Z+28	; 0x1c
    2fee:	88 2f       	mov	r24, r24
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	91 95       	neg	r25
    2ff4:	81 95       	neg	r24
    2ff6:	91 09       	sbc	r25, r1
    2ff8:	28 0f       	add	r18, r24
    2ffa:	39 1f       	adc	r19, r25
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    3000:	fc 01       	movw	r30, r24
    3002:	37 83       	std	Z+7, r19	; 0x07
    3004:	26 83       	std	Z+6, r18	; 0x06
    3006:	8b 81       	ldd	r24, Y+3	; 0x03
    3008:	9c 81       	ldd	r25, Y+4	; 0x04
    300a:	fc 01       	movw	r30, r24
    300c:	26 81       	ldd	r18, Z+6	; 0x06
    300e:	37 81       	ldd	r19, Z+7	; 0x07
    3010:	8b 81       	ldd	r24, Y+3	; 0x03
    3012:	9c 81       	ldd	r25, Y+4	; 0x04
    3014:	fc 01       	movw	r30, r24
    3016:	80 81       	ld	r24, Z
    3018:	91 81       	ldd	r25, Z+1	; 0x01
    301a:	28 17       	cp	r18, r24
    301c:	39 07       	cpc	r19, r25
    301e:	a8 f4       	brcc	.+42     	; 0x304a <prvCopyDataToQueue+0x16c>
    3020:	8b 81       	ldd	r24, Y+3	; 0x03
    3022:	9c 81       	ldd	r25, Y+4	; 0x04
    3024:	fc 01       	movw	r30, r24
    3026:	22 81       	ldd	r18, Z+2	; 0x02
    3028:	33 81       	ldd	r19, Z+3	; 0x03
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	9c 81       	ldd	r25, Y+4	; 0x04
    302e:	fc 01       	movw	r30, r24
    3030:	84 8d       	ldd	r24, Z+28	; 0x1c
    3032:	88 2f       	mov	r24, r24
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	91 95       	neg	r25
    3038:	81 95       	neg	r24
    303a:	91 09       	sbc	r25, r1
    303c:	28 0f       	add	r18, r24
    303e:	39 1f       	adc	r19, r25
    3040:	8b 81       	ldd	r24, Y+3	; 0x03
    3042:	9c 81       	ldd	r25, Y+4	; 0x04
    3044:	fc 01       	movw	r30, r24
    3046:	37 83       	std	Z+7, r19	; 0x07
    3048:	26 83       	std	Z+6, r18	; 0x06
    304a:	8f 81       	ldd	r24, Y+7	; 0x07
    304c:	82 30       	cpi	r24, 0x02	; 2
    304e:	31 f4       	brne	.+12     	; 0x305c <prvCopyDataToQueue+0x17e>
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	88 23       	and	r24, r24
    3054:	19 f0       	breq	.+6      	; 0x305c <prvCopyDataToQueue+0x17e>
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	81 50       	subi	r24, 0x01	; 1
    305a:	8a 83       	std	Y+2, r24	; 0x02
    305c:	8a 81       	ldd	r24, Y+2	; 0x02
    305e:	21 e0       	ldi	r18, 0x01	; 1
    3060:	28 0f       	add	r18, r24
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	9c 81       	ldd	r25, Y+4	; 0x04
    3066:	fc 01       	movw	r30, r24
    3068:	22 8f       	std	Z+26, r18	; 0x1a
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	27 96       	adiw	r28, 0x07	; 7
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	08 95       	ret

0000307e <prvCopyDataFromQueue>:
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
    3082:	00 d0       	rcall	.+0      	; 0x3084 <prvCopyDataFromQueue+0x6>
    3084:	00 d0       	rcall	.+0      	; 0x3086 <prvCopyDataFromQueue+0x8>
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	9a 83       	std	Y+2, r25	; 0x02
    308c:	89 83       	std	Y+1, r24	; 0x01
    308e:	7c 83       	std	Y+4, r23	; 0x04
    3090:	6b 83       	std	Y+3, r22	; 0x03
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	9a 81       	ldd	r25, Y+2	; 0x02
    3096:	fc 01       	movw	r30, r24
    3098:	84 8d       	ldd	r24, Z+28	; 0x1c
    309a:	88 23       	and	r24, r24
    309c:	c9 f1       	breq	.+114    	; 0x3110 <prvCopyDataFromQueue+0x92>
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	9a 81       	ldd	r25, Y+2	; 0x02
    30a2:	fc 01       	movw	r30, r24
    30a4:	26 81       	ldd	r18, Z+6	; 0x06
    30a6:	37 81       	ldd	r19, Z+7	; 0x07
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	9a 81       	ldd	r25, Y+2	; 0x02
    30ac:	fc 01       	movw	r30, r24
    30ae:	84 8d       	ldd	r24, Z+28	; 0x1c
    30b0:	88 2f       	mov	r24, r24
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	28 0f       	add	r18, r24
    30b6:	39 1f       	adc	r19, r25
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	9a 81       	ldd	r25, Y+2	; 0x02
    30bc:	fc 01       	movw	r30, r24
    30be:	37 83       	std	Z+7, r19	; 0x07
    30c0:	26 83       	std	Z+6, r18	; 0x06
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	9a 81       	ldd	r25, Y+2	; 0x02
    30c6:	fc 01       	movw	r30, r24
    30c8:	26 81       	ldd	r18, Z+6	; 0x06
    30ca:	37 81       	ldd	r19, Z+7	; 0x07
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	9a 81       	ldd	r25, Y+2	; 0x02
    30d0:	fc 01       	movw	r30, r24
    30d2:	82 81       	ldd	r24, Z+2	; 0x02
    30d4:	93 81       	ldd	r25, Z+3	; 0x03
    30d6:	28 17       	cp	r18, r24
    30d8:	39 07       	cpc	r19, r25
    30da:	50 f0       	brcs	.+20     	; 0x30f0 <prvCopyDataFromQueue+0x72>
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
    30de:	9a 81       	ldd	r25, Y+2	; 0x02
    30e0:	fc 01       	movw	r30, r24
    30e2:	20 81       	ld	r18, Z
    30e4:	31 81       	ldd	r19, Z+1	; 0x01
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ea:	fc 01       	movw	r30, r24
    30ec:	37 83       	std	Z+7, r19	; 0x07
    30ee:	26 83       	std	Z+6, r18	; 0x06
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	9a 81       	ldd	r25, Y+2	; 0x02
    30f4:	fc 01       	movw	r30, r24
    30f6:	84 8d       	ldd	r24, Z+28	; 0x1c
    30f8:	48 2f       	mov	r20, r24
    30fa:	50 e0       	ldi	r21, 0x00	; 0
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3100:	fc 01       	movw	r30, r24
    3102:	26 81       	ldd	r18, Z+6	; 0x06
    3104:	37 81       	ldd	r19, Z+7	; 0x07
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	9c 81       	ldd	r25, Y+4	; 0x04
    310a:	b9 01       	movw	r22, r18
    310c:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <memcpy>
    3110:	00 00       	nop
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	df 91       	pop	r29
    311c:	cf 91       	pop	r28
    311e:	08 95       	ret

00003120 <prvUnlockQueue>:
    3120:	cf 93       	push	r28
    3122:	df 93       	push	r29
    3124:	00 d0       	rcall	.+0      	; 0x3126 <prvUnlockQueue+0x6>
    3126:	00 d0       	rcall	.+0      	; 0x3128 <prvUnlockQueue+0x8>
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	9c 83       	std	Y+4, r25	; 0x04
    312e:	8b 83       	std	Y+3, r24	; 0x03
    3130:	0f b6       	in	r0, 0x3f	; 63
    3132:	f8 94       	cli
    3134:	0f 92       	push	r0
    3136:	8b 81       	ldd	r24, Y+3	; 0x03
    3138:	9c 81       	ldd	r25, Y+4	; 0x04
    313a:	fc 01       	movw	r30, r24
    313c:	86 8d       	ldd	r24, Z+30	; 0x1e
    313e:	89 83       	std	Y+1, r24	; 0x01
    3140:	12 c0       	rjmp	.+36     	; 0x3166 <prvUnlockQueue+0x46>
    3142:	8b 81       	ldd	r24, Y+3	; 0x03
    3144:	9c 81       	ldd	r25, Y+4	; 0x04
    3146:	fc 01       	movw	r30, r24
    3148:	81 89       	ldd	r24, Z+17	; 0x11
    314a:	88 23       	and	r24, r24
    314c:	81 f0       	breq	.+32     	; 0x316e <prvUnlockQueue+0x4e>
    314e:	8b 81       	ldd	r24, Y+3	; 0x03
    3150:	9c 81       	ldd	r25, Y+4	; 0x04
    3152:	41 96       	adiw	r24, 0x11	; 17
    3154:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <xTaskRemoveFromEventList>
    3158:	88 23       	and	r24, r24
    315a:	11 f0       	breq	.+4      	; 0x3160 <prvUnlockQueue+0x40>
    315c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <vTaskMissedYield>
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	81 50       	subi	r24, 0x01	; 1
    3164:	89 83       	std	Y+1, r24	; 0x01
    3166:	89 81       	ldd	r24, Y+1	; 0x01
    3168:	18 16       	cp	r1, r24
    316a:	5c f3       	brlt	.-42     	; 0x3142 <prvUnlockQueue+0x22>
    316c:	01 c0       	rjmp	.+2      	; 0x3170 <prvUnlockQueue+0x50>
    316e:	00 00       	nop
    3170:	8b 81       	ldd	r24, Y+3	; 0x03
    3172:	9c 81       	ldd	r25, Y+4	; 0x04
    3174:	2f ef       	ldi	r18, 0xFF	; 255
    3176:	fc 01       	movw	r30, r24
    3178:	26 8f       	std	Z+30, r18	; 0x1e
    317a:	0f 90       	pop	r0
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	0f b6       	in	r0, 0x3f	; 63
    3180:	f8 94       	cli
    3182:	0f 92       	push	r0
    3184:	8b 81       	ldd	r24, Y+3	; 0x03
    3186:	9c 81       	ldd	r25, Y+4	; 0x04
    3188:	fc 01       	movw	r30, r24
    318a:	85 8d       	ldd	r24, Z+29	; 0x1d
    318c:	8a 83       	std	Y+2, r24	; 0x02
    318e:	12 c0       	rjmp	.+36     	; 0x31b4 <prvUnlockQueue+0x94>
    3190:	8b 81       	ldd	r24, Y+3	; 0x03
    3192:	9c 81       	ldd	r25, Y+4	; 0x04
    3194:	fc 01       	movw	r30, r24
    3196:	80 85       	ldd	r24, Z+8	; 0x08
    3198:	88 23       	and	r24, r24
    319a:	81 f0       	breq	.+32     	; 0x31bc <prvUnlockQueue+0x9c>
    319c:	8b 81       	ldd	r24, Y+3	; 0x03
    319e:	9c 81       	ldd	r25, Y+4	; 0x04
    31a0:	08 96       	adiw	r24, 0x08	; 8
    31a2:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <xTaskRemoveFromEventList>
    31a6:	88 23       	and	r24, r24
    31a8:	11 f0       	breq	.+4      	; 0x31ae <prvUnlockQueue+0x8e>
    31aa:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <vTaskMissedYield>
    31ae:	8a 81       	ldd	r24, Y+2	; 0x02
    31b0:	81 50       	subi	r24, 0x01	; 1
    31b2:	8a 83       	std	Y+2, r24	; 0x02
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	18 16       	cp	r1, r24
    31b8:	5c f3       	brlt	.-42     	; 0x3190 <prvUnlockQueue+0x70>
    31ba:	01 c0       	rjmp	.+2      	; 0x31be <prvUnlockQueue+0x9e>
    31bc:	00 00       	nop
    31be:	8b 81       	ldd	r24, Y+3	; 0x03
    31c0:	9c 81       	ldd	r25, Y+4	; 0x04
    31c2:	2f ef       	ldi	r18, 0xFF	; 255
    31c4:	fc 01       	movw	r30, r24
    31c6:	25 8f       	std	Z+29, r18	; 0x1d
    31c8:	0f 90       	pop	r0
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	00 00       	nop
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	df 91       	pop	r29
    31d8:	cf 91       	pop	r28
    31da:	08 95       	ret

000031dc <prvIsQueueEmpty>:
    31dc:	cf 93       	push	r28
    31de:	df 93       	push	r29
    31e0:	00 d0       	rcall	.+0      	; 0x31e2 <prvIsQueueEmpty+0x6>
    31e2:	1f 92       	push	r1
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	9b 83       	std	Y+3, r25	; 0x03
    31ea:	8a 83       	std	Y+2, r24	; 0x02
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	0f 92       	push	r0
    31f2:	8a 81       	ldd	r24, Y+2	; 0x02
    31f4:	9b 81       	ldd	r25, Y+3	; 0x03
    31f6:	fc 01       	movw	r30, r24
    31f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    31fa:	88 23       	and	r24, r24
    31fc:	19 f4       	brne	.+6      	; 0x3204 <prvIsQueueEmpty+0x28>
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	89 83       	std	Y+1, r24	; 0x01
    3202:	01 c0       	rjmp	.+2      	; 0x3206 <prvIsQueueEmpty+0x2a>
    3204:	19 82       	std	Y+1, r1	; 0x01
    3206:	0f 90       	pop	r0
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	0f 90       	pop	r0
    3212:	df 91       	pop	r29
    3214:	cf 91       	pop	r28
    3216:	08 95       	ret

00003218 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    3218:	cf 93       	push	r28
    321a:	df 93       	push	r29
    321c:	00 d0       	rcall	.+0      	; 0x321e <prvIsQueueFull+0x6>
    321e:	1f 92       	push	r1
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
    3224:	9b 83       	std	Y+3, r25	; 0x03
    3226:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	f8 94       	cli
    322c:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	9b 81       	ldd	r25, Y+3	; 0x03
    3232:	fc 01       	movw	r30, r24
    3234:	22 8d       	ldd	r18, Z+26	; 0x1a
    3236:	8a 81       	ldd	r24, Y+2	; 0x02
    3238:	9b 81       	ldd	r25, Y+3	; 0x03
    323a:	fc 01       	movw	r30, r24
    323c:	83 8d       	ldd	r24, Z+27	; 0x1b
    323e:	28 17       	cp	r18, r24
    3240:	19 f4       	brne	.+6      	; 0x3248 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	89 83       	std	Y+1, r24	; 0x01
    3246:	01 c0       	rjmp	.+2      	; 0x324a <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    3248:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    324a:	0f 90       	pop	r0
    324c:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    324e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	df 91       	pop	r29
    3258:	cf 91       	pop	r28
    325a:	08 95       	ret

0000325c <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    325c:	8f 92       	push	r8
    325e:	9f 92       	push	r9
    3260:	af 92       	push	r10
    3262:	bf 92       	push	r11
    3264:	cf 92       	push	r12
    3266:	df 92       	push	r13
    3268:	ef 92       	push	r14
    326a:	ff 92       	push	r15
    326c:	0f 93       	push	r16
    326e:	1f 93       	push	r17
    3270:	cf 93       	push	r28
    3272:	df 93       	push	r29
    3274:	cd b7       	in	r28, 0x3d	; 61
    3276:	de b7       	in	r29, 0x3e	; 62
    3278:	60 97       	sbiw	r28, 0x10	; 16
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	de bf       	out	0x3e, r29	; 62
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	cd bf       	out	0x3d, r28	; 61
    3284:	9f 83       	std	Y+7, r25	; 0x07
    3286:	8e 83       	std	Y+6, r24	; 0x06
    3288:	79 87       	std	Y+9, r23	; 0x09
    328a:	68 87       	std	Y+8, r22	; 0x08
    328c:	5b 87       	std	Y+11, r21	; 0x0b
    328e:	4a 87       	std	Y+10, r20	; 0x0a
    3290:	3d 87       	std	Y+13, r19	; 0x0d
    3292:	2c 87       	std	Y+12, r18	; 0x0c
    3294:	0e 87       	std	Y+14, r16	; 0x0e
    3296:	f8 8a       	std	Y+16, r15	; 0x10
    3298:	ef 86       	std	Y+15, r14	; 0x0f
    329a:	8a 85       	ldd	r24, Y+10	; 0x0a
    329c:	9b 85       	ldd	r25, Y+11	; 0x0b
    329e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <pvPortMalloc>
    32a2:	9d 83       	std	Y+5, r25	; 0x05
    32a4:	8c 83       	std	Y+4, r24	; 0x04
    32a6:	8c 81       	ldd	r24, Y+4	; 0x04
    32a8:	9d 81       	ldd	r25, Y+5	; 0x05
    32aa:	89 2b       	or	r24, r25
    32ac:	b9 f0       	breq	.+46     	; 0x32dc <xTaskCreate+0x80>
    32ae:	8c e2       	ldi	r24, 0x2C	; 44
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <pvPortMalloc>
    32b6:	9a 83       	std	Y+2, r25	; 0x02
    32b8:	89 83       	std	Y+1, r24	; 0x01
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
    32bc:	9a 81       	ldd	r25, Y+2	; 0x02
    32be:	89 2b       	or	r24, r25
    32c0:	41 f0       	breq	.+16     	; 0x32d2 <xTaskCreate+0x76>
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	9a 81       	ldd	r25, Y+2	; 0x02
    32c6:	2c 81       	ldd	r18, Y+4	; 0x04
    32c8:	3d 81       	ldd	r19, Y+5	; 0x05
    32ca:	fc 01       	movw	r30, r24
    32cc:	30 8f       	std	Z+24, r19	; 0x18
    32ce:	27 8b       	std	Z+23, r18	; 0x17
    32d0:	07 c0       	rjmp	.+14     	; 0x32e0 <xTaskCreate+0x84>
    32d2:	8c 81       	ldd	r24, Y+4	; 0x04
    32d4:	9d 81       	ldd	r25, Y+5	; 0x05
    32d6:	0e 94 4e 11 	call	0x229c	; 0x229c <vPortFree>
    32da:	02 c0       	rjmp	.+4      	; 0x32e0 <xTaskCreate+0x84>
    32dc:	1a 82       	std	Y+2, r1	; 0x02
    32de:	19 82       	std	Y+1, r1	; 0x01
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	9a 81       	ldd	r25, Y+2	; 0x02
    32e4:	89 2b       	or	r24, r25
    32e6:	09 f1       	breq	.+66     	; 0x332a <xTaskCreate+0xce>
    32e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    32ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    32ec:	cc 01       	movw	r24, r24
    32ee:	a0 e0       	ldi	r26, 0x00	; 0
    32f0:	b0 e0       	ldi	r27, 0x00	; 0
    32f2:	09 81       	ldd	r16, Y+1	; 0x01
    32f4:	1a 81       	ldd	r17, Y+2	; 0x02
    32f6:	4f 85       	ldd	r20, Y+15	; 0x0f
    32f8:	58 89       	ldd	r21, Y+16	; 0x10
    32fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    32fc:	3d 85       	ldd	r19, Y+13	; 0x0d
    32fe:	68 85       	ldd	r22, Y+8	; 0x08
    3300:	79 85       	ldd	r23, Y+9	; 0x09
    3302:	ee 81       	ldd	r30, Y+6	; 0x06
    3304:	ff 81       	ldd	r31, Y+7	; 0x07
    3306:	81 2c       	mov	r8, r1
    3308:	91 2c       	mov	r9, r1
    330a:	58 01       	movw	r10, r16
    330c:	6a 01       	movw	r12, r20
    330e:	ee 84       	ldd	r14, Y+14	; 0x0e
    3310:	89 01       	movw	r16, r18
    3312:	9c 01       	movw	r18, r24
    3314:	ad 01       	movw	r20, r26
    3316:	cf 01       	movw	r24, r30
    3318:	0e 94 ab 19 	call	0x3356	; 0x3356 <prvInitialiseNewTask>
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	9a 81       	ldd	r25, Y+2	; 0x02
    3320:	0e 94 87 1a 	call	0x350e	; 0x350e <prvAddNewTaskToReadyList>
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	8b 83       	std	Y+3, r24	; 0x03
    3328:	02 c0       	rjmp	.+4      	; 0x332e <xTaskCreate+0xd2>
    332a:	8f ef       	ldi	r24, 0xFF	; 255
    332c:	8b 83       	std	Y+3, r24	; 0x03
    332e:	8b 81       	ldd	r24, Y+3	; 0x03
    3330:	60 96       	adiw	r28, 0x10	; 16
    3332:	0f b6       	in	r0, 0x3f	; 63
    3334:	f8 94       	cli
    3336:	de bf       	out	0x3e, r29	; 62
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	cd bf       	out	0x3d, r28	; 61
    333c:	df 91       	pop	r29
    333e:	cf 91       	pop	r28
    3340:	1f 91       	pop	r17
    3342:	0f 91       	pop	r16
    3344:	ff 90       	pop	r15
    3346:	ef 90       	pop	r14
    3348:	df 90       	pop	r13
    334a:	cf 90       	pop	r12
    334c:	bf 90       	pop	r11
    334e:	af 90       	pop	r10
    3350:	9f 90       	pop	r9
    3352:	8f 90       	pop	r8
    3354:	08 95       	ret

00003356 <prvInitialiseNewTask>:
    3356:	8f 92       	push	r8
    3358:	9f 92       	push	r9
    335a:	af 92       	push	r10
    335c:	bf 92       	push	r11
    335e:	cf 92       	push	r12
    3360:	df 92       	push	r13
    3362:	ef 92       	push	r14
    3364:	0f 93       	push	r16
    3366:	1f 93       	push	r17
    3368:	cf 93       	push	r28
    336a:	df 93       	push	r29
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
    3370:	64 97       	sbiw	r28, 0x14	; 20
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	f8 94       	cli
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	0f be       	out	0x3f, r0	; 63
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	9d 83       	std	Y+5, r25	; 0x05
    337e:	8c 83       	std	Y+4, r24	; 0x04
    3380:	7f 83       	std	Y+7, r23	; 0x07
    3382:	6e 83       	std	Y+6, r22	; 0x06
    3384:	28 87       	std	Y+8, r18	; 0x08
    3386:	39 87       	std	Y+9, r19	; 0x09
    3388:	4a 87       	std	Y+10, r20	; 0x0a
    338a:	5b 87       	std	Y+11, r21	; 0x0b
    338c:	1d 87       	std	Y+13, r17	; 0x0d
    338e:	0c 87       	std	Y+12, r16	; 0x0c
    3390:	ee 86       	std	Y+14, r14	; 0x0e
    3392:	d8 8a       	std	Y+16, r13	; 0x10
    3394:	cf 86       	std	Y+15, r12	; 0x0f
    3396:	ba 8a       	std	Y+18, r11	; 0x12
    3398:	a9 8a       	std	Y+17, r10	; 0x11
    339a:	9c 8a       	std	Y+20, r9	; 0x14
    339c:	8b 8a       	std	Y+19, r8	; 0x13
    339e:	28 85       	ldd	r18, Y+8	; 0x08
    33a0:	39 85       	ldd	r19, Y+9	; 0x09
    33a2:	89 89       	ldd	r24, Y+17	; 0x11
    33a4:	9a 89       	ldd	r25, Y+18	; 0x12
    33a6:	fc 01       	movw	r30, r24
    33a8:	87 89       	ldd	r24, Z+23	; 0x17
    33aa:	90 8d       	ldd	r25, Z+24	; 0x18
    33ac:	a9 01       	movw	r20, r18
    33ae:	65 ea       	ldi	r22, 0xA5	; 165
    33b0:	70 e0       	ldi	r23, 0x00	; 0
    33b2:	0e 94 ef 25 	call	0x4bde	; 0x4bde <memset>
    33b6:	89 89       	ldd	r24, Y+17	; 0x11
    33b8:	9a 89       	ldd	r25, Y+18	; 0x12
    33ba:	fc 01       	movw	r30, r24
    33bc:	27 89       	ldd	r18, Z+23	; 0x17
    33be:	30 8d       	ldd	r19, Z+24	; 0x18
    33c0:	88 85       	ldd	r24, Y+8	; 0x08
    33c2:	99 85       	ldd	r25, Y+9	; 0x09
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	82 0f       	add	r24, r18
    33c8:	93 1f       	adc	r25, r19
    33ca:	9b 83       	std	Y+3, r25	; 0x03
    33cc:	8a 83       	std	Y+2, r24	; 0x02
    33ce:	19 82       	std	Y+1, r1	; 0x01
    33d0:	21 c0       	rjmp	.+66     	; 0x3414 <prvInitialiseNewTask+0xbe>
    33d2:	89 81       	ldd	r24, Y+1	; 0x01
    33d4:	88 2f       	mov	r24, r24
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	29 81       	ldd	r18, Y+1	; 0x01
    33da:	22 2f       	mov	r18, r18
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	4e 81       	ldd	r20, Y+6	; 0x06
    33e0:	5f 81       	ldd	r21, Y+7	; 0x07
    33e2:	24 0f       	add	r18, r20
    33e4:	35 1f       	adc	r19, r21
    33e6:	f9 01       	movw	r30, r18
    33e8:	40 81       	ld	r20, Z
    33ea:	29 89       	ldd	r18, Y+17	; 0x11
    33ec:	3a 89       	ldd	r19, Y+18	; 0x12
    33ee:	82 0f       	add	r24, r18
    33f0:	93 1f       	adc	r25, r19
    33f2:	49 96       	adiw	r24, 0x19	; 25
    33f4:	fc 01       	movw	r30, r24
    33f6:	40 83       	st	Z, r20
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	88 2f       	mov	r24, r24
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	2e 81       	ldd	r18, Y+6	; 0x06
    3400:	3f 81       	ldd	r19, Y+7	; 0x07
    3402:	82 0f       	add	r24, r18
    3404:	93 1f       	adc	r25, r19
    3406:	fc 01       	movw	r30, r24
    3408:	80 81       	ld	r24, Z
    340a:	88 23       	and	r24, r24
    340c:	39 f0       	breq	.+14     	; 0x341c <prvInitialiseNewTask+0xc6>
    340e:	89 81       	ldd	r24, Y+1	; 0x01
    3410:	8f 5f       	subi	r24, 0xFF	; 255
    3412:	89 83       	std	Y+1, r24	; 0x01
    3414:	89 81       	ldd	r24, Y+1	; 0x01
    3416:	88 30       	cpi	r24, 0x08	; 8
    3418:	e0 f2       	brcs	.-72     	; 0x33d2 <prvInitialiseNewTask+0x7c>
    341a:	01 c0       	rjmp	.+2      	; 0x341e <prvInitialiseNewTask+0xc8>
    341c:	00 00       	nop
    341e:	89 89       	ldd	r24, Y+17	; 0x11
    3420:	9a 89       	ldd	r25, Y+18	; 0x12
    3422:	fc 01       	movw	r30, r24
    3424:	10 a2       	std	Z+32, r1	; 0x20
    3426:	8e 85       	ldd	r24, Y+14	; 0x0e
    3428:	84 30       	cpi	r24, 0x04	; 4
    342a:	10 f0       	brcs	.+4      	; 0x3430 <prvInitialiseNewTask+0xda>
    342c:	83 e0       	ldi	r24, 0x03	; 3
    342e:	8e 87       	std	Y+14, r24	; 0x0e
    3430:	89 89       	ldd	r24, Y+17	; 0x11
    3432:	9a 89       	ldd	r25, Y+18	; 0x12
    3434:	2e 85       	ldd	r18, Y+14	; 0x0e
    3436:	fc 01       	movw	r30, r24
    3438:	26 8b       	std	Z+22, r18	; 0x16
    343a:	89 89       	ldd	r24, Y+17	; 0x11
    343c:	9a 89       	ldd	r25, Y+18	; 0x12
    343e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3440:	fc 01       	movw	r30, r24
    3442:	23 a3       	std	Z+35, r18	; 0x23
    3444:	89 89       	ldd	r24, Y+17	; 0x11
    3446:	9a 89       	ldd	r25, Y+18	; 0x12
    3448:	fc 01       	movw	r30, r24
    344a:	14 a2       	std	Z+36, r1	; 0x24
    344c:	89 89       	ldd	r24, Y+17	; 0x11
    344e:	9a 89       	ldd	r25, Y+18	; 0x12
    3450:	02 96       	adiw	r24, 0x02	; 2
    3452:	0e 94 cd 0c 	call	0x199a	; 0x199a <vListInitialiseItem>
    3456:	89 89       	ldd	r24, Y+17	; 0x11
    3458:	9a 89       	ldd	r25, Y+18	; 0x12
    345a:	0c 96       	adiw	r24, 0x0c	; 12
    345c:	0e 94 cd 0c 	call	0x199a	; 0x199a <vListInitialiseItem>
    3460:	89 89       	ldd	r24, Y+17	; 0x11
    3462:	9a 89       	ldd	r25, Y+18	; 0x12
    3464:	29 89       	ldd	r18, Y+17	; 0x11
    3466:	3a 89       	ldd	r19, Y+18	; 0x12
    3468:	fc 01       	movw	r30, r24
    346a:	31 87       	std	Z+9, r19	; 0x09
    346c:	20 87       	std	Z+8, r18	; 0x08
    346e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3470:	88 2f       	mov	r24, r24
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	24 e0       	ldi	r18, 0x04	; 4
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	28 1b       	sub	r18, r24
    347a:	39 0b       	sbc	r19, r25
    347c:	89 89       	ldd	r24, Y+17	; 0x11
    347e:	9a 89       	ldd	r25, Y+18	; 0x12
    3480:	fc 01       	movw	r30, r24
    3482:	35 87       	std	Z+13, r19	; 0x0d
    3484:	24 87       	std	Z+12, r18	; 0x0c
    3486:	89 89       	ldd	r24, Y+17	; 0x11
    3488:	9a 89       	ldd	r25, Y+18	; 0x12
    348a:	29 89       	ldd	r18, Y+17	; 0x11
    348c:	3a 89       	ldd	r19, Y+18	; 0x12
    348e:	fc 01       	movw	r30, r24
    3490:	33 8b       	std	Z+19, r19	; 0x13
    3492:	22 8b       	std	Z+18, r18	; 0x12
    3494:	89 89       	ldd	r24, Y+17	; 0x11
    3496:	9a 89       	ldd	r25, Y+18	; 0x12
    3498:	fc 01       	movw	r30, r24
    349a:	16 a2       	std	Z+38, r1	; 0x26
    349c:	15 a2       	std	Z+37, r1	; 0x25
    349e:	89 89       	ldd	r24, Y+17	; 0x11
    34a0:	9a 89       	ldd	r25, Y+18	; 0x12
    34a2:	fc 01       	movw	r30, r24
    34a4:	17 a2       	std	Z+39, r1	; 0x27
    34a6:	10 a6       	std	Z+40, r1	; 0x28
    34a8:	11 a6       	std	Z+41, r1	; 0x29
    34aa:	12 a6       	std	Z+42, r1	; 0x2a
    34ac:	89 89       	ldd	r24, Y+17	; 0x11
    34ae:	9a 89       	ldd	r25, Y+18	; 0x12
    34b0:	fc 01       	movw	r30, r24
    34b2:	13 a6       	std	Z+43, r1	; 0x2b
    34b4:	4c 85       	ldd	r20, Y+12	; 0x0c
    34b6:	5d 85       	ldd	r21, Y+13	; 0x0d
    34b8:	2c 81       	ldd	r18, Y+4	; 0x04
    34ba:	3d 81       	ldd	r19, Y+5	; 0x05
    34bc:	8a 81       	ldd	r24, Y+2	; 0x02
    34be:	9b 81       	ldd	r25, Y+3	; 0x03
    34c0:	b9 01       	movw	r22, r18
    34c2:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pxPortInitialiseStack>
    34c6:	9c 01       	movw	r18, r24
    34c8:	89 89       	ldd	r24, Y+17	; 0x11
    34ca:	9a 89       	ldd	r25, Y+18	; 0x12
    34cc:	fc 01       	movw	r30, r24
    34ce:	31 83       	std	Z+1, r19	; 0x01
    34d0:	20 83       	st	Z, r18
    34d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    34d4:	98 89       	ldd	r25, Y+16	; 0x10
    34d6:	89 2b       	or	r24, r25
    34d8:	39 f0       	breq	.+14     	; 0x34e8 <prvInitialiseNewTask+0x192>
    34da:	8f 85       	ldd	r24, Y+15	; 0x0f
    34dc:	98 89       	ldd	r25, Y+16	; 0x10
    34de:	29 89       	ldd	r18, Y+17	; 0x11
    34e0:	3a 89       	ldd	r19, Y+18	; 0x12
    34e2:	fc 01       	movw	r30, r24
    34e4:	31 83       	std	Z+1, r19	; 0x01
    34e6:	20 83       	st	Z, r18
    34e8:	00 00       	nop
    34ea:	64 96       	adiw	r28, 0x14	; 20
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	f8 94       	cli
    34f0:	de bf       	out	0x3e, r29	; 62
    34f2:	0f be       	out	0x3f, r0	; 63
    34f4:	cd bf       	out	0x3d, r28	; 61
    34f6:	df 91       	pop	r29
    34f8:	cf 91       	pop	r28
    34fa:	1f 91       	pop	r17
    34fc:	0f 91       	pop	r16
    34fe:	ef 90       	pop	r14
    3500:	df 90       	pop	r13
    3502:	cf 90       	pop	r12
    3504:	bf 90       	pop	r11
    3506:	af 90       	pop	r10
    3508:	9f 90       	pop	r9
    350a:	8f 90       	pop	r8
    350c:	08 95       	ret

0000350e <prvAddNewTaskToReadyList>:
    350e:	cf 93       	push	r28
    3510:	df 93       	push	r29
    3512:	00 d0       	rcall	.+0      	; 0x3514 <prvAddNewTaskToReadyList+0x6>
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
    3518:	9a 83       	std	Y+2, r25	; 0x02
    351a:	89 83       	std	Y+1, r24	; 0x01
    351c:	0f b6       	in	r0, 0x3f	; 63
    351e:	f8 94       	cli
    3520:	0f 92       	push	r0
    3522:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <uxCurrentNumberOfTasks>
    3526:	8f 5f       	subi	r24, 0xFF	; 255
    3528:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <uxCurrentNumberOfTasks>
    352c:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    3530:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    3534:	89 2b       	or	r24, r25
    3536:	69 f4       	brne	.+26     	; 0x3552 <prvAddNewTaskToReadyList+0x44>
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	9a 81       	ldd	r25, Y+2	; 0x02
    353c:	90 93 52 07 	sts	0x0752, r25	; 0x800752 <pxCurrentTCB+0x1>
    3540:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <pxCurrentTCB>
    3544:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <uxCurrentNumberOfTasks>
    3548:	81 30       	cpi	r24, 0x01	; 1
    354a:	c9 f4       	brne	.+50     	; 0x357e <prvAddNewTaskToReadyList+0x70>
    354c:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <prvInitialiseTaskLists>
    3550:	16 c0       	rjmp	.+44     	; 0x357e <prvAddNewTaskToReadyList+0x70>
    3552:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <xSchedulerRunning>
    3556:	88 23       	and	r24, r24
    3558:	91 f4       	brne	.+36     	; 0x357e <prvAddNewTaskToReadyList+0x70>
    355a:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    355e:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    3562:	fc 01       	movw	r30, r24
    3564:	26 89       	ldd	r18, Z+22	; 0x16
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	9a 81       	ldd	r25, Y+2	; 0x02
    356a:	fc 01       	movw	r30, r24
    356c:	86 89       	ldd	r24, Z+22	; 0x16
    356e:	82 17       	cp	r24, r18
    3570:	30 f0       	brcs	.+12     	; 0x357e <prvAddNewTaskToReadyList+0x70>
    3572:	89 81       	ldd	r24, Y+1	; 0x01
    3574:	9a 81       	ldd	r25, Y+2	; 0x02
    3576:	90 93 52 07 	sts	0x0752, r25	; 0x800752 <pxCurrentTCB+0x1>
    357a:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <pxCurrentTCB>
    357e:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <uxTaskNumber>
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <uxTaskNumber>
    3588:	20 91 a8 07 	lds	r18, 0x07A8	; 0x8007a8 <uxTaskNumber>
    358c:	89 81       	ldd	r24, Y+1	; 0x01
    358e:	9a 81       	ldd	r25, Y+2	; 0x02
    3590:	fc 01       	movw	r30, r24
    3592:	21 a3       	std	Z+33, r18	; 0x21
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	9a 81       	ldd	r25, Y+2	; 0x02
    3598:	fc 01       	movw	r30, r24
    359a:	96 89       	ldd	r25, Z+22	; 0x16
    359c:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <uxTopReadyPriority>
    35a0:	89 17       	cp	r24, r25
    35a2:	30 f4       	brcc	.+12     	; 0x35b0 <prvAddNewTaskToReadyList+0xa2>
    35a4:	89 81       	ldd	r24, Y+1	; 0x01
    35a6:	9a 81       	ldd	r25, Y+2	; 0x02
    35a8:	fc 01       	movw	r30, r24
    35aa:	86 89       	ldd	r24, Z+22	; 0x16
    35ac:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <uxTopReadyPriority>
    35b0:	89 81       	ldd	r24, Y+1	; 0x01
    35b2:	9a 81       	ldd	r25, Y+2	; 0x02
    35b4:	ac 01       	movw	r20, r24
    35b6:	4e 5f       	subi	r20, 0xFE	; 254
    35b8:	5f 4f       	sbci	r21, 0xFF	; 255
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	9a 81       	ldd	r25, Y+2	; 0x02
    35be:	fc 01       	movw	r30, r24
    35c0:	86 89       	ldd	r24, Z+22	; 0x16
    35c2:	28 2f       	mov	r18, r24
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	c9 01       	movw	r24, r18
    35c8:	88 0f       	add	r24, r24
    35ca:	99 1f       	adc	r25, r25
    35cc:	88 0f       	add	r24, r24
    35ce:	99 1f       	adc	r25, r25
    35d0:	88 0f       	add	r24, r24
    35d2:	99 1f       	adc	r25, r25
    35d4:	82 0f       	add	r24, r18
    35d6:	93 1f       	adc	r25, r19
    35d8:	8d 5a       	subi	r24, 0xAD	; 173
    35da:	98 4f       	sbci	r25, 0xF8	; 248
    35dc:	ba 01       	movw	r22, r20
    35de:	0e 94 df 0c 	call	0x19be	; 0x19be <vListInsertEnd>
    35e2:	0f 90       	pop	r0
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <xSchedulerRunning>
    35ea:	88 23       	and	r24, r24
    35ec:	71 f0       	breq	.+28     	; 0x360a <prvAddNewTaskToReadyList+0xfc>
    35ee:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    35f2:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    35f6:	fc 01       	movw	r30, r24
    35f8:	26 89       	ldd	r18, Z+22	; 0x16
    35fa:	89 81       	ldd	r24, Y+1	; 0x01
    35fc:	9a 81       	ldd	r25, Y+2	; 0x02
    35fe:	fc 01       	movw	r30, r24
    3600:	86 89       	ldd	r24, Z+22	; 0x16
    3602:	28 17       	cp	r18, r24
    3604:	10 f4       	brcc	.+4      	; 0x360a <prvAddNewTaskToReadyList+0xfc>
    3606:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vPortYield>
    360a:	00 00       	nop
    360c:	0f 90       	pop	r0
    360e:	0f 90       	pop	r0
    3610:	df 91       	pop	r29
    3612:	cf 91       	pop	r28
    3614:	08 95       	ret

00003616 <vTaskDelay>:
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	00 d0       	rcall	.+0      	; 0x361c <vTaskDelay+0x6>
    361c:	1f 92       	push	r1
    361e:	cd b7       	in	r28, 0x3d	; 61
    3620:	de b7       	in	r29, 0x3e	; 62
    3622:	9b 83       	std	Y+3, r25	; 0x03
    3624:	8a 83       	std	Y+2, r24	; 0x02
    3626:	19 82       	std	Y+1, r1	; 0x01
    3628:	8a 81       	ldd	r24, Y+2	; 0x02
    362a:	9b 81       	ldd	r25, Y+3	; 0x03
    362c:	89 2b       	or	r24, r25
    362e:	51 f0       	breq	.+20     	; 0x3644 <vTaskDelay+0x2e>
    3630:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <vTaskSuspendAll>
    3634:	8a 81       	ldd	r24, Y+2	; 0x02
    3636:	9b 81       	ldd	r25, Y+3	; 0x03
    3638:	60 e0       	ldi	r22, 0x00	; 0
    363a:	0e 94 a0 20 	call	0x4140	; 0x4140 <prvAddCurrentTaskToDelayedList>
    363e:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <xTaskResumeAll>
    3642:	89 83       	std	Y+1, r24	; 0x01
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	88 23       	and	r24, r24
    3648:	11 f4       	brne	.+4      	; 0x364e <vTaskDelay+0x38>
    364a:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vPortYield>
    364e:	00 00       	nop
    3650:	0f 90       	pop	r0
    3652:	0f 90       	pop	r0
    3654:	0f 90       	pop	r0
    3656:	df 91       	pop	r29
    3658:	cf 91       	pop	r28
    365a:	08 95       	ret

0000365c <vTaskStartScheduler>:
    365c:	ef 92       	push	r14
    365e:	ff 92       	push	r15
    3660:	0f 93       	push	r16
    3662:	cf 93       	push	r28
    3664:	df 93       	push	r29
    3666:	1f 92       	push	r1
    3668:	cd b7       	in	r28, 0x3d	; 61
    366a:	de b7       	in	r29, 0x3e	; 62
    366c:	0f 2e       	mov	r0, r31
    366e:	fb ea       	ldi	r31, 0xAB	; 171
    3670:	ef 2e       	mov	r14, r31
    3672:	f7 e0       	ldi	r31, 0x07	; 7
    3674:	ff 2e       	mov	r15, r31
    3676:	f0 2d       	mov	r31, r0
    3678:	00 e0       	ldi	r16, 0x00	; 0
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	45 e5       	ldi	r20, 0x55	; 85
    3680:	50 e0       	ldi	r21, 0x00	; 0
    3682:	6d e4       	ldi	r22, 0x4D	; 77
    3684:	71 e0       	ldi	r23, 0x01	; 1
    3686:	89 e9       	ldi	r24, 0x99	; 153
    3688:	9e e1       	ldi	r25, 0x1E	; 30
    368a:	0e 94 2e 19 	call	0x325c	; 0x325c <xTaskCreate>
    368e:	89 83       	std	Y+1, r24	; 0x01
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	81 30       	cpi	r24, 0x01	; 1
    3694:	81 f4       	brne	.+32     	; 0x36b6 <vTaskStartScheduler+0x5a>
    3696:	f8 94       	cli
    3698:	8f ef       	ldi	r24, 0xFF	; 255
    369a:	9f ef       	ldi	r25, 0xFF	; 255
    369c:	90 93 aa 07 	sts	0x07AA, r25	; 0x8007aa <xNextTaskUnblockTime+0x1>
    36a0:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <xNextTaskUnblockTime>
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xSchedulerRunning>
    36aa:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <xTickCount+0x1>
    36ae:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <xTickCount>
    36b2:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <xPortStartScheduler>
    36b6:	00 00       	nop
    36b8:	0f 90       	pop	r0
    36ba:	df 91       	pop	r29
    36bc:	cf 91       	pop	r28
    36be:	0f 91       	pop	r16
    36c0:	ff 90       	pop	r15
    36c2:	ef 90       	pop	r14
    36c4:	08 95       	ret

000036c6 <vTaskSuspendAll>:
    36c6:	cf 93       	push	r28
    36c8:	df 93       	push	r29
    36ca:	cd b7       	in	r28, 0x3d	; 61
    36cc:	de b7       	in	r29, 0x3e	; 62
    36ce:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    36d2:	8f 5f       	subi	r24, 0xFF	; 255
    36d4:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <uxSchedulerSuspended>
    36d8:	00 00       	nop
    36da:	df 91       	pop	r29
    36dc:	cf 91       	pop	r28
    36de:	08 95       	ret

000036e0 <xTaskResumeAll>:
    36e0:	cf 93       	push	r28
    36e2:	df 93       	push	r29
    36e4:	00 d0       	rcall	.+0      	; 0x36e6 <xTaskResumeAll+0x6>
    36e6:	00 d0       	rcall	.+0      	; 0x36e8 <xTaskResumeAll+0x8>
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62
    36ec:	1a 82       	std	Y+2, r1	; 0x02
    36ee:	19 82       	std	Y+1, r1	; 0x01
    36f0:	1b 82       	std	Y+3, r1	; 0x03
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	f8 94       	cli
    36f6:	0f 92       	push	r0
    36f8:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    36fc:	81 50       	subi	r24, 0x01	; 1
    36fe:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <uxSchedulerSuspended>
    3702:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    3706:	88 23       	and	r24, r24
    3708:	09 f0       	breq	.+2      	; 0x370c <xTaskResumeAll+0x2c>
    370a:	77 c0       	rjmp	.+238    	; 0x37fa <xTaskResumeAll+0x11a>
    370c:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <uxCurrentNumberOfTasks>
    3710:	88 23       	and	r24, r24
    3712:	09 f4       	brne	.+2      	; 0x3716 <xTaskResumeAll+0x36>
    3714:	72 c0       	rjmp	.+228    	; 0x37fa <xTaskResumeAll+0x11a>
    3716:	49 c0       	rjmp	.+146    	; 0x37aa <xTaskResumeAll+0xca>
    3718:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <xPendingReadyList+0x5>
    371c:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <xPendingReadyList+0x6>
    3720:	fc 01       	movw	r30, r24
    3722:	86 81       	ldd	r24, Z+6	; 0x06
    3724:	97 81       	ldd	r25, Z+7	; 0x07
    3726:	9a 83       	std	Y+2, r25	; 0x02
    3728:	89 83       	std	Y+1, r24	; 0x01
    372a:	89 81       	ldd	r24, Y+1	; 0x01
    372c:	9a 81       	ldd	r25, Y+2	; 0x02
    372e:	0c 96       	adiw	r24, 0x0c	; 12
    3730:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <uxListRemove>
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	9a 81       	ldd	r25, Y+2	; 0x02
    3738:	02 96       	adiw	r24, 0x02	; 2
    373a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <uxListRemove>
    373e:	89 81       	ldd	r24, Y+1	; 0x01
    3740:	9a 81       	ldd	r25, Y+2	; 0x02
    3742:	fc 01       	movw	r30, r24
    3744:	96 89       	ldd	r25, Z+22	; 0x16
    3746:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <uxTopReadyPriority>
    374a:	89 17       	cp	r24, r25
    374c:	30 f4       	brcc	.+12     	; 0x375a <xTaskResumeAll+0x7a>
    374e:	89 81       	ldd	r24, Y+1	; 0x01
    3750:	9a 81       	ldd	r25, Y+2	; 0x02
    3752:	fc 01       	movw	r30, r24
    3754:	86 89       	ldd	r24, Z+22	; 0x16
    3756:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <uxTopReadyPriority>
    375a:	89 81       	ldd	r24, Y+1	; 0x01
    375c:	9a 81       	ldd	r25, Y+2	; 0x02
    375e:	ac 01       	movw	r20, r24
    3760:	4e 5f       	subi	r20, 0xFE	; 254
    3762:	5f 4f       	sbci	r21, 0xFF	; 255
    3764:	89 81       	ldd	r24, Y+1	; 0x01
    3766:	9a 81       	ldd	r25, Y+2	; 0x02
    3768:	fc 01       	movw	r30, r24
    376a:	86 89       	ldd	r24, Z+22	; 0x16
    376c:	28 2f       	mov	r18, r24
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	c9 01       	movw	r24, r18
    3772:	88 0f       	add	r24, r24
    3774:	99 1f       	adc	r25, r25
    3776:	88 0f       	add	r24, r24
    3778:	99 1f       	adc	r25, r25
    377a:	88 0f       	add	r24, r24
    377c:	99 1f       	adc	r25, r25
    377e:	82 0f       	add	r24, r18
    3780:	93 1f       	adc	r25, r19
    3782:	8d 5a       	subi	r24, 0xAD	; 173
    3784:	98 4f       	sbci	r25, 0xF8	; 248
    3786:	ba 01       	movw	r22, r20
    3788:	0e 94 df 0c 	call	0x19be	; 0x19be <vListInsertEnd>
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	9a 81       	ldd	r25, Y+2	; 0x02
    3790:	fc 01       	movw	r30, r24
    3792:	26 89       	ldd	r18, Z+22	; 0x16
    3794:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    3798:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    379c:	fc 01       	movw	r30, r24
    379e:	86 89       	ldd	r24, Z+22	; 0x16
    37a0:	28 17       	cp	r18, r24
    37a2:	18 f0       	brcs	.+6      	; 0x37aa <xTaskResumeAll+0xca>
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <xYieldPending>
    37aa:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <xPendingReadyList>
    37ae:	88 23       	and	r24, r24
    37b0:	09 f0       	breq	.+2      	; 0x37b4 <xTaskResumeAll+0xd4>
    37b2:	b2 cf       	rjmp	.-156    	; 0x3718 <xTaskResumeAll+0x38>
    37b4:	89 81       	ldd	r24, Y+1	; 0x01
    37b6:	9a 81       	ldd	r25, Y+2	; 0x02
    37b8:	89 2b       	or	r24, r25
    37ba:	11 f0       	breq	.+4      	; 0x37c0 <xTaskResumeAll+0xe0>
    37bc:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <prvResetNextTaskUnblockTime>
    37c0:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <uxPendedTicks>
    37c4:	8c 83       	std	Y+4, r24	; 0x04
    37c6:	8c 81       	ldd	r24, Y+4	; 0x04
    37c8:	88 23       	and	r24, r24
    37ca:	79 f0       	breq	.+30     	; 0x37ea <xTaskResumeAll+0x10a>
    37cc:	0e 94 07 1c 	call	0x380e	; 0x380e <xTaskIncrementTick>
    37d0:	88 23       	and	r24, r24
    37d2:	19 f0       	breq	.+6      	; 0x37da <xTaskResumeAll+0xfa>
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <xYieldPending>
    37da:	8c 81       	ldd	r24, Y+4	; 0x04
    37dc:	81 50       	subi	r24, 0x01	; 1
    37de:	8c 83       	std	Y+4, r24	; 0x04
    37e0:	8c 81       	ldd	r24, Y+4	; 0x04
    37e2:	88 23       	and	r24, r24
    37e4:	99 f7       	brne	.-26     	; 0x37cc <xTaskResumeAll+0xec>
    37e6:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <uxPendedTicks>
    37ea:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <xYieldPending>
    37ee:	88 23       	and	r24, r24
    37f0:	21 f0       	breq	.+8      	; 0x37fa <xTaskResumeAll+0x11a>
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	8b 83       	std	Y+3, r24	; 0x03
    37f6:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vPortYield>
    37fa:	0f 90       	pop	r0
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	df 91       	pop	r29
    380a:	cf 91       	pop	r28
    380c:	08 95       	ret

0000380e <xTaskIncrementTick>:
    380e:	cf 93       	push	r28
    3810:	df 93       	push	r29
    3812:	cd b7       	in	r28, 0x3d	; 61
    3814:	de b7       	in	r29, 0x3e	; 62
    3816:	29 97       	sbiw	r28, 0x09	; 9
    3818:	0f b6       	in	r0, 0x3f	; 63
    381a:	f8 94       	cli
    381c:	de bf       	out	0x3e, r29	; 62
    381e:	0f be       	out	0x3f, r0	; 63
    3820:	cd bf       	out	0x3d, r28	; 61
    3822:	19 82       	std	Y+1, r1	; 0x01
    3824:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    3828:	88 23       	and	r24, r24
    382a:	09 f0       	breq	.+2      	; 0x382e <xTaskIncrementTick+0x20>
    382c:	c8 c0       	rjmp	.+400    	; 0x39be <xTaskIncrementTick+0x1b0>
    382e:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <xTickCount>
    3832:	90 91 a2 07 	lds	r25, 0x07A2	; 0x8007a2 <xTickCount+0x1>
    3836:	01 96       	adiw	r24, 0x01	; 1
    3838:	9b 83       	std	Y+3, r25	; 0x03
    383a:	8a 83       	std	Y+2, r24	; 0x02
    383c:	8a 81       	ldd	r24, Y+2	; 0x02
    383e:	9b 81       	ldd	r25, Y+3	; 0x03
    3840:	90 93 a2 07 	sts	0x07A2, r25	; 0x8007a2 <xTickCount+0x1>
    3844:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <xTickCount>
    3848:	8a 81       	ldd	r24, Y+2	; 0x02
    384a:	9b 81       	ldd	r25, Y+3	; 0x03
    384c:	89 2b       	or	r24, r25
    384e:	d9 f4       	brne	.+54     	; 0x3886 <xTaskIncrementTick+0x78>
    3850:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <pxDelayedTaskList>
    3854:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <pxDelayedTaskList+0x1>
    3858:	9d 83       	std	Y+5, r25	; 0x05
    385a:	8c 83       	std	Y+4, r24	; 0x04
    385c:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <pxOverflowDelayedTaskList>
    3860:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <pxOverflowDelayedTaskList+0x1>
    3864:	90 93 8a 07 	sts	0x078A, r25	; 0x80078a <pxDelayedTaskList+0x1>
    3868:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <pxDelayedTaskList>
    386c:	8c 81       	ldd	r24, Y+4	; 0x04
    386e:	9d 81       	ldd	r25, Y+5	; 0x05
    3870:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <pxOverflowDelayedTaskList+0x1>
    3874:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <pxOverflowDelayedTaskList>
    3878:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <xNumOfOverflows>
    387c:	8f 5f       	subi	r24, 0xFF	; 255
    387e:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNumOfOverflows>
    3882:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <prvResetNextTaskUnblockTime>
    3886:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xNextTaskUnblockTime>
    388a:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xNextTaskUnblockTime+0x1>
    388e:	2a 81       	ldd	r18, Y+2	; 0x02
    3890:	3b 81       	ldd	r19, Y+3	; 0x03
    3892:	28 17       	cp	r18, r24
    3894:	39 07       	cpc	r19, r25
    3896:	08 f4       	brcc	.+2      	; 0x389a <xTaskIncrementTick+0x8c>
    3898:	78 c0       	rjmp	.+240    	; 0x398a <xTaskIncrementTick+0x17c>
    389a:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <pxDelayedTaskList>
    389e:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <pxDelayedTaskList+0x1>
    38a2:	fc 01       	movw	r30, r24
    38a4:	80 81       	ld	r24, Z
    38a6:	88 23       	and	r24, r24
    38a8:	39 f4       	brne	.+14     	; 0x38b8 <xTaskIncrementTick+0xaa>
    38aa:	8f ef       	ldi	r24, 0xFF	; 255
    38ac:	9f ef       	ldi	r25, 0xFF	; 255
    38ae:	90 93 aa 07 	sts	0x07AA, r25	; 0x8007aa <xNextTaskUnblockTime+0x1>
    38b2:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <xNextTaskUnblockTime>
    38b6:	69 c0       	rjmp	.+210    	; 0x398a <xTaskIncrementTick+0x17c>
    38b8:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <pxDelayedTaskList>
    38bc:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <pxDelayedTaskList+0x1>
    38c0:	fc 01       	movw	r30, r24
    38c2:	85 81       	ldd	r24, Z+5	; 0x05
    38c4:	96 81       	ldd	r25, Z+6	; 0x06
    38c6:	fc 01       	movw	r30, r24
    38c8:	86 81       	ldd	r24, Z+6	; 0x06
    38ca:	97 81       	ldd	r25, Z+7	; 0x07
    38cc:	9f 83       	std	Y+7, r25	; 0x07
    38ce:	8e 83       	std	Y+6, r24	; 0x06
    38d0:	8e 81       	ldd	r24, Y+6	; 0x06
    38d2:	9f 81       	ldd	r25, Y+7	; 0x07
    38d4:	fc 01       	movw	r30, r24
    38d6:	82 81       	ldd	r24, Z+2	; 0x02
    38d8:	93 81       	ldd	r25, Z+3	; 0x03
    38da:	99 87       	std	Y+9, r25	; 0x09
    38dc:	88 87       	std	Y+8, r24	; 0x08
    38de:	2a 81       	ldd	r18, Y+2	; 0x02
    38e0:	3b 81       	ldd	r19, Y+3	; 0x03
    38e2:	88 85       	ldd	r24, Y+8	; 0x08
    38e4:	99 85       	ldd	r25, Y+9	; 0x09
    38e6:	28 17       	cp	r18, r24
    38e8:	39 07       	cpc	r19, r25
    38ea:	38 f4       	brcc	.+14     	; 0x38fa <xTaskIncrementTick+0xec>
    38ec:	88 85       	ldd	r24, Y+8	; 0x08
    38ee:	99 85       	ldd	r25, Y+9	; 0x09
    38f0:	90 93 aa 07 	sts	0x07AA, r25	; 0x8007aa <xNextTaskUnblockTime+0x1>
    38f4:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <xNextTaskUnblockTime>
    38f8:	48 c0       	rjmp	.+144    	; 0x398a <xTaskIncrementTick+0x17c>
    38fa:	8e 81       	ldd	r24, Y+6	; 0x06
    38fc:	9f 81       	ldd	r25, Y+7	; 0x07
    38fe:	02 96       	adiw	r24, 0x02	; 2
    3900:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <uxListRemove>
    3904:	8e 81       	ldd	r24, Y+6	; 0x06
    3906:	9f 81       	ldd	r25, Y+7	; 0x07
    3908:	fc 01       	movw	r30, r24
    390a:	84 89       	ldd	r24, Z+20	; 0x14
    390c:	95 89       	ldd	r25, Z+21	; 0x15
    390e:	89 2b       	or	r24, r25
    3910:	29 f0       	breq	.+10     	; 0x391c <xTaskIncrementTick+0x10e>
    3912:	8e 81       	ldd	r24, Y+6	; 0x06
    3914:	9f 81       	ldd	r25, Y+7	; 0x07
    3916:	0c 96       	adiw	r24, 0x0c	; 12
    3918:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <uxListRemove>
    391c:	8e 81       	ldd	r24, Y+6	; 0x06
    391e:	9f 81       	ldd	r25, Y+7	; 0x07
    3920:	fc 01       	movw	r30, r24
    3922:	96 89       	ldd	r25, Z+22	; 0x16
    3924:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <uxTopReadyPriority>
    3928:	89 17       	cp	r24, r25
    392a:	30 f4       	brcc	.+12     	; 0x3938 <xTaskIncrementTick+0x12a>
    392c:	8e 81       	ldd	r24, Y+6	; 0x06
    392e:	9f 81       	ldd	r25, Y+7	; 0x07
    3930:	fc 01       	movw	r30, r24
    3932:	86 89       	ldd	r24, Z+22	; 0x16
    3934:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <uxTopReadyPriority>
    3938:	8e 81       	ldd	r24, Y+6	; 0x06
    393a:	9f 81       	ldd	r25, Y+7	; 0x07
    393c:	ac 01       	movw	r20, r24
    393e:	4e 5f       	subi	r20, 0xFE	; 254
    3940:	5f 4f       	sbci	r21, 0xFF	; 255
    3942:	8e 81       	ldd	r24, Y+6	; 0x06
    3944:	9f 81       	ldd	r25, Y+7	; 0x07
    3946:	fc 01       	movw	r30, r24
    3948:	86 89       	ldd	r24, Z+22	; 0x16
    394a:	28 2f       	mov	r18, r24
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	c9 01       	movw	r24, r18
    3950:	88 0f       	add	r24, r24
    3952:	99 1f       	adc	r25, r25
    3954:	88 0f       	add	r24, r24
    3956:	99 1f       	adc	r25, r25
    3958:	88 0f       	add	r24, r24
    395a:	99 1f       	adc	r25, r25
    395c:	82 0f       	add	r24, r18
    395e:	93 1f       	adc	r25, r19
    3960:	8d 5a       	subi	r24, 0xAD	; 173
    3962:	98 4f       	sbci	r25, 0xF8	; 248
    3964:	ba 01       	movw	r22, r20
    3966:	0e 94 df 0c 	call	0x19be	; 0x19be <vListInsertEnd>
    396a:	8e 81       	ldd	r24, Y+6	; 0x06
    396c:	9f 81       	ldd	r25, Y+7	; 0x07
    396e:	fc 01       	movw	r30, r24
    3970:	26 89       	ldd	r18, Z+22	; 0x16
    3972:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    3976:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    397a:	fc 01       	movw	r30, r24
    397c:	86 89       	ldd	r24, Z+22	; 0x16
    397e:	28 17       	cp	r18, r24
    3980:	08 f4       	brcc	.+2      	; 0x3984 <xTaskIncrementTick+0x176>
    3982:	8b cf       	rjmp	.-234    	; 0x389a <xTaskIncrementTick+0x8c>
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	89 83       	std	Y+1, r24	; 0x01
    3988:	88 cf       	rjmp	.-240    	; 0x389a <xTaskIncrementTick+0x8c>
    398a:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    398e:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    3992:	fc 01       	movw	r30, r24
    3994:	86 89       	ldd	r24, Z+22	; 0x16
    3996:	28 2f       	mov	r18, r24
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	c9 01       	movw	r24, r18
    399c:	88 0f       	add	r24, r24
    399e:	99 1f       	adc	r25, r25
    39a0:	88 0f       	add	r24, r24
    39a2:	99 1f       	adc	r25, r25
    39a4:	88 0f       	add	r24, r24
    39a6:	99 1f       	adc	r25, r25
    39a8:	82 0f       	add	r24, r18
    39aa:	93 1f       	adc	r25, r19
    39ac:	8d 5a       	subi	r24, 0xAD	; 173
    39ae:	98 4f       	sbci	r25, 0xF8	; 248
    39b0:	fc 01       	movw	r30, r24
    39b2:	80 81       	ld	r24, Z
    39b4:	82 30       	cpi	r24, 0x02	; 2
    39b6:	40 f0       	brcs	.+16     	; 0x39c8 <xTaskIncrementTick+0x1ba>
    39b8:	81 e0       	ldi	r24, 0x01	; 1
    39ba:	89 83       	std	Y+1, r24	; 0x01
    39bc:	05 c0       	rjmp	.+10     	; 0x39c8 <xTaskIncrementTick+0x1ba>
    39be:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <uxPendedTicks>
    39c2:	8f 5f       	subi	r24, 0xFF	; 255
    39c4:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <uxPendedTicks>
    39c8:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <xYieldPending>
    39cc:	88 23       	and	r24, r24
    39ce:	11 f0       	breq	.+4      	; 0x39d4 <xTaskIncrementTick+0x1c6>
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	89 83       	std	Y+1, r24	; 0x01
    39d4:	89 81       	ldd	r24, Y+1	; 0x01
    39d6:	29 96       	adiw	r28, 0x09	; 9
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	f8 94       	cli
    39dc:	de bf       	out	0x3e, r29	; 62
    39de:	0f be       	out	0x3f, r0	; 63
    39e0:	cd bf       	out	0x3d, r28	; 61
    39e2:	df 91       	pop	r29
    39e4:	cf 91       	pop	r28
    39e6:	08 95       	ret

000039e8 <vTaskSwitchContext>:
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
    39ec:	00 d0       	rcall	.+0      	; 0x39ee <vTaskSwitchContext+0x6>
    39ee:	1f 92       	push	r1
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    39f8:	88 23       	and	r24, r24
    39fa:	21 f0       	breq	.+8      	; 0x3a04 <vTaskSwitchContext+0x1c>
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <xYieldPending>
    3a02:	71 c0       	rjmp	.+226    	; 0x3ae6 <vTaskSwitchContext+0xfe>
    3a04:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <xYieldPending>
    3a08:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    3a0c:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    3a10:	fc 01       	movw	r30, r24
    3a12:	85 a1       	ldd	r24, Z+37	; 0x25
    3a14:	96 a1       	ldd	r25, Z+38	; 0x26
    3a16:	0e 94 df 0b 	call	0x17be	; 0x17be <switch_out>
    3a1a:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <uxTopReadyPriority>
    3a1e:	89 83       	std	Y+1, r24	; 0x01
    3a20:	03 c0       	rjmp	.+6      	; 0x3a28 <vTaskSwitchContext+0x40>
    3a22:	89 81       	ldd	r24, Y+1	; 0x01
    3a24:	81 50       	subi	r24, 0x01	; 1
    3a26:	89 83       	std	Y+1, r24	; 0x01
    3a28:	89 81       	ldd	r24, Y+1	; 0x01
    3a2a:	28 2f       	mov	r18, r24
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	c9 01       	movw	r24, r18
    3a30:	88 0f       	add	r24, r24
    3a32:	99 1f       	adc	r25, r25
    3a34:	88 0f       	add	r24, r24
    3a36:	99 1f       	adc	r25, r25
    3a38:	88 0f       	add	r24, r24
    3a3a:	99 1f       	adc	r25, r25
    3a3c:	82 0f       	add	r24, r18
    3a3e:	93 1f       	adc	r25, r19
    3a40:	8d 5a       	subi	r24, 0xAD	; 173
    3a42:	98 4f       	sbci	r25, 0xF8	; 248
    3a44:	fc 01       	movw	r30, r24
    3a46:	80 81       	ld	r24, Z
    3a48:	88 23       	and	r24, r24
    3a4a:	59 f3       	breq	.-42     	; 0x3a22 <vTaskSwitchContext+0x3a>
    3a4c:	89 81       	ldd	r24, Y+1	; 0x01
    3a4e:	28 2f       	mov	r18, r24
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	c9 01       	movw	r24, r18
    3a54:	88 0f       	add	r24, r24
    3a56:	99 1f       	adc	r25, r25
    3a58:	88 0f       	add	r24, r24
    3a5a:	99 1f       	adc	r25, r25
    3a5c:	88 0f       	add	r24, r24
    3a5e:	99 1f       	adc	r25, r25
    3a60:	82 0f       	add	r24, r18
    3a62:	93 1f       	adc	r25, r19
    3a64:	8d 5a       	subi	r24, 0xAD	; 173
    3a66:	98 4f       	sbci	r25, 0xF8	; 248
    3a68:	9b 83       	std	Y+3, r25	; 0x03
    3a6a:	8a 83       	std	Y+2, r24	; 0x02
    3a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a70:	fc 01       	movw	r30, r24
    3a72:	81 81       	ldd	r24, Z+1	; 0x01
    3a74:	92 81       	ldd	r25, Z+2	; 0x02
    3a76:	fc 01       	movw	r30, r24
    3a78:	22 81       	ldd	r18, Z+2	; 0x02
    3a7a:	33 81       	ldd	r19, Z+3	; 0x03
    3a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a80:	fc 01       	movw	r30, r24
    3a82:	32 83       	std	Z+2, r19	; 0x02
    3a84:	21 83       	std	Z+1, r18	; 0x01
    3a86:	8a 81       	ldd	r24, Y+2	; 0x02
    3a88:	9b 81       	ldd	r25, Y+3	; 0x03
    3a8a:	fc 01       	movw	r30, r24
    3a8c:	21 81       	ldd	r18, Z+1	; 0x01
    3a8e:	32 81       	ldd	r19, Z+2	; 0x02
    3a90:	8a 81       	ldd	r24, Y+2	; 0x02
    3a92:	9b 81       	ldd	r25, Y+3	; 0x03
    3a94:	03 96       	adiw	r24, 0x03	; 3
    3a96:	28 17       	cp	r18, r24
    3a98:	39 07       	cpc	r19, r25
    3a9a:	69 f4       	brne	.+26     	; 0x3ab6 <vTaskSwitchContext+0xce>
    3a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa0:	fc 01       	movw	r30, r24
    3aa2:	81 81       	ldd	r24, Z+1	; 0x01
    3aa4:	92 81       	ldd	r25, Z+2	; 0x02
    3aa6:	fc 01       	movw	r30, r24
    3aa8:	22 81       	ldd	r18, Z+2	; 0x02
    3aaa:	33 81       	ldd	r19, Z+3	; 0x03
    3aac:	8a 81       	ldd	r24, Y+2	; 0x02
    3aae:	9b 81       	ldd	r25, Y+3	; 0x03
    3ab0:	fc 01       	movw	r30, r24
    3ab2:	32 83       	std	Z+2, r19	; 0x02
    3ab4:	21 83       	std	Z+1, r18	; 0x01
    3ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    3aba:	fc 01       	movw	r30, r24
    3abc:	81 81       	ldd	r24, Z+1	; 0x01
    3abe:	92 81       	ldd	r25, Z+2	; 0x02
    3ac0:	fc 01       	movw	r30, r24
    3ac2:	86 81       	ldd	r24, Z+6	; 0x06
    3ac4:	97 81       	ldd	r25, Z+7	; 0x07
    3ac6:	90 93 52 07 	sts	0x0752, r25	; 0x800752 <pxCurrentTCB+0x1>
    3aca:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <pxCurrentTCB>
    3ace:	89 81       	ldd	r24, Y+1	; 0x01
    3ad0:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <uxTopReadyPriority>
    3ad4:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    3ad8:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    3adc:	fc 01       	movw	r30, r24
    3ade:	85 a1       	ldd	r24, Z+37	; 0x25
    3ae0:	96 a1       	ldd	r25, Z+38	; 0x26
    3ae2:	0e 94 ba 0b 	call	0x1774	; 0x1774 <switch_in>
    3ae6:	00 00       	nop
    3ae8:	0f 90       	pop	r0
    3aea:	0f 90       	pop	r0
    3aec:	0f 90       	pop	r0
    3aee:	df 91       	pop	r29
    3af0:	cf 91       	pop	r28
    3af2:	08 95       	ret

00003af4 <vTaskPlaceOnEventList>:
    3af4:	cf 93       	push	r28
    3af6:	df 93       	push	r29
    3af8:	00 d0       	rcall	.+0      	; 0x3afa <vTaskPlaceOnEventList+0x6>
    3afa:	00 d0       	rcall	.+0      	; 0x3afc <vTaskPlaceOnEventList+0x8>
    3afc:	cd b7       	in	r28, 0x3d	; 61
    3afe:	de b7       	in	r29, 0x3e	; 62
    3b00:	9a 83       	std	Y+2, r25	; 0x02
    3b02:	89 83       	std	Y+1, r24	; 0x01
    3b04:	7c 83       	std	Y+4, r23	; 0x04
    3b06:	6b 83       	std	Y+3, r22	; 0x03
    3b08:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    3b0c:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    3b10:	9c 01       	movw	r18, r24
    3b12:	24 5f       	subi	r18, 0xF4	; 244
    3b14:	3f 4f       	sbci	r19, 0xFF	; 255
    3b16:	89 81       	ldd	r24, Y+1	; 0x01
    3b18:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1a:	b9 01       	movw	r22, r18
    3b1c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <vListInsert>
    3b20:	8b 81       	ldd	r24, Y+3	; 0x03
    3b22:	9c 81       	ldd	r25, Y+4	; 0x04
    3b24:	61 e0       	ldi	r22, 0x01	; 1
    3b26:	0e 94 a0 20 	call	0x4140	; 0x4140 <prvAddCurrentTaskToDelayedList>
    3b2a:	00 00       	nop
    3b2c:	0f 90       	pop	r0
    3b2e:	0f 90       	pop	r0
    3b30:	0f 90       	pop	r0
    3b32:	0f 90       	pop	r0
    3b34:	df 91       	pop	r29
    3b36:	cf 91       	pop	r28
    3b38:	08 95       	ret

00003b3a <xTaskRemoveFromEventList>:
    3b3a:	cf 93       	push	r28
    3b3c:	df 93       	push	r29
    3b3e:	00 d0       	rcall	.+0      	; 0x3b40 <xTaskRemoveFromEventList+0x6>
    3b40:	00 d0       	rcall	.+0      	; 0x3b42 <xTaskRemoveFromEventList+0x8>
    3b42:	1f 92       	push	r1
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	9d 83       	std	Y+5, r25	; 0x05
    3b4a:	8c 83       	std	Y+4, r24	; 0x04
    3b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b50:	fc 01       	movw	r30, r24
    3b52:	85 81       	ldd	r24, Z+5	; 0x05
    3b54:	96 81       	ldd	r25, Z+6	; 0x06
    3b56:	fc 01       	movw	r30, r24
    3b58:	86 81       	ldd	r24, Z+6	; 0x06
    3b5a:	97 81       	ldd	r25, Z+7	; 0x07
    3b5c:	9b 83       	std	Y+3, r25	; 0x03
    3b5e:	8a 83       	std	Y+2, r24	; 0x02
    3b60:	8a 81       	ldd	r24, Y+2	; 0x02
    3b62:	9b 81       	ldd	r25, Y+3	; 0x03
    3b64:	0c 96       	adiw	r24, 0x0c	; 12
    3b66:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <uxListRemove>
    3b6a:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    3b6e:	88 23       	and	r24, r24
    3b70:	69 f5       	brne	.+90     	; 0x3bcc <xTaskRemoveFromEventList+0x92>
    3b72:	8a 81       	ldd	r24, Y+2	; 0x02
    3b74:	9b 81       	ldd	r25, Y+3	; 0x03
    3b76:	02 96       	adiw	r24, 0x02	; 2
    3b78:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <uxListRemove>
    3b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b80:	fc 01       	movw	r30, r24
    3b82:	96 89       	ldd	r25, Z+22	; 0x16
    3b84:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <uxTopReadyPriority>
    3b88:	89 17       	cp	r24, r25
    3b8a:	30 f4       	brcc	.+12     	; 0x3b98 <xTaskRemoveFromEventList+0x5e>
    3b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b90:	fc 01       	movw	r30, r24
    3b92:	86 89       	ldd	r24, Z+22	; 0x16
    3b94:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <uxTopReadyPriority>
    3b98:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b9c:	ac 01       	movw	r20, r24
    3b9e:	4e 5f       	subi	r20, 0xFE	; 254
    3ba0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba6:	fc 01       	movw	r30, r24
    3ba8:	86 89       	ldd	r24, Z+22	; 0x16
    3baa:	28 2f       	mov	r18, r24
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	c9 01       	movw	r24, r18
    3bb0:	88 0f       	add	r24, r24
    3bb2:	99 1f       	adc	r25, r25
    3bb4:	88 0f       	add	r24, r24
    3bb6:	99 1f       	adc	r25, r25
    3bb8:	88 0f       	add	r24, r24
    3bba:	99 1f       	adc	r25, r25
    3bbc:	82 0f       	add	r24, r18
    3bbe:	93 1f       	adc	r25, r19
    3bc0:	8d 5a       	subi	r24, 0xAD	; 173
    3bc2:	98 4f       	sbci	r25, 0xF8	; 248
    3bc4:	ba 01       	movw	r22, r20
    3bc6:	0e 94 df 0c 	call	0x19be	; 0x19be <vListInsertEnd>
    3bca:	08 c0       	rjmp	.+16     	; 0x3bdc <xTaskRemoveFromEventList+0xa2>
    3bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bce:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd0:	0c 96       	adiw	r24, 0x0c	; 12
    3bd2:	bc 01       	movw	r22, r24
    3bd4:	8d e8       	ldi	r24, 0x8D	; 141
    3bd6:	97 e0       	ldi	r25, 0x07	; 7
    3bd8:	0e 94 df 0c 	call	0x19be	; 0x19be <vListInsertEnd>
    3bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bde:	9b 81       	ldd	r25, Y+3	; 0x03
    3be0:	fc 01       	movw	r30, r24
    3be2:	26 89       	ldd	r18, Z+22	; 0x16
    3be4:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    3be8:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    3bec:	fc 01       	movw	r30, r24
    3bee:	86 89       	ldd	r24, Z+22	; 0x16
    3bf0:	82 17       	cp	r24, r18
    3bf2:	30 f4       	brcc	.+12     	; 0x3c00 <xTaskRemoveFromEventList+0xc6>
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	89 83       	std	Y+1, r24	; 0x01
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <xYieldPending>
    3bfe:	01 c0       	rjmp	.+2      	; 0x3c02 <xTaskRemoveFromEventList+0xc8>
    3c00:	19 82       	std	Y+1, r1	; 0x01
    3c02:	89 81       	ldd	r24, Y+1	; 0x01
    3c04:	0f 90       	pop	r0
    3c06:	0f 90       	pop	r0
    3c08:	0f 90       	pop	r0
    3c0a:	0f 90       	pop	r0
    3c0c:	0f 90       	pop	r0
    3c0e:	df 91       	pop	r29
    3c10:	cf 91       	pop	r28
    3c12:	08 95       	ret

00003c14 <vTaskSetTimeOutState>:
    3c14:	cf 93       	push	r28
    3c16:	df 93       	push	r29
    3c18:	00 d0       	rcall	.+0      	; 0x3c1a <vTaskSetTimeOutState+0x6>
    3c1a:	cd b7       	in	r28, 0x3d	; 61
    3c1c:	de b7       	in	r29, 0x3e	; 62
    3c1e:	9a 83       	std	Y+2, r25	; 0x02
    3c20:	89 83       	std	Y+1, r24	; 0x01
    3c22:	20 91 a7 07 	lds	r18, 0x07A7	; 0x8007a7 <xNumOfOverflows>
    3c26:	89 81       	ldd	r24, Y+1	; 0x01
    3c28:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	20 83       	st	Z, r18
    3c2e:	20 91 a1 07 	lds	r18, 0x07A1	; 0x8007a1 <xTickCount>
    3c32:	30 91 a2 07 	lds	r19, 0x07A2	; 0x8007a2 <xTickCount+0x1>
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	32 83       	std	Z+2, r19	; 0x02
    3c3e:	21 83       	std	Z+1, r18	; 0x01
    3c40:	00 00       	nop
    3c42:	0f 90       	pop	r0
    3c44:	0f 90       	pop	r0
    3c46:	df 91       	pop	r29
    3c48:	cf 91       	pop	r28
    3c4a:	08 95       	ret

00003c4c <xTaskCheckForTimeOut>:
    3c4c:	cf 93       	push	r28
    3c4e:	df 93       	push	r29
    3c50:	cd b7       	in	r28, 0x3d	; 61
    3c52:	de b7       	in	r29, 0x3e	; 62
    3c54:	27 97       	sbiw	r28, 0x07	; 7
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	f8 94       	cli
    3c5a:	de bf       	out	0x3e, r29	; 62
    3c5c:	0f be       	out	0x3f, r0	; 63
    3c5e:	cd bf       	out	0x3d, r28	; 61
    3c60:	9d 83       	std	Y+5, r25	; 0x05
    3c62:	8c 83       	std	Y+4, r24	; 0x04
    3c64:	7f 83       	std	Y+7, r23	; 0x07
    3c66:	6e 83       	std	Y+6, r22	; 0x06
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	f8 94       	cli
    3c6c:	0f 92       	push	r0
    3c6e:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <xTickCount>
    3c72:	90 91 a2 07 	lds	r25, 0x07A2	; 0x8007a2 <xTickCount+0x1>
    3c76:	9b 83       	std	Y+3, r25	; 0x03
    3c78:	8a 83       	std	Y+2, r24	; 0x02
    3c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    3c7e:	fc 01       	movw	r30, r24
    3c80:	90 81       	ld	r25, Z
    3c82:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <xNumOfOverflows>
    3c86:	98 17       	cp	r25, r24
    3c88:	69 f0       	breq	.+26     	; 0x3ca4 <xTaskCheckForTimeOut+0x58>
    3c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c8c:	9d 81       	ldd	r25, Y+5	; 0x05
    3c8e:	fc 01       	movw	r30, r24
    3c90:	21 81       	ldd	r18, Z+1	; 0x01
    3c92:	32 81       	ldd	r19, Z+2	; 0x02
    3c94:	8a 81       	ldd	r24, Y+2	; 0x02
    3c96:	9b 81       	ldd	r25, Y+3	; 0x03
    3c98:	82 17       	cp	r24, r18
    3c9a:	93 07       	cpc	r25, r19
    3c9c:	18 f0       	brcs	.+6      	; 0x3ca4 <xTaskCheckForTimeOut+0x58>
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	89 83       	std	Y+1, r24	; 0x01
    3ca2:	30 c0       	rjmp	.+96     	; 0x3d04 <xTaskCheckForTimeOut+0xb8>
    3ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ca8:	fc 01       	movw	r30, r24
    3caa:	81 81       	ldd	r24, Z+1	; 0x01
    3cac:	92 81       	ldd	r25, Z+2	; 0x02
    3cae:	2a 81       	ldd	r18, Y+2	; 0x02
    3cb0:	3b 81       	ldd	r19, Y+3	; 0x03
    3cb2:	28 1b       	sub	r18, r24
    3cb4:	39 0b       	sbc	r19, r25
    3cb6:	8e 81       	ldd	r24, Y+6	; 0x06
    3cb8:	9f 81       	ldd	r25, Y+7	; 0x07
    3cba:	fc 01       	movw	r30, r24
    3cbc:	80 81       	ld	r24, Z
    3cbe:	91 81       	ldd	r25, Z+1	; 0x01
    3cc0:	28 17       	cp	r18, r24
    3cc2:	39 07       	cpc	r19, r25
    3cc4:	e8 f4       	brcc	.+58     	; 0x3d00 <xTaskCheckForTimeOut+0xb4>
    3cc6:	8e 81       	ldd	r24, Y+6	; 0x06
    3cc8:	9f 81       	ldd	r25, Y+7	; 0x07
    3cca:	fc 01       	movw	r30, r24
    3ccc:	20 81       	ld	r18, Z
    3cce:	31 81       	ldd	r19, Z+1	; 0x01
    3cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    3cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	41 81       	ldd	r20, Z+1	; 0x01
    3cd8:	52 81       	ldd	r21, Z+2	; 0x02
    3cda:	8a 81       	ldd	r24, Y+2	; 0x02
    3cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cde:	ba 01       	movw	r22, r20
    3ce0:	68 1b       	sub	r22, r24
    3ce2:	79 0b       	sbc	r23, r25
    3ce4:	cb 01       	movw	r24, r22
    3ce6:	28 0f       	add	r18, r24
    3ce8:	39 1f       	adc	r19, r25
    3cea:	8e 81       	ldd	r24, Y+6	; 0x06
    3cec:	9f 81       	ldd	r25, Y+7	; 0x07
    3cee:	fc 01       	movw	r30, r24
    3cf0:	31 83       	std	Z+1, r19	; 0x01
    3cf2:	20 83       	st	Z, r18
    3cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    3cf6:	9d 81       	ldd	r25, Y+5	; 0x05
    3cf8:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <vTaskSetTimeOutState>
    3cfc:	19 82       	std	Y+1, r1	; 0x01
    3cfe:	02 c0       	rjmp	.+4      	; 0x3d04 <xTaskCheckForTimeOut+0xb8>
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	89 83       	std	Y+1, r24	; 0x01
    3d04:	0f 90       	pop	r0
    3d06:	0f be       	out	0x3f, r0	; 63
    3d08:	89 81       	ldd	r24, Y+1	; 0x01
    3d0a:	27 96       	adiw	r28, 0x07	; 7
    3d0c:	0f b6       	in	r0, 0x3f	; 63
    3d0e:	f8 94       	cli
    3d10:	de bf       	out	0x3e, r29	; 62
    3d12:	0f be       	out	0x3f, r0	; 63
    3d14:	cd bf       	out	0x3d, r28	; 61
    3d16:	df 91       	pop	r29
    3d18:	cf 91       	pop	r28
    3d1a:	08 95       	ret

00003d1c <vTaskMissedYield>:
    3d1c:	cf 93       	push	r28
    3d1e:	df 93       	push	r29
    3d20:	cd b7       	in	r28, 0x3d	; 61
    3d22:	de b7       	in	r29, 0x3e	; 62
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <xYieldPending>
    3d2a:	00 00       	nop
    3d2c:	df 91       	pop	r29
    3d2e:	cf 91       	pop	r28
    3d30:	08 95       	ret

00003d32 <prvIdleTask>:
    3d32:	cf 93       	push	r28
    3d34:	df 93       	push	r29
    3d36:	00 d0       	rcall	.+0      	; 0x3d38 <prvIdleTask+0x6>
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
    3d3c:	9a 83       	std	Y+2, r25	; 0x02
    3d3e:	89 83       	std	Y+1, r24	; 0x01
    3d40:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <prvCheckTasksWaitingTermination>
    3d44:	80 91 53 07 	lds	r24, 0x0753	; 0x800753 <pxReadyTasksLists>
    3d48:	82 30       	cpi	r24, 0x02	; 2
    3d4a:	10 f0       	brcs	.+4      	; 0x3d50 <prvIdleTask+0x1e>
    3d4c:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vPortYield>
    3d50:	0e 94 07 0a 	call	0x140e	; 0x140e <vApplicationIdleHook>
    3d54:	f5 cf       	rjmp	.-22     	; 0x3d40 <prvIdleTask+0xe>

00003d56 <prvInitialiseTaskLists>:
    3d56:	cf 93       	push	r28
    3d58:	df 93       	push	r29
    3d5a:	1f 92       	push	r1
    3d5c:	cd b7       	in	r28, 0x3d	; 61
    3d5e:	de b7       	in	r29, 0x3e	; 62
    3d60:	19 82       	std	Y+1, r1	; 0x01
    3d62:	13 c0       	rjmp	.+38     	; 0x3d8a <prvInitialiseTaskLists+0x34>
    3d64:	89 81       	ldd	r24, Y+1	; 0x01
    3d66:	28 2f       	mov	r18, r24
    3d68:	30 e0       	ldi	r19, 0x00	; 0
    3d6a:	c9 01       	movw	r24, r18
    3d6c:	88 0f       	add	r24, r24
    3d6e:	99 1f       	adc	r25, r25
    3d70:	88 0f       	add	r24, r24
    3d72:	99 1f       	adc	r25, r25
    3d74:	88 0f       	add	r24, r24
    3d76:	99 1f       	adc	r25, r25
    3d78:	82 0f       	add	r24, r18
    3d7a:	93 1f       	adc	r25, r19
    3d7c:	8d 5a       	subi	r24, 0xAD	; 173
    3d7e:	98 4f       	sbci	r25, 0xF8	; 248
    3d80:	0e 94 97 0c 	call	0x192e	; 0x192e <vListInitialise>
    3d84:	89 81       	ldd	r24, Y+1	; 0x01
    3d86:	8f 5f       	subi	r24, 0xFF	; 255
    3d88:	89 83       	std	Y+1, r24	; 0x01
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	84 30       	cpi	r24, 0x04	; 4
    3d8e:	50 f3       	brcs	.-44     	; 0x3d64 <prvInitialiseTaskLists+0xe>
    3d90:	87 e7       	ldi	r24, 0x77	; 119
    3d92:	97 e0       	ldi	r25, 0x07	; 7
    3d94:	0e 94 97 0c 	call	0x192e	; 0x192e <vListInitialise>
    3d98:	80 e8       	ldi	r24, 0x80	; 128
    3d9a:	97 e0       	ldi	r25, 0x07	; 7
    3d9c:	0e 94 97 0c 	call	0x192e	; 0x192e <vListInitialise>
    3da0:	8d e8       	ldi	r24, 0x8D	; 141
    3da2:	97 e0       	ldi	r25, 0x07	; 7
    3da4:	0e 94 97 0c 	call	0x192e	; 0x192e <vListInitialise>
    3da8:	86 e9       	ldi	r24, 0x96	; 150
    3daa:	97 e0       	ldi	r25, 0x07	; 7
    3dac:	0e 94 97 0c 	call	0x192e	; 0x192e <vListInitialise>
    3db0:	87 e7       	ldi	r24, 0x77	; 119
    3db2:	97 e0       	ldi	r25, 0x07	; 7
    3db4:	90 93 8a 07 	sts	0x078A, r25	; 0x80078a <pxDelayedTaskList+0x1>
    3db8:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <pxDelayedTaskList>
    3dbc:	80 e8       	ldi	r24, 0x80	; 128
    3dbe:	97 e0       	ldi	r25, 0x07	; 7
    3dc0:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <pxOverflowDelayedTaskList+0x1>
    3dc4:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <pxOverflowDelayedTaskList>
    3dc8:	00 00       	nop
    3dca:	0f 90       	pop	r0
    3dcc:	df 91       	pop	r29
    3dce:	cf 91       	pop	r28
    3dd0:	08 95       	ret

00003dd2 <prvCheckTasksWaitingTermination>:
    3dd2:	cf 93       	push	r28
    3dd4:	df 93       	push	r29
    3dd6:	00 d0       	rcall	.+0      	; 0x3dd8 <prvCheckTasksWaitingTermination+0x6>
    3dd8:	1f 92       	push	r1
    3dda:	cd b7       	in	r28, 0x3d	; 61
    3ddc:	de b7       	in	r29, 0x3e	; 62
    3dde:	2f c0       	rjmp	.+94     	; 0x3e3e <prvCheckTasksWaitingTermination+0x6c>
    3de0:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <vTaskSuspendAll>
    3de4:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <xTasksWaitingTermination>
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	99 23       	and	r25, r25
    3dec:	09 f0       	breq	.+2      	; 0x3df0 <prvCheckTasksWaitingTermination+0x1e>
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	89 83       	std	Y+1, r24	; 0x01
    3df2:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <xTaskResumeAll>
    3df6:	89 81       	ldd	r24, Y+1	; 0x01
    3df8:	88 23       	and	r24, r24
    3dfa:	09 f5       	brne	.+66     	; 0x3e3e <prvCheckTasksWaitingTermination+0x6c>
    3dfc:	0f b6       	in	r0, 0x3f	; 63
    3dfe:	f8 94       	cli
    3e00:	0f 92       	push	r0
    3e02:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <xTasksWaitingTermination+0x5>
    3e06:	90 91 9c 07 	lds	r25, 0x079C	; 0x80079c <xTasksWaitingTermination+0x6>
    3e0a:	fc 01       	movw	r30, r24
    3e0c:	86 81       	ldd	r24, Z+6	; 0x06
    3e0e:	97 81       	ldd	r25, Z+7	; 0x07
    3e10:	9b 83       	std	Y+3, r25	; 0x03
    3e12:	8a 83       	std	Y+2, r24	; 0x02
    3e14:	8a 81       	ldd	r24, Y+2	; 0x02
    3e16:	9b 81       	ldd	r25, Y+3	; 0x03
    3e18:	02 96       	adiw	r24, 0x02	; 2
    3e1a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <uxListRemove>
    3e1e:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <uxCurrentNumberOfTasks>
    3e22:	81 50       	subi	r24, 0x01	; 1
    3e24:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <uxCurrentNumberOfTasks>
    3e28:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <uxDeletedTasksWaitingCleanUp>
    3e2c:	81 50       	subi	r24, 0x01	; 1
    3e2e:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <uxDeletedTasksWaitingCleanUp>
    3e32:	0f 90       	pop	r0
    3e34:	0f be       	out	0x3f, r0	; 63
    3e36:	8a 81       	ldd	r24, Y+2	; 0x02
    3e38:	9b 81       	ldd	r25, Y+3	; 0x03
    3e3a:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <prvDeleteTCB>
    3e3e:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <uxDeletedTasksWaitingCleanUp>
    3e42:	88 23       	and	r24, r24
    3e44:	69 f6       	brne	.-102    	; 0x3de0 <prvCheckTasksWaitingTermination+0xe>
    3e46:	00 00       	nop
    3e48:	0f 90       	pop	r0
    3e4a:	0f 90       	pop	r0
    3e4c:	0f 90       	pop	r0
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	08 95       	ret

00003e54 <prvDeleteTCB>:
    3e54:	cf 93       	push	r28
    3e56:	df 93       	push	r29
    3e58:	00 d0       	rcall	.+0      	; 0x3e5a <prvDeleteTCB+0x6>
    3e5a:	cd b7       	in	r28, 0x3d	; 61
    3e5c:	de b7       	in	r29, 0x3e	; 62
    3e5e:	9a 83       	std	Y+2, r25	; 0x02
    3e60:	89 83       	std	Y+1, r24	; 0x01
    3e62:	89 81       	ldd	r24, Y+1	; 0x01
    3e64:	9a 81       	ldd	r25, Y+2	; 0x02
    3e66:	fc 01       	movw	r30, r24
    3e68:	87 89       	ldd	r24, Z+23	; 0x17
    3e6a:	90 8d       	ldd	r25, Z+24	; 0x18
    3e6c:	0e 94 4e 11 	call	0x229c	; 0x229c <vPortFree>
    3e70:	89 81       	ldd	r24, Y+1	; 0x01
    3e72:	9a 81       	ldd	r25, Y+2	; 0x02
    3e74:	0e 94 4e 11 	call	0x229c	; 0x229c <vPortFree>
    3e78:	00 00       	nop
    3e7a:	0f 90       	pop	r0
    3e7c:	0f 90       	pop	r0
    3e7e:	df 91       	pop	r29
    3e80:	cf 91       	pop	r28
    3e82:	08 95       	ret

00003e84 <prvResetNextTaskUnblockTime>:
    3e84:	cf 93       	push	r28
    3e86:	df 93       	push	r29
    3e88:	00 d0       	rcall	.+0      	; 0x3e8a <prvResetNextTaskUnblockTime+0x6>
    3e8a:	cd b7       	in	r28, 0x3d	; 61
    3e8c:	de b7       	in	r29, 0x3e	; 62
    3e8e:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <pxDelayedTaskList>
    3e92:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <pxDelayedTaskList+0x1>
    3e96:	fc 01       	movw	r30, r24
    3e98:	80 81       	ld	r24, Z
    3e9a:	88 23       	and	r24, r24
    3e9c:	39 f4       	brne	.+14     	; 0x3eac <prvResetNextTaskUnblockTime+0x28>
    3e9e:	8f ef       	ldi	r24, 0xFF	; 255
    3ea0:	9f ef       	ldi	r25, 0xFF	; 255
    3ea2:	90 93 aa 07 	sts	0x07AA, r25	; 0x8007aa <xNextTaskUnblockTime+0x1>
    3ea6:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <xNextTaskUnblockTime>
    3eaa:	15 c0       	rjmp	.+42     	; 0x3ed6 <prvResetNextTaskUnblockTime+0x52>
    3eac:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <pxDelayedTaskList>
    3eb0:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <pxDelayedTaskList+0x1>
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	85 81       	ldd	r24, Z+5	; 0x05
    3eb8:	96 81       	ldd	r25, Z+6	; 0x06
    3eba:	fc 01       	movw	r30, r24
    3ebc:	86 81       	ldd	r24, Z+6	; 0x06
    3ebe:	97 81       	ldd	r25, Z+7	; 0x07
    3ec0:	9a 83       	std	Y+2, r25	; 0x02
    3ec2:	89 83       	std	Y+1, r24	; 0x01
    3ec4:	89 81       	ldd	r24, Y+1	; 0x01
    3ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec8:	fc 01       	movw	r30, r24
    3eca:	82 81       	ldd	r24, Z+2	; 0x02
    3ecc:	93 81       	ldd	r25, Z+3	; 0x03
    3ece:	90 93 aa 07 	sts	0x07AA, r25	; 0x8007aa <xNextTaskUnblockTime+0x1>
    3ed2:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <xNextTaskUnblockTime>
    3ed6:	00 00       	nop
    3ed8:	0f 90       	pop	r0
    3eda:	0f 90       	pop	r0
    3edc:	df 91       	pop	r29
    3ede:	cf 91       	pop	r28
    3ee0:	08 95       	ret

00003ee2 <vTaskPriorityInherit>:
    3ee2:	cf 93       	push	r28
    3ee4:	df 93       	push	r29
    3ee6:	00 d0       	rcall	.+0      	; 0x3ee8 <vTaskPriorityInherit+0x6>
    3ee8:	00 d0       	rcall	.+0      	; 0x3eea <vTaskPriorityInherit+0x8>
    3eea:	cd b7       	in	r28, 0x3d	; 61
    3eec:	de b7       	in	r29, 0x3e	; 62
    3eee:	9c 83       	std	Y+4, r25	; 0x04
    3ef0:	8b 83       	std	Y+3, r24	; 0x03
    3ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ef6:	9a 83       	std	Y+2, r25	; 0x02
    3ef8:	89 83       	std	Y+1, r24	; 0x01
    3efa:	8b 81       	ldd	r24, Y+3	; 0x03
    3efc:	9c 81       	ldd	r25, Y+4	; 0x04
    3efe:	89 2b       	or	r24, r25
    3f00:	09 f4       	brne	.+2      	; 0x3f04 <vTaskPriorityInherit+0x22>
    3f02:	7f c0       	rjmp	.+254    	; 0x4002 <vTaskPriorityInherit+0x120>
    3f04:	89 81       	ldd	r24, Y+1	; 0x01
    3f06:	9a 81       	ldd	r25, Y+2	; 0x02
    3f08:	fc 01       	movw	r30, r24
    3f0a:	26 89       	ldd	r18, Z+22	; 0x16
    3f0c:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    3f10:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    3f14:	fc 01       	movw	r30, r24
    3f16:	86 89       	ldd	r24, Z+22	; 0x16
    3f18:	28 17       	cp	r18, r24
    3f1a:	08 f0       	brcs	.+2      	; 0x3f1e <vTaskPriorityInherit+0x3c>
    3f1c:	72 c0       	rjmp	.+228    	; 0x4002 <vTaskPriorityInherit+0x120>
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    3f20:	9a 81       	ldd	r25, Y+2	; 0x02
    3f22:	fc 01       	movw	r30, r24
    3f24:	84 85       	ldd	r24, Z+12	; 0x0c
    3f26:	95 85       	ldd	r25, Z+13	; 0x0d
    3f28:	99 23       	and	r25, r25
    3f2a:	8c f0       	brlt	.+34     	; 0x3f4e <vTaskPriorityInherit+0x6c>
    3f2c:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    3f30:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    3f34:	fc 01       	movw	r30, r24
    3f36:	86 89       	ldd	r24, Z+22	; 0x16
    3f38:	88 2f       	mov	r24, r24
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	24 e0       	ldi	r18, 0x04	; 4
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	28 1b       	sub	r18, r24
    3f42:	39 0b       	sbc	r19, r25
    3f44:	89 81       	ldd	r24, Y+1	; 0x01
    3f46:	9a 81       	ldd	r25, Y+2	; 0x02
    3f48:	fc 01       	movw	r30, r24
    3f4a:	35 87       	std	Z+13, r19	; 0x0d
    3f4c:	24 87       	std	Z+12, r18	; 0x0c
    3f4e:	89 81       	ldd	r24, Y+1	; 0x01
    3f50:	9a 81       	ldd	r25, Y+2	; 0x02
    3f52:	fc 01       	movw	r30, r24
    3f54:	42 85       	ldd	r20, Z+10	; 0x0a
    3f56:	53 85       	ldd	r21, Z+11	; 0x0b
    3f58:	89 81       	ldd	r24, Y+1	; 0x01
    3f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f5c:	fc 01       	movw	r30, r24
    3f5e:	86 89       	ldd	r24, Z+22	; 0x16
    3f60:	28 2f       	mov	r18, r24
    3f62:	30 e0       	ldi	r19, 0x00	; 0
    3f64:	c9 01       	movw	r24, r18
    3f66:	88 0f       	add	r24, r24
    3f68:	99 1f       	adc	r25, r25
    3f6a:	88 0f       	add	r24, r24
    3f6c:	99 1f       	adc	r25, r25
    3f6e:	88 0f       	add	r24, r24
    3f70:	99 1f       	adc	r25, r25
    3f72:	82 0f       	add	r24, r18
    3f74:	93 1f       	adc	r25, r19
    3f76:	8d 5a       	subi	r24, 0xAD	; 173
    3f78:	98 4f       	sbci	r25, 0xF8	; 248
    3f7a:	48 17       	cp	r20, r24
    3f7c:	59 07       	cpc	r21, r25
    3f7e:	b9 f5       	brne	.+110    	; 0x3fee <vTaskPriorityInherit+0x10c>
    3f80:	89 81       	ldd	r24, Y+1	; 0x01
    3f82:	9a 81       	ldd	r25, Y+2	; 0x02
    3f84:	02 96       	adiw	r24, 0x02	; 2
    3f86:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <uxListRemove>
    3f8a:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    3f8e:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    3f92:	fc 01       	movw	r30, r24
    3f94:	26 89       	ldd	r18, Z+22	; 0x16
    3f96:	89 81       	ldd	r24, Y+1	; 0x01
    3f98:	9a 81       	ldd	r25, Y+2	; 0x02
    3f9a:	fc 01       	movw	r30, r24
    3f9c:	26 8b       	std	Z+22, r18	; 0x16
    3f9e:	89 81       	ldd	r24, Y+1	; 0x01
    3fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa2:	fc 01       	movw	r30, r24
    3fa4:	96 89       	ldd	r25, Z+22	; 0x16
    3fa6:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <uxTopReadyPriority>
    3faa:	89 17       	cp	r24, r25
    3fac:	30 f4       	brcc	.+12     	; 0x3fba <vTaskPriorityInherit+0xd8>
    3fae:	89 81       	ldd	r24, Y+1	; 0x01
    3fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb2:	fc 01       	movw	r30, r24
    3fb4:	86 89       	ldd	r24, Z+22	; 0x16
    3fb6:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <uxTopReadyPriority>
    3fba:	89 81       	ldd	r24, Y+1	; 0x01
    3fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3fbe:	ac 01       	movw	r20, r24
    3fc0:	4e 5f       	subi	r20, 0xFE	; 254
    3fc2:	5f 4f       	sbci	r21, 0xFF	; 255
    3fc4:	89 81       	ldd	r24, Y+1	; 0x01
    3fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc8:	fc 01       	movw	r30, r24
    3fca:	86 89       	ldd	r24, Z+22	; 0x16
    3fcc:	28 2f       	mov	r18, r24
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	c9 01       	movw	r24, r18
    3fd2:	88 0f       	add	r24, r24
    3fd4:	99 1f       	adc	r25, r25
    3fd6:	88 0f       	add	r24, r24
    3fd8:	99 1f       	adc	r25, r25
    3fda:	88 0f       	add	r24, r24
    3fdc:	99 1f       	adc	r25, r25
    3fde:	82 0f       	add	r24, r18
    3fe0:	93 1f       	adc	r25, r19
    3fe2:	8d 5a       	subi	r24, 0xAD	; 173
    3fe4:	98 4f       	sbci	r25, 0xF8	; 248
    3fe6:	ba 01       	movw	r22, r20
    3fe8:	0e 94 df 0c 	call	0x19be	; 0x19be <vListInsertEnd>
    3fec:	0a c0       	rjmp	.+20     	; 0x4002 <vTaskPriorityInherit+0x120>
    3fee:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    3ff2:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    3ff6:	fc 01       	movw	r30, r24
    3ff8:	26 89       	ldd	r18, Z+22	; 0x16
    3ffa:	89 81       	ldd	r24, Y+1	; 0x01
    3ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ffe:	fc 01       	movw	r30, r24
    4000:	26 8b       	std	Z+22, r18	; 0x16
    4002:	00 00       	nop
    4004:	0f 90       	pop	r0
    4006:	0f 90       	pop	r0
    4008:	0f 90       	pop	r0
    400a:	0f 90       	pop	r0
    400c:	df 91       	pop	r29
    400e:	cf 91       	pop	r28
    4010:	08 95       	ret

00004012 <xTaskPriorityDisinherit>:
    4012:	cf 93       	push	r28
    4014:	df 93       	push	r29
    4016:	00 d0       	rcall	.+0      	; 0x4018 <xTaskPriorityDisinherit+0x6>
    4018:	00 d0       	rcall	.+0      	; 0x401a <xTaskPriorityDisinherit+0x8>
    401a:	1f 92       	push	r1
    401c:	cd b7       	in	r28, 0x3d	; 61
    401e:	de b7       	in	r29, 0x3e	; 62
    4020:	9d 83       	std	Y+5, r25	; 0x05
    4022:	8c 83       	std	Y+4, r24	; 0x04
    4024:	8c 81       	ldd	r24, Y+4	; 0x04
    4026:	9d 81       	ldd	r25, Y+5	; 0x05
    4028:	9b 83       	std	Y+3, r25	; 0x03
    402a:	8a 83       	std	Y+2, r24	; 0x02
    402c:	19 82       	std	Y+1, r1	; 0x01
    402e:	8c 81       	ldd	r24, Y+4	; 0x04
    4030:	9d 81       	ldd	r25, Y+5	; 0x05
    4032:	89 2b       	or	r24, r25
    4034:	09 f4       	brne	.+2      	; 0x4038 <xTaskPriorityDisinherit+0x26>
    4036:	61 c0       	rjmp	.+194    	; 0x40fa <xTaskPriorityDisinherit+0xe8>
    4038:	8a 81       	ldd	r24, Y+2	; 0x02
    403a:	9b 81       	ldd	r25, Y+3	; 0x03
    403c:	fc 01       	movw	r30, r24
    403e:	84 a1       	ldd	r24, Z+36	; 0x24
    4040:	2f ef       	ldi	r18, 0xFF	; 255
    4042:	28 0f       	add	r18, r24
    4044:	8a 81       	ldd	r24, Y+2	; 0x02
    4046:	9b 81       	ldd	r25, Y+3	; 0x03
    4048:	fc 01       	movw	r30, r24
    404a:	24 a3       	std	Z+36, r18	; 0x24
    404c:	8a 81       	ldd	r24, Y+2	; 0x02
    404e:	9b 81       	ldd	r25, Y+3	; 0x03
    4050:	fc 01       	movw	r30, r24
    4052:	26 89       	ldd	r18, Z+22	; 0x16
    4054:	8a 81       	ldd	r24, Y+2	; 0x02
    4056:	9b 81       	ldd	r25, Y+3	; 0x03
    4058:	fc 01       	movw	r30, r24
    405a:	83 a1       	ldd	r24, Z+35	; 0x23
    405c:	28 17       	cp	r18, r24
    405e:	09 f4       	brne	.+2      	; 0x4062 <xTaskPriorityDisinherit+0x50>
    4060:	4c c0       	rjmp	.+152    	; 0x40fa <xTaskPriorityDisinherit+0xe8>
    4062:	8a 81       	ldd	r24, Y+2	; 0x02
    4064:	9b 81       	ldd	r25, Y+3	; 0x03
    4066:	fc 01       	movw	r30, r24
    4068:	84 a1       	ldd	r24, Z+36	; 0x24
    406a:	88 23       	and	r24, r24
    406c:	09 f0       	breq	.+2      	; 0x4070 <xTaskPriorityDisinherit+0x5e>
    406e:	45 c0       	rjmp	.+138    	; 0x40fa <xTaskPriorityDisinherit+0xe8>
    4070:	8a 81       	ldd	r24, Y+2	; 0x02
    4072:	9b 81       	ldd	r25, Y+3	; 0x03
    4074:	02 96       	adiw	r24, 0x02	; 2
    4076:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <uxListRemove>
    407a:	8a 81       	ldd	r24, Y+2	; 0x02
    407c:	9b 81       	ldd	r25, Y+3	; 0x03
    407e:	fc 01       	movw	r30, r24
    4080:	23 a1       	ldd	r18, Z+35	; 0x23
    4082:	8a 81       	ldd	r24, Y+2	; 0x02
    4084:	9b 81       	ldd	r25, Y+3	; 0x03
    4086:	fc 01       	movw	r30, r24
    4088:	26 8b       	std	Z+22, r18	; 0x16
    408a:	8a 81       	ldd	r24, Y+2	; 0x02
    408c:	9b 81       	ldd	r25, Y+3	; 0x03
    408e:	fc 01       	movw	r30, r24
    4090:	86 89       	ldd	r24, Z+22	; 0x16
    4092:	88 2f       	mov	r24, r24
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	24 e0       	ldi	r18, 0x04	; 4
    4098:	30 e0       	ldi	r19, 0x00	; 0
    409a:	28 1b       	sub	r18, r24
    409c:	39 0b       	sbc	r19, r25
    409e:	8a 81       	ldd	r24, Y+2	; 0x02
    40a0:	9b 81       	ldd	r25, Y+3	; 0x03
    40a2:	fc 01       	movw	r30, r24
    40a4:	35 87       	std	Z+13, r19	; 0x0d
    40a6:	24 87       	std	Z+12, r18	; 0x0c
    40a8:	8a 81       	ldd	r24, Y+2	; 0x02
    40aa:	9b 81       	ldd	r25, Y+3	; 0x03
    40ac:	fc 01       	movw	r30, r24
    40ae:	96 89       	ldd	r25, Z+22	; 0x16
    40b0:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <uxTopReadyPriority>
    40b4:	89 17       	cp	r24, r25
    40b6:	30 f4       	brcc	.+12     	; 0x40c4 <xTaskPriorityDisinherit+0xb2>
    40b8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ba:	9b 81       	ldd	r25, Y+3	; 0x03
    40bc:	fc 01       	movw	r30, r24
    40be:	86 89       	ldd	r24, Z+22	; 0x16
    40c0:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <uxTopReadyPriority>
    40c4:	8a 81       	ldd	r24, Y+2	; 0x02
    40c6:	9b 81       	ldd	r25, Y+3	; 0x03
    40c8:	ac 01       	movw	r20, r24
    40ca:	4e 5f       	subi	r20, 0xFE	; 254
    40cc:	5f 4f       	sbci	r21, 0xFF	; 255
    40ce:	8a 81       	ldd	r24, Y+2	; 0x02
    40d0:	9b 81       	ldd	r25, Y+3	; 0x03
    40d2:	fc 01       	movw	r30, r24
    40d4:	86 89       	ldd	r24, Z+22	; 0x16
    40d6:	28 2f       	mov	r18, r24
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	c9 01       	movw	r24, r18
    40dc:	88 0f       	add	r24, r24
    40de:	99 1f       	adc	r25, r25
    40e0:	88 0f       	add	r24, r24
    40e2:	99 1f       	adc	r25, r25
    40e4:	88 0f       	add	r24, r24
    40e6:	99 1f       	adc	r25, r25
    40e8:	82 0f       	add	r24, r18
    40ea:	93 1f       	adc	r25, r19
    40ec:	8d 5a       	subi	r24, 0xAD	; 173
    40ee:	98 4f       	sbci	r25, 0xF8	; 248
    40f0:	ba 01       	movw	r22, r20
    40f2:	0e 94 df 0c 	call	0x19be	; 0x19be <vListInsertEnd>
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	89 83       	std	Y+1, r24	; 0x01
    40fa:	89 81       	ldd	r24, Y+1	; 0x01
    40fc:	0f 90       	pop	r0
    40fe:	0f 90       	pop	r0
    4100:	0f 90       	pop	r0
    4102:	0f 90       	pop	r0
    4104:	0f 90       	pop	r0
    4106:	df 91       	pop	r29
    4108:	cf 91       	pop	r28
    410a:	08 95       	ret

0000410c <pvTaskIncrementMutexHeldCount>:
    410c:	cf 93       	push	r28
    410e:	df 93       	push	r29
    4110:	cd b7       	in	r28, 0x3d	; 61
    4112:	de b7       	in	r29, 0x3e	; 62
    4114:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    4118:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    411c:	89 2b       	or	r24, r25
    411e:	49 f0       	breq	.+18     	; 0x4132 <pvTaskIncrementMutexHeldCount+0x26>
    4120:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    4124:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    4128:	fc 01       	movw	r30, r24
    412a:	24 a1       	ldd	r18, Z+36	; 0x24
    412c:	2f 5f       	subi	r18, 0xFF	; 255
    412e:	fc 01       	movw	r30, r24
    4130:	24 a3       	std	Z+36, r18	; 0x24
    4132:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    4136:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    413a:	df 91       	pop	r29
    413c:	cf 91       	pop	r28
    413e:	08 95       	ret

00004140 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    4140:	cf 93       	push	r28
    4142:	df 93       	push	r29
    4144:	cd b7       	in	r28, 0x3d	; 61
    4146:	de b7       	in	r29, 0x3e	; 62
    4148:	27 97       	sbiw	r28, 0x07	; 7
    414a:	0f b6       	in	r0, 0x3f	; 63
    414c:	f8 94       	cli
    414e:	de bf       	out	0x3e, r29	; 62
    4150:	0f be       	out	0x3f, r0	; 63
    4152:	cd bf       	out	0x3d, r28	; 61
    4154:	9e 83       	std	Y+6, r25	; 0x06
    4156:	8d 83       	std	Y+5, r24	; 0x05
    4158:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    415a:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <xTickCount>
    415e:	90 91 a2 07 	lds	r25, 0x07A2	; 0x8007a2 <xTickCount+0x1>
    4162:	9a 83       	std	Y+2, r25	; 0x02
    4164:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4166:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    416a:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    416e:	02 96       	adiw	r24, 0x02	; 2
    4170:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    4174:	29 81       	ldd	r18, Y+1	; 0x01
    4176:	3a 81       	ldd	r19, Y+2	; 0x02
    4178:	8d 81       	ldd	r24, Y+5	; 0x05
    417a:	9e 81       	ldd	r25, Y+6	; 0x06
    417c:	82 0f       	add	r24, r18
    417e:	93 1f       	adc	r25, r19
    4180:	9c 83       	std	Y+4, r25	; 0x04
    4182:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    4184:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    4188:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    418c:	2b 81       	ldd	r18, Y+3	; 0x03
    418e:	3c 81       	ldd	r19, Y+4	; 0x04
    4190:	fc 01       	movw	r30, r24
    4192:	33 83       	std	Z+3, r19	; 0x03
    4194:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    4196:	2b 81       	ldd	r18, Y+3	; 0x03
    4198:	3c 81       	ldd	r19, Y+4	; 0x04
    419a:	89 81       	ldd	r24, Y+1	; 0x01
    419c:	9a 81       	ldd	r25, Y+2	; 0x02
    419e:	28 17       	cp	r18, r24
    41a0:	39 07       	cpc	r19, r25
    41a2:	78 f4       	brcc	.+30     	; 0x41c2 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    41a4:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    41a8:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    41ac:	9c 01       	movw	r18, r24
    41ae:	2e 5f       	subi	r18, 0xFE	; 254
    41b0:	3f 4f       	sbci	r19, 0xFF	; 255
    41b2:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <pxOverflowDelayedTaskList>
    41b6:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <pxOverflowDelayedTaskList+0x1>
    41ba:	b9 01       	movw	r22, r18
    41bc:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    41c0:	1d c0       	rjmp	.+58     	; 0x41fc <prvAddCurrentTaskToDelayedList+0xbc>
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    41c2:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxCurrentTCB>
    41c6:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <pxCurrentTCB+0x1>
    41ca:	9c 01       	movw	r18, r24
    41cc:	2e 5f       	subi	r18, 0xFE	; 254
    41ce:	3f 4f       	sbci	r19, 0xFF	; 255
    41d0:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <pxDelayedTaskList>
    41d4:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <pxDelayedTaskList+0x1>
    41d8:	b9 01       	movw	r22, r18
    41da:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    41de:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xNextTaskUnblockTime>
    41e2:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xNextTaskUnblockTime+0x1>
    41e6:	2b 81       	ldd	r18, Y+3	; 0x03
    41e8:	3c 81       	ldd	r19, Y+4	; 0x04
    41ea:	28 17       	cp	r18, r24
    41ec:	39 07       	cpc	r19, r25
    41ee:	30 f4       	brcc	.+12     	; 0x41fc <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    41f0:	8b 81       	ldd	r24, Y+3	; 0x03
    41f2:	9c 81       	ldd	r25, Y+4	; 0x04
    41f4:	90 93 aa 07 	sts	0x07AA, r25	; 0x8007aa <xNextTaskUnblockTime+0x1>
    41f8:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    41fc:	00 00       	nop
    41fe:	27 96       	adiw	r28, 0x07	; 7
    4200:	0f b6       	in	r0, 0x3f	; 63
    4202:	f8 94       	cli
    4204:	de bf       	out	0x3e, r29	; 62
    4206:	0f be       	out	0x3f, r0	; 63
    4208:	cd bf       	out	0x3d, r28	; 61
    420a:	df 91       	pop	r29
    420c:	cf 91       	pop	r28
    420e:	08 95       	ret

00004210 <__subsf3>:
    4210:	50 58       	subi	r21, 0x80	; 128

00004212 <__addsf3>:
    4212:	bb 27       	eor	r27, r27
    4214:	aa 27       	eor	r26, r26
    4216:	0e 94 20 21 	call	0x4240	; 0x4240 <__addsf3x>
    421a:	0c 94 ff 21 	jmp	0x43fe	; 0x43fe <__fp_round>
    421e:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__fp_pscA>
    4222:	38 f0       	brcs	.+14     	; 0x4232 <__addsf3+0x20>
    4224:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <__fp_pscB>
    4228:	20 f0       	brcs	.+8      	; 0x4232 <__addsf3+0x20>
    422a:	39 f4       	brne	.+14     	; 0x423a <__addsf3+0x28>
    422c:	9f 3f       	cpi	r25, 0xFF	; 255
    422e:	19 f4       	brne	.+6      	; 0x4236 <__addsf3+0x24>
    4230:	26 f4       	brtc	.+8      	; 0x423a <__addsf3+0x28>
    4232:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__fp_nan>
    4236:	0e f4       	brtc	.+2      	; 0x423a <__addsf3+0x28>
    4238:	e0 95       	com	r30
    423a:	e7 fb       	bst	r30, 7
    423c:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <__fp_inf>

00004240 <__addsf3x>:
    4240:	e9 2f       	mov	r30, r25
    4242:	0e 94 10 22 	call	0x4420	; 0x4420 <__fp_split3>
    4246:	58 f3       	brcs	.-42     	; 0x421e <__addsf3+0xc>
    4248:	ba 17       	cp	r27, r26
    424a:	62 07       	cpc	r22, r18
    424c:	73 07       	cpc	r23, r19
    424e:	84 07       	cpc	r24, r20
    4250:	95 07       	cpc	r25, r21
    4252:	20 f0       	brcs	.+8      	; 0x425c <__addsf3x+0x1c>
    4254:	79 f4       	brne	.+30     	; 0x4274 <__addsf3x+0x34>
    4256:	a6 f5       	brtc	.+104    	; 0x42c0 <__addsf3x+0x80>
    4258:	0c 94 32 22 	jmp	0x4464	; 0x4464 <__fp_zero>
    425c:	0e f4       	brtc	.+2      	; 0x4260 <__addsf3x+0x20>
    425e:	e0 95       	com	r30
    4260:	0b 2e       	mov	r0, r27
    4262:	ba 2f       	mov	r27, r26
    4264:	a0 2d       	mov	r26, r0
    4266:	0b 01       	movw	r0, r22
    4268:	b9 01       	movw	r22, r18
    426a:	90 01       	movw	r18, r0
    426c:	0c 01       	movw	r0, r24
    426e:	ca 01       	movw	r24, r20
    4270:	a0 01       	movw	r20, r0
    4272:	11 24       	eor	r1, r1
    4274:	ff 27       	eor	r31, r31
    4276:	59 1b       	sub	r21, r25
    4278:	99 f0       	breq	.+38     	; 0x42a0 <__addsf3x+0x60>
    427a:	59 3f       	cpi	r21, 0xF9	; 249
    427c:	50 f4       	brcc	.+20     	; 0x4292 <__addsf3x+0x52>
    427e:	50 3e       	cpi	r21, 0xE0	; 224
    4280:	68 f1       	brcs	.+90     	; 0x42dc <__addsf3x+0x9c>
    4282:	1a 16       	cp	r1, r26
    4284:	f0 40       	sbci	r31, 0x00	; 0
    4286:	a2 2f       	mov	r26, r18
    4288:	23 2f       	mov	r18, r19
    428a:	34 2f       	mov	r19, r20
    428c:	44 27       	eor	r20, r20
    428e:	58 5f       	subi	r21, 0xF8	; 248
    4290:	f3 cf       	rjmp	.-26     	; 0x4278 <__addsf3x+0x38>
    4292:	46 95       	lsr	r20
    4294:	37 95       	ror	r19
    4296:	27 95       	ror	r18
    4298:	a7 95       	ror	r26
    429a:	f0 40       	sbci	r31, 0x00	; 0
    429c:	53 95       	inc	r21
    429e:	c9 f7       	brne	.-14     	; 0x4292 <__addsf3x+0x52>
    42a0:	7e f4       	brtc	.+30     	; 0x42c0 <__addsf3x+0x80>
    42a2:	1f 16       	cp	r1, r31
    42a4:	ba 0b       	sbc	r27, r26
    42a6:	62 0b       	sbc	r22, r18
    42a8:	73 0b       	sbc	r23, r19
    42aa:	84 0b       	sbc	r24, r20
    42ac:	ba f0       	brmi	.+46     	; 0x42dc <__addsf3x+0x9c>
    42ae:	91 50       	subi	r25, 0x01	; 1
    42b0:	a1 f0       	breq	.+40     	; 0x42da <__addsf3x+0x9a>
    42b2:	ff 0f       	add	r31, r31
    42b4:	bb 1f       	adc	r27, r27
    42b6:	66 1f       	adc	r22, r22
    42b8:	77 1f       	adc	r23, r23
    42ba:	88 1f       	adc	r24, r24
    42bc:	c2 f7       	brpl	.-16     	; 0x42ae <__addsf3x+0x6e>
    42be:	0e c0       	rjmp	.+28     	; 0x42dc <__addsf3x+0x9c>
    42c0:	ba 0f       	add	r27, r26
    42c2:	62 1f       	adc	r22, r18
    42c4:	73 1f       	adc	r23, r19
    42c6:	84 1f       	adc	r24, r20
    42c8:	48 f4       	brcc	.+18     	; 0x42dc <__addsf3x+0x9c>
    42ca:	87 95       	ror	r24
    42cc:	77 95       	ror	r23
    42ce:	67 95       	ror	r22
    42d0:	b7 95       	ror	r27
    42d2:	f7 95       	ror	r31
    42d4:	9e 3f       	cpi	r25, 0xFE	; 254
    42d6:	08 f0       	brcs	.+2      	; 0x42da <__addsf3x+0x9a>
    42d8:	b0 cf       	rjmp	.-160    	; 0x423a <__addsf3+0x28>
    42da:	93 95       	inc	r25
    42dc:	88 0f       	add	r24, r24
    42de:	08 f0       	brcs	.+2      	; 0x42e2 <__addsf3x+0xa2>
    42e0:	99 27       	eor	r25, r25
    42e2:	ee 0f       	add	r30, r30
    42e4:	97 95       	ror	r25
    42e6:	87 95       	ror	r24
    42e8:	08 95       	ret

000042ea <__fixsfsi>:
    42ea:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <__fixunssfsi>
    42ee:	68 94       	set
    42f0:	b1 11       	cpse	r27, r1
    42f2:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__fp_szero>
    42f6:	08 95       	ret

000042f8 <__fixunssfsi>:
    42f8:	0e 94 18 22 	call	0x4430	; 0x4430 <__fp_splitA>
    42fc:	88 f0       	brcs	.+34     	; 0x4320 <__fixunssfsi+0x28>
    42fe:	9f 57       	subi	r25, 0x7F	; 127
    4300:	98 f0       	brcs	.+38     	; 0x4328 <__fixunssfsi+0x30>
    4302:	b9 2f       	mov	r27, r25
    4304:	99 27       	eor	r25, r25
    4306:	b7 51       	subi	r27, 0x17	; 23
    4308:	b0 f0       	brcs	.+44     	; 0x4336 <__fixunssfsi+0x3e>
    430a:	e1 f0       	breq	.+56     	; 0x4344 <__fixunssfsi+0x4c>
    430c:	66 0f       	add	r22, r22
    430e:	77 1f       	adc	r23, r23
    4310:	88 1f       	adc	r24, r24
    4312:	99 1f       	adc	r25, r25
    4314:	1a f0       	brmi	.+6      	; 0x431c <__fixunssfsi+0x24>
    4316:	ba 95       	dec	r27
    4318:	c9 f7       	brne	.-14     	; 0x430c <__fixunssfsi+0x14>
    431a:	14 c0       	rjmp	.+40     	; 0x4344 <__fixunssfsi+0x4c>
    431c:	b1 30       	cpi	r27, 0x01	; 1
    431e:	91 f0       	breq	.+36     	; 0x4344 <__fixunssfsi+0x4c>
    4320:	0e 94 32 22 	call	0x4464	; 0x4464 <__fp_zero>
    4324:	b1 e0       	ldi	r27, 0x01	; 1
    4326:	08 95       	ret
    4328:	0c 94 32 22 	jmp	0x4464	; 0x4464 <__fp_zero>
    432c:	67 2f       	mov	r22, r23
    432e:	78 2f       	mov	r23, r24
    4330:	88 27       	eor	r24, r24
    4332:	b8 5f       	subi	r27, 0xF8	; 248
    4334:	39 f0       	breq	.+14     	; 0x4344 <__fixunssfsi+0x4c>
    4336:	b9 3f       	cpi	r27, 0xF9	; 249
    4338:	cc f3       	brlt	.-14     	; 0x432c <__fixunssfsi+0x34>
    433a:	86 95       	lsr	r24
    433c:	77 95       	ror	r23
    433e:	67 95       	ror	r22
    4340:	b3 95       	inc	r27
    4342:	d9 f7       	brne	.-10     	; 0x433a <__fixunssfsi+0x42>
    4344:	3e f4       	brtc	.+14     	; 0x4354 <__fixunssfsi+0x5c>
    4346:	90 95       	com	r25
    4348:	80 95       	com	r24
    434a:	70 95       	com	r23
    434c:	61 95       	neg	r22
    434e:	7f 4f       	sbci	r23, 0xFF	; 255
    4350:	8f 4f       	sbci	r24, 0xFF	; 255
    4352:	9f 4f       	sbci	r25, 0xFF	; 255
    4354:	08 95       	ret

00004356 <__floatunsisf>:
    4356:	e8 94       	clt
    4358:	09 c0       	rjmp	.+18     	; 0x436c <__floatsisf+0x12>

0000435a <__floatsisf>:
    435a:	97 fb       	bst	r25, 7
    435c:	3e f4       	brtc	.+14     	; 0x436c <__floatsisf+0x12>
    435e:	90 95       	com	r25
    4360:	80 95       	com	r24
    4362:	70 95       	com	r23
    4364:	61 95       	neg	r22
    4366:	7f 4f       	sbci	r23, 0xFF	; 255
    4368:	8f 4f       	sbci	r24, 0xFF	; 255
    436a:	9f 4f       	sbci	r25, 0xFF	; 255
    436c:	99 23       	and	r25, r25
    436e:	a9 f0       	breq	.+42     	; 0x439a <__floatsisf+0x40>
    4370:	f9 2f       	mov	r31, r25
    4372:	96 e9       	ldi	r25, 0x96	; 150
    4374:	bb 27       	eor	r27, r27
    4376:	93 95       	inc	r25
    4378:	f6 95       	lsr	r31
    437a:	87 95       	ror	r24
    437c:	77 95       	ror	r23
    437e:	67 95       	ror	r22
    4380:	b7 95       	ror	r27
    4382:	f1 11       	cpse	r31, r1
    4384:	f8 cf       	rjmp	.-16     	; 0x4376 <__floatsisf+0x1c>
    4386:	fa f4       	brpl	.+62     	; 0x43c6 <__floatsisf+0x6c>
    4388:	bb 0f       	add	r27, r27
    438a:	11 f4       	brne	.+4      	; 0x4390 <__floatsisf+0x36>
    438c:	60 ff       	sbrs	r22, 0
    438e:	1b c0       	rjmp	.+54     	; 0x43c6 <__floatsisf+0x6c>
    4390:	6f 5f       	subi	r22, 0xFF	; 255
    4392:	7f 4f       	sbci	r23, 0xFF	; 255
    4394:	8f 4f       	sbci	r24, 0xFF	; 255
    4396:	9f 4f       	sbci	r25, 0xFF	; 255
    4398:	16 c0       	rjmp	.+44     	; 0x43c6 <__floatsisf+0x6c>
    439a:	88 23       	and	r24, r24
    439c:	11 f0       	breq	.+4      	; 0x43a2 <__floatsisf+0x48>
    439e:	96 e9       	ldi	r25, 0x96	; 150
    43a0:	11 c0       	rjmp	.+34     	; 0x43c4 <__floatsisf+0x6a>
    43a2:	77 23       	and	r23, r23
    43a4:	21 f0       	breq	.+8      	; 0x43ae <__floatsisf+0x54>
    43a6:	9e e8       	ldi	r25, 0x8E	; 142
    43a8:	87 2f       	mov	r24, r23
    43aa:	76 2f       	mov	r23, r22
    43ac:	05 c0       	rjmp	.+10     	; 0x43b8 <__floatsisf+0x5e>
    43ae:	66 23       	and	r22, r22
    43b0:	71 f0       	breq	.+28     	; 0x43ce <__floatsisf+0x74>
    43b2:	96 e8       	ldi	r25, 0x86	; 134
    43b4:	86 2f       	mov	r24, r22
    43b6:	70 e0       	ldi	r23, 0x00	; 0
    43b8:	60 e0       	ldi	r22, 0x00	; 0
    43ba:	2a f0       	brmi	.+10     	; 0x43c6 <__floatsisf+0x6c>
    43bc:	9a 95       	dec	r25
    43be:	66 0f       	add	r22, r22
    43c0:	77 1f       	adc	r23, r23
    43c2:	88 1f       	adc	r24, r24
    43c4:	da f7       	brpl	.-10     	; 0x43bc <__floatsisf+0x62>
    43c6:	88 0f       	add	r24, r24
    43c8:	96 95       	lsr	r25
    43ca:	87 95       	ror	r24
    43cc:	97 f9       	bld	r25, 7
    43ce:	08 95       	ret

000043d0 <__fp_inf>:
    43d0:	97 f9       	bld	r25, 7
    43d2:	9f 67       	ori	r25, 0x7F	; 127
    43d4:	80 e8       	ldi	r24, 0x80	; 128
    43d6:	70 e0       	ldi	r23, 0x00	; 0
    43d8:	60 e0       	ldi	r22, 0x00	; 0
    43da:	08 95       	ret

000043dc <__fp_nan>:
    43dc:	9f ef       	ldi	r25, 0xFF	; 255
    43de:	80 ec       	ldi	r24, 0xC0	; 192
    43e0:	08 95       	ret

000043e2 <__fp_pscA>:
    43e2:	00 24       	eor	r0, r0
    43e4:	0a 94       	dec	r0
    43e6:	16 16       	cp	r1, r22
    43e8:	17 06       	cpc	r1, r23
    43ea:	18 06       	cpc	r1, r24
    43ec:	09 06       	cpc	r0, r25
    43ee:	08 95       	ret

000043f0 <__fp_pscB>:
    43f0:	00 24       	eor	r0, r0
    43f2:	0a 94       	dec	r0
    43f4:	12 16       	cp	r1, r18
    43f6:	13 06       	cpc	r1, r19
    43f8:	14 06       	cpc	r1, r20
    43fa:	05 06       	cpc	r0, r21
    43fc:	08 95       	ret

000043fe <__fp_round>:
    43fe:	09 2e       	mov	r0, r25
    4400:	03 94       	inc	r0
    4402:	00 0c       	add	r0, r0
    4404:	11 f4       	brne	.+4      	; 0x440a <__fp_round+0xc>
    4406:	88 23       	and	r24, r24
    4408:	52 f0       	brmi	.+20     	; 0x441e <__fp_round+0x20>
    440a:	bb 0f       	add	r27, r27
    440c:	40 f4       	brcc	.+16     	; 0x441e <__fp_round+0x20>
    440e:	bf 2b       	or	r27, r31
    4410:	11 f4       	brne	.+4      	; 0x4416 <__fp_round+0x18>
    4412:	60 ff       	sbrs	r22, 0
    4414:	04 c0       	rjmp	.+8      	; 0x441e <__fp_round+0x20>
    4416:	6f 5f       	subi	r22, 0xFF	; 255
    4418:	7f 4f       	sbci	r23, 0xFF	; 255
    441a:	8f 4f       	sbci	r24, 0xFF	; 255
    441c:	9f 4f       	sbci	r25, 0xFF	; 255
    441e:	08 95       	ret

00004420 <__fp_split3>:
    4420:	57 fd       	sbrc	r21, 7
    4422:	90 58       	subi	r25, 0x80	; 128
    4424:	44 0f       	add	r20, r20
    4426:	55 1f       	adc	r21, r21
    4428:	59 f0       	breq	.+22     	; 0x4440 <__fp_splitA+0x10>
    442a:	5f 3f       	cpi	r21, 0xFF	; 255
    442c:	71 f0       	breq	.+28     	; 0x444a <__fp_splitA+0x1a>
    442e:	47 95       	ror	r20

00004430 <__fp_splitA>:
    4430:	88 0f       	add	r24, r24
    4432:	97 fb       	bst	r25, 7
    4434:	99 1f       	adc	r25, r25
    4436:	61 f0       	breq	.+24     	; 0x4450 <__fp_splitA+0x20>
    4438:	9f 3f       	cpi	r25, 0xFF	; 255
    443a:	79 f0       	breq	.+30     	; 0x445a <__fp_splitA+0x2a>
    443c:	87 95       	ror	r24
    443e:	08 95       	ret
    4440:	12 16       	cp	r1, r18
    4442:	13 06       	cpc	r1, r19
    4444:	14 06       	cpc	r1, r20
    4446:	55 1f       	adc	r21, r21
    4448:	f2 cf       	rjmp	.-28     	; 0x442e <__fp_split3+0xe>
    444a:	46 95       	lsr	r20
    444c:	f1 df       	rcall	.-30     	; 0x4430 <__fp_splitA>
    444e:	08 c0       	rjmp	.+16     	; 0x4460 <__fp_splitA+0x30>
    4450:	16 16       	cp	r1, r22
    4452:	17 06       	cpc	r1, r23
    4454:	18 06       	cpc	r1, r24
    4456:	99 1f       	adc	r25, r25
    4458:	f1 cf       	rjmp	.-30     	; 0x443c <__fp_splitA+0xc>
    445a:	86 95       	lsr	r24
    445c:	71 05       	cpc	r23, r1
    445e:	61 05       	cpc	r22, r1
    4460:	08 94       	sec
    4462:	08 95       	ret

00004464 <__fp_zero>:
    4464:	e8 94       	clt

00004466 <__fp_szero>:
    4466:	bb 27       	eor	r27, r27
    4468:	66 27       	eor	r22, r22
    446a:	77 27       	eor	r23, r23
    446c:	cb 01       	movw	r24, r22
    446e:	97 f9       	bld	r25, 7
    4470:	08 95       	ret

00004472 <pow>:
    4472:	fa 01       	movw	r30, r20
    4474:	ee 0f       	add	r30, r30
    4476:	ff 1f       	adc	r31, r31
    4478:	30 96       	adiw	r30, 0x00	; 0
    447a:	21 05       	cpc	r18, r1
    447c:	31 05       	cpc	r19, r1
    447e:	a1 f1       	breq	.+104    	; 0x44e8 <pow+0x76>
    4480:	61 15       	cp	r22, r1
    4482:	71 05       	cpc	r23, r1
    4484:	61 f4       	brne	.+24     	; 0x449e <pow+0x2c>
    4486:	80 38       	cpi	r24, 0x80	; 128
    4488:	bf e3       	ldi	r27, 0x3F	; 63
    448a:	9b 07       	cpc	r25, r27
    448c:	49 f1       	breq	.+82     	; 0x44e0 <pow+0x6e>
    448e:	68 94       	set
    4490:	90 38       	cpi	r25, 0x80	; 128
    4492:	81 05       	cpc	r24, r1
    4494:	61 f0       	breq	.+24     	; 0x44ae <pow+0x3c>
    4496:	80 38       	cpi	r24, 0x80	; 128
    4498:	bf ef       	ldi	r27, 0xFF	; 255
    449a:	9b 07       	cpc	r25, r27
    449c:	41 f0       	breq	.+16     	; 0x44ae <pow+0x3c>
    449e:	99 23       	and	r25, r25
    44a0:	4a f5       	brpl	.+82     	; 0x44f4 <pow+0x82>
    44a2:	ff 3f       	cpi	r31, 0xFF	; 255
    44a4:	e1 05       	cpc	r30, r1
    44a6:	31 05       	cpc	r19, r1
    44a8:	21 05       	cpc	r18, r1
    44aa:	19 f1       	breq	.+70     	; 0x44f2 <pow+0x80>
    44ac:	e8 94       	clt
    44ae:	08 94       	sec
    44b0:	e7 95       	ror	r30
    44b2:	d9 01       	movw	r26, r18
    44b4:	aa 23       	and	r26, r26
    44b6:	29 f4       	brne	.+10     	; 0x44c2 <pow+0x50>
    44b8:	ab 2f       	mov	r26, r27
    44ba:	be 2f       	mov	r27, r30
    44bc:	f8 5f       	subi	r31, 0xF8	; 248
    44be:	d0 f3       	brcs	.-12     	; 0x44b4 <pow+0x42>
    44c0:	10 c0       	rjmp	.+32     	; 0x44e2 <pow+0x70>
    44c2:	ff 5f       	subi	r31, 0xFF	; 255
    44c4:	70 f4       	brcc	.+28     	; 0x44e2 <pow+0x70>
    44c6:	a6 95       	lsr	r26
    44c8:	e0 f7       	brcc	.-8      	; 0x44c2 <pow+0x50>
    44ca:	f7 39       	cpi	r31, 0x97	; 151
    44cc:	50 f0       	brcs	.+20     	; 0x44e2 <pow+0x70>
    44ce:	19 f0       	breq	.+6      	; 0x44d6 <pow+0x64>
    44d0:	ff 3a       	cpi	r31, 0xAF	; 175
    44d2:	38 f4       	brcc	.+14     	; 0x44e2 <pow+0x70>
    44d4:	9f 77       	andi	r25, 0x7F	; 127
    44d6:	9f 93       	push	r25
    44d8:	0d d0       	rcall	.+26     	; 0x44f4 <pow+0x82>
    44da:	0f 90       	pop	r0
    44dc:	07 fc       	sbrc	r0, 7
    44de:	90 58       	subi	r25, 0x80	; 128
    44e0:	08 95       	ret
    44e2:	46 f0       	brts	.+16     	; 0x44f4 <pow+0x82>
    44e4:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__fp_nan>
    44e8:	60 e0       	ldi	r22, 0x00	; 0
    44ea:	70 e0       	ldi	r23, 0x00	; 0
    44ec:	80 e8       	ldi	r24, 0x80	; 128
    44ee:	9f e3       	ldi	r25, 0x3F	; 63
    44f0:	08 95       	ret
    44f2:	4f e7       	ldi	r20, 0x7F	; 127
    44f4:	9f 77       	andi	r25, 0x7F	; 127
    44f6:	5f 93       	push	r21
    44f8:	4f 93       	push	r20
    44fa:	3f 93       	push	r19
    44fc:	2f 93       	push	r18
    44fe:	0e 94 34 23 	call	0x4668	; 0x4668 <log>
    4502:	2f 91       	pop	r18
    4504:	3f 91       	pop	r19
    4506:	4f 91       	pop	r20
    4508:	5f 91       	pop	r21
    450a:	0e 94 b0 23 	call	0x4760	; 0x4760 <__mulsf3>
    450e:	0c 94 91 22 	jmp	0x4522	; 0x4522 <exp>
    4512:	29 f4       	brne	.+10     	; 0x451e <pow+0xac>
    4514:	16 f0       	brts	.+4      	; 0x451a <pow+0xa8>
    4516:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <__fp_inf>
    451a:	0c 94 32 22 	jmp	0x4464	; 0x4464 <__fp_zero>
    451e:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__fp_nan>

00004522 <exp>:
    4522:	0e 94 18 22 	call	0x4430	; 0x4430 <__fp_splitA>
    4526:	a8 f3       	brcs	.-22     	; 0x4512 <pow+0xa0>
    4528:	96 38       	cpi	r25, 0x86	; 134
    452a:	a0 f7       	brcc	.-24     	; 0x4514 <pow+0xa2>
    452c:	07 f8       	bld	r0, 7
    452e:	0f 92       	push	r0
    4530:	e8 94       	clt
    4532:	2b e3       	ldi	r18, 0x3B	; 59
    4534:	3a ea       	ldi	r19, 0xAA	; 170
    4536:	48 eb       	ldi	r20, 0xB8	; 184
    4538:	5f e7       	ldi	r21, 0x7F	; 127
    453a:	0e 94 c6 23 	call	0x478c	; 0x478c <__mulsf3_pse>
    453e:	0f 92       	push	r0
    4540:	0f 92       	push	r0
    4542:	0f 92       	push	r0
    4544:	4d b7       	in	r20, 0x3d	; 61
    4546:	5e b7       	in	r21, 0x3e	; 62
    4548:	0f 92       	push	r0
    454a:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <modf>
    454e:	ea ee       	ldi	r30, 0xEA	; 234
    4550:	f0 e0       	ldi	r31, 0x00	; 0
    4552:	0e 94 c3 22 	call	0x4586	; 0x4586 <__fp_powser>
    4556:	4f 91       	pop	r20
    4558:	5f 91       	pop	r21
    455a:	ef 91       	pop	r30
    455c:	ff 91       	pop	r31
    455e:	e5 95       	asr	r30
    4560:	ee 1f       	adc	r30, r30
    4562:	ff 1f       	adc	r31, r31
    4564:	49 f0       	breq	.+18     	; 0x4578 <exp+0x56>
    4566:	fe 57       	subi	r31, 0x7E	; 126
    4568:	e0 68       	ori	r30, 0x80	; 128
    456a:	44 27       	eor	r20, r20
    456c:	ee 0f       	add	r30, r30
    456e:	44 1f       	adc	r20, r20
    4570:	fa 95       	dec	r31
    4572:	e1 f7       	brne	.-8      	; 0x456c <exp+0x4a>
    4574:	41 95       	neg	r20
    4576:	55 0b       	sbc	r21, r21
    4578:	0e 94 f6 22 	call	0x45ec	; 0x45ec <ldexp>
    457c:	0f 90       	pop	r0
    457e:	07 fe       	sbrs	r0, 7
    4580:	0c 94 ea 22 	jmp	0x45d4	; 0x45d4 <inverse>
    4584:	08 95       	ret

00004586 <__fp_powser>:
    4586:	df 93       	push	r29
    4588:	cf 93       	push	r28
    458a:	1f 93       	push	r17
    458c:	0f 93       	push	r16
    458e:	ff 92       	push	r15
    4590:	ef 92       	push	r14
    4592:	df 92       	push	r13
    4594:	7b 01       	movw	r14, r22
    4596:	8c 01       	movw	r16, r24
    4598:	68 94       	set
    459a:	06 c0       	rjmp	.+12     	; 0x45a8 <__fp_powser+0x22>
    459c:	da 2e       	mov	r13, r26
    459e:	ef 01       	movw	r28, r30
    45a0:	0e 94 c3 23 	call	0x4786	; 0x4786 <__mulsf3x>
    45a4:	fe 01       	movw	r30, r28
    45a6:	e8 94       	clt
    45a8:	a5 91       	lpm	r26, Z+
    45aa:	25 91       	lpm	r18, Z+
    45ac:	35 91       	lpm	r19, Z+
    45ae:	45 91       	lpm	r20, Z+
    45b0:	55 91       	lpm	r21, Z+
    45b2:	a6 f3       	brts	.-24     	; 0x459c <__fp_powser+0x16>
    45b4:	ef 01       	movw	r28, r30
    45b6:	0e 94 20 21 	call	0x4240	; 0x4240 <__addsf3x>
    45ba:	fe 01       	movw	r30, r28
    45bc:	97 01       	movw	r18, r14
    45be:	a8 01       	movw	r20, r16
    45c0:	da 94       	dec	r13
    45c2:	69 f7       	brne	.-38     	; 0x459e <__fp_powser+0x18>
    45c4:	df 90       	pop	r13
    45c6:	ef 90       	pop	r14
    45c8:	ff 90       	pop	r15
    45ca:	0f 91       	pop	r16
    45cc:	1f 91       	pop	r17
    45ce:	cf 91       	pop	r28
    45d0:	df 91       	pop	r29
    45d2:	08 95       	ret

000045d4 <inverse>:
    45d4:	9b 01       	movw	r18, r22
    45d6:	ac 01       	movw	r20, r24
    45d8:	60 e0       	ldi	r22, 0x00	; 0
    45da:	70 e0       	ldi	r23, 0x00	; 0
    45dc:	80 e8       	ldi	r24, 0x80	; 128
    45de:	9f e3       	ldi	r25, 0x3F	; 63
    45e0:	0c 94 1d 24 	jmp	0x483a	; 0x483a <__divsf3>
    45e4:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <__fp_inf>
    45e8:	0c 94 8f 24 	jmp	0x491e	; 0x491e <__fp_mpack>

000045ec <ldexp>:
    45ec:	0e 94 18 22 	call	0x4430	; 0x4430 <__fp_splitA>
    45f0:	d8 f3       	brcs	.-10     	; 0x45e8 <inverse+0x14>
    45f2:	99 23       	and	r25, r25
    45f4:	c9 f3       	breq	.-14     	; 0x45e8 <inverse+0x14>
    45f6:	94 0f       	add	r25, r20
    45f8:	51 1d       	adc	r21, r1
    45fa:	a3 f3       	brvs	.-24     	; 0x45e4 <inverse+0x10>
    45fc:	91 50       	subi	r25, 0x01	; 1
    45fe:	50 40       	sbci	r21, 0x00	; 0
    4600:	94 f0       	brlt	.+36     	; 0x4626 <ldexp+0x3a>
    4602:	59 f0       	breq	.+22     	; 0x461a <ldexp+0x2e>
    4604:	88 23       	and	r24, r24
    4606:	32 f0       	brmi	.+12     	; 0x4614 <ldexp+0x28>
    4608:	66 0f       	add	r22, r22
    460a:	77 1f       	adc	r23, r23
    460c:	88 1f       	adc	r24, r24
    460e:	91 50       	subi	r25, 0x01	; 1
    4610:	50 40       	sbci	r21, 0x00	; 0
    4612:	c1 f7       	brne	.-16     	; 0x4604 <ldexp+0x18>
    4614:	9e 3f       	cpi	r25, 0xFE	; 254
    4616:	51 05       	cpc	r21, r1
    4618:	2c f7       	brge	.-54     	; 0x45e4 <inverse+0x10>
    461a:	88 0f       	add	r24, r24
    461c:	91 1d       	adc	r25, r1
    461e:	96 95       	lsr	r25
    4620:	87 95       	ror	r24
    4622:	97 f9       	bld	r25, 7
    4624:	08 95       	ret
    4626:	5f 3f       	cpi	r21, 0xFF	; 255
    4628:	ac f0       	brlt	.+42     	; 0x4654 <ldexp+0x68>
    462a:	98 3e       	cpi	r25, 0xE8	; 232
    462c:	9c f0       	brlt	.+38     	; 0x4654 <ldexp+0x68>
    462e:	bb 27       	eor	r27, r27
    4630:	86 95       	lsr	r24
    4632:	77 95       	ror	r23
    4634:	67 95       	ror	r22
    4636:	b7 95       	ror	r27
    4638:	08 f4       	brcc	.+2      	; 0x463c <ldexp+0x50>
    463a:	b1 60       	ori	r27, 0x01	; 1
    463c:	93 95       	inc	r25
    463e:	c1 f7       	brne	.-16     	; 0x4630 <ldexp+0x44>
    4640:	bb 0f       	add	r27, r27
    4642:	58 f7       	brcc	.-42     	; 0x461a <ldexp+0x2e>
    4644:	11 f4       	brne	.+4      	; 0x464a <ldexp+0x5e>
    4646:	60 ff       	sbrs	r22, 0
    4648:	e8 cf       	rjmp	.-48     	; 0x461a <ldexp+0x2e>
    464a:	6f 5f       	subi	r22, 0xFF	; 255
    464c:	7f 4f       	sbci	r23, 0xFF	; 255
    464e:	8f 4f       	sbci	r24, 0xFF	; 255
    4650:	9f 4f       	sbci	r25, 0xFF	; 255
    4652:	e3 cf       	rjmp	.-58     	; 0x461a <ldexp+0x2e>
    4654:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__fp_szero>
    4658:	16 f0       	brts	.+4      	; 0x465e <ldexp+0x72>
    465a:	0c 94 8f 24 	jmp	0x491e	; 0x491e <__fp_mpack>
    465e:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__fp_nan>
    4662:	68 94       	set
    4664:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <__fp_inf>

00004668 <log>:
    4668:	0e 94 18 22 	call	0x4430	; 0x4430 <__fp_splitA>
    466c:	a8 f3       	brcs	.-22     	; 0x4658 <ldexp+0x6c>
    466e:	99 23       	and	r25, r25
    4670:	c1 f3       	breq	.-16     	; 0x4662 <ldexp+0x76>
    4672:	ae f3       	brts	.-22     	; 0x465e <ldexp+0x72>
    4674:	df 93       	push	r29
    4676:	cf 93       	push	r28
    4678:	1f 93       	push	r17
    467a:	0f 93       	push	r16
    467c:	ff 92       	push	r15
    467e:	c9 2f       	mov	r28, r25
    4680:	dd 27       	eor	r29, r29
    4682:	88 23       	and	r24, r24
    4684:	2a f0       	brmi	.+10     	; 0x4690 <log+0x28>
    4686:	21 97       	sbiw	r28, 0x01	; 1
    4688:	66 0f       	add	r22, r22
    468a:	77 1f       	adc	r23, r23
    468c:	88 1f       	adc	r24, r24
    468e:	da f7       	brpl	.-10     	; 0x4686 <log+0x1e>
    4690:	20 e0       	ldi	r18, 0x00	; 0
    4692:	30 e0       	ldi	r19, 0x00	; 0
    4694:	40 e8       	ldi	r20, 0x80	; 128
    4696:	5f eb       	ldi	r21, 0xBF	; 191
    4698:	9f e3       	ldi	r25, 0x3F	; 63
    469a:	88 39       	cpi	r24, 0x98	; 152
    469c:	20 f0       	brcs	.+8      	; 0x46a6 <log+0x3e>
    469e:	80 3e       	cpi	r24, 0xE0	; 224
    46a0:	38 f0       	brcs	.+14     	; 0x46b0 <log+0x48>
    46a2:	21 96       	adiw	r28, 0x01	; 1
    46a4:	8f 77       	andi	r24, 0x7F	; 127
    46a6:	0e 94 09 21 	call	0x4212	; 0x4212 <__addsf3>
    46aa:	e2 e1       	ldi	r30, 0x12	; 18
    46ac:	f1 e0       	ldi	r31, 0x01	; 1
    46ae:	04 c0       	rjmp	.+8      	; 0x46b8 <log+0x50>
    46b0:	0e 94 09 21 	call	0x4212	; 0x4212 <__addsf3>
    46b4:	ef e3       	ldi	r30, 0x3F	; 63
    46b6:	f1 e0       	ldi	r31, 0x01	; 1
    46b8:	0e 94 c3 22 	call	0x4586	; 0x4586 <__fp_powser>
    46bc:	8b 01       	movw	r16, r22
    46be:	be 01       	movw	r22, r28
    46c0:	ec 01       	movw	r28, r24
    46c2:	fb 2e       	mov	r15, r27
    46c4:	6f 57       	subi	r22, 0x7F	; 127
    46c6:	71 09       	sbc	r23, r1
    46c8:	75 95       	asr	r23
    46ca:	77 1f       	adc	r23, r23
    46cc:	88 0b       	sbc	r24, r24
    46ce:	99 0b       	sbc	r25, r25
    46d0:	0e 94 ad 21 	call	0x435a	; 0x435a <__floatsisf>
    46d4:	28 e1       	ldi	r18, 0x18	; 24
    46d6:	32 e7       	ldi	r19, 0x72	; 114
    46d8:	41 e3       	ldi	r20, 0x31	; 49
    46da:	5f e3       	ldi	r21, 0x3F	; 63
    46dc:	0e 94 c3 23 	call	0x4786	; 0x4786 <__mulsf3x>
    46e0:	af 2d       	mov	r26, r15
    46e2:	98 01       	movw	r18, r16
    46e4:	ae 01       	movw	r20, r28
    46e6:	ff 90       	pop	r15
    46e8:	0f 91       	pop	r16
    46ea:	1f 91       	pop	r17
    46ec:	cf 91       	pop	r28
    46ee:	df 91       	pop	r29
    46f0:	0e 94 20 21 	call	0x4240	; 0x4240 <__addsf3x>
    46f4:	0c 94 ff 21 	jmp	0x43fe	; 0x43fe <__fp_round>

000046f8 <modf>:
    46f8:	fa 01       	movw	r30, r20
    46fa:	dc 01       	movw	r26, r24
    46fc:	aa 0f       	add	r26, r26
    46fe:	bb 1f       	adc	r27, r27
    4700:	9b 01       	movw	r18, r22
    4702:	ac 01       	movw	r20, r24
    4704:	bf 57       	subi	r27, 0x7F	; 127
    4706:	28 f4       	brcc	.+10     	; 0x4712 <modf+0x1a>
    4708:	22 27       	eor	r18, r18
    470a:	33 27       	eor	r19, r19
    470c:	44 27       	eor	r20, r20
    470e:	50 78       	andi	r21, 0x80	; 128
    4710:	20 c0       	rjmp	.+64     	; 0x4752 <modf+0x5a>
    4712:	b7 51       	subi	r27, 0x17	; 23
    4714:	90 f4       	brcc	.+36     	; 0x473a <modf+0x42>
    4716:	ab 2f       	mov	r26, r27
    4718:	00 24       	eor	r0, r0
    471a:	46 95       	lsr	r20
    471c:	37 95       	ror	r19
    471e:	27 95       	ror	r18
    4720:	01 1c       	adc	r0, r1
    4722:	a3 95       	inc	r26
    4724:	d2 f3       	brmi	.-12     	; 0x471a <modf+0x22>
    4726:	00 20       	and	r0, r0
    4728:	71 f0       	breq	.+28     	; 0x4746 <modf+0x4e>
    472a:	22 0f       	add	r18, r18
    472c:	33 1f       	adc	r19, r19
    472e:	44 1f       	adc	r20, r20
    4730:	b3 95       	inc	r27
    4732:	da f3       	brmi	.-10     	; 0x472a <modf+0x32>
    4734:	0e d0       	rcall	.+28     	; 0x4752 <modf+0x5a>
    4736:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__subsf3>
    473a:	61 30       	cpi	r22, 0x01	; 1
    473c:	71 05       	cpc	r23, r1
    473e:	a0 e8       	ldi	r26, 0x80	; 128
    4740:	8a 07       	cpc	r24, r26
    4742:	b9 46       	sbci	r27, 0x69	; 105
    4744:	30 f4       	brcc	.+12     	; 0x4752 <modf+0x5a>
    4746:	9b 01       	movw	r18, r22
    4748:	ac 01       	movw	r20, r24
    474a:	66 27       	eor	r22, r22
    474c:	77 27       	eor	r23, r23
    474e:	88 27       	eor	r24, r24
    4750:	90 78       	andi	r25, 0x80	; 128
    4752:	30 96       	adiw	r30, 0x00	; 0
    4754:	21 f0       	breq	.+8      	; 0x475e <modf+0x66>
    4756:	20 83       	st	Z, r18
    4758:	31 83       	std	Z+1, r19	; 0x01
    475a:	42 83       	std	Z+2, r20	; 0x02
    475c:	53 83       	std	Z+3, r21	; 0x03
    475e:	08 95       	ret

00004760 <__mulsf3>:
    4760:	0e 94 c3 23 	call	0x4786	; 0x4786 <__mulsf3x>
    4764:	0c 94 ff 21 	jmp	0x43fe	; 0x43fe <__fp_round>
    4768:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__fp_pscA>
    476c:	38 f0       	brcs	.+14     	; 0x477c <__mulsf3+0x1c>
    476e:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <__fp_pscB>
    4772:	20 f0       	brcs	.+8      	; 0x477c <__mulsf3+0x1c>
    4774:	95 23       	and	r25, r21
    4776:	11 f0       	breq	.+4      	; 0x477c <__mulsf3+0x1c>
    4778:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <__fp_inf>
    477c:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__fp_nan>
    4780:	11 24       	eor	r1, r1
    4782:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__fp_szero>

00004786 <__mulsf3x>:
    4786:	0e 94 10 22 	call	0x4420	; 0x4420 <__fp_split3>
    478a:	70 f3       	brcs	.-36     	; 0x4768 <__mulsf3+0x8>

0000478c <__mulsf3_pse>:
    478c:	95 9f       	mul	r25, r21
    478e:	c1 f3       	breq	.-16     	; 0x4780 <__mulsf3+0x20>
    4790:	95 0f       	add	r25, r21
    4792:	50 e0       	ldi	r21, 0x00	; 0
    4794:	55 1f       	adc	r21, r21
    4796:	62 9f       	mul	r22, r18
    4798:	f0 01       	movw	r30, r0
    479a:	72 9f       	mul	r23, r18
    479c:	bb 27       	eor	r27, r27
    479e:	f0 0d       	add	r31, r0
    47a0:	b1 1d       	adc	r27, r1
    47a2:	63 9f       	mul	r22, r19
    47a4:	aa 27       	eor	r26, r26
    47a6:	f0 0d       	add	r31, r0
    47a8:	b1 1d       	adc	r27, r1
    47aa:	aa 1f       	adc	r26, r26
    47ac:	64 9f       	mul	r22, r20
    47ae:	66 27       	eor	r22, r22
    47b0:	b0 0d       	add	r27, r0
    47b2:	a1 1d       	adc	r26, r1
    47b4:	66 1f       	adc	r22, r22
    47b6:	82 9f       	mul	r24, r18
    47b8:	22 27       	eor	r18, r18
    47ba:	b0 0d       	add	r27, r0
    47bc:	a1 1d       	adc	r26, r1
    47be:	62 1f       	adc	r22, r18
    47c0:	73 9f       	mul	r23, r19
    47c2:	b0 0d       	add	r27, r0
    47c4:	a1 1d       	adc	r26, r1
    47c6:	62 1f       	adc	r22, r18
    47c8:	83 9f       	mul	r24, r19
    47ca:	a0 0d       	add	r26, r0
    47cc:	61 1d       	adc	r22, r1
    47ce:	22 1f       	adc	r18, r18
    47d0:	74 9f       	mul	r23, r20
    47d2:	33 27       	eor	r19, r19
    47d4:	a0 0d       	add	r26, r0
    47d6:	61 1d       	adc	r22, r1
    47d8:	23 1f       	adc	r18, r19
    47da:	84 9f       	mul	r24, r20
    47dc:	60 0d       	add	r22, r0
    47de:	21 1d       	adc	r18, r1
    47e0:	82 2f       	mov	r24, r18
    47e2:	76 2f       	mov	r23, r22
    47e4:	6a 2f       	mov	r22, r26
    47e6:	11 24       	eor	r1, r1
    47e8:	9f 57       	subi	r25, 0x7F	; 127
    47ea:	50 40       	sbci	r21, 0x00	; 0
    47ec:	9a f0       	brmi	.+38     	; 0x4814 <__mulsf3_pse+0x88>
    47ee:	f1 f0       	breq	.+60     	; 0x482c <__mulsf3_pse+0xa0>
    47f0:	88 23       	and	r24, r24
    47f2:	4a f0       	brmi	.+18     	; 0x4806 <__mulsf3_pse+0x7a>
    47f4:	ee 0f       	add	r30, r30
    47f6:	ff 1f       	adc	r31, r31
    47f8:	bb 1f       	adc	r27, r27
    47fa:	66 1f       	adc	r22, r22
    47fc:	77 1f       	adc	r23, r23
    47fe:	88 1f       	adc	r24, r24
    4800:	91 50       	subi	r25, 0x01	; 1
    4802:	50 40       	sbci	r21, 0x00	; 0
    4804:	a9 f7       	brne	.-22     	; 0x47f0 <__mulsf3_pse+0x64>
    4806:	9e 3f       	cpi	r25, 0xFE	; 254
    4808:	51 05       	cpc	r21, r1
    480a:	80 f0       	brcs	.+32     	; 0x482c <__mulsf3_pse+0xa0>
    480c:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <__fp_inf>
    4810:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__fp_szero>
    4814:	5f 3f       	cpi	r21, 0xFF	; 255
    4816:	e4 f3       	brlt	.-8      	; 0x4810 <__mulsf3_pse+0x84>
    4818:	98 3e       	cpi	r25, 0xE8	; 232
    481a:	d4 f3       	brlt	.-12     	; 0x4810 <__mulsf3_pse+0x84>
    481c:	86 95       	lsr	r24
    481e:	77 95       	ror	r23
    4820:	67 95       	ror	r22
    4822:	b7 95       	ror	r27
    4824:	f7 95       	ror	r31
    4826:	e7 95       	ror	r30
    4828:	9f 5f       	subi	r25, 0xFF	; 255
    482a:	c1 f7       	brne	.-16     	; 0x481c <__mulsf3_pse+0x90>
    482c:	fe 2b       	or	r31, r30
    482e:	88 0f       	add	r24, r24
    4830:	91 1d       	adc	r25, r1
    4832:	96 95       	lsr	r25
    4834:	87 95       	ror	r24
    4836:	97 f9       	bld	r25, 7
    4838:	08 95       	ret

0000483a <__divsf3>:
    483a:	0e 94 31 24 	call	0x4862	; 0x4862 <__divsf3x>
    483e:	0c 94 ff 21 	jmp	0x43fe	; 0x43fe <__fp_round>
    4842:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <__fp_pscB>
    4846:	58 f0       	brcs	.+22     	; 0x485e <__divsf3+0x24>
    4848:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__fp_pscA>
    484c:	40 f0       	brcs	.+16     	; 0x485e <__divsf3+0x24>
    484e:	29 f4       	brne	.+10     	; 0x485a <__divsf3+0x20>
    4850:	5f 3f       	cpi	r21, 0xFF	; 255
    4852:	29 f0       	breq	.+10     	; 0x485e <__divsf3+0x24>
    4854:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <__fp_inf>
    4858:	51 11       	cpse	r21, r1
    485a:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__fp_szero>
    485e:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__fp_nan>

00004862 <__divsf3x>:
    4862:	0e 94 10 22 	call	0x4420	; 0x4420 <__fp_split3>
    4866:	68 f3       	brcs	.-38     	; 0x4842 <__divsf3+0x8>

00004868 <__divsf3_pse>:
    4868:	99 23       	and	r25, r25
    486a:	b1 f3       	breq	.-20     	; 0x4858 <__divsf3+0x1e>
    486c:	55 23       	and	r21, r21
    486e:	91 f3       	breq	.-28     	; 0x4854 <__divsf3+0x1a>
    4870:	95 1b       	sub	r25, r21
    4872:	55 0b       	sbc	r21, r21
    4874:	bb 27       	eor	r27, r27
    4876:	aa 27       	eor	r26, r26
    4878:	62 17       	cp	r22, r18
    487a:	73 07       	cpc	r23, r19
    487c:	84 07       	cpc	r24, r20
    487e:	38 f0       	brcs	.+14     	; 0x488e <__divsf3_pse+0x26>
    4880:	9f 5f       	subi	r25, 0xFF	; 255
    4882:	5f 4f       	sbci	r21, 0xFF	; 255
    4884:	22 0f       	add	r18, r18
    4886:	33 1f       	adc	r19, r19
    4888:	44 1f       	adc	r20, r20
    488a:	aa 1f       	adc	r26, r26
    488c:	a9 f3       	breq	.-22     	; 0x4878 <__divsf3_pse+0x10>
    488e:	35 d0       	rcall	.+106    	; 0x48fa <__divsf3_pse+0x92>
    4890:	0e 2e       	mov	r0, r30
    4892:	3a f0       	brmi	.+14     	; 0x48a2 <__divsf3_pse+0x3a>
    4894:	e0 e8       	ldi	r30, 0x80	; 128
    4896:	32 d0       	rcall	.+100    	; 0x48fc <__divsf3_pse+0x94>
    4898:	91 50       	subi	r25, 0x01	; 1
    489a:	50 40       	sbci	r21, 0x00	; 0
    489c:	e6 95       	lsr	r30
    489e:	00 1c       	adc	r0, r0
    48a0:	ca f7       	brpl	.-14     	; 0x4894 <__divsf3_pse+0x2c>
    48a2:	2b d0       	rcall	.+86     	; 0x48fa <__divsf3_pse+0x92>
    48a4:	fe 2f       	mov	r31, r30
    48a6:	29 d0       	rcall	.+82     	; 0x48fa <__divsf3_pse+0x92>
    48a8:	66 0f       	add	r22, r22
    48aa:	77 1f       	adc	r23, r23
    48ac:	88 1f       	adc	r24, r24
    48ae:	bb 1f       	adc	r27, r27
    48b0:	26 17       	cp	r18, r22
    48b2:	37 07       	cpc	r19, r23
    48b4:	48 07       	cpc	r20, r24
    48b6:	ab 07       	cpc	r26, r27
    48b8:	b0 e8       	ldi	r27, 0x80	; 128
    48ba:	09 f0       	breq	.+2      	; 0x48be <__divsf3_pse+0x56>
    48bc:	bb 0b       	sbc	r27, r27
    48be:	80 2d       	mov	r24, r0
    48c0:	bf 01       	movw	r22, r30
    48c2:	ff 27       	eor	r31, r31
    48c4:	93 58       	subi	r25, 0x83	; 131
    48c6:	5f 4f       	sbci	r21, 0xFF	; 255
    48c8:	3a f0       	brmi	.+14     	; 0x48d8 <__divsf3_pse+0x70>
    48ca:	9e 3f       	cpi	r25, 0xFE	; 254
    48cc:	51 05       	cpc	r21, r1
    48ce:	78 f0       	brcs	.+30     	; 0x48ee <__divsf3_pse+0x86>
    48d0:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <__fp_inf>
    48d4:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__fp_szero>
    48d8:	5f 3f       	cpi	r21, 0xFF	; 255
    48da:	e4 f3       	brlt	.-8      	; 0x48d4 <__divsf3_pse+0x6c>
    48dc:	98 3e       	cpi	r25, 0xE8	; 232
    48de:	d4 f3       	brlt	.-12     	; 0x48d4 <__divsf3_pse+0x6c>
    48e0:	86 95       	lsr	r24
    48e2:	77 95       	ror	r23
    48e4:	67 95       	ror	r22
    48e6:	b7 95       	ror	r27
    48e8:	f7 95       	ror	r31
    48ea:	9f 5f       	subi	r25, 0xFF	; 255
    48ec:	c9 f7       	brne	.-14     	; 0x48e0 <__divsf3_pse+0x78>
    48ee:	88 0f       	add	r24, r24
    48f0:	91 1d       	adc	r25, r1
    48f2:	96 95       	lsr	r25
    48f4:	87 95       	ror	r24
    48f6:	97 f9       	bld	r25, 7
    48f8:	08 95       	ret
    48fa:	e1 e0       	ldi	r30, 0x01	; 1
    48fc:	66 0f       	add	r22, r22
    48fe:	77 1f       	adc	r23, r23
    4900:	88 1f       	adc	r24, r24
    4902:	bb 1f       	adc	r27, r27
    4904:	62 17       	cp	r22, r18
    4906:	73 07       	cpc	r23, r19
    4908:	84 07       	cpc	r24, r20
    490a:	ba 07       	cpc	r27, r26
    490c:	20 f0       	brcs	.+8      	; 0x4916 <__divsf3_pse+0xae>
    490e:	62 1b       	sub	r22, r18
    4910:	73 0b       	sbc	r23, r19
    4912:	84 0b       	sbc	r24, r20
    4914:	ba 0b       	sbc	r27, r26
    4916:	ee 1f       	adc	r30, r30
    4918:	88 f7       	brcc	.-30     	; 0x48fc <__divsf3_pse+0x94>
    491a:	e0 95       	com	r30
    491c:	08 95       	ret

0000491e <__fp_mpack>:
    491e:	9f 3f       	cpi	r25, 0xFF	; 255
    4920:	31 f0       	breq	.+12     	; 0x492e <__fp_mpack_finite+0xc>

00004922 <__fp_mpack_finite>:
    4922:	91 50       	subi	r25, 0x01	; 1
    4924:	20 f4       	brcc	.+8      	; 0x492e <__fp_mpack_finite+0xc>
    4926:	87 95       	ror	r24
    4928:	77 95       	ror	r23
    492a:	67 95       	ror	r22
    492c:	b7 95       	ror	r27
    492e:	88 0f       	add	r24, r24
    4930:	91 1d       	adc	r25, r1
    4932:	96 95       	lsr	r25
    4934:	87 95       	ror	r24
    4936:	97 f9       	bld	r25, 7
    4938:	08 95       	ret

0000493a <__udivmodsi4>:
    493a:	a1 e2       	ldi	r26, 0x21	; 33
    493c:	1a 2e       	mov	r1, r26
    493e:	aa 1b       	sub	r26, r26
    4940:	bb 1b       	sub	r27, r27
    4942:	fd 01       	movw	r30, r26
    4944:	0d c0       	rjmp	.+26     	; 0x4960 <__udivmodsi4_ep>

00004946 <__udivmodsi4_loop>:
    4946:	aa 1f       	adc	r26, r26
    4948:	bb 1f       	adc	r27, r27
    494a:	ee 1f       	adc	r30, r30
    494c:	ff 1f       	adc	r31, r31
    494e:	a2 17       	cp	r26, r18
    4950:	b3 07       	cpc	r27, r19
    4952:	e4 07       	cpc	r30, r20
    4954:	f5 07       	cpc	r31, r21
    4956:	20 f0       	brcs	.+8      	; 0x4960 <__udivmodsi4_ep>
    4958:	a2 1b       	sub	r26, r18
    495a:	b3 0b       	sbc	r27, r19
    495c:	e4 0b       	sbc	r30, r20
    495e:	f5 0b       	sbc	r31, r21

00004960 <__udivmodsi4_ep>:
    4960:	66 1f       	adc	r22, r22
    4962:	77 1f       	adc	r23, r23
    4964:	88 1f       	adc	r24, r24
    4966:	99 1f       	adc	r25, r25
    4968:	1a 94       	dec	r1
    496a:	69 f7       	brne	.-38     	; 0x4946 <__udivmodsi4_loop>
    496c:	60 95       	com	r22
    496e:	70 95       	com	r23
    4970:	80 95       	com	r24
    4972:	90 95       	com	r25
    4974:	9b 01       	movw	r18, r22
    4976:	ac 01       	movw	r20, r24
    4978:	bd 01       	movw	r22, r26
    497a:	cf 01       	movw	r24, r30
    497c:	08 95       	ret

0000497e <__tablejump2__>:
    497e:	ee 0f       	add	r30, r30
    4980:	ff 1f       	adc	r31, r31
    4982:	05 90       	lpm	r0, Z+
    4984:	f4 91       	lpm	r31, Z
    4986:	e0 2d       	mov	r30, r0
    4988:	09 94       	ijmp

0000498a <malloc>:
    498a:	0f 93       	push	r16
    498c:	1f 93       	push	r17
    498e:	cf 93       	push	r28
    4990:	df 93       	push	r29
    4992:	82 30       	cpi	r24, 0x02	; 2
    4994:	91 05       	cpc	r25, r1
    4996:	10 f4       	brcc	.+4      	; 0x499c <malloc+0x12>
    4998:	82 e0       	ldi	r24, 0x02	; 2
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	e0 91 b0 07 	lds	r30, 0x07B0	; 0x8007b0 <__flp>
    49a0:	f0 91 b1 07 	lds	r31, 0x07B1	; 0x8007b1 <__flp+0x1>
    49a4:	20 e0       	ldi	r18, 0x00	; 0
    49a6:	30 e0       	ldi	r19, 0x00	; 0
    49a8:	a0 e0       	ldi	r26, 0x00	; 0
    49aa:	b0 e0       	ldi	r27, 0x00	; 0
    49ac:	30 97       	sbiw	r30, 0x00	; 0
    49ae:	19 f1       	breq	.+70     	; 0x49f6 <malloc+0x6c>
    49b0:	40 81       	ld	r20, Z
    49b2:	51 81       	ldd	r21, Z+1	; 0x01
    49b4:	02 81       	ldd	r16, Z+2	; 0x02
    49b6:	13 81       	ldd	r17, Z+3	; 0x03
    49b8:	48 17       	cp	r20, r24
    49ba:	59 07       	cpc	r21, r25
    49bc:	c8 f0       	brcs	.+50     	; 0x49f0 <malloc+0x66>
    49be:	84 17       	cp	r24, r20
    49c0:	95 07       	cpc	r25, r21
    49c2:	69 f4       	brne	.+26     	; 0x49de <malloc+0x54>
    49c4:	10 97       	sbiw	r26, 0x00	; 0
    49c6:	31 f0       	breq	.+12     	; 0x49d4 <malloc+0x4a>
    49c8:	12 96       	adiw	r26, 0x02	; 2
    49ca:	0c 93       	st	X, r16
    49cc:	12 97       	sbiw	r26, 0x02	; 2
    49ce:	13 96       	adiw	r26, 0x03	; 3
    49d0:	1c 93       	st	X, r17
    49d2:	27 c0       	rjmp	.+78     	; 0x4a22 <malloc+0x98>
    49d4:	00 93 b0 07 	sts	0x07B0, r16	; 0x8007b0 <__flp>
    49d8:	10 93 b1 07 	sts	0x07B1, r17	; 0x8007b1 <__flp+0x1>
    49dc:	22 c0       	rjmp	.+68     	; 0x4a22 <malloc+0x98>
    49de:	21 15       	cp	r18, r1
    49e0:	31 05       	cpc	r19, r1
    49e2:	19 f0       	breq	.+6      	; 0x49ea <malloc+0x60>
    49e4:	42 17       	cp	r20, r18
    49e6:	53 07       	cpc	r21, r19
    49e8:	18 f4       	brcc	.+6      	; 0x49f0 <malloc+0x66>
    49ea:	9a 01       	movw	r18, r20
    49ec:	bd 01       	movw	r22, r26
    49ee:	ef 01       	movw	r28, r30
    49f0:	df 01       	movw	r26, r30
    49f2:	f8 01       	movw	r30, r16
    49f4:	db cf       	rjmp	.-74     	; 0x49ac <malloc+0x22>
    49f6:	21 15       	cp	r18, r1
    49f8:	31 05       	cpc	r19, r1
    49fa:	f9 f0       	breq	.+62     	; 0x4a3a <malloc+0xb0>
    49fc:	28 1b       	sub	r18, r24
    49fe:	39 0b       	sbc	r19, r25
    4a00:	24 30       	cpi	r18, 0x04	; 4
    4a02:	31 05       	cpc	r19, r1
    4a04:	80 f4       	brcc	.+32     	; 0x4a26 <malloc+0x9c>
    4a06:	8a 81       	ldd	r24, Y+2	; 0x02
    4a08:	9b 81       	ldd	r25, Y+3	; 0x03
    4a0a:	61 15       	cp	r22, r1
    4a0c:	71 05       	cpc	r23, r1
    4a0e:	21 f0       	breq	.+8      	; 0x4a18 <malloc+0x8e>
    4a10:	fb 01       	movw	r30, r22
    4a12:	93 83       	std	Z+3, r25	; 0x03
    4a14:	82 83       	std	Z+2, r24	; 0x02
    4a16:	04 c0       	rjmp	.+8      	; 0x4a20 <malloc+0x96>
    4a18:	90 93 b1 07 	sts	0x07B1, r25	; 0x8007b1 <__flp+0x1>
    4a1c:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <__flp>
    4a20:	fe 01       	movw	r30, r28
    4a22:	32 96       	adiw	r30, 0x02	; 2
    4a24:	44 c0       	rjmp	.+136    	; 0x4aae <malloc+0x124>
    4a26:	fe 01       	movw	r30, r28
    4a28:	e2 0f       	add	r30, r18
    4a2a:	f3 1f       	adc	r31, r19
    4a2c:	81 93       	st	Z+, r24
    4a2e:	91 93       	st	Z+, r25
    4a30:	22 50       	subi	r18, 0x02	; 2
    4a32:	31 09       	sbc	r19, r1
    4a34:	39 83       	std	Y+1, r19	; 0x01
    4a36:	28 83       	st	Y, r18
    4a38:	3a c0       	rjmp	.+116    	; 0x4aae <malloc+0x124>
    4a3a:	20 91 ae 07 	lds	r18, 0x07AE	; 0x8007ae <__brkval>
    4a3e:	30 91 af 07 	lds	r19, 0x07AF	; 0x8007af <__brkval+0x1>
    4a42:	23 2b       	or	r18, r19
    4a44:	41 f4       	brne	.+16     	; 0x4a56 <malloc+0xcc>
    4a46:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4a4a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4a4e:	30 93 af 07 	sts	0x07AF, r19	; 0x8007af <__brkval+0x1>
    4a52:	20 93 ae 07 	sts	0x07AE, r18	; 0x8007ae <__brkval>
    4a56:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4a5a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4a5e:	21 15       	cp	r18, r1
    4a60:	31 05       	cpc	r19, r1
    4a62:	41 f4       	brne	.+16     	; 0x4a74 <malloc+0xea>
    4a64:	2d b7       	in	r18, 0x3d	; 61
    4a66:	3e b7       	in	r19, 0x3e	; 62
    4a68:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4a6c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4a70:	24 1b       	sub	r18, r20
    4a72:	35 0b       	sbc	r19, r21
    4a74:	e0 91 ae 07 	lds	r30, 0x07AE	; 0x8007ae <__brkval>
    4a78:	f0 91 af 07 	lds	r31, 0x07AF	; 0x8007af <__brkval+0x1>
    4a7c:	e2 17       	cp	r30, r18
    4a7e:	f3 07       	cpc	r31, r19
    4a80:	a0 f4       	brcc	.+40     	; 0x4aaa <malloc+0x120>
    4a82:	2e 1b       	sub	r18, r30
    4a84:	3f 0b       	sbc	r19, r31
    4a86:	28 17       	cp	r18, r24
    4a88:	39 07       	cpc	r19, r25
    4a8a:	78 f0       	brcs	.+30     	; 0x4aaa <malloc+0x120>
    4a8c:	ac 01       	movw	r20, r24
    4a8e:	4e 5f       	subi	r20, 0xFE	; 254
    4a90:	5f 4f       	sbci	r21, 0xFF	; 255
    4a92:	24 17       	cp	r18, r20
    4a94:	35 07       	cpc	r19, r21
    4a96:	48 f0       	brcs	.+18     	; 0x4aaa <malloc+0x120>
    4a98:	4e 0f       	add	r20, r30
    4a9a:	5f 1f       	adc	r21, r31
    4a9c:	50 93 af 07 	sts	0x07AF, r21	; 0x8007af <__brkval+0x1>
    4aa0:	40 93 ae 07 	sts	0x07AE, r20	; 0x8007ae <__brkval>
    4aa4:	81 93       	st	Z+, r24
    4aa6:	91 93       	st	Z+, r25
    4aa8:	02 c0       	rjmp	.+4      	; 0x4aae <malloc+0x124>
    4aaa:	e0 e0       	ldi	r30, 0x00	; 0
    4aac:	f0 e0       	ldi	r31, 0x00	; 0
    4aae:	cf 01       	movw	r24, r30
    4ab0:	df 91       	pop	r29
    4ab2:	cf 91       	pop	r28
    4ab4:	1f 91       	pop	r17
    4ab6:	0f 91       	pop	r16
    4ab8:	08 95       	ret

00004aba <free>:
    4aba:	cf 93       	push	r28
    4abc:	df 93       	push	r29
    4abe:	00 97       	sbiw	r24, 0x00	; 0
    4ac0:	09 f4       	brne	.+2      	; 0x4ac4 <free+0xa>
    4ac2:	81 c0       	rjmp	.+258    	; 0x4bc6 <free+0x10c>
    4ac4:	fc 01       	movw	r30, r24
    4ac6:	32 97       	sbiw	r30, 0x02	; 2
    4ac8:	13 82       	std	Z+3, r1	; 0x03
    4aca:	12 82       	std	Z+2, r1	; 0x02
    4acc:	a0 91 b0 07 	lds	r26, 0x07B0	; 0x8007b0 <__flp>
    4ad0:	b0 91 b1 07 	lds	r27, 0x07B1	; 0x8007b1 <__flp+0x1>
    4ad4:	10 97       	sbiw	r26, 0x00	; 0
    4ad6:	81 f4       	brne	.+32     	; 0x4af8 <free+0x3e>
    4ad8:	20 81       	ld	r18, Z
    4ada:	31 81       	ldd	r19, Z+1	; 0x01
    4adc:	82 0f       	add	r24, r18
    4ade:	93 1f       	adc	r25, r19
    4ae0:	20 91 ae 07 	lds	r18, 0x07AE	; 0x8007ae <__brkval>
    4ae4:	30 91 af 07 	lds	r19, 0x07AF	; 0x8007af <__brkval+0x1>
    4ae8:	28 17       	cp	r18, r24
    4aea:	39 07       	cpc	r19, r25
    4aec:	51 f5       	brne	.+84     	; 0x4b42 <free+0x88>
    4aee:	f0 93 af 07 	sts	0x07AF, r31	; 0x8007af <__brkval+0x1>
    4af2:	e0 93 ae 07 	sts	0x07AE, r30	; 0x8007ae <__brkval>
    4af6:	67 c0       	rjmp	.+206    	; 0x4bc6 <free+0x10c>
    4af8:	ed 01       	movw	r28, r26
    4afa:	20 e0       	ldi	r18, 0x00	; 0
    4afc:	30 e0       	ldi	r19, 0x00	; 0
    4afe:	ce 17       	cp	r28, r30
    4b00:	df 07       	cpc	r29, r31
    4b02:	40 f4       	brcc	.+16     	; 0x4b14 <free+0x5a>
    4b04:	4a 81       	ldd	r20, Y+2	; 0x02
    4b06:	5b 81       	ldd	r21, Y+3	; 0x03
    4b08:	9e 01       	movw	r18, r28
    4b0a:	41 15       	cp	r20, r1
    4b0c:	51 05       	cpc	r21, r1
    4b0e:	f1 f0       	breq	.+60     	; 0x4b4c <free+0x92>
    4b10:	ea 01       	movw	r28, r20
    4b12:	f5 cf       	rjmp	.-22     	; 0x4afe <free+0x44>
    4b14:	d3 83       	std	Z+3, r29	; 0x03
    4b16:	c2 83       	std	Z+2, r28	; 0x02
    4b18:	40 81       	ld	r20, Z
    4b1a:	51 81       	ldd	r21, Z+1	; 0x01
    4b1c:	84 0f       	add	r24, r20
    4b1e:	95 1f       	adc	r25, r21
    4b20:	c8 17       	cp	r28, r24
    4b22:	d9 07       	cpc	r29, r25
    4b24:	59 f4       	brne	.+22     	; 0x4b3c <free+0x82>
    4b26:	88 81       	ld	r24, Y
    4b28:	99 81       	ldd	r25, Y+1	; 0x01
    4b2a:	84 0f       	add	r24, r20
    4b2c:	95 1f       	adc	r25, r21
    4b2e:	02 96       	adiw	r24, 0x02	; 2
    4b30:	91 83       	std	Z+1, r25	; 0x01
    4b32:	80 83       	st	Z, r24
    4b34:	8a 81       	ldd	r24, Y+2	; 0x02
    4b36:	9b 81       	ldd	r25, Y+3	; 0x03
    4b38:	93 83       	std	Z+3, r25	; 0x03
    4b3a:	82 83       	std	Z+2, r24	; 0x02
    4b3c:	21 15       	cp	r18, r1
    4b3e:	31 05       	cpc	r19, r1
    4b40:	29 f4       	brne	.+10     	; 0x4b4c <free+0x92>
    4b42:	f0 93 b1 07 	sts	0x07B1, r31	; 0x8007b1 <__flp+0x1>
    4b46:	e0 93 b0 07 	sts	0x07B0, r30	; 0x8007b0 <__flp>
    4b4a:	3d c0       	rjmp	.+122    	; 0x4bc6 <free+0x10c>
    4b4c:	e9 01       	movw	r28, r18
    4b4e:	fb 83       	std	Y+3, r31	; 0x03
    4b50:	ea 83       	std	Y+2, r30	; 0x02
    4b52:	49 91       	ld	r20, Y+
    4b54:	59 91       	ld	r21, Y+
    4b56:	c4 0f       	add	r28, r20
    4b58:	d5 1f       	adc	r29, r21
    4b5a:	ec 17       	cp	r30, r28
    4b5c:	fd 07       	cpc	r31, r29
    4b5e:	61 f4       	brne	.+24     	; 0x4b78 <free+0xbe>
    4b60:	80 81       	ld	r24, Z
    4b62:	91 81       	ldd	r25, Z+1	; 0x01
    4b64:	84 0f       	add	r24, r20
    4b66:	95 1f       	adc	r25, r21
    4b68:	02 96       	adiw	r24, 0x02	; 2
    4b6a:	e9 01       	movw	r28, r18
    4b6c:	99 83       	std	Y+1, r25	; 0x01
    4b6e:	88 83       	st	Y, r24
    4b70:	82 81       	ldd	r24, Z+2	; 0x02
    4b72:	93 81       	ldd	r25, Z+3	; 0x03
    4b74:	9b 83       	std	Y+3, r25	; 0x03
    4b76:	8a 83       	std	Y+2, r24	; 0x02
    4b78:	e0 e0       	ldi	r30, 0x00	; 0
    4b7a:	f0 e0       	ldi	r31, 0x00	; 0
    4b7c:	12 96       	adiw	r26, 0x02	; 2
    4b7e:	8d 91       	ld	r24, X+
    4b80:	9c 91       	ld	r25, X
    4b82:	13 97       	sbiw	r26, 0x03	; 3
    4b84:	00 97       	sbiw	r24, 0x00	; 0
    4b86:	19 f0       	breq	.+6      	; 0x4b8e <free+0xd4>
    4b88:	fd 01       	movw	r30, r26
    4b8a:	dc 01       	movw	r26, r24
    4b8c:	f7 cf       	rjmp	.-18     	; 0x4b7c <free+0xc2>
    4b8e:	8d 91       	ld	r24, X+
    4b90:	9c 91       	ld	r25, X
    4b92:	11 97       	sbiw	r26, 0x01	; 1
    4b94:	9d 01       	movw	r18, r26
    4b96:	2e 5f       	subi	r18, 0xFE	; 254
    4b98:	3f 4f       	sbci	r19, 0xFF	; 255
    4b9a:	82 0f       	add	r24, r18
    4b9c:	93 1f       	adc	r25, r19
    4b9e:	20 91 ae 07 	lds	r18, 0x07AE	; 0x8007ae <__brkval>
    4ba2:	30 91 af 07 	lds	r19, 0x07AF	; 0x8007af <__brkval+0x1>
    4ba6:	28 17       	cp	r18, r24
    4ba8:	39 07       	cpc	r19, r25
    4baa:	69 f4       	brne	.+26     	; 0x4bc6 <free+0x10c>
    4bac:	30 97       	sbiw	r30, 0x00	; 0
    4bae:	29 f4       	brne	.+10     	; 0x4bba <free+0x100>
    4bb0:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <__flp+0x1>
    4bb4:	10 92 b0 07 	sts	0x07B0, r1	; 0x8007b0 <__flp>
    4bb8:	02 c0       	rjmp	.+4      	; 0x4bbe <free+0x104>
    4bba:	13 82       	std	Z+3, r1	; 0x03
    4bbc:	12 82       	std	Z+2, r1	; 0x02
    4bbe:	b0 93 af 07 	sts	0x07AF, r27	; 0x8007af <__brkval+0x1>
    4bc2:	a0 93 ae 07 	sts	0x07AE, r26	; 0x8007ae <__brkval>
    4bc6:	df 91       	pop	r29
    4bc8:	cf 91       	pop	r28
    4bca:	08 95       	ret

00004bcc <memcpy>:
    4bcc:	fb 01       	movw	r30, r22
    4bce:	dc 01       	movw	r26, r24
    4bd0:	02 c0       	rjmp	.+4      	; 0x4bd6 <memcpy+0xa>
    4bd2:	01 90       	ld	r0, Z+
    4bd4:	0d 92       	st	X+, r0
    4bd6:	41 50       	subi	r20, 0x01	; 1
    4bd8:	50 40       	sbci	r21, 0x00	; 0
    4bda:	d8 f7       	brcc	.-10     	; 0x4bd2 <memcpy+0x6>
    4bdc:	08 95       	ret

00004bde <memset>:
    4bde:	dc 01       	movw	r26, r24
    4be0:	01 c0       	rjmp	.+2      	; 0x4be4 <memset+0x6>
    4be2:	6d 93       	st	X+, r22
    4be4:	41 50       	subi	r20, 0x01	; 1
    4be6:	50 40       	sbci	r21, 0x00	; 0
    4be8:	e0 f7       	brcc	.-8      	; 0x4be2 <memset+0x4>
    4bea:	08 95       	ret

00004bec <_exit>:
    4bec:	f8 94       	cli

00004bee <__stop_program>:
    4bee:	ff cf       	rjmp	.-2      	; 0x4bee <__stop_program>
