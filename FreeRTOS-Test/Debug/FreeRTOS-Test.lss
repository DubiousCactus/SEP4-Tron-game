
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00002fee  00003082  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004cb  00800134  00800134  000030b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000030b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e8  00000000  00000000  00003128  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000414c  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000126f  00000000  00000000  0000775c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003825  00000000  00000000  000089cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013b4  00000000  00000000  0000c1f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c59  00000000  00000000  0000d5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a20  00000000  00000000  0000f1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  00011c1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 be 02 	jmp	0x57c	; 0x57c <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__vector_20>
      54:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__vector_28>
      74:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__vector_29>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ee ee       	ldi	r30, 0xEE	; 238
      90:	ff e2       	ldi	r31, 0x2F	; 47
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a4 33       	cpi	r26, 0x34	; 52
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	25 e0       	ldi	r18, 0x05	; 5
      a0:	a4 e3       	ldi	r26, 0x34	; 52
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	af 3f       	cpi	r26, 0xFF	; 255
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 1c 02 	call	0x438	; 0x438 <main>
      b2:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <read_joystick>:
	die();
}


void read_joystick(void *pvParameters)
{
      ba:	ef 92       	push	r14
      bc:	ff 92       	push	r15
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
      ca:	2c 97       	sbiw	r28, 0x0c	; 12
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	0f be       	out	0x3f, r0	; 63
      d4:	cd bf       	out	0x3d, r28	; 61
      d6:	9c 87       	std	Y+12, r25	; 0x0c
      d8:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t Left;
	uint8_t Up;
	uint8_t Down;
	uint8_t Pushed;
	Direction direction;
	uint8_t debounceCounter = 0;
      da:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t debounceThreshold = 15;
      dc:	8f e0       	ldi	r24, 0x0F	; 15
      de:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t turnPlayer = 0;
      e0:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t isPressing = 0;
      e2:	1c 82       	std	Y+4, r1	; 0x04

	while (1) {
		/*Constantly checking joystick state*/
		Right	= !(PINC>>1 & 0x01);
      e4:	86 e2       	ldi	r24, 0x26	; 38
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	fc 01       	movw	r30, r24
      ea:	80 81       	ld	r24, Z
      ec:	86 95       	lsr	r24
      ee:	88 2f       	mov	r24, r24
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	81 70       	andi	r24, 0x01	; 1
      f4:	99 27       	eor	r25, r25
      f6:	21 e0       	ldi	r18, 0x01	; 1
      f8:	89 2b       	or	r24, r25
      fa:	09 f0       	breq	.+2      	; 0xfe <read_joystick+0x44>
      fc:	20 e0       	ldi	r18, 0x00	; 0
      fe:	2e 83       	std	Y+6, r18	; 0x06
		Left	= !(PINC>>7 & 0x01);
     100:	86 e2       	ldi	r24, 0x26	; 38
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	fc 01       	movw	r30, r24
     106:	80 81       	ld	r24, Z
     108:	88 1f       	adc	r24, r24
     10a:	88 27       	eor	r24, r24
     10c:	88 1f       	adc	r24, r24
     10e:	88 2f       	mov	r24, r24
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	81 70       	andi	r24, 0x01	; 1
     114:	99 27       	eor	r25, r25
     116:	21 e0       	ldi	r18, 0x01	; 1
     118:	89 2b       	or	r24, r25
     11a:	09 f0       	breq	.+2      	; 0x11e <read_joystick+0x64>
     11c:	20 e0       	ldi	r18, 0x00	; 0
     11e:	2f 83       	std	Y+7, r18	; 0x07
		Up		= !(PINC>>6 & 0x01);
     120:	86 e2       	ldi	r24, 0x26	; 38
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	fc 01       	movw	r30, r24
     126:	80 81       	ld	r24, Z
     128:	82 95       	swap	r24
     12a:	86 95       	lsr	r24
     12c:	86 95       	lsr	r24
     12e:	83 70       	andi	r24, 0x03	; 3
     130:	88 2f       	mov	r24, r24
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	81 70       	andi	r24, 0x01	; 1
     136:	99 27       	eor	r25, r25
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	89 2b       	or	r24, r25
     13c:	09 f0       	breq	.+2      	; 0x140 <read_joystick+0x86>
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	28 87       	std	Y+8, r18	; 0x08
		Down	= !(PINC>>0 & 0x01);
     142:	86 e2       	ldi	r24, 0x26	; 38
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	fc 01       	movw	r30, r24
     148:	80 81       	ld	r24, Z
     14a:	88 2f       	mov	r24, r24
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	81 70       	andi	r24, 0x01	; 1
     150:	99 27       	eor	r25, r25
     152:	21 e0       	ldi	r18, 0x01	; 1
     154:	89 2b       	or	r24, r25
     156:	09 f0       	breq	.+2      	; 0x15a <read_joystick+0xa0>
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	29 87       	std	Y+9, r18	; 0x09
		Pushed  = !(PIND>>3 & 0x01);
     15c:	89 e2       	ldi	r24, 0x29	; 41
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	fc 01       	movw	r30, r24
     162:	80 81       	ld	r24, Z
     164:	86 95       	lsr	r24
     166:	86 95       	lsr	r24
     168:	86 95       	lsr	r24
     16a:	88 2f       	mov	r24, r24
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	81 70       	andi	r24, 0x01	; 1
     170:	99 27       	eor	r25, r25
     172:	21 e0       	ldi	r18, 0x01	; 1
     174:	89 2b       	or	r24, r25
     176:	09 f0       	breq	.+2      	; 0x17a <read_joystick+0xc0>
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	2a 87       	std	Y+10, r18	; 0x0a

		if (Down){
     17c:	89 85       	ldd	r24, Y+9	; 0x09
     17e:	88 23       	and	r24, r24
     180:	39 f0       	breq	.+14     	; 0x190 <read_joystick+0xd6>
			direction = DOWN;
     182:	83 e0       	ldi	r24, 0x03	; 3
     184:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	8c 83       	std	Y+4, r24	; 0x04
     18e:	23 c0       	rjmp	.+70     	; 0x1d6 <read_joystick+0x11c>
		} else if (Right) {
     190:	8e 81       	ldd	r24, Y+6	; 0x06
     192:	88 23       	and	r24, r24
     194:	39 f0       	breq	.+14     	; 0x1a4 <read_joystick+0xea>
			direction = RIGHT;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	8c 83       	std	Y+4, r24	; 0x04
     1a2:	19 c0       	rjmp	.+50     	; 0x1d6 <read_joystick+0x11c>
		} else if (Up) {
     1a4:	88 85       	ldd	r24, Y+8	; 0x08
     1a6:	88 23       	and	r24, r24
     1a8:	39 f0       	breq	.+14     	; 0x1b8 <read_joystick+0xfe>
			direction = UP;
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	8c 83       	std	Y+4, r24	; 0x04
     1b6:	0f c0       	rjmp	.+30     	; 0x1d6 <read_joystick+0x11c>
		} else if (Left) {
     1b8:	8f 81       	ldd	r24, Y+7	; 0x07
     1ba:	88 23       	and	r24, r24
     1bc:	31 f0       	breq	.+12     	; 0x1ca <read_joystick+0x110>
			direction = LEFT;
     1be:	19 82       	std	Y+1, r1	; 0x01
			turnPlayer = 1;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	8c 83       	std	Y+4, r24	; 0x04
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <read_joystick+0x11c>
		} else if (Pushed) {
     1ca:	8a 85       	ldd	r24, Y+10	; 0x0a
     1cc:	88 23       	and	r24, r24
     1ce:	11 f0       	breq	.+4      	; 0x1d4 <read_joystick+0x11a>
			//TODO: pause game
			debounceCounter = 0;
     1d0:	1a 82       	std	Y+2, r1	; 0x02
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <read_joystick+0x11c>
		} else {
			isPressing = 0;
     1d4:	1c 82       	std	Y+4, r1	; 0x04
			//debounceCounter = 0;
		}

		if (turnPlayer && !isPressing && (++debounceCounter >= debounceThreshold)) {
     1d6:	8b 81       	ldd	r24, Y+3	; 0x03
     1d8:	88 23       	and	r24, r24
     1da:	09 f4       	brne	.+2      	; 0x1de <read_joystick+0x124>
     1dc:	83 cf       	rjmp	.-250    	; 0xe4 <read_joystick+0x2a>
     1de:	8c 81       	ldd	r24, Y+4	; 0x04
     1e0:	88 23       	and	r24, r24
     1e2:	09 f0       	breq	.+2      	; 0x1e6 <read_joystick+0x12c>
     1e4:	7f cf       	rjmp	.-258    	; 0xe4 <read_joystick+0x2a>
     1e6:	8a 81       	ldd	r24, Y+2	; 0x02
     1e8:	8f 5f       	subi	r24, 0xFF	; 255
     1ea:	8a 83       	std	Y+2, r24	; 0x02
     1ec:	9a 81       	ldd	r25, Y+2	; 0x02
     1ee:	8d 81       	ldd	r24, Y+5	; 0x05
     1f0:	98 17       	cp	r25, r24
     1f2:	08 f4       	brcc	.+2      	; 0x1f6 <read_joystick+0x13c>
     1f4:	77 cf       	rjmp	.-274    	; 0xe4 <read_joystick+0x2a>
			com_send_bytes("move", 4);
     1f6:	64 e0       	ldi	r22, 0x04	; 4
     1f8:	8c e1       	ldi	r24, 0x1C	; 28
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <com_send_bytes>
			turn_player(playerOne, direction);
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	88 2f       	mov	r24, r24
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	7c 01       	movw	r14, r24
     208:	00 91 50 01 	lds	r16, 0x0150	; 0x800150 <playerOne>
     20c:	10 91 51 01 	lds	r17, 0x0151	; 0x800151 <playerOne+0x1>
     210:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <playerOne+0x2>
     214:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <playerOne+0x3>
     218:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <playerOne+0x4>
     21c:	50 91 55 01 	lds	r21, 0x0155	; 0x800155 <playerOne+0x5>
     220:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <playerOne+0x6>
     224:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <playerOne+0x7>
     228:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <playerOne+0x8>
     22c:	0e 94 1b 01 	call	0x236	; 0x236 <turn_player>
			turnPlayer = 0;
     230:	1b 82       	std	Y+3, r1	; 0x03
			debounceCounter = 0;
     232:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
     234:	57 cf       	rjmp	.-338    	; 0xe4 <read_joystick+0x2a>

00000236 <turn_player>:



/* Changes the player's direction: will be applied in game_processing() */
void turn_player(Position player, Direction direction)
{
     236:	ef 92       	push	r14
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	2a 97       	sbiw	r28, 0x0a	; 10
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	f8 94       	cli
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	cd bf       	out	0x3d, r28	; 61
     250:	09 83       	std	Y+1, r16	; 0x01
     252:	1a 83       	std	Y+2, r17	; 0x02
     254:	2b 83       	std	Y+3, r18	; 0x03
     256:	3c 83       	std	Y+4, r19	; 0x04
     258:	4d 83       	std	Y+5, r20	; 0x05
     25a:	5e 83       	std	Y+6, r21	; 0x06
     25c:	6f 83       	std	Y+7, r22	; 0x07
     25e:	78 87       	std	Y+8, r23	; 0x08
     260:	89 87       	std	Y+9, r24	; 0x09
     262:	ea 86       	std	Y+10, r14	; 0x0a

	switch (direction) {
     264:	8a 85       	ldd	r24, Y+10	; 0x0a
     266:	88 2f       	mov	r24, r24
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	81 30       	cpi	r24, 0x01	; 1
     26c:	91 05       	cpc	r25, r1
     26e:	39 f1       	breq	.+78     	; 0x2be <turn_player+0x88>
     270:	82 30       	cpi	r24, 0x02	; 2
     272:	91 05       	cpc	r25, r1
     274:	1c f4       	brge	.+6      	; 0x27c <turn_player+0x46>
     276:	89 2b       	or	r24, r25
     278:	c9 f0       	breq	.+50     	; 0x2ac <turn_player+0x76>
		case RIGHT:
		if (player.direction == UP || player.direction == DOWN)
		player.direction = direction;
		break;
	}
}
     27a:	31 c0       	rjmp	.+98     	; 0x2de <turn_player+0xa8>

/* Changes the player's direction: will be applied in game_processing() */
void turn_player(Position player, Direction direction)
{

	switch (direction) {
     27c:	82 30       	cpi	r24, 0x02	; 2
     27e:	91 05       	cpc	r25, r1
     280:	19 f0       	breq	.+6      	; 0x288 <turn_player+0x52>
     282:	03 97       	sbiw	r24, 0x03	; 3
     284:	51 f0       	breq	.+20     	; 0x29a <turn_player+0x64>
		case RIGHT:
		if (player.direction == UP || player.direction == DOWN)
		player.direction = direction;
		break;
	}
}
     286:	2b c0       	rjmp	.+86     	; 0x2de <turn_player+0xa8>
void turn_player(Position player, Direction direction)
{

	switch (direction) {
		case UP:
		if (player.direction == LEFT || player.direction == RIGHT)
     288:	8d 81       	ldd	r24, Y+5	; 0x05
     28a:	88 23       	and	r24, r24
     28c:	19 f0       	breq	.+6      	; 0x294 <turn_player+0x5e>
     28e:	8d 81       	ldd	r24, Y+5	; 0x05
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	f1 f4       	brne	.+60     	; 0x2d0 <turn_player+0x9a>
		player.direction = direction;
     294:	8a 85       	ldd	r24, Y+10	; 0x0a
     296:	8d 83       	std	Y+5, r24	; 0x05
		break;
     298:	1b c0       	rjmp	.+54     	; 0x2d0 <turn_player+0x9a>
		case DOWN:
		if (player.direction == LEFT || player.direction == RIGHT)
     29a:	8d 81       	ldd	r24, Y+5	; 0x05
     29c:	88 23       	and	r24, r24
     29e:	19 f0       	breq	.+6      	; 0x2a6 <turn_player+0x70>
     2a0:	8d 81       	ldd	r24, Y+5	; 0x05
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	b9 f4       	brne	.+46     	; 0x2d4 <turn_player+0x9e>
		player.direction = direction;
     2a6:	8a 85       	ldd	r24, Y+10	; 0x0a
     2a8:	8d 83       	std	Y+5, r24	; 0x05
		break;
     2aa:	14 c0       	rjmp	.+40     	; 0x2d4 <turn_player+0x9e>
		case LEFT:
		if (player.direction == UP || player.direction == DOWN)
     2ac:	8d 81       	ldd	r24, Y+5	; 0x05
     2ae:	82 30       	cpi	r24, 0x02	; 2
     2b0:	19 f0       	breq	.+6      	; 0x2b8 <turn_player+0x82>
     2b2:	8d 81       	ldd	r24, Y+5	; 0x05
     2b4:	83 30       	cpi	r24, 0x03	; 3
     2b6:	81 f4       	brne	.+32     	; 0x2d8 <turn_player+0xa2>
		player.direction = direction;
     2b8:	8a 85       	ldd	r24, Y+10	; 0x0a
     2ba:	8d 83       	std	Y+5, r24	; 0x05
		break;
     2bc:	0d c0       	rjmp	.+26     	; 0x2d8 <turn_player+0xa2>
		case RIGHT:
		if (player.direction == UP || player.direction == DOWN)
     2be:	8d 81       	ldd	r24, Y+5	; 0x05
     2c0:	82 30       	cpi	r24, 0x02	; 2
     2c2:	19 f0       	breq	.+6      	; 0x2ca <turn_player+0x94>
     2c4:	8d 81       	ldd	r24, Y+5	; 0x05
     2c6:	83 30       	cpi	r24, 0x03	; 3
     2c8:	49 f4       	brne	.+18     	; 0x2dc <turn_player+0xa6>
		player.direction = direction;
     2ca:	8a 85       	ldd	r24, Y+10	; 0x0a
     2cc:	8d 83       	std	Y+5, r24	; 0x05
		break;
     2ce:	06 c0       	rjmp	.+12     	; 0x2dc <turn_player+0xa6>

	switch (direction) {
		case UP:
		if (player.direction == LEFT || player.direction == RIGHT)
		player.direction = direction;
		break;
     2d0:	00 00       	nop
     2d2:	05 c0       	rjmp	.+10     	; 0x2de <turn_player+0xa8>
		case DOWN:
		if (player.direction == LEFT || player.direction == RIGHT)
		player.direction = direction;
		break;
     2d4:	00 00       	nop
     2d6:	03 c0       	rjmp	.+6      	; 0x2de <turn_player+0xa8>
		case LEFT:
		if (player.direction == UP || player.direction == DOWN)
		player.direction = direction;
		break;
     2d8:	00 00       	nop
     2da:	01 c0       	rjmp	.+2      	; 0x2de <turn_player+0xa8>
		case RIGHT:
		if (player.direction == UP || player.direction == DOWN)
		player.direction = direction;
		break;
     2dc:	00 00       	nop
	}
}
     2de:	00 00       	nop
     2e0:	2a 96       	adiw	r28, 0x0a	; 10
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	cd bf       	out	0x3d, r28	; 61
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	ef 90       	pop	r14
     2f6:	08 95       	ret

000002f8 <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
	// Set SER to 1
	PORTD |= _BV(PORTD2);
     300:	8b e2       	ldi	r24, 0x2B	; 43
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	2b e2       	ldi	r18, 0x2B	; 43
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	f9 01       	movw	r30, r18
     30a:	20 81       	ld	r18, Z
     30c:	24 60       	ori	r18, 0x04	; 4
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18
}
     312:	00 00       	nop
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
	// one SCK pulse
	PORTD |= _BV(PORTD5);
     322:	8b e2       	ldi	r24, 0x2B	; 43
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	2b e2       	ldi	r18, 0x2B	; 43
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	f9 01       	movw	r30, r18
     32c:	20 81       	ld	r18, Z
     32e:	20 62       	ori	r18, 0x20	; 32
     330:	fc 01       	movw	r30, r24
     332:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     334:	8b e2       	ldi	r24, 0x2B	; 43
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	2b e2       	ldi	r18, 0x2B	; 43
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	f9 01       	movw	r30, r18
     33e:	20 81       	ld	r18, Z
     340:	2f 7d       	andi	r18, 0xDF	; 223
     342:	fc 01       	movw	r30, r24
     344:	20 83       	st	Z, r18
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
     346:	8b e2       	ldi	r24, 0x2B	; 43
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	2b e2       	ldi	r18, 0x2B	; 43
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	f9 01       	movw	r30, r18
     350:	20 81       	ld	r18, Z
     352:	20 61       	ori	r18, 0x10	; 16
     354:	fc 01       	movw	r30, r24
     356:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     358:	8b e2       	ldi	r24, 0x2B	; 43
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	2b e2       	ldi	r18, 0x2B	; 43
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	f9 01       	movw	r30, r18
     362:	20 81       	ld	r18, Z
     364:	2f 7e       	andi	r18, 0xEF	; 239
     366:	fc 01       	movw	r30, r24
     368:	20 83       	st	Z, r18
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
     36a:	8b e2       	ldi	r24, 0x2B	; 43
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	2b e2       	ldi	r18, 0x2B	; 43
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	f9 01       	movw	r30, r18
     374:	20 81       	ld	r18, Z
     376:	2b 7f       	andi	r18, 0xFB	; 251
     378:	fc 01       	movw	r30, r24
     37a:	20 83       	st	Z, r18
}
     37c:	00 00       	nop
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <load_col_value>:

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	00 d0       	rcall	.+0      	; 0x38a <load_col_value+0x6>
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	9a 83       	std	Y+2, r25	; 0x02
     390:	89 83       	std	Y+1, r24	; 0x01
	PORTA = ~(col_value & 0xFF);
     392:	82 e2       	ldi	r24, 0x22	; 34
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	29 81       	ldd	r18, Y+1	; 0x01
     398:	20 95       	com	r18
     39a:	fc 01       	movw	r30, r24
     39c:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     39e:	85 e2       	ldi	r24, 0x25	; 37
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	25 e2       	ldi	r18, 0x25	; 37
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	f9 01       	movw	r30, r18
     3a8:	20 81       	ld	r18, Z
     3aa:	23 60       	ori	r18, 0x03	; 3
     3ac:	fc 01       	movw	r30, r24
     3ae:	20 83       	st	Z, r18
	PORTB &= ~((col_value >> 8) & 0x03);
     3b0:	85 e2       	ldi	r24, 0x25	; 37
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	25 e2       	ldi	r18, 0x25	; 37
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	f9 01       	movw	r30, r18
     3ba:	40 81       	ld	r20, Z
     3bc:	29 81       	ldd	r18, Y+1	; 0x01
     3be:	3a 81       	ldd	r19, Y+2	; 0x02
     3c0:	23 2f       	mov	r18, r19
     3c2:	33 27       	eor	r19, r19
     3c4:	23 70       	andi	r18, 0x03	; 3
     3c6:	20 95       	com	r18
     3c8:	24 23       	and	r18, r20
     3ca:	fc 01       	movw	r30, r24
     3cc:	20 83       	st	Z, r18
}
     3ce:	00 00       	nop
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

000003da <handle_display>:

//-----------------------------------------
void handle_display(void)
{
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
	static uint8_t col = 0;
	
	if (col == 0)
     3e2:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <col.2836>
     3e6:	88 23       	and	r24, r24
     3e8:	11 f4       	brne	.+4      	; 0x3ee <handle_display+0x14>
	prepare_shiftregister();
     3ea:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <prepare_shiftregister>
	
	load_col_value(frame_buffer[col]);
     3ee:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <col.2836>
     3f2:	88 2f       	mov	r24, r24
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
     3fa:	8c 5c       	subi	r24, 0xCC	; 204
     3fc:	9e 4f       	sbci	r25, 0xFE	; 254
     3fe:	fc 01       	movw	r30, r24
     400:	80 81       	ld	r24, Z
     402:	91 81       	ldd	r25, Z+1	; 0x01
     404:	0e 94 c2 01 	call	0x384	; 0x384 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     408:	0e 94 8d 01 	call	0x31a	; 0x31a <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	if (col++ > 13)
     40c:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <col.2836>
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	98 0f       	add	r25, r24
     414:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <col.2836>
     418:	8e 30       	cpi	r24, 0x0E	; 14
     41a:	10 f0       	brcs	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	col = 0;
     41c:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <col.2836>
}
     420:	00 00       	nop
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
	//
}
     430:	00 00       	nop
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <main>:

//-----------------------------------------
int main(void)
{
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	1f 92       	push	r1
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     448:	0e 94 0f 03 	call	0x61e	; 0x61e <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     44c:	8b e2       	ldi	r24, 0x2B	; 43
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	2b e2       	ldi	r18, 0x2B	; 43
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	f9 01       	movw	r30, r18
     456:	20 81       	ld	r18, Z
     458:	2f 7b       	andi	r18, 0xBF	; 191
     45a:	fc 01       	movw	r30, r24
     45c:	20 83       	st	Z, r18

	/* Semaphores creation */
	xGameStateSemaphore = xSemaphoreCreateMutex();
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <xQueueCreateMutex>
     464:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <xGameStateSemaphore+0x1>
     468:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <xGameStateSemaphore>
	xPlayerOneSemaphore = xSemaphoreCreateMutex();
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <xQueueCreateMutex>
     472:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <xPlayerOneSemaphore+0x1>
     476:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <xPlayerOneSemaphore>
	xPlayerTwoSemaphore = xSemaphoreCreateMutex();
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <xQueueCreateMutex>
     480:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <xPlayerTwoSemaphore+0x1>
     484:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <xPlayerTwoSemaphore>
	xGameOverSemaphore = xSemaphoreCreateMutex();
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <xQueueCreateMutex>
     48e:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <xGameOverSemaphore+0x1>
     492:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <xGameOverSemaphore>

	BaseType_t taskReadJoystick = xTaskCreate(read_joystick, (const char*)"Read joystick", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     496:	e1 2c       	mov	r14, r1
     498:	f1 2c       	mov	r15, r1
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	45 e5       	ldi	r20, 0x55	; 85
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	61 e2       	ldi	r22, 0x21	; 33
     4a6:	71 e0       	ldi	r23, 0x01	; 1
     4a8:	8d e5       	ldi	r24, 0x5D	; 93
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <xTaskCreate>
     4b0:	89 83       	std	Y+1, r24	; 0x01


	// Start the display handler timer
	init_display_timer(handle_display);
     4b2:	8d ee       	ldi	r24, 0xED	; 237
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	0e 94 8b 02 	call	0x516	; 0x516 <init_display_timer>
	
	sei();
     4ba:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
     4bc:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <vTaskStartScheduler>
	
	//Should never reach here
	while (1) {}
     4c0:	ff cf       	rjmp	.-2      	; 0x4c0 <main+0x88>

000004c2 <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
	_x_rx_com_queue = x_rx_queue;
}
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	00 d0       	rcall	.+0      	; 0x4c8 <_com_call_back+0x6>
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <_com_call_back+0x8>
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	9b 83       	std	Y+3, r25	; 0x03
     4d0:	8a 83       	std	Y+2, r24	; 0x02
     4d2:	6c 83       	std	Y+4, r22	; 0x04
     4d4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_x_rx_com_queue>
     4d8:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_x_rx_com_queue+0x1>
     4dc:	89 2b       	or	r24, r25
     4de:	99 f0       	breq	.+38     	; 0x506 <_com_call_back+0x44>
     4e0:	19 82       	std	Y+1, r1	; 0x01
     4e2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_x_rx_com_queue>
     4e6:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_x_rx_com_queue+0x1>
     4ea:	be 01       	movw	r22, r28
     4ec:	6c 5f       	subi	r22, 0xFC	; 252
     4ee:	7f 4f       	sbci	r23, 0xFF	; 255
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	ae 01       	movw	r20, r28
     4f4:	4f 5f       	subi	r20, 0xFF	; 255
     4f6:	5f 4f       	sbci	r21, 0xFF	; 255
     4f8:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <xQueueGenericSendFromISR>
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	88 23       	and	r24, r24
     500:	11 f0       	breq	.+4      	; 0x506 <_com_call_back+0x44>
     502:	0e 94 af 07 	call	0xf5e	; 0xf5e <vPortYield>
     506:	00 00       	nop
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <init_display_timer>:

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	00 d0       	rcall	.+0      	; 0x51c <init_display_timer+0x6>
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	9a 83       	std	Y+2, r25	; 0x02
     522:	89 83       	std	Y+1, r24	; 0x01
	cb_ptr = cb;
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	9a 81       	ldd	r25, Y+2	; 0x02
     528:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <cb_ptr+0x1>
     52c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
     530:	87 e4       	ldi	r24, 0x47	; 71
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	2a e0       	ldi	r18, 0x0A	; 10
     536:	fc 01       	movw	r30, r24
     538:	20 83       	st	Z, r18
	TCCR0A |= _BV(WGM01); // Mode 2
     53a:	84 e4       	ldi	r24, 0x44	; 68
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	24 e4       	ldi	r18, 0x44	; 68
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	f9 01       	movw	r30, r18
     544:	20 81       	ld	r18, Z
     546:	22 60       	ori	r18, 0x02	; 2
     548:	fc 01       	movw	r30, r24
     54a:	20 83       	st	Z, r18
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
     54c:	8e e6       	ldi	r24, 0x6E	; 110
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	2e e6       	ldi	r18, 0x6E	; 110
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	f9 01       	movw	r30, r18
     556:	20 81       	ld	r18, Z
     558:	22 60       	ori	r18, 0x02	; 2
     55a:	fc 01       	movw	r30, r24
     55c:	20 83       	st	Z, r18
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
     55e:	85 e4       	ldi	r24, 0x45	; 69
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	25 e4       	ldi	r18, 0x45	; 69
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	f9 01       	movw	r30, r18
     568:	20 81       	ld	r18, Z
     56a:	25 60       	ori	r18, 0x05	; 5
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
}
     570:	00 00       	nop
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <__vector_16>:

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
     57c:	1f 92       	push	r1
     57e:	0f 92       	push	r0
     580:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     584:	0f 92       	push	r0
     586:	11 24       	eor	r1, r1
     588:	2f 93       	push	r18
     58a:	3f 93       	push	r19
     58c:	4f 93       	push	r20
     58e:	5f 93       	push	r21
     590:	6f 93       	push	r22
     592:	7f 93       	push	r23
     594:	8f 93       	push	r24
     596:	9f 93       	push	r25
     598:	af 93       	push	r26
     59a:	bf 93       	push	r27
     59c:	ef 93       	push	r30
     59e:	ff 93       	push	r31
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
	if (cb_ptr)
     5a8:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <cb_ptr>
     5ac:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <cb_ptr+0x1>
     5b0:	89 2b       	or	r24, r25
     5b2:	31 f0       	breq	.+12     	; 0x5c0 <__vector_16+0x44>
	{
		cb_ptr();
     5b4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <cb_ptr>
     5b8:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <cb_ptr+0x1>
     5bc:	fc 01       	movw	r30, r24
     5be:	09 95       	icall
	}
}
     5c0:	00 00       	nop
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	ff 91       	pop	r31
     5c8:	ef 91       	pop	r30
     5ca:	bf 91       	pop	r27
     5cc:	af 91       	pop	r26
     5ce:	9f 91       	pop	r25
     5d0:	8f 91       	pop	r24
     5d2:	7f 91       	pop	r23
     5d4:	6f 91       	pop	r22
     5d6:	5f 91       	pop	r21
     5d8:	4f 91       	pop	r20
     5da:	3f 91       	pop	r19
     5dc:	2f 91       	pop	r18
     5de:	0f 90       	pop	r0
     5e0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     5e4:	0f 90       	pop	r0
     5e6:	1f 90       	pop	r1
     5e8:	18 95       	reti

000005ea <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	00 d0       	rcall	.+0      	; 0x5f0 <com_send_bytes+0x6>
     5f0:	1f 92       	push	r1
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
     5f6:	9a 83       	std	Y+2, r25	; 0x02
     5f8:	89 83       	std	Y+1, r24	; 0x01
     5fa:	6b 83       	std	Y+3, r22	; 0x03
	serial_send_bytes(_com_serial_instance, bytes, len);
     5fc:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_com_serial_instance>
     600:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_com_serial_instance+0x1>
     604:	29 81       	ldd	r18, Y+1	; 0x01
     606:	3a 81       	ldd	r19, Y+2	; 0x02
     608:	4b 81       	ldd	r20, Y+3	; 0x03
     60a:	b9 01       	movw	r22, r18
     60c:	0e 94 09 0a 	call	0x1412	; 0x1412 <serial_send_bytes>
}
     610:	00 00       	nop
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     61e:	8f 92       	push	r8
     620:	9f 92       	push	r9
     622:	af 92       	push	r10
     624:	bf 92       	push	r11
     626:	cf 92       	push	r12
     628:	df 92       	push	r13
     62a:	ef 92       	push	r14
     62c:	0f 93       	push	r16
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     636:	88 e6       	ldi	r24, 0x68	; 104
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	0e 94 c7 03 	call	0x78e	; 0x78e <buffer_init>
	buffer_init(&_com_tx_buffer);
     63e:	8b e8       	ldi	r24, 0x8B	; 139
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 c7 03 	call	0x78e	; 0x78e <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     646:	0f 2e       	mov	r0, r31
     648:	f1 e6       	ldi	r31, 0x61	; 97
     64a:	8f 2e       	mov	r8, r31
     64c:	f2 e0       	ldi	r31, 0x02	; 2
     64e:	9f 2e       	mov	r9, r31
     650:	f0 2d       	mov	r31, r0
     652:	0f 2e       	mov	r0, r31
     654:	fb e8       	ldi	r31, 0x8B	; 139
     656:	af 2e       	mov	r10, r31
     658:	f1 e0       	ldi	r31, 0x01	; 1
     65a:	bf 2e       	mov	r11, r31
     65c:	f0 2d       	mov	r31, r0
     65e:	0f 2e       	mov	r0, r31
     660:	f8 e6       	ldi	r31, 0x68	; 104
     662:	cf 2e       	mov	r12, r31
     664:	f1 e0       	ldi	r31, 0x01	; 1
     666:	df 2e       	mov	r13, r31
     668:	f0 2d       	mov	r31, r0
     66a:	e1 2c       	mov	r14, r1
     66c:	00 e0       	ldi	r16, 0x00	; 0
     66e:	23 e0       	ldi	r18, 0x03	; 3
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	52 ec       	ldi	r21, 0xC2	; 194
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0e 94 48 09 	call	0x1290	; 0x1290 <serial_new_instance>
     67e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <_com_serial_instance+0x1>
     682:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     686:	88 e2       	ldi	r24, 0x28	; 40
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	28 e2       	ldi	r18, 0x28	; 40
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	f9 01       	movw	r30, r18
     690:	20 81       	ld	r18, Z
     692:	23 6c       	ori	r18, 0xC3	; 195
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
     698:	8b e2       	ldi	r24, 0x2B	; 43
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	2b e2       	ldi	r18, 0x2B	; 43
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	f9 01       	movw	r30, r18
     6a2:	20 81       	ld	r18, Z
     6a4:	28 60       	ori	r18, 0x08	; 8
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     6aa:	8a e2       	ldi	r24, 0x2A	; 42
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	2a e2       	ldi	r18, 0x2A	; 42
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	f9 01       	movw	r30, r18
     6b4:	20 81       	ld	r18, Z
     6b6:	24 67       	ori	r18, 0x74	; 116
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     6bc:	8b e2       	ldi	r24, 0x2B	; 43
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	2b e2       	ldi	r18, 0x2B	; 43
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	f9 01       	movw	r30, r18
     6c6:	20 81       	ld	r18, Z
     6c8:	20 64       	ori	r18, 0x40	; 64
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
     6ce:	81 e2       	ldi	r24, 0x21	; 33
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	fc 01       	movw	r30, r24
     6d4:	80 81       	ld	r24, Z
     6d6:	81 e2       	ldi	r24, 0x21	; 33
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	2f ef       	ldi	r18, 0xFF	; 255
     6dc:	fc 01       	movw	r30, r24
     6de:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
     6e0:	84 e2       	ldi	r24, 0x24	; 36
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	24 e2       	ldi	r18, 0x24	; 36
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	f9 01       	movw	r30, r18
     6ea:	20 81       	ld	r18, Z
     6ec:	23 60       	ori	r18, 0x03	; 3
     6ee:	fc 01       	movw	r30, r24
     6f0:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     6f2:	84 e2       	ldi	r24, 0x24	; 36
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	24 e2       	ldi	r18, 0x24	; 36
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	f9 01       	movw	r30, r18
     6fc:	20 81       	ld	r18, Z
     6fe:	2c 63       	ori	r18, 0x3C	; 60
     700:	fc 01       	movw	r30, r24
     702:	20 83       	st	Z, r18
}
     704:	00 00       	nop
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	0f 91       	pop	r16
     70c:	ef 90       	pop	r14
     70e:	df 90       	pop	r13
     710:	cf 90       	pop	r12
     712:	bf 90       	pop	r11
     714:	af 90       	pop	r10
     716:	9f 90       	pop	r9
     718:	8f 90       	pop	r8
     71a:	08 95       	ret

0000071c <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	1f 92       	push	r1
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
     728:	85 e2       	ldi	r24, 0x25	; 37
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	25 e2       	ldi	r18, 0x25	; 37
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	f9 01       	movw	r30, r18
     732:	20 81       	ld	r18, Z
     734:	23 7c       	andi	r18, 0xC3	; 195
     736:	fc 01       	movw	r30, r24
     738:	20 83       	st	Z, r18
		PORTB |= task_no << 2;
     73a:	85 e2       	ldi	r24, 0x25	; 37
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	25 e2       	ldi	r18, 0x25	; 37
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	f9 01       	movw	r30, r18
     744:	20 81       	ld	r18, Z
     746:	42 2f       	mov	r20, r18
     748:	29 81       	ldd	r18, Y+1	; 0x01
     74a:	22 2f       	mov	r18, r18
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	22 0f       	add	r18, r18
     750:	33 1f       	adc	r19, r19
     752:	22 0f       	add	r18, r18
     754:	33 1f       	adc	r19, r19
     756:	24 2b       	or	r18, r20
     758:	fc 01       	movw	r30, r24
     75a:	20 83       	st	Z, r18
	}
     75c:	00 00       	nop
     75e:	0f 90       	pop	r0
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	1f 92       	push	r1
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
     772:	85 e2       	ldi	r24, 0x25	; 37
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	25 e2       	ldi	r18, 0x25	; 37
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	f9 01       	movw	r30, r18
     77c:	20 81       	ld	r18, Z
     77e:	23 7c       	andi	r18, 0xC3	; 195
     780:	fc 01       	movw	r30, r24
     782:	20 83       	st	Z, r18
	}
     784:	00 00       	nop
     786:	0f 90       	pop	r0
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	00 d0       	rcall	.+0      	; 0x794 <buffer_init+0x6>
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	9a 83       	std	Y+2, r25	; 0x02
     79a:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	9a 81       	ldd	r25, Y+2	; 0x02
     7a0:	fc 01       	movw	r30, r24
     7a2:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	9a 81       	ldd	r25, Y+2	; 0x02
     7a8:	fc 01       	movw	r30, r24
     7aa:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	9a 81       	ldd	r25, Y+2	; 0x02
     7b0:	fc 01       	movw	r30, r24
     7b2:	12 a2       	std	Z+34, r1	; 0x22
}
     7b4:	00 00       	nop
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <buffer_get_item+0x6>
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <buffer_get_item+0x8>
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	9a 83       	std	Y+2, r25	; 0x02
     7ce:	89 83       	std	Y+1, r24	; 0x01
     7d0:	7c 83       	std	Y+4, r23	; 0x04
     7d2:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	9a 81       	ldd	r25, Y+2	; 0x02
     7d8:	fc 01       	movw	r30, r24
     7da:	82 a1       	ldd	r24, Z+34	; 0x22
     7dc:	88 23       	and	r24, r24
     7de:	81 f1       	breq	.+96     	; 0x840 <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	fc 01       	movw	r30, r24
     7e6:	81 a1       	ldd	r24, Z+33	; 0x21
     7e8:	88 2f       	mov	r24, r24
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	29 81       	ldd	r18, Y+1	; 0x01
     7ee:	3a 81       	ldd	r19, Y+2	; 0x02
     7f0:	82 0f       	add	r24, r18
     7f2:	93 1f       	adc	r25, r19
     7f4:	fc 01       	movw	r30, r24
     7f6:	20 81       	ld	r18, Z
     7f8:	8b 81       	ldd	r24, Y+3	; 0x03
     7fa:	9c 81       	ldd	r25, Y+4	; 0x04
     7fc:	fc 01       	movw	r30, r24
     7fe:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	fc 01       	movw	r30, r24
     806:	81 a1       	ldd	r24, Z+33	; 0x21
     808:	88 2f       	mov	r24, r24
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	8f 71       	andi	r24, 0x1F	; 31
     810:	90 78       	andi	r25, 0x80	; 128
     812:	99 23       	and	r25, r25
     814:	24 f4       	brge	.+8      	; 0x81e <buffer_get_item+0x5e>
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	80 6e       	ori	r24, 0xE0	; 224
     81a:	9f 6f       	ori	r25, 0xFF	; 255
     81c:	01 96       	adiw	r24, 0x01	; 1
     81e:	28 2f       	mov	r18, r24
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	fc 01       	movw	r30, r24
     826:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	9a 81       	ldd	r25, Y+2	; 0x02
     82c:	fc 01       	movw	r30, r24
     82e:	82 a1       	ldd	r24, Z+34	; 0x22
     830:	2f ef       	ldi	r18, 0xFF	; 255
     832:	28 0f       	add	r18, r24
     834:	89 81       	ldd	r24, Y+1	; 0x01
     836:	9a 81       	ldd	r25, Y+2	; 0x02
     838:	fc 01       	movw	r30, r24
     83a:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	01 c0       	rjmp	.+2      	; 0x842 <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
     840:	81 e0       	ldi	r24, 0x01	; 1
}
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <buffer_put_item+0x6>
     856:	1f 92       	push	r1
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	9a 83       	std	Y+2, r25	; 0x02
     85e:	89 83       	std	Y+1, r24	; 0x01
     860:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	9a 81       	ldd	r25, Y+2	; 0x02
     866:	fc 01       	movw	r30, r24
     868:	82 a1       	ldd	r24, Z+34	; 0x22
     86a:	80 32       	cpi	r24, 0x20	; 32
     86c:	68 f5       	brcc	.+90     	; 0x8c8 <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	9a 81       	ldd	r25, Y+2	; 0x02
     872:	fc 01       	movw	r30, r24
     874:	80 a1       	ldd	r24, Z+32	; 0x20
     876:	88 2f       	mov	r24, r24
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	29 81       	ldd	r18, Y+1	; 0x01
     87c:	3a 81       	ldd	r19, Y+2	; 0x02
     87e:	82 0f       	add	r24, r18
     880:	93 1f       	adc	r25, r19
     882:	2b 81       	ldd	r18, Y+3	; 0x03
     884:	fc 01       	movw	r30, r24
     886:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	9a 81       	ldd	r25, Y+2	; 0x02
     88c:	fc 01       	movw	r30, r24
     88e:	80 a1       	ldd	r24, Z+32	; 0x20
     890:	88 2f       	mov	r24, r24
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	01 96       	adiw	r24, 0x01	; 1
     896:	8f 71       	andi	r24, 0x1F	; 31
     898:	90 78       	andi	r25, 0x80	; 128
     89a:	99 23       	and	r25, r25
     89c:	24 f4       	brge	.+8      	; 0x8a6 <buffer_put_item+0x56>
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	80 6e       	ori	r24, 0xE0	; 224
     8a2:	9f 6f       	ori	r25, 0xFF	; 255
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	28 2f       	mov	r18, r24
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	fc 01       	movw	r30, r24
     8ae:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	9a 81       	ldd	r25, Y+2	; 0x02
     8b4:	fc 01       	movw	r30, r24
     8b6:	82 a1       	ldd	r24, Z+34	; 0x22
     8b8:	21 e0       	ldi	r18, 0x01	; 1
     8ba:	28 0f       	add	r18, r24
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	9a 81       	ldd	r25, Y+2	; 0x02
     8c0:	fc 01       	movw	r30, r24
     8c2:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
     8c8:	82 e0       	ldi	r24, 0x02	; 2
}
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	08 95       	ret

000008d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	00 d0       	rcall	.+0      	; 0x8dc <vListInitialise+0x6>
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	9a 83       	std	Y+2, r25	; 0x02
     8e2:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	9a 81       	ldd	r25, Y+2	; 0x02
     8e8:	9c 01       	movw	r18, r24
     8ea:	2d 5f       	subi	r18, 0xFD	; 253
     8ec:	3f 4f       	sbci	r19, 0xFF	; 255
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	9a 81       	ldd	r25, Y+2	; 0x02
     8f2:	fc 01       	movw	r30, r24
     8f4:	32 83       	std	Z+2, r19	; 0x02
     8f6:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	9a 81       	ldd	r25, Y+2	; 0x02
     8fc:	2f ef       	ldi	r18, 0xFF	; 255
     8fe:	3f ef       	ldi	r19, 0xFF	; 255
     900:	fc 01       	movw	r30, r24
     902:	34 83       	std	Z+4, r19	; 0x04
     904:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	9a 81       	ldd	r25, Y+2	; 0x02
     90a:	9c 01       	movw	r18, r24
     90c:	2d 5f       	subi	r18, 0xFD	; 253
     90e:	3f 4f       	sbci	r19, 0xFF	; 255
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	9a 81       	ldd	r25, Y+2	; 0x02
     914:	fc 01       	movw	r30, r24
     916:	36 83       	std	Z+6, r19	; 0x06
     918:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	9a 81       	ldd	r25, Y+2	; 0x02
     91e:	9c 01       	movw	r18, r24
     920:	2d 5f       	subi	r18, 0xFD	; 253
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	9a 81       	ldd	r25, Y+2	; 0x02
     928:	fc 01       	movw	r30, r24
     92a:	30 87       	std	Z+8, r19	; 0x08
     92c:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	9a 81       	ldd	r25, Y+2	; 0x02
     932:	fc 01       	movw	r30, r24
     934:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     936:	00 00       	nop
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	08 95       	ret

00000942 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	00 d0       	rcall	.+0      	; 0x948 <vListInitialiseItem+0x6>
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	9a 83       	std	Y+2, r25	; 0x02
     94e:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	9a 81       	ldd	r25, Y+2	; 0x02
     954:	fc 01       	movw	r30, r24
     956:	11 86       	std	Z+9, r1	; 0x09
     958:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     95a:	00 00       	nop
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	00 d0       	rcall	.+0      	; 0x96c <vListInsertEnd+0x6>
     96c:	00 d0       	rcall	.+0      	; 0x96e <vListInsertEnd+0x8>
     96e:	00 d0       	rcall	.+0      	; 0x970 <vListInsertEnd+0xa>
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	9c 83       	std	Y+4, r25	; 0x04
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	7e 83       	std	Y+6, r23	; 0x06
     97a:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     97c:	8b 81       	ldd	r24, Y+3	; 0x03
     97e:	9c 81       	ldd	r25, Y+4	; 0x04
     980:	fc 01       	movw	r30, r24
     982:	81 81       	ldd	r24, Z+1	; 0x01
     984:	92 81       	ldd	r25, Z+2	; 0x02
     986:	9a 83       	std	Y+2, r25	; 0x02
     988:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     98a:	8d 81       	ldd	r24, Y+5	; 0x05
     98c:	9e 81       	ldd	r25, Y+6	; 0x06
     98e:	29 81       	ldd	r18, Y+1	; 0x01
     990:	3a 81       	ldd	r19, Y+2	; 0x02
     992:	fc 01       	movw	r30, r24
     994:	33 83       	std	Z+3, r19	; 0x03
     996:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	9a 81       	ldd	r25, Y+2	; 0x02
     99c:	fc 01       	movw	r30, r24
     99e:	24 81       	ldd	r18, Z+4	; 0x04
     9a0:	35 81       	ldd	r19, Z+5	; 0x05
     9a2:	8d 81       	ldd	r24, Y+5	; 0x05
     9a4:	9e 81       	ldd	r25, Y+6	; 0x06
     9a6:	fc 01       	movw	r30, r24
     9a8:	35 83       	std	Z+5, r19	; 0x05
     9aa:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	9a 81       	ldd	r25, Y+2	; 0x02
     9b0:	fc 01       	movw	r30, r24
     9b2:	84 81       	ldd	r24, Z+4	; 0x04
     9b4:	95 81       	ldd	r25, Z+5	; 0x05
     9b6:	2d 81       	ldd	r18, Y+5	; 0x05
     9b8:	3e 81       	ldd	r19, Y+6	; 0x06
     9ba:	fc 01       	movw	r30, r24
     9bc:	33 83       	std	Z+3, r19	; 0x03
     9be:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	9a 81       	ldd	r25, Y+2	; 0x02
     9c4:	2d 81       	ldd	r18, Y+5	; 0x05
     9c6:	3e 81       	ldd	r19, Y+6	; 0x06
     9c8:	fc 01       	movw	r30, r24
     9ca:	35 83       	std	Z+5, r19	; 0x05
     9cc:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     9ce:	8d 81       	ldd	r24, Y+5	; 0x05
     9d0:	9e 81       	ldd	r25, Y+6	; 0x06
     9d2:	2b 81       	ldd	r18, Y+3	; 0x03
     9d4:	3c 81       	ldd	r19, Y+4	; 0x04
     9d6:	fc 01       	movw	r30, r24
     9d8:	31 87       	std	Z+9, r19	; 0x09
     9da:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     9dc:	8b 81       	ldd	r24, Y+3	; 0x03
     9de:	9c 81       	ldd	r25, Y+4	; 0x04
     9e0:	fc 01       	movw	r30, r24
     9e2:	80 81       	ld	r24, Z
     9e4:	21 e0       	ldi	r18, 0x01	; 1
     9e6:	28 0f       	add	r18, r24
     9e8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ea:	9c 81       	ldd	r25, Y+4	; 0x04
     9ec:	fc 01       	movw	r30, r24
     9ee:	20 83       	st	Z, r18
}
     9f0:	00 00       	nop
     9f2:	26 96       	adiw	r28, 0x06	; 6
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	de bf       	out	0x3e, r29	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	cd bf       	out	0x3d, r28	; 61
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	28 97       	sbiw	r28, 0x08	; 8
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	de bf       	out	0x3e, r29	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	9e 83       	std	Y+6, r25	; 0x06
     a1a:	8d 83       	std	Y+5, r24	; 0x05
     a1c:	78 87       	std	Y+8, r23	; 0x08
     a1e:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     a20:	8f 81       	ldd	r24, Y+7	; 0x07
     a22:	98 85       	ldd	r25, Y+8	; 0x08
     a24:	fc 01       	movw	r30, r24
     a26:	80 81       	ld	r24, Z
     a28:	91 81       	ldd	r25, Z+1	; 0x01
     a2a:	9c 83       	std	Y+4, r25	; 0x04
     a2c:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     a2e:	8b 81       	ldd	r24, Y+3	; 0x03
     a30:	9c 81       	ldd	r25, Y+4	; 0x04
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	41 f4       	brne	.+16     	; 0xa46 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     a36:	8d 81       	ldd	r24, Y+5	; 0x05
     a38:	9e 81       	ldd	r25, Y+6	; 0x06
     a3a:	fc 01       	movw	r30, r24
     a3c:	87 81       	ldd	r24, Z+7	; 0x07
     a3e:	90 85       	ldd	r25, Z+8	; 0x08
     a40:	9a 83       	std	Y+2, r25	; 0x02
     a42:	89 83       	std	Y+1, r24	; 0x01
     a44:	1a c0       	rjmp	.+52     	; 0xa7a <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a46:	8d 81       	ldd	r24, Y+5	; 0x05
     a48:	9e 81       	ldd	r25, Y+6	; 0x06
     a4a:	03 96       	adiw	r24, 0x03	; 3
     a4c:	9a 83       	std	Y+2, r25	; 0x02
     a4e:	89 83       	std	Y+1, r24	; 0x01
     a50:	07 c0       	rjmp	.+14     	; 0xa60 <vListInsert+0x5c>
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	9a 81       	ldd	r25, Y+2	; 0x02
     a56:	fc 01       	movw	r30, r24
     a58:	82 81       	ldd	r24, Z+2	; 0x02
     a5a:	93 81       	ldd	r25, Z+3	; 0x03
     a5c:	9a 83       	std	Y+2, r25	; 0x02
     a5e:	89 83       	std	Y+1, r24	; 0x01
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	9a 81       	ldd	r25, Y+2	; 0x02
     a64:	fc 01       	movw	r30, r24
     a66:	82 81       	ldd	r24, Z+2	; 0x02
     a68:	93 81       	ldd	r25, Z+3	; 0x03
     a6a:	fc 01       	movw	r30, r24
     a6c:	20 81       	ld	r18, Z
     a6e:	31 81       	ldd	r19, Z+1	; 0x01
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	9c 81       	ldd	r25, Y+4	; 0x04
     a74:	82 17       	cp	r24, r18
     a76:	93 07       	cpc	r25, r19
     a78:	60 f7       	brcc	.-40     	; 0xa52 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	9a 81       	ldd	r25, Y+2	; 0x02
     a7e:	fc 01       	movw	r30, r24
     a80:	22 81       	ldd	r18, Z+2	; 0x02
     a82:	33 81       	ldd	r19, Z+3	; 0x03
     a84:	8f 81       	ldd	r24, Y+7	; 0x07
     a86:	98 85       	ldd	r25, Y+8	; 0x08
     a88:	fc 01       	movw	r30, r24
     a8a:	33 83       	std	Z+3, r19	; 0x03
     a8c:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a8e:	8f 81       	ldd	r24, Y+7	; 0x07
     a90:	98 85       	ldd	r25, Y+8	; 0x08
     a92:	fc 01       	movw	r30, r24
     a94:	82 81       	ldd	r24, Z+2	; 0x02
     a96:	93 81       	ldd	r25, Z+3	; 0x03
     a98:	2f 81       	ldd	r18, Y+7	; 0x07
     a9a:	38 85       	ldd	r19, Y+8	; 0x08
     a9c:	fc 01       	movw	r30, r24
     a9e:	35 83       	std	Z+5, r19	; 0x05
     aa0:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     aa2:	8f 81       	ldd	r24, Y+7	; 0x07
     aa4:	98 85       	ldd	r25, Y+8	; 0x08
     aa6:	29 81       	ldd	r18, Y+1	; 0x01
     aa8:	3a 81       	ldd	r19, Y+2	; 0x02
     aaa:	fc 01       	movw	r30, r24
     aac:	35 83       	std	Z+5, r19	; 0x05
     aae:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	9a 81       	ldd	r25, Y+2	; 0x02
     ab4:	2f 81       	ldd	r18, Y+7	; 0x07
     ab6:	38 85       	ldd	r19, Y+8	; 0x08
     ab8:	fc 01       	movw	r30, r24
     aba:	33 83       	std	Z+3, r19	; 0x03
     abc:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     abe:	8f 81       	ldd	r24, Y+7	; 0x07
     ac0:	98 85       	ldd	r25, Y+8	; 0x08
     ac2:	2d 81       	ldd	r18, Y+5	; 0x05
     ac4:	3e 81       	ldd	r19, Y+6	; 0x06
     ac6:	fc 01       	movw	r30, r24
     ac8:	31 87       	std	Z+9, r19	; 0x09
     aca:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     acc:	8d 81       	ldd	r24, Y+5	; 0x05
     ace:	9e 81       	ldd	r25, Y+6	; 0x06
     ad0:	fc 01       	movw	r30, r24
     ad2:	80 81       	ld	r24, Z
     ad4:	21 e0       	ldi	r18, 0x01	; 1
     ad6:	28 0f       	add	r18, r24
     ad8:	8d 81       	ldd	r24, Y+5	; 0x05
     ada:	9e 81       	ldd	r25, Y+6	; 0x06
     adc:	fc 01       	movw	r30, r24
     ade:	20 83       	st	Z, r18
}
     ae0:	00 00       	nop
     ae2:	28 96       	adiw	r28, 0x08	; 8
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	00 d0       	rcall	.+0      	; 0xafa <uxListRemove+0x6>
     afa:	00 d0       	rcall	.+0      	; 0xafc <uxListRemove+0x8>
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	9c 83       	std	Y+4, r25	; 0x04
     b02:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     b04:	8b 81       	ldd	r24, Y+3	; 0x03
     b06:	9c 81       	ldd	r25, Y+4	; 0x04
     b08:	fc 01       	movw	r30, r24
     b0a:	80 85       	ldd	r24, Z+8	; 0x08
     b0c:	91 85       	ldd	r25, Z+9	; 0x09
     b0e:	9a 83       	std	Y+2, r25	; 0x02
     b10:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b12:	8b 81       	ldd	r24, Y+3	; 0x03
     b14:	9c 81       	ldd	r25, Y+4	; 0x04
     b16:	fc 01       	movw	r30, r24
     b18:	82 81       	ldd	r24, Z+2	; 0x02
     b1a:	93 81       	ldd	r25, Z+3	; 0x03
     b1c:	2b 81       	ldd	r18, Y+3	; 0x03
     b1e:	3c 81       	ldd	r19, Y+4	; 0x04
     b20:	f9 01       	movw	r30, r18
     b22:	24 81       	ldd	r18, Z+4	; 0x04
     b24:	35 81       	ldd	r19, Z+5	; 0x05
     b26:	fc 01       	movw	r30, r24
     b28:	35 83       	std	Z+5, r19	; 0x05
     b2a:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     b2c:	8b 81       	ldd	r24, Y+3	; 0x03
     b2e:	9c 81       	ldd	r25, Y+4	; 0x04
     b30:	fc 01       	movw	r30, r24
     b32:	84 81       	ldd	r24, Z+4	; 0x04
     b34:	95 81       	ldd	r25, Z+5	; 0x05
     b36:	2b 81       	ldd	r18, Y+3	; 0x03
     b38:	3c 81       	ldd	r19, Y+4	; 0x04
     b3a:	f9 01       	movw	r30, r18
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	33 81       	ldd	r19, Z+3	; 0x03
     b40:	fc 01       	movw	r30, r24
     b42:	33 83       	std	Z+3, r19	; 0x03
     b44:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	fc 01       	movw	r30, r24
     b4c:	21 81       	ldd	r18, Z+1	; 0x01
     b4e:	32 81       	ldd	r19, Z+2	; 0x02
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	28 17       	cp	r18, r24
     b56:	39 07       	cpc	r19, r25
     b58:	51 f4       	brne	.+20     	; 0xb6e <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	9c 81       	ldd	r25, Y+4	; 0x04
     b5e:	fc 01       	movw	r30, r24
     b60:	24 81       	ldd	r18, Z+4	; 0x04
     b62:	35 81       	ldd	r19, Z+5	; 0x05
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	9a 81       	ldd	r25, Y+2	; 0x02
     b68:	fc 01       	movw	r30, r24
     b6a:	32 83       	std	Z+2, r19	; 0x02
     b6c:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	9c 81       	ldd	r25, Y+4	; 0x04
     b72:	fc 01       	movw	r30, r24
     b74:	11 86       	std	Z+9, r1	; 0x09
     b76:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	fc 01       	movw	r30, r24
     b7e:	80 81       	ld	r24, Z
     b80:	2f ef       	ldi	r18, 0xFF	; 255
     b82:	28 0f       	add	r18, r24
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	9a 81       	ldd	r25, Y+2	; 0x02
     b88:	fc 01       	movw	r30, r24
     b8a:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	9a 81       	ldd	r25, Y+2	; 0x02
     b90:	fc 01       	movw	r30, r24
     b92:	80 81       	ld	r24, Z
}
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	08 95       	ret

00000ba2 <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	28 97       	sbiw	r28, 0x08	; 8
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	9c 83       	std	Y+4, r25	; 0x04
     bb8:	8b 83       	std	Y+3, r24	; 0x03
     bba:	7e 83       	std	Y+6, r23	; 0x06
     bbc:	6d 83       	std	Y+5, r22	; 0x05
     bbe:	58 87       	std	Y+8, r21	; 0x08
     bc0:	4f 83       	std	Y+7, r20	; 0x07
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	21 e1       	ldi	r18, 0x11	; 17
     bc8:	fc 01       	movw	r30, r24
     bca:	20 83       	st	Z, r18
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	9c 81       	ldd	r25, Y+4	; 0x04
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	9c 83       	std	Y+4, r25	; 0x04
     bd4:	8b 83       	std	Y+3, r24	; 0x03
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	9c 81       	ldd	r25, Y+4	; 0x04
     bda:	22 e2       	ldi	r18, 0x22	; 34
     bdc:	fc 01       	movw	r30, r24
     bde:	20 83       	st	Z, r18
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	9c 81       	ldd	r25, Y+4	; 0x04
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	9c 83       	std	Y+4, r25	; 0x04
     be8:	8b 83       	std	Y+3, r24	; 0x03
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	9c 81       	ldd	r25, Y+4	; 0x04
     bee:	23 e3       	ldi	r18, 0x33	; 51
     bf0:	fc 01       	movw	r30, r24
     bf2:	20 83       	st	Z, r18
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	9c 81       	ldd	r25, Y+4	; 0x04
     bf8:	01 97       	sbiw	r24, 0x01	; 1
     bfa:	9c 83       	std	Y+4, r25	; 0x04
     bfc:	8b 83       	std	Y+3, r24	; 0x03
     bfe:	8d 81       	ldd	r24, Y+5	; 0x05
     c00:	9e 81       	ldd	r25, Y+6	; 0x06
     c02:	9a 83       	std	Y+2, r25	; 0x02
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	29 81       	ldd	r18, Y+1	; 0x01
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	9c 81       	ldd	r25, Y+4	; 0x04
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 83       	st	Z, r18
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	9c 81       	ldd	r25, Y+4	; 0x04
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	8b 83       	std	Y+3, r24	; 0x03
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	9a 81       	ldd	r25, Y+2	; 0x02
     c1e:	89 2f       	mov	r24, r25
     c20:	99 27       	eor	r25, r25
     c22:	9a 83       	std	Y+2, r25	; 0x02
     c24:	89 83       	std	Y+1, r24	; 0x01
     c26:	29 81       	ldd	r18, Y+1	; 0x01
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	9c 81       	ldd	r25, Y+4	; 0x04
     c2c:	fc 01       	movw	r30, r24
     c2e:	20 83       	st	Z, r18
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	fc 01       	movw	r30, r24
     c40:	10 82       	st	Z, r1
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	9c 83       	std	Y+4, r25	; 0x04
     c4a:	8b 83       	std	Y+3, r24	; 0x03
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	9c 81       	ldd	r25, Y+4	; 0x04
     c50:	20 e8       	ldi	r18, 0x80	; 128
     c52:	fc 01       	movw	r30, r24
     c54:	20 83       	st	Z, r18
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	9c 81       	ldd	r25, Y+4	; 0x04
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	9c 83       	std	Y+4, r25	; 0x04
     c5e:	8b 83       	std	Y+3, r24	; 0x03
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	9c 81       	ldd	r25, Y+4	; 0x04
     c64:	fc 01       	movw	r30, r24
     c66:	10 82       	st	Z, r1
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	9c 83       	std	Y+4, r25	; 0x04
     c70:	8b 83       	std	Y+3, r24	; 0x03
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	9c 81       	ldd	r25, Y+4	; 0x04
     c76:	22 e0       	ldi	r18, 0x02	; 2
     c78:	fc 01       	movw	r30, r24
     c7a:	20 83       	st	Z, r18
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	9c 81       	ldd	r25, Y+4	; 0x04
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	9c 83       	std	Y+4, r25	; 0x04
     c84:	8b 83       	std	Y+3, r24	; 0x03
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	23 e0       	ldi	r18, 0x03	; 3
     c8c:	fc 01       	movw	r30, r24
     c8e:	20 83       	st	Z, r18
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	9c 81       	ldd	r25, Y+4	; 0x04
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	9c 83       	std	Y+4, r25	; 0x04
     c98:	8b 83       	std	Y+3, r24	; 0x03
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	24 e0       	ldi	r18, 0x04	; 4
     ca0:	fc 01       	movw	r30, r24
     ca2:	20 83       	st	Z, r18
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	9c 81       	ldd	r25, Y+4	; 0x04
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	9c 83       	std	Y+4, r25	; 0x04
     cac:	8b 83       	std	Y+3, r24	; 0x03
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	9c 81       	ldd	r25, Y+4	; 0x04
     cb2:	25 e0       	ldi	r18, 0x05	; 5
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 83       	st	Z, r18
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	9c 83       	std	Y+4, r25	; 0x04
     cc0:	8b 83       	std	Y+3, r24	; 0x03
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	9c 81       	ldd	r25, Y+4	; 0x04
     cc6:	26 e0       	ldi	r18, 0x06	; 6
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	9c 83       	std	Y+4, r25	; 0x04
     cd4:	8b 83       	std	Y+3, r24	; 0x03
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	9c 81       	ldd	r25, Y+4	; 0x04
     cda:	27 e0       	ldi	r18, 0x07	; 7
     cdc:	fc 01       	movw	r30, r24
     cde:	20 83       	st	Z, r18
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	9c 83       	std	Y+4, r25	; 0x04
     ce8:	8b 83       	std	Y+3, r24	; 0x03
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	28 e0       	ldi	r18, 0x08	; 8
     cf0:	fc 01       	movw	r30, r24
     cf2:	20 83       	st	Z, r18
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	9c 83       	std	Y+4, r25	; 0x04
     cfc:	8b 83       	std	Y+3, r24	; 0x03
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	29 e0       	ldi	r18, 0x09	; 9
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	9c 83       	std	Y+4, r25	; 0x04
     d10:	8b 83       	std	Y+3, r24	; 0x03
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	20 e1       	ldi	r18, 0x10	; 16
     d18:	fc 01       	movw	r30, r24
     d1a:	20 83       	st	Z, r18
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	9c 83       	std	Y+4, r25	; 0x04
     d24:	8b 83       	std	Y+3, r24	; 0x03
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	9c 81       	ldd	r25, Y+4	; 0x04
     d2a:	21 e1       	ldi	r18, 0x11	; 17
     d2c:	fc 01       	movw	r30, r24
     d2e:	20 83       	st	Z, r18
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	9c 81       	ldd	r25, Y+4	; 0x04
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	9c 83       	std	Y+4, r25	; 0x04
     d38:	8b 83       	std	Y+3, r24	; 0x03
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	9c 81       	ldd	r25, Y+4	; 0x04
     d3e:	22 e1       	ldi	r18, 0x12	; 18
     d40:	fc 01       	movw	r30, r24
     d42:	20 83       	st	Z, r18
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	9c 81       	ldd	r25, Y+4	; 0x04
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	9c 83       	std	Y+4, r25	; 0x04
     d4c:	8b 83       	std	Y+3, r24	; 0x03
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	23 e1       	ldi	r18, 0x13	; 19
     d54:	fc 01       	movw	r30, r24
     d56:	20 83       	st	Z, r18
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	9c 81       	ldd	r25, Y+4	; 0x04
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	8b 83       	std	Y+3, r24	; 0x03
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	9c 81       	ldd	r25, Y+4	; 0x04
     d66:	24 e1       	ldi	r18, 0x14	; 20
     d68:	fc 01       	movw	r30, r24
     d6a:	20 83       	st	Z, r18
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	9c 83       	std	Y+4, r25	; 0x04
     d74:	8b 83       	std	Y+3, r24	; 0x03
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	25 e1       	ldi	r18, 0x15	; 21
     d7c:	fc 01       	movw	r30, r24
     d7e:	20 83       	st	Z, r18
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	9c 83       	std	Y+4, r25	; 0x04
     d88:	8b 83       	std	Y+3, r24	; 0x03
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	9c 81       	ldd	r25, Y+4	; 0x04
     d8e:	26 e1       	ldi	r18, 0x16	; 22
     d90:	fc 01       	movw	r30, r24
     d92:	20 83       	st	Z, r18
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	9c 83       	std	Y+4, r25	; 0x04
     d9c:	8b 83       	std	Y+3, r24	; 0x03
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	9c 81       	ldd	r25, Y+4	; 0x04
     da2:	27 e1       	ldi	r18, 0x17	; 23
     da4:	fc 01       	movw	r30, r24
     da6:	20 83       	st	Z, r18
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	9c 83       	std	Y+4, r25	; 0x04
     db0:	8b 83       	std	Y+3, r24	; 0x03
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	28 e1       	ldi	r18, 0x18	; 24
     db8:	fc 01       	movw	r30, r24
     dba:	20 83       	st	Z, r18
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	9c 83       	std	Y+4, r25	; 0x04
     dc4:	8b 83       	std	Y+3, r24	; 0x03
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
     dca:	29 e1       	ldi	r18, 0x19	; 25
     dcc:	fc 01       	movw	r30, r24
     dce:	20 83       	st	Z, r18
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	9c 83       	std	Y+4, r25	; 0x04
     dd8:	8b 83       	std	Y+3, r24	; 0x03
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	9c 81       	ldd	r25, Y+4	; 0x04
     dde:	20 e2       	ldi	r18, 0x20	; 32
     de0:	fc 01       	movw	r30, r24
     de2:	20 83       	st	Z, r18
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	9c 81       	ldd	r25, Y+4	; 0x04
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	9c 83       	std	Y+4, r25	; 0x04
     dec:	8b 83       	std	Y+3, r24	; 0x03
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	21 e2       	ldi	r18, 0x21	; 33
     df4:	fc 01       	movw	r30, r24
     df6:	20 83       	st	Z, r18
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	9c 81       	ldd	r25, Y+4	; 0x04
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	9c 83       	std	Y+4, r25	; 0x04
     e00:	8b 83       	std	Y+3, r24	; 0x03
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	9c 81       	ldd	r25, Y+4	; 0x04
     e06:	22 e2       	ldi	r18, 0x22	; 34
     e08:	fc 01       	movw	r30, r24
     e0a:	20 83       	st	Z, r18
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	9c 81       	ldd	r25, Y+4	; 0x04
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	9c 83       	std	Y+4, r25	; 0x04
     e14:	8b 83       	std	Y+3, r24	; 0x03
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	9c 81       	ldd	r25, Y+4	; 0x04
     e1a:	23 e2       	ldi	r18, 0x23	; 35
     e1c:	fc 01       	movw	r30, r24
     e1e:	20 83       	st	Z, r18
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	9c 81       	ldd	r25, Y+4	; 0x04
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	9c 83       	std	Y+4, r25	; 0x04
     e28:	8b 83       	std	Y+3, r24	; 0x03
     e2a:	8f 81       	ldd	r24, Y+7	; 0x07
     e2c:	98 85       	ldd	r25, Y+8	; 0x08
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	29 81       	ldd	r18, Y+1	; 0x01
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	9c 81       	ldd	r25, Y+4	; 0x04
     e38:	fc 01       	movw	r30, r24
     e3a:	20 83       	st	Z, r18
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	9c 81       	ldd	r25, Y+4	; 0x04
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	8b 83       	std	Y+3, r24	; 0x03
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	9a 81       	ldd	r25, Y+2	; 0x02
     e4a:	89 2f       	mov	r24, r25
     e4c:	99 27       	eor	r25, r25
     e4e:	9a 83       	std	Y+2, r25	; 0x02
     e50:	89 83       	std	Y+1, r24	; 0x01
     e52:	29 81       	ldd	r18, Y+1	; 0x01
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	9c 81       	ldd	r25, Y+4	; 0x04
     e58:	fc 01       	movw	r30, r24
     e5a:	20 83       	st	Z, r18
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	9c 81       	ldd	r25, Y+4	; 0x04
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	8b 83       	std	Y+3, r24	; 0x03
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	26 e2       	ldi	r18, 0x26	; 38
     e6c:	fc 01       	movw	r30, r24
     e6e:	20 83       	st	Z, r18
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	9c 81       	ldd	r25, Y+4	; 0x04
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	9c 81       	ldd	r25, Y+4	; 0x04
     e7e:	27 e2       	ldi	r18, 0x27	; 39
     e80:	fc 01       	movw	r30, r24
     e82:	20 83       	st	Z, r18
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	9c 81       	ldd	r25, Y+4	; 0x04
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	9c 83       	std	Y+4, r25	; 0x04
     e8c:	8b 83       	std	Y+3, r24	; 0x03
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	9c 81       	ldd	r25, Y+4	; 0x04
     e92:	28 e2       	ldi	r18, 0x28	; 40
     e94:	fc 01       	movw	r30, r24
     e96:	20 83       	st	Z, r18
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 83       	std	Y+3, r24	; 0x03
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	9c 81       	ldd	r25, Y+4	; 0x04
     ea6:	29 e2       	ldi	r18, 0x29	; 41
     ea8:	fc 01       	movw	r30, r24
     eaa:	20 83       	st	Z, r18
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	9c 83       	std	Y+4, r25	; 0x04
     eb4:	8b 83       	std	Y+3, r24	; 0x03
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	9c 81       	ldd	r25, Y+4	; 0x04
     eba:	20 e3       	ldi	r18, 0x30	; 48
     ebc:	fc 01       	movw	r30, r24
     ebe:	20 83       	st	Z, r18
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	9c 83       	std	Y+4, r25	; 0x04
     ec8:	8b 83       	std	Y+3, r24	; 0x03
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	21 e3       	ldi	r18, 0x31	; 49
     ed0:	fc 01       	movw	r30, r24
     ed2:	20 83       	st	Z, r18
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	9c 81       	ldd	r25, Y+4	; 0x04
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	9c 83       	std	Y+4, r25	; 0x04
     edc:	8b 83       	std	Y+3, r24	; 0x03
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	28 96       	adiw	r28, 0x08	; 8
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	08 95       	ret

00000ef4 <xPortStartScheduler>:
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	0e 94 67 08 	call	0x10ce	; 0x10ce <prvSetupTimerInterrupt>
     f00:	a0 91 9e 05 	lds	r26, 0x059E	; 0x80059e <pxCurrentTCB>
     f04:	b0 91 9f 05 	lds	r27, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
     f08:	cd 91       	ld	r28, X+
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	dd 91       	ld	r29, X+
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	ff 91       	pop	r31
     f12:	ef 91       	pop	r30
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	bf 91       	pop	r27
     f1a:	af 91       	pop	r26
     f1c:	9f 91       	pop	r25
     f1e:	8f 91       	pop	r24
     f20:	7f 91       	pop	r23
     f22:	6f 91       	pop	r22
     f24:	5f 91       	pop	r21
     f26:	4f 91       	pop	r20
     f28:	3f 91       	pop	r19
     f2a:	2f 91       	pop	r18
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	df 90       	pop	r13
     f36:	cf 90       	pop	r12
     f38:	bf 90       	pop	r11
     f3a:	af 90       	pop	r10
     f3c:	9f 90       	pop	r9
     f3e:	8f 90       	pop	r8
     f40:	7f 90       	pop	r7
     f42:	6f 90       	pop	r6
     f44:	5f 90       	pop	r5
     f46:	4f 90       	pop	r4
     f48:	3f 90       	pop	r3
     f4a:	2f 90       	pop	r2
     f4c:	1f 90       	pop	r1
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	0f 90       	pop	r0
     f54:	08 95       	ret
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	08 95       	ret

00000f5e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     f5e:	0f 92       	push	r0
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	0f 92       	push	r0
     f66:	1f 92       	push	r1
     f68:	11 24       	eor	r1, r1
     f6a:	2f 92       	push	r2
     f6c:	3f 92       	push	r3
     f6e:	4f 92       	push	r4
     f70:	5f 92       	push	r5
     f72:	6f 92       	push	r6
     f74:	7f 92       	push	r7
     f76:	8f 92       	push	r8
     f78:	9f 92       	push	r9
     f7a:	af 92       	push	r10
     f7c:	bf 92       	push	r11
     f7e:	cf 92       	push	r12
     f80:	df 92       	push	r13
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	2f 93       	push	r18
     f8c:	3f 93       	push	r19
     f8e:	4f 93       	push	r20
     f90:	5f 93       	push	r21
     f92:	6f 93       	push	r22
     f94:	7f 93       	push	r23
     f96:	8f 93       	push	r24
     f98:	9f 93       	push	r25
     f9a:	af 93       	push	r26
     f9c:	bf 93       	push	r27
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	ef 93       	push	r30
     fa4:	ff 93       	push	r31
     fa6:	a0 91 9e 05 	lds	r26, 0x059E	; 0x80059e <pxCurrentTCB>
     faa:	b0 91 9f 05 	lds	r27, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
     fae:	0d b6       	in	r0, 0x3d	; 61
     fb0:	0d 92       	st	X+, r0
     fb2:	0e b6       	in	r0, 0x3e	; 62
     fb4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     fb6:	0e 94 40 13 	call	0x2680	; 0x2680 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     fba:	a0 91 9e 05 	lds	r26, 0x059E	; 0x80059e <pxCurrentTCB>
     fbe:	b0 91 9f 05 	lds	r27, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
     fc2:	cd 91       	ld	r28, X+
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	dd 91       	ld	r29, X+
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	ff 91       	pop	r31
     fcc:	ef 91       	pop	r30
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	bf 91       	pop	r27
     fd4:	af 91       	pop	r26
     fd6:	9f 91       	pop	r25
     fd8:	8f 91       	pop	r24
     fda:	7f 91       	pop	r23
     fdc:	6f 91       	pop	r22
     fde:	5f 91       	pop	r21
     fe0:	4f 91       	pop	r20
     fe2:	3f 91       	pop	r19
     fe4:	2f 91       	pop	r18
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	ff 90       	pop	r15
     fec:	ef 90       	pop	r14
     fee:	df 90       	pop	r13
     ff0:	cf 90       	pop	r12
     ff2:	bf 90       	pop	r11
     ff4:	af 90       	pop	r10
     ff6:	9f 90       	pop	r9
     ff8:	8f 90       	pop	r8
     ffa:	7f 90       	pop	r7
     ffc:	6f 90       	pop	r6
     ffe:	5f 90       	pop	r5
    1000:	4f 90       	pop	r4
    1002:	3f 90       	pop	r3
    1004:	2f 90       	pop	r2
    1006:	1f 90       	pop	r1
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    100e:	08 95       	ret
	...

00001012 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	0f 92       	push	r0
    101a:	1f 92       	push	r1
    101c:	11 24       	eor	r1, r1
    101e:	2f 92       	push	r2
    1020:	3f 92       	push	r3
    1022:	4f 92       	push	r4
    1024:	5f 92       	push	r5
    1026:	6f 92       	push	r6
    1028:	7f 92       	push	r7
    102a:	8f 92       	push	r8
    102c:	9f 92       	push	r9
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	2f 93       	push	r18
    1040:	3f 93       	push	r19
    1042:	4f 93       	push	r20
    1044:	5f 93       	push	r21
    1046:	6f 93       	push	r22
    1048:	7f 93       	push	r23
    104a:	8f 93       	push	r24
    104c:	9f 93       	push	r25
    104e:	af 93       	push	r26
    1050:	bf 93       	push	r27
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	ef 93       	push	r30
    1058:	ff 93       	push	r31
    105a:	a0 91 9e 05 	lds	r26, 0x059E	; 0x80059e <pxCurrentTCB>
    105e:	b0 91 9f 05 	lds	r27, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    1062:	0d b6       	in	r0, 0x3d	; 61
    1064:	0d 92       	st	X+, r0
    1066:	0e b6       	in	r0, 0x3e	; 62
    1068:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    106a:	0e 94 53 12 	call	0x24a6	; 0x24a6 <xTaskIncrementTick>
    106e:	88 23       	and	r24, r24
    1070:	11 f0       	breq	.+4      	; 0x1076 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    1072:	0e 94 40 13 	call	0x2680	; 0x2680 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1076:	a0 91 9e 05 	lds	r26, 0x059E	; 0x80059e <pxCurrentTCB>
    107a:	b0 91 9f 05 	lds	r27, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    107e:	cd 91       	ld	r28, X+
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	dd 91       	ld	r29, X+
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	ff 91       	pop	r31
    1088:	ef 91       	pop	r30
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	bf 91       	pop	r27
    1090:	af 91       	pop	r26
    1092:	9f 91       	pop	r25
    1094:	8f 91       	pop	r24
    1096:	7f 91       	pop	r23
    1098:	6f 91       	pop	r22
    109a:	5f 91       	pop	r21
    109c:	4f 91       	pop	r20
    109e:	3f 91       	pop	r19
    10a0:	2f 91       	pop	r18
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	bf 90       	pop	r11
    10b0:	af 90       	pop	r10
    10b2:	9f 90       	pop	r9
    10b4:	8f 90       	pop	r8
    10b6:	7f 90       	pop	r7
    10b8:	6f 90       	pop	r6
    10ba:	5f 90       	pop	r5
    10bc:	4f 90       	pop	r4
    10be:	3f 90       	pop	r3
    10c0:	2f 90       	pop	r2
    10c2:	1f 90       	pop	r1
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0

	asm volatile ( "ret" );
    10ca:	08 95       	ret
	...

000010ce <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <prvSetupTimerInterrupt+0x6>
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <prvSetupTimerInterrupt+0x8>
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <prvSetupTimerInterrupt+0xa>
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    10dc:	89 e9       	ldi	r24, 0x99	; 153
    10de:	99 e3       	ldi	r25, 0x39	; 57
    10e0:	a0 e0       	ldi	r26, 0x00	; 0
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	9a 83       	std	Y+2, r25	; 0x02
    10e8:	ab 83       	std	Y+3, r26	; 0x03
    10ea:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	ab 81       	ldd	r26, Y+3	; 0x03
    10f2:	bc 81       	ldd	r27, Y+4	; 0x04
    10f4:	68 94       	set
    10f6:	15 f8       	bld	r1, 5
    10f8:	b6 95       	lsr	r27
    10fa:	a7 95       	ror	r26
    10fc:	97 95       	ror	r25
    10fe:	87 95       	ror	r24
    1100:	16 94       	lsr	r1
    1102:	d1 f7       	brne	.-12     	; 0x10f8 <prvSetupTimerInterrupt+0x2a>
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	ab 83       	std	Y+3, r26	; 0x03
    110a:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	ab 81       	ldd	r26, Y+3	; 0x03
    1112:	bc 81       	ldd	r27, Y+4	; 0x04
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	a1 09       	sbc	r26, r1
    1118:	b1 09       	sbc	r27, r1
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	ab 83       	std	Y+3, r26	; 0x03
    1120:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	9a 81       	ldd	r25, Y+2	; 0x02
    112a:	ab 81       	ldd	r26, Y+3	; 0x03
    112c:	bc 81       	ldd	r27, Y+4	; 0x04
    112e:	89 2f       	mov	r24, r25
    1130:	9a 2f       	mov	r25, r26
    1132:	ab 2f       	mov	r26, r27
    1134:	bb 27       	eor	r27, r27
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	9a 83       	std	Y+2, r25	; 0x02
    113a:	ab 83       	std	Y+3, r26	; 0x03
    113c:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    1142:	89 e8       	ldi	r24, 0x89	; 137
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	2e 81       	ldd	r18, Y+6	; 0x06
    1148:	fc 01       	movw	r30, r24
    114a:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    114c:	88 e8       	ldi	r24, 0x88	; 136
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	2d 81       	ldd	r18, Y+5	; 0x05
    1152:	fc 01       	movw	r30, r24
    1154:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1156:	8b e0       	ldi	r24, 0x0B	; 11
    1158:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    115a:	81 e8       	ldi	r24, 0x81	; 129
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	2d 81       	ldd	r18, Y+5	; 0x05
    1160:	fc 01       	movw	r30, r24
    1162:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    1164:	8f e6       	ldi	r24, 0x6F	; 111
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	fc 01       	movw	r30, r24
    116a:	80 81       	ld	r24, Z
    116c:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	82 60       	ori	r24, 0x02	; 2
    1172:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    1174:	8f e6       	ldi	r24, 0x6F	; 111
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	2d 81       	ldd	r18, Y+5	; 0x05
    117a:	fc 01       	movw	r30, r24
    117c:	20 83       	st	Z, r18
}
    117e:	00 00       	nop
    1180:	26 96       	adiw	r28, 0x06	; 6
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    1192:	0e 94 09 08 	call	0x1012	; 0x1012 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1196:	18 95       	reti
	...

0000119a <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <pvPortMalloc+0x6>
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <pvPortMalloc+0x8>
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	9c 83       	std	Y+4, r25	; 0x04
    11a8:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    11aa:	1a 82       	std	Y+2, r1	; 0x02
    11ac:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    11ae:	0e 94 af 11 	call	0x235e	; 0x235e <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    11b2:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <pucAlignedHeap.2084>
    11b6:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <pucAlignedHeap.2084+0x1>
    11ba:	89 2b       	or	r24, r25
    11bc:	31 f4       	brne	.+12     	; 0x11ca <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    11be:	8f ea       	ldi	r24, 0xAF	; 175
    11c0:	91 e0       	ldi	r25, 0x01	; 1
    11c2:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <pucAlignedHeap.2084+0x1>
    11c6:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <pucAlignedHeap.2084>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    11ca:	20 91 96 05 	lds	r18, 0x0596	; 0x800596 <xNextFreeByte>
    11ce:	30 91 97 05 	lds	r19, 0x0597	; 0x800597 <xNextFreeByte+0x1>
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	82 0f       	add	r24, r18
    11d8:	93 1f       	adc	r25, r19
    11da:	87 3e       	cpi	r24, 0xE7	; 231
    11dc:	93 40       	sbci	r25, 0x03	; 3
    11de:	38 f5       	brcc	.+78     	; 0x122e <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    11e0:	20 91 96 05 	lds	r18, 0x0596	; 0x800596 <xNextFreeByte>
    11e4:	30 91 97 05 	lds	r19, 0x0597	; 0x800597 <xNextFreeByte+0x1>
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	28 0f       	add	r18, r24
    11ee:	39 1f       	adc	r19, r25
    11f0:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <xNextFreeByte>
    11f4:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    11f8:	82 17       	cp	r24, r18
    11fa:	93 07       	cpc	r25, r19
    11fc:	c0 f4       	brcc	.+48     	; 0x122e <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    11fe:	20 91 98 05 	lds	r18, 0x0598	; 0x800598 <pucAlignedHeap.2084>
    1202:	30 91 99 05 	lds	r19, 0x0599	; 0x800599 <pucAlignedHeap.2084+0x1>
    1206:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <xNextFreeByte>
    120a:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <xNextFreeByte+0x1>
    120e:	82 0f       	add	r24, r18
    1210:	93 1f       	adc	r25, r19
    1212:	9a 83       	std	Y+2, r25	; 0x02
    1214:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    1216:	20 91 96 05 	lds	r18, 0x0596	; 0x800596 <xNextFreeByte>
    121a:	30 91 97 05 	lds	r19, 0x0597	; 0x800597 <xNextFreeByte+0x1>
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	82 0f       	add	r24, r18
    1224:	93 1f       	adc	r25, r19
    1226:	90 93 97 05 	sts	0x0597, r25	; 0x800597 <xNextFreeByte+0x1>
    122a:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    122e:	0e 94 bc 11 	call	0x2378	; 0x2378 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	08 95       	ret

00001244 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	00 d0       	rcall	.+0      	; 0x124a <vPortFree+0x6>
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	9a 83       	std	Y+2, r25	; 0x02
    1250:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1252:	00 00       	nop
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <_serial_tx_int_on>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	00 d0       	rcall	.+0      	; 0x1264 <_serial_tx_int_on+0x6>
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	9a 83       	std	Y+2, r25	; 0x02
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	9a 81       	ldd	r25, Y+2	; 0x02
    1270:	05 97       	sbiw	r24, 0x05	; 5
    1272:	29 81       	ldd	r18, Y+1	; 0x01
    1274:	3a 81       	ldd	r19, Y+2	; 0x02
    1276:	25 50       	subi	r18, 0x05	; 5
    1278:	31 09       	sbc	r19, r1
    127a:	f9 01       	movw	r30, r18
    127c:	20 81       	ld	r18, Z
    127e:	20 62       	ori	r18, 0x20	; 32
    1280:	fc 01       	movw	r30, r24
    1282:	20 83       	st	Z, r18
    1284:	00 00       	nop
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	08 95       	ret

00001290 <serial_new_instance>:
    1290:	8f 92       	push	r8
    1292:	9f 92       	push	r9
    1294:	af 92       	push	r10
    1296:	bf 92       	push	r11
    1298:	cf 92       	push	r12
    129a:	df 92       	push	r13
    129c:	ef 92       	push	r14
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	61 97       	sbiw	r28, 0x11	; 17
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	8c 83       	std	Y+4, r24	; 0x04
    12b8:	4d 83       	std	Y+5, r20	; 0x05
    12ba:	5e 83       	std	Y+6, r21	; 0x06
    12bc:	6f 83       	std	Y+7, r22	; 0x07
    12be:	78 87       	std	Y+8, r23	; 0x08
    12c0:	29 87       	std	Y+9, r18	; 0x09
    12c2:	0a 87       	std	Y+10, r16	; 0x0a
    12c4:	eb 86       	std	Y+11, r14	; 0x0b
    12c6:	dd 86       	std	Y+13, r13	; 0x0d
    12c8:	cc 86       	std	Y+12, r12	; 0x0c
    12ca:	bf 86       	std	Y+15, r11	; 0x0f
    12cc:	ae 86       	std	Y+14, r10	; 0x0e
    12ce:	99 8a       	std	Y+17, r9	; 0x11
    12d0:	88 8a       	std	Y+16, r8	; 0x10
    12d2:	88 e0       	ldi	r24, 0x08	; 8
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <malloc>
    12da:	9a 83       	std	Y+2, r25	; 0x02
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	86 56       	subi	r24, 0x66	; 102
    12ea:	9a 4f       	sbci	r25, 0xFA	; 250
    12ec:	29 81       	ldd	r18, Y+1	; 0x01
    12ee:	3a 81       	ldd	r19, Y+2	; 0x02
    12f0:	fc 01       	movw	r30, r24
    12f2:	31 83       	std	Z+1, r19	; 0x01
    12f4:	20 83       	st	Z, r18
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	8a 5f       	subi	r24, 0xFA	; 250
    1302:	9e 4f       	sbci	r25, 0xFE	; 254
    1304:	fc 01       	movw	r30, r24
    1306:	20 81       	ld	r18, Z
    1308:	31 81       	ldd	r19, Z+1	; 0x01
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	fc 01       	movw	r30, r24
    1310:	31 83       	std	Z+1, r19	; 0x01
    1312:	20 83       	st	Z, r18
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	2e 85       	ldd	r18, Y+14	; 0x0e
    131a:	3f 85       	ldd	r19, Y+15	; 0x0f
    131c:	fc 01       	movw	r30, r24
    131e:	33 83       	std	Z+3, r19	; 0x03
    1320:	22 83       	std	Z+2, r18	; 0x02
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	9a 81       	ldd	r25, Y+2	; 0x02
    1326:	2c 85       	ldd	r18, Y+12	; 0x0c
    1328:	3d 85       	ldd	r19, Y+13	; 0x0d
    132a:	fc 01       	movw	r30, r24
    132c:	35 83       	std	Z+5, r19	; 0x05
    132e:	24 83       	std	Z+4, r18	; 0x04
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	28 89       	ldd	r18, Y+16	; 0x10
    1336:	39 89       	ldd	r19, Y+17	; 0x11
    1338:	fc 01       	movw	r30, r24
    133a:	37 83       	std	Z+7, r19	; 0x07
    133c:	26 83       	std	Z+6, r18	; 0x06
    133e:	8f e5       	ldi	r24, 0x5F	; 95
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	fc 01       	movw	r30, r24
    1344:	80 81       	ld	r24, Z
    1346:	8b 83       	std	Y+3, r24	; 0x03
    1348:	f8 94       	cli
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	fc 01       	movw	r30, r24
    1350:	80 81       	ld	r24, Z
    1352:	91 81       	ldd	r25, Z+1	; 0x01
    1354:	06 97       	sbiw	r24, 0x06	; 6
    1356:	29 81       	ldd	r18, Y+1	; 0x01
    1358:	3a 81       	ldd	r19, Y+2	; 0x02
    135a:	f9 01       	movw	r30, r18
    135c:	20 81       	ld	r18, Z
    135e:	31 81       	ldd	r19, Z+1	; 0x01
    1360:	26 50       	subi	r18, 0x06	; 6
    1362:	31 09       	sbc	r19, r1
    1364:	f9 01       	movw	r30, r18
    1366:	20 81       	ld	r18, Z
    1368:	22 60       	ori	r18, 0x02	; 2
    136a:	fc 01       	movw	r30, r24
    136c:	20 83       	st	Z, r18
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	fc 01       	movw	r30, r24
    1374:	80 81       	ld	r24, Z
    1376:	91 81       	ldd	r25, Z+1	; 0x01
    1378:	8c 01       	movw	r16, r24
    137a:	02 50       	subi	r16, 0x02	; 2
    137c:	11 09       	sbc	r17, r1
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	af 81       	ldd	r26, Y+7	; 0x07
    1384:	b8 85       	ldd	r27, Y+8	; 0x08
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	aa 1f       	adc	r26, r26
    138c:	bb 1f       	adc	r27, r27
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	aa 1f       	adc	r26, r26
    1394:	bb 1f       	adc	r27, r27
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	aa 1f       	adc	r26, r26
    139c:	bb 1f       	adc	r27, r27
    139e:	9c 01       	movw	r18, r24
    13a0:	ad 01       	movw	r20, r26
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	a1 ee       	ldi	r26, 0xE1	; 225
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	bc 01       	movw	r22, r24
    13ac:	cd 01       	movw	r24, r26
    13ae:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodsi4>
    13b2:	da 01       	movw	r26, r20
    13b4:	c9 01       	movw	r24, r18
    13b6:	81 50       	subi	r24, 0x01	; 1
    13b8:	f8 01       	movw	r30, r16
    13ba:	80 83       	st	Z, r24
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	9a 81       	ldd	r25, Y+2	; 0x02
    13c0:	fc 01       	movw	r30, r24
    13c2:	80 81       	ld	r24, Z
    13c4:	91 81       	ldd	r25, Z+1	; 0x01
    13c6:	05 97       	sbiw	r24, 0x05	; 5
    13c8:	28 e9       	ldi	r18, 0x98	; 152
    13ca:	fc 01       	movw	r30, r24
    13cc:	20 83       	st	Z, r18
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	9a 81       	ldd	r25, Y+2	; 0x02
    13d2:	fc 01       	movw	r30, r24
    13d4:	80 81       	ld	r24, Z
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	04 97       	sbiw	r24, 0x04	; 4
    13da:	26 e0       	ldi	r18, 0x06	; 6
    13dc:	fc 01       	movw	r30, r24
    13de:	20 83       	st	Z, r18
    13e0:	8f e5       	ldi	r24, 0x5F	; 95
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	2b 81       	ldd	r18, Y+3	; 0x03
    13e6:	fc 01       	movw	r30, r24
    13e8:	20 83       	st	Z, r18
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	61 96       	adiw	r28, 0x11	; 17
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ef 90       	pop	r14
    1404:	df 90       	pop	r13
    1406:	cf 90       	pop	r12
    1408:	bf 90       	pop	r11
    140a:	af 90       	pop	r10
    140c:	9f 90       	pop	r9
    140e:	8f 90       	pop	r8
    1410:	08 95       	ret

00001412 <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	00 d0       	rcall	.+0      	; 0x1418 <serial_send_bytes+0x6>
    1418:	00 d0       	rcall	.+0      	; 0x141a <serial_send_bytes+0x8>
    141a:	00 d0       	rcall	.+0      	; 0x141c <serial_send_bytes+0xa>
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	9b 83       	std	Y+3, r25	; 0x03
    1422:	8a 83       	std	Y+2, r24	; 0x02
    1424:	7d 83       	std	Y+5, r23	; 0x05
    1426:	6c 83       	std	Y+4, r22	; 0x04
    1428:	4e 83       	std	Y+6, r20	; 0x06
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	9b 81       	ldd	r25, Y+3	; 0x03
    142e:	fc 01       	movw	r30, r24
    1430:	82 81       	ldd	r24, Z+2	; 0x02
    1432:	93 81       	ldd	r25, Z+3	; 0x03
    1434:	89 2b       	or	r24, r25
    1436:	a9 f0       	breq	.+42     	; 0x1462 <serial_send_bytes+0x50>
    1438:	8e 81       	ldd	r24, Y+6	; 0x06
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	9b 81       	ldd	r25, Y+3	; 0x03
    1442:	fc 01       	movw	r30, r24
    1444:	82 81       	ldd	r24, Z+2	; 0x02
    1446:	93 81       	ldd	r25, Z+3	; 0x03
    1448:	fc 01       	movw	r30, r24
    144a:	82 a1       	ldd	r24, Z+34	; 0x22
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	40 e2       	ldi	r20, 0x20	; 32
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	ba 01       	movw	r22, r20
    1456:	68 1b       	sub	r22, r24
    1458:	79 0b       	sbc	r23, r25
    145a:	cb 01       	movw	r24, r22
    145c:	82 17       	cp	r24, r18
    145e:	93 07       	cpc	r25, r19
    1460:	54 f0       	brlt	.+20     	; 0x1476 <serial_send_bytes+0x64>
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	9b 81       	ldd	r25, Y+3	; 0x03
    1466:	fc 01       	movw	r30, r24
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	89 2b       	or	r24, r25
    146e:	29 f4       	brne	.+10     	; 0x147a <serial_send_bytes+0x68>
    1470:	8e 81       	ldd	r24, Y+6	; 0x06
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	10 f0       	brcs	.+4      	; 0x147a <serial_send_bytes+0x68>
		return BUFFER_FULL;
    1476:	82 e0       	ldi	r24, 0x02	; 2
    1478:	22 c0       	rjmp	.+68     	; 0x14be <serial_send_bytes+0xac>
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    147a:	19 82       	std	Y+1, r1	; 0x01
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <serial_send_bytes+0x94>
		buffer_put_item(handle->_tx_buf, buf[i]);
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	2c 81       	ldd	r18, Y+4	; 0x04
    1486:	3d 81       	ldd	r19, Y+5	; 0x05
    1488:	82 0f       	add	r24, r18
    148a:	93 1f       	adc	r25, r19
    148c:	fc 01       	movw	r30, r24
    148e:	20 81       	ld	r18, Z
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	9b 81       	ldd	r25, Y+3	; 0x03
    1494:	fc 01       	movw	r30, r24
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	62 2f       	mov	r22, r18
    149c:	0e 94 28 04 	call	0x850	; 0x850 <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	8f 5f       	subi	r24, 0xFF	; 255
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	99 81       	ldd	r25, Y+1	; 0x01
    14a8:	8e 81       	ldd	r24, Y+6	; 0x06
    14aa:	98 17       	cp	r25, r24
    14ac:	40 f3       	brcs	.-48     	; 0x147e <serial_send_bytes+0x6c>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	9b 81       	ldd	r25, Y+3	; 0x03
    14b2:	fc 01       	movw	r30, r24
    14b4:	80 81       	ld	r24, Z
    14b6:	91 81       	ldd	r25, Z+1	; 0x01
    14b8:	0e 94 2f 09 	call	0x125e	; 0x125e <_serial_tx_int_on>
	return BUFFER_OK;
    14bc:	80 e0       	ldi	r24, 0x00	; 0
}
    14be:	26 96       	adiw	r28, 0x06	; 6
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	de bf       	out	0x3e, r29	; 62
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	cd bf       	out	0x3d, r28	; 61
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	08 95       	ret

000014d0 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    14d0:	1f 92       	push	r1
    14d2:	0f 92       	push	r0
    14d4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    14d8:	0f 92       	push	r0
    14da:	11 24       	eor	r1, r1
    14dc:	2f 93       	push	r18
    14de:	3f 93       	push	r19
    14e0:	4f 93       	push	r20
    14e2:	5f 93       	push	r21
    14e4:	6f 93       	push	r22
    14e6:	7f 93       	push	r23
    14e8:	8f 93       	push	r24
    14ea:	9f 93       	push	r25
    14ec:	af 93       	push	r26
    14ee:	bf 93       	push	r27
    14f0:	ef 93       	push	r30
    14f2:	ff 93       	push	r31
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	1f 92       	push	r1
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    14fe:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <_ser_handle>
    1502:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <_ser_handle+0x1>
    1506:	89 2b       	or	r24, r25
    1508:	31 f1       	breq	.+76     	; 0x1556 <__vector_20+0x86>
		item = UDR0;
    150a:	86 ec       	ldi	r24, 0xC6	; 198
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	fc 01       	movw	r30, r24
    1510:	80 81       	ld	r24, Z
    1512:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    1514:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <_ser_handle>
    1518:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <_ser_handle+0x1>
    151c:	fc 01       	movw	r30, r24
    151e:	84 81       	ldd	r24, Z+4	; 0x04
    1520:	95 81       	ldd	r25, Z+5	; 0x05
    1522:	69 81       	ldd	r22, Y+1	; 0x01
    1524:	0e 94 28 04 	call	0x850	; 0x850 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    1528:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <_ser_handle>
    152c:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <_ser_handle+0x1>
    1530:	fc 01       	movw	r30, r24
    1532:	86 81       	ldd	r24, Z+6	; 0x06
    1534:	97 81       	ldd	r25, Z+7	; 0x07
    1536:	89 2b       	or	r24, r25
    1538:	71 f0       	breq	.+28     	; 0x1556 <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    153a:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <_ser_handle>
    153e:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <_ser_handle+0x1>
    1542:	fc 01       	movw	r30, r24
    1544:	26 81       	ldd	r18, Z+6	; 0x06
    1546:	37 81       	ldd	r19, Z+7	; 0x07
    1548:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <_ser_handle>
    154c:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <_ser_handle+0x1>
    1550:	69 81       	ldd	r22, Y+1	; 0x01
    1552:	f9 01       	movw	r30, r18
    1554:	09 95       	icall
		}
	}
}
    1556:	00 00       	nop
    1558:	0f 90       	pop	r0
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	ff 91       	pop	r31
    1560:	ef 91       	pop	r30
    1562:	bf 91       	pop	r27
    1564:	af 91       	pop	r26
    1566:	9f 91       	pop	r25
    1568:	8f 91       	pop	r24
    156a:	7f 91       	pop	r23
    156c:	6f 91       	pop	r22
    156e:	5f 91       	pop	r21
    1570:	4f 91       	pop	r20
    1572:	3f 91       	pop	r19
    1574:	2f 91       	pop	r18
    1576:	0f 90       	pop	r0
    1578:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    157c:	0f 90       	pop	r0
    157e:	1f 90       	pop	r1
    1580:	18 95       	reti

00001582 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    1582:	1f 92       	push	r1
    1584:	0f 92       	push	r0
    1586:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    158a:	0f 92       	push	r0
    158c:	11 24       	eor	r1, r1
    158e:	2f 93       	push	r18
    1590:	3f 93       	push	r19
    1592:	4f 93       	push	r20
    1594:	5f 93       	push	r21
    1596:	6f 93       	push	r22
    1598:	7f 93       	push	r23
    159a:	8f 93       	push	r24
    159c:	9f 93       	push	r25
    159e:	af 93       	push	r26
    15a0:	bf 93       	push	r27
    15a2:	ef 93       	push	r30
    15a4:	ff 93       	push	r31
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	1f 92       	push	r1
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    15b0:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <_ser_handle>
    15b4:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <_ser_handle+0x1>
    15b8:	89 2b       	or	r24, r25
    15ba:	f9 f0       	breq	.+62     	; 0x15fa <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    15bc:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <_ser_handle>
    15c0:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <_ser_handle+0x1>
    15c4:	fc 01       	movw	r30, r24
    15c6:	82 81       	ldd	r24, Z+2	; 0x02
    15c8:	93 81       	ldd	r25, Z+3	; 0x03
    15ca:	9e 01       	movw	r18, r28
    15cc:	2f 5f       	subi	r18, 0xFF	; 255
    15ce:	3f 4f       	sbci	r19, 0xFF	; 255
    15d0:	b9 01       	movw	r22, r18
    15d2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <buffer_get_item>
    15d6:	88 23       	and	r24, r24
    15d8:	31 f4       	brne	.+12     	; 0x15e6 <__vector_21+0x64>
			UDR0 = item;
    15da:	86 ec       	ldi	r24, 0xC6	; 198
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	29 81       	ldd	r18, Y+1	; 0x01
    15e0:	fc 01       	movw	r30, r24
    15e2:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    15e4:	13 c0       	rjmp	.+38     	; 0x160c <__vector_21+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
			UDR0 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    15e6:	81 ec       	ldi	r24, 0xC1	; 193
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	21 ec       	ldi	r18, 0xC1	; 193
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	f9 01       	movw	r30, r18
    15f0:	20 81       	ld	r18, Z
    15f2:	2f 7d       	andi	r18, 0xDF	; 223
    15f4:	fc 01       	movw	r30, r24
    15f6:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    15f8:	09 c0       	rjmp	.+18     	; 0x160c <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    15fa:	81 ec       	ldi	r24, 0xC1	; 193
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	21 ec       	ldi	r18, 0xC1	; 193
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	f9 01       	movw	r30, r18
    1604:	20 81       	ld	r18, Z
    1606:	2f 7d       	andi	r18, 0xDF	; 223
    1608:	fc 01       	movw	r30, r24
    160a:	20 83       	st	Z, r18
	}
}
    160c:	00 00       	nop
    160e:	0f 90       	pop	r0
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	ff 91       	pop	r31
    1616:	ef 91       	pop	r30
    1618:	bf 91       	pop	r27
    161a:	af 91       	pop	r26
    161c:	9f 91       	pop	r25
    161e:	8f 91       	pop	r24
    1620:	7f 91       	pop	r23
    1622:	6f 91       	pop	r22
    1624:	5f 91       	pop	r21
    1626:	4f 91       	pop	r20
    1628:	3f 91       	pop	r19
    162a:	2f 91       	pop	r18
    162c:	0f 90       	pop	r0
    162e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1632:	0f 90       	pop	r0
    1634:	1f 90       	pop	r1
    1636:	18 95       	reti

00001638 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    1638:	1f 92       	push	r1
    163a:	0f 92       	push	r0
    163c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1640:	0f 92       	push	r0
    1642:	11 24       	eor	r1, r1
    1644:	2f 93       	push	r18
    1646:	3f 93       	push	r19
    1648:	4f 93       	push	r20
    164a:	5f 93       	push	r21
    164c:	6f 93       	push	r22
    164e:	7f 93       	push	r23
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	af 93       	push	r26
    1656:	bf 93       	push	r27
    1658:	ef 93       	push	r30
    165a:	ff 93       	push	r31
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	1f 92       	push	r1
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1666:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ser_handle+0x2>
    166a:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <_ser_handle+0x3>
    166e:	89 2b       	or	r24, r25
    1670:	31 f1       	breq	.+76     	; 0x16be <__vector_28+0x86>
		item = UDR1;
    1672:	8e ec       	ldi	r24, 0xCE	; 206
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	fc 01       	movw	r30, r24
    1678:	80 81       	ld	r24, Z
    167a:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    167c:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ser_handle+0x2>
    1680:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <_ser_handle+0x3>
    1684:	fc 01       	movw	r30, r24
    1686:	84 81       	ldd	r24, Z+4	; 0x04
    1688:	95 81       	ldd	r25, Z+5	; 0x05
    168a:	69 81       	ldd	r22, Y+1	; 0x01
    168c:	0e 94 28 04 	call	0x850	; 0x850 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    1690:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ser_handle+0x2>
    1694:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <_ser_handle+0x3>
    1698:	fc 01       	movw	r30, r24
    169a:	86 81       	ldd	r24, Z+6	; 0x06
    169c:	97 81       	ldd	r25, Z+7	; 0x07
    169e:	89 2b       	or	r24, r25
    16a0:	71 f0       	breq	.+28     	; 0x16be <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    16a2:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ser_handle+0x2>
    16a6:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <_ser_handle+0x3>
    16aa:	fc 01       	movw	r30, r24
    16ac:	26 81       	ldd	r18, Z+6	; 0x06
    16ae:	37 81       	ldd	r19, Z+7	; 0x07
    16b0:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ser_handle+0x2>
    16b4:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <_ser_handle+0x3>
    16b8:	69 81       	ldd	r22, Y+1	; 0x01
    16ba:	f9 01       	movw	r30, r18
    16bc:	09 95       	icall
		}
	}
}
    16be:	00 00       	nop
    16c0:	0f 90       	pop	r0
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	ff 91       	pop	r31
    16c8:	ef 91       	pop	r30
    16ca:	bf 91       	pop	r27
    16cc:	af 91       	pop	r26
    16ce:	9f 91       	pop	r25
    16d0:	8f 91       	pop	r24
    16d2:	7f 91       	pop	r23
    16d4:	6f 91       	pop	r22
    16d6:	5f 91       	pop	r21
    16d8:	4f 91       	pop	r20
    16da:	3f 91       	pop	r19
    16dc:	2f 91       	pop	r18
    16de:	0f 90       	pop	r0
    16e0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    16e4:	0f 90       	pop	r0
    16e6:	1f 90       	pop	r1
    16e8:	18 95       	reti

000016ea <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    16ea:	1f 92       	push	r1
    16ec:	0f 92       	push	r0
    16ee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    16f2:	0f 92       	push	r0
    16f4:	11 24       	eor	r1, r1
    16f6:	2f 93       	push	r18
    16f8:	3f 93       	push	r19
    16fa:	4f 93       	push	r20
    16fc:	5f 93       	push	r21
    16fe:	6f 93       	push	r22
    1700:	7f 93       	push	r23
    1702:	8f 93       	push	r24
    1704:	9f 93       	push	r25
    1706:	af 93       	push	r26
    1708:	bf 93       	push	r27
    170a:	ef 93       	push	r30
    170c:	ff 93       	push	r31
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	1f 92       	push	r1
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1718:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ser_handle+0x2>
    171c:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <_ser_handle+0x3>
    1720:	89 2b       	or	r24, r25
    1722:	f9 f0       	breq	.+62     	; 0x1762 <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1724:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ser_handle+0x2>
    1728:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <_ser_handle+0x3>
    172c:	fc 01       	movw	r30, r24
    172e:	82 81       	ldd	r24, Z+2	; 0x02
    1730:	93 81       	ldd	r25, Z+3	; 0x03
    1732:	9e 01       	movw	r18, r28
    1734:	2f 5f       	subi	r18, 0xFF	; 255
    1736:	3f 4f       	sbci	r19, 0xFF	; 255
    1738:	b9 01       	movw	r22, r18
    173a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <buffer_get_item>
    173e:	88 23       	and	r24, r24
    1740:	31 f4       	brne	.+12     	; 0x174e <__vector_29+0x64>
			UDR1 = item;
    1742:	8e ec       	ldi	r24, 0xCE	; 206
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	29 81       	ldd	r18, Y+1	; 0x01
    1748:	fc 01       	movw	r30, r24
    174a:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    174c:	13 c0       	rjmp	.+38     	; 0x1774 <__vector_29+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
			UDR1 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    174e:	89 ec       	ldi	r24, 0xC9	; 201
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	29 ec       	ldi	r18, 0xC9	; 201
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	f9 01       	movw	r30, r18
    1758:	20 81       	ld	r18, Z
    175a:	2f 7d       	andi	r18, 0xDF	; 223
    175c:	fc 01       	movw	r30, r24
    175e:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    1760:	09 c0       	rjmp	.+18     	; 0x1774 <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    1762:	89 ec       	ldi	r24, 0xC9	; 201
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	29 ec       	ldi	r18, 0xC9	; 201
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	f9 01       	movw	r30, r18
    176c:	20 81       	ld	r18, Z
    176e:	2f 7d       	andi	r18, 0xDF	; 223
    1770:	fc 01       	movw	r30, r24
    1772:	20 83       	st	Z, r18
	}
}
    1774:	00 00       	nop
    1776:	0f 90       	pop	r0
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	ff 91       	pop	r31
    177e:	ef 91       	pop	r30
    1780:	bf 91       	pop	r27
    1782:	af 91       	pop	r26
    1784:	9f 91       	pop	r25
    1786:	8f 91       	pop	r24
    1788:	7f 91       	pop	r23
    178a:	6f 91       	pop	r22
    178c:	5f 91       	pop	r21
    178e:	4f 91       	pop	r20
    1790:	3f 91       	pop	r19
    1792:	2f 91       	pop	r18
    1794:	0f 90       	pop	r0
    1796:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    179a:	0f 90       	pop	r0
    179c:	1f 90       	pop	r1
    179e:	18 95       	reti

000017a0 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <xQueueGenericReset+0x6>
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <xQueueGenericReset+0x8>
    17a8:	1f 92       	push	r1
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	9c 83       	std	Y+4, r25	; 0x04
    17b0:	8b 83       	std	Y+3, r24	; 0x03
    17b2:	6d 83       	std	Y+5, r22	; 0x05
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	0f 92       	push	r0
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	fc 01       	movw	r30, r24
    17c8:	80 81       	ld	r24, Z
    17ca:	91 81       	ldd	r25, Z+1	; 0x01
    17cc:	29 81       	ldd	r18, Y+1	; 0x01
    17ce:	3a 81       	ldd	r19, Y+2	; 0x02
    17d0:	f9 01       	movw	r30, r18
    17d2:	23 8d       	ldd	r18, Z+27	; 0x1b
    17d4:	42 2f       	mov	r20, r18
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	29 81       	ldd	r18, Y+1	; 0x01
    17da:	3a 81       	ldd	r19, Y+2	; 0x02
    17dc:	f9 01       	movw	r30, r18
    17de:	24 8d       	ldd	r18, Z+28	; 0x1c
    17e0:	22 2f       	mov	r18, r18
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	42 9f       	mul	r20, r18
    17e6:	b0 01       	movw	r22, r0
    17e8:	43 9f       	mul	r20, r19
    17ea:	70 0d       	add	r23, r0
    17ec:	52 9f       	mul	r21, r18
    17ee:	70 0d       	add	r23, r0
    17f0:	11 24       	eor	r1, r1
    17f2:	9b 01       	movw	r18, r22
    17f4:	28 0f       	add	r18, r24
    17f6:	39 1f       	adc	r19, r25
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	9a 81       	ldd	r25, Y+2	; 0x02
    17fc:	fc 01       	movw	r30, r24
    17fe:	33 83       	std	Z+3, r19	; 0x03
    1800:	22 83       	std	Z+2, r18	; 0x02
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	fc 01       	movw	r30, r24
    1808:	12 8e       	std	Z+26, r1	; 0x1a
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	9a 81       	ldd	r25, Y+2	; 0x02
    180e:	fc 01       	movw	r30, r24
    1810:	20 81       	ld	r18, Z
    1812:	31 81       	ldd	r19, Z+1	; 0x01
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	fc 01       	movw	r30, r24
    181a:	35 83       	std	Z+5, r19	; 0x05
    181c:	24 83       	std	Z+4, r18	; 0x04
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	fc 01       	movw	r30, r24
    1824:	80 81       	ld	r24, Z
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	29 81       	ldd	r18, Y+1	; 0x01
    182a:	3a 81       	ldd	r19, Y+2	; 0x02
    182c:	f9 01       	movw	r30, r18
    182e:	23 8d       	ldd	r18, Z+27	; 0x1b
    1830:	22 2f       	mov	r18, r18
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	a9 01       	movw	r20, r18
    1836:	41 50       	subi	r20, 0x01	; 1
    1838:	51 09       	sbc	r21, r1
    183a:	29 81       	ldd	r18, Y+1	; 0x01
    183c:	3a 81       	ldd	r19, Y+2	; 0x02
    183e:	f9 01       	movw	r30, r18
    1840:	24 8d       	ldd	r18, Z+28	; 0x1c
    1842:	22 2f       	mov	r18, r18
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	42 9f       	mul	r20, r18
    1848:	b0 01       	movw	r22, r0
    184a:	43 9f       	mul	r20, r19
    184c:	70 0d       	add	r23, r0
    184e:	52 9f       	mul	r21, r18
    1850:	70 0d       	add	r23, r0
    1852:	11 24       	eor	r1, r1
    1854:	9b 01       	movw	r18, r22
    1856:	28 0f       	add	r18, r24
    1858:	39 1f       	adc	r19, r25
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	9a 81       	ldd	r25, Y+2	; 0x02
    185e:	fc 01       	movw	r30, r24
    1860:	37 83       	std	Z+7, r19	; 0x07
    1862:	26 83       	std	Z+6, r18	; 0x06
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	9a 81       	ldd	r25, Y+2	; 0x02
    1868:	2f ef       	ldi	r18, 0xFF	; 255
    186a:	fc 01       	movw	r30, r24
    186c:	25 8f       	std	Z+29, r18	; 0x1d
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	9a 81       	ldd	r25, Y+2	; 0x02
    1872:	2f ef       	ldi	r18, 0xFF	; 255
    1874:	fc 01       	movw	r30, r24
    1876:	26 8f       	std	Z+30, r18	; 0x1e
    1878:	8d 81       	ldd	r24, Y+5	; 0x05
    187a:	88 23       	and	r24, r24
    187c:	81 f4       	brne	.+32     	; 0x189e <xQueueGenericReset+0xfe>
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	fc 01       	movw	r30, r24
    1884:	80 85       	ldd	r24, Z+8	; 0x08
    1886:	88 23       	and	r24, r24
    1888:	a1 f0       	breq	.+40     	; 0x18b2 <xQueueGenericReset+0x112>
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	9a 81       	ldd	r25, Y+2	; 0x02
    188e:	08 96       	adiw	r24, 0x08	; 8
    1890:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <xTaskRemoveFromEventList>
    1894:	88 23       	and	r24, r24
    1896:	69 f0       	breq	.+26     	; 0x18b2 <xQueueGenericReset+0x112>
    1898:	0e 94 af 07 	call	0xf5e	; 0xf5e <vPortYield>
    189c:	0a c0       	rjmp	.+20     	; 0x18b2 <xQueueGenericReset+0x112>
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	9a 81       	ldd	r25, Y+2	; 0x02
    18a2:	08 96       	adiw	r24, 0x08	; 8
    18a4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <vListInitialise>
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	9a 81       	ldd	r25, Y+2	; 0x02
    18ac:	41 96       	adiw	r24, 0x11	; 17
    18ae:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <vListInitialise>
    18b2:	0f 90       	pop	r0
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	08 95       	ret

000018c8 <xQueueGenericCreate>:
    18c8:	0f 93       	push	r16
    18ca:	1f 93       	push	r17
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	29 97       	sbiw	r28, 0x09	; 9
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	8f 83       	std	Y+7, r24	; 0x07
    18e2:	68 87       	std	Y+8, r22	; 0x08
    18e4:	49 87       	std	Y+9, r20	; 0x09
    18e6:	88 85       	ldd	r24, Y+8	; 0x08
    18e8:	88 23       	and	r24, r24
    18ea:	19 f4       	brne	.+6      	; 0x18f2 <xQueueGenericCreate+0x2a>
    18ec:	1a 82       	std	Y+2, r1	; 0x02
    18ee:	19 82       	std	Y+1, r1	; 0x01
    18f0:	0f c0       	rjmp	.+30     	; 0x1910 <xQueueGenericCreate+0x48>
    18f2:	8f 81       	ldd	r24, Y+7	; 0x07
    18f4:	48 2f       	mov	r20, r24
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	88 85       	ldd	r24, Y+8	; 0x08
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	42 9f       	mul	r20, r18
    1900:	c0 01       	movw	r24, r0
    1902:	43 9f       	mul	r20, r19
    1904:	90 0d       	add	r25, r0
    1906:	52 9f       	mul	r21, r18
    1908:	90 0d       	add	r25, r0
    190a:	11 24       	eor	r1, r1
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	81 96       	adiw	r24, 0x21	; 33
    1916:	0e 94 cd 08 	call	0x119a	; 0x119a <pvPortMalloc>
    191a:	9c 83       	std	Y+4, r25	; 0x04
    191c:	8b 83       	std	Y+3, r24	; 0x03
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	9c 81       	ldd	r25, Y+4	; 0x04
    1922:	89 2b       	or	r24, r25
    1924:	81 f0       	breq	.+32     	; 0x1946 <xQueueGenericCreate+0x7e>
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	81 96       	adiw	r24, 0x21	; 33
    192c:	9e 83       	std	Y+6, r25	; 0x06
    192e:	8d 83       	std	Y+5, r24	; 0x05
    1930:	2b 81       	ldd	r18, Y+3	; 0x03
    1932:	3c 81       	ldd	r19, Y+4	; 0x04
    1934:	8d 81       	ldd	r24, Y+5	; 0x05
    1936:	9e 81       	ldd	r25, Y+6	; 0x06
    1938:	89 01       	movw	r16, r18
    193a:	29 85       	ldd	r18, Y+9	; 0x09
    193c:	ac 01       	movw	r20, r24
    193e:	68 85       	ldd	r22, Y+8	; 0x08
    1940:	8f 81       	ldd	r24, Y+7	; 0x07
    1942:	0e 94 b0 0c 	call	0x1960	; 0x1960 <prvInitialiseNewQueue>
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	29 96       	adiw	r28, 0x09	; 9
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	08 95       	ret

00001960 <prvInitialiseNewQueue>:
    1960:	0f 93       	push	r16
    1962:	1f 93       	push	r17
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	27 97       	sbiw	r28, 0x07	; 7
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	6a 83       	std	Y+2, r22	; 0x02
    197c:	5c 83       	std	Y+4, r21	; 0x04
    197e:	4b 83       	std	Y+3, r20	; 0x03
    1980:	2d 83       	std	Y+5, r18	; 0x05
    1982:	1f 83       	std	Y+7, r17	; 0x07
    1984:	0e 83       	std	Y+6, r16	; 0x06
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	88 23       	and	r24, r24
    198a:	41 f4       	brne	.+16     	; 0x199c <prvInitialiseNewQueue+0x3c>
    198c:	8e 81       	ldd	r24, Y+6	; 0x06
    198e:	9f 81       	ldd	r25, Y+7	; 0x07
    1990:	2e 81       	ldd	r18, Y+6	; 0x06
    1992:	3f 81       	ldd	r19, Y+7	; 0x07
    1994:	fc 01       	movw	r30, r24
    1996:	31 83       	std	Z+1, r19	; 0x01
    1998:	20 83       	st	Z, r18
    199a:	07 c0       	rjmp	.+14     	; 0x19aa <prvInitialiseNewQueue+0x4a>
    199c:	8e 81       	ldd	r24, Y+6	; 0x06
    199e:	9f 81       	ldd	r25, Y+7	; 0x07
    19a0:	2b 81       	ldd	r18, Y+3	; 0x03
    19a2:	3c 81       	ldd	r19, Y+4	; 0x04
    19a4:	fc 01       	movw	r30, r24
    19a6:	31 83       	std	Z+1, r19	; 0x01
    19a8:	20 83       	st	Z, r18
    19aa:	8e 81       	ldd	r24, Y+6	; 0x06
    19ac:	9f 81       	ldd	r25, Y+7	; 0x07
    19ae:	29 81       	ldd	r18, Y+1	; 0x01
    19b0:	fc 01       	movw	r30, r24
    19b2:	23 8f       	std	Z+27, r18	; 0x1b
    19b4:	8e 81       	ldd	r24, Y+6	; 0x06
    19b6:	9f 81       	ldd	r25, Y+7	; 0x07
    19b8:	2a 81       	ldd	r18, Y+2	; 0x02
    19ba:	fc 01       	movw	r30, r24
    19bc:	24 8f       	std	Z+28, r18	; 0x1c
    19be:	8e 81       	ldd	r24, Y+6	; 0x06
    19c0:	9f 81       	ldd	r25, Y+7	; 0x07
    19c2:	61 e0       	ldi	r22, 0x01	; 1
    19c4:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <xQueueGenericReset>
    19c8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ca:	9f 81       	ldd	r25, Y+7	; 0x07
    19cc:	2d 81       	ldd	r18, Y+5	; 0x05
    19ce:	fc 01       	movw	r30, r24
    19d0:	20 a3       	std	Z+32, r18	; 0x20
    19d2:	00 00       	nop
    19d4:	27 96       	adiw	r28, 0x07	; 7
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	08 95       	ret

000019ea <prvInitialiseMutex>:
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <prvInitialiseMutex+0x6>
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	9a 81       	ldd	r25, Y+2	; 0x02
    19fc:	89 2b       	or	r24, r25
    19fe:	b9 f0       	breq	.+46     	; 0x1a2e <prvInitialiseMutex+0x44>
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	9a 81       	ldd	r25, Y+2	; 0x02
    1a04:	fc 01       	movw	r30, r24
    1a06:	13 82       	std	Z+3, r1	; 0x03
    1a08:	12 82       	std	Z+2, r1	; 0x02
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	fc 01       	movw	r30, r24
    1a10:	11 82       	std	Z+1, r1	; 0x01
    1a12:	10 82       	st	Z, r1
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	fc 01       	movw	r30, r24
    1a1a:	16 82       	std	Z+6, r1	; 0x06
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <xQueueGenericSend>
    1a2e:	00 00       	nop
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <xQueueCreateMutex>:
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <xQueueCreateMutex+0x6>
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <xQueueCreateMutex+0x8>
    1a42:	1f 92       	push	r1
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	8d 83       	std	Y+5, r24	; 0x05
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	1a 82       	std	Y+2, r1	; 0x02
    1a50:	4d 81       	ldd	r20, Y+5	; 0x05
    1a52:	6a 81       	ldd	r22, Y+2	; 0x02
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <xQueueGenericCreate>
    1a5a:	9c 83       	std	Y+4, r25	; 0x04
    1a5c:	8b 83       	std	Y+3, r24	; 0x03
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <prvInitialiseMutex>
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	08 95       	ret

00001a7a <xQueueGenericSend>:
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	2e 97       	sbiw	r28, 0x0e	; 14
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	99 87       	std	Y+9, r25	; 0x09
    1a90:	88 87       	std	Y+8, r24	; 0x08
    1a92:	7b 87       	std	Y+11, r23	; 0x0b
    1a94:	6a 87       	std	Y+10, r22	; 0x0a
    1a96:	5d 87       	std	Y+13, r21	; 0x0d
    1a98:	4c 87       	std	Y+12, r20	; 0x0c
    1a9a:	2e 87       	std	Y+14, r18	; 0x0e
    1a9c:	19 82       	std	Y+1, r1	; 0x01
    1a9e:	88 85       	ldd	r24, Y+8	; 0x08
    1aa0:	99 85       	ldd	r25, Y+9	; 0x09
    1aa2:	9b 83       	std	Y+3, r25	; 0x03
    1aa4:	8a 83       	std	Y+2, r24	; 0x02
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	0f 92       	push	r0
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab8:	fc 01       	movw	r30, r24
    1aba:	83 8d       	ldd	r24, Z+27	; 0x1b
    1abc:	28 17       	cp	r18, r24
    1abe:	18 f0       	brcs	.+6      	; 0x1ac6 <xQueueGenericSend+0x4c>
    1ac0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ac2:	82 30       	cpi	r24, 0x02	; 2
    1ac4:	11 f5       	brne	.+68     	; 0x1b0a <xQueueGenericSend+0x90>
    1ac6:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ac8:	3b 85       	ldd	r19, Y+11	; 0x0b
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ace:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ad0:	b9 01       	movw	r22, r18
    1ad2:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <prvCopyDataToQueue>
    1ad6:	8c 83       	std	Y+4, r24	; 0x04
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	9b 81       	ldd	r25, Y+3	; 0x03
    1adc:	fc 01       	movw	r30, r24
    1ade:	81 89       	ldd	r24, Z+17	; 0x11
    1ae0:	88 23       	and	r24, r24
    1ae2:	51 f0       	breq	.+20     	; 0x1af8 <xQueueGenericSend+0x7e>
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae8:	41 96       	adiw	r24, 0x11	; 17
    1aea:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <xTaskRemoveFromEventList>
    1aee:	88 23       	and	r24, r24
    1af0:	41 f0       	breq	.+16     	; 0x1b02 <xQueueGenericSend+0x88>
    1af2:	0e 94 af 07 	call	0xf5e	; 0xf5e <vPortYield>
    1af6:	05 c0       	rjmp	.+10     	; 0x1b02 <xQueueGenericSend+0x88>
    1af8:	8c 81       	ldd	r24, Y+4	; 0x04
    1afa:	88 23       	and	r24, r24
    1afc:	11 f0       	breq	.+4      	; 0x1b02 <xQueueGenericSend+0x88>
    1afe:	0e 94 af 07 	call	0xf5e	; 0xf5e <vPortYield>
    1b02:	0f 90       	pop	r0
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	60 c0       	rjmp	.+192    	; 0x1bca <xQueueGenericSend+0x150>
    1b0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b0e:	89 2b       	or	r24, r25
    1b10:	21 f4       	brne	.+8      	; 0x1b1a <xQueueGenericSend+0xa0>
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	58 c0       	rjmp	.+176    	; 0x1bca <xQueueGenericSend+0x150>
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	88 23       	and	r24, r24
    1b1e:	31 f4       	brne	.+12     	; 0x1b2c <xQueueGenericSend+0xb2>
    1b20:	ce 01       	movw	r24, r28
    1b22:	05 96       	adiw	r24, 0x05	; 5
    1b24:	0e 94 56 14 	call	0x28ac	; 0x28ac <vTaskSetTimeOutState>
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	0e 94 af 11 	call	0x235e	; 0x235e <vTaskSuspendAll>
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	0f 92       	push	r0
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	fc 01       	movw	r30, r24
    1b40:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b42:	8f 3f       	cpi	r24, 0xFF	; 255
    1b44:	21 f4       	brne	.+8      	; 0x1b4e <xQueueGenericSend+0xd4>
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	15 8e       	std	Z+29, r1	; 0x1d
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	9b 81       	ldd	r25, Y+3	; 0x03
    1b52:	fc 01       	movw	r30, r24
    1b54:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b56:	8f 3f       	cpi	r24, 0xFF	; 255
    1b58:	21 f4       	brne	.+8      	; 0x1b62 <xQueueGenericSend+0xe8>
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5e:	fc 01       	movw	r30, r24
    1b60:	16 8e       	std	Z+30, r1	; 0x1e
    1b62:	0f 90       	pop	r0
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	9e 01       	movw	r18, r28
    1b68:	24 5f       	subi	r18, 0xF4	; 244
    1b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	05 96       	adiw	r24, 0x05	; 5
    1b70:	b9 01       	movw	r22, r18
    1b72:	0e 94 72 14 	call	0x28e4	; 0x28e4 <xTaskCheckForTimeOut>
    1b76:	88 23       	and	r24, r24
    1b78:	09 f5       	brne	.+66     	; 0x1bbc <xQueueGenericSend+0x142>
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7e:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <prvIsQueueFull>
    1b82:	88 23       	and	r24, r24
    1b84:	a1 f0       	breq	.+40     	; 0x1bae <xQueueGenericSend+0x134>
    1b86:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b88:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8e:	08 96       	adiw	r24, 0x08	; 8
    1b90:	b9 01       	movw	r22, r18
    1b92:	0e 94 c6 13 	call	0x278c	; 0x278c <vTaskPlaceOnEventList>
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9a:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <prvUnlockQueue>
    1b9e:	0e 94 bc 11 	call	0x2378	; 0x2378 <xTaskResumeAll>
    1ba2:	88 23       	and	r24, r24
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <xQueueGenericSend+0x12e>
    1ba6:	7f cf       	rjmp	.-258    	; 0x1aa6 <xQueueGenericSend+0x2c>
    1ba8:	0e 94 af 07 	call	0xf5e	; 0xf5e <vPortYield>
    1bac:	7c cf       	rjmp	.-264    	; 0x1aa6 <xQueueGenericSend+0x2c>
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb2:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <prvUnlockQueue>
    1bb6:	0e 94 bc 11 	call	0x2378	; 0x2378 <xTaskResumeAll>
    1bba:	75 cf       	rjmp	.-278    	; 0x1aa6 <xQueueGenericSend+0x2c>
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc0:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <prvUnlockQueue>
    1bc4:	0e 94 bc 11 	call	0x2378	; 0x2378 <xTaskResumeAll>
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	2e 96       	adiw	r28, 0x0e	; 14
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	08 95       	ret

00001bdc <xQueueGenericSendFromISR>:
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	2c 97       	sbiw	r28, 0x0c	; 12
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	9f 83       	std	Y+7, r25	; 0x07
    1bf2:	8e 83       	std	Y+6, r24	; 0x06
    1bf4:	79 87       	std	Y+9, r23	; 0x09
    1bf6:	68 87       	std	Y+8, r22	; 0x08
    1bf8:	5b 87       	std	Y+11, r21	; 0x0b
    1bfa:	4a 87       	std	Y+10, r20	; 0x0a
    1bfc:	2c 87       	std	Y+12, r18	; 0x0c
    1bfe:	8e 81       	ldd	r24, Y+6	; 0x06
    1c00:	9f 81       	ldd	r25, Y+7	; 0x07
    1c02:	9b 83       	std	Y+3, r25	; 0x03
    1c04:	8a 83       	std	Y+2, r24	; 0x02
    1c06:	1c 82       	std	Y+4, r1	; 0x04
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	9b 81       	ldd	r25, Y+3	; 0x03
    1c14:	fc 01       	movw	r30, r24
    1c16:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c18:	28 17       	cp	r18, r24
    1c1a:	18 f0       	brcs	.+6      	; 0x1c22 <xQueueGenericSendFromISR+0x46>
    1c1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c1e:	82 30       	cpi	r24, 0x02	; 2
    1c20:	89 f5       	brne	.+98     	; 0x1c84 <xQueueGenericSendFromISR+0xa8>
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	9b 81       	ldd	r25, Y+3	; 0x03
    1c26:	fc 01       	movw	r30, r24
    1c28:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c2a:	8d 83       	std	Y+5, r24	; 0x05
    1c2c:	28 85       	ldd	r18, Y+8	; 0x08
    1c2e:	39 85       	ldd	r19, Y+9	; 0x09
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	9b 81       	ldd	r25, Y+3	; 0x03
    1c34:	4c 85       	ldd	r20, Y+12	; 0x0c
    1c36:	b9 01       	movw	r22, r18
    1c38:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <prvCopyDataToQueue>
    1c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c40:	b9 f4       	brne	.+46     	; 0x1c70 <xQueueGenericSendFromISR+0x94>
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	9b 81       	ldd	r25, Y+3	; 0x03
    1c46:	fc 01       	movw	r30, r24
    1c48:	81 89       	ldd	r24, Z+17	; 0x11
    1c4a:	88 23       	and	r24, r24
    1c4c:	c1 f0       	breq	.+48     	; 0x1c7e <xQueueGenericSendFromISR+0xa2>
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	9b 81       	ldd	r25, Y+3	; 0x03
    1c52:	41 96       	adiw	r24, 0x11	; 17
    1c54:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <xTaskRemoveFromEventList>
    1c58:	88 23       	and	r24, r24
    1c5a:	89 f0       	breq	.+34     	; 0x1c7e <xQueueGenericSendFromISR+0xa2>
    1c5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c60:	89 2b       	or	r24, r25
    1c62:	69 f0       	breq	.+26     	; 0x1c7e <xQueueGenericSendFromISR+0xa2>
    1c64:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c66:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c68:	21 e0       	ldi	r18, 0x01	; 1
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	20 83       	st	Z, r18
    1c6e:	07 c0       	rjmp	.+14     	; 0x1c7e <xQueueGenericSendFromISR+0xa2>
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	8f 5f       	subi	r24, 0xFF	; 255
    1c74:	28 2f       	mov	r18, r24
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	26 8f       	std	Z+30, r18	; 0x1e
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	89 83       	std	Y+1, r24	; 0x01
    1c82:	01 c0       	rjmp	.+2      	; 0x1c86 <xQueueGenericSendFromISR+0xaa>
    1c84:	19 82       	std	Y+1, r1	; 0x01
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	2c 96       	adiw	r28, 0x0c	; 12
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	08 95       	ret

00001c9a <prvCopyDataToQueue>:
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	27 97       	sbiw	r28, 0x07	; 7
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	9c 83       	std	Y+4, r25	; 0x04
    1cb0:	8b 83       	std	Y+3, r24	; 0x03
    1cb2:	7e 83       	std	Y+6, r23	; 0x06
    1cb4:	6d 83       	std	Y+5, r22	; 0x05
    1cb6:	4f 83       	std	Y+7, r20	; 0x07
    1cb8:	19 82       	std	Y+1, r1	; 0x01
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cc2:	8a 83       	std	Y+2, r24	; 0x02
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	fc 01       	movw	r30, r24
    1cca:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ccc:	88 23       	and	r24, r24
    1cce:	b1 f4       	brne	.+44     	; 0x1cfc <prvCopyDataToQueue+0x62>
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	80 81       	ld	r24, Z
    1cd8:	91 81       	ldd	r25, Z+1	; 0x01
    1cda:	89 2b       	or	r24, r25
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <prvCopyDataToQueue+0x46>
    1cde:	9c c0       	rjmp	.+312    	; 0x1e18 <prvCopyDataToQueue+0x17e>
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	82 81       	ldd	r24, Z+2	; 0x02
    1ce8:	93 81       	ldd	r25, Z+3	; 0x03
    1cea:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <xTaskPriorityDisinherit>
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	13 82       	std	Z+3, r1	; 0x03
    1cf8:	12 82       	std	Z+2, r1	; 0x02
    1cfa:	8e c0       	rjmp	.+284    	; 0x1e18 <prvCopyDataToQueue+0x17e>
    1cfc:	8f 81       	ldd	r24, Y+7	; 0x07
    1cfe:	88 23       	and	r24, r24
    1d00:	d9 f5       	brne	.+118    	; 0x1d78 <prvCopyDataToQueue+0xde>
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	fc 01       	movw	r30, r24
    1d08:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d0a:	48 2f       	mov	r20, r24
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	fc 01       	movw	r30, r24
    1d14:	84 81       	ldd	r24, Z+4	; 0x04
    1d16:	95 81       	ldd	r25, Z+5	; 0x05
    1d18:	2d 81       	ldd	r18, Y+5	; 0x05
    1d1a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d1c:	b9 01       	movw	r22, r18
    1d1e:	0e 94 e5 17 	call	0x2fca	; 0x2fca <memcpy>
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	9c 81       	ldd	r25, Y+4	; 0x04
    1d26:	fc 01       	movw	r30, r24
    1d28:	24 81       	ldd	r18, Z+4	; 0x04
    1d2a:	35 81       	ldd	r19, Z+5	; 0x05
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	fc 01       	movw	r30, r24
    1d32:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	28 0f       	add	r18, r24
    1d3a:	39 1f       	adc	r19, r25
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d40:	fc 01       	movw	r30, r24
    1d42:	35 83       	std	Z+5, r19	; 0x05
    1d44:	24 83       	std	Z+4, r18	; 0x04
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	24 81       	ldd	r18, Z+4	; 0x04
    1d4e:	35 81       	ldd	r19, Z+5	; 0x05
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	fc 01       	movw	r30, r24
    1d56:	82 81       	ldd	r24, Z+2	; 0x02
    1d58:	93 81       	ldd	r25, Z+3	; 0x03
    1d5a:	28 17       	cp	r18, r24
    1d5c:	39 07       	cpc	r19, r25
    1d5e:	08 f4       	brcc	.+2      	; 0x1d62 <prvCopyDataToQueue+0xc8>
    1d60:	5b c0       	rjmp	.+182    	; 0x1e18 <prvCopyDataToQueue+0x17e>
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	9c 81       	ldd	r25, Y+4	; 0x04
    1d66:	fc 01       	movw	r30, r24
    1d68:	20 81       	ld	r18, Z
    1d6a:	31 81       	ldd	r19, Z+1	; 0x01
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	fc 01       	movw	r30, r24
    1d72:	35 83       	std	Z+5, r19	; 0x05
    1d74:	24 83       	std	Z+4, r18	; 0x04
    1d76:	50 c0       	rjmp	.+160    	; 0x1e18 <prvCopyDataToQueue+0x17e>
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d80:	48 2f       	mov	r20, r24
    1d82:	50 e0       	ldi	r21, 0x00	; 0
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	fc 01       	movw	r30, r24
    1d8a:	86 81       	ldd	r24, Z+6	; 0x06
    1d8c:	97 81       	ldd	r25, Z+7	; 0x07
    1d8e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d90:	3e 81       	ldd	r19, Y+6	; 0x06
    1d92:	b9 01       	movw	r22, r18
    1d94:	0e 94 e5 17 	call	0x2fca	; 0x2fca <memcpy>
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	26 81       	ldd	r18, Z+6	; 0x06
    1da0:	37 81       	ldd	r19, Z+7	; 0x07
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	fc 01       	movw	r30, r24
    1da8:	84 8d       	ldd	r24, Z+28	; 0x1c
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	91 95       	neg	r25
    1db0:	81 95       	neg	r24
    1db2:	91 09       	sbc	r25, r1
    1db4:	28 0f       	add	r18, r24
    1db6:	39 1f       	adc	r19, r25
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	37 83       	std	Z+7, r19	; 0x07
    1dc0:	26 83       	std	Z+6, r18	; 0x06
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	26 81       	ldd	r18, Z+6	; 0x06
    1dca:	37 81       	ldd	r19, Z+7	; 0x07
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	80 81       	ld	r24, Z
    1dd4:	91 81       	ldd	r25, Z+1	; 0x01
    1dd6:	28 17       	cp	r18, r24
    1dd8:	39 07       	cpc	r19, r25
    1dda:	a8 f4       	brcc	.+42     	; 0x1e06 <prvCopyDataToQueue+0x16c>
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	9c 81       	ldd	r25, Y+4	; 0x04
    1de0:	fc 01       	movw	r30, r24
    1de2:	22 81       	ldd	r18, Z+2	; 0x02
    1de4:	33 81       	ldd	r19, Z+3	; 0x03
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	fc 01       	movw	r30, r24
    1dec:	84 8d       	ldd	r24, Z+28	; 0x1c
    1dee:	88 2f       	mov	r24, r24
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	91 95       	neg	r25
    1df4:	81 95       	neg	r24
    1df6:	91 09       	sbc	r25, r1
    1df8:	28 0f       	add	r18, r24
    1dfa:	39 1f       	adc	r19, r25
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	fc 01       	movw	r30, r24
    1e02:	37 83       	std	Z+7, r19	; 0x07
    1e04:	26 83       	std	Z+6, r18	; 0x06
    1e06:	8f 81       	ldd	r24, Y+7	; 0x07
    1e08:	82 30       	cpi	r24, 0x02	; 2
    1e0a:	31 f4       	brne	.+12     	; 0x1e18 <prvCopyDataToQueue+0x17e>
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	88 23       	and	r24, r24
    1e10:	19 f0       	breq	.+6      	; 0x1e18 <prvCopyDataToQueue+0x17e>
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	81 50       	subi	r24, 0x01	; 1
    1e16:	8a 83       	std	Y+2, r24	; 0x02
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	21 e0       	ldi	r18, 0x01	; 1
    1e1c:	28 0f       	add	r18, r24
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	fc 01       	movw	r30, r24
    1e24:	22 8f       	std	Z+26, r18	; 0x1a
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	27 96       	adiw	r28, 0x07	; 7
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	08 95       	ret

00001e3a <prvUnlockQueue>:
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <prvUnlockQueue+0x6>
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <prvUnlockQueue+0x8>
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	9c 83       	std	Y+4, r25	; 0x04
    1e48:	8b 83       	std	Y+3, r24	; 0x03
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	0f 92       	push	r0
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	fc 01       	movw	r30, r24
    1e56:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	12 c0       	rjmp	.+36     	; 0x1e80 <prvUnlockQueue+0x46>
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	fc 01       	movw	r30, r24
    1e62:	81 89       	ldd	r24, Z+17	; 0x11
    1e64:	88 23       	and	r24, r24
    1e66:	81 f0       	breq	.+32     	; 0x1e88 <prvUnlockQueue+0x4e>
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	41 96       	adiw	r24, 0x11	; 17
    1e6e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <xTaskRemoveFromEventList>
    1e72:	88 23       	and	r24, r24
    1e74:	11 f0       	breq	.+4      	; 0x1e7a <prvUnlockQueue+0x40>
    1e76:	0e 94 da 14 	call	0x29b4	; 0x29b4 <vTaskMissedYield>
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	81 50       	subi	r24, 0x01	; 1
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	18 16       	cp	r1, r24
    1e84:	5c f3       	brlt	.-42     	; 0x1e5c <prvUnlockQueue+0x22>
    1e86:	01 c0       	rjmp	.+2      	; 0x1e8a <prvUnlockQueue+0x50>
    1e88:	00 00       	nop
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8e:	2f ef       	ldi	r18, 0xFF	; 255
    1e90:	fc 01       	movw	r30, r24
    1e92:	26 8f       	std	Z+30, r18	; 0x1e
    1e94:	0f 90       	pop	r0
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	0f 92       	push	r0
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
    1ea8:	12 c0       	rjmp	.+36     	; 0x1ece <prvUnlockQueue+0x94>
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	fc 01       	movw	r30, r24
    1eb0:	80 85       	ldd	r24, Z+8	; 0x08
    1eb2:	88 23       	and	r24, r24
    1eb4:	81 f0       	breq	.+32     	; 0x1ed6 <prvUnlockQueue+0x9c>
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eba:	08 96       	adiw	r24, 0x08	; 8
    1ebc:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <xTaskRemoveFromEventList>
    1ec0:	88 23       	and	r24, r24
    1ec2:	11 f0       	breq	.+4      	; 0x1ec8 <prvUnlockQueue+0x8e>
    1ec4:	0e 94 da 14 	call	0x29b4	; 0x29b4 <vTaskMissedYield>
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	81 50       	subi	r24, 0x01	; 1
    1ecc:	8a 83       	std	Y+2, r24	; 0x02
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	18 16       	cp	r1, r24
    1ed2:	5c f3       	brlt	.-42     	; 0x1eaa <prvUnlockQueue+0x70>
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <prvUnlockQueue+0x9e>
    1ed6:	00 00       	nop
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	2f ef       	ldi	r18, 0xFF	; 255
    1ede:	fc 01       	movw	r30, r24
    1ee0:	25 8f       	std	Z+29, r18	; 0x1d
    1ee2:	0f 90       	pop	r0
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	00 00       	nop
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	08 95       	ret

00001ef6 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <prvIsQueueFull+0x6>
    1efc:	1f 92       	push	r1
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	9b 83       	std	Y+3, r25	; 0x03
    1f04:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f10:	fc 01       	movw	r30, r24
    1f12:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	9b 81       	ldd	r25, Y+3	; 0x03
    1f18:	fc 01       	movw	r30, r24
    1f1a:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f1c:	28 17       	cp	r18, r24
    1f1e:	19 f4       	brne	.+6      	; 0x1f26 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	01 c0       	rjmp	.+2      	; 0x1f28 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    1f26:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    1f28:	0f 90       	pop	r0
    1f2a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	08 95       	ret

00001f3a <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    1f3a:	8f 92       	push	r8
    1f3c:	9f 92       	push	r9
    1f3e:	af 92       	push	r10
    1f40:	bf 92       	push	r11
    1f42:	cf 92       	push	r12
    1f44:	df 92       	push	r13
    1f46:	ef 92       	push	r14
    1f48:	ff 92       	push	r15
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	60 97       	sbiw	r28, 0x10	; 16
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	9f 83       	std	Y+7, r25	; 0x07
    1f64:	8e 83       	std	Y+6, r24	; 0x06
    1f66:	79 87       	std	Y+9, r23	; 0x09
    1f68:	68 87       	std	Y+8, r22	; 0x08
    1f6a:	5b 87       	std	Y+11, r21	; 0x0b
    1f6c:	4a 87       	std	Y+10, r20	; 0x0a
    1f6e:	3d 87       	std	Y+13, r19	; 0x0d
    1f70:	2c 87       	std	Y+12, r18	; 0x0c
    1f72:	0e 87       	std	Y+14, r16	; 0x0e
    1f74:	f8 8a       	std	Y+16, r15	; 0x10
    1f76:	ef 86       	std	Y+15, r14	; 0x0f
    1f78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f7c:	0e 94 cd 08 	call	0x119a	; 0x119a <pvPortMalloc>
    1f80:	9d 83       	std	Y+5, r25	; 0x05
    1f82:	8c 83       	std	Y+4, r24	; 0x04
    1f84:	8c 81       	ldd	r24, Y+4	; 0x04
    1f86:	9d 81       	ldd	r25, Y+5	; 0x05
    1f88:	89 2b       	or	r24, r25
    1f8a:	b9 f0       	breq	.+46     	; 0x1fba <xTaskCreate+0x80>
    1f8c:	8c e2       	ldi	r24, 0x2C	; 44
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	0e 94 cd 08 	call	0x119a	; 0x119a <pvPortMalloc>
    1f94:	9a 83       	std	Y+2, r25	; 0x02
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9c:	89 2b       	or	r24, r25
    1f9e:	41 f0       	breq	.+16     	; 0x1fb0 <xTaskCreate+0x76>
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa4:	2c 81       	ldd	r18, Y+4	; 0x04
    1fa6:	3d 81       	ldd	r19, Y+5	; 0x05
    1fa8:	fc 01       	movw	r30, r24
    1faa:	30 8f       	std	Z+24, r19	; 0x18
    1fac:	27 8b       	std	Z+23, r18	; 0x17
    1fae:	07 c0       	rjmp	.+14     	; 0x1fbe <xTaskCreate+0x84>
    1fb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb4:	0e 94 22 09 	call	0x1244	; 0x1244 <vPortFree>
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <xTaskCreate+0x84>
    1fba:	1a 82       	std	Y+2, r1	; 0x02
    1fbc:	19 82       	std	Y+1, r1	; 0x01
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc2:	89 2b       	or	r24, r25
    1fc4:	09 f1       	breq	.+66     	; 0x2008 <xTaskCreate+0xce>
    1fc6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fc8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fca:	cc 01       	movw	r24, r24
    1fcc:	a0 e0       	ldi	r26, 0x00	; 0
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	09 81       	ldd	r16, Y+1	; 0x01
    1fd2:	1a 81       	ldd	r17, Y+2	; 0x02
    1fd4:	4f 85       	ldd	r20, Y+15	; 0x0f
    1fd6:	58 89       	ldd	r21, Y+16	; 0x10
    1fd8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fda:	3d 85       	ldd	r19, Y+13	; 0x0d
    1fdc:	68 85       	ldd	r22, Y+8	; 0x08
    1fde:	79 85       	ldd	r23, Y+9	; 0x09
    1fe0:	ee 81       	ldd	r30, Y+6	; 0x06
    1fe2:	ff 81       	ldd	r31, Y+7	; 0x07
    1fe4:	81 2c       	mov	r8, r1
    1fe6:	91 2c       	mov	r9, r1
    1fe8:	58 01       	movw	r10, r16
    1fea:	6a 01       	movw	r12, r20
    1fec:	ee 84       	ldd	r14, Y+14	; 0x0e
    1fee:	89 01       	movw	r16, r18
    1ff0:	9c 01       	movw	r18, r24
    1ff2:	ad 01       	movw	r20, r26
    1ff4:	cf 01       	movw	r24, r30
    1ff6:	0e 94 1a 10 	call	0x2034	; 0x2034 <prvInitialiseNewTask>
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	0e 94 f6 10 	call	0x21ec	; 0x21ec <prvAddNewTaskToReadyList>
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	8b 83       	std	Y+3, r24	; 0x03
    2006:	02 c0       	rjmp	.+4      	; 0x200c <xTaskCreate+0xd2>
    2008:	8f ef       	ldi	r24, 0xFF	; 255
    200a:	8b 83       	std	Y+3, r24	; 0x03
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	60 96       	adiw	r28, 0x10	; 16
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	ff 90       	pop	r15
    2024:	ef 90       	pop	r14
    2026:	df 90       	pop	r13
    2028:	cf 90       	pop	r12
    202a:	bf 90       	pop	r11
    202c:	af 90       	pop	r10
    202e:	9f 90       	pop	r9
    2030:	8f 90       	pop	r8
    2032:	08 95       	ret

00002034 <prvInitialiseNewTask>:
    2034:	8f 92       	push	r8
    2036:	9f 92       	push	r9
    2038:	af 92       	push	r10
    203a:	bf 92       	push	r11
    203c:	cf 92       	push	r12
    203e:	df 92       	push	r13
    2040:	ef 92       	push	r14
    2042:	0f 93       	push	r16
    2044:	1f 93       	push	r17
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	64 97       	sbiw	r28, 0x14	; 20
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	9d 83       	std	Y+5, r25	; 0x05
    205c:	8c 83       	std	Y+4, r24	; 0x04
    205e:	7f 83       	std	Y+7, r23	; 0x07
    2060:	6e 83       	std	Y+6, r22	; 0x06
    2062:	28 87       	std	Y+8, r18	; 0x08
    2064:	39 87       	std	Y+9, r19	; 0x09
    2066:	4a 87       	std	Y+10, r20	; 0x0a
    2068:	5b 87       	std	Y+11, r21	; 0x0b
    206a:	1d 87       	std	Y+13, r17	; 0x0d
    206c:	0c 87       	std	Y+12, r16	; 0x0c
    206e:	ee 86       	std	Y+14, r14	; 0x0e
    2070:	d8 8a       	std	Y+16, r13	; 0x10
    2072:	cf 86       	std	Y+15, r12	; 0x0f
    2074:	ba 8a       	std	Y+18, r11	; 0x12
    2076:	a9 8a       	std	Y+17, r10	; 0x11
    2078:	9c 8a       	std	Y+20, r9	; 0x14
    207a:	8b 8a       	std	Y+19, r8	; 0x13
    207c:	28 85       	ldd	r18, Y+8	; 0x08
    207e:	39 85       	ldd	r19, Y+9	; 0x09
    2080:	89 89       	ldd	r24, Y+17	; 0x11
    2082:	9a 89       	ldd	r25, Y+18	; 0x12
    2084:	fc 01       	movw	r30, r24
    2086:	87 89       	ldd	r24, Z+23	; 0x17
    2088:	90 8d       	ldd	r25, Z+24	; 0x18
    208a:	a9 01       	movw	r20, r18
    208c:	65 ea       	ldi	r22, 0xA5	; 165
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <memset>
    2094:	89 89       	ldd	r24, Y+17	; 0x11
    2096:	9a 89       	ldd	r25, Y+18	; 0x12
    2098:	fc 01       	movw	r30, r24
    209a:	27 89       	ldd	r18, Z+23	; 0x17
    209c:	30 8d       	ldd	r19, Z+24	; 0x18
    209e:	88 85       	ldd	r24, Y+8	; 0x08
    20a0:	99 85       	ldd	r25, Y+9	; 0x09
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	82 0f       	add	r24, r18
    20a6:	93 1f       	adc	r25, r19
    20a8:	9b 83       	std	Y+3, r25	; 0x03
    20aa:	8a 83       	std	Y+2, r24	; 0x02
    20ac:	19 82       	std	Y+1, r1	; 0x01
    20ae:	21 c0       	rjmp	.+66     	; 0x20f2 <prvInitialiseNewTask+0xbe>
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	88 2f       	mov	r24, r24
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	29 81       	ldd	r18, Y+1	; 0x01
    20b8:	22 2f       	mov	r18, r18
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	4e 81       	ldd	r20, Y+6	; 0x06
    20be:	5f 81       	ldd	r21, Y+7	; 0x07
    20c0:	24 0f       	add	r18, r20
    20c2:	35 1f       	adc	r19, r21
    20c4:	f9 01       	movw	r30, r18
    20c6:	40 81       	ld	r20, Z
    20c8:	29 89       	ldd	r18, Y+17	; 0x11
    20ca:	3a 89       	ldd	r19, Y+18	; 0x12
    20cc:	82 0f       	add	r24, r18
    20ce:	93 1f       	adc	r25, r19
    20d0:	49 96       	adiw	r24, 0x19	; 25
    20d2:	fc 01       	movw	r30, r24
    20d4:	40 83       	st	Z, r20
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	88 2f       	mov	r24, r24
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	2e 81       	ldd	r18, Y+6	; 0x06
    20de:	3f 81       	ldd	r19, Y+7	; 0x07
    20e0:	82 0f       	add	r24, r18
    20e2:	93 1f       	adc	r25, r19
    20e4:	fc 01       	movw	r30, r24
    20e6:	80 81       	ld	r24, Z
    20e8:	88 23       	and	r24, r24
    20ea:	39 f0       	breq	.+14     	; 0x20fa <prvInitialiseNewTask+0xc6>
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	8f 5f       	subi	r24, 0xFF	; 255
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	88 30       	cpi	r24, 0x08	; 8
    20f6:	e0 f2       	brcs	.-72     	; 0x20b0 <prvInitialiseNewTask+0x7c>
    20f8:	01 c0       	rjmp	.+2      	; 0x20fc <prvInitialiseNewTask+0xc8>
    20fa:	00 00       	nop
    20fc:	89 89       	ldd	r24, Y+17	; 0x11
    20fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2100:	fc 01       	movw	r30, r24
    2102:	10 a2       	std	Z+32, r1	; 0x20
    2104:	8e 85       	ldd	r24, Y+14	; 0x0e
    2106:	84 30       	cpi	r24, 0x04	; 4
    2108:	10 f0       	brcs	.+4      	; 0x210e <prvInitialiseNewTask+0xda>
    210a:	83 e0       	ldi	r24, 0x03	; 3
    210c:	8e 87       	std	Y+14, r24	; 0x0e
    210e:	89 89       	ldd	r24, Y+17	; 0x11
    2110:	9a 89       	ldd	r25, Y+18	; 0x12
    2112:	2e 85       	ldd	r18, Y+14	; 0x0e
    2114:	fc 01       	movw	r30, r24
    2116:	26 8b       	std	Z+22, r18	; 0x16
    2118:	89 89       	ldd	r24, Y+17	; 0x11
    211a:	9a 89       	ldd	r25, Y+18	; 0x12
    211c:	2e 85       	ldd	r18, Y+14	; 0x0e
    211e:	fc 01       	movw	r30, r24
    2120:	23 a3       	std	Z+35, r18	; 0x23
    2122:	89 89       	ldd	r24, Y+17	; 0x11
    2124:	9a 89       	ldd	r25, Y+18	; 0x12
    2126:	fc 01       	movw	r30, r24
    2128:	14 a2       	std	Z+36, r1	; 0x24
    212a:	89 89       	ldd	r24, Y+17	; 0x11
    212c:	9a 89       	ldd	r25, Y+18	; 0x12
    212e:	02 96       	adiw	r24, 0x02	; 2
    2130:	0e 94 a1 04 	call	0x942	; 0x942 <vListInitialiseItem>
    2134:	89 89       	ldd	r24, Y+17	; 0x11
    2136:	9a 89       	ldd	r25, Y+18	; 0x12
    2138:	0c 96       	adiw	r24, 0x0c	; 12
    213a:	0e 94 a1 04 	call	0x942	; 0x942 <vListInitialiseItem>
    213e:	89 89       	ldd	r24, Y+17	; 0x11
    2140:	9a 89       	ldd	r25, Y+18	; 0x12
    2142:	29 89       	ldd	r18, Y+17	; 0x11
    2144:	3a 89       	ldd	r19, Y+18	; 0x12
    2146:	fc 01       	movw	r30, r24
    2148:	31 87       	std	Z+9, r19	; 0x09
    214a:	20 87       	std	Z+8, r18	; 0x08
    214c:	8e 85       	ldd	r24, Y+14	; 0x0e
    214e:	88 2f       	mov	r24, r24
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	24 e0       	ldi	r18, 0x04	; 4
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	28 1b       	sub	r18, r24
    2158:	39 0b       	sbc	r19, r25
    215a:	89 89       	ldd	r24, Y+17	; 0x11
    215c:	9a 89       	ldd	r25, Y+18	; 0x12
    215e:	fc 01       	movw	r30, r24
    2160:	35 87       	std	Z+13, r19	; 0x0d
    2162:	24 87       	std	Z+12, r18	; 0x0c
    2164:	89 89       	ldd	r24, Y+17	; 0x11
    2166:	9a 89       	ldd	r25, Y+18	; 0x12
    2168:	29 89       	ldd	r18, Y+17	; 0x11
    216a:	3a 89       	ldd	r19, Y+18	; 0x12
    216c:	fc 01       	movw	r30, r24
    216e:	33 8b       	std	Z+19, r19	; 0x13
    2170:	22 8b       	std	Z+18, r18	; 0x12
    2172:	89 89       	ldd	r24, Y+17	; 0x11
    2174:	9a 89       	ldd	r25, Y+18	; 0x12
    2176:	fc 01       	movw	r30, r24
    2178:	16 a2       	std	Z+38, r1	; 0x26
    217a:	15 a2       	std	Z+37, r1	; 0x25
    217c:	89 89       	ldd	r24, Y+17	; 0x11
    217e:	9a 89       	ldd	r25, Y+18	; 0x12
    2180:	fc 01       	movw	r30, r24
    2182:	17 a2       	std	Z+39, r1	; 0x27
    2184:	10 a6       	std	Z+40, r1	; 0x28
    2186:	11 a6       	std	Z+41, r1	; 0x29
    2188:	12 a6       	std	Z+42, r1	; 0x2a
    218a:	89 89       	ldd	r24, Y+17	; 0x11
    218c:	9a 89       	ldd	r25, Y+18	; 0x12
    218e:	fc 01       	movw	r30, r24
    2190:	13 a6       	std	Z+43, r1	; 0x2b
    2192:	4c 85       	ldd	r20, Y+12	; 0x0c
    2194:	5d 85       	ldd	r21, Y+13	; 0x0d
    2196:	2c 81       	ldd	r18, Y+4	; 0x04
    2198:	3d 81       	ldd	r19, Y+5	; 0x05
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	9b 81       	ldd	r25, Y+3	; 0x03
    219e:	b9 01       	movw	r22, r18
    21a0:	0e 94 d1 05 	call	0xba2	; 0xba2 <pxPortInitialiseStack>
    21a4:	9c 01       	movw	r18, r24
    21a6:	89 89       	ldd	r24, Y+17	; 0x11
    21a8:	9a 89       	ldd	r25, Y+18	; 0x12
    21aa:	fc 01       	movw	r30, r24
    21ac:	31 83       	std	Z+1, r19	; 0x01
    21ae:	20 83       	st	Z, r18
    21b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b2:	98 89       	ldd	r25, Y+16	; 0x10
    21b4:	89 2b       	or	r24, r25
    21b6:	39 f0       	breq	.+14     	; 0x21c6 <prvInitialiseNewTask+0x192>
    21b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ba:	98 89       	ldd	r25, Y+16	; 0x10
    21bc:	29 89       	ldd	r18, Y+17	; 0x11
    21be:	3a 89       	ldd	r19, Y+18	; 0x12
    21c0:	fc 01       	movw	r30, r24
    21c2:	31 83       	std	Z+1, r19	; 0x01
    21c4:	20 83       	st	Z, r18
    21c6:	00 00       	nop
    21c8:	64 96       	adiw	r28, 0x14	; 20
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	1f 91       	pop	r17
    21da:	0f 91       	pop	r16
    21dc:	ef 90       	pop	r14
    21de:	df 90       	pop	r13
    21e0:	cf 90       	pop	r12
    21e2:	bf 90       	pop	r11
    21e4:	af 90       	pop	r10
    21e6:	9f 90       	pop	r9
    21e8:	8f 90       	pop	r8
    21ea:	08 95       	ret

000021ec <prvAddNewTaskToReadyList>:
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <prvAddNewTaskToReadyList+0x6>
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	9a 83       	std	Y+2, r25	; 0x02
    21f8:	89 83       	std	Y+1, r24	; 0x01
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	0f 92       	push	r0
    2200:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <uxCurrentNumberOfTasks>
    2204:	8f 5f       	subi	r24, 0xFF	; 255
    2206:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <uxCurrentNumberOfTasks>
    220a:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <pxCurrentTCB>
    220e:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    2212:	89 2b       	or	r24, r25
    2214:	69 f4       	brne	.+26     	; 0x2230 <prvAddNewTaskToReadyList+0x44>
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	9a 81       	ldd	r25, Y+2	; 0x02
    221a:	90 93 9f 05 	sts	0x059F, r25	; 0x80059f <pxCurrentTCB+0x1>
    221e:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <pxCurrentTCB>
    2222:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <uxCurrentNumberOfTasks>
    2226:	81 30       	cpi	r24, 0x01	; 1
    2228:	c9 f4       	brne	.+50     	; 0x225c <prvAddNewTaskToReadyList+0x70>
    222a:	0e 94 f7 14 	call	0x29ee	; 0x29ee <prvInitialiseTaskLists>
    222e:	16 c0       	rjmp	.+44     	; 0x225c <prvAddNewTaskToReadyList+0x70>
    2230:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <xSchedulerRunning>
    2234:	88 23       	and	r24, r24
    2236:	91 f4       	brne	.+36     	; 0x225c <prvAddNewTaskToReadyList+0x70>
    2238:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <pxCurrentTCB>
    223c:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    2240:	fc 01       	movw	r30, r24
    2242:	26 89       	ldd	r18, Z+22	; 0x16
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	fc 01       	movw	r30, r24
    224a:	86 89       	ldd	r24, Z+22	; 0x16
    224c:	82 17       	cp	r24, r18
    224e:	30 f0       	brcs	.+12     	; 0x225c <prvAddNewTaskToReadyList+0x70>
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	9a 81       	ldd	r25, Y+2	; 0x02
    2254:	90 93 9f 05 	sts	0x059F, r25	; 0x80059f <pxCurrentTCB+0x1>
    2258:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <pxCurrentTCB>
    225c:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <uxTaskNumber>
    2260:	8f 5f       	subi	r24, 0xFF	; 255
    2262:	80 93 f5 05 	sts	0x05F5, r24	; 0x8005f5 <uxTaskNumber>
    2266:	20 91 f5 05 	lds	r18, 0x05F5	; 0x8005f5 <uxTaskNumber>
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	9a 81       	ldd	r25, Y+2	; 0x02
    226e:	fc 01       	movw	r30, r24
    2270:	21 a3       	std	Z+33, r18	; 0x21
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	9a 81       	ldd	r25, Y+2	; 0x02
    2276:	fc 01       	movw	r30, r24
    2278:	96 89       	ldd	r25, Z+22	; 0x16
    227a:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <uxTopReadyPriority>
    227e:	89 17       	cp	r24, r25
    2280:	30 f4       	brcc	.+12     	; 0x228e <prvAddNewTaskToReadyList+0xa2>
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	9a 81       	ldd	r25, Y+2	; 0x02
    2286:	fc 01       	movw	r30, r24
    2288:	86 89       	ldd	r24, Z+22	; 0x16
    228a:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <uxTopReadyPriority>
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	9a 81       	ldd	r25, Y+2	; 0x02
    2292:	ac 01       	movw	r20, r24
    2294:	4e 5f       	subi	r20, 0xFE	; 254
    2296:	5f 4f       	sbci	r21, 0xFF	; 255
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	9a 81       	ldd	r25, Y+2	; 0x02
    229c:	fc 01       	movw	r30, r24
    229e:	86 89       	ldd	r24, Z+22	; 0x16
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	c9 01       	movw	r24, r18
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	82 0f       	add	r24, r18
    22b4:	93 1f       	adc	r25, r19
    22b6:	80 56       	subi	r24, 0x60	; 96
    22b8:	9a 4f       	sbci	r25, 0xFA	; 250
    22ba:	ba 01       	movw	r22, r20
    22bc:	0e 94 b3 04 	call	0x966	; 0x966 <vListInsertEnd>
    22c0:	0f 90       	pop	r0
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <xSchedulerRunning>
    22c8:	88 23       	and	r24, r24
    22ca:	71 f0       	breq	.+28     	; 0x22e8 <prvAddNewTaskToReadyList+0xfc>
    22cc:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <pxCurrentTCB>
    22d0:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    22d4:	fc 01       	movw	r30, r24
    22d6:	26 89       	ldd	r18, Z+22	; 0x16
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	9a 81       	ldd	r25, Y+2	; 0x02
    22dc:	fc 01       	movw	r30, r24
    22de:	86 89       	ldd	r24, Z+22	; 0x16
    22e0:	28 17       	cp	r18, r24
    22e2:	10 f4       	brcc	.+4      	; 0x22e8 <prvAddNewTaskToReadyList+0xfc>
    22e4:	0e 94 af 07 	call	0xf5e	; 0xf5e <vPortYield>
    22e8:	00 00       	nop
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	08 95       	ret

000022f4 <vTaskStartScheduler>:
    22f4:	ef 92       	push	r14
    22f6:	ff 92       	push	r15
    22f8:	0f 93       	push	r16
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	1f 92       	push	r1
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	0f 2e       	mov	r0, r31
    2306:	f8 ef       	ldi	r31, 0xF8	; 248
    2308:	ef 2e       	mov	r14, r31
    230a:	f5 e0       	ldi	r31, 0x05	; 5
    230c:	ff 2e       	mov	r15, r31
    230e:	f0 2d       	mov	r31, r0
    2310:	00 e0       	ldi	r16, 0x00	; 0
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	45 e5       	ldi	r20, 0x55	; 85
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	6f e2       	ldi	r22, 0x2F	; 47
    231c:	71 e0       	ldi	r23, 0x01	; 1
    231e:	85 ee       	ldi	r24, 0xE5	; 229
    2320:	94 e1       	ldi	r25, 0x14	; 20
    2322:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <xTaskCreate>
    2326:	89 83       	std	Y+1, r24	; 0x01
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	81 30       	cpi	r24, 0x01	; 1
    232c:	81 f4       	brne	.+32     	; 0x234e <vTaskStartScheduler+0x5a>
    232e:	f8 94       	cli
    2330:	8f ef       	ldi	r24, 0xFF	; 255
    2332:	9f ef       	ldi	r25, 0xFF	; 255
    2334:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <xNextTaskUnblockTime+0x1>
    2338:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <xNextTaskUnblockTime>
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	80 93 f1 05 	sts	0x05F1, r24	; 0x8005f1 <xSchedulerRunning>
    2342:	10 92 ef 05 	sts	0x05EF, r1	; 0x8005ef <xTickCount+0x1>
    2346:	10 92 ee 05 	sts	0x05EE, r1	; 0x8005ee <xTickCount>
    234a:	0e 94 7a 07 	call	0xef4	; 0xef4 <xPortStartScheduler>
    234e:	00 00       	nop
    2350:	0f 90       	pop	r0
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	0f 91       	pop	r16
    2358:	ff 90       	pop	r15
    235a:	ef 90       	pop	r14
    235c:	08 95       	ret

0000235e <vTaskSuspendAll>:
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <uxSchedulerSuspended>
    236a:	8f 5f       	subi	r24, 0xFF	; 255
    236c:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <uxSchedulerSuspended>
    2370:	00 00       	nop
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	08 95       	ret

00002378 <xTaskResumeAll>:
    2378:	cf 93       	push	r28
    237a:	df 93       	push	r29
    237c:	00 d0       	rcall	.+0      	; 0x237e <xTaskResumeAll+0x6>
    237e:	00 d0       	rcall	.+0      	; 0x2380 <xTaskResumeAll+0x8>
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	1a 82       	std	Y+2, r1	; 0x02
    2386:	19 82       	std	Y+1, r1	; 0x01
    2388:	1b 82       	std	Y+3, r1	; 0x03
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	0f 92       	push	r0
    2390:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <uxSchedulerSuspended>
    2394:	81 50       	subi	r24, 0x01	; 1
    2396:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <uxSchedulerSuspended>
    239a:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <uxSchedulerSuspended>
    239e:	88 23       	and	r24, r24
    23a0:	09 f0       	breq	.+2      	; 0x23a4 <xTaskResumeAll+0x2c>
    23a2:	77 c0       	rjmp	.+238    	; 0x2492 <xTaskResumeAll+0x11a>
    23a4:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <uxCurrentNumberOfTasks>
    23a8:	88 23       	and	r24, r24
    23aa:	09 f4       	brne	.+2      	; 0x23ae <xTaskResumeAll+0x36>
    23ac:	72 c0       	rjmp	.+228    	; 0x2492 <xTaskResumeAll+0x11a>
    23ae:	49 c0       	rjmp	.+146    	; 0x2442 <xTaskResumeAll+0xca>
    23b0:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <xPendingReadyList+0x5>
    23b4:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <xPendingReadyList+0x6>
    23b8:	fc 01       	movw	r30, r24
    23ba:	86 81       	ldd	r24, Z+6	; 0x06
    23bc:	97 81       	ldd	r25, Z+7	; 0x07
    23be:	9a 83       	std	Y+2, r25	; 0x02
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	9a 81       	ldd	r25, Y+2	; 0x02
    23c6:	0c 96       	adiw	r24, 0x0c	; 12
    23c8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <uxListRemove>
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	9a 81       	ldd	r25, Y+2	; 0x02
    23d0:	02 96       	adiw	r24, 0x02	; 2
    23d2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <uxListRemove>
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	9a 81       	ldd	r25, Y+2	; 0x02
    23da:	fc 01       	movw	r30, r24
    23dc:	96 89       	ldd	r25, Z+22	; 0x16
    23de:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <uxTopReadyPriority>
    23e2:	89 17       	cp	r24, r25
    23e4:	30 f4       	brcc	.+12     	; 0x23f2 <xTaskResumeAll+0x7a>
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ea:	fc 01       	movw	r30, r24
    23ec:	86 89       	ldd	r24, Z+22	; 0x16
    23ee:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <uxTopReadyPriority>
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	9a 81       	ldd	r25, Y+2	; 0x02
    23f6:	ac 01       	movw	r20, r24
    23f8:	4e 5f       	subi	r20, 0xFE	; 254
    23fa:	5f 4f       	sbci	r21, 0xFF	; 255
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2400:	fc 01       	movw	r30, r24
    2402:	86 89       	ldd	r24, Z+22	; 0x16
    2404:	28 2f       	mov	r18, r24
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	c9 01       	movw	r24, r18
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	88 0f       	add	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	82 0f       	add	r24, r18
    2418:	93 1f       	adc	r25, r19
    241a:	80 56       	subi	r24, 0x60	; 96
    241c:	9a 4f       	sbci	r25, 0xFA	; 250
    241e:	ba 01       	movw	r22, r20
    2420:	0e 94 b3 04 	call	0x966	; 0x966 <vListInsertEnd>
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	9a 81       	ldd	r25, Y+2	; 0x02
    2428:	fc 01       	movw	r30, r24
    242a:	26 89       	ldd	r18, Z+22	; 0x16
    242c:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <pxCurrentTCB>
    2430:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    2434:	fc 01       	movw	r30, r24
    2436:	86 89       	ldd	r24, Z+22	; 0x16
    2438:	28 17       	cp	r18, r24
    243a:	18 f0       	brcs	.+6      	; 0x2442 <xTaskResumeAll+0xca>
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <xYieldPending>
    2442:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <xPendingReadyList>
    2446:	88 23       	and	r24, r24
    2448:	09 f0       	breq	.+2      	; 0x244c <xTaskResumeAll+0xd4>
    244a:	b2 cf       	rjmp	.-156    	; 0x23b0 <xTaskResumeAll+0x38>
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	9a 81       	ldd	r25, Y+2	; 0x02
    2450:	89 2b       	or	r24, r25
    2452:	11 f0       	breq	.+4      	; 0x2458 <xTaskResumeAll+0xe0>
    2454:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <prvResetNextTaskUnblockTime>
    2458:	80 91 f2 05 	lds	r24, 0x05F2	; 0x8005f2 <uxPendedTicks>
    245c:	8c 83       	std	Y+4, r24	; 0x04
    245e:	8c 81       	ldd	r24, Y+4	; 0x04
    2460:	88 23       	and	r24, r24
    2462:	79 f0       	breq	.+30     	; 0x2482 <xTaskResumeAll+0x10a>
    2464:	0e 94 53 12 	call	0x24a6	; 0x24a6 <xTaskIncrementTick>
    2468:	88 23       	and	r24, r24
    246a:	19 f0       	breq	.+6      	; 0x2472 <xTaskResumeAll+0xfa>
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <xYieldPending>
    2472:	8c 81       	ldd	r24, Y+4	; 0x04
    2474:	81 50       	subi	r24, 0x01	; 1
    2476:	8c 83       	std	Y+4, r24	; 0x04
    2478:	8c 81       	ldd	r24, Y+4	; 0x04
    247a:	88 23       	and	r24, r24
    247c:	99 f7       	brne	.-26     	; 0x2464 <xTaskResumeAll+0xec>
    247e:	10 92 f2 05 	sts	0x05F2, r1	; 0x8005f2 <uxPendedTicks>
    2482:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <xYieldPending>
    2486:	88 23       	and	r24, r24
    2488:	21 f0       	breq	.+8      	; 0x2492 <xTaskResumeAll+0x11a>
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	8b 83       	std	Y+3, r24	; 0x03
    248e:	0e 94 af 07 	call	0xf5e	; 0xf5e <vPortYield>
    2492:	0f 90       	pop	r0
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	08 95       	ret

000024a6 <xTaskIncrementTick>:
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	29 97       	sbiw	r28, 0x09	; 9
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	19 82       	std	Y+1, r1	; 0x01
    24bc:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <uxSchedulerSuspended>
    24c0:	88 23       	and	r24, r24
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <xTaskIncrementTick+0x20>
    24c4:	c8 c0       	rjmp	.+400    	; 0x2656 <xTaskIncrementTick+0x1b0>
    24c6:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <xTickCount>
    24ca:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <xTickCount+0x1>
    24ce:	01 96       	adiw	r24, 0x01	; 1
    24d0:	9b 83       	std	Y+3, r25	; 0x03
    24d2:	8a 83       	std	Y+2, r24	; 0x02
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	9b 81       	ldd	r25, Y+3	; 0x03
    24d8:	90 93 ef 05 	sts	0x05EF, r25	; 0x8005ef <xTickCount+0x1>
    24dc:	80 93 ee 05 	sts	0x05EE, r24	; 0x8005ee <xTickCount>
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	9b 81       	ldd	r25, Y+3	; 0x03
    24e4:	89 2b       	or	r24, r25
    24e6:	d9 f4       	brne	.+54     	; 0x251e <xTaskIncrementTick+0x78>
    24e8:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <pxDelayedTaskList>
    24ec:	90 91 d7 05 	lds	r25, 0x05D7	; 0x8005d7 <pxDelayedTaskList+0x1>
    24f0:	9d 83       	std	Y+5, r25	; 0x05
    24f2:	8c 83       	std	Y+4, r24	; 0x04
    24f4:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <pxOverflowDelayedTaskList>
    24f8:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <pxOverflowDelayedTaskList+0x1>
    24fc:	90 93 d7 05 	sts	0x05D7, r25	; 0x8005d7 <pxDelayedTaskList+0x1>
    2500:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <pxDelayedTaskList>
    2504:	8c 81       	ldd	r24, Y+4	; 0x04
    2506:	9d 81       	ldd	r25, Y+5	; 0x05
    2508:	90 93 d9 05 	sts	0x05D9, r25	; 0x8005d9 <pxOverflowDelayedTaskList+0x1>
    250c:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <pxOverflowDelayedTaskList>
    2510:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <xNumOfOverflows>
    2514:	8f 5f       	subi	r24, 0xFF	; 255
    2516:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <xNumOfOverflows>
    251a:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <prvResetNextTaskUnblockTime>
    251e:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <xNextTaskUnblockTime>
    2522:	90 91 f7 05 	lds	r25, 0x05F7	; 0x8005f7 <xNextTaskUnblockTime+0x1>
    2526:	2a 81       	ldd	r18, Y+2	; 0x02
    2528:	3b 81       	ldd	r19, Y+3	; 0x03
    252a:	28 17       	cp	r18, r24
    252c:	39 07       	cpc	r19, r25
    252e:	08 f4       	brcc	.+2      	; 0x2532 <xTaskIncrementTick+0x8c>
    2530:	78 c0       	rjmp	.+240    	; 0x2622 <xTaskIncrementTick+0x17c>
    2532:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <pxDelayedTaskList>
    2536:	90 91 d7 05 	lds	r25, 0x05D7	; 0x8005d7 <pxDelayedTaskList+0x1>
    253a:	fc 01       	movw	r30, r24
    253c:	80 81       	ld	r24, Z
    253e:	88 23       	and	r24, r24
    2540:	39 f4       	brne	.+14     	; 0x2550 <xTaskIncrementTick+0xaa>
    2542:	8f ef       	ldi	r24, 0xFF	; 255
    2544:	9f ef       	ldi	r25, 0xFF	; 255
    2546:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <xNextTaskUnblockTime+0x1>
    254a:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <xNextTaskUnblockTime>
    254e:	69 c0       	rjmp	.+210    	; 0x2622 <xTaskIncrementTick+0x17c>
    2550:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <pxDelayedTaskList>
    2554:	90 91 d7 05 	lds	r25, 0x05D7	; 0x8005d7 <pxDelayedTaskList+0x1>
    2558:	fc 01       	movw	r30, r24
    255a:	85 81       	ldd	r24, Z+5	; 0x05
    255c:	96 81       	ldd	r25, Z+6	; 0x06
    255e:	fc 01       	movw	r30, r24
    2560:	86 81       	ldd	r24, Z+6	; 0x06
    2562:	97 81       	ldd	r25, Z+7	; 0x07
    2564:	9f 83       	std	Y+7, r25	; 0x07
    2566:	8e 83       	std	Y+6, r24	; 0x06
    2568:	8e 81       	ldd	r24, Y+6	; 0x06
    256a:	9f 81       	ldd	r25, Y+7	; 0x07
    256c:	fc 01       	movw	r30, r24
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	93 81       	ldd	r25, Z+3	; 0x03
    2572:	99 87       	std	Y+9, r25	; 0x09
    2574:	88 87       	std	Y+8, r24	; 0x08
    2576:	2a 81       	ldd	r18, Y+2	; 0x02
    2578:	3b 81       	ldd	r19, Y+3	; 0x03
    257a:	88 85       	ldd	r24, Y+8	; 0x08
    257c:	99 85       	ldd	r25, Y+9	; 0x09
    257e:	28 17       	cp	r18, r24
    2580:	39 07       	cpc	r19, r25
    2582:	38 f4       	brcc	.+14     	; 0x2592 <xTaskIncrementTick+0xec>
    2584:	88 85       	ldd	r24, Y+8	; 0x08
    2586:	99 85       	ldd	r25, Y+9	; 0x09
    2588:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <xNextTaskUnblockTime+0x1>
    258c:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <xNextTaskUnblockTime>
    2590:	48 c0       	rjmp	.+144    	; 0x2622 <xTaskIncrementTick+0x17c>
    2592:	8e 81       	ldd	r24, Y+6	; 0x06
    2594:	9f 81       	ldd	r25, Y+7	; 0x07
    2596:	02 96       	adiw	r24, 0x02	; 2
    2598:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <uxListRemove>
    259c:	8e 81       	ldd	r24, Y+6	; 0x06
    259e:	9f 81       	ldd	r25, Y+7	; 0x07
    25a0:	fc 01       	movw	r30, r24
    25a2:	84 89       	ldd	r24, Z+20	; 0x14
    25a4:	95 89       	ldd	r25, Z+21	; 0x15
    25a6:	89 2b       	or	r24, r25
    25a8:	29 f0       	breq	.+10     	; 0x25b4 <xTaskIncrementTick+0x10e>
    25aa:	8e 81       	ldd	r24, Y+6	; 0x06
    25ac:	9f 81       	ldd	r25, Y+7	; 0x07
    25ae:	0c 96       	adiw	r24, 0x0c	; 12
    25b0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <uxListRemove>
    25b4:	8e 81       	ldd	r24, Y+6	; 0x06
    25b6:	9f 81       	ldd	r25, Y+7	; 0x07
    25b8:	fc 01       	movw	r30, r24
    25ba:	96 89       	ldd	r25, Z+22	; 0x16
    25bc:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <uxTopReadyPriority>
    25c0:	89 17       	cp	r24, r25
    25c2:	30 f4       	brcc	.+12     	; 0x25d0 <xTaskIncrementTick+0x12a>
    25c4:	8e 81       	ldd	r24, Y+6	; 0x06
    25c6:	9f 81       	ldd	r25, Y+7	; 0x07
    25c8:	fc 01       	movw	r30, r24
    25ca:	86 89       	ldd	r24, Z+22	; 0x16
    25cc:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <uxTopReadyPriority>
    25d0:	8e 81       	ldd	r24, Y+6	; 0x06
    25d2:	9f 81       	ldd	r25, Y+7	; 0x07
    25d4:	ac 01       	movw	r20, r24
    25d6:	4e 5f       	subi	r20, 0xFE	; 254
    25d8:	5f 4f       	sbci	r21, 0xFF	; 255
    25da:	8e 81       	ldd	r24, Y+6	; 0x06
    25dc:	9f 81       	ldd	r25, Y+7	; 0x07
    25de:	fc 01       	movw	r30, r24
    25e0:	86 89       	ldd	r24, Z+22	; 0x16
    25e2:	28 2f       	mov	r18, r24
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	c9 01       	movw	r24, r18
    25e8:	88 0f       	add	r24, r24
    25ea:	99 1f       	adc	r25, r25
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	82 0f       	add	r24, r18
    25f6:	93 1f       	adc	r25, r19
    25f8:	80 56       	subi	r24, 0x60	; 96
    25fa:	9a 4f       	sbci	r25, 0xFA	; 250
    25fc:	ba 01       	movw	r22, r20
    25fe:	0e 94 b3 04 	call	0x966	; 0x966 <vListInsertEnd>
    2602:	8e 81       	ldd	r24, Y+6	; 0x06
    2604:	9f 81       	ldd	r25, Y+7	; 0x07
    2606:	fc 01       	movw	r30, r24
    2608:	26 89       	ldd	r18, Z+22	; 0x16
    260a:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <pxCurrentTCB>
    260e:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    2612:	fc 01       	movw	r30, r24
    2614:	86 89       	ldd	r24, Z+22	; 0x16
    2616:	28 17       	cp	r18, r24
    2618:	08 f4       	brcc	.+2      	; 0x261c <xTaskIncrementTick+0x176>
    261a:	8b cf       	rjmp	.-234    	; 0x2532 <xTaskIncrementTick+0x8c>
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	89 83       	std	Y+1, r24	; 0x01
    2620:	88 cf       	rjmp	.-240    	; 0x2532 <xTaskIncrementTick+0x8c>
    2622:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <pxCurrentTCB>
    2626:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    262a:	fc 01       	movw	r30, r24
    262c:	86 89       	ldd	r24, Z+22	; 0x16
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	c9 01       	movw	r24, r18
    2634:	88 0f       	add	r24, r24
    2636:	99 1f       	adc	r25, r25
    2638:	88 0f       	add	r24, r24
    263a:	99 1f       	adc	r25, r25
    263c:	88 0f       	add	r24, r24
    263e:	99 1f       	adc	r25, r25
    2640:	82 0f       	add	r24, r18
    2642:	93 1f       	adc	r25, r19
    2644:	80 56       	subi	r24, 0x60	; 96
    2646:	9a 4f       	sbci	r25, 0xFA	; 250
    2648:	fc 01       	movw	r30, r24
    264a:	80 81       	ld	r24, Z
    264c:	82 30       	cpi	r24, 0x02	; 2
    264e:	40 f0       	brcs	.+16     	; 0x2660 <xTaskIncrementTick+0x1ba>
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	05 c0       	rjmp	.+10     	; 0x2660 <xTaskIncrementTick+0x1ba>
    2656:	80 91 f2 05 	lds	r24, 0x05F2	; 0x8005f2 <uxPendedTicks>
    265a:	8f 5f       	subi	r24, 0xFF	; 255
    265c:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <uxPendedTicks>
    2660:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <xYieldPending>
    2664:	88 23       	and	r24, r24
    2666:	11 f0       	breq	.+4      	; 0x266c <xTaskIncrementTick+0x1c6>
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	29 96       	adiw	r28, 0x09	; 9
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	08 95       	ret

00002680 <vTaskSwitchContext>:
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
    2684:	00 d0       	rcall	.+0      	; 0x2686 <vTaskSwitchContext+0x6>
    2686:	1f 92       	push	r1
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <uxSchedulerSuspended>
    2690:	88 23       	and	r24, r24
    2692:	21 f0       	breq	.+8      	; 0x269c <vTaskSwitchContext+0x1c>
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <xYieldPending>
    269a:	71 c0       	rjmp	.+226    	; 0x277e <vTaskSwitchContext+0xfe>
    269c:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <xYieldPending>
    26a0:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <pxCurrentTCB>
    26a4:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    26a8:	fc 01       	movw	r30, r24
    26aa:	85 a1       	ldd	r24, Z+37	; 0x25
    26ac:	96 a1       	ldd	r25, Z+38	; 0x26
    26ae:	0e 94 b3 03 	call	0x766	; 0x766 <switch_out>
    26b2:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <uxTopReadyPriority>
    26b6:	89 83       	std	Y+1, r24	; 0x01
    26b8:	03 c0       	rjmp	.+6      	; 0x26c0 <vTaskSwitchContext+0x40>
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	81 50       	subi	r24, 0x01	; 1
    26be:	89 83       	std	Y+1, r24	; 0x01
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	c9 01       	movw	r24, r18
    26c8:	88 0f       	add	r24, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	88 0f       	add	r24, r24
    26ce:	99 1f       	adc	r25, r25
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	82 0f       	add	r24, r18
    26d6:	93 1f       	adc	r25, r19
    26d8:	80 56       	subi	r24, 0x60	; 96
    26da:	9a 4f       	sbci	r25, 0xFA	; 250
    26dc:	fc 01       	movw	r30, r24
    26de:	80 81       	ld	r24, Z
    26e0:	88 23       	and	r24, r24
    26e2:	59 f3       	breq	.-42     	; 0x26ba <vTaskSwitchContext+0x3a>
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	28 2f       	mov	r18, r24
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	c9 01       	movw	r24, r18
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	82 0f       	add	r24, r18
    26fa:	93 1f       	adc	r25, r19
    26fc:	80 56       	subi	r24, 0x60	; 96
    26fe:	9a 4f       	sbci	r25, 0xFA	; 250
    2700:	9b 83       	std	Y+3, r25	; 0x03
    2702:	8a 83       	std	Y+2, r24	; 0x02
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	9b 81       	ldd	r25, Y+3	; 0x03
    2708:	fc 01       	movw	r30, r24
    270a:	81 81       	ldd	r24, Z+1	; 0x01
    270c:	92 81       	ldd	r25, Z+2	; 0x02
    270e:	fc 01       	movw	r30, r24
    2710:	22 81       	ldd	r18, Z+2	; 0x02
    2712:	33 81       	ldd	r19, Z+3	; 0x03
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	9b 81       	ldd	r25, Y+3	; 0x03
    2718:	fc 01       	movw	r30, r24
    271a:	32 83       	std	Z+2, r19	; 0x02
    271c:	21 83       	std	Z+1, r18	; 0x01
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	9b 81       	ldd	r25, Y+3	; 0x03
    2722:	fc 01       	movw	r30, r24
    2724:	21 81       	ldd	r18, Z+1	; 0x01
    2726:	32 81       	ldd	r19, Z+2	; 0x02
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	9b 81       	ldd	r25, Y+3	; 0x03
    272c:	03 96       	adiw	r24, 0x03	; 3
    272e:	28 17       	cp	r18, r24
    2730:	39 07       	cpc	r19, r25
    2732:	69 f4       	brne	.+26     	; 0x274e <vTaskSwitchContext+0xce>
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	9b 81       	ldd	r25, Y+3	; 0x03
    2738:	fc 01       	movw	r30, r24
    273a:	81 81       	ldd	r24, Z+1	; 0x01
    273c:	92 81       	ldd	r25, Z+2	; 0x02
    273e:	fc 01       	movw	r30, r24
    2740:	22 81       	ldd	r18, Z+2	; 0x02
    2742:	33 81       	ldd	r19, Z+3	; 0x03
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	9b 81       	ldd	r25, Y+3	; 0x03
    2748:	fc 01       	movw	r30, r24
    274a:	32 83       	std	Z+2, r19	; 0x02
    274c:	21 83       	std	Z+1, r18	; 0x01
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	9b 81       	ldd	r25, Y+3	; 0x03
    2752:	fc 01       	movw	r30, r24
    2754:	81 81       	ldd	r24, Z+1	; 0x01
    2756:	92 81       	ldd	r25, Z+2	; 0x02
    2758:	fc 01       	movw	r30, r24
    275a:	86 81       	ldd	r24, Z+6	; 0x06
    275c:	97 81       	ldd	r25, Z+7	; 0x07
    275e:	90 93 9f 05 	sts	0x059F, r25	; 0x80059f <pxCurrentTCB+0x1>
    2762:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <pxCurrentTCB>
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <uxTopReadyPriority>
    276c:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <pxCurrentTCB>
    2770:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    2774:	fc 01       	movw	r30, r24
    2776:	85 a1       	ldd	r24, Z+37	; 0x25
    2778:	96 a1       	ldd	r25, Z+38	; 0x26
    277a:	0e 94 8e 03 	call	0x71c	; 0x71c <switch_in>
    277e:	00 00       	nop
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	08 95       	ret

0000278c <vTaskPlaceOnEventList>:
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	00 d0       	rcall	.+0      	; 0x2792 <vTaskPlaceOnEventList+0x6>
    2792:	00 d0       	rcall	.+0      	; 0x2794 <vTaskPlaceOnEventList+0x8>
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	9a 83       	std	Y+2, r25	; 0x02
    279a:	89 83       	std	Y+1, r24	; 0x01
    279c:	7c 83       	std	Y+4, r23	; 0x04
    279e:	6b 83       	std	Y+3, r22	; 0x03
    27a0:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <pxCurrentTCB>
    27a4:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    27a8:	9c 01       	movw	r18, r24
    27aa:	24 5f       	subi	r18, 0xF4	; 244
    27ac:	3f 4f       	sbci	r19, 0xFF	; 255
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	9a 81       	ldd	r25, Y+2	; 0x02
    27b2:	b9 01       	movw	r22, r18
    27b4:	0e 94 02 05 	call	0xa04	; 0xa04 <vListInsert>
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	9c 81       	ldd	r25, Y+4	; 0x04
    27bc:	61 e0       	ldi	r22, 0x01	; 1
    27be:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <prvAddCurrentTaskToDelayedList>
    27c2:	00 00       	nop
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	08 95       	ret

000027d2 <xTaskRemoveFromEventList>:
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <xTaskRemoveFromEventList+0x6>
    27d8:	00 d0       	rcall	.+0      	; 0x27da <xTaskRemoveFromEventList+0x8>
    27da:	1f 92       	push	r1
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	9d 83       	std	Y+5, r25	; 0x05
    27e2:	8c 83       	std	Y+4, r24	; 0x04
    27e4:	8c 81       	ldd	r24, Y+4	; 0x04
    27e6:	9d 81       	ldd	r25, Y+5	; 0x05
    27e8:	fc 01       	movw	r30, r24
    27ea:	85 81       	ldd	r24, Z+5	; 0x05
    27ec:	96 81       	ldd	r25, Z+6	; 0x06
    27ee:	fc 01       	movw	r30, r24
    27f0:	86 81       	ldd	r24, Z+6	; 0x06
    27f2:	97 81       	ldd	r25, Z+7	; 0x07
    27f4:	9b 83       	std	Y+3, r25	; 0x03
    27f6:	8a 83       	std	Y+2, r24	; 0x02
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	9b 81       	ldd	r25, Y+3	; 0x03
    27fc:	0c 96       	adiw	r24, 0x0c	; 12
    27fe:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <uxListRemove>
    2802:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <uxSchedulerSuspended>
    2806:	88 23       	and	r24, r24
    2808:	69 f5       	brne	.+90     	; 0x2864 <xTaskRemoveFromEventList+0x92>
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	9b 81       	ldd	r25, Y+3	; 0x03
    280e:	02 96       	adiw	r24, 0x02	; 2
    2810:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <uxListRemove>
    2814:	8a 81       	ldd	r24, Y+2	; 0x02
    2816:	9b 81       	ldd	r25, Y+3	; 0x03
    2818:	fc 01       	movw	r30, r24
    281a:	96 89       	ldd	r25, Z+22	; 0x16
    281c:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <uxTopReadyPriority>
    2820:	89 17       	cp	r24, r25
    2822:	30 f4       	brcc	.+12     	; 0x2830 <xTaskRemoveFromEventList+0x5e>
    2824:	8a 81       	ldd	r24, Y+2	; 0x02
    2826:	9b 81       	ldd	r25, Y+3	; 0x03
    2828:	fc 01       	movw	r30, r24
    282a:	86 89       	ldd	r24, Z+22	; 0x16
    282c:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <uxTopReadyPriority>
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	9b 81       	ldd	r25, Y+3	; 0x03
    2834:	ac 01       	movw	r20, r24
    2836:	4e 5f       	subi	r20, 0xFE	; 254
    2838:	5f 4f       	sbci	r21, 0xFF	; 255
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	9b 81       	ldd	r25, Y+3	; 0x03
    283e:	fc 01       	movw	r30, r24
    2840:	86 89       	ldd	r24, Z+22	; 0x16
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	c9 01       	movw	r24, r18
    2848:	88 0f       	add	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	88 0f       	add	r24, r24
    2852:	99 1f       	adc	r25, r25
    2854:	82 0f       	add	r24, r18
    2856:	93 1f       	adc	r25, r19
    2858:	80 56       	subi	r24, 0x60	; 96
    285a:	9a 4f       	sbci	r25, 0xFA	; 250
    285c:	ba 01       	movw	r22, r20
    285e:	0e 94 b3 04 	call	0x966	; 0x966 <vListInsertEnd>
    2862:	08 c0       	rjmp	.+16     	; 0x2874 <xTaskRemoveFromEventList+0xa2>
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	9b 81       	ldd	r25, Y+3	; 0x03
    2868:	0c 96       	adiw	r24, 0x0c	; 12
    286a:	bc 01       	movw	r22, r24
    286c:	8a ed       	ldi	r24, 0xDA	; 218
    286e:	95 e0       	ldi	r25, 0x05	; 5
    2870:	0e 94 b3 04 	call	0x966	; 0x966 <vListInsertEnd>
    2874:	8a 81       	ldd	r24, Y+2	; 0x02
    2876:	9b 81       	ldd	r25, Y+3	; 0x03
    2878:	fc 01       	movw	r30, r24
    287a:	26 89       	ldd	r18, Z+22	; 0x16
    287c:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <pxCurrentTCB>
    2880:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    2884:	fc 01       	movw	r30, r24
    2886:	86 89       	ldd	r24, Z+22	; 0x16
    2888:	82 17       	cp	r24, r18
    288a:	30 f4       	brcc	.+12     	; 0x2898 <xTaskRemoveFromEventList+0xc6>
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <xYieldPending>
    2896:	01 c0       	rjmp	.+2      	; 0x289a <xTaskRemoveFromEventList+0xc8>
    2898:	19 82       	std	Y+1, r1	; 0x01
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	08 95       	ret

000028ac <vTaskSetTimeOutState>:
    28ac:	cf 93       	push	r28
    28ae:	df 93       	push	r29
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <vTaskSetTimeOutState+0x6>
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	9a 83       	std	Y+2, r25	; 0x02
    28b8:	89 83       	std	Y+1, r24	; 0x01
    28ba:	20 91 f4 05 	lds	r18, 0x05F4	; 0x8005f4 <xNumOfOverflows>
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	9a 81       	ldd	r25, Y+2	; 0x02
    28c2:	fc 01       	movw	r30, r24
    28c4:	20 83       	st	Z, r18
    28c6:	20 91 ee 05 	lds	r18, 0x05EE	; 0x8005ee <xTickCount>
    28ca:	30 91 ef 05 	lds	r19, 0x05EF	; 0x8005ef <xTickCount+0x1>
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	9a 81       	ldd	r25, Y+2	; 0x02
    28d2:	fc 01       	movw	r30, r24
    28d4:	32 83       	std	Z+2, r19	; 0x02
    28d6:	21 83       	std	Z+1, r18	; 0x01
    28d8:	00 00       	nop
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	08 95       	ret

000028e4 <xTaskCheckForTimeOut>:
    28e4:	cf 93       	push	r28
    28e6:	df 93       	push	r29
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	27 97       	sbiw	r28, 0x07	; 7
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	9d 83       	std	Y+5, r25	; 0x05
    28fa:	8c 83       	std	Y+4, r24	; 0x04
    28fc:	7f 83       	std	Y+7, r23	; 0x07
    28fe:	6e 83       	std	Y+6, r22	; 0x06
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	0f 92       	push	r0
    2906:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <xTickCount>
    290a:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <xTickCount+0x1>
    290e:	9b 83       	std	Y+3, r25	; 0x03
    2910:	8a 83       	std	Y+2, r24	; 0x02
    2912:	8c 81       	ldd	r24, Y+4	; 0x04
    2914:	9d 81       	ldd	r25, Y+5	; 0x05
    2916:	fc 01       	movw	r30, r24
    2918:	90 81       	ld	r25, Z
    291a:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <xNumOfOverflows>
    291e:	98 17       	cp	r25, r24
    2920:	69 f0       	breq	.+26     	; 0x293c <xTaskCheckForTimeOut+0x58>
    2922:	8c 81       	ldd	r24, Y+4	; 0x04
    2924:	9d 81       	ldd	r25, Y+5	; 0x05
    2926:	fc 01       	movw	r30, r24
    2928:	21 81       	ldd	r18, Z+1	; 0x01
    292a:	32 81       	ldd	r19, Z+2	; 0x02
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	9b 81       	ldd	r25, Y+3	; 0x03
    2930:	82 17       	cp	r24, r18
    2932:	93 07       	cpc	r25, r19
    2934:	18 f0       	brcs	.+6      	; 0x293c <xTaskCheckForTimeOut+0x58>
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	30 c0       	rjmp	.+96     	; 0x299c <xTaskCheckForTimeOut+0xb8>
    293c:	8c 81       	ldd	r24, Y+4	; 0x04
    293e:	9d 81       	ldd	r25, Y+5	; 0x05
    2940:	fc 01       	movw	r30, r24
    2942:	81 81       	ldd	r24, Z+1	; 0x01
    2944:	92 81       	ldd	r25, Z+2	; 0x02
    2946:	2a 81       	ldd	r18, Y+2	; 0x02
    2948:	3b 81       	ldd	r19, Y+3	; 0x03
    294a:	28 1b       	sub	r18, r24
    294c:	39 0b       	sbc	r19, r25
    294e:	8e 81       	ldd	r24, Y+6	; 0x06
    2950:	9f 81       	ldd	r25, Y+7	; 0x07
    2952:	fc 01       	movw	r30, r24
    2954:	80 81       	ld	r24, Z
    2956:	91 81       	ldd	r25, Z+1	; 0x01
    2958:	28 17       	cp	r18, r24
    295a:	39 07       	cpc	r19, r25
    295c:	e8 f4       	brcc	.+58     	; 0x2998 <xTaskCheckForTimeOut+0xb4>
    295e:	8e 81       	ldd	r24, Y+6	; 0x06
    2960:	9f 81       	ldd	r25, Y+7	; 0x07
    2962:	fc 01       	movw	r30, r24
    2964:	20 81       	ld	r18, Z
    2966:	31 81       	ldd	r19, Z+1	; 0x01
    2968:	8c 81       	ldd	r24, Y+4	; 0x04
    296a:	9d 81       	ldd	r25, Y+5	; 0x05
    296c:	fc 01       	movw	r30, r24
    296e:	41 81       	ldd	r20, Z+1	; 0x01
    2970:	52 81       	ldd	r21, Z+2	; 0x02
    2972:	8a 81       	ldd	r24, Y+2	; 0x02
    2974:	9b 81       	ldd	r25, Y+3	; 0x03
    2976:	ba 01       	movw	r22, r20
    2978:	68 1b       	sub	r22, r24
    297a:	79 0b       	sbc	r23, r25
    297c:	cb 01       	movw	r24, r22
    297e:	28 0f       	add	r18, r24
    2980:	39 1f       	adc	r19, r25
    2982:	8e 81       	ldd	r24, Y+6	; 0x06
    2984:	9f 81       	ldd	r25, Y+7	; 0x07
    2986:	fc 01       	movw	r30, r24
    2988:	31 83       	std	Z+1, r19	; 0x01
    298a:	20 83       	st	Z, r18
    298c:	8c 81       	ldd	r24, Y+4	; 0x04
    298e:	9d 81       	ldd	r25, Y+5	; 0x05
    2990:	0e 94 56 14 	call	0x28ac	; 0x28ac <vTaskSetTimeOutState>
    2994:	19 82       	std	Y+1, r1	; 0x01
    2996:	02 c0       	rjmp	.+4      	; 0x299c <xTaskCheckForTimeOut+0xb8>
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	89 83       	std	Y+1, r24	; 0x01
    299c:	0f 90       	pop	r0
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	27 96       	adiw	r28, 0x07	; 7
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	08 95       	ret

000029b4 <vTaskMissedYield>:
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <xYieldPending>
    29c2:	00 00       	nop
    29c4:	df 91       	pop	r29
    29c6:	cf 91       	pop	r28
    29c8:	08 95       	ret

000029ca <prvIdleTask>:
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <prvIdleTask+0x6>
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	89 83       	std	Y+1, r24	; 0x01
    29d8:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <prvCheckTasksWaitingTermination>
    29dc:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <pxReadyTasksLists>
    29e0:	82 30       	cpi	r24, 0x02	; 2
    29e2:	10 f0       	brcs	.+4      	; 0x29e8 <prvIdleTask+0x1e>
    29e4:	0e 94 af 07 	call	0xf5e	; 0xf5e <vPortYield>
    29e8:	0e 94 14 02 	call	0x428	; 0x428 <vApplicationIdleHook>
    29ec:	f5 cf       	rjmp	.-22     	; 0x29d8 <prvIdleTask+0xe>

000029ee <prvInitialiseTaskLists>:
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	1f 92       	push	r1
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	19 82       	std	Y+1, r1	; 0x01
    29fa:	13 c0       	rjmp	.+38     	; 0x2a22 <prvInitialiseTaskLists+0x34>
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	28 2f       	mov	r18, r24
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	c9 01       	movw	r24, r18
    2a04:	88 0f       	add	r24, r24
    2a06:	99 1f       	adc	r25, r25
    2a08:	88 0f       	add	r24, r24
    2a0a:	99 1f       	adc	r25, r25
    2a0c:	88 0f       	add	r24, r24
    2a0e:	99 1f       	adc	r25, r25
    2a10:	82 0f       	add	r24, r18
    2a12:	93 1f       	adc	r25, r19
    2a14:	80 56       	subi	r24, 0x60	; 96
    2a16:	9a 4f       	sbci	r25, 0xFA	; 250
    2a18:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <vListInitialise>
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	8f 5f       	subi	r24, 0xFF	; 255
    2a20:	89 83       	std	Y+1, r24	; 0x01
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	84 30       	cpi	r24, 0x04	; 4
    2a26:	50 f3       	brcs	.-44     	; 0x29fc <prvInitialiseTaskLists+0xe>
    2a28:	84 ec       	ldi	r24, 0xC4	; 196
    2a2a:	95 e0       	ldi	r25, 0x05	; 5
    2a2c:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <vListInitialise>
    2a30:	8d ec       	ldi	r24, 0xCD	; 205
    2a32:	95 e0       	ldi	r25, 0x05	; 5
    2a34:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <vListInitialise>
    2a38:	8a ed       	ldi	r24, 0xDA	; 218
    2a3a:	95 e0       	ldi	r25, 0x05	; 5
    2a3c:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <vListInitialise>
    2a40:	83 ee       	ldi	r24, 0xE3	; 227
    2a42:	95 e0       	ldi	r25, 0x05	; 5
    2a44:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <vListInitialise>
    2a48:	84 ec       	ldi	r24, 0xC4	; 196
    2a4a:	95 e0       	ldi	r25, 0x05	; 5
    2a4c:	90 93 d7 05 	sts	0x05D7, r25	; 0x8005d7 <pxDelayedTaskList+0x1>
    2a50:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <pxDelayedTaskList>
    2a54:	8d ec       	ldi	r24, 0xCD	; 205
    2a56:	95 e0       	ldi	r25, 0x05	; 5
    2a58:	90 93 d9 05 	sts	0x05D9, r25	; 0x8005d9 <pxOverflowDelayedTaskList+0x1>
    2a5c:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <pxOverflowDelayedTaskList>
    2a60:	00 00       	nop
    2a62:	0f 90       	pop	r0
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	08 95       	ret

00002a6a <prvCheckTasksWaitingTermination>:
    2a6a:	cf 93       	push	r28
    2a6c:	df 93       	push	r29
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <prvCheckTasksWaitingTermination+0x6>
    2a70:	1f 92       	push	r1
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
    2a76:	2f c0       	rjmp	.+94     	; 0x2ad6 <prvCheckTasksWaitingTermination+0x6c>
    2a78:	0e 94 af 11 	call	0x235e	; 0x235e <vTaskSuspendAll>
    2a7c:	90 91 e3 05 	lds	r25, 0x05E3	; 0x8005e3 <xTasksWaitingTermination>
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	99 23       	and	r25, r25
    2a84:	09 f0       	breq	.+2      	; 0x2a88 <prvCheckTasksWaitingTermination+0x1e>
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	89 83       	std	Y+1, r24	; 0x01
    2a8a:	0e 94 bc 11 	call	0x2378	; 0x2378 <xTaskResumeAll>
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	88 23       	and	r24, r24
    2a92:	09 f5       	brne	.+66     	; 0x2ad6 <prvCheckTasksWaitingTermination+0x6c>
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	f8 94       	cli
    2a98:	0f 92       	push	r0
    2a9a:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <xTasksWaitingTermination+0x5>
    2a9e:	90 91 e9 05 	lds	r25, 0x05E9	; 0x8005e9 <xTasksWaitingTermination+0x6>
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	86 81       	ldd	r24, Z+6	; 0x06
    2aa6:	97 81       	ldd	r25, Z+7	; 0x07
    2aa8:	9b 83       	std	Y+3, r25	; 0x03
    2aaa:	8a 83       	std	Y+2, r24	; 0x02
    2aac:	8a 81       	ldd	r24, Y+2	; 0x02
    2aae:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab0:	02 96       	adiw	r24, 0x02	; 2
    2ab2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <uxListRemove>
    2ab6:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <uxCurrentNumberOfTasks>
    2aba:	81 50       	subi	r24, 0x01	; 1
    2abc:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <uxCurrentNumberOfTasks>
    2ac0:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <uxDeletedTasksWaitingCleanUp>
    2ac4:	81 50       	subi	r24, 0x01	; 1
    2ac6:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <uxDeletedTasksWaitingCleanUp>
    2aca:	0f 90       	pop	r0
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad2:	0e 94 76 15 	call	0x2aec	; 0x2aec <prvDeleteTCB>
    2ad6:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <uxDeletedTasksWaitingCleanUp>
    2ada:	88 23       	and	r24, r24
    2adc:	69 f6       	brne	.-102    	; 0x2a78 <prvCheckTasksWaitingTermination+0xe>
    2ade:	00 00       	nop
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	df 91       	pop	r29
    2ae8:	cf 91       	pop	r28
    2aea:	08 95       	ret

00002aec <prvDeleteTCB>:
    2aec:	cf 93       	push	r28
    2aee:	df 93       	push	r29
    2af0:	00 d0       	rcall	.+0      	; 0x2af2 <prvDeleteTCB+0x6>
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	9a 83       	std	Y+2, r25	; 0x02
    2af8:	89 83       	std	Y+1, r24	; 0x01
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	9a 81       	ldd	r25, Y+2	; 0x02
    2afe:	fc 01       	movw	r30, r24
    2b00:	87 89       	ldd	r24, Z+23	; 0x17
    2b02:	90 8d       	ldd	r25, Z+24	; 0x18
    2b04:	0e 94 22 09 	call	0x1244	; 0x1244 <vPortFree>
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0c:	0e 94 22 09 	call	0x1244	; 0x1244 <vPortFree>
    2b10:	00 00       	nop
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	08 95       	ret

00002b1c <prvResetNextTaskUnblockTime>:
    2b1c:	cf 93       	push	r28
    2b1e:	df 93       	push	r29
    2b20:	00 d0       	rcall	.+0      	; 0x2b22 <prvResetNextTaskUnblockTime+0x6>
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <pxDelayedTaskList>
    2b2a:	90 91 d7 05 	lds	r25, 0x05D7	; 0x8005d7 <pxDelayedTaskList+0x1>
    2b2e:	fc 01       	movw	r30, r24
    2b30:	80 81       	ld	r24, Z
    2b32:	88 23       	and	r24, r24
    2b34:	39 f4       	brne	.+14     	; 0x2b44 <prvResetNextTaskUnblockTime+0x28>
    2b36:	8f ef       	ldi	r24, 0xFF	; 255
    2b38:	9f ef       	ldi	r25, 0xFF	; 255
    2b3a:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <xNextTaskUnblockTime+0x1>
    2b3e:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <xNextTaskUnblockTime>
    2b42:	15 c0       	rjmp	.+42     	; 0x2b6e <prvResetNextTaskUnblockTime+0x52>
    2b44:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <pxDelayedTaskList>
    2b48:	90 91 d7 05 	lds	r25, 0x05D7	; 0x8005d7 <pxDelayedTaskList+0x1>
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	85 81       	ldd	r24, Z+5	; 0x05
    2b50:	96 81       	ldd	r25, Z+6	; 0x06
    2b52:	fc 01       	movw	r30, r24
    2b54:	86 81       	ldd	r24, Z+6	; 0x06
    2b56:	97 81       	ldd	r25, Z+7	; 0x07
    2b58:	9a 83       	std	Y+2, r25	; 0x02
    2b5a:	89 83       	std	Y+1, r24	; 0x01
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b60:	fc 01       	movw	r30, r24
    2b62:	82 81       	ldd	r24, Z+2	; 0x02
    2b64:	93 81       	ldd	r25, Z+3	; 0x03
    2b66:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <xNextTaskUnblockTime+0x1>
    2b6a:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <xNextTaskUnblockTime>
    2b6e:	00 00       	nop
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	08 95       	ret

00002b7a <xTaskPriorityDisinherit>:
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	00 d0       	rcall	.+0      	; 0x2b80 <xTaskPriorityDisinherit+0x6>
    2b80:	00 d0       	rcall	.+0      	; 0x2b82 <xTaskPriorityDisinherit+0x8>
    2b82:	1f 92       	push	r1
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	9d 83       	std	Y+5, r25	; 0x05
    2b8a:	8c 83       	std	Y+4, r24	; 0x04
    2b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b90:	9b 83       	std	Y+3, r25	; 0x03
    2b92:	8a 83       	std	Y+2, r24	; 0x02
    2b94:	19 82       	std	Y+1, r1	; 0x01
    2b96:	8c 81       	ldd	r24, Y+4	; 0x04
    2b98:	9d 81       	ldd	r25, Y+5	; 0x05
    2b9a:	89 2b       	or	r24, r25
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <xTaskPriorityDisinherit+0x26>
    2b9e:	61 c0       	rjmp	.+194    	; 0x2c62 <xTaskPriorityDisinherit+0xe8>
    2ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	84 a1       	ldd	r24, Z+36	; 0x24
    2ba8:	2f ef       	ldi	r18, 0xFF	; 255
    2baa:	28 0f       	add	r18, r24
    2bac:	8a 81       	ldd	r24, Y+2	; 0x02
    2bae:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	24 a3       	std	Z+36, r18	; 0x24
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb8:	fc 01       	movw	r30, r24
    2bba:	26 89       	ldd	r18, Z+22	; 0x16
    2bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	83 a1       	ldd	r24, Z+35	; 0x23
    2bc4:	28 17       	cp	r18, r24
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <xTaskPriorityDisinherit+0x50>
    2bc8:	4c c0       	rjmp	.+152    	; 0x2c62 <xTaskPriorityDisinherit+0xe8>
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bce:	fc 01       	movw	r30, r24
    2bd0:	84 a1       	ldd	r24, Z+36	; 0x24
    2bd2:	88 23       	and	r24, r24
    2bd4:	09 f0       	breq	.+2      	; 0x2bd8 <xTaskPriorityDisinherit+0x5e>
    2bd6:	45 c0       	rjmp	.+138    	; 0x2c62 <xTaskPriorityDisinherit+0xe8>
    2bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bda:	9b 81       	ldd	r25, Y+3	; 0x03
    2bdc:	02 96       	adiw	r24, 0x02	; 2
    2bde:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <uxListRemove>
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	9b 81       	ldd	r25, Y+3	; 0x03
    2be6:	fc 01       	movw	r30, r24
    2be8:	23 a1       	ldd	r18, Z+35	; 0x23
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	9b 81       	ldd	r25, Y+3	; 0x03
    2bee:	fc 01       	movw	r30, r24
    2bf0:	26 8b       	std	Z+22, r18	; 0x16
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	86 89       	ldd	r24, Z+22	; 0x16
    2bfa:	88 2f       	mov	r24, r24
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	24 e0       	ldi	r18, 0x04	; 4
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	28 1b       	sub	r18, r24
    2c04:	39 0b       	sbc	r19, r25
    2c06:	8a 81       	ldd	r24, Y+2	; 0x02
    2c08:	9b 81       	ldd	r25, Y+3	; 0x03
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	35 87       	std	Z+13, r19	; 0x0d
    2c0e:	24 87       	std	Z+12, r18	; 0x0c
    2c10:	8a 81       	ldd	r24, Y+2	; 0x02
    2c12:	9b 81       	ldd	r25, Y+3	; 0x03
    2c14:	fc 01       	movw	r30, r24
    2c16:	96 89       	ldd	r25, Z+22	; 0x16
    2c18:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <uxTopReadyPriority>
    2c1c:	89 17       	cp	r24, r25
    2c1e:	30 f4       	brcc	.+12     	; 0x2c2c <xTaskPriorityDisinherit+0xb2>
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	9b 81       	ldd	r25, Y+3	; 0x03
    2c24:	fc 01       	movw	r30, r24
    2c26:	86 89       	ldd	r24, Z+22	; 0x16
    2c28:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <uxTopReadyPriority>
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c30:	ac 01       	movw	r20, r24
    2c32:	4e 5f       	subi	r20, 0xFE	; 254
    2c34:	5f 4f       	sbci	r21, 0xFF	; 255
    2c36:	8a 81       	ldd	r24, Y+2	; 0x02
    2c38:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	86 89       	ldd	r24, Z+22	; 0x16
    2c3e:	28 2f       	mov	r18, r24
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	c9 01       	movw	r24, r18
    2c44:	88 0f       	add	r24, r24
    2c46:	99 1f       	adc	r25, r25
    2c48:	88 0f       	add	r24, r24
    2c4a:	99 1f       	adc	r25, r25
    2c4c:	88 0f       	add	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	82 0f       	add	r24, r18
    2c52:	93 1f       	adc	r25, r19
    2c54:	80 56       	subi	r24, 0x60	; 96
    2c56:	9a 4f       	sbci	r25, 0xFA	; 250
    2c58:	ba 01       	movw	r22, r20
    2c5a:	0e 94 b3 04 	call	0x966	; 0x966 <vListInsertEnd>
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	89 83       	std	Y+1, r24	; 0x01
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	df 91       	pop	r29
    2c70:	cf 91       	pop	r28
    2c72:	08 95       	ret

00002c74 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    2c74:	cf 93       	push	r28
    2c76:	df 93       	push	r29
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	27 97       	sbiw	r28, 0x07	; 7
    2c7e:	0f b6       	in	r0, 0x3f	; 63
    2c80:	f8 94       	cli
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	cd bf       	out	0x3d, r28	; 61
    2c88:	9e 83       	std	Y+6, r25	; 0x06
    2c8a:	8d 83       	std	Y+5, r24	; 0x05
    2c8c:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2c8e:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <xTickCount>
    2c92:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <xTickCount+0x1>
    2c96:	9a 83       	std	Y+2, r25	; 0x02
    2c98:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2c9a:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <pxCurrentTCB>
    2c9e:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    2ca2:	02 96       	adiw	r24, 0x02	; 2
    2ca4:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    2ca8:	29 81       	ldd	r18, Y+1	; 0x01
    2caa:	3a 81       	ldd	r19, Y+2	; 0x02
    2cac:	8d 81       	ldd	r24, Y+5	; 0x05
    2cae:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb0:	82 0f       	add	r24, r18
    2cb2:	93 1f       	adc	r25, r19
    2cb4:	9c 83       	std	Y+4, r25	; 0x04
    2cb6:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    2cb8:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <pxCurrentTCB>
    2cbc:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    2cc0:	2b 81       	ldd	r18, Y+3	; 0x03
    2cc2:	3c 81       	ldd	r19, Y+4	; 0x04
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	33 83       	std	Z+3, r19	; 0x03
    2cc8:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    2cca:	2b 81       	ldd	r18, Y+3	; 0x03
    2ccc:	3c 81       	ldd	r19, Y+4	; 0x04
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	28 17       	cp	r18, r24
    2cd4:	39 07       	cpc	r19, r25
    2cd6:	78 f4       	brcc	.+30     	; 0x2cf6 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2cd8:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <pxCurrentTCB>
    2cdc:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    2ce0:	9c 01       	movw	r18, r24
    2ce2:	2e 5f       	subi	r18, 0xFE	; 254
    2ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce6:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <pxOverflowDelayedTaskList>
    2cea:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <pxOverflowDelayedTaskList+0x1>
    2cee:	b9 01       	movw	r22, r18
    2cf0:	0e 94 02 05 	call	0xa04	; 0xa04 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2cf4:	1d c0       	rjmp	.+58     	; 0x2d30 <prvAddCurrentTaskToDelayedList+0xbc>
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2cf6:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <pxCurrentTCB>
    2cfa:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <pxCurrentTCB+0x1>
    2cfe:	9c 01       	movw	r18, r24
    2d00:	2e 5f       	subi	r18, 0xFE	; 254
    2d02:	3f 4f       	sbci	r19, 0xFF	; 255
    2d04:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <pxDelayedTaskList>
    2d08:	90 91 d7 05 	lds	r25, 0x05D7	; 0x8005d7 <pxDelayedTaskList+0x1>
    2d0c:	b9 01       	movw	r22, r18
    2d0e:	0e 94 02 05 	call	0xa04	; 0xa04 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    2d12:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <xNextTaskUnblockTime>
    2d16:	90 91 f7 05 	lds	r25, 0x05F7	; 0x8005f7 <xNextTaskUnblockTime+0x1>
    2d1a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d1c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d1e:	28 17       	cp	r18, r24
    2d20:	39 07       	cpc	r19, r25
    2d22:	30 f4       	brcc	.+12     	; 0x2d30 <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	9c 81       	ldd	r25, Y+4	; 0x04
    2d28:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <xNextTaskUnblockTime+0x1>
    2d2c:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2d30:	00 00       	nop
    2d32:	27 96       	adiw	r28, 0x07	; 7
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	df 91       	pop	r29
    2d40:	cf 91       	pop	r28
    2d42:	08 95       	ret

00002d44 <__udivmodsi4>:
    2d44:	a1 e2       	ldi	r26, 0x21	; 33
    2d46:	1a 2e       	mov	r1, r26
    2d48:	aa 1b       	sub	r26, r26
    2d4a:	bb 1b       	sub	r27, r27
    2d4c:	fd 01       	movw	r30, r26
    2d4e:	0d c0       	rjmp	.+26     	; 0x2d6a <__udivmodsi4_ep>

00002d50 <__udivmodsi4_loop>:
    2d50:	aa 1f       	adc	r26, r26
    2d52:	bb 1f       	adc	r27, r27
    2d54:	ee 1f       	adc	r30, r30
    2d56:	ff 1f       	adc	r31, r31
    2d58:	a2 17       	cp	r26, r18
    2d5a:	b3 07       	cpc	r27, r19
    2d5c:	e4 07       	cpc	r30, r20
    2d5e:	f5 07       	cpc	r31, r21
    2d60:	20 f0       	brcs	.+8      	; 0x2d6a <__udivmodsi4_ep>
    2d62:	a2 1b       	sub	r26, r18
    2d64:	b3 0b       	sbc	r27, r19
    2d66:	e4 0b       	sbc	r30, r20
    2d68:	f5 0b       	sbc	r31, r21

00002d6a <__udivmodsi4_ep>:
    2d6a:	66 1f       	adc	r22, r22
    2d6c:	77 1f       	adc	r23, r23
    2d6e:	88 1f       	adc	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	1a 94       	dec	r1
    2d74:	69 f7       	brne	.-38     	; 0x2d50 <__udivmodsi4_loop>
    2d76:	60 95       	com	r22
    2d78:	70 95       	com	r23
    2d7a:	80 95       	com	r24
    2d7c:	90 95       	com	r25
    2d7e:	9b 01       	movw	r18, r22
    2d80:	ac 01       	movw	r20, r24
    2d82:	bd 01       	movw	r22, r26
    2d84:	cf 01       	movw	r24, r30
    2d86:	08 95       	ret

00002d88 <malloc>:
    2d88:	0f 93       	push	r16
    2d8a:	1f 93       	push	r17
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	82 30       	cpi	r24, 0x02	; 2
    2d92:	91 05       	cpc	r25, r1
    2d94:	10 f4       	brcc	.+4      	; 0x2d9a <malloc+0x12>
    2d96:	82 e0       	ldi	r24, 0x02	; 2
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	e0 91 fd 05 	lds	r30, 0x05FD	; 0x8005fd <__flp>
    2d9e:	f0 91 fe 05 	lds	r31, 0x05FE	; 0x8005fe <__flp+0x1>
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	a0 e0       	ldi	r26, 0x00	; 0
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	30 97       	sbiw	r30, 0x00	; 0
    2dac:	19 f1       	breq	.+70     	; 0x2df4 <malloc+0x6c>
    2dae:	40 81       	ld	r20, Z
    2db0:	51 81       	ldd	r21, Z+1	; 0x01
    2db2:	02 81       	ldd	r16, Z+2	; 0x02
    2db4:	13 81       	ldd	r17, Z+3	; 0x03
    2db6:	48 17       	cp	r20, r24
    2db8:	59 07       	cpc	r21, r25
    2dba:	c8 f0       	brcs	.+50     	; 0x2dee <malloc+0x66>
    2dbc:	84 17       	cp	r24, r20
    2dbe:	95 07       	cpc	r25, r21
    2dc0:	69 f4       	brne	.+26     	; 0x2ddc <malloc+0x54>
    2dc2:	10 97       	sbiw	r26, 0x00	; 0
    2dc4:	31 f0       	breq	.+12     	; 0x2dd2 <malloc+0x4a>
    2dc6:	12 96       	adiw	r26, 0x02	; 2
    2dc8:	0c 93       	st	X, r16
    2dca:	12 97       	sbiw	r26, 0x02	; 2
    2dcc:	13 96       	adiw	r26, 0x03	; 3
    2dce:	1c 93       	st	X, r17
    2dd0:	27 c0       	rjmp	.+78     	; 0x2e20 <malloc+0x98>
    2dd2:	00 93 fd 05 	sts	0x05FD, r16	; 0x8005fd <__flp>
    2dd6:	10 93 fe 05 	sts	0x05FE, r17	; 0x8005fe <__flp+0x1>
    2dda:	22 c0       	rjmp	.+68     	; 0x2e20 <malloc+0x98>
    2ddc:	21 15       	cp	r18, r1
    2dde:	31 05       	cpc	r19, r1
    2de0:	19 f0       	breq	.+6      	; 0x2de8 <malloc+0x60>
    2de2:	42 17       	cp	r20, r18
    2de4:	53 07       	cpc	r21, r19
    2de6:	18 f4       	brcc	.+6      	; 0x2dee <malloc+0x66>
    2de8:	9a 01       	movw	r18, r20
    2dea:	bd 01       	movw	r22, r26
    2dec:	ef 01       	movw	r28, r30
    2dee:	df 01       	movw	r26, r30
    2df0:	f8 01       	movw	r30, r16
    2df2:	db cf       	rjmp	.-74     	; 0x2daa <malloc+0x22>
    2df4:	21 15       	cp	r18, r1
    2df6:	31 05       	cpc	r19, r1
    2df8:	f9 f0       	breq	.+62     	; 0x2e38 <malloc+0xb0>
    2dfa:	28 1b       	sub	r18, r24
    2dfc:	39 0b       	sbc	r19, r25
    2dfe:	24 30       	cpi	r18, 0x04	; 4
    2e00:	31 05       	cpc	r19, r1
    2e02:	80 f4       	brcc	.+32     	; 0x2e24 <malloc+0x9c>
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	9b 81       	ldd	r25, Y+3	; 0x03
    2e08:	61 15       	cp	r22, r1
    2e0a:	71 05       	cpc	r23, r1
    2e0c:	21 f0       	breq	.+8      	; 0x2e16 <malloc+0x8e>
    2e0e:	fb 01       	movw	r30, r22
    2e10:	93 83       	std	Z+3, r25	; 0x03
    2e12:	82 83       	std	Z+2, r24	; 0x02
    2e14:	04 c0       	rjmp	.+8      	; 0x2e1e <malloc+0x96>
    2e16:	90 93 fe 05 	sts	0x05FE, r25	; 0x8005fe <__flp+0x1>
    2e1a:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <__flp>
    2e1e:	fe 01       	movw	r30, r28
    2e20:	32 96       	adiw	r30, 0x02	; 2
    2e22:	44 c0       	rjmp	.+136    	; 0x2eac <malloc+0x124>
    2e24:	fe 01       	movw	r30, r28
    2e26:	e2 0f       	add	r30, r18
    2e28:	f3 1f       	adc	r31, r19
    2e2a:	81 93       	st	Z+, r24
    2e2c:	91 93       	st	Z+, r25
    2e2e:	22 50       	subi	r18, 0x02	; 2
    2e30:	31 09       	sbc	r19, r1
    2e32:	39 83       	std	Y+1, r19	; 0x01
    2e34:	28 83       	st	Y, r18
    2e36:	3a c0       	rjmp	.+116    	; 0x2eac <malloc+0x124>
    2e38:	20 91 fb 05 	lds	r18, 0x05FB	; 0x8005fb <__brkval>
    2e3c:	30 91 fc 05 	lds	r19, 0x05FC	; 0x8005fc <__brkval+0x1>
    2e40:	23 2b       	or	r18, r19
    2e42:	41 f4       	brne	.+16     	; 0x2e54 <malloc+0xcc>
    2e44:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2e48:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2e4c:	30 93 fc 05 	sts	0x05FC, r19	; 0x8005fc <__brkval+0x1>
    2e50:	20 93 fb 05 	sts	0x05FB, r18	; 0x8005fb <__brkval>
    2e54:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2e58:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2e5c:	21 15       	cp	r18, r1
    2e5e:	31 05       	cpc	r19, r1
    2e60:	41 f4       	brne	.+16     	; 0x2e72 <malloc+0xea>
    2e62:	2d b7       	in	r18, 0x3d	; 61
    2e64:	3e b7       	in	r19, 0x3e	; 62
    2e66:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2e6a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2e6e:	24 1b       	sub	r18, r20
    2e70:	35 0b       	sbc	r19, r21
    2e72:	e0 91 fb 05 	lds	r30, 0x05FB	; 0x8005fb <__brkval>
    2e76:	f0 91 fc 05 	lds	r31, 0x05FC	; 0x8005fc <__brkval+0x1>
    2e7a:	e2 17       	cp	r30, r18
    2e7c:	f3 07       	cpc	r31, r19
    2e7e:	a0 f4       	brcc	.+40     	; 0x2ea8 <malloc+0x120>
    2e80:	2e 1b       	sub	r18, r30
    2e82:	3f 0b       	sbc	r19, r31
    2e84:	28 17       	cp	r18, r24
    2e86:	39 07       	cpc	r19, r25
    2e88:	78 f0       	brcs	.+30     	; 0x2ea8 <malloc+0x120>
    2e8a:	ac 01       	movw	r20, r24
    2e8c:	4e 5f       	subi	r20, 0xFE	; 254
    2e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e90:	24 17       	cp	r18, r20
    2e92:	35 07       	cpc	r19, r21
    2e94:	48 f0       	brcs	.+18     	; 0x2ea8 <malloc+0x120>
    2e96:	4e 0f       	add	r20, r30
    2e98:	5f 1f       	adc	r21, r31
    2e9a:	50 93 fc 05 	sts	0x05FC, r21	; 0x8005fc <__brkval+0x1>
    2e9e:	40 93 fb 05 	sts	0x05FB, r20	; 0x8005fb <__brkval>
    2ea2:	81 93       	st	Z+, r24
    2ea4:	91 93       	st	Z+, r25
    2ea6:	02 c0       	rjmp	.+4      	; 0x2eac <malloc+0x124>
    2ea8:	e0 e0       	ldi	r30, 0x00	; 0
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	cf 01       	movw	r24, r30
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	1f 91       	pop	r17
    2eb4:	0f 91       	pop	r16
    2eb6:	08 95       	ret

00002eb8 <free>:
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	00 97       	sbiw	r24, 0x00	; 0
    2ebe:	09 f4       	brne	.+2      	; 0x2ec2 <free+0xa>
    2ec0:	81 c0       	rjmp	.+258    	; 0x2fc4 <free+0x10c>
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	32 97       	sbiw	r30, 0x02	; 2
    2ec6:	13 82       	std	Z+3, r1	; 0x03
    2ec8:	12 82       	std	Z+2, r1	; 0x02
    2eca:	a0 91 fd 05 	lds	r26, 0x05FD	; 0x8005fd <__flp>
    2ece:	b0 91 fe 05 	lds	r27, 0x05FE	; 0x8005fe <__flp+0x1>
    2ed2:	10 97       	sbiw	r26, 0x00	; 0
    2ed4:	81 f4       	brne	.+32     	; 0x2ef6 <free+0x3e>
    2ed6:	20 81       	ld	r18, Z
    2ed8:	31 81       	ldd	r19, Z+1	; 0x01
    2eda:	82 0f       	add	r24, r18
    2edc:	93 1f       	adc	r25, r19
    2ede:	20 91 fb 05 	lds	r18, 0x05FB	; 0x8005fb <__brkval>
    2ee2:	30 91 fc 05 	lds	r19, 0x05FC	; 0x8005fc <__brkval+0x1>
    2ee6:	28 17       	cp	r18, r24
    2ee8:	39 07       	cpc	r19, r25
    2eea:	51 f5       	brne	.+84     	; 0x2f40 <free+0x88>
    2eec:	f0 93 fc 05 	sts	0x05FC, r31	; 0x8005fc <__brkval+0x1>
    2ef0:	e0 93 fb 05 	sts	0x05FB, r30	; 0x8005fb <__brkval>
    2ef4:	67 c0       	rjmp	.+206    	; 0x2fc4 <free+0x10c>
    2ef6:	ed 01       	movw	r28, r26
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	ce 17       	cp	r28, r30
    2efe:	df 07       	cpc	r29, r31
    2f00:	40 f4       	brcc	.+16     	; 0x2f12 <free+0x5a>
    2f02:	4a 81       	ldd	r20, Y+2	; 0x02
    2f04:	5b 81       	ldd	r21, Y+3	; 0x03
    2f06:	9e 01       	movw	r18, r28
    2f08:	41 15       	cp	r20, r1
    2f0a:	51 05       	cpc	r21, r1
    2f0c:	f1 f0       	breq	.+60     	; 0x2f4a <free+0x92>
    2f0e:	ea 01       	movw	r28, r20
    2f10:	f5 cf       	rjmp	.-22     	; 0x2efc <free+0x44>
    2f12:	d3 83       	std	Z+3, r29	; 0x03
    2f14:	c2 83       	std	Z+2, r28	; 0x02
    2f16:	40 81       	ld	r20, Z
    2f18:	51 81       	ldd	r21, Z+1	; 0x01
    2f1a:	84 0f       	add	r24, r20
    2f1c:	95 1f       	adc	r25, r21
    2f1e:	c8 17       	cp	r28, r24
    2f20:	d9 07       	cpc	r29, r25
    2f22:	59 f4       	brne	.+22     	; 0x2f3a <free+0x82>
    2f24:	88 81       	ld	r24, Y
    2f26:	99 81       	ldd	r25, Y+1	; 0x01
    2f28:	84 0f       	add	r24, r20
    2f2a:	95 1f       	adc	r25, r21
    2f2c:	02 96       	adiw	r24, 0x02	; 2
    2f2e:	91 83       	std	Z+1, r25	; 0x01
    2f30:	80 83       	st	Z, r24
    2f32:	8a 81       	ldd	r24, Y+2	; 0x02
    2f34:	9b 81       	ldd	r25, Y+3	; 0x03
    2f36:	93 83       	std	Z+3, r25	; 0x03
    2f38:	82 83       	std	Z+2, r24	; 0x02
    2f3a:	21 15       	cp	r18, r1
    2f3c:	31 05       	cpc	r19, r1
    2f3e:	29 f4       	brne	.+10     	; 0x2f4a <free+0x92>
    2f40:	f0 93 fe 05 	sts	0x05FE, r31	; 0x8005fe <__flp+0x1>
    2f44:	e0 93 fd 05 	sts	0x05FD, r30	; 0x8005fd <__flp>
    2f48:	3d c0       	rjmp	.+122    	; 0x2fc4 <free+0x10c>
    2f4a:	e9 01       	movw	r28, r18
    2f4c:	fb 83       	std	Y+3, r31	; 0x03
    2f4e:	ea 83       	std	Y+2, r30	; 0x02
    2f50:	49 91       	ld	r20, Y+
    2f52:	59 91       	ld	r21, Y+
    2f54:	c4 0f       	add	r28, r20
    2f56:	d5 1f       	adc	r29, r21
    2f58:	ec 17       	cp	r30, r28
    2f5a:	fd 07       	cpc	r31, r29
    2f5c:	61 f4       	brne	.+24     	; 0x2f76 <free+0xbe>
    2f5e:	80 81       	ld	r24, Z
    2f60:	91 81       	ldd	r25, Z+1	; 0x01
    2f62:	84 0f       	add	r24, r20
    2f64:	95 1f       	adc	r25, r21
    2f66:	02 96       	adiw	r24, 0x02	; 2
    2f68:	e9 01       	movw	r28, r18
    2f6a:	99 83       	std	Y+1, r25	; 0x01
    2f6c:	88 83       	st	Y, r24
    2f6e:	82 81       	ldd	r24, Z+2	; 0x02
    2f70:	93 81       	ldd	r25, Z+3	; 0x03
    2f72:	9b 83       	std	Y+3, r25	; 0x03
    2f74:	8a 83       	std	Y+2, r24	; 0x02
    2f76:	e0 e0       	ldi	r30, 0x00	; 0
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	12 96       	adiw	r26, 0x02	; 2
    2f7c:	8d 91       	ld	r24, X+
    2f7e:	9c 91       	ld	r25, X
    2f80:	13 97       	sbiw	r26, 0x03	; 3
    2f82:	00 97       	sbiw	r24, 0x00	; 0
    2f84:	19 f0       	breq	.+6      	; 0x2f8c <free+0xd4>
    2f86:	fd 01       	movw	r30, r26
    2f88:	dc 01       	movw	r26, r24
    2f8a:	f7 cf       	rjmp	.-18     	; 0x2f7a <free+0xc2>
    2f8c:	8d 91       	ld	r24, X+
    2f8e:	9c 91       	ld	r25, X
    2f90:	11 97       	sbiw	r26, 0x01	; 1
    2f92:	9d 01       	movw	r18, r26
    2f94:	2e 5f       	subi	r18, 0xFE	; 254
    2f96:	3f 4f       	sbci	r19, 0xFF	; 255
    2f98:	82 0f       	add	r24, r18
    2f9a:	93 1f       	adc	r25, r19
    2f9c:	20 91 fb 05 	lds	r18, 0x05FB	; 0x8005fb <__brkval>
    2fa0:	30 91 fc 05 	lds	r19, 0x05FC	; 0x8005fc <__brkval+0x1>
    2fa4:	28 17       	cp	r18, r24
    2fa6:	39 07       	cpc	r19, r25
    2fa8:	69 f4       	brne	.+26     	; 0x2fc4 <free+0x10c>
    2faa:	30 97       	sbiw	r30, 0x00	; 0
    2fac:	29 f4       	brne	.+10     	; 0x2fb8 <free+0x100>
    2fae:	10 92 fe 05 	sts	0x05FE, r1	; 0x8005fe <__flp+0x1>
    2fb2:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <__flp>
    2fb6:	02 c0       	rjmp	.+4      	; 0x2fbc <free+0x104>
    2fb8:	13 82       	std	Z+3, r1	; 0x03
    2fba:	12 82       	std	Z+2, r1	; 0x02
    2fbc:	b0 93 fc 05 	sts	0x05FC, r27	; 0x8005fc <__brkval+0x1>
    2fc0:	a0 93 fb 05 	sts	0x05FB, r26	; 0x8005fb <__brkval>
    2fc4:	df 91       	pop	r29
    2fc6:	cf 91       	pop	r28
    2fc8:	08 95       	ret

00002fca <memcpy>:
    2fca:	fb 01       	movw	r30, r22
    2fcc:	dc 01       	movw	r26, r24
    2fce:	02 c0       	rjmp	.+4      	; 0x2fd4 <memcpy+0xa>
    2fd0:	01 90       	ld	r0, Z+
    2fd2:	0d 92       	st	X+, r0
    2fd4:	41 50       	subi	r20, 0x01	; 1
    2fd6:	50 40       	sbci	r21, 0x00	; 0
    2fd8:	d8 f7       	brcc	.-10     	; 0x2fd0 <memcpy+0x6>
    2fda:	08 95       	ret

00002fdc <memset>:
    2fdc:	dc 01       	movw	r26, r24
    2fde:	01 c0       	rjmp	.+2      	; 0x2fe2 <memset+0x6>
    2fe0:	6d 93       	st	X+, r22
    2fe2:	41 50       	subi	r20, 0x01	; 1
    2fe4:	50 40       	sbci	r21, 0x00	; 0
    2fe6:	e0 f7       	brcc	.-8      	; 0x2fe0 <memset+0x4>
    2fe8:	08 95       	ret

00002fea <_exit>:
    2fea:	f8 94       	cli

00002fec <__stop_program>:
    2fec:	ff cf       	rjmp	.-2      	; 0x2fec <__stop_program>
