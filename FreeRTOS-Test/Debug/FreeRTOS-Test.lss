
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  0000486c  00004900  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000486c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000663  00800162  00800162  00004962  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004962  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f0  00000000  00000000  000049d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004291  00000000  00000000  00004ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001290  00000000  00000000  00009155  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000039ce  00000000  00000000  0000a3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000137c  00000000  00000000  0000ddb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cc3  00000000  00000000  0000f130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000298b  00000000  00000000  00010df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  0001377e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__vector_13>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__vector_16>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__vector_20>
      54:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__vector_21>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 86 11 	jmp	0x230c	; 0x230c <__vector_28>
      74:	0c 94 df 11 	jmp	0x23be	; 0x23be <__vector_29>
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	11 01       	movw	r2, r2
      7e:	49 01       	movw	r8, r18
      80:	49 01       	movw	r8, r18
      82:	2d 01       	movw	r4, r26
      84:	49 01       	movw	r8, r18
      86:	49 01       	movw	r8, r18
      88:	49 01       	movw	r8, r18
      8a:	49 01       	movw	r8, r18
      8c:	49 01       	movw	r8, r18
      8e:	49 01       	movw	r8, r18
      90:	49 01       	movw	r8, r18
      92:	49 01       	movw	r8, r18
      94:	49 01       	movw	r8, r18
      96:	49 01       	movw	r8, r18
      98:	49 01       	movw	r8, r18
      9a:	49 01       	movw	r8, r18
      9c:	49 01       	movw	r8, r18
      9e:	49 01       	movw	r8, r18
      a0:	3b 01       	movw	r6, r22
      a2:	49 01       	movw	r8, r18
      a4:	49 01       	movw	r8, r18
      a6:	49 01       	movw	r8, r18
      a8:	1f 01       	movw	r2, r30
      aa:	49 01       	movw	r8, r18
      ac:	49 01       	movw	r8, r18
      ae:	49 01       	movw	r8, r18
      b0:	49 01       	movw	r8, r18
      b2:	49 01       	movw	r8, r18
      b4:	49 01       	movw	r8, r18
      b6:	49 01       	movw	r8, r18
      b8:	49 01       	movw	r8, r18
      ba:	49 01       	movw	r8, r18
      bc:	18 01       	movw	r2, r16
      be:	49 01       	movw	r8, r18
      c0:	49 01       	movw	r8, r18
      c2:	34 01       	movw	r6, r8
      c4:	49 01       	movw	r8, r18
      c6:	49 01       	movw	r8, r18
      c8:	49 01       	movw	r8, r18
      ca:	49 01       	movw	r8, r18
      cc:	49 01       	movw	r8, r18
      ce:	49 01       	movw	r8, r18
      d0:	49 01       	movw	r8, r18
      d2:	49 01       	movw	r8, r18
      d4:	49 01       	movw	r8, r18
      d6:	49 01       	movw	r8, r18
      d8:	49 01       	movw	r8, r18
      da:	49 01       	movw	r8, r18
      dc:	49 01       	movw	r8, r18
      de:	49 01       	movw	r8, r18
      e0:	42 01       	movw	r8, r4
      e2:	49 01       	movw	r8, r18
      e4:	49 01       	movw	r8, r18
      e6:	49 01       	movw	r8, r18
      e8:	26 01       	movw	r4, r12
      ea:	07 63       	ori	r16, 0x37	; 55
      ec:	42 36       	cpi	r20, 0x62	; 98
      ee:	b7 9b       	sbis	0x16, 7	; 22
      f0:	d8 a7       	std	Y+40, r29	; 0x28
      f2:	1a 39       	cpi	r17, 0x9A	; 154
      f4:	68 56       	subi	r22, 0x68	; 104
      f6:	18 ae       	std	Y+56, r1	; 0x38
      f8:	ba ab       	std	Y+50, r27	; 0x32
      fa:	55 8c       	ldd	r5, Z+29	; 0x1d
      fc:	1d 3c       	cpi	r17, 0xCD	; 205
      fe:	b7 cc       	rjmp	.-1682   	; 0xfffffa6e <__eeprom_end+0xff7efa6e>
     100:	57 63       	ori	r21, 0x37	; 55
     102:	bd 6d       	ori	r27, 0xDD	; 221
     104:	ed fd       	.word	0xfded	; ????
     106:	75 3e       	cpi	r23, 0xE5	; 229
     108:	f6 17       	cp	r31, r22
     10a:	72 31       	cpi	r23, 0x12	; 18
     10c:	bf 00       	.word	0x00bf	; ????
     10e:	00 00       	nop
     110:	80 3f       	cpi	r24, 0xF0	; 240
     112:	08 00       	.word	0x0008	; ????
     114:	00 00       	nop
     116:	be 92       	st	-X, r11
     118:	24 49       	sbci	r18, 0x94	; 148
     11a:	12 3e       	cpi	r17, 0xE2	; 226
     11c:	ab aa       	std	Y+51, r10	; 0x33
     11e:	aa 2a       	or	r10, r26
     120:	be cd       	rjmp	.-1156   	; 0xfffffc9e <__eeprom_end+0xff7efc9e>
     122:	cc cc       	rjmp	.-1640   	; 0xfffffabc <__eeprom_end+0xff7efabc>
     124:	4c 3e       	cpi	r20, 0xEC	; 236
     126:	00 00       	nop
     128:	00 80       	ld	r0, Z
     12a:	be ab       	std	Y+54, r27	; 0x36
     12c:	aa aa       	std	Y+50, r10	; 0x32
     12e:	aa 3e       	cpi	r26, 0xEA	; 234
     130:	00 00       	nop
     132:	00 00       	nop
     134:	bf 00       	.word	0x00bf	; ????
     136:	00 00       	nop
     138:	80 3f       	cpi	r24, 0xF0	; 240
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 08       	sbc	r0, r0
     140:	41 78       	andi	r20, 0x81	; 129
     142:	d3 bb       	out	0x13, r29	; 19
     144:	43 87       	std	Z+11, r20	; 0x0b
     146:	d1 13       	cpse	r29, r17
     148:	3d 19       	sub	r19, r13
     14a:	0e 3c       	cpi	r16, 0xCE	; 206
     14c:	c3 bd       	out	0x23, r28	; 35
     14e:	42 82       	std	Z+2, r4	; 0x02
     150:	ad 2b       	or	r26, r29
     152:	3e 68       	ori	r19, 0x8E	; 142
     154:	ec 82       	std	Y+4, r14	; 0x04
     156:	76 be       	out	0x36, r7	; 54
     158:	d9 8f       	std	Y+25, r29	; 0x19
     15a:	e1 a9       	ldd	r30, Z+49	; 0x31
     15c:	3e 4c       	sbci	r19, 0xCE	; 206
     15e:	80 ef       	ldi	r24, 0xF0	; 240
     160:	ff be       	out	0x3f, r15	; 63
     162:	01 c4       	rjmp	.+2050   	; 0x966 <__stack+0x67>
     164:	ff 7f       	andi	r31, 0xFF	; 255
     166:	3f 00       	.word	0x003f	; ????
     168:	00 00       	nop
	...

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	d8 e0       	ldi	r29, 0x08	; 8
     174:	de bf       	out	0x3e, r29	; 62
     176:	cd bf       	out	0x3d, r28	; 61

00000178 <__do_copy_data>:
     178:	11 e0       	ldi	r17, 0x01	; 1
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	ec e6       	ldi	r30, 0x6C	; 108
     180:	f8 e4       	ldi	r31, 0x48	; 72
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
     184:	05 90       	lpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	a2 36       	cpi	r26, 0x62	; 98
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
     18e:	27 e0       	ldi	r18, 0x07	; 7
     190:	a2 e6       	ldi	r26, 0x62	; 98
     192:	b1 e0       	ldi	r27, 0x01	; 1
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a5 3c       	cpi	r26, 0xC5	; 197
     19a:	b2 07       	cpc	r27, r18
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 46 08 	call	0x108c	; 0x108c <main>
     1a2:	0c 94 34 24 	jmp	0x4868	; 0x4868 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <communicate_serial>:
static SemaphoreHandle_t  xGameOverSemaphore = NULL;

static Score score;

void communicate_serial(void *pvParameters)
{
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	00 d0       	rcall	.+0      	; 0x1b0 <communicate_serial+0x6>
     1b0:	1f 92       	push	r1
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	9b 83       	std	Y+3, r25	; 0x03
     1b8:	8a 83       	std	Y+2, r24	; 0x02
	//Variables
	uint8_t data[] = "";
     1ba:	19 82       	std	Y+1, r1	; 0x01

	_received_chars_queue = xQueueCreate(_COM_RX_QUEUE_LENGTH, (unsigned portBASE_TYPE) sizeof (uint8_t));
     1bc:	8e e1       	ldi	r24, 0x1E	; 30
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	0e 94 ce 12 	call	0x259c	; 0x259c <xQueueGenericCreate>
     1c6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
     1ca:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
	init_com(_received_chars_queue);
     1ce:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     1d2:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
     1d6:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <init_com>

	for(;;){

		/*Constantly checking data coming from the PC*/
		if (xQueueReceive(_received_chars_queue, &data, (TickType_t) 10)) {
     1da:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     1de:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	4a e0       	ldi	r20, 0x0A	; 10
     1e6:	50 e0       	ldi	r21, 0x00	; 0
     1e8:	be 01       	movw	r22, r28
     1ea:	6f 5f       	subi	r22, 0xFF	; 255
     1ec:	7f 4f       	sbci	r23, 0xFF	; 255
     1ee:	0e 94 b7 14 	call	0x296e	; 0x296e <xQueueGenericReceive>
     1f2:	88 23       	and	r24, r24
     1f4:	09 f4       	brne	.+2      	; 0x1f8 <communicate_serial+0x4e>
     1f6:	4d c0       	rjmp	.+154    	; 0x292 <communicate_serial+0xe8>

			switch (data[0]) {
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
     1fa:	88 2f       	mov	r24, r24
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	09 2e       	mov	r0, r25
     200:	00 0c       	add	r0, r0
     202:	aa 0b       	sbc	r26, r26
     204:	bb 0b       	sbc	r27, r27
     206:	41 e4       	ldi	r20, 0x41	; 65
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	26 e3       	ldi	r18, 0x36	; 54
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	84 1b       	sub	r24, r20
     210:	95 0b       	sbc	r25, r21
     212:	28 17       	cp	r18, r24
     214:	39 07       	cpc	r19, r25
     216:	e8 f1       	brcs	.+122    	; 0x292 <communicate_serial+0xe8>
     218:	82 5c       	subi	r24, 0xC2	; 194
     21a:	9f 4f       	sbci	r25, 0xFF	; 255
     21c:	fc 01       	movw	r30, r24
     21e:	0c 94 fd 22 	jmp	0x45fa	; 0x45fa <__tablejump2__>
				case 0x41 :								
					turn_player(&playerTwo, LEFT);		//A
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	70 e0       	ldi	r23, 0x00	; 0
     226:	8b ed       	ldi	r24, 0xDB	; 219
     228:	92 e0       	ldi	r25, 0x02	; 2
     22a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <turn_player>
					break;
     22e:	31 c0       	rjmp	.+98     	; 0x292 <communicate_serial+0xe8>
				case 0x61 :								
					turn_player(&playerTwo, LEFT);		//a
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	8b ed       	ldi	r24, 0xDB	; 219
     236:	92 e0       	ldi	r25, 0x02	; 2
     238:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <turn_player>
					break;
     23c:	2a c0       	rjmp	.+84     	; 0x292 <communicate_serial+0xe8>
				case 0x57 :														
					turn_player(&playerTwo, UP);		//W
     23e:	62 e0       	ldi	r22, 0x02	; 2
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	8b ed       	ldi	r24, 0xDB	; 219
     244:	92 e0       	ldi	r25, 0x02	; 2
     246:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <turn_player>
					break;
     24a:	23 c0       	rjmp	.+70     	; 0x292 <communicate_serial+0xe8>
				case 0x77 :
					turn_player(&playerTwo, UP);		//w
     24c:	62 e0       	ldi	r22, 0x02	; 2
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	8b ed       	ldi	r24, 0xDB	; 219
     252:	92 e0       	ldi	r25, 0x02	; 2
     254:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <turn_player>
					break;
     258:	1c c0       	rjmp	.+56     	; 0x292 <communicate_serial+0xe8>
				case 0x44 :
					turn_player(&playerTwo, RIGHT);		//D
     25a:	61 e0       	ldi	r22, 0x01	; 1
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	8b ed       	ldi	r24, 0xDB	; 219
     260:	92 e0       	ldi	r25, 0x02	; 2
     262:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <turn_player>
					break;
     266:	15 c0       	rjmp	.+42     	; 0x292 <communicate_serial+0xe8>
				case 0x64 :
					turn_player(&playerTwo, RIGHT);		//d
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	8b ed       	ldi	r24, 0xDB	; 219
     26e:	92 e0       	ldi	r25, 0x02	; 2
     270:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <turn_player>
					break;
     274:	0e c0       	rjmp	.+28     	; 0x292 <communicate_serial+0xe8>
				case 0x53 :
					turn_player(&playerTwo, DOWN);		//S
     276:	63 e0       	ldi	r22, 0x03	; 3
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	8b ed       	ldi	r24, 0xDB	; 219
     27c:	92 e0       	ldi	r25, 0x02	; 2
     27e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <turn_player>
					break;
     282:	07 c0       	rjmp	.+14     	; 0x292 <communicate_serial+0xe8>
				case 0x73 :
					turn_player(&playerTwo, DOWN);		//s
     284:	63 e0       	ldi	r22, 0x03	; 3
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	8b ed       	ldi	r24, 0xDB	; 219
     28a:	92 e0       	ldi	r25, 0x02	; 2
     28c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <turn_player>
					break;
     290:	00 00       	nop
			}
		}

		/*Constantly checking if game is over*/
		if (xSemaphoreTake(xGameOverSemaphore, (TickType_t) 10)) {
     292:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <xGameOverSemaphore>
     296:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <xGameOverSemaphore+0x1>
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	4a e0       	ldi	r20, 0x0A	; 10
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	0e 94 b7 14 	call	0x296e	; 0x296e <xQueueGenericReceive>
     2a8:	88 23       	and	r24, r24
     2aa:	a1 f0       	breq	.+40     	; 0x2d4 <communicate_serial+0x12a>
			/*Sending data to the PC when score is changed*/
			if (gameOver == true)
     2ac:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <gameOver>
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	29 f4       	brne	.+10     	; 0x2be <communicate_serial+0x114>
				com_send_bytes((uint8_t *)"GAME OVER\n", 10);
     2b4:	6a e0       	ldi	r22, 0x0A	; 10
     2b6:	8a e0       	ldi	r24, 0x0A	; 10
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 5f 09 	call	0x12be	; 0x12be <com_send_bytes>
			
			xSemaphoreGive(xGameOverSemaphore);
     2be:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <xGameOverSemaphore>
     2c2:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <xGameOverSemaphore+0x1>
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	40 e0       	ldi	r20, 0x00	; 0
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	0e 94 a7 13 	call	0x274e	; 0x274e <xQueueGenericSend>
		}

		vTaskDelay(20);
     2d4:	84 e1       	ldi	r24, 0x14	; 20
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 49 19 	call	0x3292	; 0x3292 <vTaskDelay>
	}
     2dc:	7e cf       	rjmp	.-260    	; 0x1da <communicate_serial+0x30>

000002de <make_frame>:
	vTaskDelete(NULL);
}

/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	2a 97       	sbiw	r28, 0x0a	; 10
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	de bf       	out	0x3e, r29	; 62
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	cd bf       	out	0x3d, r28	; 61
     2f6:	9a 87       	std	Y+10, r25	; 0x0a
     2f8:	89 87       	std	Y+9, r24	; 0x09
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     2fa:	1a 82       	std	Y+2, r1	; 0x02
     2fc:	19 82       	std	Y+1, r1	; 0x01
     2fe:	1a c0       	rjmp	.+52     	; 0x334 <make_frame+0x56>
			for (int i = 0; i < 14; i++) { //For each column
     300:	1c 82       	std	Y+4, r1	; 0x04
     302:	1b 82       	std	Y+3, r1	; 0x03
     304:	0e c0       	rjmp	.+28     	; 0x322 <make_frame+0x44>
				frame_buffer[i]	= 0;
     306:	8b 81       	ldd	r24, Y+3	; 0x03
     308:	9c 81       	ldd	r25, Y+4	; 0x04
     30a:	88 0f       	add	r24, r24
     30c:	99 1f       	adc	r25, r25
     30e:	8c 59       	subi	r24, 0x9C	; 156
     310:	9e 4f       	sbci	r25, 0xFE	; 254
     312:	fc 01       	movw	r30, r24
     314:	11 82       	std	Z+1, r1	; 0x01
     316:	10 82       	st	Z, r1
/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
			for (int i = 0; i < 14; i++) { //For each column
     318:	8b 81       	ldd	r24, Y+3	; 0x03
     31a:	9c 81       	ldd	r25, Y+4	; 0x04
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	9c 83       	std	Y+4, r25	; 0x04
     320:	8b 83       	std	Y+3, r24	; 0x03
     322:	8b 81       	ldd	r24, Y+3	; 0x03
     324:	9c 81       	ldd	r25, Y+4	; 0x04
     326:	0e 97       	sbiw	r24, 0x0e	; 14
     328:	74 f3       	brlt	.-36     	; 0x306 <make_frame+0x28>

/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	9a 83       	std	Y+2, r25	; 0x02
     332:	89 83       	std	Y+1, r24	; 0x01
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	9a 81       	ldd	r25, Y+2	; 0x02
     338:	0a 97       	sbiw	r24, 0x0a	; 10
     33a:	14 f3       	brlt	.-60     	; 0x300 <make_frame+0x22>
				frame_buffer[i]	= 0;
			}
		}

		/* Create frame from gameState */
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     33c:	1e 82       	std	Y+6, r1	; 0x06
     33e:	1d 82       	std	Y+5, r1	; 0x05
     340:	65 c0       	rjmp	.+202    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			for (int i = 0; i < 14; i++) { //For each column
     342:	18 86       	std	Y+8, r1	; 0x08
     344:	1f 82       	std	Y+7, r1	; 0x07
     346:	58 c0       	rjmp	.+176    	; 0x3f8 <make_frame+0x11a>
				if (gameState[i][j] != 0) { //Add up
     348:	8f 81       	ldd	r24, Y+7	; 0x07
     34a:	98 85       	ldd	r25, Y+8	; 0x08
     34c:	88 0f       	add	r24, r24
     34e:	99 1f       	adc	r25, r25
     350:	9c 01       	movw	r18, r24
     352:	22 0f       	add	r18, r18
     354:	33 1f       	adc	r19, r19
     356:	22 0f       	add	r18, r18
     358:	33 1f       	adc	r19, r19
     35a:	82 0f       	add	r24, r18
     35c:	93 1f       	adc	r25, r19
     35e:	2d 81       	ldd	r18, Y+5	; 0x05
     360:	3e 81       	ldd	r19, Y+6	; 0x06
     362:	82 0f       	add	r24, r18
     364:	93 1f       	adc	r25, r19
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	80 58       	subi	r24, 0x80	; 128
     36c:	9e 4f       	sbci	r25, 0xFE	; 254
     36e:	fc 01       	movw	r30, r24
     370:	80 81       	ld	r24, Z
     372:	91 81       	ldd	r25, Z+1	; 0x01
     374:	89 2b       	or	r24, r25
     376:	d9 f1       	breq	.+118    	; 0x3ee <make_frame+0x110>
					frame_buffer[i]	+= (int) (pow(2,  j) + 0.5);
     378:	8f 81       	ldd	r24, Y+7	; 0x07
     37a:	98 85       	ldd	r25, Y+8	; 0x08
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	8c 59       	subi	r24, 0x9C	; 156
     382:	9e 4f       	sbci	r25, 0xFE	; 254
     384:	fc 01       	movw	r30, r24
     386:	00 81       	ld	r16, Z
     388:	11 81       	ldd	r17, Z+1	; 0x01
     38a:	8d 81       	ldd	r24, Y+5	; 0x05
     38c:	9e 81       	ldd	r25, Y+6	; 0x06
     38e:	09 2e       	mov	r0, r25
     390:	00 0c       	add	r0, r0
     392:	aa 0b       	sbc	r26, r26
     394:	bb 0b       	sbc	r27, r27
     396:	bc 01       	movw	r22, r24
     398:	cd 01       	movw	r24, r26
     39a:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__floatsisf>
     39e:	dc 01       	movw	r26, r24
     3a0:	cb 01       	movw	r24, r22
     3a2:	9c 01       	movw	r18, r24
     3a4:	ad 01       	movw	r20, r26
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e4       	ldi	r25, 0x40	; 64
     3ae:	0e 94 77 20 	call	0x40ee	; 0x40ee <pow>
     3b2:	dc 01       	movw	r26, r24
     3b4:	cb 01       	movw	r24, r22
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	5f e3       	ldi	r21, 0x3F	; 63
     3be:	bc 01       	movw	r22, r24
     3c0:	cd 01       	movw	r24, r26
     3c2:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__addsf3>
     3c6:	dc 01       	movw	r26, r24
     3c8:	cb 01       	movw	r24, r22
     3ca:	bc 01       	movw	r22, r24
     3cc:	cd 01       	movw	r24, r26
     3ce:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <__fixsfsi>
     3d2:	dc 01       	movw	r26, r24
     3d4:	cb 01       	movw	r24, r22
     3d6:	98 01       	movw	r18, r16
     3d8:	28 0f       	add	r18, r24
     3da:	39 1f       	adc	r19, r25
     3dc:	8f 81       	ldd	r24, Y+7	; 0x07
     3de:	98 85       	ldd	r25, Y+8	; 0x08
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	8c 59       	subi	r24, 0x9C	; 156
     3e6:	9e 4f       	sbci	r25, 0xFE	; 254
     3e8:	fc 01       	movw	r30, r24
     3ea:	31 83       	std	Z+1, r19	; 0x01
     3ec:	20 83       	st	Z, r18
			}
		}

		/* Create frame from gameState */
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
			for (int i = 0; i < 14; i++) { //For each column
     3ee:	8f 81       	ldd	r24, Y+7	; 0x07
     3f0:	98 85       	ldd	r25, Y+8	; 0x08
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	98 87       	std	Y+8, r25	; 0x08
     3f6:	8f 83       	std	Y+7, r24	; 0x07
     3f8:	8f 81       	ldd	r24, Y+7	; 0x07
     3fa:	98 85       	ldd	r25, Y+8	; 0x08
     3fc:	0e 97       	sbiw	r24, 0x0e	; 14
     3fe:	0c f4       	brge	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	a3 cf       	rjmp	.-186    	; 0x348 <make_frame+0x6a>
				frame_buffer[i]	= 0;
			}
		}

		/* Create frame from gameState */
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     402:	8d 81       	ldd	r24, Y+5	; 0x05
     404:	9e 81       	ldd	r25, Y+6	; 0x06
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	9e 83       	std	Y+6, r25	; 0x06
     40a:	8d 83       	std	Y+5, r24	; 0x05
     40c:	8d 81       	ldd	r24, Y+5	; 0x05
     40e:	9e 81       	ldd	r25, Y+6	; 0x06
     410:	0a 97       	sbiw	r24, 0x0a	; 10
     412:	0c f4       	brge	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	96 cf       	rjmp	.-212    	; 0x342 <make_frame+0x64>
					frame_buffer[i]	+= (int) (pow(2,  j) + 0.5);
				}
			}
		}

		vTaskDelay(50);
     416:	82 e3       	ldi	r24, 0x32	; 50
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 49 19 	call	0x3292	; 0x3292 <vTaskDelay>
	}
     41e:	6d cf       	rjmp	.-294    	; 0x2fa <make_frame+0x1c>

00000420 <die>:

	vTaskDelete(NULL);
}

void die()
{
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
	//TODO
	com_send_bytes("DEAD!\n", 6);
     428:	66 e0       	ldi	r22, 0x06	; 6
     42a:	85 e1       	ldi	r24, 0x15	; 21
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 5f 09 	call	0x12be	; 0x12be <com_send_bytes>
}
     432:	00 00       	nop
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <move_player>:

void move_player(Player* player)
{
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	00 d0       	rcall	.+0      	; 0x440 <move_player+0x6>
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	9a 83       	std	Y+2, r25	; 0x02
     446:	89 83       	std	Y+1, r24	; 0x01
	switch ((*player).direction) {
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	9a 81       	ldd	r25, Y+2	; 0x02
     44c:	fc 01       	movw	r30, r24
     44e:	84 81       	ldd	r24, Z+4	; 0x04
     450:	88 2f       	mov	r24, r24
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	91 05       	cpc	r25, r1
     458:	21 f1       	breq	.+72     	; 0x4a2 <move_player+0x68>
     45a:	82 30       	cpi	r24, 0x02	; 2
     45c:	91 05       	cpc	r25, r1
     45e:	1c f4       	brge	.+6      	; 0x466 <move_player+0x2c>
     460:	89 2b       	or	r24, r25
     462:	41 f0       	breq	.+16     	; 0x474 <move_player+0x3a>
				(*player).y++;
			break;
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     464:	65 c0       	rjmp	.+202    	; 0x530 <move_player+0xf6>
	com_send_bytes("DEAD!\n", 6);
}

void move_player(Player* player)
{
	switch ((*player).direction) {
     466:	82 30       	cpi	r24, 0x02	; 2
     468:	91 05       	cpc	r25, r1
     46a:	81 f1       	breq	.+96     	; 0x4cc <move_player+0x92>
     46c:	03 97       	sbiw	r24, 0x03	; 3
     46e:	09 f4       	brne	.+2      	; 0x472 <move_player+0x38>
     470:	43 c0       	rjmp	.+134    	; 0x4f8 <move_player+0xbe>
				(*player).y++;
			break;
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     472:	5e c0       	rjmp	.+188    	; 0x530 <move_player+0xf6>

void move_player(Player* player)
{
	switch ((*player).direction) {
		case LEFT:
			if ((*player).x > 0)
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	9a 81       	ldd	r25, Y+2	; 0x02
     478:	fc 01       	movw	r30, r24
     47a:	80 81       	ld	r24, Z
     47c:	91 81       	ldd	r25, Z+1	; 0x01
     47e:	18 16       	cp	r1, r24
     480:	19 06       	cpc	r1, r25
     482:	0c f0       	brlt	.+2      	; 0x486 <move_player+0x4c>
     484:	4e c0       	rjmp	.+156    	; 0x522 <move_player+0xe8>
				(*player).x--;
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
     48a:	fc 01       	movw	r30, r24
     48c:	80 81       	ld	r24, Z
     48e:	91 81       	ldd	r25, Z+1	; 0x01
     490:	9c 01       	movw	r18, r24
     492:	21 50       	subi	r18, 0x01	; 1
     494:	31 09       	sbc	r19, r1
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	9a 81       	ldd	r25, Y+2	; 0x02
     49a:	fc 01       	movw	r30, r24
     49c:	31 83       	std	Z+1, r19	; 0x01
     49e:	20 83       	st	Z, r18
			break;
     4a0:	40 c0       	rjmp	.+128    	; 0x522 <move_player+0xe8>
		case RIGHT:
			if ((*player).x < 14)
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	9a 81       	ldd	r25, Y+2	; 0x02
     4a6:	fc 01       	movw	r30, r24
     4a8:	80 81       	ld	r24, Z
     4aa:	91 81       	ldd	r25, Z+1	; 0x01
     4ac:	0e 97       	sbiw	r24, 0x0e	; 14
     4ae:	dc f5       	brge	.+118    	; 0x526 <move_player+0xec>
				(*player).x++;
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	9a 81       	ldd	r25, Y+2	; 0x02
     4b4:	fc 01       	movw	r30, r24
     4b6:	80 81       	ld	r24, Z
     4b8:	91 81       	ldd	r25, Z+1	; 0x01
     4ba:	9c 01       	movw	r18, r24
     4bc:	2f 5f       	subi	r18, 0xFF	; 255
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	9a 81       	ldd	r25, Y+2	; 0x02
     4c4:	fc 01       	movw	r30, r24
     4c6:	31 83       	std	Z+1, r19	; 0x01
     4c8:	20 83       	st	Z, r18
			break;
     4ca:	2d c0       	rjmp	.+90     	; 0x526 <move_player+0xec>
		case UP:
			if ((*player).y > 0)
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	9a 81       	ldd	r25, Y+2	; 0x02
     4d0:	fc 01       	movw	r30, r24
     4d2:	82 81       	ldd	r24, Z+2	; 0x02
     4d4:	93 81       	ldd	r25, Z+3	; 0x03
     4d6:	18 16       	cp	r1, r24
     4d8:	19 06       	cpc	r1, r25
     4da:	3c f5       	brge	.+78     	; 0x52a <move_player+0xf0>
				(*player).y--;
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	9a 81       	ldd	r25, Y+2	; 0x02
     4e0:	fc 01       	movw	r30, r24
     4e2:	82 81       	ldd	r24, Z+2	; 0x02
     4e4:	93 81       	ldd	r25, Z+3	; 0x03
     4e6:	9c 01       	movw	r18, r24
     4e8:	21 50       	subi	r18, 0x01	; 1
     4ea:	31 09       	sbc	r19, r1
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	9a 81       	ldd	r25, Y+2	; 0x02
     4f0:	fc 01       	movw	r30, r24
     4f2:	33 83       	std	Z+3, r19	; 0x03
     4f4:	22 83       	std	Z+2, r18	; 0x02
			break;
     4f6:	19 c0       	rjmp	.+50     	; 0x52a <move_player+0xf0>
		case DOWN:
			if ((*player).y < 10)
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	9a 81       	ldd	r25, Y+2	; 0x02
     4fc:	fc 01       	movw	r30, r24
     4fe:	82 81       	ldd	r24, Z+2	; 0x02
     500:	93 81       	ldd	r25, Z+3	; 0x03
     502:	0a 97       	sbiw	r24, 0x0a	; 10
     504:	a4 f4       	brge	.+40     	; 0x52e <move_player+0xf4>
				(*player).y++;
     506:	89 81       	ldd	r24, Y+1	; 0x01
     508:	9a 81       	ldd	r25, Y+2	; 0x02
     50a:	fc 01       	movw	r30, r24
     50c:	82 81       	ldd	r24, Z+2	; 0x02
     50e:	93 81       	ldd	r25, Z+3	; 0x03
     510:	9c 01       	movw	r18, r24
     512:	2f 5f       	subi	r18, 0xFF	; 255
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	9a 81       	ldd	r25, Y+2	; 0x02
     51a:	fc 01       	movw	r30, r24
     51c:	33 83       	std	Z+3, r19	; 0x03
     51e:	22 83       	std	Z+2, r18	; 0x02
			break;
     520:	06 c0       	rjmp	.+12     	; 0x52e <move_player+0xf4>
{
	switch ((*player).direction) {
		case LEFT:
			if ((*player).x > 0)
				(*player).x--;
			break;
     522:	00 00       	nop
     524:	05 c0       	rjmp	.+10     	; 0x530 <move_player+0xf6>
		case RIGHT:
			if ((*player).x < 14)
				(*player).x++;
			break;
     526:	00 00       	nop
     528:	03 c0       	rjmp	.+6      	; 0x530 <move_player+0xf6>
		case UP:
			if ((*player).y > 0)
				(*player).y--;
			break;
     52a:	00 00       	nop
     52c:	01 c0       	rjmp	.+2      	; 0x530 <move_player+0xf6>
		case DOWN:
			if ((*player).y < 10)
				(*player).y++;
			break;
     52e:	00 00       	nop
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     530:	00 00       	nop
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <game_processing>:


/* TODO: protect gameState with a mutex */
void game_processing(void *pvParameters)
{
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	a5 97       	sbiw	r28, 0x25	; 37
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	cd bf       	out	0x3d, r28	; 61
     550:	9d a3       	std	Y+37, r25	; 0x25
     552:	8c a3       	std	Y+36, r24	; 0x24
	/* Populate gameState from the players' positions and tracks:
	* Start at turn[i] to compare with turn[i - 1] for each player
	*/

	bool collision = false;
     554:	19 82       	std	Y+1, r1	; 0x01

	for(;;) {

		while(!collision) {
     556:	8c c2       	rjmp	.+1304   	; 0xa70 <__stack+0x171>
			
			/* Erase player one */
			for (int i = 0; i < 14; i++)
     558:	1b 82       	std	Y+3, r1	; 0x03
     55a:	1a 82       	std	Y+2, r1	; 0x02
     55c:	3f c0       	rjmp	.+126    	; 0x5dc <game_processing+0xa0>
				for (int j = 0; j < 10; j++)
     55e:	1d 82       	std	Y+5, r1	; 0x05
     560:	1c 82       	std	Y+4, r1	; 0x04
     562:	33 c0       	rjmp	.+102    	; 0x5ca <game_processing+0x8e>
					if (gameState[i][j] == 1)
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	9b 81       	ldd	r25, Y+3	; 0x03
     568:	88 0f       	add	r24, r24
     56a:	99 1f       	adc	r25, r25
     56c:	9c 01       	movw	r18, r24
     56e:	22 0f       	add	r18, r18
     570:	33 1f       	adc	r19, r19
     572:	22 0f       	add	r18, r18
     574:	33 1f       	adc	r19, r19
     576:	82 0f       	add	r24, r18
     578:	93 1f       	adc	r25, r19
     57a:	2c 81       	ldd	r18, Y+4	; 0x04
     57c:	3d 81       	ldd	r19, Y+5	; 0x05
     57e:	82 0f       	add	r24, r18
     580:	93 1f       	adc	r25, r19
     582:	88 0f       	add	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	80 58       	subi	r24, 0x80	; 128
     588:	9e 4f       	sbci	r25, 0xFE	; 254
     58a:	fc 01       	movw	r30, r24
     58c:	80 81       	ld	r24, Z
     58e:	91 81       	ldd	r25, Z+1	; 0x01
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	b1 f4       	brne	.+44     	; 0x5c0 <game_processing+0x84>
						gameState[i][j] = 0;
     594:	8a 81       	ldd	r24, Y+2	; 0x02
     596:	9b 81       	ldd	r25, Y+3	; 0x03
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	9c 01       	movw	r18, r24
     59e:	22 0f       	add	r18, r18
     5a0:	33 1f       	adc	r19, r19
     5a2:	22 0f       	add	r18, r18
     5a4:	33 1f       	adc	r19, r19
     5a6:	82 0f       	add	r24, r18
     5a8:	93 1f       	adc	r25, r19
     5aa:	2c 81       	ldd	r18, Y+4	; 0x04
     5ac:	3d 81       	ldd	r19, Y+5	; 0x05
     5ae:	82 0f       	add	r24, r18
     5b0:	93 1f       	adc	r25, r19
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	80 58       	subi	r24, 0x80	; 128
     5b8:	9e 4f       	sbci	r25, 0xFE	; 254
     5ba:	fc 01       	movw	r30, r24
     5bc:	11 82       	std	Z+1, r1	; 0x01
     5be:	10 82       	st	Z, r1

		while(!collision) {
			
			/* Erase player one */
			for (int i = 0; i < 14; i++)
				for (int j = 0; j < 10; j++)
     5c0:	8c 81       	ldd	r24, Y+4	; 0x04
     5c2:	9d 81       	ldd	r25, Y+5	; 0x05
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	9d 83       	std	Y+5, r25	; 0x05
     5c8:	8c 83       	std	Y+4, r24	; 0x04
     5ca:	8c 81       	ldd	r24, Y+4	; 0x04
     5cc:	9d 81       	ldd	r25, Y+5	; 0x05
     5ce:	0a 97       	sbiw	r24, 0x0a	; 10
     5d0:	4c f2       	brlt	.-110    	; 0x564 <game_processing+0x28>
	for(;;) {

		while(!collision) {
			
			/* Erase player one */
			for (int i = 0; i < 14; i++)
     5d2:	8a 81       	ldd	r24, Y+2	; 0x02
     5d4:	9b 81       	ldd	r25, Y+3	; 0x03
     5d6:	01 96       	adiw	r24, 0x01	; 1
     5d8:	9b 83       	std	Y+3, r25	; 0x03
     5da:	8a 83       	std	Y+2, r24	; 0x02
     5dc:	8a 81       	ldd	r24, Y+2	; 0x02
     5de:	9b 81       	ldd	r25, Y+3	; 0x03
     5e0:	0e 97       	sbiw	r24, 0x0e	; 14
     5e2:	0c f4       	brge	.+2      	; 0x5e6 <game_processing+0xaa>
     5e4:	bc cf       	rjmp	.-136    	; 0x55e <game_processing+0x22>
				for (int j = 0; j < 10; j++)
					if (gameState[i][j] == 1)
						gameState[i][j] = 0;
			
			if (playerOne.turnsCount < 1) { //Didn't turn yet !
     5e6:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <playerOne+0x41>
     5ea:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <playerOne+0x42>
     5ee:	18 16       	cp	r1, r24
     5f0:	19 06       	cpc	r1, r25
     5f2:	0c f4       	brge	.+2      	; 0x5f6 <game_processing+0xba>
     5f4:	f4 c0       	rjmp	.+488    	; 0x7de <game_processing+0x2a2>

				if (playerOne.x == playerOne.turns[0].x) { //Vertical line
     5f6:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <playerOne>
     5fa:	30 91 99 02 	lds	r19, 0x0299	; 0x800299 <playerOne+0x1>
     5fe:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <playerOne+0x5>
     602:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <playerOne+0x6>
     606:	28 17       	cp	r18, r24
     608:	39 07       	cpc	r19, r25
     60a:	09 f0       	breq	.+2      	; 0x60e <game_processing+0xd2>
     60c:	6e c0       	rjmp	.+220    	; 0x6ea <game_processing+0x1ae>

					int from, to;
					
					if (playerOne.y < playerOne.turns[0].y) {
     60e:	20 91 9a 02 	lds	r18, 0x029A	; 0x80029a <playerOne+0x2>
     612:	30 91 9b 02 	lds	r19, 0x029B	; 0x80029b <playerOne+0x3>
     616:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <playerOne+0x7>
     61a:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <playerOne+0x8>
     61e:	28 17       	cp	r18, r24
     620:	39 07       	cpc	r19, r25
     622:	6c f4       	brge	.+26     	; 0x63e <game_processing+0x102>
						from = playerOne.y;
     624:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <playerOne+0x2>
     628:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <playerOne+0x3>
     62c:	9f 83       	std	Y+7, r25	; 0x07
     62e:	8e 83       	std	Y+6, r24	; 0x06
						to = playerOne.turns[0].y;
     630:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <playerOne+0x7>
     634:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <playerOne+0x8>
     638:	99 87       	std	Y+9, r25	; 0x09
     63a:	88 87       	std	Y+8, r24	; 0x08
     63c:	0c c0       	rjmp	.+24     	; 0x656 <game_processing+0x11a>
					} else {
						from = playerOne.turns[0].y;
     63e:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <playerOne+0x7>
     642:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <playerOne+0x8>
     646:	9f 83       	std	Y+7, r25	; 0x07
     648:	8e 83       	std	Y+6, r24	; 0x06
						to = playerOne.y;
     64a:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <playerOne+0x2>
     64e:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <playerOne+0x3>
     652:	99 87       	std	Y+9, r25	; 0x09
     654:	88 87       	std	Y+8, r24	; 0x08
					}

					//Turn on LEDs for this line
					for (int j = from; j <= to; j++) {
     656:	8e 81       	ldd	r24, Y+6	; 0x06
     658:	9f 81       	ldd	r25, Y+7	; 0x07
     65a:	9b 87       	std	Y+11, r25	; 0x0b
     65c:	8a 87       	std	Y+10, r24	; 0x0a
     65e:	3c c0       	rjmp	.+120    	; 0x6d8 <game_processing+0x19c>
						if (gameState[playerOne.turns[0].x][j] == 2) { //Collision with player two !!
     660:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <playerOne+0x5>
     664:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <playerOne+0x6>
     668:	88 0f       	add	r24, r24
     66a:	99 1f       	adc	r25, r25
     66c:	9c 01       	movw	r18, r24
     66e:	22 0f       	add	r18, r18
     670:	33 1f       	adc	r19, r19
     672:	22 0f       	add	r18, r18
     674:	33 1f       	adc	r19, r19
     676:	82 0f       	add	r24, r18
     678:	93 1f       	adc	r25, r19
     67a:	2a 85       	ldd	r18, Y+10	; 0x0a
     67c:	3b 85       	ldd	r19, Y+11	; 0x0b
     67e:	82 0f       	add	r24, r18
     680:	93 1f       	adc	r25, r19
     682:	88 0f       	add	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	80 58       	subi	r24, 0x80	; 128
     688:	9e 4f       	sbci	r25, 0xFE	; 254
     68a:	fc 01       	movw	r30, r24
     68c:	80 81       	ld	r24, Z
     68e:	91 81       	ldd	r25, Z+1	; 0x01
     690:	02 97       	sbiw	r24, 0x02	; 2
     692:	19 f4       	brne	.+6      	; 0x69a <game_processing+0x15e>
							collision = 1;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	89 83       	std	Y+1, r24	; 0x01
     698:	1a c0       	rjmp	.+52     	; 0x6ce <game_processing+0x192>
						} else {
							gameState[playerOne.turns[0].x][j] = 1;
     69a:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <playerOne+0x5>
     69e:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <playerOne+0x6>
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
     6a6:	9c 01       	movw	r18, r24
     6a8:	22 0f       	add	r18, r18
     6aa:	33 1f       	adc	r19, r19
     6ac:	22 0f       	add	r18, r18
     6ae:	33 1f       	adc	r19, r19
     6b0:	82 0f       	add	r24, r18
     6b2:	93 1f       	adc	r25, r19
     6b4:	2a 85       	ldd	r18, Y+10	; 0x0a
     6b6:	3b 85       	ldd	r19, Y+11	; 0x0b
     6b8:	82 0f       	add	r24, r18
     6ba:	93 1f       	adc	r25, r19
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	80 58       	subi	r24, 0x80	; 128
     6c2:	9e 4f       	sbci	r25, 0xFE	; 254
     6c4:	21 e0       	ldi	r18, 0x01	; 1
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	fc 01       	movw	r30, r24
     6ca:	31 83       	std	Z+1, r19	; 0x01
     6cc:	20 83       	st	Z, r18
						from = playerOne.turns[0].y;
						to = playerOne.y;
					}

					//Turn on LEDs for this line
					for (int j = from; j <= to; j++) {
     6ce:	8a 85       	ldd	r24, Y+10	; 0x0a
     6d0:	9b 85       	ldd	r25, Y+11	; 0x0b
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	9b 87       	std	Y+11, r25	; 0x0b
     6d6:	8a 87       	std	Y+10, r24	; 0x0a
     6d8:	2a 85       	ldd	r18, Y+10	; 0x0a
     6da:	3b 85       	ldd	r19, Y+11	; 0x0b
     6dc:	88 85       	ldd	r24, Y+8	; 0x08
     6de:	99 85       	ldd	r25, Y+9	; 0x09
     6e0:	82 17       	cp	r24, r18
     6e2:	93 07       	cpc	r25, r19
     6e4:	0c f0       	brlt	.+2      	; 0x6e8 <game_processing+0x1ac>
     6e6:	bc cf       	rjmp	.-136    	; 0x660 <game_processing+0x124>
     6e8:	bb c1       	rjmp	.+886    	; 0xa60 <__stack+0x161>
						} else {
							gameState[playerOne.turns[0].x][j] = 1;
						}
					}

				} else if (playerOne.y == playerOne.turns[0].y) { //Horizontal line
     6ea:	20 91 9a 02 	lds	r18, 0x029A	; 0x80029a <playerOne+0x2>
     6ee:	30 91 9b 02 	lds	r19, 0x029B	; 0x80029b <playerOne+0x3>
     6f2:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <playerOne+0x7>
     6f6:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <playerOne+0x8>
     6fa:	28 17       	cp	r18, r24
     6fc:	39 07       	cpc	r19, r25
     6fe:	09 f0       	breq	.+2      	; 0x702 <game_processing+0x1c6>
     700:	af c1       	rjmp	.+862    	; 0xa60 <__stack+0x161>
	
					int from, to;
					
					if (playerOne.x < playerOne.turns[0].x) {
     702:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <playerOne>
     706:	30 91 99 02 	lds	r19, 0x0299	; 0x800299 <playerOne+0x1>
     70a:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <playerOne+0x5>
     70e:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <playerOne+0x6>
     712:	28 17       	cp	r18, r24
     714:	39 07       	cpc	r19, r25
     716:	6c f4       	brge	.+26     	; 0x732 <game_processing+0x1f6>
						from = playerOne.x;
     718:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <playerOne>
     71c:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <playerOne+0x1>
     720:	9d 87       	std	Y+13, r25	; 0x0d
     722:	8c 87       	std	Y+12, r24	; 0x0c
						to = playerOne.turns[0].x;
     724:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <playerOne+0x5>
     728:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <playerOne+0x6>
     72c:	9f 87       	std	Y+15, r25	; 0x0f
     72e:	8e 87       	std	Y+14, r24	; 0x0e
     730:	0c c0       	rjmp	.+24     	; 0x74a <game_processing+0x20e>
					} else {
						from = playerOne.turns[0].x;
     732:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <playerOne+0x5>
     736:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <playerOne+0x6>
     73a:	9d 87       	std	Y+13, r25	; 0x0d
     73c:	8c 87       	std	Y+12, r24	; 0x0c
						to = playerOne.x;
     73e:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <playerOne>
     742:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <playerOne+0x1>
     746:	9f 87       	std	Y+15, r25	; 0x0f
     748:	8e 87       	std	Y+14, r24	; 0x0e
					}
				
					for (int j = from; j <= to; j++) {
     74a:	8c 85       	ldd	r24, Y+12	; 0x0c
     74c:	9d 85       	ldd	r25, Y+13	; 0x0d
     74e:	99 8b       	std	Y+17, r25	; 0x11
     750:	88 8b       	std	Y+16, r24	; 0x10
     752:	3c c0       	rjmp	.+120    	; 0x7cc <game_processing+0x290>
						if (gameState[j][playerOne.turns[0].y] == 2) { //Collision with player two !!
     754:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <playerOne+0x7>
     758:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <playerOne+0x8>
     75c:	88 89       	ldd	r24, Y+16	; 0x10
     75e:	99 89       	ldd	r25, Y+17	; 0x11
     760:	88 0f       	add	r24, r24
     762:	99 1f       	adc	r25, r25
     764:	ac 01       	movw	r20, r24
     766:	44 0f       	add	r20, r20
     768:	55 1f       	adc	r21, r21
     76a:	44 0f       	add	r20, r20
     76c:	55 1f       	adc	r21, r21
     76e:	84 0f       	add	r24, r20
     770:	95 1f       	adc	r25, r21
     772:	82 0f       	add	r24, r18
     774:	93 1f       	adc	r25, r19
     776:	88 0f       	add	r24, r24
     778:	99 1f       	adc	r25, r25
     77a:	80 58       	subi	r24, 0x80	; 128
     77c:	9e 4f       	sbci	r25, 0xFE	; 254
     77e:	fc 01       	movw	r30, r24
     780:	80 81       	ld	r24, Z
     782:	91 81       	ldd	r25, Z+1	; 0x01
     784:	02 97       	sbiw	r24, 0x02	; 2
     786:	19 f4       	brne	.+6      	; 0x78e <game_processing+0x252>
							collision = 1;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	89 83       	std	Y+1, r24	; 0x01
     78c:	1a c0       	rjmp	.+52     	; 0x7c2 <game_processing+0x286>
						} else {
							gameState[j][playerOne.turns[0].y] = 1;
     78e:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <playerOne+0x7>
     792:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <playerOne+0x8>
     796:	88 89       	ldd	r24, Y+16	; 0x10
     798:	99 89       	ldd	r25, Y+17	; 0x11
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	ac 01       	movw	r20, r24
     7a0:	44 0f       	add	r20, r20
     7a2:	55 1f       	adc	r21, r21
     7a4:	44 0f       	add	r20, r20
     7a6:	55 1f       	adc	r21, r21
     7a8:	84 0f       	add	r24, r20
     7aa:	95 1f       	adc	r25, r21
     7ac:	82 0f       	add	r24, r18
     7ae:	93 1f       	adc	r25, r19
     7b0:	88 0f       	add	r24, r24
     7b2:	99 1f       	adc	r25, r25
     7b4:	80 58       	subi	r24, 0x80	; 128
     7b6:	9e 4f       	sbci	r25, 0xFE	; 254
     7b8:	21 e0       	ldi	r18, 0x01	; 1
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	fc 01       	movw	r30, r24
     7be:	31 83       	std	Z+1, r19	; 0x01
     7c0:	20 83       	st	Z, r18
					} else {
						from = playerOne.turns[0].x;
						to = playerOne.x;
					}
				
					for (int j = from; j <= to; j++) {
     7c2:	88 89       	ldd	r24, Y+16	; 0x10
     7c4:	99 89       	ldd	r25, Y+17	; 0x11
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	99 8b       	std	Y+17, r25	; 0x11
     7ca:	88 8b       	std	Y+16, r24	; 0x10
     7cc:	28 89       	ldd	r18, Y+16	; 0x10
     7ce:	39 89       	ldd	r19, Y+17	; 0x11
     7d0:	8e 85       	ldd	r24, Y+14	; 0x0e
     7d2:	9f 85       	ldd	r25, Y+15	; 0x0f
     7d4:	82 17       	cp	r24, r18
     7d6:	93 07       	cpc	r25, r19
     7d8:	0c f0       	brlt	.+2      	; 0x7dc <game_processing+0x2a0>
     7da:	bc cf       	rjmp	.-136    	; 0x754 <game_processing+0x218>
     7dc:	41 c1       	rjmp	.+642    	; 0xa60 <__stack+0x161>
					}
				}
			} else {

				/* Draw player one and check collisions with player two */
				for (int i = 0; i < playerOne.turnsCount; i++) {
     7de:	1b 8a       	std	Y+19, r1	; 0x13
     7e0:	1a 8a       	std	Y+18, r1	; 0x12
     7e2:	34 c1       	rjmp	.+616    	; 0xa4c <__stack+0x14d>
					Turn turn;
					turn.x = playerOne.turns[i].x;
     7e4:	8a 89       	ldd	r24, Y+18	; 0x12
     7e6:	9b 89       	ldd	r25, Y+19	; 0x13
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	83 56       	subi	r24, 0x63	; 99
     7f2:	9d 4f       	sbci	r25, 0xFD	; 253
     7f4:	fc 01       	movw	r30, r24
     7f6:	80 81       	ld	r24, Z
     7f8:	91 81       	ldd	r25, Z+1	; 0x01
     7fa:	99 a3       	std	Y+33, r25	; 0x21
     7fc:	88 a3       	std	Y+32, r24	; 0x20
					turn.y = playerOne.turns[i].y;
     7fe:	8a 89       	ldd	r24, Y+18	; 0x12
     800:	9b 89       	ldd	r25, Y+19	; 0x13
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	81 56       	subi	r24, 0x61	; 97
     80c:	9d 4f       	sbci	r25, 0xFD	; 253
     80e:	fc 01       	movw	r30, r24
     810:	80 81       	ld	r24, Z
     812:	91 81       	ldd	r25, Z+1	; 0x01
     814:	9b a3       	std	Y+35, r25	; 0x23
     816:	8a a3       	std	Y+34, r24	; 0x22

					if (i == playerOne.turnsCount) { //Current position, all turns were drawn
     818:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <playerOne+0x41>
     81c:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <playerOne+0x42>
     820:	8a 89       	ldd	r24, Y+18	; 0x12
     822:	9b 89       	ldd	r25, Y+19	; 0x13
     824:	28 17       	cp	r18, r24
     826:	39 07       	cpc	r19, r25
     828:	61 f4       	brne	.+24     	; 0x842 <game_processing+0x306>
						turn.x = playerOne.x;
     82a:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <playerOne>
     82e:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <playerOne+0x1>
     832:	99 a3       	std	Y+33, r25	; 0x21
     834:	88 a3       	std	Y+32, r24	; 0x20
						turn.y = playerOne.y;
     836:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <playerOne+0x2>
     83a:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <playerOne+0x3>
     83e:	9b a3       	std	Y+35, r25	; 0x23
     840:	8a a3       	std	Y+34, r24	; 0x22
					}

					if (turn.x == playerOne.turns[i].x) { //Vertical line
     842:	28 a1       	ldd	r18, Y+32	; 0x20
     844:	39 a1       	ldd	r19, Y+33	; 0x21
     846:	8a 89       	ldd	r24, Y+18	; 0x12
     848:	9b 89       	ldd	r25, Y+19	; 0x13
     84a:	88 0f       	add	r24, r24
     84c:	99 1f       	adc	r25, r25
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	83 56       	subi	r24, 0x63	; 99
     854:	9d 4f       	sbci	r25, 0xFD	; 253
     856:	fc 01       	movw	r30, r24
     858:	80 81       	ld	r24, Z
     85a:	91 81       	ldd	r25, Z+1	; 0x01
     85c:	28 17       	cp	r18, r24
     85e:	39 07       	cpc	r19, r25
     860:	09 f0       	breq	.+2      	; 0x864 <game_processing+0x328>
     862:	78 c0       	rjmp	.+240    	; 0x954 <__stack+0x55>

						int from, to;

						if (playerOne.turns[i].y < turn.y) {
     864:	8a 89       	ldd	r24, Y+18	; 0x12
     866:	9b 89       	ldd	r25, Y+19	; 0x13
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	81 56       	subi	r24, 0x61	; 97
     872:	9d 4f       	sbci	r25, 0xFD	; 253
     874:	fc 01       	movw	r30, r24
     876:	20 81       	ld	r18, Z
     878:	31 81       	ldd	r19, Z+1	; 0x01
     87a:	8a a1       	ldd	r24, Y+34	; 0x22
     87c:	9b a1       	ldd	r25, Y+35	; 0x23
     87e:	28 17       	cp	r18, r24
     880:	39 07       	cpc	r19, r25
     882:	94 f4       	brge	.+36     	; 0x8a8 <game_processing+0x36c>
							from = playerOne.turns[i].y;
     884:	8a 89       	ldd	r24, Y+18	; 0x12
     886:	9b 89       	ldd	r25, Y+19	; 0x13
     888:	88 0f       	add	r24, r24
     88a:	99 1f       	adc	r25, r25
     88c:	88 0f       	add	r24, r24
     88e:	99 1f       	adc	r25, r25
     890:	81 56       	subi	r24, 0x61	; 97
     892:	9d 4f       	sbci	r25, 0xFD	; 253
     894:	fc 01       	movw	r30, r24
     896:	80 81       	ld	r24, Z
     898:	91 81       	ldd	r25, Z+1	; 0x01
     89a:	9d 8b       	std	Y+21, r25	; 0x15
     89c:	8c 8b       	std	Y+20, r24	; 0x14
							to = turn.y;
     89e:	8a a1       	ldd	r24, Y+34	; 0x22
     8a0:	9b a1       	ldd	r25, Y+35	; 0x23
     8a2:	9f 8b       	std	Y+23, r25	; 0x17
     8a4:	8e 8b       	std	Y+22, r24	; 0x16
     8a6:	11 c0       	rjmp	.+34     	; 0x8ca <game_processing+0x38e>
						} else {
							from = turn.y;
     8a8:	8a a1       	ldd	r24, Y+34	; 0x22
     8aa:	9b a1       	ldd	r25, Y+35	; 0x23
     8ac:	9d 8b       	std	Y+21, r25	; 0x15
     8ae:	8c 8b       	std	Y+20, r24	; 0x14
							to = playerOne.turns[i].y;
     8b0:	8a 89       	ldd	r24, Y+18	; 0x12
     8b2:	9b 89       	ldd	r25, Y+19	; 0x13
     8b4:	88 0f       	add	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	81 56       	subi	r24, 0x61	; 97
     8be:	9d 4f       	sbci	r25, 0xFD	; 253
     8c0:	fc 01       	movw	r30, r24
     8c2:	80 81       	ld	r24, Z
     8c4:	91 81       	ldd	r25, Z+1	; 0x01
     8c6:	9f 8b       	std	Y+23, r25	; 0x17
     8c8:	8e 8b       	std	Y+22, r24	; 0x16
						}

						//Turn on LEDs for this line
						for (int j = from; j <= to; j++) {
     8ca:	8c 89       	ldd	r24, Y+20	; 0x14
     8cc:	9d 89       	ldd	r25, Y+21	; 0x15
     8ce:	99 8f       	std	Y+25, r25	; 0x19
     8d0:	88 8f       	std	Y+24, r24	; 0x18
     8d2:	38 c0       	rjmp	.+112    	; 0x944 <__stack+0x45>
							if (gameState[turn.x][j] == 2) { //Collision with player two !!
     8d4:	88 a1       	ldd	r24, Y+32	; 0x20
     8d6:	99 a1       	ldd	r25, Y+33	; 0x21
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	9c 01       	movw	r18, r24
     8de:	22 0f       	add	r18, r18
     8e0:	33 1f       	adc	r19, r19
     8e2:	22 0f       	add	r18, r18
     8e4:	33 1f       	adc	r19, r19
     8e6:	82 0f       	add	r24, r18
     8e8:	93 1f       	adc	r25, r19
     8ea:	28 8d       	ldd	r18, Y+24	; 0x18
     8ec:	39 8d       	ldd	r19, Y+25	; 0x19
     8ee:	82 0f       	add	r24, r18
     8f0:	93 1f       	adc	r25, r19
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	80 58       	subi	r24, 0x80	; 128
     8f8:	9e 4f       	sbci	r25, 0xFE	; 254
     8fa:	fc 01       	movw	r30, r24
     8fc:	80 81       	ld	r24, Z
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	02 97       	sbiw	r24, 0x02	; 2
     902:	19 f4       	brne	.+6      	; 0x90a <__stack+0xb>
								collision = 1;
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	89 83       	std	Y+1, r24	; 0x01
     908:	18 c0       	rjmp	.+48     	; 0x93a <__stack+0x3b>
							} else {
								gameState[turn.x][j] = 1;
     90a:	88 a1       	ldd	r24, Y+32	; 0x20
     90c:	99 a1       	ldd	r25, Y+33	; 0x21
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	9c 01       	movw	r18, r24
     914:	22 0f       	add	r18, r18
     916:	33 1f       	adc	r19, r19
     918:	22 0f       	add	r18, r18
     91a:	33 1f       	adc	r19, r19
     91c:	82 0f       	add	r24, r18
     91e:	93 1f       	adc	r25, r19
     920:	28 8d       	ldd	r18, Y+24	; 0x18
     922:	39 8d       	ldd	r19, Y+25	; 0x19
     924:	82 0f       	add	r24, r18
     926:	93 1f       	adc	r25, r19
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	80 58       	subi	r24, 0x80	; 128
     92e:	9e 4f       	sbci	r25, 0xFE	; 254
     930:	21 e0       	ldi	r18, 0x01	; 1
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	fc 01       	movw	r30, r24
     936:	31 83       	std	Z+1, r19	; 0x01
     938:	20 83       	st	Z, r18
							from = turn.y;
							to = playerOne.turns[i].y;
						}

						//Turn on LEDs for this line
						for (int j = from; j <= to; j++) {
     93a:	88 8d       	ldd	r24, Y+24	; 0x18
     93c:	99 8d       	ldd	r25, Y+25	; 0x19
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	99 8f       	std	Y+25, r25	; 0x19
     942:	88 8f       	std	Y+24, r24	; 0x18
     944:	28 8d       	ldd	r18, Y+24	; 0x18
     946:	39 8d       	ldd	r19, Y+25	; 0x19
     948:	8e 89       	ldd	r24, Y+22	; 0x16
     94a:	9f 89       	ldd	r25, Y+23	; 0x17
     94c:	82 17       	cp	r24, r18
     94e:	93 07       	cpc	r25, r19
     950:	0c f6       	brge	.-126    	; 0x8d4 <game_processing+0x398>
     952:	77 c0       	rjmp	.+238    	; 0xa42 <__stack+0x143>

					} else { //Horizontal line
						
						int from, to;

						if (playerOne.turns[i].x < turn.x) {
     954:	8a 89       	ldd	r24, Y+18	; 0x12
     956:	9b 89       	ldd	r25, Y+19	; 0x13
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	83 56       	subi	r24, 0x63	; 99
     962:	9d 4f       	sbci	r25, 0xFD	; 253
     964:	fc 01       	movw	r30, r24
     966:	20 81       	ld	r18, Z
     968:	31 81       	ldd	r19, Z+1	; 0x01
     96a:	88 a1       	ldd	r24, Y+32	; 0x20
     96c:	99 a1       	ldd	r25, Y+33	; 0x21
     96e:	28 17       	cp	r18, r24
     970:	39 07       	cpc	r19, r25
     972:	94 f4       	brge	.+36     	; 0x998 <__stack+0x99>
							from = playerOne.turns[i].x;
     974:	8a 89       	ldd	r24, Y+18	; 0x12
     976:	9b 89       	ldd	r25, Y+19	; 0x13
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	88 0f       	add	r24, r24
     97e:	99 1f       	adc	r25, r25
     980:	83 56       	subi	r24, 0x63	; 99
     982:	9d 4f       	sbci	r25, 0xFD	; 253
     984:	fc 01       	movw	r30, r24
     986:	80 81       	ld	r24, Z
     988:	91 81       	ldd	r25, Z+1	; 0x01
     98a:	9b 8f       	std	Y+27, r25	; 0x1b
     98c:	8a 8f       	std	Y+26, r24	; 0x1a
							to = turn.x;
     98e:	88 a1       	ldd	r24, Y+32	; 0x20
     990:	99 a1       	ldd	r25, Y+33	; 0x21
     992:	9d 8f       	std	Y+29, r25	; 0x1d
     994:	8c 8f       	std	Y+28, r24	; 0x1c
     996:	11 c0       	rjmp	.+34     	; 0x9ba <__stack+0xbb>
						} else {
							from = turn.x;
     998:	88 a1       	ldd	r24, Y+32	; 0x20
     99a:	99 a1       	ldd	r25, Y+33	; 0x21
     99c:	9b 8f       	std	Y+27, r25	; 0x1b
     99e:	8a 8f       	std	Y+26, r24	; 0x1a
							to = playerOne.turns[i].x;
     9a0:	8a 89       	ldd	r24, Y+18	; 0x12
     9a2:	9b 89       	ldd	r25, Y+19	; 0x13
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	83 56       	subi	r24, 0x63	; 99
     9ae:	9d 4f       	sbci	r25, 0xFD	; 253
     9b0:	fc 01       	movw	r30, r24
     9b2:	80 81       	ld	r24, Z
     9b4:	91 81       	ldd	r25, Z+1	; 0x01
     9b6:	9d 8f       	std	Y+29, r25	; 0x1d
     9b8:	8c 8f       	std	Y+28, r24	; 0x1c
						}

						for (int j = from; j <= to; j++) {
     9ba:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9bc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9be:	9f 8f       	std	Y+31, r25	; 0x1f
     9c0:	8e 8f       	std	Y+30, r24	; 0x1e
     9c2:	38 c0       	rjmp	.+112    	; 0xa34 <__stack+0x135>
							if (gameState[j][turn.y] == 2) { //Collision with player two !!
     9c4:	2a a1       	ldd	r18, Y+34	; 0x22
     9c6:	3b a1       	ldd	r19, Y+35	; 0x23
     9c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	ac 01       	movw	r20, r24
     9d2:	44 0f       	add	r20, r20
     9d4:	55 1f       	adc	r21, r21
     9d6:	44 0f       	add	r20, r20
     9d8:	55 1f       	adc	r21, r21
     9da:	84 0f       	add	r24, r20
     9dc:	95 1f       	adc	r25, r21
     9de:	82 0f       	add	r24, r18
     9e0:	93 1f       	adc	r25, r19
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	80 58       	subi	r24, 0x80	; 128
     9e8:	9e 4f       	sbci	r25, 0xFE	; 254
     9ea:	fc 01       	movw	r30, r24
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	02 97       	sbiw	r24, 0x02	; 2
     9f2:	19 f4       	brne	.+6      	; 0x9fa <__stack+0xfb>
								collision = 1;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	89 83       	std	Y+1, r24	; 0x01
     9f8:	18 c0       	rjmp	.+48     	; 0xa2a <__stack+0x12b>
							} else {
								gameState[j][turn.y] = 1;
     9fa:	2a a1       	ldd	r18, Y+34	; 0x22
     9fc:	3b a1       	ldd	r19, Y+35	; 0x23
     9fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     a00:	9f 8d       	ldd	r25, Y+31	; 0x1f
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	ac 01       	movw	r20, r24
     a08:	44 0f       	add	r20, r20
     a0a:	55 1f       	adc	r21, r21
     a0c:	44 0f       	add	r20, r20
     a0e:	55 1f       	adc	r21, r21
     a10:	84 0f       	add	r24, r20
     a12:	95 1f       	adc	r25, r21
     a14:	82 0f       	add	r24, r18
     a16:	93 1f       	adc	r25, r19
     a18:	88 0f       	add	r24, r24
     a1a:	99 1f       	adc	r25, r25
     a1c:	80 58       	subi	r24, 0x80	; 128
     a1e:	9e 4f       	sbci	r25, 0xFE	; 254
     a20:	21 e0       	ldi	r18, 0x01	; 1
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	fc 01       	movw	r30, r24
     a26:	31 83       	std	Z+1, r19	; 0x01
     a28:	20 83       	st	Z, r18
						} else {
							from = turn.x;
							to = playerOne.turns[i].x;
						}

						for (int j = from; j <= to; j++) {
     a2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     a2c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	9f 8f       	std	Y+31, r25	; 0x1f
     a32:	8e 8f       	std	Y+30, r24	; 0x1e
     a34:	2e 8d       	ldd	r18, Y+30	; 0x1e
     a36:	3f 8d       	ldd	r19, Y+31	; 0x1f
     a38:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a3a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     a3c:	82 17       	cp	r24, r18
     a3e:	93 07       	cpc	r25, r19
     a40:	0c f6       	brge	.-126    	; 0x9c4 <__stack+0xc5>
					}
				}
			} else {

				/* Draw player one and check collisions with player two */
				for (int i = 0; i < playerOne.turnsCount; i++) {
     a42:	8a 89       	ldd	r24, Y+18	; 0x12
     a44:	9b 89       	ldd	r25, Y+19	; 0x13
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	9b 8b       	std	Y+19, r25	; 0x13
     a4a:	8a 8b       	std	Y+18, r24	; 0x12
     a4c:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <playerOne+0x41>
     a50:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <playerOne+0x42>
     a54:	8a 89       	ldd	r24, Y+18	; 0x12
     a56:	9b 89       	ldd	r25, Y+19	; 0x13
     a58:	82 17       	cp	r24, r18
     a5a:	93 07       	cpc	r25, r19
     a5c:	0c f4       	brge	.+2      	; 0xa60 <__stack+0x161>
     a5e:	c2 ce       	rjmp	.-636    	; 0x7e4 <game_processing+0x2a8>
					}
				}
			}

			/* Move players in their current direction */
			move_player(&playerOne);
     a60:	88 e9       	ldi	r24, 0x98	; 152
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	0e 94 1d 02 	call	0x43a	; 0x43a <move_player>
			//move_player(playerTwo);

			vTaskDelay(1000);
     a68:	88 ee       	ldi	r24, 0xE8	; 232
     a6a:	93 e0       	ldi	r25, 0x03	; 3
     a6c:	0e 94 49 19 	call	0x3292	; 0x3292 <vTaskDelay>

	bool collision = false;

	for(;;) {

		while(!collision) {
     a70:	99 81       	ldd	r25, Y+1	; 0x01
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	89 27       	eor	r24, r25
     a76:	88 23       	and	r24, r24
     a78:	09 f0       	breq	.+2      	; 0xa7c <__stack+0x17d>
     a7a:	6e cd       	rjmp	.-1316   	; 0x558 <game_processing+0x1c>
			//move_player(playerTwo);

			vTaskDelay(1000);
		}

		die();
     a7c:	0e 94 10 02 	call	0x420	; 0x420 <die>
	}
     a80:	6a cd       	rjmp	.-1324   	; 0x556 <game_processing+0x1a>

00000a82 <read_joystick>:
	vTaskDelete(NULL);
}


void read_joystick(void *pvParameters)
{
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	2c 97       	sbiw	r28, 0x0c	; 12
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	9c 87       	std	Y+12, r25	; 0x0c
     a98:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t left;
	uint8_t up;
	uint8_t down;
	uint8_t pushed;
	Direction direction;
	uint8_t debounceCounter = 0;
     a9a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t debounceThreshold = 15;
     a9c:	8f e0       	ldi	r24, 0x0F	; 15
     a9e:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t turnPlayer = 0;
     aa0:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t isPressing = 0;
     aa2:	1c 82       	std	Y+4, r1	; 0x04

	for (;;) {
		/*Constantly checking joystick state*/
		right	= !(PINC >> 1 & 0x01);
     aa4:	86 e2       	ldi	r24, 0x26	; 38
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	fc 01       	movw	r30, r24
     aaa:	80 81       	ld	r24, Z
     aac:	86 95       	lsr	r24
     aae:	88 2f       	mov	r24, r24
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	81 70       	andi	r24, 0x01	; 1
     ab4:	99 27       	eor	r25, r25
     ab6:	21 e0       	ldi	r18, 0x01	; 1
     ab8:	89 2b       	or	r24, r25
     aba:	09 f0       	breq	.+2      	; 0xabe <read_joystick+0x3c>
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	2e 83       	std	Y+6, r18	; 0x06
		left	= !(PINC >> 7 & 0x01);
     ac0:	86 e2       	ldi	r24, 0x26	; 38
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	fc 01       	movw	r30, r24
     ac6:	80 81       	ld	r24, Z
     ac8:	88 1f       	adc	r24, r24
     aca:	88 27       	eor	r24, r24
     acc:	88 1f       	adc	r24, r24
     ace:	88 2f       	mov	r24, r24
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	81 70       	andi	r24, 0x01	; 1
     ad4:	99 27       	eor	r25, r25
     ad6:	21 e0       	ldi	r18, 0x01	; 1
     ad8:	89 2b       	or	r24, r25
     ada:	09 f0       	breq	.+2      	; 0xade <read_joystick+0x5c>
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	2f 83       	std	Y+7, r18	; 0x07
		up		= !(PINC >> 6 & 0x01);
     ae0:	86 e2       	ldi	r24, 0x26	; 38
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	fc 01       	movw	r30, r24
     ae6:	80 81       	ld	r24, Z
     ae8:	82 95       	swap	r24
     aea:	86 95       	lsr	r24
     aec:	86 95       	lsr	r24
     aee:	83 70       	andi	r24, 0x03	; 3
     af0:	88 2f       	mov	r24, r24
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	81 70       	andi	r24, 0x01	; 1
     af6:	99 27       	eor	r25, r25
     af8:	21 e0       	ldi	r18, 0x01	; 1
     afa:	89 2b       	or	r24, r25
     afc:	09 f0       	breq	.+2      	; 0xb00 <read_joystick+0x7e>
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	28 87       	std	Y+8, r18	; 0x08
		down	= !(PINC >> 0 & 0x01);
     b02:	86 e2       	ldi	r24, 0x26	; 38
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	fc 01       	movw	r30, r24
     b08:	80 81       	ld	r24, Z
     b0a:	88 2f       	mov	r24, r24
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	81 70       	andi	r24, 0x01	; 1
     b10:	99 27       	eor	r25, r25
     b12:	21 e0       	ldi	r18, 0x01	; 1
     b14:	89 2b       	or	r24, r25
     b16:	09 f0       	breq	.+2      	; 0xb1a <read_joystick+0x98>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	29 87       	std	Y+9, r18	; 0x09
		pushed  = !(PIND >> 3 & 0x01);
     b1c:	89 e2       	ldi	r24, 0x29	; 41
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	fc 01       	movw	r30, r24
     b22:	80 81       	ld	r24, Z
     b24:	86 95       	lsr	r24
     b26:	86 95       	lsr	r24
     b28:	86 95       	lsr	r24
     b2a:	88 2f       	mov	r24, r24
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	81 70       	andi	r24, 0x01	; 1
     b30:	99 27       	eor	r25, r25
     b32:	21 e0       	ldi	r18, 0x01	; 1
     b34:	89 2b       	or	r24, r25
     b36:	09 f0       	breq	.+2      	; 0xb3a <read_joystick+0xb8>
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	2a 87       	std	Y+10, r18	; 0x0a

		if (down){
     b3c:	89 85       	ldd	r24, Y+9	; 0x09
     b3e:	88 23       	and	r24, r24
     b40:	39 f0       	breq	.+14     	; 0xb50 <read_joystick+0xce>
			direction = DOWN;
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	8c 83       	std	Y+4, r24	; 0x04
     b4e:	23 c0       	rjmp	.+70     	; 0xb96 <read_joystick+0x114>
		} else if (right) {
     b50:	8e 81       	ldd	r24, Y+6	; 0x06
     b52:	88 23       	and	r24, r24
     b54:	39 f0       	breq	.+14     	; 0xb64 <read_joystick+0xe2>
			direction = RIGHT;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	8c 83       	std	Y+4, r24	; 0x04
     b62:	19 c0       	rjmp	.+50     	; 0xb96 <read_joystick+0x114>
		} else if (up) {
     b64:	88 85       	ldd	r24, Y+8	; 0x08
     b66:	88 23       	and	r24, r24
     b68:	39 f0       	breq	.+14     	; 0xb78 <read_joystick+0xf6>
			direction = UP;
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	8c 83       	std	Y+4, r24	; 0x04
     b76:	0f c0       	rjmp	.+30     	; 0xb96 <read_joystick+0x114>
		} else if (left) {
     b78:	8f 81       	ldd	r24, Y+7	; 0x07
     b7a:	88 23       	and	r24, r24
     b7c:	31 f0       	breq	.+12     	; 0xb8a <read_joystick+0x108>
			direction = LEFT;
     b7e:	19 82       	std	Y+1, r1	; 0x01
			turnPlayer = 1;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	8c 83       	std	Y+4, r24	; 0x04
     b88:	06 c0       	rjmp	.+12     	; 0xb96 <read_joystick+0x114>
		} else if (pushed) {
     b8a:	8a 85       	ldd	r24, Y+10	; 0x0a
     b8c:	88 23       	and	r24, r24
     b8e:	11 f0       	breq	.+4      	; 0xb94 <read_joystick+0x112>
			//TODO: pause game
			debounceCounter = 0;
     b90:	1a 82       	std	Y+2, r1	; 0x02
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <read_joystick+0x114>
		} else {
			isPressing = 0;
     b94:	1c 82       	std	Y+4, r1	; 0x04
			//debounceCounter = 0;
		}

		if (turnPlayer && !isPressing && (++debounceCounter >= debounceThreshold)) {
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	88 23       	and	r24, r24
     b9a:	c9 f0       	breq	.+50     	; 0xbce <read_joystick+0x14c>
     b9c:	8c 81       	ldd	r24, Y+4	; 0x04
     b9e:	88 23       	and	r24, r24
     ba0:	b1 f4       	brne	.+44     	; 0xbce <read_joystick+0x14c>
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	8f 5f       	subi	r24, 0xFF	; 255
     ba6:	8a 83       	std	Y+2, r24	; 0x02
     ba8:	9a 81       	ldd	r25, Y+2	; 0x02
     baa:	8d 81       	ldd	r24, Y+5	; 0x05
     bac:	98 17       	cp	r25, r24
     bae:	78 f0       	brcs	.+30     	; 0xbce <read_joystick+0x14c>
			com_send_bytes("move", 4);
     bb0:	64 e0       	ldi	r22, 0x04	; 4
     bb2:	8c e1       	ldi	r24, 0x1C	; 28
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	0e 94 5f 09 	call	0x12be	; 0x12be <com_send_bytes>
			turn_player(&playerOne, direction);
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	88 2f       	mov	r24, r24
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	bc 01       	movw	r22, r24
     bc2:	88 e9       	ldi	r24, 0x98	; 152
     bc4:	92 e0       	ldi	r25, 0x02	; 2
     bc6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <turn_player>
			turnPlayer = 0;
     bca:	1b 82       	std	Y+3, r1	; 0x03
			debounceCounter = 0;
     bcc:	1a 82       	std	Y+2, r1	; 0x02
		}

		vTaskDelay(20);
     bce:	84 e1       	ldi	r24, 0x14	; 20
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 49 19 	call	0x3292	; 0x3292 <vTaskDelay>
	}
     bd6:	66 cf       	rjmp	.-308    	; 0xaa4 <read_joystick+0x22>

00000bd8 <turn_player>:



/* Changes the player's direction: will be applied in game_processing() */
void turn_player(Player *player, Direction direction)
{
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	28 97       	sbiw	r28, 0x08	; 8
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	9f 83       	std	Y+7, r25	; 0x07
     bee:	8e 83       	std	Y+6, r24	; 0x06
     bf0:	68 87       	std	Y+8, r22	; 0x08
	int newX, newY;
	uint8_t createTurn = false;
     bf2:	1d 82       	std	Y+5, r1	; 0x05

	if ((*player).direction != direction) { //New turn !
     bf4:	8e 81       	ldd	r24, Y+6	; 0x06
     bf6:	9f 81       	ldd	r25, Y+7	; 0x07
     bf8:	fc 01       	movw	r30, r24
     bfa:	94 81       	ldd	r25, Z+4	; 0x04
     bfc:	88 85       	ldd	r24, Y+8	; 0x08
     bfe:	98 17       	cp	r25, r24
     c00:	99 f0       	breq	.+38     	; 0xc28 <turn_player+0x50>
		(*player).turnsCount++;
     c02:	8e 81       	ldd	r24, Y+6	; 0x06
     c04:	9f 81       	ldd	r25, Y+7	; 0x07
     c06:	8f 5b       	subi	r24, 0xBF	; 191
     c08:	9f 4f       	sbci	r25, 0xFF	; 255
     c0a:	fc 01       	movw	r30, r24
     c0c:	80 81       	ld	r24, Z
     c0e:	91 81       	ldd	r25, Z+1	; 0x01
     c10:	9c 01       	movw	r18, r24
     c12:	2f 5f       	subi	r18, 0xFF	; 255
     c14:	3f 4f       	sbci	r19, 0xFF	; 255
     c16:	8e 81       	ldd	r24, Y+6	; 0x06
     c18:	9f 81       	ldd	r25, Y+7	; 0x07
     c1a:	8f 5b       	subi	r24, 0xBF	; 191
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	fc 01       	movw	r30, r24
     c20:	31 83       	std	Z+1, r19	; 0x01
     c22:	20 83       	st	Z, r18
		createTurn = true;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	8d 83       	std	Y+5, r24	; 0x05
	}

	switch (direction) {
     c28:	88 85       	ldd	r24, Y+8	; 0x08
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	81 30       	cpi	r24, 0x01	; 1
     c30:	91 05       	cpc	r25, r1
     c32:	09 f4       	brne	.+2      	; 0xc36 <turn_player+0x5e>
     c34:	72 c0       	rjmp	.+228    	; 0xd1a <turn_player+0x142>
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	91 05       	cpc	r25, r1
     c3a:	24 f4       	brge	.+8      	; 0xc44 <turn_player+0x6c>
     c3c:	89 2b       	or	r24, r25
     c3e:	09 f4       	brne	.+2      	; 0xc42 <turn_player+0x6a>
     c40:	4b c0       	rjmp	.+150    	; 0xcd8 <turn_player+0x100>
     c42:	93 c0       	rjmp	.+294    	; 0xd6a <turn_player+0x192>
     c44:	82 30       	cpi	r24, 0x02	; 2
     c46:	91 05       	cpc	r25, r1
     c48:	19 f0       	breq	.+6      	; 0xc50 <turn_player+0x78>
     c4a:	03 97       	sbiw	r24, 0x03	; 3
     c4c:	19 f1       	breq	.+70     	; 0xc94 <turn_player+0xbc>
     c4e:	8d c0       	rjmp	.+282    	; 0xd6a <turn_player+0x192>
		case UP:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
     c50:	8e 81       	ldd	r24, Y+6	; 0x06
     c52:	9f 81       	ldd	r25, Y+7	; 0x07
     c54:	fc 01       	movw	r30, r24
     c56:	84 81       	ldd	r24, Z+4	; 0x04
     c58:	88 23       	and	r24, r24
     c5a:	39 f0       	breq	.+14     	; 0xc6a <turn_player+0x92>
     c5c:	8e 81       	ldd	r24, Y+6	; 0x06
     c5e:	9f 81       	ldd	r25, Y+7	; 0x07
     c60:	fc 01       	movw	r30, r24
     c62:	84 81       	ldd	r24, Z+4	; 0x04
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	09 f0       	breq	.+2      	; 0xc6a <turn_player+0x92>
     c68:	79 c0       	rjmp	.+242    	; 0xd5c <turn_player+0x184>
				(*player).direction = direction;
     c6a:	8e 81       	ldd	r24, Y+6	; 0x06
     c6c:	9f 81       	ldd	r25, Y+7	; 0x07
     c6e:	28 85       	ldd	r18, Y+8	; 0x08
     c70:	fc 01       	movw	r30, r24
     c72:	24 83       	std	Z+4, r18	; 0x04
				newY = (*player).y - 1;
     c74:	8e 81       	ldd	r24, Y+6	; 0x06
     c76:	9f 81       	ldd	r25, Y+7	; 0x07
     c78:	fc 01       	movw	r30, r24
     c7a:	82 81       	ldd	r24, Z+2	; 0x02
     c7c:	93 81       	ldd	r25, Z+3	; 0x03
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	9c 83       	std	Y+4, r25	; 0x04
     c82:	8b 83       	std	Y+3, r24	; 0x03
				newX = (*player).x;
     c84:	8e 81       	ldd	r24, Y+6	; 0x06
     c86:	9f 81       	ldd	r25, Y+7	; 0x07
     c88:	fc 01       	movw	r30, r24
     c8a:	80 81       	ld	r24, Z
     c8c:	91 81       	ldd	r25, Z+1	; 0x01
     c8e:	9a 83       	std	Y+2, r25	; 0x02
     c90:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     c92:	64 c0       	rjmp	.+200    	; 0xd5c <turn_player+0x184>
		case DOWN:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
     c94:	8e 81       	ldd	r24, Y+6	; 0x06
     c96:	9f 81       	ldd	r25, Y+7	; 0x07
     c98:	fc 01       	movw	r30, r24
     c9a:	84 81       	ldd	r24, Z+4	; 0x04
     c9c:	88 23       	and	r24, r24
     c9e:	39 f0       	breq	.+14     	; 0xcae <turn_player+0xd6>
     ca0:	8e 81       	ldd	r24, Y+6	; 0x06
     ca2:	9f 81       	ldd	r25, Y+7	; 0x07
     ca4:	fc 01       	movw	r30, r24
     ca6:	84 81       	ldd	r24, Z+4	; 0x04
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	09 f0       	breq	.+2      	; 0xcae <turn_player+0xd6>
     cac:	59 c0       	rjmp	.+178    	; 0xd60 <turn_player+0x188>
				(*player).direction = direction;
     cae:	8e 81       	ldd	r24, Y+6	; 0x06
     cb0:	9f 81       	ldd	r25, Y+7	; 0x07
     cb2:	28 85       	ldd	r18, Y+8	; 0x08
     cb4:	fc 01       	movw	r30, r24
     cb6:	24 83       	std	Z+4, r18	; 0x04
				newY = (*player).y + 1;
     cb8:	8e 81       	ldd	r24, Y+6	; 0x06
     cba:	9f 81       	ldd	r25, Y+7	; 0x07
     cbc:	fc 01       	movw	r30, r24
     cbe:	82 81       	ldd	r24, Z+2	; 0x02
     cc0:	93 81       	ldd	r25, Z+3	; 0x03
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	9c 83       	std	Y+4, r25	; 0x04
     cc6:	8b 83       	std	Y+3, r24	; 0x03
				newX = (*player).x;
     cc8:	8e 81       	ldd	r24, Y+6	; 0x06
     cca:	9f 81       	ldd	r25, Y+7	; 0x07
     ccc:	fc 01       	movw	r30, r24
     cce:	80 81       	ld	r24, Z
     cd0:	91 81       	ldd	r25, Z+1	; 0x01
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     cd6:	44 c0       	rjmp	.+136    	; 0xd60 <turn_player+0x188>
		case LEFT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
     cd8:	8e 81       	ldd	r24, Y+6	; 0x06
     cda:	9f 81       	ldd	r25, Y+7	; 0x07
     cdc:	fc 01       	movw	r30, r24
     cde:	84 81       	ldd	r24, Z+4	; 0x04
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	31 f0       	breq	.+12     	; 0xcf0 <turn_player+0x118>
     ce4:	8e 81       	ldd	r24, Y+6	; 0x06
     ce6:	9f 81       	ldd	r25, Y+7	; 0x07
     ce8:	fc 01       	movw	r30, r24
     cea:	84 81       	ldd	r24, Z+4	; 0x04
     cec:	83 30       	cpi	r24, 0x03	; 3
     cee:	d1 f5       	brne	.+116    	; 0xd64 <turn_player+0x18c>
				(*player).direction = direction;
     cf0:	8e 81       	ldd	r24, Y+6	; 0x06
     cf2:	9f 81       	ldd	r25, Y+7	; 0x07
     cf4:	28 85       	ldd	r18, Y+8	; 0x08
     cf6:	fc 01       	movw	r30, r24
     cf8:	24 83       	std	Z+4, r18	; 0x04
				newX = (*player).x - 1;
     cfa:	8e 81       	ldd	r24, Y+6	; 0x06
     cfc:	9f 81       	ldd	r25, Y+7	; 0x07
     cfe:	fc 01       	movw	r30, r24
     d00:	80 81       	ld	r24, Z
     d02:	91 81       	ldd	r25, Z+1	; 0x01
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	9a 83       	std	Y+2, r25	; 0x02
     d08:	89 83       	std	Y+1, r24	; 0x01
				newY = (*player).y;
     d0a:	8e 81       	ldd	r24, Y+6	; 0x06
     d0c:	9f 81       	ldd	r25, Y+7	; 0x07
     d0e:	fc 01       	movw	r30, r24
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	9c 83       	std	Y+4, r25	; 0x04
     d16:	8b 83       	std	Y+3, r24	; 0x03
			}
			break;
     d18:	25 c0       	rjmp	.+74     	; 0xd64 <turn_player+0x18c>
		case RIGHT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
     d1a:	8e 81       	ldd	r24, Y+6	; 0x06
     d1c:	9f 81       	ldd	r25, Y+7	; 0x07
     d1e:	fc 01       	movw	r30, r24
     d20:	84 81       	ldd	r24, Z+4	; 0x04
     d22:	82 30       	cpi	r24, 0x02	; 2
     d24:	31 f0       	breq	.+12     	; 0xd32 <turn_player+0x15a>
     d26:	8e 81       	ldd	r24, Y+6	; 0x06
     d28:	9f 81       	ldd	r25, Y+7	; 0x07
     d2a:	fc 01       	movw	r30, r24
     d2c:	84 81       	ldd	r24, Z+4	; 0x04
     d2e:	83 30       	cpi	r24, 0x03	; 3
     d30:	d9 f4       	brne	.+54     	; 0xd68 <turn_player+0x190>
				(*player).direction = direction;
     d32:	8e 81       	ldd	r24, Y+6	; 0x06
     d34:	9f 81       	ldd	r25, Y+7	; 0x07
     d36:	28 85       	ldd	r18, Y+8	; 0x08
     d38:	fc 01       	movw	r30, r24
     d3a:	24 83       	std	Z+4, r18	; 0x04
				newX = (*player).x + 1;
     d3c:	8e 81       	ldd	r24, Y+6	; 0x06
     d3e:	9f 81       	ldd	r25, Y+7	; 0x07
     d40:	fc 01       	movw	r30, r24
     d42:	80 81       	ld	r24, Z
     d44:	91 81       	ldd	r25, Z+1	; 0x01
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	9a 83       	std	Y+2, r25	; 0x02
     d4a:	89 83       	std	Y+1, r24	; 0x01
				newY = (*player).y;
     d4c:	8e 81       	ldd	r24, Y+6	; 0x06
     d4e:	9f 81       	ldd	r25, Y+7	; 0x07
     d50:	fc 01       	movw	r30, r24
     d52:	82 81       	ldd	r24, Z+2	; 0x02
     d54:	93 81       	ldd	r25, Z+3	; 0x03
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
			}
			break;
     d5a:	06 c0       	rjmp	.+12     	; 0xd68 <turn_player+0x190>
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
				(*player).direction = direction;
				newY = (*player).y - 1;
				newX = (*player).x;
			}
			break;
     d5c:	00 00       	nop
     d5e:	05 c0       	rjmp	.+10     	; 0xd6a <turn_player+0x192>
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
				(*player).direction = direction;
				newY = (*player).y + 1;
				newX = (*player).x;
			}
			break;
     d60:	00 00       	nop
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <turn_player+0x192>
			if ((*player).direction == UP || (*player).direction == DOWN) {
				(*player).direction = direction;
				newX = (*player).x - 1;
				newY = (*player).y;
			}
			break;
     d64:	00 00       	nop
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <turn_player+0x192>
			if ((*player).direction == UP || (*player).direction == DOWN) {
				(*player).direction = direction;
				newX = (*player).x + 1;
				newY = (*player).y;
			}
			break;
     d68:	00 00       	nop
	}
	
	if (createTurn && (*player).turnsCount < MAXTURNS && (*player).turns[(*player).turnsCount].x == -1) { //Free turn slot
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	88 23       	and	r24, r24
     d6e:	09 f4       	brne	.+2      	; 0xd72 <turn_player+0x19a>
     d70:	49 c0       	rjmp	.+146    	; 0xe04 <turn_player+0x22c>
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	8f 5b       	subi	r24, 0xBF	; 191
     d78:	9f 4f       	sbci	r25, 0xFF	; 255
     d7a:	fc 01       	movw	r30, r24
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	0e 97       	sbiw	r24, 0x0e	; 14
     d82:	0c f0       	brlt	.+2      	; 0xd86 <turn_player+0x1ae>
     d84:	3f c0       	rjmp	.+126    	; 0xe04 <turn_player+0x22c>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	8f 5b       	subi	r24, 0xBF	; 191
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	fc 01       	movw	r30, r24
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	2e 81       	ldd	r18, Y+6	; 0x06
     d96:	3f 81       	ldd	r19, Y+7	; 0x07
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	82 0f       	add	r24, r18
     da2:	93 1f       	adc	r25, r19
     da4:	05 96       	adiw	r24, 0x05	; 5
     da6:	fc 01       	movw	r30, r24
     da8:	80 81       	ld	r24, Z
     daa:	91 81       	ldd	r25, Z+1	; 0x01
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	51 f5       	brne	.+84     	; 0xe04 <turn_player+0x22c>
		(*player).turns[(*player).turnsCount].x = newX;
     db0:	8e 81       	ldd	r24, Y+6	; 0x06
     db2:	9f 81       	ldd	r25, Y+7	; 0x07
     db4:	8f 5b       	subi	r24, 0xBF	; 191
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	fc 01       	movw	r30, r24
     dba:	80 81       	ld	r24, Z
     dbc:	91 81       	ldd	r25, Z+1	; 0x01
     dbe:	2e 81       	ldd	r18, Y+6	; 0x06
     dc0:	3f 81       	ldd	r19, Y+7	; 0x07
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	82 0f       	add	r24, r18
     dcc:	93 1f       	adc	r25, r19
     dce:	05 96       	adiw	r24, 0x05	; 5
     dd0:	29 81       	ldd	r18, Y+1	; 0x01
     dd2:	3a 81       	ldd	r19, Y+2	; 0x02
     dd4:	fc 01       	movw	r30, r24
     dd6:	31 83       	std	Z+1, r19	; 0x01
     dd8:	20 83       	st	Z, r18
		(*player).turns[(*player).turnsCount].y = newY;
     dda:	8e 81       	ldd	r24, Y+6	; 0x06
     ddc:	9f 81       	ldd	r25, Y+7	; 0x07
     dde:	8f 5b       	subi	r24, 0xBF	; 191
     de0:	9f 4f       	sbci	r25, 0xFF	; 255
     de2:	fc 01       	movw	r30, r24
     de4:	80 81       	ld	r24, Z
     de6:	91 81       	ldd	r25, Z+1	; 0x01
     de8:	2e 81       	ldd	r18, Y+6	; 0x06
     dea:	3f 81       	ldd	r19, Y+7	; 0x07
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	82 0f       	add	r24, r18
     df6:	93 1f       	adc	r25, r19
     df8:	07 96       	adiw	r24, 0x07	; 7
     dfa:	2b 81       	ldd	r18, Y+3	; 0x03
     dfc:	3c 81       	ldd	r19, Y+4	; 0x04
     dfe:	fc 01       	movw	r30, r24
     e00:	31 83       	std	Z+1, r19	; 0x01
     e02:	20 83       	st	Z, r18
	} else if(createTurn) {
		//TODO
	}

}
     e04:	00 00       	nop
     e06:	28 96       	adiw	r28, 0x08	; 8
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <init_players>:

/* Initialize the players' positions and turns */
void init_players()
{
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <init_players+0x6>
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <init_players+0x8>
     e20:	00 d0       	rcall	.+0      	; 0xe22 <init_players+0xa>
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62

	for (int i = 0; i < MAXTURNS + 1; i++) { //MAXTURNS + 1 because turn[0] is the init position, not a turn
     e26:	1a 82       	std	Y+2, r1	; 0x02
     e28:	19 82       	std	Y+1, r1	; 0x01
     e2a:	39 c0       	rjmp	.+114    	; 0xe9e <init_players+0x86>
		playerOne.turns[i].x = -1;
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	83 56       	subi	r24, 0x63	; 99
     e3a:	9d 4f       	sbci	r25, 0xFD	; 253
     e3c:	2f ef       	ldi	r18, 0xFF	; 255
     e3e:	3f ef       	ldi	r19, 0xFF	; 255
     e40:	fc 01       	movw	r30, r24
     e42:	31 83       	std	Z+1, r19	; 0x01
     e44:	20 83       	st	Z, r18
		playerOne.turns[i].y = -1;
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	9a 81       	ldd	r25, Y+2	; 0x02
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	81 56       	subi	r24, 0x61	; 97
     e54:	9d 4f       	sbci	r25, 0xFD	; 253
     e56:	2f ef       	ldi	r18, 0xFF	; 255
     e58:	3f ef       	ldi	r19, 0xFF	; 255
     e5a:	fc 01       	movw	r30, r24
     e5c:	31 83       	std	Z+1, r19	; 0x01
     e5e:	20 83       	st	Z, r18
		playerTwo.turns[i].x = -1;
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	9a 81       	ldd	r25, Y+2	; 0x02
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	80 52       	subi	r24, 0x20	; 32
     e6e:	9d 4f       	sbci	r25, 0xFD	; 253
     e70:	2f ef       	ldi	r18, 0xFF	; 255
     e72:	3f ef       	ldi	r19, 0xFF	; 255
     e74:	fc 01       	movw	r30, r24
     e76:	31 83       	std	Z+1, r19	; 0x01
     e78:	20 83       	st	Z, r18
		playerTwo.turns[i].y = -1;
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	8e 51       	subi	r24, 0x1E	; 30
     e88:	9d 4f       	sbci	r25, 0xFD	; 253
     e8a:	2f ef       	ldi	r18, 0xFF	; 255
     e8c:	3f ef       	ldi	r19, 0xFF	; 255
     e8e:	fc 01       	movw	r30, r24
     e90:	31 83       	std	Z+1, r19	; 0x01
     e92:	20 83       	st	Z, r18

/* Initialize the players' positions and turns */
void init_players()
{

	for (int i = 0; i < MAXTURNS + 1; i++) { //MAXTURNS + 1 because turn[0] is the init position, not a turn
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	9a 81       	ldd	r25, Y+2	; 0x02
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	0f 97       	sbiw	r24, 0x0f	; 15
     ea4:	1c f2       	brlt	.-122    	; 0xe2c <init_players+0x14>
		playerOne.turns[i].y = -1;
		playerTwo.turns[i].x = -1;
		playerTwo.turns[i].y = -1;
	}

	playerOne.turnsCount = 0;
     ea6:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <playerOne+0x42>
     eaa:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <playerOne+0x41>
	playerTwo.turnsCount = 0;
     eae:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <playerTwo+0x42>
     eb2:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <playerTwo+0x41>

	playerOne.x = 0;
     eb6:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <playerOne+0x1>
     eba:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <playerOne>
	playerOne.y = 5;
     ebe:	85 e0       	ldi	r24, 0x05	; 5
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <playerOne+0x3>
     ec6:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <playerOne+0x2>
	playerOne.direction = RIGHT;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <playerOne+0x4>
	Turn turn0;
	turn0.x = 0;
     ed0:	1c 82       	std	Y+4, r1	; 0x04
     ed2:	1b 82       	std	Y+3, r1	; 0x03
	turn0.y = 5;
     ed4:	85 e0       	ldi	r24, 0x05	; 5
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9e 83       	std	Y+6, r25	; 0x06
     eda:	8d 83       	std	Y+5, r24	; 0x05
	playerOne.turns[0] = turn0;
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	9c 81       	ldd	r25, Y+4	; 0x04
     ee0:	ad 81       	ldd	r26, Y+5	; 0x05
     ee2:	be 81       	ldd	r27, Y+6	; 0x06
     ee4:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <playerOne+0x5>
     ee8:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <playerOne+0x6>
     eec:	a0 93 9f 02 	sts	0x029F, r26	; 0x80029f <playerOne+0x7>
     ef0:	b0 93 a0 02 	sts	0x02A0, r27	; 0x8002a0 <playerOne+0x8>

	playerTwo.x = 10;
     ef4:	8a e0       	ldi	r24, 0x0A	; 10
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <playerTwo+0x1>
     efc:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <playerTwo>
	playerTwo.y = 5;
     f00:	85 e0       	ldi	r24, 0x05	; 5
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <playerTwo+0x3>
     f08:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <playerTwo+0x2>
	playerTwo.direction = LEFT;
     f0c:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <playerTwo+0x4>
	turn0;
	turn0.x = 10;
     f10:	8a e0       	ldi	r24, 0x0A	; 10
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	9c 83       	std	Y+4, r25	; 0x04
     f16:	8b 83       	std	Y+3, r24	; 0x03
	turn0.y = 5;
     f18:	85 e0       	ldi	r24, 0x05	; 5
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9e 83       	std	Y+6, r25	; 0x06
     f1e:	8d 83       	std	Y+5, r24	; 0x05
	playerTwo.turns[0] = turn0;
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	9c 81       	ldd	r25, Y+4	; 0x04
     f24:	ad 81       	ldd	r26, Y+5	; 0x05
     f26:	be 81       	ldd	r27, Y+6	; 0x06
     f28:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <playerTwo+0x5>
     f2c:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <playerTwo+0x6>
     f30:	a0 93 e2 02 	sts	0x02E2, r26	; 0x8002e2 <playerTwo+0x7>
     f34:	b0 93 e3 02 	sts	0x02E3, r27	; 0x8002e3 <playerTwo+0x8>
}
     f38:	00 00       	nop
     f3a:	26 96       	adiw	r28, 0x06	; 6
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret

00000f4c <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	// Set SER to 1
	PORTD |= _BV(PORTD2);
     f54:	8b e2       	ldi	r24, 0x2B	; 43
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	2b e2       	ldi	r18, 0x2B	; 43
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	f9 01       	movw	r30, r18
     f5e:	20 81       	ld	r18, Z
     f60:	24 60       	ori	r18, 0x04	; 4
     f62:	fc 01       	movw	r30, r24
     f64:	20 83       	st	Z, r18
}
     f66:	00 00       	nop
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	08 95       	ret

00000f6e <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
	// one SCK pulse
	PORTD |= _BV(PORTD5);
     f76:	8b e2       	ldi	r24, 0x2B	; 43
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	2b e2       	ldi	r18, 0x2B	; 43
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	f9 01       	movw	r30, r18
     f80:	20 81       	ld	r18, Z
     f82:	20 62       	ori	r18, 0x20	; 32
     f84:	fc 01       	movw	r30, r24
     f86:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     f88:	8b e2       	ldi	r24, 0x2B	; 43
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	2b e2       	ldi	r18, 0x2B	; 43
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	f9 01       	movw	r30, r18
     f92:	20 81       	ld	r18, Z
     f94:	2f 7d       	andi	r18, 0xDF	; 223
     f96:	fc 01       	movw	r30, r24
     f98:	20 83       	st	Z, r18
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
     f9a:	8b e2       	ldi	r24, 0x2B	; 43
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	2b e2       	ldi	r18, 0x2B	; 43
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	f9 01       	movw	r30, r18
     fa4:	20 81       	ld	r18, Z
     fa6:	20 61       	ori	r18, 0x10	; 16
     fa8:	fc 01       	movw	r30, r24
     faa:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     fac:	8b e2       	ldi	r24, 0x2B	; 43
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	2b e2       	ldi	r18, 0x2B	; 43
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	f9 01       	movw	r30, r18
     fb6:	20 81       	ld	r18, Z
     fb8:	2f 7e       	andi	r18, 0xEF	; 239
     fba:	fc 01       	movw	r30, r24
     fbc:	20 83       	st	Z, r18
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
     fbe:	8b e2       	ldi	r24, 0x2B	; 43
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	2b e2       	ldi	r18, 0x2B	; 43
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	f9 01       	movw	r30, r18
     fc8:	20 81       	ld	r18, Z
     fca:	2b 7f       	andi	r18, 0xFB	; 251
     fcc:	fc 01       	movw	r30, r24
     fce:	20 83       	st	Z, r18
}
     fd0:	00 00       	nop
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	08 95       	ret

00000fd8 <load_col_value>:

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	00 d0       	rcall	.+0      	; 0xfde <load_col_value+0x6>
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	9a 83       	std	Y+2, r25	; 0x02
     fe4:	89 83       	std	Y+1, r24	; 0x01
	PORTA = ~(col_value & 0xFF);
     fe6:	82 e2       	ldi	r24, 0x22	; 34
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	29 81       	ldd	r18, Y+1	; 0x01
     fec:	20 95       	com	r18
     fee:	fc 01       	movw	r30, r24
     ff0:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     ff2:	85 e2       	ldi	r24, 0x25	; 37
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	25 e2       	ldi	r18, 0x25	; 37
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	f9 01       	movw	r30, r18
     ffc:	20 81       	ld	r18, Z
     ffe:	23 60       	ori	r18, 0x03	; 3
    1000:	fc 01       	movw	r30, r24
    1002:	20 83       	st	Z, r18
	PORTB &= ~((col_value >> 8) & 0x03);
    1004:	85 e2       	ldi	r24, 0x25	; 37
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	25 e2       	ldi	r18, 0x25	; 37
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	f9 01       	movw	r30, r18
    100e:	40 81       	ld	r20, Z
    1010:	29 81       	ldd	r18, Y+1	; 0x01
    1012:	3a 81       	ldd	r19, Y+2	; 0x02
    1014:	23 2f       	mov	r18, r19
    1016:	33 27       	eor	r19, r19
    1018:	23 70       	andi	r18, 0x03	; 3
    101a:	20 95       	com	r18
    101c:	24 23       	and	r18, r20
    101e:	fc 01       	movw	r30, r24
    1020:	20 83       	st	Z, r18
}
    1022:	00 00       	nop
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <handle_display>:

//-----------------------------------------
void handle_display(void)
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
	static uint8_t col = 0;
	
	if (col == 0)
    1036:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <col.2838>
    103a:	88 23       	and	r24, r24
    103c:	11 f4       	brne	.+4      	; 0x1042 <handle_display+0x14>
		prepare_shiftregister();
    103e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <prepare_shiftregister>
	
	load_col_value(frame_buffer[col]);
    1042:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <col.2838>
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	8c 59       	subi	r24, 0x9C	; 156
    1050:	9e 4f       	sbci	r25, 0xFE	; 254
    1052:	fc 01       	movw	r30, r24
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
    105c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	if (col++ > 13)
    1060:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <col.2838>
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	98 0f       	add	r25, r24
    1068:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <col.2838>
    106c:	8e 30       	cpi	r24, 0x0E	; 14
    106e:	10 f0       	brcs	.+4      	; 0x1074 <handle_display+0x46>
		col = 0;
    1070:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <col.2838>
}
    1074:	00 00       	nop
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	08 95       	ret

0000107c <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
	//
}
    1084:	00 00       	nop
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <main>:

//-----------------------------------------
int main(void)
{
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	00 d0       	rcall	.+0      	; 0x1098 <main+0xc>
    1098:	00 d0       	rcall	.+0      	; 0x109a <main+0xe>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
    109e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
    10a2:	8b e2       	ldi	r24, 0x2B	; 43
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	2b e2       	ldi	r18, 0x2B	; 43
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	f9 01       	movw	r30, r18
    10ac:	20 81       	ld	r18, Z
    10ae:	2f 7b       	andi	r18, 0xBF	; 191
    10b0:	fc 01       	movw	r30, r24
    10b2:	20 83       	st	Z, r18

	/* Semaphores creation */
	xGameStateSemaphore = xSemaphoreCreateMutex();
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	0e 94 87 13 	call	0x270e	; 0x270e <xQueueCreateMutex>
    10ba:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <xGameStateSemaphore+0x1>
    10be:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <xGameStateSemaphore>
	xPlayerOneSemaphore = xSemaphoreCreateMutex();
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	0e 94 87 13 	call	0x270e	; 0x270e <xQueueCreateMutex>
    10c8:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <xPlayerOneSemaphore+0x1>
    10cc:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <xPlayerOneSemaphore>
	xPlayerTwoSemaphore = xSemaphoreCreateMutex();
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	0e 94 87 13 	call	0x270e	; 0x270e <xQueueCreateMutex>
    10d6:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <xPlayerTwoSemaphore+0x1>
    10da:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <xPlayerTwoSemaphore>
	xGameOverSemaphore = xSemaphoreCreateMutex();
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	0e 94 87 13 	call	0x270e	; 0x270e <xQueueCreateMutex>
    10e4:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <xGameOverSemaphore+0x1>
    10e8:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <xGameOverSemaphore>

	init_players();
    10ec:	0e 94 0c 07 	call	0xe18	; 0xe18 <init_players>

	BaseType_t taskReadJoystick = xTaskCreate(read_joystick, (const char*)"Read joystick", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
    10f0:	e1 2c       	mov	r14, r1
    10f2:	f1 2c       	mov	r15, r1
    10f4:	00 e0       	ldi	r16, 0x00	; 0
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	45 e5       	ldi	r20, 0x55	; 85
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	61 e2       	ldi	r22, 0x21	; 33
    1100:	71 e0       	ldi	r23, 0x01	; 1
    1102:	81 e4       	ldi	r24, 0x41	; 65
    1104:	95 e0       	ldi	r25, 0x05	; 5
    1106:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <xTaskCreate>
    110a:	89 83       	std	Y+1, r24	; 0x01
	BaseType_t taskGameProcessing = xTaskCreate(game_processing, (const char*)"Game processing", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
    110c:	e1 2c       	mov	r14, r1
    110e:	f1 2c       	mov	r15, r1
    1110:	00 e0       	ldi	r16, 0x00	; 0
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	45 e5       	ldi	r20, 0x55	; 85
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	6f e2       	ldi	r22, 0x2F	; 47
    111c:	71 e0       	ldi	r23, 0x01	; 1
    111e:	8e e9       	ldi	r24, 0x9E	; 158
    1120:	92 e0       	ldi	r25, 0x02	; 2
    1122:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <xTaskCreate>
    1126:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t taskMakeFrame = xTaskCreate(make_frame, (const char*)"Make frame", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL );
    1128:	e1 2c       	mov	r14, r1
    112a:	f1 2c       	mov	r15, r1
    112c:	00 e0       	ldi	r16, 0x00	; 0
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	45 e5       	ldi	r20, 0x55	; 85
    1134:	50 e0       	ldi	r21, 0x00	; 0
    1136:	6f e3       	ldi	r22, 0x3F	; 63
    1138:	71 e0       	ldi	r23, 0x01	; 1
    113a:	8f e6       	ldi	r24, 0x6F	; 111
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <xTaskCreate>
    1142:	8b 83       	std	Y+3, r24	; 0x03
	BaseType_t taskCommunicateSerial = xTaskCreate(communicate_serial, (const char*)"Communicate serial", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
    1144:	e1 2c       	mov	r14, r1
    1146:	f1 2c       	mov	r15, r1
    1148:	00 e0       	ldi	r16, 0x00	; 0
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	45 e5       	ldi	r20, 0x55	; 85
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	6a e4       	ldi	r22, 0x4A	; 74
    1154:	71 e0       	ldi	r23, 0x01	; 1
    1156:	85 ed       	ldi	r24, 0xD5	; 213
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <xTaskCreate>
    115e:	8c 83       	std	Y+4, r24	; 0x04


	// Start the display handler timer
	init_display_timer(handle_display);
    1160:	87 e1       	ldi	r24, 0x17	; 23
    1162:	98 e0       	ldi	r25, 0x08	; 8
    1164:	0e 94 f5 08 	call	0x11ea	; 0x11ea <init_display_timer>
	
	sei();
    1168:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
    116a:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <vTaskStartScheduler>
	
	//Should never reach here
	while (1) {}
    116e:	ff cf       	rjmp	.-2      	; 0x116e <main+0xe2>

00001170 <_com_call_back>:

// Pointer to application display handler
static display_callback_ptr_t cb_ptr = NULL;

// ----------------------------------------------------------------------------------------------------------------------
static void _com_call_back(serial_p _com_serial_instance, uint8_t serial_last_received_byte) {
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	00 d0       	rcall	.+0      	; 0x1176 <_com_call_back+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <_com_call_back+0x8>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	9b 83       	std	Y+3, r25	; 0x03
    117e:	8a 83       	std	Y+2, r24	; 0x02
    1180:	6c 83       	std	Y+4, r22	; 0x04
	if (_x_rx_com_queue) {
    1182:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <_x_rx_com_queue>
    1186:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <_x_rx_com_queue+0x1>
    118a:	89 2b       	or	r24, r25
    118c:	99 f0       	breq	.+38     	; 0x11b4 <_com_call_back+0x44>
		signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
    118e:	19 82       	std	Y+1, r1	; 0x01

		xQueueSendFromISR( _x_rx_com_queue, &serial_last_received_byte, &xHigherPriorityTaskWoken );
    1190:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <_x_rx_com_queue>
    1194:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <_x_rx_com_queue+0x1>
    1198:	be 01       	movw	r22, r28
    119a:	6c 5f       	subi	r22, 0xFC	; 252
    119c:	7f 4f       	sbci	r23, 0xFF	; 255
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	ae 01       	movw	r20, r28
    11a2:	4f 5f       	subi	r20, 0xFF	; 255
    11a4:	5f 4f       	sbci	r21, 0xFF	; 255
    11a6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <xQueueGenericSendFromISR>

		if( xHigherPriorityTaskWoken != pdFALSE )
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	88 23       	and	r24, r24
    11ae:	11 f0       	breq	.+4      	; 0x11b4 <_com_call_back+0x44>
		{
			taskYIELD();
    11b0:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vPortYield>
		}
	}
}
    11b4:	00 00       	nop
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

000011c4 <init_com>:

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <init_com+0x6>
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
	_x_rx_com_queue = x_rx_queue;
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <_x_rx_com_queue+0x1>
    11da:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <_x_rx_com_queue>
}
    11de:	00 00       	nop
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	08 95       	ret

000011ea <init_display_timer>:

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <init_display_timer+0x6>
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	9a 83       	std	Y+2, r25	; 0x02
    11f6:	89 83       	std	Y+1, r24	; 0x01
	cb_ptr = cb;
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <cb_ptr+0x1>
    1200:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
    1204:	87 e4       	ldi	r24, 0x47	; 71
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	2a e0       	ldi	r18, 0x0A	; 10
    120a:	fc 01       	movw	r30, r24
    120c:	20 83       	st	Z, r18
	TCCR0A |= _BV(WGM01); // Mode 2
    120e:	84 e4       	ldi	r24, 0x44	; 68
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	24 e4       	ldi	r18, 0x44	; 68
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	f9 01       	movw	r30, r18
    1218:	20 81       	ld	r18, Z
    121a:	22 60       	ori	r18, 0x02	; 2
    121c:	fc 01       	movw	r30, r24
    121e:	20 83       	st	Z, r18
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
    1220:	8e e6       	ldi	r24, 0x6E	; 110
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	2e e6       	ldi	r18, 0x6E	; 110
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	f9 01       	movw	r30, r18
    122a:	20 81       	ld	r18, Z
    122c:	22 60       	ori	r18, 0x02	; 2
    122e:	fc 01       	movw	r30, r24
    1230:	20 83       	st	Z, r18
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
    1232:	85 e4       	ldi	r24, 0x45	; 69
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	25 e4       	ldi	r18, 0x45	; 69
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	f9 01       	movw	r30, r18
    123c:	20 81       	ld	r18, Z
    123e:	25 60       	ori	r18, 0x05	; 5
    1240:	fc 01       	movw	r30, r24
    1242:	20 83       	st	Z, r18
}
    1244:	00 00       	nop
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	08 95       	ret

00001250 <__vector_16>:

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
    1250:	1f 92       	push	r1
    1252:	0f 92       	push	r0
    1254:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1258:	0f 92       	push	r0
    125a:	11 24       	eor	r1, r1
    125c:	2f 93       	push	r18
    125e:	3f 93       	push	r19
    1260:	4f 93       	push	r20
    1262:	5f 93       	push	r21
    1264:	6f 93       	push	r22
    1266:	7f 93       	push	r23
    1268:	8f 93       	push	r24
    126a:	9f 93       	push	r25
    126c:	af 93       	push	r26
    126e:	bf 93       	push	r27
    1270:	ef 93       	push	r30
    1272:	ff 93       	push	r31
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
	if (cb_ptr)
    127c:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <cb_ptr>
    1280:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <cb_ptr+0x1>
    1284:	89 2b       	or	r24, r25
    1286:	31 f0       	breq	.+12     	; 0x1294 <__vector_16+0x44>
	{
		cb_ptr();
    1288:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <cb_ptr>
    128c:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <cb_ptr+0x1>
    1290:	fc 01       	movw	r30, r24
    1292:	09 95       	icall
	}
}
    1294:	00 00       	nop
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	ff 91       	pop	r31
    129c:	ef 91       	pop	r30
    129e:	bf 91       	pop	r27
    12a0:	af 91       	pop	r26
    12a2:	9f 91       	pop	r25
    12a4:	8f 91       	pop	r24
    12a6:	7f 91       	pop	r23
    12a8:	6f 91       	pop	r22
    12aa:	5f 91       	pop	r21
    12ac:	4f 91       	pop	r20
    12ae:	3f 91       	pop	r19
    12b0:	2f 91       	pop	r18
    12b2:	0f 90       	pop	r0
    12b4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    12b8:	0f 90       	pop	r0
    12ba:	1f 90       	pop	r1
    12bc:	18 95       	reti

000012be <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <com_send_bytes+0x6>
    12c4:	1f 92       	push	r1
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	6b 83       	std	Y+3, r22	; 0x03
	serial_send_bytes(_com_serial_instance, bytes, len);
    12d0:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <_com_serial_instance>
    12d4:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <_com_serial_instance+0x1>
    12d8:	29 81       	ldd	r18, Y+1	; 0x01
    12da:	3a 81       	ldd	r19, Y+2	; 0x02
    12dc:	4b 81       	ldd	r20, Y+3	; 0x03
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 94 73 10 	call	0x20e6	; 0x20e6 <serial_send_bytes>
}
    12e4:	00 00       	nop
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	08 95       	ret

000012f2 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
    12f2:	8f 92       	push	r8
    12f4:	9f 92       	push	r9
    12f6:	af 92       	push	r10
    12f8:	bf 92       	push	r11
    12fa:	cf 92       	push	r12
    12fc:	df 92       	push	r13
    12fe:	ef 92       	push	r14
    1300:	0f 93       	push	r16
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
    130a:	8e e2       	ldi	r24, 0x2E	; 46
    130c:	93 e0       	ldi	r25, 0x03	; 3
    130e:	0e 94 31 0a 	call	0x1462	; 0x1462 <buffer_init>
	buffer_init(&_com_tx_buffer);
    1312:	81 e5       	ldi	r24, 0x51	; 81
    1314:	93 e0       	ldi	r25, 0x03	; 3
    1316:	0e 94 31 0a 	call	0x1462	; 0x1462 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
    131a:	0f 2e       	mov	r0, r31
    131c:	f8 eb       	ldi	r31, 0xB8	; 184
    131e:	8f 2e       	mov	r8, r31
    1320:	f8 e0       	ldi	r31, 0x08	; 8
    1322:	9f 2e       	mov	r9, r31
    1324:	f0 2d       	mov	r31, r0
    1326:	0f 2e       	mov	r0, r31
    1328:	f1 e5       	ldi	r31, 0x51	; 81
    132a:	af 2e       	mov	r10, r31
    132c:	f3 e0       	ldi	r31, 0x03	; 3
    132e:	bf 2e       	mov	r11, r31
    1330:	f0 2d       	mov	r31, r0
    1332:	0f 2e       	mov	r0, r31
    1334:	fe e2       	ldi	r31, 0x2E	; 46
    1336:	cf 2e       	mov	r12, r31
    1338:	f3 e0       	ldi	r31, 0x03	; 3
    133a:	df 2e       	mov	r13, r31
    133c:	f0 2d       	mov	r31, r0
    133e:	e1 2c       	mov	r14, r1
    1340:	00 e0       	ldi	r16, 0x00	; 0
    1342:	23 e0       	ldi	r18, 0x03	; 3
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	52 ec       	ldi	r21, 0xC2	; 194
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <serial_new_instance>
    1352:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <_com_serial_instance+0x1>
    1356:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
    135a:	88 e2       	ldi	r24, 0x28	; 40
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	28 e2       	ldi	r18, 0x28	; 40
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	f9 01       	movw	r30, r18
    1364:	20 81       	ld	r18, Z
    1366:	23 6c       	ori	r18, 0xC3	; 195
    1368:	fc 01       	movw	r30, r24
    136a:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
    136c:	8b e2       	ldi	r24, 0x2B	; 43
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	2b e2       	ldi	r18, 0x2B	; 43
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	f9 01       	movw	r30, r18
    1376:	20 81       	ld	r18, Z
    1378:	28 60       	ori	r18, 0x08	; 8
    137a:	fc 01       	movw	r30, r24
    137c:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
    137e:	8a e2       	ldi	r24, 0x2A	; 42
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	2a e2       	ldi	r18, 0x2A	; 42
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	f9 01       	movw	r30, r18
    1388:	20 81       	ld	r18, Z
    138a:	24 67       	ori	r18, 0x74	; 116
    138c:	fc 01       	movw	r30, r24
    138e:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
    1390:	8b e2       	ldi	r24, 0x2B	; 43
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	2b e2       	ldi	r18, 0x2B	; 43
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	f9 01       	movw	r30, r18
    139a:	20 81       	ld	r18, Z
    139c:	20 64       	ori	r18, 0x40	; 64
    139e:	fc 01       	movw	r30, r24
    13a0:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
    13a2:	81 e2       	ldi	r24, 0x21	; 33
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	fc 01       	movw	r30, r24
    13a8:	80 81       	ld	r24, Z
    13aa:	81 e2       	ldi	r24, 0x21	; 33
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	2f ef       	ldi	r18, 0xFF	; 255
    13b0:	fc 01       	movw	r30, r24
    13b2:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
    13b4:	84 e2       	ldi	r24, 0x24	; 36
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	24 e2       	ldi	r18, 0x24	; 36
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	f9 01       	movw	r30, r18
    13be:	20 81       	ld	r18, Z
    13c0:	23 60       	ori	r18, 0x03	; 3
    13c2:	fc 01       	movw	r30, r24
    13c4:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
    13c6:	84 e2       	ldi	r24, 0x24	; 36
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	24 e2       	ldi	r18, 0x24	; 36
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	f9 01       	movw	r30, r18
    13d0:	20 81       	ld	r18, Z
    13d2:	2c 63       	ori	r18, 0x3C	; 60
    13d4:	fc 01       	movw	r30, r24
    13d6:	20 83       	st	Z, r18
}
    13d8:	00 00       	nop
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	0f 91       	pop	r16
    13e0:	ef 90       	pop	r14
    13e2:	df 90       	pop	r13
    13e4:	cf 90       	pop	r12
    13e6:	bf 90       	pop	r11
    13e8:	af 90       	pop	r10
    13ea:	9f 90       	pop	r9
    13ec:	8f 90       	pop	r8
    13ee:	08 95       	ret

000013f0 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	1f 92       	push	r1
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
    13fc:	85 e2       	ldi	r24, 0x25	; 37
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	25 e2       	ldi	r18, 0x25	; 37
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	f9 01       	movw	r30, r18
    1406:	20 81       	ld	r18, Z
    1408:	23 7c       	andi	r18, 0xC3	; 195
    140a:	fc 01       	movw	r30, r24
    140c:	20 83       	st	Z, r18
		PORTB |= task_no << 2;
    140e:	85 e2       	ldi	r24, 0x25	; 37
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	25 e2       	ldi	r18, 0x25	; 37
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	f9 01       	movw	r30, r18
    1418:	20 81       	ld	r18, Z
    141a:	42 2f       	mov	r20, r18
    141c:	29 81       	ldd	r18, Y+1	; 0x01
    141e:	22 2f       	mov	r18, r18
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	22 0f       	add	r18, r18
    1424:	33 1f       	adc	r19, r19
    1426:	22 0f       	add	r18, r18
    1428:	33 1f       	adc	r19, r19
    142a:	24 2b       	or	r18, r20
    142c:	fc 01       	movw	r30, r24
    142e:	20 83       	st	Z, r18
	}
    1430:	00 00       	nop
    1432:	0f 90       	pop	r0
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	08 95       	ret

0000143a <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	1f 92       	push	r1
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
    1446:	85 e2       	ldi	r24, 0x25	; 37
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	25 e2       	ldi	r18, 0x25	; 37
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	f9 01       	movw	r30, r18
    1450:	20 81       	ld	r18, Z
    1452:	23 7c       	andi	r18, 0xC3	; 195
    1454:	fc 01       	movw	r30, r24
    1456:	20 83       	st	Z, r18
	}
    1458:	00 00       	nop
    145a:	0f 90       	pop	r0
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	08 95       	ret

00001462 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	00 d0       	rcall	.+0      	; 0x1468 <buffer_init+0x6>
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	fc 01       	movw	r30, r24
    1476:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	fc 01       	movw	r30, r24
    147e:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	9a 81       	ldd	r25, Y+2	; 0x02
    1484:	fc 01       	movw	r30, r24
    1486:	12 a2       	std	Z+34, r1	; 0x22
}
    1488:	00 00       	nop
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	08 95       	ret

00001494 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	00 d0       	rcall	.+0      	; 0x149a <buffer_get_item+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <buffer_get_item+0x8>
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	9a 83       	std	Y+2, r25	; 0x02
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	7c 83       	std	Y+4, r23	; 0x04
    14a6:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	9a 81       	ldd	r25, Y+2	; 0x02
    14ac:	fc 01       	movw	r30, r24
    14ae:	82 a1       	ldd	r24, Z+34	; 0x22
    14b0:	88 23       	and	r24, r24
    14b2:	81 f1       	breq	.+96     	; 0x1514 <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	fc 01       	movw	r30, r24
    14ba:	81 a1       	ldd	r24, Z+33	; 0x21
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	29 81       	ldd	r18, Y+1	; 0x01
    14c2:	3a 81       	ldd	r19, Y+2	; 0x02
    14c4:	82 0f       	add	r24, r18
    14c6:	93 1f       	adc	r25, r19
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 81       	ld	r18, Z
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	fc 01       	movw	r30, r24
    14d2:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	fc 01       	movw	r30, r24
    14da:	81 a1       	ldd	r24, Z+33	; 0x21
    14dc:	88 2f       	mov	r24, r24
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	8f 71       	andi	r24, 0x1F	; 31
    14e4:	90 78       	andi	r25, 0x80	; 128
    14e6:	99 23       	and	r25, r25
    14e8:	24 f4       	brge	.+8      	; 0x14f2 <buffer_get_item+0x5e>
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	80 6e       	ori	r24, 0xE0	; 224
    14ee:	9f 6f       	ori	r25, 0xFF	; 255
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	28 2f       	mov	r18, r24
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	9a 81       	ldd	r25, Y+2	; 0x02
    14f8:	fc 01       	movw	r30, r24
    14fa:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	fc 01       	movw	r30, r24
    1502:	82 a1       	ldd	r24, Z+34	; 0x22
    1504:	2f ef       	ldi	r18, 0xFF	; 255
    1506:	28 0f       	add	r18, r24
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	fc 01       	movw	r30, r24
    150e:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
    1514:	81 e0       	ldi	r24, 0x01	; 1
}
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	08 95       	ret

00001524 <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	00 d0       	rcall	.+0      	; 0x152a <buffer_put_item+0x6>
    152a:	1f 92       	push	r1
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	9a 81       	ldd	r25, Y+2	; 0x02
    153a:	fc 01       	movw	r30, r24
    153c:	82 a1       	ldd	r24, Z+34	; 0x22
    153e:	80 32       	cpi	r24, 0x20	; 32
    1540:	68 f5       	brcc	.+90     	; 0x159c <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	fc 01       	movw	r30, r24
    1548:	80 a1       	ldd	r24, Z+32	; 0x20
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	29 81       	ldd	r18, Y+1	; 0x01
    1550:	3a 81       	ldd	r19, Y+2	; 0x02
    1552:	82 0f       	add	r24, r18
    1554:	93 1f       	adc	r25, r19
    1556:	2b 81       	ldd	r18, Y+3	; 0x03
    1558:	fc 01       	movw	r30, r24
    155a:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	9a 81       	ldd	r25, Y+2	; 0x02
    1560:	fc 01       	movw	r30, r24
    1562:	80 a1       	ldd	r24, Z+32	; 0x20
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	8f 71       	andi	r24, 0x1F	; 31
    156c:	90 78       	andi	r25, 0x80	; 128
    156e:	99 23       	and	r25, r25
    1570:	24 f4       	brge	.+8      	; 0x157a <buffer_put_item+0x56>
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	80 6e       	ori	r24, 0xE0	; 224
    1576:	9f 6f       	ori	r25, 0xFF	; 255
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	28 2f       	mov	r18, r24
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	fc 01       	movw	r30, r24
    1582:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	fc 01       	movw	r30, r24
    158a:	82 a1       	ldd	r24, Z+34	; 0x22
    158c:	21 e0       	ldi	r18, 0x01	; 1
    158e:	28 0f       	add	r18, r24
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	9a 81       	ldd	r25, Y+2	; 0x02
    1594:	fc 01       	movw	r30, r24
    1596:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	01 c0       	rjmp	.+2      	; 0x159e <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
    159c:	82 e0       	ldi	r24, 0x02	; 2
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	08 95       	ret

000015aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <vListInitialise+0x6>
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	9c 01       	movw	r18, r24
    15be:	2d 5f       	subi	r18, 0xFD	; 253
    15c0:	3f 4f       	sbci	r19, 0xFF	; 255
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	fc 01       	movw	r30, r24
    15c8:	32 83       	std	Z+2, r19	; 0x02
    15ca:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	2f ef       	ldi	r18, 0xFF	; 255
    15d2:	3f ef       	ldi	r19, 0xFF	; 255
    15d4:	fc 01       	movw	r30, r24
    15d6:	34 83       	std	Z+4, r19	; 0x04
    15d8:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	9c 01       	movw	r18, r24
    15e0:	2d 5f       	subi	r18, 0xFD	; 253
    15e2:	3f 4f       	sbci	r19, 0xFF	; 255
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	9a 81       	ldd	r25, Y+2	; 0x02
    15e8:	fc 01       	movw	r30, r24
    15ea:	36 83       	std	Z+6, r19	; 0x06
    15ec:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	9a 81       	ldd	r25, Y+2	; 0x02
    15f2:	9c 01       	movw	r18, r24
    15f4:	2d 5f       	subi	r18, 0xFD	; 253
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	9a 81       	ldd	r25, Y+2	; 0x02
    15fc:	fc 01       	movw	r30, r24
    15fe:	30 87       	std	Z+8, r19	; 0x08
    1600:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	9a 81       	ldd	r25, Y+2	; 0x02
    1606:	fc 01       	movw	r30, r24
    1608:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    160a:	00 00       	nop
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	08 95       	ret

00001616 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	00 d0       	rcall	.+0      	; 0x161c <vListInitialiseItem+0x6>
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	fc 01       	movw	r30, r24
    162a:	11 86       	std	Z+9, r1	; 0x09
    162c:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    162e:	00 00       	nop
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	08 95       	ret

0000163a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	00 d0       	rcall	.+0      	; 0x1640 <vListInsertEnd+0x6>
    1640:	00 d0       	rcall	.+0      	; 0x1642 <vListInsertEnd+0x8>
    1642:	00 d0       	rcall	.+0      	; 0x1644 <vListInsertEnd+0xa>
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	9c 83       	std	Y+4, r25	; 0x04
    164a:	8b 83       	std	Y+3, r24	; 0x03
    164c:	7e 83       	std	Y+6, r23	; 0x06
    164e:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	fc 01       	movw	r30, r24
    1656:	81 81       	ldd	r24, Z+1	; 0x01
    1658:	92 81       	ldd	r25, Z+2	; 0x02
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
    1660:	9e 81       	ldd	r25, Y+6	; 0x06
    1662:	29 81       	ldd	r18, Y+1	; 0x01
    1664:	3a 81       	ldd	r19, Y+2	; 0x02
    1666:	fc 01       	movw	r30, r24
    1668:	33 83       	std	Z+3, r19	; 0x03
    166a:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	9a 81       	ldd	r25, Y+2	; 0x02
    1670:	fc 01       	movw	r30, r24
    1672:	24 81       	ldd	r18, Z+4	; 0x04
    1674:	35 81       	ldd	r19, Z+5	; 0x05
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	fc 01       	movw	r30, r24
    167c:	35 83       	std	Z+5, r19	; 0x05
    167e:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
    1684:	fc 01       	movw	r30, r24
    1686:	84 81       	ldd	r24, Z+4	; 0x04
    1688:	95 81       	ldd	r25, Z+5	; 0x05
    168a:	2d 81       	ldd	r18, Y+5	; 0x05
    168c:	3e 81       	ldd	r19, Y+6	; 0x06
    168e:	fc 01       	movw	r30, r24
    1690:	33 83       	std	Z+3, r19	; 0x03
    1692:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	2d 81       	ldd	r18, Y+5	; 0x05
    169a:	3e 81       	ldd	r19, Y+6	; 0x06
    169c:	fc 01       	movw	r30, r24
    169e:	35 83       	std	Z+5, r19	; 0x05
    16a0:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    16a2:	8d 81       	ldd	r24, Y+5	; 0x05
    16a4:	9e 81       	ldd	r25, Y+6	; 0x06
    16a6:	2b 81       	ldd	r18, Y+3	; 0x03
    16a8:	3c 81       	ldd	r19, Y+4	; 0x04
    16aa:	fc 01       	movw	r30, r24
    16ac:	31 87       	std	Z+9, r19	; 0x09
    16ae:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	fc 01       	movw	r30, r24
    16b6:	80 81       	ld	r24, Z
    16b8:	21 e0       	ldi	r18, 0x01	; 1
    16ba:	28 0f       	add	r18, r24
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	9c 81       	ldd	r25, Y+4	; 0x04
    16c0:	fc 01       	movw	r30, r24
    16c2:	20 83       	st	Z, r18
}
    16c4:	00 00       	nop
    16c6:	26 96       	adiw	r28, 0x06	; 6
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	08 95       	ret

000016d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	28 97       	sbiw	r28, 0x08	; 8
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	9e 83       	std	Y+6, r25	; 0x06
    16ee:	8d 83       	std	Y+5, r24	; 0x05
    16f0:	78 87       	std	Y+8, r23	; 0x08
    16f2:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    16f4:	8f 81       	ldd	r24, Y+7	; 0x07
    16f6:	98 85       	ldd	r25, Y+8	; 0x08
    16f8:	fc 01       	movw	r30, r24
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	9c 83       	std	Y+4, r25	; 0x04
    1700:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	41 f4       	brne	.+16     	; 0x171a <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	9e 81       	ldd	r25, Y+6	; 0x06
    170e:	fc 01       	movw	r30, r24
    1710:	87 81       	ldd	r24, Z+7	; 0x07
    1712:	90 85       	ldd	r25, Z+8	; 0x08
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	1a c0       	rjmp	.+52     	; 0x174e <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	03 96       	adiw	r24, 0x03	; 3
    1720:	9a 83       	std	Y+2, r25	; 0x02
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	07 c0       	rjmp	.+14     	; 0x1734 <vListInsert+0x5c>
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	9a 81       	ldd	r25, Y+2	; 0x02
    172a:	fc 01       	movw	r30, r24
    172c:	82 81       	ldd	r24, Z+2	; 0x02
    172e:	93 81       	ldd	r25, Z+3	; 0x03
    1730:	9a 83       	std	Y+2, r25	; 0x02
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	9a 81       	ldd	r25, Y+2	; 0x02
    1738:	fc 01       	movw	r30, r24
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	fc 01       	movw	r30, r24
    1740:	20 81       	ld	r18, Z
    1742:	31 81       	ldd	r19, Z+1	; 0x01
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	82 17       	cp	r24, r18
    174a:	93 07       	cpc	r25, r19
    174c:	60 f7       	brcc	.-40     	; 0x1726 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	fc 01       	movw	r30, r24
    1754:	22 81       	ldd	r18, Z+2	; 0x02
    1756:	33 81       	ldd	r19, Z+3	; 0x03
    1758:	8f 81       	ldd	r24, Y+7	; 0x07
    175a:	98 85       	ldd	r25, Y+8	; 0x08
    175c:	fc 01       	movw	r30, r24
    175e:	33 83       	std	Z+3, r19	; 0x03
    1760:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1762:	8f 81       	ldd	r24, Y+7	; 0x07
    1764:	98 85       	ldd	r25, Y+8	; 0x08
    1766:	fc 01       	movw	r30, r24
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	2f 81       	ldd	r18, Y+7	; 0x07
    176e:	38 85       	ldd	r19, Y+8	; 0x08
    1770:	fc 01       	movw	r30, r24
    1772:	35 83       	std	Z+5, r19	; 0x05
    1774:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1776:	8f 81       	ldd	r24, Y+7	; 0x07
    1778:	98 85       	ldd	r25, Y+8	; 0x08
    177a:	29 81       	ldd	r18, Y+1	; 0x01
    177c:	3a 81       	ldd	r19, Y+2	; 0x02
    177e:	fc 01       	movw	r30, r24
    1780:	35 83       	std	Z+5, r19	; 0x05
    1782:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	2f 81       	ldd	r18, Y+7	; 0x07
    178a:	38 85       	ldd	r19, Y+8	; 0x08
    178c:	fc 01       	movw	r30, r24
    178e:	33 83       	std	Z+3, r19	; 0x03
    1790:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1792:	8f 81       	ldd	r24, Y+7	; 0x07
    1794:	98 85       	ldd	r25, Y+8	; 0x08
    1796:	2d 81       	ldd	r18, Y+5	; 0x05
    1798:	3e 81       	ldd	r19, Y+6	; 0x06
    179a:	fc 01       	movw	r30, r24
    179c:	31 87       	std	Z+9, r19	; 0x09
    179e:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	9e 81       	ldd	r25, Y+6	; 0x06
    17a4:	fc 01       	movw	r30, r24
    17a6:	80 81       	ld	r24, Z
    17a8:	21 e0       	ldi	r18, 0x01	; 1
    17aa:	28 0f       	add	r18, r24
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	fc 01       	movw	r30, r24
    17b2:	20 83       	st	Z, r18
}
    17b4:	00 00       	nop
    17b6:	28 96       	adiw	r28, 0x08	; 8
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	08 95       	ret

000017c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <uxListRemove+0x6>
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <uxListRemove+0x8>
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	9c 83       	std	Y+4, r25	; 0x04
    17d6:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	fc 01       	movw	r30, r24
    17de:	80 85       	ldd	r24, Z+8	; 0x08
    17e0:	91 85       	ldd	r25, Z+9	; 0x09
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	fc 01       	movw	r30, r24
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	93 81       	ldd	r25, Z+3	; 0x03
    17f0:	2b 81       	ldd	r18, Y+3	; 0x03
    17f2:	3c 81       	ldd	r19, Y+4	; 0x04
    17f4:	f9 01       	movw	r30, r18
    17f6:	24 81       	ldd	r18, Z+4	; 0x04
    17f8:	35 81       	ldd	r19, Z+5	; 0x05
    17fa:	fc 01       	movw	r30, r24
    17fc:	35 83       	std	Z+5, r19	; 0x05
    17fe:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	fc 01       	movw	r30, r24
    1806:	84 81       	ldd	r24, Z+4	; 0x04
    1808:	95 81       	ldd	r25, Z+5	; 0x05
    180a:	2b 81       	ldd	r18, Y+3	; 0x03
    180c:	3c 81       	ldd	r19, Y+4	; 0x04
    180e:	f9 01       	movw	r30, r18
    1810:	22 81       	ldd	r18, Z+2	; 0x02
    1812:	33 81       	ldd	r19, Z+3	; 0x03
    1814:	fc 01       	movw	r30, r24
    1816:	33 83       	std	Z+3, r19	; 0x03
    1818:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	fc 01       	movw	r30, r24
    1820:	21 81       	ldd	r18, Z+1	; 0x01
    1822:	32 81       	ldd	r19, Z+2	; 0x02
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	28 17       	cp	r18, r24
    182a:	39 07       	cpc	r19, r25
    182c:	51 f4       	brne	.+20     	; 0x1842 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	9c 81       	ldd	r25, Y+4	; 0x04
    1832:	fc 01       	movw	r30, r24
    1834:	24 81       	ldd	r18, Z+4	; 0x04
    1836:	35 81       	ldd	r19, Z+5	; 0x05
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	fc 01       	movw	r30, r24
    183e:	32 83       	std	Z+2, r19	; 0x02
    1840:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	fc 01       	movw	r30, r24
    1848:	11 86       	std	Z+9, r1	; 0x09
    184a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	9a 81       	ldd	r25, Y+2	; 0x02
    1850:	fc 01       	movw	r30, r24
    1852:	80 81       	ld	r24, Z
    1854:	2f ef       	ldi	r18, 0xFF	; 255
    1856:	28 0f       	add	r18, r24
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	9a 81       	ldd	r25, Y+2	; 0x02
    185c:	fc 01       	movw	r30, r24
    185e:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
    1864:	fc 01       	movw	r30, r24
    1866:	80 81       	ld	r24, Z
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	08 95       	ret

00001876 <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	28 97       	sbiw	r28, 0x08	; 8
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	9c 83       	std	Y+4, r25	; 0x04
    188c:	8b 83       	std	Y+3, r24	; 0x03
    188e:	7e 83       	std	Y+6, r23	; 0x06
    1890:	6d 83       	std	Y+5, r22	; 0x05
    1892:	58 87       	std	Y+8, r21	; 0x08
    1894:	4f 83       	std	Y+7, r20	; 0x07
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	21 e1       	ldi	r18, 0x11	; 17
    189c:	fc 01       	movw	r30, r24
    189e:	20 83       	st	Z, r18
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	9c 81       	ldd	r25, Y+4	; 0x04
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9c 83       	std	Y+4, r25	; 0x04
    18a8:	8b 83       	std	Y+3, r24	; 0x03
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	9c 81       	ldd	r25, Y+4	; 0x04
    18ae:	22 e2       	ldi	r18, 0x22	; 34
    18b0:	fc 01       	movw	r30, r24
    18b2:	20 83       	st	Z, r18
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	9c 83       	std	Y+4, r25	; 0x04
    18bc:	8b 83       	std	Y+3, r24	; 0x03
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	23 e3       	ldi	r18, 0x33	; 51
    18c4:	fc 01       	movw	r30, r24
    18c6:	20 83       	st	Z, r18
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	9c 83       	std	Y+4, r25	; 0x04
    18d0:	8b 83       	std	Y+3, r24	; 0x03
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	29 81       	ldd	r18, Y+1	; 0x01
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	fc 01       	movw	r30, r24
    18e2:	20 83       	st	Z, r18
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	9c 81       	ldd	r25, Y+4	; 0x04
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	9c 83       	std	Y+4, r25	; 0x04
    18ec:	8b 83       	std	Y+3, r24	; 0x03
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	9a 81       	ldd	r25, Y+2	; 0x02
    18f2:	89 2f       	mov	r24, r25
    18f4:	99 27       	eor	r25, r25
    18f6:	9a 83       	std	Y+2, r25	; 0x02
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	29 81       	ldd	r18, Y+1	; 0x01
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	fc 01       	movw	r30, r24
    1902:	20 83       	st	Z, r18
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	9c 83       	std	Y+4, r25	; 0x04
    190c:	8b 83       	std	Y+3, r24	; 0x03
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	9c 81       	ldd	r25, Y+4	; 0x04
    1912:	fc 01       	movw	r30, r24
    1914:	10 82       	st	Z, r1
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	9c 83       	std	Y+4, r25	; 0x04
    191e:	8b 83       	std	Y+3, r24	; 0x03
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	20 e8       	ldi	r18, 0x80	; 128
    1926:	fc 01       	movw	r30, r24
    1928:	20 83       	st	Z, r18
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	9c 83       	std	Y+4, r25	; 0x04
    1932:	8b 83       	std	Y+3, r24	; 0x03
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	9c 81       	ldd	r25, Y+4	; 0x04
    1938:	fc 01       	movw	r30, r24
    193a:	10 82       	st	Z, r1
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	9c 81       	ldd	r25, Y+4	; 0x04
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	8b 83       	std	Y+3, r24	; 0x03
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	22 e0       	ldi	r18, 0x02	; 2
    194c:	fc 01       	movw	r30, r24
    194e:	20 83       	st	Z, r18
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	9c 83       	std	Y+4, r25	; 0x04
    1958:	8b 83       	std	Y+3, r24	; 0x03
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9c 81       	ldd	r25, Y+4	; 0x04
    195e:	23 e0       	ldi	r18, 0x03	; 3
    1960:	fc 01       	movw	r30, r24
    1962:	20 83       	st	Z, r18
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	9c 83       	std	Y+4, r25	; 0x04
    196c:	8b 83       	std	Y+3, r24	; 0x03
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	9c 81       	ldd	r25, Y+4	; 0x04
    1972:	24 e0       	ldi	r18, 0x04	; 4
    1974:	fc 01       	movw	r30, r24
    1976:	20 83       	st	Z, r18
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	9c 83       	std	Y+4, r25	; 0x04
    1980:	8b 83       	std	Y+3, r24	; 0x03
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	25 e0       	ldi	r18, 0x05	; 5
    1988:	fc 01       	movw	r30, r24
    198a:	20 83       	st	Z, r18
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	9c 83       	std	Y+4, r25	; 0x04
    1994:	8b 83       	std	Y+3, r24	; 0x03
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	26 e0       	ldi	r18, 0x06	; 6
    199c:	fc 01       	movw	r30, r24
    199e:	20 83       	st	Z, r18
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9c 83       	std	Y+4, r25	; 0x04
    19a8:	8b 83       	std	Y+3, r24	; 0x03
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	27 e0       	ldi	r18, 0x07	; 7
    19b0:	fc 01       	movw	r30, r24
    19b2:	20 83       	st	Z, r18
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	9c 83       	std	Y+4, r25	; 0x04
    19bc:	8b 83       	std	Y+3, r24	; 0x03
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	9c 81       	ldd	r25, Y+4	; 0x04
    19c2:	28 e0       	ldi	r18, 0x08	; 8
    19c4:	fc 01       	movw	r30, r24
    19c6:	20 83       	st	Z, r18
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	9c 83       	std	Y+4, r25	; 0x04
    19d0:	8b 83       	std	Y+3, r24	; 0x03
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	9c 81       	ldd	r25, Y+4	; 0x04
    19d6:	29 e0       	ldi	r18, 0x09	; 9
    19d8:	fc 01       	movw	r30, r24
    19da:	20 83       	st	Z, r18
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	9c 83       	std	Y+4, r25	; 0x04
    19e4:	8b 83       	std	Y+3, r24	; 0x03
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	20 e1       	ldi	r18, 0x10	; 16
    19ec:	fc 01       	movw	r30, r24
    19ee:	20 83       	st	Z, r18
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	9c 81       	ldd	r25, Y+4	; 0x04
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	9c 83       	std	Y+4, r25	; 0x04
    19f8:	8b 83       	std	Y+3, r24	; 0x03
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	9c 81       	ldd	r25, Y+4	; 0x04
    19fe:	21 e1       	ldi	r18, 0x11	; 17
    1a00:	fc 01       	movw	r30, r24
    1a02:	20 83       	st	Z, r18
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	9c 81       	ldd	r25, Y+4	; 0x04
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	9c 83       	std	Y+4, r25	; 0x04
    1a0c:	8b 83       	std	Y+3, r24	; 0x03
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	9c 81       	ldd	r25, Y+4	; 0x04
    1a12:	22 e1       	ldi	r18, 0x12	; 18
    1a14:	fc 01       	movw	r30, r24
    1a16:	20 83       	st	Z, r18
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	9c 83       	std	Y+4, r25	; 0x04
    1a20:	8b 83       	std	Y+3, r24	; 0x03
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	23 e1       	ldi	r18, 0x13	; 19
    1a28:	fc 01       	movw	r30, r24
    1a2a:	20 83       	st	Z, r18
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	9c 83       	std	Y+4, r25	; 0x04
    1a34:	8b 83       	std	Y+3, r24	; 0x03
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	24 e1       	ldi	r18, 0x14	; 20
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	20 83       	st	Z, r18
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	9c 83       	std	Y+4, r25	; 0x04
    1a48:	8b 83       	std	Y+3, r24	; 0x03
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4e:	25 e1       	ldi	r18, 0x15	; 21
    1a50:	fc 01       	movw	r30, r24
    1a52:	20 83       	st	Z, r18
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	9c 81       	ldd	r25, Y+4	; 0x04
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	9c 83       	std	Y+4, r25	; 0x04
    1a5c:	8b 83       	std	Y+3, r24	; 0x03
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	26 e1       	ldi	r18, 0x16	; 22
    1a64:	fc 01       	movw	r30, r24
    1a66:	20 83       	st	Z, r18
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	9c 83       	std	Y+4, r25	; 0x04
    1a70:	8b 83       	std	Y+3, r24	; 0x03
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	9c 81       	ldd	r25, Y+4	; 0x04
    1a76:	27 e1       	ldi	r18, 0x17	; 23
    1a78:	fc 01       	movw	r30, r24
    1a7a:	20 83       	st	Z, r18
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	9c 83       	std	Y+4, r25	; 0x04
    1a84:	8b 83       	std	Y+3, r24	; 0x03
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	28 e1       	ldi	r18, 0x18	; 24
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	20 83       	st	Z, r18
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	9c 83       	std	Y+4, r25	; 0x04
    1a98:	8b 83       	std	Y+3, r24	; 0x03
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9e:	29 e1       	ldi	r18, 0x19	; 25
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	20 83       	st	Z, r18
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	9c 83       	std	Y+4, r25	; 0x04
    1aac:	8b 83       	std	Y+3, r24	; 0x03
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab2:	20 e2       	ldi	r18, 0x20	; 32
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	20 83       	st	Z, r18
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	9c 83       	std	Y+4, r25	; 0x04
    1ac0:	8b 83       	std	Y+3, r24	; 0x03
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	21 e2       	ldi	r18, 0x21	; 33
    1ac8:	fc 01       	movw	r30, r24
    1aca:	20 83       	st	Z, r18
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	9c 83       	std	Y+4, r25	; 0x04
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	22 e2       	ldi	r18, 0x22	; 34
    1adc:	fc 01       	movw	r30, r24
    1ade:	20 83       	st	Z, r18
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	9c 83       	std	Y+4, r25	; 0x04
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	9c 81       	ldd	r25, Y+4	; 0x04
    1aee:	23 e2       	ldi	r18, 0x23	; 35
    1af0:	fc 01       	movw	r30, r24
    1af2:	20 83       	st	Z, r18
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	9c 83       	std	Y+4, r25	; 0x04
    1afc:	8b 83       	std	Y+3, r24	; 0x03
    1afe:	8f 81       	ldd	r24, Y+7	; 0x07
    1b00:	98 85       	ldd	r25, Y+8	; 0x08
    1b02:	9a 83       	std	Y+2, r25	; 0x02
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	29 81       	ldd	r18, Y+1	; 0x01
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	20 83       	st	Z, r18
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	9c 83       	std	Y+4, r25	; 0x04
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	89 2f       	mov	r24, r25
    1b20:	99 27       	eor	r25, r25
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	29 81       	ldd	r18, Y+1	; 0x01
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	20 83       	st	Z, r18
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	9c 83       	std	Y+4, r25	; 0x04
    1b38:	8b 83       	std	Y+3, r24	; 0x03
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	26 e2       	ldi	r18, 0x26	; 38
    1b40:	fc 01       	movw	r30, r24
    1b42:	20 83       	st	Z, r18
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	9c 83       	std	Y+4, r25	; 0x04
    1b4c:	8b 83       	std	Y+3, r24	; 0x03
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	9c 81       	ldd	r25, Y+4	; 0x04
    1b52:	27 e2       	ldi	r18, 0x27	; 39
    1b54:	fc 01       	movw	r30, r24
    1b56:	20 83       	st	Z, r18
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	9c 83       	std	Y+4, r25	; 0x04
    1b60:	8b 83       	std	Y+3, r24	; 0x03
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	9c 81       	ldd	r25, Y+4	; 0x04
    1b66:	28 e2       	ldi	r18, 0x28	; 40
    1b68:	fc 01       	movw	r30, r24
    1b6a:	20 83       	st	Z, r18
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	9c 83       	std	Y+4, r25	; 0x04
    1b74:	8b 83       	std	Y+3, r24	; 0x03
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7a:	29 e2       	ldi	r18, 0x29	; 41
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	20 83       	st	Z, r18
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	9c 83       	std	Y+4, r25	; 0x04
    1b88:	8b 83       	std	Y+3, r24	; 0x03
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8e:	20 e3       	ldi	r18, 0x30	; 48
    1b90:	fc 01       	movw	r30, r24
    1b92:	20 83       	st	Z, r18
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	9c 83       	std	Y+4, r25	; 0x04
    1b9c:	8b 83       	std	Y+3, r24	; 0x03
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	21 e3       	ldi	r18, 0x31	; 49
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	20 83       	st	Z, r18
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	9c 83       	std	Y+4, r25	; 0x04
    1bb0:	8b 83       	std	Y+3, r24	; 0x03
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	28 96       	adiw	r28, 0x08	; 8
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret

00001bc8 <xPortStartScheduler>:
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <prvSetupTimerInterrupt>
    1bd4:	a0 91 64 07 	lds	r26, 0x0764	; 0x800764 <pxCurrentTCB>
    1bd8:	b0 91 65 07 	lds	r27, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    1bdc:	cd 91       	ld	r28, X+
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	dd 91       	ld	r29, X+
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	ff 91       	pop	r31
    1be6:	ef 91       	pop	r30
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	bf 91       	pop	r27
    1bee:	af 91       	pop	r26
    1bf0:	9f 91       	pop	r25
    1bf2:	8f 91       	pop	r24
    1bf4:	7f 91       	pop	r23
    1bf6:	6f 91       	pop	r22
    1bf8:	5f 91       	pop	r21
    1bfa:	4f 91       	pop	r20
    1bfc:	3f 91       	pop	r19
    1bfe:	2f 91       	pop	r18
    1c00:	1f 91       	pop	r17
    1c02:	0f 91       	pop	r16
    1c04:	ff 90       	pop	r15
    1c06:	ef 90       	pop	r14
    1c08:	df 90       	pop	r13
    1c0a:	cf 90       	pop	r12
    1c0c:	bf 90       	pop	r11
    1c0e:	af 90       	pop	r10
    1c10:	9f 90       	pop	r9
    1c12:	8f 90       	pop	r8
    1c14:	7f 90       	pop	r7
    1c16:	6f 90       	pop	r6
    1c18:	5f 90       	pop	r5
    1c1a:	4f 90       	pop	r4
    1c1c:	3f 90       	pop	r3
    1c1e:	2f 90       	pop	r2
    1c20:	1f 90       	pop	r1
    1c22:	0f 90       	pop	r0
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	0f 90       	pop	r0
    1c28:	08 95       	ret
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	08 95       	ret

00001c32 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1c32:	0f 92       	push	r0
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	0f 92       	push	r0
    1c3a:	1f 92       	push	r1
    1c3c:	11 24       	eor	r1, r1
    1c3e:	2f 92       	push	r2
    1c40:	3f 92       	push	r3
    1c42:	4f 92       	push	r4
    1c44:	5f 92       	push	r5
    1c46:	6f 92       	push	r6
    1c48:	7f 92       	push	r7
    1c4a:	8f 92       	push	r8
    1c4c:	9f 92       	push	r9
    1c4e:	af 92       	push	r10
    1c50:	bf 92       	push	r11
    1c52:	cf 92       	push	r12
    1c54:	df 92       	push	r13
    1c56:	ef 92       	push	r14
    1c58:	ff 92       	push	r15
    1c5a:	0f 93       	push	r16
    1c5c:	1f 93       	push	r17
    1c5e:	2f 93       	push	r18
    1c60:	3f 93       	push	r19
    1c62:	4f 93       	push	r20
    1c64:	5f 93       	push	r21
    1c66:	6f 93       	push	r22
    1c68:	7f 93       	push	r23
    1c6a:	8f 93       	push	r24
    1c6c:	9f 93       	push	r25
    1c6e:	af 93       	push	r26
    1c70:	bf 93       	push	r27
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	ef 93       	push	r30
    1c78:	ff 93       	push	r31
    1c7a:	a0 91 64 07 	lds	r26, 0x0764	; 0x800764 <pxCurrentTCB>
    1c7e:	b0 91 65 07 	lds	r27, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    1c82:	0d b6       	in	r0, 0x3d	; 61
    1c84:	0d 92       	st	X+, r0
    1c86:	0e b6       	in	r0, 0x3e	; 62
    1c88:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1c8a:	0e 94 32 1b 	call	0x3664	; 0x3664 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1c8e:	a0 91 64 07 	lds	r26, 0x0764	; 0x800764 <pxCurrentTCB>
    1c92:	b0 91 65 07 	lds	r27, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    1c96:	cd 91       	ld	r28, X+
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	dd 91       	ld	r29, X+
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	ff 91       	pop	r31
    1ca0:	ef 91       	pop	r30
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	bf 91       	pop	r27
    1ca8:	af 91       	pop	r26
    1caa:	9f 91       	pop	r25
    1cac:	8f 91       	pop	r24
    1cae:	7f 91       	pop	r23
    1cb0:	6f 91       	pop	r22
    1cb2:	5f 91       	pop	r21
    1cb4:	4f 91       	pop	r20
    1cb6:	3f 91       	pop	r19
    1cb8:	2f 91       	pop	r18
    1cba:	1f 91       	pop	r17
    1cbc:	0f 91       	pop	r16
    1cbe:	ff 90       	pop	r15
    1cc0:	ef 90       	pop	r14
    1cc2:	df 90       	pop	r13
    1cc4:	cf 90       	pop	r12
    1cc6:	bf 90       	pop	r11
    1cc8:	af 90       	pop	r10
    1cca:	9f 90       	pop	r9
    1ccc:	8f 90       	pop	r8
    1cce:	7f 90       	pop	r7
    1cd0:	6f 90       	pop	r6
    1cd2:	5f 90       	pop	r5
    1cd4:	4f 90       	pop	r4
    1cd6:	3f 90       	pop	r3
    1cd8:	2f 90       	pop	r2
    1cda:	1f 90       	pop	r1
    1cdc:	0f 90       	pop	r0
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1ce2:	08 95       	ret
	...

00001ce6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1ce6:	0f 92       	push	r0
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	0f 92       	push	r0
    1cee:	1f 92       	push	r1
    1cf0:	11 24       	eor	r1, r1
    1cf2:	2f 92       	push	r2
    1cf4:	3f 92       	push	r3
    1cf6:	4f 92       	push	r4
    1cf8:	5f 92       	push	r5
    1cfa:	6f 92       	push	r6
    1cfc:	7f 92       	push	r7
    1cfe:	8f 92       	push	r8
    1d00:	9f 92       	push	r9
    1d02:	af 92       	push	r10
    1d04:	bf 92       	push	r11
    1d06:	cf 92       	push	r12
    1d08:	df 92       	push	r13
    1d0a:	ef 92       	push	r14
    1d0c:	ff 92       	push	r15
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	2f 93       	push	r18
    1d14:	3f 93       	push	r19
    1d16:	4f 93       	push	r20
    1d18:	5f 93       	push	r21
    1d1a:	6f 93       	push	r22
    1d1c:	7f 93       	push	r23
    1d1e:	8f 93       	push	r24
    1d20:	9f 93       	push	r25
    1d22:	af 93       	push	r26
    1d24:	bf 93       	push	r27
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	ef 93       	push	r30
    1d2c:	ff 93       	push	r31
    1d2e:	a0 91 64 07 	lds	r26, 0x0764	; 0x800764 <pxCurrentTCB>
    1d32:	b0 91 65 07 	lds	r27, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    1d36:	0d b6       	in	r0, 0x3d	; 61
    1d38:	0d 92       	st	X+, r0
    1d3a:	0e b6       	in	r0, 0x3e	; 62
    1d3c:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1d3e:	0e 94 45 1a 	call	0x348a	; 0x348a <xTaskIncrementTick>
    1d42:	88 23       	and	r24, r24
    1d44:	11 f0       	breq	.+4      	; 0x1d4a <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    1d46:	0e 94 32 1b 	call	0x3664	; 0x3664 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1d4a:	a0 91 64 07 	lds	r26, 0x0764	; 0x800764 <pxCurrentTCB>
    1d4e:	b0 91 65 07 	lds	r27, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    1d52:	cd 91       	ld	r28, X+
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	dd 91       	ld	r29, X+
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	ff 91       	pop	r31
    1d5c:	ef 91       	pop	r30
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	bf 91       	pop	r27
    1d64:	af 91       	pop	r26
    1d66:	9f 91       	pop	r25
    1d68:	8f 91       	pop	r24
    1d6a:	7f 91       	pop	r23
    1d6c:	6f 91       	pop	r22
    1d6e:	5f 91       	pop	r21
    1d70:	4f 91       	pop	r20
    1d72:	3f 91       	pop	r19
    1d74:	2f 91       	pop	r18
    1d76:	1f 91       	pop	r17
    1d78:	0f 91       	pop	r16
    1d7a:	ff 90       	pop	r15
    1d7c:	ef 90       	pop	r14
    1d7e:	df 90       	pop	r13
    1d80:	cf 90       	pop	r12
    1d82:	bf 90       	pop	r11
    1d84:	af 90       	pop	r10
    1d86:	9f 90       	pop	r9
    1d88:	8f 90       	pop	r8
    1d8a:	7f 90       	pop	r7
    1d8c:	6f 90       	pop	r6
    1d8e:	5f 90       	pop	r5
    1d90:	4f 90       	pop	r4
    1d92:	3f 90       	pop	r3
    1d94:	2f 90       	pop	r2
    1d96:	1f 90       	pop	r1
    1d98:	0f 90       	pop	r0
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1d9e:	08 95       	ret
	...

00001da2 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <prvSetupTimerInterrupt+0x6>
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <prvSetupTimerInterrupt+0x8>
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <prvSetupTimerInterrupt+0xa>
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1db0:	89 e9       	ldi	r24, 0x99	; 153
    1db2:	99 e3       	ldi	r25, 0x39	; 57
    1db4:	a0 e0       	ldi	r26, 0x00	; 0
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	9a 83       	std	Y+2, r25	; 0x02
    1dbc:	ab 83       	std	Y+3, r26	; 0x03
    1dbe:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc4:	ab 81       	ldd	r26, Y+3	; 0x03
    1dc6:	bc 81       	ldd	r27, Y+4	; 0x04
    1dc8:	68 94       	set
    1dca:	15 f8       	bld	r1, 5
    1dcc:	b6 95       	lsr	r27
    1dce:	a7 95       	ror	r26
    1dd0:	97 95       	ror	r25
    1dd2:	87 95       	ror	r24
    1dd4:	16 94       	lsr	r1
    1dd6:	d1 f7       	brne	.-12     	; 0x1dcc <prvSetupTimerInterrupt+0x2a>
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	ab 83       	std	Y+3, r26	; 0x03
    1dde:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	9a 81       	ldd	r25, Y+2	; 0x02
    1de4:	ab 81       	ldd	r26, Y+3	; 0x03
    1de6:	bc 81       	ldd	r27, Y+4	; 0x04
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	a1 09       	sbc	r26, r1
    1dec:	b1 09       	sbc	r27, r1
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	ab 83       	std	Y+3, r26	; 0x03
    1df4:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfe:	ab 81       	ldd	r26, Y+3	; 0x03
    1e00:	bc 81       	ldd	r27, Y+4	; 0x04
    1e02:	89 2f       	mov	r24, r25
    1e04:	9a 2f       	mov	r25, r26
    1e06:	ab 2f       	mov	r26, r27
    1e08:	bb 27       	eor	r27, r27
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	9a 83       	std	Y+2, r25	; 0x02
    1e0e:	ab 83       	std	Y+3, r26	; 0x03
    1e10:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    1e16:	89 e8       	ldi	r24, 0x89	; 137
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    1e20:	88 e8       	ldi	r24, 0x88	; 136
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	2d 81       	ldd	r18, Y+5	; 0x05
    1e26:	fc 01       	movw	r30, r24
    1e28:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1e2a:	8b e0       	ldi	r24, 0x0B	; 11
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    1e2e:	81 e8       	ldi	r24, 0x81	; 129
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	2d 81       	ldd	r18, Y+5	; 0x05
    1e34:	fc 01       	movw	r30, r24
    1e36:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    1e38:	8f e6       	ldi	r24, 0x6F	; 111
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	80 81       	ld	r24, Z
    1e40:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	82 60       	ori	r24, 0x02	; 2
    1e46:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    1e48:	8f e6       	ldi	r24, 0x6F	; 111
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e4e:	fc 01       	movw	r30, r24
    1e50:	20 83       	st	Z, r18
}
    1e52:	00 00       	nop
    1e54:	26 96       	adiw	r28, 0x06	; 6
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	08 95       	ret

00001e66 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    1e66:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1e6a:	18 95       	reti
	...

00001e6e <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1e6e:	cf 93       	push	r28
    1e70:	df 93       	push	r29
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <pvPortMalloc+0x6>
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <pvPortMalloc+0x8>
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	9c 83       	std	Y+4, r25	; 0x04
    1e7c:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    1e7e:	1a 82       	std	Y+2, r1	; 0x02
    1e80:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    1e82:	0e 94 a1 19 	call	0x3342	; 0x3342 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1e86:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <pucAlignedHeap.2084>
    1e8a:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <pucAlignedHeap.2084+0x1>
    1e8e:	89 2b       	or	r24, r25
    1e90:	31 f4       	brne	.+12     	; 0x1e9e <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1e92:	85 e7       	ldi	r24, 0x75	; 117
    1e94:	93 e0       	ldi	r25, 0x03	; 3
    1e96:	90 93 5f 07 	sts	0x075F, r25	; 0x80075f <pucAlignedHeap.2084+0x1>
    1e9a:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <pucAlignedHeap.2084>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1e9e:	20 91 5c 07 	lds	r18, 0x075C	; 0x80075c <xNextFreeByte>
    1ea2:	30 91 5d 07 	lds	r19, 0x075D	; 0x80075d <xNextFreeByte+0x1>
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	82 0f       	add	r24, r18
    1eac:	93 1f       	adc	r25, r19
    1eae:	87 3e       	cpi	r24, 0xE7	; 231
    1eb0:	93 40       	sbci	r25, 0x03	; 3
    1eb2:	38 f5       	brcc	.+78     	; 0x1f02 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    1eb4:	20 91 5c 07 	lds	r18, 0x075C	; 0x80075c <xNextFreeByte>
    1eb8:	30 91 5d 07 	lds	r19, 0x075D	; 0x80075d <xNextFreeByte+0x1>
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec0:	28 0f       	add	r18, r24
    1ec2:	39 1f       	adc	r19, r25
    1ec4:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <xNextFreeByte>
    1ec8:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1ecc:	82 17       	cp	r24, r18
    1ece:	93 07       	cpc	r25, r19
    1ed0:	c0 f4       	brcc	.+48     	; 0x1f02 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1ed2:	20 91 5e 07 	lds	r18, 0x075E	; 0x80075e <pucAlignedHeap.2084>
    1ed6:	30 91 5f 07 	lds	r19, 0x075F	; 0x80075f <pucAlignedHeap.2084+0x1>
    1eda:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <xNextFreeByte>
    1ede:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <xNextFreeByte+0x1>
    1ee2:	82 0f       	add	r24, r18
    1ee4:	93 1f       	adc	r25, r19
    1ee6:	9a 83       	std	Y+2, r25	; 0x02
    1ee8:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    1eea:	20 91 5c 07 	lds	r18, 0x075C	; 0x80075c <xNextFreeByte>
    1eee:	30 91 5d 07 	lds	r19, 0x075D	; 0x80075d <xNextFreeByte+0x1>
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	82 0f       	add	r24, r18
    1ef8:	93 1f       	adc	r25, r19
    1efa:	90 93 5d 07 	sts	0x075D, r25	; 0x80075d <xNextFreeByte+0x1>
    1efe:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1f02:	0e 94 ae 19 	call	0x335c	; 0x335c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	08 95       	ret

00001f18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <vPortFree+0x6>
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	9a 83       	std	Y+2, r25	; 0x02
    1f24:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1f26:	00 00       	nop
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	08 95       	ret

00001f32 <_serial_tx_int_on>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <_serial_tx_int_on+0x6>
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	05 97       	sbiw	r24, 0x05	; 5
    1f46:	29 81       	ldd	r18, Y+1	; 0x01
    1f48:	3a 81       	ldd	r19, Y+2	; 0x02
    1f4a:	25 50       	subi	r18, 0x05	; 5
    1f4c:	31 09       	sbc	r19, r1
    1f4e:	f9 01       	movw	r30, r18
    1f50:	20 81       	ld	r18, Z
    1f52:	20 62       	ori	r18, 0x20	; 32
    1f54:	fc 01       	movw	r30, r24
    1f56:	20 83       	st	Z, r18
    1f58:	00 00       	nop
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	08 95       	ret

00001f64 <serial_new_instance>:
    1f64:	8f 92       	push	r8
    1f66:	9f 92       	push	r9
    1f68:	af 92       	push	r10
    1f6a:	bf 92       	push	r11
    1f6c:	cf 92       	push	r12
    1f6e:	df 92       	push	r13
    1f70:	ef 92       	push	r14
    1f72:	0f 93       	push	r16
    1f74:	1f 93       	push	r17
    1f76:	cf 93       	push	r28
    1f78:	df 93       	push	r29
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	61 97       	sbiw	r28, 0x11	; 17
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	8c 83       	std	Y+4, r24	; 0x04
    1f8c:	4d 83       	std	Y+5, r20	; 0x05
    1f8e:	5e 83       	std	Y+6, r21	; 0x06
    1f90:	6f 83       	std	Y+7, r22	; 0x07
    1f92:	78 87       	std	Y+8, r23	; 0x08
    1f94:	29 87       	std	Y+9, r18	; 0x09
    1f96:	0a 87       	std	Y+10, r16	; 0x0a
    1f98:	eb 86       	std	Y+11, r14	; 0x0b
    1f9a:	dd 86       	std	Y+13, r13	; 0x0d
    1f9c:	cc 86       	std	Y+12, r12	; 0x0c
    1f9e:	bf 86       	std	Y+15, r11	; 0x0f
    1fa0:	ae 86       	std	Y+14, r10	; 0x0e
    1fa2:	99 8a       	std	Y+17, r9	; 0x11
    1fa4:	88 8a       	std	Y+16, r8	; 0x10
    1fa6:	88 e0       	ldi	r24, 0x08	; 8
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	0e 94 03 23 	call	0x4606	; 0x4606 <malloc>
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	80 5a       	subi	r24, 0xA0	; 160
    1fbe:	98 4f       	sbci	r25, 0xF8	; 248
    1fc0:	29 81       	ldd	r18, Y+1	; 0x01
    1fc2:	3a 81       	ldd	r19, Y+2	; 0x02
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	31 83       	std	Z+1, r19	; 0x01
    1fc8:	20 83       	st	Z, r18
    1fca:	8c 81       	ldd	r24, Y+4	; 0x04
    1fcc:	88 2f       	mov	r24, r24
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	8a 5f       	subi	r24, 0xFA	; 250
    1fd6:	9e 4f       	sbci	r25, 0xFE	; 254
    1fd8:	fc 01       	movw	r30, r24
    1fda:	20 81       	ld	r18, Z
    1fdc:	31 81       	ldd	r19, Z+1	; 0x01
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	31 83       	std	Z+1, r19	; 0x01
    1fe6:	20 83       	st	Z, r18
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	9a 81       	ldd	r25, Y+2	; 0x02
    1fec:	2e 85       	ldd	r18, Y+14	; 0x0e
    1fee:	3f 85       	ldd	r19, Y+15	; 0x0f
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	33 83       	std	Z+3, r19	; 0x03
    1ff4:	22 83       	std	Z+2, r18	; 0x02
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ffc:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ffe:	fc 01       	movw	r30, r24
    2000:	35 83       	std	Z+5, r19	; 0x05
    2002:	24 83       	std	Z+4, r18	; 0x04
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	9a 81       	ldd	r25, Y+2	; 0x02
    2008:	28 89       	ldd	r18, Y+16	; 0x10
    200a:	39 89       	ldd	r19, Y+17	; 0x11
    200c:	fc 01       	movw	r30, r24
    200e:	37 83       	std	Z+7, r19	; 0x07
    2010:	26 83       	std	Z+6, r18	; 0x06
    2012:	8f e5       	ldi	r24, 0x5F	; 95
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	fc 01       	movw	r30, r24
    2018:	80 81       	ld	r24, Z
    201a:	8b 83       	std	Y+3, r24	; 0x03
    201c:	f8 94       	cli
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	9a 81       	ldd	r25, Y+2	; 0x02
    2022:	fc 01       	movw	r30, r24
    2024:	80 81       	ld	r24, Z
    2026:	91 81       	ldd	r25, Z+1	; 0x01
    2028:	06 97       	sbiw	r24, 0x06	; 6
    202a:	29 81       	ldd	r18, Y+1	; 0x01
    202c:	3a 81       	ldd	r19, Y+2	; 0x02
    202e:	f9 01       	movw	r30, r18
    2030:	20 81       	ld	r18, Z
    2032:	31 81       	ldd	r19, Z+1	; 0x01
    2034:	26 50       	subi	r18, 0x06	; 6
    2036:	31 09       	sbc	r19, r1
    2038:	f9 01       	movw	r30, r18
    203a:	20 81       	ld	r18, Z
    203c:	22 60       	ori	r18, 0x02	; 2
    203e:	fc 01       	movw	r30, r24
    2040:	20 83       	st	Z, r18
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	fc 01       	movw	r30, r24
    2048:	80 81       	ld	r24, Z
    204a:	91 81       	ldd	r25, Z+1	; 0x01
    204c:	8c 01       	movw	r16, r24
    204e:	02 50       	subi	r16, 0x02	; 2
    2050:	11 09       	sbc	r17, r1
    2052:	8d 81       	ldd	r24, Y+5	; 0x05
    2054:	9e 81       	ldd	r25, Y+6	; 0x06
    2056:	af 81       	ldd	r26, Y+7	; 0x07
    2058:	b8 85       	ldd	r27, Y+8	; 0x08
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	aa 1f       	adc	r26, r26
    2060:	bb 1f       	adc	r27, r27
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	aa 1f       	adc	r26, r26
    2068:	bb 1f       	adc	r27, r27
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	aa 1f       	adc	r26, r26
    2070:	bb 1f       	adc	r27, r27
    2072:	9c 01       	movw	r18, r24
    2074:	ad 01       	movw	r20, r26
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a1 ee       	ldi	r26, 0xE1	; 225
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 db 22 	call	0x45b6	; 0x45b6 <__udivmodsi4>
    2086:	da 01       	movw	r26, r20
    2088:	c9 01       	movw	r24, r18
    208a:	81 50       	subi	r24, 0x01	; 1
    208c:	f8 01       	movw	r30, r16
    208e:	80 83       	st	Z, r24
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	fc 01       	movw	r30, r24
    2096:	80 81       	ld	r24, Z
    2098:	91 81       	ldd	r25, Z+1	; 0x01
    209a:	05 97       	sbiw	r24, 0x05	; 5
    209c:	28 e9       	ldi	r18, 0x98	; 152
    209e:	fc 01       	movw	r30, r24
    20a0:	20 83       	st	Z, r18
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	9a 81       	ldd	r25, Y+2	; 0x02
    20a6:	fc 01       	movw	r30, r24
    20a8:	80 81       	ld	r24, Z
    20aa:	91 81       	ldd	r25, Z+1	; 0x01
    20ac:	04 97       	sbiw	r24, 0x04	; 4
    20ae:	26 e0       	ldi	r18, 0x06	; 6
    20b0:	fc 01       	movw	r30, r24
    20b2:	20 83       	st	Z, r18
    20b4:	8f e5       	ldi	r24, 0x5F	; 95
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ba:	fc 01       	movw	r30, r24
    20bc:	20 83       	st	Z, r18
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	61 96       	adiw	r28, 0x11	; 17
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	ef 90       	pop	r14
    20d8:	df 90       	pop	r13
    20da:	cf 90       	pop	r12
    20dc:	bf 90       	pop	r11
    20de:	af 90       	pop	r10
    20e0:	9f 90       	pop	r9
    20e2:	8f 90       	pop	r8
    20e4:	08 95       	ret

000020e6 <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <serial_send_bytes+0x6>
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <serial_send_bytes+0x8>
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <serial_send_bytes+0xa>
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	9b 83       	std	Y+3, r25	; 0x03
    20f6:	8a 83       	std	Y+2, r24	; 0x02
    20f8:	7d 83       	std	Y+5, r23	; 0x05
    20fa:	6c 83       	std	Y+4, r22	; 0x04
    20fc:	4e 83       	std	Y+6, r20	; 0x06
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	9b 81       	ldd	r25, Y+3	; 0x03
    2102:	fc 01       	movw	r30, r24
    2104:	82 81       	ldd	r24, Z+2	; 0x02
    2106:	93 81       	ldd	r25, Z+3	; 0x03
    2108:	89 2b       	or	r24, r25
    210a:	a9 f0       	breq	.+42     	; 0x2136 <serial_send_bytes+0x50>
    210c:	8e 81       	ldd	r24, Y+6	; 0x06
    210e:	28 2f       	mov	r18, r24
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	9b 81       	ldd	r25, Y+3	; 0x03
    2116:	fc 01       	movw	r30, r24
    2118:	82 81       	ldd	r24, Z+2	; 0x02
    211a:	93 81       	ldd	r25, Z+3	; 0x03
    211c:	fc 01       	movw	r30, r24
    211e:	82 a1       	ldd	r24, Z+34	; 0x22
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	40 e2       	ldi	r20, 0x20	; 32
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	ba 01       	movw	r22, r20
    212a:	68 1b       	sub	r22, r24
    212c:	79 0b       	sbc	r23, r25
    212e:	cb 01       	movw	r24, r22
    2130:	82 17       	cp	r24, r18
    2132:	93 07       	cpc	r25, r19
    2134:	54 f0       	brlt	.+20     	; 0x214a <serial_send_bytes+0x64>
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	9b 81       	ldd	r25, Y+3	; 0x03
    213a:	fc 01       	movw	r30, r24
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	93 81       	ldd	r25, Z+3	; 0x03
    2140:	89 2b       	or	r24, r25
    2142:	29 f4       	brne	.+10     	; 0x214e <serial_send_bytes+0x68>
    2144:	8e 81       	ldd	r24, Y+6	; 0x06
    2146:	82 30       	cpi	r24, 0x02	; 2
    2148:	10 f0       	brcs	.+4      	; 0x214e <serial_send_bytes+0x68>
		return BUFFER_FULL;
    214a:	82 e0       	ldi	r24, 0x02	; 2
    214c:	22 c0       	rjmp	.+68     	; 0x2192 <serial_send_bytes+0xac>
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    214e:	19 82       	std	Y+1, r1	; 0x01
    2150:	14 c0       	rjmp	.+40     	; 0x217a <serial_send_bytes+0x94>
		buffer_put_item(handle->_tx_buf, buf[i]);
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	88 2f       	mov	r24, r24
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	2c 81       	ldd	r18, Y+4	; 0x04
    215a:	3d 81       	ldd	r19, Y+5	; 0x05
    215c:	82 0f       	add	r24, r18
    215e:	93 1f       	adc	r25, r19
    2160:	fc 01       	movw	r30, r24
    2162:	20 81       	ld	r18, Z
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	9b 81       	ldd	r25, Y+3	; 0x03
    2168:	fc 01       	movw	r30, r24
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	93 81       	ldd	r25, Z+3	; 0x03
    216e:	62 2f       	mov	r22, r18
    2170:	0e 94 92 0a 	call	0x1524	; 0x1524 <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	99 81       	ldd	r25, Y+1	; 0x01
    217c:	8e 81       	ldd	r24, Y+6	; 0x06
    217e:	98 17       	cp	r25, r24
    2180:	40 f3       	brcs	.-48     	; 0x2152 <serial_send_bytes+0x6c>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	9b 81       	ldd	r25, Y+3	; 0x03
    2186:	fc 01       	movw	r30, r24
    2188:	80 81       	ld	r24, Z
    218a:	91 81       	ldd	r25, Z+1	; 0x01
    218c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <_serial_tx_int_on>
	return BUFFER_OK;
    2190:	80 e0       	ldi	r24, 0x00	; 0
}
    2192:	26 96       	adiw	r28, 0x06	; 6
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	08 95       	ret

000021a4 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    21a4:	1f 92       	push	r1
    21a6:	0f 92       	push	r0
    21a8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    21ac:	0f 92       	push	r0
    21ae:	11 24       	eor	r1, r1
    21b0:	2f 93       	push	r18
    21b2:	3f 93       	push	r19
    21b4:	4f 93       	push	r20
    21b6:	5f 93       	push	r21
    21b8:	6f 93       	push	r22
    21ba:	7f 93       	push	r23
    21bc:	8f 93       	push	r24
    21be:	9f 93       	push	r25
    21c0:	af 93       	push	r26
    21c2:	bf 93       	push	r27
    21c4:	ef 93       	push	r30
    21c6:	ff 93       	push	r31
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	1f 92       	push	r1
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    21d2:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <_ser_handle>
    21d6:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <_ser_handle+0x1>
    21da:	89 2b       	or	r24, r25
    21dc:	31 f1       	breq	.+76     	; 0x222a <__vector_20+0x86>
		item = UDR0;
    21de:	86 ec       	ldi	r24, 0xC6	; 198
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	fc 01       	movw	r30, r24
    21e4:	80 81       	ld	r24, Z
    21e6:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    21e8:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <_ser_handle>
    21ec:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <_ser_handle+0x1>
    21f0:	fc 01       	movw	r30, r24
    21f2:	84 81       	ldd	r24, Z+4	; 0x04
    21f4:	95 81       	ldd	r25, Z+5	; 0x05
    21f6:	69 81       	ldd	r22, Y+1	; 0x01
    21f8:	0e 94 92 0a 	call	0x1524	; 0x1524 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    21fc:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <_ser_handle>
    2200:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <_ser_handle+0x1>
    2204:	fc 01       	movw	r30, r24
    2206:	86 81       	ldd	r24, Z+6	; 0x06
    2208:	97 81       	ldd	r25, Z+7	; 0x07
    220a:	89 2b       	or	r24, r25
    220c:	71 f0       	breq	.+28     	; 0x222a <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    220e:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <_ser_handle>
    2212:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <_ser_handle+0x1>
    2216:	fc 01       	movw	r30, r24
    2218:	26 81       	ldd	r18, Z+6	; 0x06
    221a:	37 81       	ldd	r19, Z+7	; 0x07
    221c:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <_ser_handle>
    2220:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <_ser_handle+0x1>
    2224:	69 81       	ldd	r22, Y+1	; 0x01
    2226:	f9 01       	movw	r30, r18
    2228:	09 95       	icall
		}
	}
}
    222a:	00 00       	nop
    222c:	0f 90       	pop	r0
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	ff 91       	pop	r31
    2234:	ef 91       	pop	r30
    2236:	bf 91       	pop	r27
    2238:	af 91       	pop	r26
    223a:	9f 91       	pop	r25
    223c:	8f 91       	pop	r24
    223e:	7f 91       	pop	r23
    2240:	6f 91       	pop	r22
    2242:	5f 91       	pop	r21
    2244:	4f 91       	pop	r20
    2246:	3f 91       	pop	r19
    2248:	2f 91       	pop	r18
    224a:	0f 90       	pop	r0
    224c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2250:	0f 90       	pop	r0
    2252:	1f 90       	pop	r1
    2254:	18 95       	reti

00002256 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    2256:	1f 92       	push	r1
    2258:	0f 92       	push	r0
    225a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    225e:	0f 92       	push	r0
    2260:	11 24       	eor	r1, r1
    2262:	2f 93       	push	r18
    2264:	3f 93       	push	r19
    2266:	4f 93       	push	r20
    2268:	5f 93       	push	r21
    226a:	6f 93       	push	r22
    226c:	7f 93       	push	r23
    226e:	8f 93       	push	r24
    2270:	9f 93       	push	r25
    2272:	af 93       	push	r26
    2274:	bf 93       	push	r27
    2276:	ef 93       	push	r30
    2278:	ff 93       	push	r31
    227a:	cf 93       	push	r28
    227c:	df 93       	push	r29
    227e:	1f 92       	push	r1
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    2284:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <_ser_handle>
    2288:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <_ser_handle+0x1>
    228c:	89 2b       	or	r24, r25
    228e:	f9 f0       	breq	.+62     	; 0x22ce <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    2290:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <_ser_handle>
    2294:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <_ser_handle+0x1>
    2298:	fc 01       	movw	r30, r24
    229a:	82 81       	ldd	r24, Z+2	; 0x02
    229c:	93 81       	ldd	r25, Z+3	; 0x03
    229e:	9e 01       	movw	r18, r28
    22a0:	2f 5f       	subi	r18, 0xFF	; 255
    22a2:	3f 4f       	sbci	r19, 0xFF	; 255
    22a4:	b9 01       	movw	r22, r18
    22a6:	0e 94 4a 0a 	call	0x1494	; 0x1494 <buffer_get_item>
    22aa:	88 23       	and	r24, r24
    22ac:	31 f4       	brne	.+12     	; 0x22ba <__vector_21+0x64>
			UDR0 = item;
    22ae:	86 ec       	ldi	r24, 0xC6	; 198
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	29 81       	ldd	r18, Y+1	; 0x01
    22b4:	fc 01       	movw	r30, r24
    22b6:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    22b8:	13 c0       	rjmp	.+38     	; 0x22e0 <__vector_21+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
			UDR0 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    22ba:	81 ec       	ldi	r24, 0xC1	; 193
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	21 ec       	ldi	r18, 0xC1	; 193
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	f9 01       	movw	r30, r18
    22c4:	20 81       	ld	r18, Z
    22c6:	2f 7d       	andi	r18, 0xDF	; 223
    22c8:	fc 01       	movw	r30, r24
    22ca:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    22cc:	09 c0       	rjmp	.+18     	; 0x22e0 <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    22ce:	81 ec       	ldi	r24, 0xC1	; 193
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	21 ec       	ldi	r18, 0xC1	; 193
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	f9 01       	movw	r30, r18
    22d8:	20 81       	ld	r18, Z
    22da:	2f 7d       	andi	r18, 0xDF	; 223
    22dc:	fc 01       	movw	r30, r24
    22de:	20 83       	st	Z, r18
	}
}
    22e0:	00 00       	nop
    22e2:	0f 90       	pop	r0
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	ff 91       	pop	r31
    22ea:	ef 91       	pop	r30
    22ec:	bf 91       	pop	r27
    22ee:	af 91       	pop	r26
    22f0:	9f 91       	pop	r25
    22f2:	8f 91       	pop	r24
    22f4:	7f 91       	pop	r23
    22f6:	6f 91       	pop	r22
    22f8:	5f 91       	pop	r21
    22fa:	4f 91       	pop	r20
    22fc:	3f 91       	pop	r19
    22fe:	2f 91       	pop	r18
    2300:	0f 90       	pop	r0
    2302:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2306:	0f 90       	pop	r0
    2308:	1f 90       	pop	r1
    230a:	18 95       	reti

0000230c <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    230c:	1f 92       	push	r1
    230e:	0f 92       	push	r0
    2310:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2314:	0f 92       	push	r0
    2316:	11 24       	eor	r1, r1
    2318:	2f 93       	push	r18
    231a:	3f 93       	push	r19
    231c:	4f 93       	push	r20
    231e:	5f 93       	push	r21
    2320:	6f 93       	push	r22
    2322:	7f 93       	push	r23
    2324:	8f 93       	push	r24
    2326:	9f 93       	push	r25
    2328:	af 93       	push	r26
    232a:	bf 93       	push	r27
    232c:	ef 93       	push	r30
    232e:	ff 93       	push	r31
    2330:	cf 93       	push	r28
    2332:	df 93       	push	r29
    2334:	1f 92       	push	r1
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    233a:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <_ser_handle+0x2>
    233e:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <_ser_handle+0x3>
    2342:	89 2b       	or	r24, r25
    2344:	31 f1       	breq	.+76     	; 0x2392 <__vector_28+0x86>
		item = UDR1;
    2346:	8e ec       	ldi	r24, 0xCE	; 206
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	fc 01       	movw	r30, r24
    234c:	80 81       	ld	r24, Z
    234e:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    2350:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <_ser_handle+0x2>
    2354:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <_ser_handle+0x3>
    2358:	fc 01       	movw	r30, r24
    235a:	84 81       	ldd	r24, Z+4	; 0x04
    235c:	95 81       	ldd	r25, Z+5	; 0x05
    235e:	69 81       	ldd	r22, Y+1	; 0x01
    2360:	0e 94 92 0a 	call	0x1524	; 0x1524 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    2364:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <_ser_handle+0x2>
    2368:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <_ser_handle+0x3>
    236c:	fc 01       	movw	r30, r24
    236e:	86 81       	ldd	r24, Z+6	; 0x06
    2370:	97 81       	ldd	r25, Z+7	; 0x07
    2372:	89 2b       	or	r24, r25
    2374:	71 f0       	breq	.+28     	; 0x2392 <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    2376:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <_ser_handle+0x2>
    237a:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <_ser_handle+0x3>
    237e:	fc 01       	movw	r30, r24
    2380:	26 81       	ldd	r18, Z+6	; 0x06
    2382:	37 81       	ldd	r19, Z+7	; 0x07
    2384:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <_ser_handle+0x2>
    2388:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <_ser_handle+0x3>
    238c:	69 81       	ldd	r22, Y+1	; 0x01
    238e:	f9 01       	movw	r30, r18
    2390:	09 95       	icall
		}
	}
}
    2392:	00 00       	nop
    2394:	0f 90       	pop	r0
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	ff 91       	pop	r31
    239c:	ef 91       	pop	r30
    239e:	bf 91       	pop	r27
    23a0:	af 91       	pop	r26
    23a2:	9f 91       	pop	r25
    23a4:	8f 91       	pop	r24
    23a6:	7f 91       	pop	r23
    23a8:	6f 91       	pop	r22
    23aa:	5f 91       	pop	r21
    23ac:	4f 91       	pop	r20
    23ae:	3f 91       	pop	r19
    23b0:	2f 91       	pop	r18
    23b2:	0f 90       	pop	r0
    23b4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    23b8:	0f 90       	pop	r0
    23ba:	1f 90       	pop	r1
    23bc:	18 95       	reti

000023be <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    23be:	1f 92       	push	r1
    23c0:	0f 92       	push	r0
    23c2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    23c6:	0f 92       	push	r0
    23c8:	11 24       	eor	r1, r1
    23ca:	2f 93       	push	r18
    23cc:	3f 93       	push	r19
    23ce:	4f 93       	push	r20
    23d0:	5f 93       	push	r21
    23d2:	6f 93       	push	r22
    23d4:	7f 93       	push	r23
    23d6:	8f 93       	push	r24
    23d8:	9f 93       	push	r25
    23da:	af 93       	push	r26
    23dc:	bf 93       	push	r27
    23de:	ef 93       	push	r30
    23e0:	ff 93       	push	r31
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	1f 92       	push	r1
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    23ec:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <_ser_handle+0x2>
    23f0:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <_ser_handle+0x3>
    23f4:	89 2b       	or	r24, r25
    23f6:	f9 f0       	breq	.+62     	; 0x2436 <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    23f8:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <_ser_handle+0x2>
    23fc:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <_ser_handle+0x3>
    2400:	fc 01       	movw	r30, r24
    2402:	82 81       	ldd	r24, Z+2	; 0x02
    2404:	93 81       	ldd	r25, Z+3	; 0x03
    2406:	9e 01       	movw	r18, r28
    2408:	2f 5f       	subi	r18, 0xFF	; 255
    240a:	3f 4f       	sbci	r19, 0xFF	; 255
    240c:	b9 01       	movw	r22, r18
    240e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <buffer_get_item>
    2412:	88 23       	and	r24, r24
    2414:	31 f4       	brne	.+12     	; 0x2422 <__vector_29+0x64>
			UDR1 = item;
    2416:	8e ec       	ldi	r24, 0xCE	; 206
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	29 81       	ldd	r18, Y+1	; 0x01
    241c:	fc 01       	movw	r30, r24
    241e:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    2420:	13 c0       	rjmp	.+38     	; 0x2448 <__vector_29+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
			UDR1 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    2422:	89 ec       	ldi	r24, 0xC9	; 201
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	29 ec       	ldi	r18, 0xC9	; 201
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	f9 01       	movw	r30, r18
    242c:	20 81       	ld	r18, Z
    242e:	2f 7d       	andi	r18, 0xDF	; 223
    2430:	fc 01       	movw	r30, r24
    2432:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    2434:	09 c0       	rjmp	.+18     	; 0x2448 <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    2436:	89 ec       	ldi	r24, 0xC9	; 201
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	29 ec       	ldi	r18, 0xC9	; 201
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	f9 01       	movw	r30, r18
    2440:	20 81       	ld	r18, Z
    2442:	2f 7d       	andi	r18, 0xDF	; 223
    2444:	fc 01       	movw	r30, r24
    2446:	20 83       	st	Z, r18
	}
}
    2448:	00 00       	nop
    244a:	0f 90       	pop	r0
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	ff 91       	pop	r31
    2452:	ef 91       	pop	r30
    2454:	bf 91       	pop	r27
    2456:	af 91       	pop	r26
    2458:	9f 91       	pop	r25
    245a:	8f 91       	pop	r24
    245c:	7f 91       	pop	r23
    245e:	6f 91       	pop	r22
    2460:	5f 91       	pop	r21
    2462:	4f 91       	pop	r20
    2464:	3f 91       	pop	r19
    2466:	2f 91       	pop	r18
    2468:	0f 90       	pop	r0
    246a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    246e:	0f 90       	pop	r0
    2470:	1f 90       	pop	r1
    2472:	18 95       	reti

00002474 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	00 d0       	rcall	.+0      	; 0x247a <xQueueGenericReset+0x6>
    247a:	00 d0       	rcall	.+0      	; 0x247c <xQueueGenericReset+0x8>
    247c:	1f 92       	push	r1
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	9c 83       	std	Y+4, r25	; 0x04
    2484:	8b 83       	std	Y+3, r24	; 0x03
    2486:	6d 83       	std	Y+5, r22	; 0x05
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	9c 81       	ldd	r25, Y+4	; 0x04
    248c:	9a 83       	std	Y+2, r25	; 0x02
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	0f 92       	push	r0
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	9a 81       	ldd	r25, Y+2	; 0x02
    249a:	fc 01       	movw	r30, r24
    249c:	80 81       	ld	r24, Z
    249e:	91 81       	ldd	r25, Z+1	; 0x01
    24a0:	29 81       	ldd	r18, Y+1	; 0x01
    24a2:	3a 81       	ldd	r19, Y+2	; 0x02
    24a4:	f9 01       	movw	r30, r18
    24a6:	23 8d       	ldd	r18, Z+27	; 0x1b
    24a8:	42 2f       	mov	r20, r18
    24aa:	50 e0       	ldi	r21, 0x00	; 0
    24ac:	29 81       	ldd	r18, Y+1	; 0x01
    24ae:	3a 81       	ldd	r19, Y+2	; 0x02
    24b0:	f9 01       	movw	r30, r18
    24b2:	24 8d       	ldd	r18, Z+28	; 0x1c
    24b4:	22 2f       	mov	r18, r18
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	42 9f       	mul	r20, r18
    24ba:	b0 01       	movw	r22, r0
    24bc:	43 9f       	mul	r20, r19
    24be:	70 0d       	add	r23, r0
    24c0:	52 9f       	mul	r21, r18
    24c2:	70 0d       	add	r23, r0
    24c4:	11 24       	eor	r1, r1
    24c6:	9b 01       	movw	r18, r22
    24c8:	28 0f       	add	r18, r24
    24ca:	39 1f       	adc	r19, r25
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	9a 81       	ldd	r25, Y+2	; 0x02
    24d0:	fc 01       	movw	r30, r24
    24d2:	33 83       	std	Z+3, r19	; 0x03
    24d4:	22 83       	std	Z+2, r18	; 0x02
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	9a 81       	ldd	r25, Y+2	; 0x02
    24da:	fc 01       	movw	r30, r24
    24dc:	12 8e       	std	Z+26, r1	; 0x1a
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	fc 01       	movw	r30, r24
    24e4:	20 81       	ld	r18, Z
    24e6:	31 81       	ldd	r19, Z+1	; 0x01
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	9a 81       	ldd	r25, Y+2	; 0x02
    24ec:	fc 01       	movw	r30, r24
    24ee:	35 83       	std	Z+5, r19	; 0x05
    24f0:	24 83       	std	Z+4, r18	; 0x04
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	9a 81       	ldd	r25, Y+2	; 0x02
    24f6:	fc 01       	movw	r30, r24
    24f8:	80 81       	ld	r24, Z
    24fa:	91 81       	ldd	r25, Z+1	; 0x01
    24fc:	29 81       	ldd	r18, Y+1	; 0x01
    24fe:	3a 81       	ldd	r19, Y+2	; 0x02
    2500:	f9 01       	movw	r30, r18
    2502:	23 8d       	ldd	r18, Z+27	; 0x1b
    2504:	22 2f       	mov	r18, r18
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	a9 01       	movw	r20, r18
    250a:	41 50       	subi	r20, 0x01	; 1
    250c:	51 09       	sbc	r21, r1
    250e:	29 81       	ldd	r18, Y+1	; 0x01
    2510:	3a 81       	ldd	r19, Y+2	; 0x02
    2512:	f9 01       	movw	r30, r18
    2514:	24 8d       	ldd	r18, Z+28	; 0x1c
    2516:	22 2f       	mov	r18, r18
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	42 9f       	mul	r20, r18
    251c:	b0 01       	movw	r22, r0
    251e:	43 9f       	mul	r20, r19
    2520:	70 0d       	add	r23, r0
    2522:	52 9f       	mul	r21, r18
    2524:	70 0d       	add	r23, r0
    2526:	11 24       	eor	r1, r1
    2528:	9b 01       	movw	r18, r22
    252a:	28 0f       	add	r18, r24
    252c:	39 1f       	adc	r19, r25
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	fc 01       	movw	r30, r24
    2534:	37 83       	std	Z+7, r19	; 0x07
    2536:	26 83       	std	Z+6, r18	; 0x06
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	9a 81       	ldd	r25, Y+2	; 0x02
    253c:	2f ef       	ldi	r18, 0xFF	; 255
    253e:	fc 01       	movw	r30, r24
    2540:	25 8f       	std	Z+29, r18	; 0x1d
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	9a 81       	ldd	r25, Y+2	; 0x02
    2546:	2f ef       	ldi	r18, 0xFF	; 255
    2548:	fc 01       	movw	r30, r24
    254a:	26 8f       	std	Z+30, r18	; 0x1e
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	88 23       	and	r24, r24
    2550:	81 f4       	brne	.+32     	; 0x2572 <xQueueGenericReset+0xfe>
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	9a 81       	ldd	r25, Y+2	; 0x02
    2556:	fc 01       	movw	r30, r24
    2558:	80 85       	ldd	r24, Z+8	; 0x08
    255a:	88 23       	and	r24, r24
    255c:	a1 f0       	breq	.+40     	; 0x2586 <xQueueGenericReset+0x112>
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	9a 81       	ldd	r25, Y+2	; 0x02
    2562:	08 96       	adiw	r24, 0x08	; 8
    2564:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <xTaskRemoveFromEventList>
    2568:	88 23       	and	r24, r24
    256a:	69 f0       	breq	.+26     	; 0x2586 <xQueueGenericReset+0x112>
    256c:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vPortYield>
    2570:	0a c0       	rjmp	.+20     	; 0x2586 <xQueueGenericReset+0x112>
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	9a 81       	ldd	r25, Y+2	; 0x02
    2576:	08 96       	adiw	r24, 0x08	; 8
    2578:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <vListInitialise>
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	9a 81       	ldd	r25, Y+2	; 0x02
    2580:	41 96       	adiw	r24, 0x11	; 17
    2582:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <vListInitialise>
    2586:	0f 90       	pop	r0
    2588:	0f be       	out	0x3f, r0	; 63
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	08 95       	ret

0000259c <xQueueGenericCreate>:
    259c:	0f 93       	push	r16
    259e:	1f 93       	push	r17
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	29 97       	sbiw	r28, 0x09	; 9
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
    25b4:	8f 83       	std	Y+7, r24	; 0x07
    25b6:	68 87       	std	Y+8, r22	; 0x08
    25b8:	49 87       	std	Y+9, r20	; 0x09
    25ba:	88 85       	ldd	r24, Y+8	; 0x08
    25bc:	88 23       	and	r24, r24
    25be:	19 f4       	brne	.+6      	; 0x25c6 <xQueueGenericCreate+0x2a>
    25c0:	1a 82       	std	Y+2, r1	; 0x02
    25c2:	19 82       	std	Y+1, r1	; 0x01
    25c4:	0f c0       	rjmp	.+30     	; 0x25e4 <xQueueGenericCreate+0x48>
    25c6:	8f 81       	ldd	r24, Y+7	; 0x07
    25c8:	48 2f       	mov	r20, r24
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	88 85       	ldd	r24, Y+8	; 0x08
    25ce:	28 2f       	mov	r18, r24
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	42 9f       	mul	r20, r18
    25d4:	c0 01       	movw	r24, r0
    25d6:	43 9f       	mul	r20, r19
    25d8:	90 0d       	add	r25, r0
    25da:	52 9f       	mul	r21, r18
    25dc:	90 0d       	add	r25, r0
    25de:	11 24       	eor	r1, r1
    25e0:	9a 83       	std	Y+2, r25	; 0x02
    25e2:	89 83       	std	Y+1, r24	; 0x01
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	81 96       	adiw	r24, 0x21	; 33
    25ea:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <pvPortMalloc>
    25ee:	9c 83       	std	Y+4, r25	; 0x04
    25f0:	8b 83       	std	Y+3, r24	; 0x03
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	9c 81       	ldd	r25, Y+4	; 0x04
    25f6:	89 2b       	or	r24, r25
    25f8:	81 f0       	breq	.+32     	; 0x261a <xQueueGenericCreate+0x7e>
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	9c 81       	ldd	r25, Y+4	; 0x04
    25fe:	81 96       	adiw	r24, 0x21	; 33
    2600:	9e 83       	std	Y+6, r25	; 0x06
    2602:	8d 83       	std	Y+5, r24	; 0x05
    2604:	2b 81       	ldd	r18, Y+3	; 0x03
    2606:	3c 81       	ldd	r19, Y+4	; 0x04
    2608:	8d 81       	ldd	r24, Y+5	; 0x05
    260a:	9e 81       	ldd	r25, Y+6	; 0x06
    260c:	89 01       	movw	r16, r18
    260e:	29 85       	ldd	r18, Y+9	; 0x09
    2610:	ac 01       	movw	r20, r24
    2612:	68 85       	ldd	r22, Y+8	; 0x08
    2614:	8f 81       	ldd	r24, Y+7	; 0x07
    2616:	0e 94 1a 13 	call	0x2634	; 0x2634 <prvInitialiseNewQueue>
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	9c 81       	ldd	r25, Y+4	; 0x04
    261e:	29 96       	adiw	r28, 0x09	; 9
    2620:	0f b6       	in	r0, 0x3f	; 63
    2622:	f8 94       	cli
    2624:	de bf       	out	0x3e, r29	; 62
    2626:	0f be       	out	0x3f, r0	; 63
    2628:	cd bf       	out	0x3d, r28	; 61
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	08 95       	ret

00002634 <prvInitialiseNewQueue>:
    2634:	0f 93       	push	r16
    2636:	1f 93       	push	r17
    2638:	cf 93       	push	r28
    263a:	df 93       	push	r29
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    2640:	27 97       	sbiw	r28, 0x07	; 7
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	6a 83       	std	Y+2, r22	; 0x02
    2650:	5c 83       	std	Y+4, r21	; 0x04
    2652:	4b 83       	std	Y+3, r20	; 0x03
    2654:	2d 83       	std	Y+5, r18	; 0x05
    2656:	1f 83       	std	Y+7, r17	; 0x07
    2658:	0e 83       	std	Y+6, r16	; 0x06
    265a:	8a 81       	ldd	r24, Y+2	; 0x02
    265c:	88 23       	and	r24, r24
    265e:	41 f4       	brne	.+16     	; 0x2670 <prvInitialiseNewQueue+0x3c>
    2660:	8e 81       	ldd	r24, Y+6	; 0x06
    2662:	9f 81       	ldd	r25, Y+7	; 0x07
    2664:	2e 81       	ldd	r18, Y+6	; 0x06
    2666:	3f 81       	ldd	r19, Y+7	; 0x07
    2668:	fc 01       	movw	r30, r24
    266a:	31 83       	std	Z+1, r19	; 0x01
    266c:	20 83       	st	Z, r18
    266e:	07 c0       	rjmp	.+14     	; 0x267e <prvInitialiseNewQueue+0x4a>
    2670:	8e 81       	ldd	r24, Y+6	; 0x06
    2672:	9f 81       	ldd	r25, Y+7	; 0x07
    2674:	2b 81       	ldd	r18, Y+3	; 0x03
    2676:	3c 81       	ldd	r19, Y+4	; 0x04
    2678:	fc 01       	movw	r30, r24
    267a:	31 83       	std	Z+1, r19	; 0x01
    267c:	20 83       	st	Z, r18
    267e:	8e 81       	ldd	r24, Y+6	; 0x06
    2680:	9f 81       	ldd	r25, Y+7	; 0x07
    2682:	29 81       	ldd	r18, Y+1	; 0x01
    2684:	fc 01       	movw	r30, r24
    2686:	23 8f       	std	Z+27, r18	; 0x1b
    2688:	8e 81       	ldd	r24, Y+6	; 0x06
    268a:	9f 81       	ldd	r25, Y+7	; 0x07
    268c:	2a 81       	ldd	r18, Y+2	; 0x02
    268e:	fc 01       	movw	r30, r24
    2690:	24 8f       	std	Z+28, r18	; 0x1c
    2692:	8e 81       	ldd	r24, Y+6	; 0x06
    2694:	9f 81       	ldd	r25, Y+7	; 0x07
    2696:	61 e0       	ldi	r22, 0x01	; 1
    2698:	0e 94 3a 12 	call	0x2474	; 0x2474 <xQueueGenericReset>
    269c:	8e 81       	ldd	r24, Y+6	; 0x06
    269e:	9f 81       	ldd	r25, Y+7	; 0x07
    26a0:	2d 81       	ldd	r18, Y+5	; 0x05
    26a2:	fc 01       	movw	r30, r24
    26a4:	20 a3       	std	Z+32, r18	; 0x20
    26a6:	00 00       	nop
    26a8:	27 96       	adiw	r28, 0x07	; 7
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	1f 91       	pop	r17
    26ba:	0f 91       	pop	r16
    26bc:	08 95       	ret

000026be <prvInitialiseMutex>:
    26be:	cf 93       	push	r28
    26c0:	df 93       	push	r29
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <prvInitialiseMutex+0x6>
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	9a 83       	std	Y+2, r25	; 0x02
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	89 2b       	or	r24, r25
    26d2:	b9 f0       	breq	.+46     	; 0x2702 <prvInitialiseMutex+0x44>
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	9a 81       	ldd	r25, Y+2	; 0x02
    26d8:	fc 01       	movw	r30, r24
    26da:	13 82       	std	Z+3, r1	; 0x03
    26dc:	12 82       	std	Z+2, r1	; 0x02
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	9a 81       	ldd	r25, Y+2	; 0x02
    26e2:	fc 01       	movw	r30, r24
    26e4:	11 82       	std	Z+1, r1	; 0x01
    26e6:	10 82       	st	Z, r1
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	fc 01       	movw	r30, r24
    26ee:	16 82       	std	Z+6, r1	; 0x06
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	9a 81       	ldd	r25, Y+2	; 0x02
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	40 e0       	ldi	r20, 0x00	; 0
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	70 e0       	ldi	r23, 0x00	; 0
    26fe:	0e 94 a7 13 	call	0x274e	; 0x274e <xQueueGenericSend>
    2702:	00 00       	nop
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	08 95       	ret

0000270e <xQueueCreateMutex>:
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	00 d0       	rcall	.+0      	; 0x2714 <xQueueCreateMutex+0x6>
    2714:	00 d0       	rcall	.+0      	; 0x2716 <xQueueCreateMutex+0x8>
    2716:	1f 92       	push	r1
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62
    271c:	8d 83       	std	Y+5, r24	; 0x05
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	1a 82       	std	Y+2, r1	; 0x02
    2724:	4d 81       	ldd	r20, Y+5	; 0x05
    2726:	6a 81       	ldd	r22, Y+2	; 0x02
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	0e 94 ce 12 	call	0x259c	; 0x259c <xQueueGenericCreate>
    272e:	9c 83       	std	Y+4, r25	; 0x04
    2730:	8b 83       	std	Y+3, r24	; 0x03
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	9c 81       	ldd	r25, Y+4	; 0x04
    2736:	0e 94 5f 13 	call	0x26be	; 0x26be <prvInitialiseMutex>
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	9c 81       	ldd	r25, Y+4	; 0x04
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	08 95       	ret

0000274e <xQueueGenericSend>:
    274e:	cf 93       	push	r28
    2750:	df 93       	push	r29
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
    2756:	2e 97       	sbiw	r28, 0x0e	; 14
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	f8 94       	cli
    275c:	de bf       	out	0x3e, r29	; 62
    275e:	0f be       	out	0x3f, r0	; 63
    2760:	cd bf       	out	0x3d, r28	; 61
    2762:	99 87       	std	Y+9, r25	; 0x09
    2764:	88 87       	std	Y+8, r24	; 0x08
    2766:	7b 87       	std	Y+11, r23	; 0x0b
    2768:	6a 87       	std	Y+10, r22	; 0x0a
    276a:	5d 87       	std	Y+13, r21	; 0x0d
    276c:	4c 87       	std	Y+12, r20	; 0x0c
    276e:	2e 87       	std	Y+14, r18	; 0x0e
    2770:	19 82       	std	Y+1, r1	; 0x01
    2772:	88 85       	ldd	r24, Y+8	; 0x08
    2774:	99 85       	ldd	r25, Y+9	; 0x09
    2776:	9b 83       	std	Y+3, r25	; 0x03
    2778:	8a 83       	std	Y+2, r24	; 0x02
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	0f 92       	push	r0
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	9b 81       	ldd	r25, Y+3	; 0x03
    2784:	fc 01       	movw	r30, r24
    2786:	22 8d       	ldd	r18, Z+26	; 0x1a
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	9b 81       	ldd	r25, Y+3	; 0x03
    278c:	fc 01       	movw	r30, r24
    278e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2790:	28 17       	cp	r18, r24
    2792:	18 f0       	brcs	.+6      	; 0x279a <xQueueGenericSend+0x4c>
    2794:	8e 85       	ldd	r24, Y+14	; 0x0e
    2796:	82 30       	cpi	r24, 0x02	; 2
    2798:	11 f5       	brne	.+68     	; 0x27de <xQueueGenericSend+0x90>
    279a:	2a 85       	ldd	r18, Y+10	; 0x0a
    279c:	3b 85       	ldd	r19, Y+11	; 0x0b
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	9b 81       	ldd	r25, Y+3	; 0x03
    27a2:	4e 85       	ldd	r20, Y+14	; 0x0e
    27a4:	b9 01       	movw	r22, r18
    27a6:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <prvCopyDataToQueue>
    27aa:	8c 83       	std	Y+4, r24	; 0x04
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	9b 81       	ldd	r25, Y+3	; 0x03
    27b0:	fc 01       	movw	r30, r24
    27b2:	81 89       	ldd	r24, Z+17	; 0x11
    27b4:	88 23       	and	r24, r24
    27b6:	51 f0       	breq	.+20     	; 0x27cc <xQueueGenericSend+0x7e>
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	9b 81       	ldd	r25, Y+3	; 0x03
    27bc:	41 96       	adiw	r24, 0x11	; 17
    27be:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <xTaskRemoveFromEventList>
    27c2:	88 23       	and	r24, r24
    27c4:	41 f0       	breq	.+16     	; 0x27d6 <xQueueGenericSend+0x88>
    27c6:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vPortYield>
    27ca:	05 c0       	rjmp	.+10     	; 0x27d6 <xQueueGenericSend+0x88>
    27cc:	8c 81       	ldd	r24, Y+4	; 0x04
    27ce:	88 23       	and	r24, r24
    27d0:	11 f0       	breq	.+4      	; 0x27d6 <xQueueGenericSend+0x88>
    27d2:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vPortYield>
    27d6:	0f 90       	pop	r0
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	60 c0       	rjmp	.+192    	; 0x289e <xQueueGenericSend+0x150>
    27de:	8c 85       	ldd	r24, Y+12	; 0x0c
    27e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    27e2:	89 2b       	or	r24, r25
    27e4:	21 f4       	brne	.+8      	; 0x27ee <xQueueGenericSend+0xa0>
    27e6:	0f 90       	pop	r0
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	58 c0       	rjmp	.+176    	; 0x289e <xQueueGenericSend+0x150>
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	88 23       	and	r24, r24
    27f2:	31 f4       	brne	.+12     	; 0x2800 <xQueueGenericSend+0xb2>
    27f4:	ce 01       	movw	r24, r28
    27f6:	05 96       	adiw	r24, 0x05	; 5
    27f8:	0e 94 48 1c 	call	0x3890	; 0x3890 <vTaskSetTimeOutState>
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	0f 90       	pop	r0
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	0e 94 a1 19 	call	0x3342	; 0x3342 <vTaskSuspendAll>
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	0f 92       	push	r0
    280e:	8a 81       	ldd	r24, Y+2	; 0x02
    2810:	9b 81       	ldd	r25, Y+3	; 0x03
    2812:	fc 01       	movw	r30, r24
    2814:	85 8d       	ldd	r24, Z+29	; 0x1d
    2816:	8f 3f       	cpi	r24, 0xFF	; 255
    2818:	21 f4       	brne	.+8      	; 0x2822 <xQueueGenericSend+0xd4>
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	9b 81       	ldd	r25, Y+3	; 0x03
    281e:	fc 01       	movw	r30, r24
    2820:	15 8e       	std	Z+29, r1	; 0x1d
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	9b 81       	ldd	r25, Y+3	; 0x03
    2826:	fc 01       	movw	r30, r24
    2828:	86 8d       	ldd	r24, Z+30	; 0x1e
    282a:	8f 3f       	cpi	r24, 0xFF	; 255
    282c:	21 f4       	brne	.+8      	; 0x2836 <xQueueGenericSend+0xe8>
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	9b 81       	ldd	r25, Y+3	; 0x03
    2832:	fc 01       	movw	r30, r24
    2834:	16 8e       	std	Z+30, r1	; 0x1e
    2836:	0f 90       	pop	r0
    2838:	0f be       	out	0x3f, r0	; 63
    283a:	9e 01       	movw	r18, r28
    283c:	24 5f       	subi	r18, 0xF4	; 244
    283e:	3f 4f       	sbci	r19, 0xFF	; 255
    2840:	ce 01       	movw	r24, r28
    2842:	05 96       	adiw	r24, 0x05	; 5
    2844:	b9 01       	movw	r22, r18
    2846:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <xTaskCheckForTimeOut>
    284a:	88 23       	and	r24, r24
    284c:	09 f5       	brne	.+66     	; 0x2890 <xQueueGenericSend+0x142>
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	9b 81       	ldd	r25, Y+3	; 0x03
    2852:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <prvIsQueueFull>
    2856:	88 23       	and	r24, r24
    2858:	a1 f0       	breq	.+40     	; 0x2882 <xQueueGenericSend+0x134>
    285a:	2c 85       	ldd	r18, Y+12	; 0x0c
    285c:	3d 85       	ldd	r19, Y+13	; 0x0d
    285e:	8a 81       	ldd	r24, Y+2	; 0x02
    2860:	9b 81       	ldd	r25, Y+3	; 0x03
    2862:	08 96       	adiw	r24, 0x08	; 8
    2864:	b9 01       	movw	r22, r18
    2866:	0e 94 b8 1b 	call	0x3770	; 0x3770 <vTaskPlaceOnEventList>
    286a:	8a 81       	ldd	r24, Y+2	; 0x02
    286c:	9b 81       	ldd	r25, Y+3	; 0x03
    286e:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <prvUnlockQueue>
    2872:	0e 94 ae 19 	call	0x335c	; 0x335c <xTaskResumeAll>
    2876:	88 23       	and	r24, r24
    2878:	09 f0       	breq	.+2      	; 0x287c <xQueueGenericSend+0x12e>
    287a:	7f cf       	rjmp	.-258    	; 0x277a <xQueueGenericSend+0x2c>
    287c:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vPortYield>
    2880:	7c cf       	rjmp	.-264    	; 0x277a <xQueueGenericSend+0x2c>
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	9b 81       	ldd	r25, Y+3	; 0x03
    2886:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <prvUnlockQueue>
    288a:	0e 94 ae 19 	call	0x335c	; 0x335c <xTaskResumeAll>
    288e:	75 cf       	rjmp	.-278    	; 0x277a <xQueueGenericSend+0x2c>
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	9b 81       	ldd	r25, Y+3	; 0x03
    2894:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <prvUnlockQueue>
    2898:	0e 94 ae 19 	call	0x335c	; 0x335c <xTaskResumeAll>
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	2e 96       	adiw	r28, 0x0e	; 14
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	df 91       	pop	r29
    28ac:	cf 91       	pop	r28
    28ae:	08 95       	ret

000028b0 <xQueueGenericSendFromISR>:
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    28b8:	2c 97       	sbiw	r28, 0x0c	; 12
    28ba:	0f b6       	in	r0, 0x3f	; 63
    28bc:	f8 94       	cli
    28be:	de bf       	out	0x3e, r29	; 62
    28c0:	0f be       	out	0x3f, r0	; 63
    28c2:	cd bf       	out	0x3d, r28	; 61
    28c4:	9f 83       	std	Y+7, r25	; 0x07
    28c6:	8e 83       	std	Y+6, r24	; 0x06
    28c8:	79 87       	std	Y+9, r23	; 0x09
    28ca:	68 87       	std	Y+8, r22	; 0x08
    28cc:	5b 87       	std	Y+11, r21	; 0x0b
    28ce:	4a 87       	std	Y+10, r20	; 0x0a
    28d0:	2c 87       	std	Y+12, r18	; 0x0c
    28d2:	8e 81       	ldd	r24, Y+6	; 0x06
    28d4:	9f 81       	ldd	r25, Y+7	; 0x07
    28d6:	9b 83       	std	Y+3, r25	; 0x03
    28d8:	8a 83       	std	Y+2, r24	; 0x02
    28da:	1c 82       	std	Y+4, r1	; 0x04
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	9b 81       	ldd	r25, Y+3	; 0x03
    28e0:	fc 01       	movw	r30, r24
    28e2:	22 8d       	ldd	r18, Z+26	; 0x1a
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	9b 81       	ldd	r25, Y+3	; 0x03
    28e8:	fc 01       	movw	r30, r24
    28ea:	83 8d       	ldd	r24, Z+27	; 0x1b
    28ec:	28 17       	cp	r18, r24
    28ee:	18 f0       	brcs	.+6      	; 0x28f6 <xQueueGenericSendFromISR+0x46>
    28f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    28f2:	82 30       	cpi	r24, 0x02	; 2
    28f4:	89 f5       	brne	.+98     	; 0x2958 <xQueueGenericSendFromISR+0xa8>
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	9b 81       	ldd	r25, Y+3	; 0x03
    28fa:	fc 01       	movw	r30, r24
    28fc:	86 8d       	ldd	r24, Z+30	; 0x1e
    28fe:	8d 83       	std	Y+5, r24	; 0x05
    2900:	28 85       	ldd	r18, Y+8	; 0x08
    2902:	39 85       	ldd	r19, Y+9	; 0x09
    2904:	8a 81       	ldd	r24, Y+2	; 0x02
    2906:	9b 81       	ldd	r25, Y+3	; 0x03
    2908:	4c 85       	ldd	r20, Y+12	; 0x0c
    290a:	b9 01       	movw	r22, r18
    290c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <prvCopyDataToQueue>
    2910:	8d 81       	ldd	r24, Y+5	; 0x05
    2912:	8f 3f       	cpi	r24, 0xFF	; 255
    2914:	b9 f4       	brne	.+46     	; 0x2944 <xQueueGenericSendFromISR+0x94>
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	9b 81       	ldd	r25, Y+3	; 0x03
    291a:	fc 01       	movw	r30, r24
    291c:	81 89       	ldd	r24, Z+17	; 0x11
    291e:	88 23       	and	r24, r24
    2920:	c1 f0       	breq	.+48     	; 0x2952 <xQueueGenericSendFromISR+0xa2>
    2922:	8a 81       	ldd	r24, Y+2	; 0x02
    2924:	9b 81       	ldd	r25, Y+3	; 0x03
    2926:	41 96       	adiw	r24, 0x11	; 17
    2928:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <xTaskRemoveFromEventList>
    292c:	88 23       	and	r24, r24
    292e:	89 f0       	breq	.+34     	; 0x2952 <xQueueGenericSendFromISR+0xa2>
    2930:	8a 85       	ldd	r24, Y+10	; 0x0a
    2932:	9b 85       	ldd	r25, Y+11	; 0x0b
    2934:	89 2b       	or	r24, r25
    2936:	69 f0       	breq	.+26     	; 0x2952 <xQueueGenericSendFromISR+0xa2>
    2938:	8a 85       	ldd	r24, Y+10	; 0x0a
    293a:	9b 85       	ldd	r25, Y+11	; 0x0b
    293c:	21 e0       	ldi	r18, 0x01	; 1
    293e:	fc 01       	movw	r30, r24
    2940:	20 83       	st	Z, r18
    2942:	07 c0       	rjmp	.+14     	; 0x2952 <xQueueGenericSendFromISR+0xa2>
    2944:	8d 81       	ldd	r24, Y+5	; 0x05
    2946:	8f 5f       	subi	r24, 0xFF	; 255
    2948:	28 2f       	mov	r18, r24
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	9b 81       	ldd	r25, Y+3	; 0x03
    294e:	fc 01       	movw	r30, r24
    2950:	26 8f       	std	Z+30, r18	; 0x1e
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	89 83       	std	Y+1, r24	; 0x01
    2956:	01 c0       	rjmp	.+2      	; 0x295a <xQueueGenericSendFromISR+0xaa>
    2958:	19 82       	std	Y+1, r1	; 0x01
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	2c 96       	adiw	r28, 0x0c	; 12
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	08 95       	ret

0000296e <xQueueGenericReceive>:
    296e:	cf 93       	push	r28
    2970:	df 93       	push	r29
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
    2976:	60 97       	sbiw	r28, 0x10	; 16
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	9b 87       	std	Y+11, r25	; 0x0b
    2984:	8a 87       	std	Y+10, r24	; 0x0a
    2986:	7d 87       	std	Y+13, r23	; 0x0d
    2988:	6c 87       	std	Y+12, r22	; 0x0c
    298a:	5f 87       	std	Y+15, r21	; 0x0f
    298c:	4e 87       	std	Y+14, r20	; 0x0e
    298e:	28 8b       	std	Y+16, r18	; 0x10
    2990:	19 82       	std	Y+1, r1	; 0x01
    2992:	8a 85       	ldd	r24, Y+10	; 0x0a
    2994:	9b 85       	ldd	r25, Y+11	; 0x0b
    2996:	9b 83       	std	Y+3, r25	; 0x03
    2998:	8a 83       	std	Y+2, r24	; 0x02
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	0f 92       	push	r0
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	9b 81       	ldd	r25, Y+3	; 0x03
    29a4:	fc 01       	movw	r30, r24
    29a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    29a8:	8c 83       	std	Y+4, r24	; 0x04
    29aa:	8c 81       	ldd	r24, Y+4	; 0x04
    29ac:	88 23       	and	r24, r24
    29ae:	09 f4       	brne	.+2      	; 0x29b2 <xQueueGenericReceive+0x44>
    29b0:	51 c0       	rjmp	.+162    	; 0x2a54 <xQueueGenericReceive+0xe6>
    29b2:	8a 81       	ldd	r24, Y+2	; 0x02
    29b4:	9b 81       	ldd	r25, Y+3	; 0x03
    29b6:	fc 01       	movw	r30, r24
    29b8:	86 81       	ldd	r24, Z+6	; 0x06
    29ba:	97 81       	ldd	r25, Z+7	; 0x07
    29bc:	9e 83       	std	Y+6, r25	; 0x06
    29be:	8d 83       	std	Y+5, r24	; 0x05
    29c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    29c2:	3d 85       	ldd	r19, Y+13	; 0x0d
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	9b 81       	ldd	r25, Y+3	; 0x03
    29c8:	b9 01       	movw	r22, r18
    29ca:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <prvCopyDataFromQueue>
    29ce:	88 89       	ldd	r24, Y+16	; 0x10
    29d0:	88 23       	and	r24, r24
    29d2:	31 f5       	brne	.+76     	; 0x2a20 <xQueueGenericReceive+0xb2>
    29d4:	8c 81       	ldd	r24, Y+4	; 0x04
    29d6:	2f ef       	ldi	r18, 0xFF	; 255
    29d8:	28 0f       	add	r18, r24
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	9b 81       	ldd	r25, Y+3	; 0x03
    29de:	fc 01       	movw	r30, r24
    29e0:	22 8f       	std	Z+26, r18	; 0x1a
    29e2:	8a 81       	ldd	r24, Y+2	; 0x02
    29e4:	9b 81       	ldd	r25, Y+3	; 0x03
    29e6:	fc 01       	movw	r30, r24
    29e8:	80 81       	ld	r24, Z
    29ea:	91 81       	ldd	r25, Z+1	; 0x01
    29ec:	89 2b       	or	r24, r25
    29ee:	41 f4       	brne	.+16     	; 0x2a00 <xQueueGenericReceive+0x92>
    29f0:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <pvTaskIncrementMutexHeldCount>
    29f4:	9c 01       	movw	r18, r24
    29f6:	8a 81       	ldd	r24, Y+2	; 0x02
    29f8:	9b 81       	ldd	r25, Y+3	; 0x03
    29fa:	fc 01       	movw	r30, r24
    29fc:	33 83       	std	Z+3, r19	; 0x03
    29fe:	22 83       	std	Z+2, r18	; 0x02
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	9b 81       	ldd	r25, Y+3	; 0x03
    2a04:	fc 01       	movw	r30, r24
    2a06:	80 85       	ldd	r24, Z+8	; 0x08
    2a08:	88 23       	and	r24, r24
    2a0a:	01 f1       	breq	.+64     	; 0x2a4c <xQueueGenericReceive+0xde>
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a10:	08 96       	adiw	r24, 0x08	; 8
    2a12:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <xTaskRemoveFromEventList>
    2a16:	88 23       	and	r24, r24
    2a18:	c9 f0       	breq	.+50     	; 0x2a4c <xQueueGenericReceive+0xde>
    2a1a:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vPortYield>
    2a1e:	16 c0       	rjmp	.+44     	; 0x2a4c <xQueueGenericReceive+0xde>
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	9b 81       	ldd	r25, Y+3	; 0x03
    2a24:	2d 81       	ldd	r18, Y+5	; 0x05
    2a26:	3e 81       	ldd	r19, Y+6	; 0x06
    2a28:	fc 01       	movw	r30, r24
    2a2a:	37 83       	std	Z+7, r19	; 0x07
    2a2c:	26 83       	std	Z+6, r18	; 0x06
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	9b 81       	ldd	r25, Y+3	; 0x03
    2a32:	fc 01       	movw	r30, r24
    2a34:	81 89       	ldd	r24, Z+17	; 0x11
    2a36:	88 23       	and	r24, r24
    2a38:	49 f0       	breq	.+18     	; 0x2a4c <xQueueGenericReceive+0xde>
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3e:	41 96       	adiw	r24, 0x11	; 17
    2a40:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <xTaskRemoveFromEventList>
    2a44:	88 23       	and	r24, r24
    2a46:	11 f0       	breq	.+4      	; 0x2a4c <xQueueGenericReceive+0xde>
    2a48:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vPortYield>
    2a4c:	0f 90       	pop	r0
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	7a c0       	rjmp	.+244    	; 0x2b48 <xQueueGenericReceive+0x1da>
    2a54:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a56:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a58:	89 2b       	or	r24, r25
    2a5a:	21 f4       	brne	.+8      	; 0x2a64 <xQueueGenericReceive+0xf6>
    2a5c:	0f 90       	pop	r0
    2a5e:	0f be       	out	0x3f, r0	; 63
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	72 c0       	rjmp	.+228    	; 0x2b48 <xQueueGenericReceive+0x1da>
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	88 23       	and	r24, r24
    2a68:	31 f4       	brne	.+12     	; 0x2a76 <xQueueGenericReceive+0x108>
    2a6a:	ce 01       	movw	r24, r28
    2a6c:	07 96       	adiw	r24, 0x07	; 7
    2a6e:	0e 94 48 1c 	call	0x3890	; 0x3890 <vTaskSetTimeOutState>
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	89 83       	std	Y+1, r24	; 0x01
    2a76:	0f 90       	pop	r0
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	0e 94 a1 19 	call	0x3342	; 0x3342 <vTaskSuspendAll>
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	0f 92       	push	r0
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	9b 81       	ldd	r25, Y+3	; 0x03
    2a88:	fc 01       	movw	r30, r24
    2a8a:	85 8d       	ldd	r24, Z+29	; 0x1d
    2a8c:	8f 3f       	cpi	r24, 0xFF	; 255
    2a8e:	21 f4       	brne	.+8      	; 0x2a98 <xQueueGenericReceive+0x12a>
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	9b 81       	ldd	r25, Y+3	; 0x03
    2a94:	fc 01       	movw	r30, r24
    2a96:	15 8e       	std	Z+29, r1	; 0x1d
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2aa0:	8f 3f       	cpi	r24, 0xFF	; 255
    2aa2:	21 f4       	brne	.+8      	; 0x2aac <xQueueGenericReceive+0x13e>
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	16 8e       	std	Z+30, r1	; 0x1e
    2aac:	0f 90       	pop	r0
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	9e 01       	movw	r18, r28
    2ab2:	22 5f       	subi	r18, 0xF2	; 242
    2ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab6:	ce 01       	movw	r24, r28
    2ab8:	07 96       	adiw	r24, 0x07	; 7
    2aba:	b9 01       	movw	r22, r18
    2abc:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <xTaskCheckForTimeOut>
    2ac0:	88 23       	and	r24, r24
    2ac2:	a1 f5       	brne	.+104    	; 0x2b2c <xQueueGenericReceive+0x1be>
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac8:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <prvIsQueueEmpty>
    2acc:	88 23       	and	r24, r24
    2ace:	39 f1       	breq	.+78     	; 0x2b1e <xQueueGenericReceive+0x1b0>
    2ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	80 81       	ld	r24, Z
    2ad8:	91 81       	ldd	r25, Z+1	; 0x01
    2ada:	89 2b       	or	r24, r25
    2adc:	61 f4       	brne	.+24     	; 0x2af6 <xQueueGenericReceive+0x188>
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	0f 92       	push	r0
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae8:	fc 01       	movw	r30, r24
    2aea:	82 81       	ldd	r24, Z+2	; 0x02
    2aec:	93 81       	ldd	r25, Z+3	; 0x03
    2aee:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <vTaskPriorityInherit>
    2af2:	0f 90       	pop	r0
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	2e 85       	ldd	r18, Y+14	; 0x0e
    2af8:	3f 85       	ldd	r19, Y+15	; 0x0f
    2afa:	8a 81       	ldd	r24, Y+2	; 0x02
    2afc:	9b 81       	ldd	r25, Y+3	; 0x03
    2afe:	41 96       	adiw	r24, 0x11	; 17
    2b00:	b9 01       	movw	r22, r18
    2b02:	0e 94 b8 1b 	call	0x3770	; 0x3770 <vTaskPlaceOnEventList>
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0a:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <prvUnlockQueue>
    2b0e:	0e 94 ae 19 	call	0x335c	; 0x335c <xTaskResumeAll>
    2b12:	88 23       	and	r24, r24
    2b14:	09 f0       	breq	.+2      	; 0x2b18 <xQueueGenericReceive+0x1aa>
    2b16:	41 cf       	rjmp	.-382    	; 0x299a <xQueueGenericReceive+0x2c>
    2b18:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vPortYield>
    2b1c:	3e cf       	rjmp	.-388    	; 0x299a <xQueueGenericReceive+0x2c>
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	9b 81       	ldd	r25, Y+3	; 0x03
    2b22:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <prvUnlockQueue>
    2b26:	0e 94 ae 19 	call	0x335c	; 0x335c <xTaskResumeAll>
    2b2a:	37 cf       	rjmp	.-402    	; 0x299a <xQueueGenericReceive+0x2c>
    2b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b30:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <prvUnlockQueue>
    2b34:	0e 94 ae 19 	call	0x335c	; 0x335c <xTaskResumeAll>
    2b38:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3c:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <prvIsQueueEmpty>
    2b40:	88 23       	and	r24, r24
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <xQueueGenericReceive+0x1d8>
    2b44:	2a cf       	rjmp	.-428    	; 0x299a <xQueueGenericReceive+0x2c>
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	60 96       	adiw	r28, 0x10	; 16
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	f8 94       	cli
    2b4e:	de bf       	out	0x3e, r29	; 62
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	cd bf       	out	0x3d, r28	; 61
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	08 95       	ret

00002b5a <prvCopyDataToQueue>:
    2b5a:	cf 93       	push	r28
    2b5c:	df 93       	push	r29
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	27 97       	sbiw	r28, 0x07	; 7
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	9c 83       	std	Y+4, r25	; 0x04
    2b70:	8b 83       	std	Y+3, r24	; 0x03
    2b72:	7e 83       	std	Y+6, r23	; 0x06
    2b74:	6d 83       	std	Y+5, r22	; 0x05
    2b76:	4f 83       	std	Y+7, r20	; 0x07
    2b78:	19 82       	std	Y+1, r1	; 0x01
    2b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7e:	fc 01       	movw	r30, r24
    2b80:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b82:	8a 83       	std	Y+2, r24	; 0x02
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	9c 81       	ldd	r25, Y+4	; 0x04
    2b88:	fc 01       	movw	r30, r24
    2b8a:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b8c:	88 23       	and	r24, r24
    2b8e:	b1 f4       	brne	.+44     	; 0x2bbc <prvCopyDataToQueue+0x62>
    2b90:	8b 81       	ldd	r24, Y+3	; 0x03
    2b92:	9c 81       	ldd	r25, Y+4	; 0x04
    2b94:	fc 01       	movw	r30, r24
    2b96:	80 81       	ld	r24, Z
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	89 2b       	or	r24, r25
    2b9c:	09 f0       	breq	.+2      	; 0x2ba0 <prvCopyDataToQueue+0x46>
    2b9e:	9c c0       	rjmp	.+312    	; 0x2cd8 <prvCopyDataToQueue+0x17e>
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	82 81       	ldd	r24, Z+2	; 0x02
    2ba8:	93 81       	ldd	r25, Z+3	; 0x03
    2baa:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <xTaskPriorityDisinherit>
    2bae:	89 83       	std	Y+1, r24	; 0x01
    2bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	13 82       	std	Z+3, r1	; 0x03
    2bb8:	12 82       	std	Z+2, r1	; 0x02
    2bba:	8e c0       	rjmp	.+284    	; 0x2cd8 <prvCopyDataToQueue+0x17e>
    2bbc:	8f 81       	ldd	r24, Y+7	; 0x07
    2bbe:	88 23       	and	r24, r24
    2bc0:	d9 f5       	brne	.+118    	; 0x2c38 <prvCopyDataToQueue+0xde>
    2bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	84 8d       	ldd	r24, Z+28	; 0x1c
    2bca:	48 2f       	mov	r20, r24
    2bcc:	50 e0       	ldi	r21, 0x00	; 0
    2bce:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	84 81       	ldd	r24, Z+4	; 0x04
    2bd6:	95 81       	ldd	r25, Z+5	; 0x05
    2bd8:	2d 81       	ldd	r18, Y+5	; 0x05
    2bda:	3e 81       	ldd	r19, Y+6	; 0x06
    2bdc:	b9 01       	movw	r22, r18
    2bde:	0e 94 24 24 	call	0x4848	; 0x4848 <memcpy>
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	9c 81       	ldd	r25, Y+4	; 0x04
    2be6:	fc 01       	movw	r30, r24
    2be8:	24 81       	ldd	r18, Z+4	; 0x04
    2bea:	35 81       	ldd	r19, Z+5	; 0x05
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	84 8d       	ldd	r24, Z+28	; 0x1c
    2bf4:	88 2f       	mov	r24, r24
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	28 0f       	add	r18, r24
    2bfa:	39 1f       	adc	r19, r25
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2c00:	fc 01       	movw	r30, r24
    2c02:	35 83       	std	Z+5, r19	; 0x05
    2c04:	24 83       	std	Z+4, r18	; 0x04
    2c06:	8b 81       	ldd	r24, Y+3	; 0x03
    2c08:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	24 81       	ldd	r18, Z+4	; 0x04
    2c0e:	35 81       	ldd	r19, Z+5	; 0x05
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	9c 81       	ldd	r25, Y+4	; 0x04
    2c14:	fc 01       	movw	r30, r24
    2c16:	82 81       	ldd	r24, Z+2	; 0x02
    2c18:	93 81       	ldd	r25, Z+3	; 0x03
    2c1a:	28 17       	cp	r18, r24
    2c1c:	39 07       	cpc	r19, r25
    2c1e:	08 f4       	brcc	.+2      	; 0x2c22 <prvCopyDataToQueue+0xc8>
    2c20:	5b c0       	rjmp	.+182    	; 0x2cd8 <prvCopyDataToQueue+0x17e>
    2c22:	8b 81       	ldd	r24, Y+3	; 0x03
    2c24:	9c 81       	ldd	r25, Y+4	; 0x04
    2c26:	fc 01       	movw	r30, r24
    2c28:	20 81       	ld	r18, Z
    2c2a:	31 81       	ldd	r19, Z+1	; 0x01
    2c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c30:	fc 01       	movw	r30, r24
    2c32:	35 83       	std	Z+5, r19	; 0x05
    2c34:	24 83       	std	Z+4, r18	; 0x04
    2c36:	50 c0       	rjmp	.+160    	; 0x2cd8 <prvCopyDataToQueue+0x17e>
    2c38:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c40:	48 2f       	mov	r20, r24
    2c42:	50 e0       	ldi	r21, 0x00	; 0
    2c44:	8b 81       	ldd	r24, Y+3	; 0x03
    2c46:	9c 81       	ldd	r25, Y+4	; 0x04
    2c48:	fc 01       	movw	r30, r24
    2c4a:	86 81       	ldd	r24, Z+6	; 0x06
    2c4c:	97 81       	ldd	r25, Z+7	; 0x07
    2c4e:	2d 81       	ldd	r18, Y+5	; 0x05
    2c50:	3e 81       	ldd	r19, Y+6	; 0x06
    2c52:	b9 01       	movw	r22, r18
    2c54:	0e 94 24 24 	call	0x4848	; 0x4848 <memcpy>
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	26 81       	ldd	r18, Z+6	; 0x06
    2c60:	37 81       	ldd	r19, Z+7	; 0x07
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	9c 81       	ldd	r25, Y+4	; 0x04
    2c66:	fc 01       	movw	r30, r24
    2c68:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c6a:	88 2f       	mov	r24, r24
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	91 95       	neg	r25
    2c70:	81 95       	neg	r24
    2c72:	91 09       	sbc	r25, r1
    2c74:	28 0f       	add	r18, r24
    2c76:	39 1f       	adc	r19, r25
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	37 83       	std	Z+7, r19	; 0x07
    2c80:	26 83       	std	Z+6, r18	; 0x06
    2c82:	8b 81       	ldd	r24, Y+3	; 0x03
    2c84:	9c 81       	ldd	r25, Y+4	; 0x04
    2c86:	fc 01       	movw	r30, r24
    2c88:	26 81       	ldd	r18, Z+6	; 0x06
    2c8a:	37 81       	ldd	r19, Z+7	; 0x07
    2c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c90:	fc 01       	movw	r30, r24
    2c92:	80 81       	ld	r24, Z
    2c94:	91 81       	ldd	r25, Z+1	; 0x01
    2c96:	28 17       	cp	r18, r24
    2c98:	39 07       	cpc	r19, r25
    2c9a:	a8 f4       	brcc	.+42     	; 0x2cc6 <prvCopyDataToQueue+0x16c>
    2c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca0:	fc 01       	movw	r30, r24
    2ca2:	22 81       	ldd	r18, Z+2	; 0x02
    2ca4:	33 81       	ldd	r19, Z+3	; 0x03
    2ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    2caa:	fc 01       	movw	r30, r24
    2cac:	84 8d       	ldd	r24, Z+28	; 0x1c
    2cae:	88 2f       	mov	r24, r24
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	91 95       	neg	r25
    2cb4:	81 95       	neg	r24
    2cb6:	91 09       	sbc	r25, r1
    2cb8:	28 0f       	add	r18, r24
    2cba:	39 1f       	adc	r19, r25
    2cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	37 83       	std	Z+7, r19	; 0x07
    2cc4:	26 83       	std	Z+6, r18	; 0x06
    2cc6:	8f 81       	ldd	r24, Y+7	; 0x07
    2cc8:	82 30       	cpi	r24, 0x02	; 2
    2cca:	31 f4       	brne	.+12     	; 0x2cd8 <prvCopyDataToQueue+0x17e>
    2ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cce:	88 23       	and	r24, r24
    2cd0:	19 f0       	breq	.+6      	; 0x2cd8 <prvCopyDataToQueue+0x17e>
    2cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd4:	81 50       	subi	r24, 0x01	; 1
    2cd6:	8a 83       	std	Y+2, r24	; 0x02
    2cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cda:	21 e0       	ldi	r18, 0x01	; 1
    2cdc:	28 0f       	add	r18, r24
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	22 8f       	std	Z+26, r18	; 0x1a
    2ce6:	89 81       	ldd	r24, Y+1	; 0x01
    2ce8:	27 96       	adiw	r28, 0x07	; 7
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	df 91       	pop	r29
    2cf6:	cf 91       	pop	r28
    2cf8:	08 95       	ret

00002cfa <prvCopyDataFromQueue>:
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <prvCopyDataFromQueue+0x6>
    2d00:	00 d0       	rcall	.+0      	; 0x2d02 <prvCopyDataFromQueue+0x8>
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
    2d06:	9a 83       	std	Y+2, r25	; 0x02
    2d08:	89 83       	std	Y+1, r24	; 0x01
    2d0a:	7c 83       	std	Y+4, r23	; 0x04
    2d0c:	6b 83       	std	Y+3, r22	; 0x03
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	9a 81       	ldd	r25, Y+2	; 0x02
    2d12:	fc 01       	movw	r30, r24
    2d14:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d16:	88 23       	and	r24, r24
    2d18:	c9 f1       	breq	.+114    	; 0x2d8c <prvCopyDataFromQueue+0x92>
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1e:	fc 01       	movw	r30, r24
    2d20:	26 81       	ldd	r18, Z+6	; 0x06
    2d22:	37 81       	ldd	r19, Z+7	; 0x07
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	9a 81       	ldd	r25, Y+2	; 0x02
    2d28:	fc 01       	movw	r30, r24
    2d2a:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d2c:	88 2f       	mov	r24, r24
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	28 0f       	add	r18, r24
    2d32:	39 1f       	adc	r19, r25
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	9a 81       	ldd	r25, Y+2	; 0x02
    2d38:	fc 01       	movw	r30, r24
    2d3a:	37 83       	std	Z+7, r19	; 0x07
    2d3c:	26 83       	std	Z+6, r18	; 0x06
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	9a 81       	ldd	r25, Y+2	; 0x02
    2d42:	fc 01       	movw	r30, r24
    2d44:	26 81       	ldd	r18, Z+6	; 0x06
    2d46:	37 81       	ldd	r19, Z+7	; 0x07
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	82 81       	ldd	r24, Z+2	; 0x02
    2d50:	93 81       	ldd	r25, Z+3	; 0x03
    2d52:	28 17       	cp	r18, r24
    2d54:	39 07       	cpc	r19, r25
    2d56:	50 f0       	brcs	.+20     	; 0x2d6c <prvCopyDataFromQueue+0x72>
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	20 81       	ld	r18, Z
    2d60:	31 81       	ldd	r19, Z+1	; 0x01
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	9a 81       	ldd	r25, Y+2	; 0x02
    2d66:	fc 01       	movw	r30, r24
    2d68:	37 83       	std	Z+7, r19	; 0x07
    2d6a:	26 83       	std	Z+6, r18	; 0x06
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d70:	fc 01       	movw	r30, r24
    2d72:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d74:	48 2f       	mov	r20, r24
    2d76:	50 e0       	ldi	r21, 0x00	; 0
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	26 81       	ldd	r18, Z+6	; 0x06
    2d80:	37 81       	ldd	r19, Z+7	; 0x07
    2d82:	8b 81       	ldd	r24, Y+3	; 0x03
    2d84:	9c 81       	ldd	r25, Y+4	; 0x04
    2d86:	b9 01       	movw	r22, r18
    2d88:	0e 94 24 24 	call	0x4848	; 0x4848 <memcpy>
    2d8c:	00 00       	nop
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	df 91       	pop	r29
    2d98:	cf 91       	pop	r28
    2d9a:	08 95       	ret

00002d9c <prvUnlockQueue>:
    2d9c:	cf 93       	push	r28
    2d9e:	df 93       	push	r29
    2da0:	00 d0       	rcall	.+0      	; 0x2da2 <prvUnlockQueue+0x6>
    2da2:	00 d0       	rcall	.+0      	; 0x2da4 <prvUnlockQueue+0x8>
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
    2da8:	9c 83       	std	Y+4, r25	; 0x04
    2daa:	8b 83       	std	Y+3, r24	; 0x03
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	f8 94       	cli
    2db0:	0f 92       	push	r0
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	9c 81       	ldd	r25, Y+4	; 0x04
    2db6:	fc 01       	movw	r30, r24
    2db8:	86 8d       	ldd	r24, Z+30	; 0x1e
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	12 c0       	rjmp	.+36     	; 0x2de2 <prvUnlockQueue+0x46>
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	81 89       	ldd	r24, Z+17	; 0x11
    2dc6:	88 23       	and	r24, r24
    2dc8:	81 f0       	breq	.+32     	; 0x2dea <prvUnlockQueue+0x4e>
    2dca:	8b 81       	ldd	r24, Y+3	; 0x03
    2dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dce:	41 96       	adiw	r24, 0x11	; 17
    2dd0:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <xTaskRemoveFromEventList>
    2dd4:	88 23       	and	r24, r24
    2dd6:	11 f0       	breq	.+4      	; 0x2ddc <prvUnlockQueue+0x40>
    2dd8:	0e 94 cc 1c 	call	0x3998	; 0x3998 <vTaskMissedYield>
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	81 50       	subi	r24, 0x01	; 1
    2de0:	89 83       	std	Y+1, r24	; 0x01
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	18 16       	cp	r1, r24
    2de6:	5c f3       	brlt	.-42     	; 0x2dbe <prvUnlockQueue+0x22>
    2de8:	01 c0       	rjmp	.+2      	; 0x2dec <prvUnlockQueue+0x50>
    2dea:	00 00       	nop
    2dec:	8b 81       	ldd	r24, Y+3	; 0x03
    2dee:	9c 81       	ldd	r25, Y+4	; 0x04
    2df0:	2f ef       	ldi	r18, 0xFF	; 255
    2df2:	fc 01       	movw	r30, r24
    2df4:	26 8f       	std	Z+30, r18	; 0x1e
    2df6:	0f 90       	pop	r0
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	0f 92       	push	r0
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	9c 81       	ldd	r25, Y+4	; 0x04
    2e04:	fc 01       	movw	r30, r24
    2e06:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e08:	8a 83       	std	Y+2, r24	; 0x02
    2e0a:	12 c0       	rjmp	.+36     	; 0x2e30 <prvUnlockQueue+0x94>
    2e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e10:	fc 01       	movw	r30, r24
    2e12:	80 85       	ldd	r24, Z+8	; 0x08
    2e14:	88 23       	and	r24, r24
    2e16:	81 f0       	breq	.+32     	; 0x2e38 <prvUnlockQueue+0x9c>
    2e18:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1c:	08 96       	adiw	r24, 0x08	; 8
    2e1e:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <xTaskRemoveFromEventList>
    2e22:	88 23       	and	r24, r24
    2e24:	11 f0       	breq	.+4      	; 0x2e2a <prvUnlockQueue+0x8e>
    2e26:	0e 94 cc 1c 	call	0x3998	; 0x3998 <vTaskMissedYield>
    2e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2c:	81 50       	subi	r24, 0x01	; 1
    2e2e:	8a 83       	std	Y+2, r24	; 0x02
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	18 16       	cp	r1, r24
    2e34:	5c f3       	brlt	.-42     	; 0x2e0c <prvUnlockQueue+0x70>
    2e36:	01 c0       	rjmp	.+2      	; 0x2e3a <prvUnlockQueue+0x9e>
    2e38:	00 00       	nop
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3e:	2f ef       	ldi	r18, 0xFF	; 255
    2e40:	fc 01       	movw	r30, r24
    2e42:	25 8f       	std	Z+29, r18	; 0x1d
    2e44:	0f 90       	pop	r0
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	00 00       	nop
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	0f 90       	pop	r0
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	08 95       	ret

00002e58 <prvIsQueueEmpty>:
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
    2e5c:	00 d0       	rcall	.+0      	; 0x2e5e <prvIsQueueEmpty+0x6>
    2e5e:	1f 92       	push	r1
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
    2e64:	9b 83       	std	Y+3, r25	; 0x03
    2e66:	8a 83       	std	Y+2, r24	; 0x02
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	f8 94       	cli
    2e6c:	0f 92       	push	r0
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	9b 81       	ldd	r25, Y+3	; 0x03
    2e72:	fc 01       	movw	r30, r24
    2e74:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e76:	88 23       	and	r24, r24
    2e78:	19 f4       	brne	.+6      	; 0x2e80 <prvIsQueueEmpty+0x28>
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	89 83       	std	Y+1, r24	; 0x01
    2e7e:	01 c0       	rjmp	.+2      	; 0x2e82 <prvIsQueueEmpty+0x2a>
    2e80:	19 82       	std	Y+1, r1	; 0x01
    2e82:	0f 90       	pop	r0
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	0f 90       	pop	r0
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	df 91       	pop	r29
    2e90:	cf 91       	pop	r28
    2e92:	08 95       	ret

00002e94 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2e94:	cf 93       	push	r28
    2e96:	df 93       	push	r29
    2e98:	00 d0       	rcall	.+0      	; 0x2e9a <prvIsQueueFull+0x6>
    2e9a:	1f 92       	push	r1
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	9b 83       	std	Y+3, r25	; 0x03
    2ea2:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2eac:	9b 81       	ldd	r25, Y+3	; 0x03
    2eae:	fc 01       	movw	r30, r24
    2eb0:	22 8d       	ldd	r18, Z+26	; 0x1a
    2eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	83 8d       	ldd	r24, Z+27	; 0x1b
    2eba:	28 17       	cp	r18, r24
    2ebc:	19 f4       	brne	.+6      	; 0x2ec4 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	89 83       	std	Y+1, r24	; 0x01
    2ec2:	01 c0       	rjmp	.+2      	; 0x2ec6 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    2ec4:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2ec6:	0f 90       	pop	r0
    2ec8:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	0f 90       	pop	r0
    2ed2:	df 91       	pop	r29
    2ed4:	cf 91       	pop	r28
    2ed6:	08 95       	ret

00002ed8 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    2ed8:	8f 92       	push	r8
    2eda:	9f 92       	push	r9
    2edc:	af 92       	push	r10
    2ede:	bf 92       	push	r11
    2ee0:	cf 92       	push	r12
    2ee2:	df 92       	push	r13
    2ee4:	ef 92       	push	r14
    2ee6:	ff 92       	push	r15
    2ee8:	0f 93       	push	r16
    2eea:	1f 93       	push	r17
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62
    2ef4:	60 97       	sbiw	r28, 0x10	; 16
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	f8 94       	cli
    2efa:	de bf       	out	0x3e, r29	; 62
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	cd bf       	out	0x3d, r28	; 61
    2f00:	9f 83       	std	Y+7, r25	; 0x07
    2f02:	8e 83       	std	Y+6, r24	; 0x06
    2f04:	79 87       	std	Y+9, r23	; 0x09
    2f06:	68 87       	std	Y+8, r22	; 0x08
    2f08:	5b 87       	std	Y+11, r21	; 0x0b
    2f0a:	4a 87       	std	Y+10, r20	; 0x0a
    2f0c:	3d 87       	std	Y+13, r19	; 0x0d
    2f0e:	2c 87       	std	Y+12, r18	; 0x0c
    2f10:	0e 87       	std	Y+14, r16	; 0x0e
    2f12:	f8 8a       	std	Y+16, r15	; 0x10
    2f14:	ef 86       	std	Y+15, r14	; 0x0f
    2f16:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f18:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f1a:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <pvPortMalloc>
    2f1e:	9d 83       	std	Y+5, r25	; 0x05
    2f20:	8c 83       	std	Y+4, r24	; 0x04
    2f22:	8c 81       	ldd	r24, Y+4	; 0x04
    2f24:	9d 81       	ldd	r25, Y+5	; 0x05
    2f26:	89 2b       	or	r24, r25
    2f28:	b9 f0       	breq	.+46     	; 0x2f58 <xTaskCreate+0x80>
    2f2a:	8c e2       	ldi	r24, 0x2C	; 44
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <pvPortMalloc>
    2f32:	9a 83       	std	Y+2, r25	; 0x02
    2f34:	89 83       	std	Y+1, r24	; 0x01
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3a:	89 2b       	or	r24, r25
    2f3c:	41 f0       	breq	.+16     	; 0x2f4e <xTaskCreate+0x76>
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	9a 81       	ldd	r25, Y+2	; 0x02
    2f42:	2c 81       	ldd	r18, Y+4	; 0x04
    2f44:	3d 81       	ldd	r19, Y+5	; 0x05
    2f46:	fc 01       	movw	r30, r24
    2f48:	30 8f       	std	Z+24, r19	; 0x18
    2f4a:	27 8b       	std	Z+23, r18	; 0x17
    2f4c:	07 c0       	rjmp	.+14     	; 0x2f5c <xTaskCreate+0x84>
    2f4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f50:	9d 81       	ldd	r25, Y+5	; 0x05
    2f52:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <vPortFree>
    2f56:	02 c0       	rjmp	.+4      	; 0x2f5c <xTaskCreate+0x84>
    2f58:	1a 82       	std	Y+2, r1	; 0x02
    2f5a:	19 82       	std	Y+1, r1	; 0x01
    2f5c:	89 81       	ldd	r24, Y+1	; 0x01
    2f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f60:	89 2b       	or	r24, r25
    2f62:	09 f1       	breq	.+66     	; 0x2fa6 <xTaskCreate+0xce>
    2f64:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f66:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f68:	cc 01       	movw	r24, r24
    2f6a:	a0 e0       	ldi	r26, 0x00	; 0
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	09 81       	ldd	r16, Y+1	; 0x01
    2f70:	1a 81       	ldd	r17, Y+2	; 0x02
    2f72:	4f 85       	ldd	r20, Y+15	; 0x0f
    2f74:	58 89       	ldd	r21, Y+16	; 0x10
    2f76:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f78:	3d 85       	ldd	r19, Y+13	; 0x0d
    2f7a:	68 85       	ldd	r22, Y+8	; 0x08
    2f7c:	79 85       	ldd	r23, Y+9	; 0x09
    2f7e:	ee 81       	ldd	r30, Y+6	; 0x06
    2f80:	ff 81       	ldd	r31, Y+7	; 0x07
    2f82:	81 2c       	mov	r8, r1
    2f84:	91 2c       	mov	r9, r1
    2f86:	58 01       	movw	r10, r16
    2f88:	6a 01       	movw	r12, r20
    2f8a:	ee 84       	ldd	r14, Y+14	; 0x0e
    2f8c:	89 01       	movw	r16, r18
    2f8e:	9c 01       	movw	r18, r24
    2f90:	ad 01       	movw	r20, r26
    2f92:	cf 01       	movw	r24, r30
    2f94:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <prvInitialiseNewTask>
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9c:	0e 94 c5 18 	call	0x318a	; 0x318a <prvAddNewTaskToReadyList>
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	8b 83       	std	Y+3, r24	; 0x03
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <xTaskCreate+0xd2>
    2fa6:	8f ef       	ldi	r24, 0xFF	; 255
    2fa8:	8b 83       	std	Y+3, r24	; 0x03
    2faa:	8b 81       	ldd	r24, Y+3	; 0x03
    2fac:	60 96       	adiw	r28, 0x10	; 16
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	df 91       	pop	r29
    2fba:	cf 91       	pop	r28
    2fbc:	1f 91       	pop	r17
    2fbe:	0f 91       	pop	r16
    2fc0:	ff 90       	pop	r15
    2fc2:	ef 90       	pop	r14
    2fc4:	df 90       	pop	r13
    2fc6:	cf 90       	pop	r12
    2fc8:	bf 90       	pop	r11
    2fca:	af 90       	pop	r10
    2fcc:	9f 90       	pop	r9
    2fce:	8f 90       	pop	r8
    2fd0:	08 95       	ret

00002fd2 <prvInitialiseNewTask>:
    2fd2:	8f 92       	push	r8
    2fd4:	9f 92       	push	r9
    2fd6:	af 92       	push	r10
    2fd8:	bf 92       	push	r11
    2fda:	cf 92       	push	r12
    2fdc:	df 92       	push	r13
    2fde:	ef 92       	push	r14
    2fe0:	0f 93       	push	r16
    2fe2:	1f 93       	push	r17
    2fe4:	cf 93       	push	r28
    2fe6:	df 93       	push	r29
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
    2fec:	64 97       	sbiw	r28, 0x14	; 20
    2fee:	0f b6       	in	r0, 0x3f	; 63
    2ff0:	f8 94       	cli
    2ff2:	de bf       	out	0x3e, r29	; 62
    2ff4:	0f be       	out	0x3f, r0	; 63
    2ff6:	cd bf       	out	0x3d, r28	; 61
    2ff8:	9d 83       	std	Y+5, r25	; 0x05
    2ffa:	8c 83       	std	Y+4, r24	; 0x04
    2ffc:	7f 83       	std	Y+7, r23	; 0x07
    2ffe:	6e 83       	std	Y+6, r22	; 0x06
    3000:	28 87       	std	Y+8, r18	; 0x08
    3002:	39 87       	std	Y+9, r19	; 0x09
    3004:	4a 87       	std	Y+10, r20	; 0x0a
    3006:	5b 87       	std	Y+11, r21	; 0x0b
    3008:	1d 87       	std	Y+13, r17	; 0x0d
    300a:	0c 87       	std	Y+12, r16	; 0x0c
    300c:	ee 86       	std	Y+14, r14	; 0x0e
    300e:	d8 8a       	std	Y+16, r13	; 0x10
    3010:	cf 86       	std	Y+15, r12	; 0x0f
    3012:	ba 8a       	std	Y+18, r11	; 0x12
    3014:	a9 8a       	std	Y+17, r10	; 0x11
    3016:	9c 8a       	std	Y+20, r9	; 0x14
    3018:	8b 8a       	std	Y+19, r8	; 0x13
    301a:	28 85       	ldd	r18, Y+8	; 0x08
    301c:	39 85       	ldd	r19, Y+9	; 0x09
    301e:	89 89       	ldd	r24, Y+17	; 0x11
    3020:	9a 89       	ldd	r25, Y+18	; 0x12
    3022:	fc 01       	movw	r30, r24
    3024:	87 89       	ldd	r24, Z+23	; 0x17
    3026:	90 8d       	ldd	r25, Z+24	; 0x18
    3028:	a9 01       	movw	r20, r18
    302a:	65 ea       	ldi	r22, 0xA5	; 165
    302c:	70 e0       	ldi	r23, 0x00	; 0
    302e:	0e 94 2d 24 	call	0x485a	; 0x485a <memset>
    3032:	89 89       	ldd	r24, Y+17	; 0x11
    3034:	9a 89       	ldd	r25, Y+18	; 0x12
    3036:	fc 01       	movw	r30, r24
    3038:	27 89       	ldd	r18, Z+23	; 0x17
    303a:	30 8d       	ldd	r19, Z+24	; 0x18
    303c:	88 85       	ldd	r24, Y+8	; 0x08
    303e:	99 85       	ldd	r25, Y+9	; 0x09
    3040:	01 97       	sbiw	r24, 0x01	; 1
    3042:	82 0f       	add	r24, r18
    3044:	93 1f       	adc	r25, r19
    3046:	9b 83       	std	Y+3, r25	; 0x03
    3048:	8a 83       	std	Y+2, r24	; 0x02
    304a:	19 82       	std	Y+1, r1	; 0x01
    304c:	21 c0       	rjmp	.+66     	; 0x3090 <prvInitialiseNewTask+0xbe>
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	88 2f       	mov	r24, r24
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	29 81       	ldd	r18, Y+1	; 0x01
    3056:	22 2f       	mov	r18, r18
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	4e 81       	ldd	r20, Y+6	; 0x06
    305c:	5f 81       	ldd	r21, Y+7	; 0x07
    305e:	24 0f       	add	r18, r20
    3060:	35 1f       	adc	r19, r21
    3062:	f9 01       	movw	r30, r18
    3064:	40 81       	ld	r20, Z
    3066:	29 89       	ldd	r18, Y+17	; 0x11
    3068:	3a 89       	ldd	r19, Y+18	; 0x12
    306a:	82 0f       	add	r24, r18
    306c:	93 1f       	adc	r25, r19
    306e:	49 96       	adiw	r24, 0x19	; 25
    3070:	fc 01       	movw	r30, r24
    3072:	40 83       	st	Z, r20
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	88 2f       	mov	r24, r24
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	2e 81       	ldd	r18, Y+6	; 0x06
    307c:	3f 81       	ldd	r19, Y+7	; 0x07
    307e:	82 0f       	add	r24, r18
    3080:	93 1f       	adc	r25, r19
    3082:	fc 01       	movw	r30, r24
    3084:	80 81       	ld	r24, Z
    3086:	88 23       	and	r24, r24
    3088:	39 f0       	breq	.+14     	; 0x3098 <prvInitialiseNewTask+0xc6>
    308a:	89 81       	ldd	r24, Y+1	; 0x01
    308c:	8f 5f       	subi	r24, 0xFF	; 255
    308e:	89 83       	std	Y+1, r24	; 0x01
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	88 30       	cpi	r24, 0x08	; 8
    3094:	e0 f2       	brcs	.-72     	; 0x304e <prvInitialiseNewTask+0x7c>
    3096:	01 c0       	rjmp	.+2      	; 0x309a <prvInitialiseNewTask+0xc8>
    3098:	00 00       	nop
    309a:	89 89       	ldd	r24, Y+17	; 0x11
    309c:	9a 89       	ldd	r25, Y+18	; 0x12
    309e:	fc 01       	movw	r30, r24
    30a0:	10 a2       	std	Z+32, r1	; 0x20
    30a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    30a4:	84 30       	cpi	r24, 0x04	; 4
    30a6:	10 f0       	brcs	.+4      	; 0x30ac <prvInitialiseNewTask+0xda>
    30a8:	83 e0       	ldi	r24, 0x03	; 3
    30aa:	8e 87       	std	Y+14, r24	; 0x0e
    30ac:	89 89       	ldd	r24, Y+17	; 0x11
    30ae:	9a 89       	ldd	r25, Y+18	; 0x12
    30b0:	2e 85       	ldd	r18, Y+14	; 0x0e
    30b2:	fc 01       	movw	r30, r24
    30b4:	26 8b       	std	Z+22, r18	; 0x16
    30b6:	89 89       	ldd	r24, Y+17	; 0x11
    30b8:	9a 89       	ldd	r25, Y+18	; 0x12
    30ba:	2e 85       	ldd	r18, Y+14	; 0x0e
    30bc:	fc 01       	movw	r30, r24
    30be:	23 a3       	std	Z+35, r18	; 0x23
    30c0:	89 89       	ldd	r24, Y+17	; 0x11
    30c2:	9a 89       	ldd	r25, Y+18	; 0x12
    30c4:	fc 01       	movw	r30, r24
    30c6:	14 a2       	std	Z+36, r1	; 0x24
    30c8:	89 89       	ldd	r24, Y+17	; 0x11
    30ca:	9a 89       	ldd	r25, Y+18	; 0x12
    30cc:	02 96       	adiw	r24, 0x02	; 2
    30ce:	0e 94 0b 0b 	call	0x1616	; 0x1616 <vListInitialiseItem>
    30d2:	89 89       	ldd	r24, Y+17	; 0x11
    30d4:	9a 89       	ldd	r25, Y+18	; 0x12
    30d6:	0c 96       	adiw	r24, 0x0c	; 12
    30d8:	0e 94 0b 0b 	call	0x1616	; 0x1616 <vListInitialiseItem>
    30dc:	89 89       	ldd	r24, Y+17	; 0x11
    30de:	9a 89       	ldd	r25, Y+18	; 0x12
    30e0:	29 89       	ldd	r18, Y+17	; 0x11
    30e2:	3a 89       	ldd	r19, Y+18	; 0x12
    30e4:	fc 01       	movw	r30, r24
    30e6:	31 87       	std	Z+9, r19	; 0x09
    30e8:	20 87       	std	Z+8, r18	; 0x08
    30ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    30ec:	88 2f       	mov	r24, r24
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	24 e0       	ldi	r18, 0x04	; 4
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	28 1b       	sub	r18, r24
    30f6:	39 0b       	sbc	r19, r25
    30f8:	89 89       	ldd	r24, Y+17	; 0x11
    30fa:	9a 89       	ldd	r25, Y+18	; 0x12
    30fc:	fc 01       	movw	r30, r24
    30fe:	35 87       	std	Z+13, r19	; 0x0d
    3100:	24 87       	std	Z+12, r18	; 0x0c
    3102:	89 89       	ldd	r24, Y+17	; 0x11
    3104:	9a 89       	ldd	r25, Y+18	; 0x12
    3106:	29 89       	ldd	r18, Y+17	; 0x11
    3108:	3a 89       	ldd	r19, Y+18	; 0x12
    310a:	fc 01       	movw	r30, r24
    310c:	33 8b       	std	Z+19, r19	; 0x13
    310e:	22 8b       	std	Z+18, r18	; 0x12
    3110:	89 89       	ldd	r24, Y+17	; 0x11
    3112:	9a 89       	ldd	r25, Y+18	; 0x12
    3114:	fc 01       	movw	r30, r24
    3116:	16 a2       	std	Z+38, r1	; 0x26
    3118:	15 a2       	std	Z+37, r1	; 0x25
    311a:	89 89       	ldd	r24, Y+17	; 0x11
    311c:	9a 89       	ldd	r25, Y+18	; 0x12
    311e:	fc 01       	movw	r30, r24
    3120:	17 a2       	std	Z+39, r1	; 0x27
    3122:	10 a6       	std	Z+40, r1	; 0x28
    3124:	11 a6       	std	Z+41, r1	; 0x29
    3126:	12 a6       	std	Z+42, r1	; 0x2a
    3128:	89 89       	ldd	r24, Y+17	; 0x11
    312a:	9a 89       	ldd	r25, Y+18	; 0x12
    312c:	fc 01       	movw	r30, r24
    312e:	13 a6       	std	Z+43, r1	; 0x2b
    3130:	4c 85       	ldd	r20, Y+12	; 0x0c
    3132:	5d 85       	ldd	r21, Y+13	; 0x0d
    3134:	2c 81       	ldd	r18, Y+4	; 0x04
    3136:	3d 81       	ldd	r19, Y+5	; 0x05
    3138:	8a 81       	ldd	r24, Y+2	; 0x02
    313a:	9b 81       	ldd	r25, Y+3	; 0x03
    313c:	b9 01       	movw	r22, r18
    313e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <pxPortInitialiseStack>
    3142:	9c 01       	movw	r18, r24
    3144:	89 89       	ldd	r24, Y+17	; 0x11
    3146:	9a 89       	ldd	r25, Y+18	; 0x12
    3148:	fc 01       	movw	r30, r24
    314a:	31 83       	std	Z+1, r19	; 0x01
    314c:	20 83       	st	Z, r18
    314e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3150:	98 89       	ldd	r25, Y+16	; 0x10
    3152:	89 2b       	or	r24, r25
    3154:	39 f0       	breq	.+14     	; 0x3164 <prvInitialiseNewTask+0x192>
    3156:	8f 85       	ldd	r24, Y+15	; 0x0f
    3158:	98 89       	ldd	r25, Y+16	; 0x10
    315a:	29 89       	ldd	r18, Y+17	; 0x11
    315c:	3a 89       	ldd	r19, Y+18	; 0x12
    315e:	fc 01       	movw	r30, r24
    3160:	31 83       	std	Z+1, r19	; 0x01
    3162:	20 83       	st	Z, r18
    3164:	00 00       	nop
    3166:	64 96       	adiw	r28, 0x14	; 20
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	f8 94       	cli
    316c:	de bf       	out	0x3e, r29	; 62
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	cd bf       	out	0x3d, r28	; 61
    3172:	df 91       	pop	r29
    3174:	cf 91       	pop	r28
    3176:	1f 91       	pop	r17
    3178:	0f 91       	pop	r16
    317a:	ef 90       	pop	r14
    317c:	df 90       	pop	r13
    317e:	cf 90       	pop	r12
    3180:	bf 90       	pop	r11
    3182:	af 90       	pop	r10
    3184:	9f 90       	pop	r9
    3186:	8f 90       	pop	r8
    3188:	08 95       	ret

0000318a <prvAddNewTaskToReadyList>:
    318a:	cf 93       	push	r28
    318c:	df 93       	push	r29
    318e:	00 d0       	rcall	.+0      	; 0x3190 <prvAddNewTaskToReadyList+0x6>
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	9a 83       	std	Y+2, r25	; 0x02
    3196:	89 83       	std	Y+1, r24	; 0x01
    3198:	0f b6       	in	r0, 0x3f	; 63
    319a:	f8 94       	cli
    319c:	0f 92       	push	r0
    319e:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <uxCurrentNumberOfTasks>
    31a2:	8f 5f       	subi	r24, 0xFF	; 255
    31a4:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <uxCurrentNumberOfTasks>
    31a8:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    31ac:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    31b0:	89 2b       	or	r24, r25
    31b2:	69 f4       	brne	.+26     	; 0x31ce <prvAddNewTaskToReadyList+0x44>
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <pxCurrentTCB+0x1>
    31bc:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <pxCurrentTCB>
    31c0:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <uxCurrentNumberOfTasks>
    31c4:	81 30       	cpi	r24, 0x01	; 1
    31c6:	c9 f4       	brne	.+50     	; 0x31fa <prvAddNewTaskToReadyList+0x70>
    31c8:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <prvInitialiseTaskLists>
    31cc:	16 c0       	rjmp	.+44     	; 0x31fa <prvAddNewTaskToReadyList+0x70>
    31ce:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xSchedulerRunning>
    31d2:	88 23       	and	r24, r24
    31d4:	91 f4       	brne	.+36     	; 0x31fa <prvAddNewTaskToReadyList+0x70>
    31d6:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    31da:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    31de:	fc 01       	movw	r30, r24
    31e0:	26 89       	ldd	r18, Z+22	; 0x16
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	9a 81       	ldd	r25, Y+2	; 0x02
    31e6:	fc 01       	movw	r30, r24
    31e8:	86 89       	ldd	r24, Z+22	; 0x16
    31ea:	82 17       	cp	r24, r18
    31ec:	30 f0       	brcs	.+12     	; 0x31fa <prvAddNewTaskToReadyList+0x70>
    31ee:	89 81       	ldd	r24, Y+1	; 0x01
    31f0:	9a 81       	ldd	r25, Y+2	; 0x02
    31f2:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <pxCurrentTCB+0x1>
    31f6:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <pxCurrentTCB>
    31fa:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <uxTaskNumber>
    31fe:	8f 5f       	subi	r24, 0xFF	; 255
    3200:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <uxTaskNumber>
    3204:	20 91 bb 07 	lds	r18, 0x07BB	; 0x8007bb <uxTaskNumber>
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	9a 81       	ldd	r25, Y+2	; 0x02
    320c:	fc 01       	movw	r30, r24
    320e:	21 a3       	std	Z+33, r18	; 0x21
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	9a 81       	ldd	r25, Y+2	; 0x02
    3214:	fc 01       	movw	r30, r24
    3216:	96 89       	ldd	r25, Z+22	; 0x16
    3218:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxTopReadyPriority>
    321c:	89 17       	cp	r24, r25
    321e:	30 f4       	brcc	.+12     	; 0x322c <prvAddNewTaskToReadyList+0xa2>
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	9a 81       	ldd	r25, Y+2	; 0x02
    3224:	fc 01       	movw	r30, r24
    3226:	86 89       	ldd	r24, Z+22	; 0x16
    3228:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <uxTopReadyPriority>
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	9a 81       	ldd	r25, Y+2	; 0x02
    3230:	ac 01       	movw	r20, r24
    3232:	4e 5f       	subi	r20, 0xFE	; 254
    3234:	5f 4f       	sbci	r21, 0xFF	; 255
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	9a 81       	ldd	r25, Y+2	; 0x02
    323a:	fc 01       	movw	r30, r24
    323c:	86 89       	ldd	r24, Z+22	; 0x16
    323e:	28 2f       	mov	r18, r24
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	c9 01       	movw	r24, r18
    3244:	88 0f       	add	r24, r24
    3246:	99 1f       	adc	r25, r25
    3248:	88 0f       	add	r24, r24
    324a:	99 1f       	adc	r25, r25
    324c:	88 0f       	add	r24, r24
    324e:	99 1f       	adc	r25, r25
    3250:	82 0f       	add	r24, r18
    3252:	93 1f       	adc	r25, r19
    3254:	8a 59       	subi	r24, 0x9A	; 154
    3256:	98 4f       	sbci	r25, 0xF8	; 248
    3258:	ba 01       	movw	r22, r20
    325a:	0e 94 1d 0b 	call	0x163a	; 0x163a <vListInsertEnd>
    325e:	0f 90       	pop	r0
    3260:	0f be       	out	0x3f, r0	; 63
    3262:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xSchedulerRunning>
    3266:	88 23       	and	r24, r24
    3268:	71 f0       	breq	.+28     	; 0x3286 <prvAddNewTaskToReadyList+0xfc>
    326a:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    326e:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    3272:	fc 01       	movw	r30, r24
    3274:	26 89       	ldd	r18, Z+22	; 0x16
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	9a 81       	ldd	r25, Y+2	; 0x02
    327a:	fc 01       	movw	r30, r24
    327c:	86 89       	ldd	r24, Z+22	; 0x16
    327e:	28 17       	cp	r18, r24
    3280:	10 f4       	brcc	.+4      	; 0x3286 <prvAddNewTaskToReadyList+0xfc>
    3282:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vPortYield>
    3286:	00 00       	nop
    3288:	0f 90       	pop	r0
    328a:	0f 90       	pop	r0
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	08 95       	ret

00003292 <vTaskDelay>:
    3292:	cf 93       	push	r28
    3294:	df 93       	push	r29
    3296:	00 d0       	rcall	.+0      	; 0x3298 <vTaskDelay+0x6>
    3298:	1f 92       	push	r1
    329a:	cd b7       	in	r28, 0x3d	; 61
    329c:	de b7       	in	r29, 0x3e	; 62
    329e:	9b 83       	std	Y+3, r25	; 0x03
    32a0:	8a 83       	std	Y+2, r24	; 0x02
    32a2:	19 82       	std	Y+1, r1	; 0x01
    32a4:	8a 81       	ldd	r24, Y+2	; 0x02
    32a6:	9b 81       	ldd	r25, Y+3	; 0x03
    32a8:	89 2b       	or	r24, r25
    32aa:	51 f0       	breq	.+20     	; 0x32c0 <vTaskDelay+0x2e>
    32ac:	0e 94 a1 19 	call	0x3342	; 0x3342 <vTaskSuspendAll>
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	9b 81       	ldd	r25, Y+3	; 0x03
    32b4:	60 e0       	ldi	r22, 0x00	; 0
    32b6:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <prvAddCurrentTaskToDelayedList>
    32ba:	0e 94 ae 19 	call	0x335c	; 0x335c <xTaskResumeAll>
    32be:	89 83       	std	Y+1, r24	; 0x01
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	88 23       	and	r24, r24
    32c4:	11 f4       	brne	.+4      	; 0x32ca <vTaskDelay+0x38>
    32c6:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vPortYield>
    32ca:	00 00       	nop
    32cc:	0f 90       	pop	r0
    32ce:	0f 90       	pop	r0
    32d0:	0f 90       	pop	r0
    32d2:	df 91       	pop	r29
    32d4:	cf 91       	pop	r28
    32d6:	08 95       	ret

000032d8 <vTaskStartScheduler>:
    32d8:	ef 92       	push	r14
    32da:	ff 92       	push	r15
    32dc:	0f 93       	push	r16
    32de:	cf 93       	push	r28
    32e0:	df 93       	push	r29
    32e2:	1f 92       	push	r1
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
    32e8:	0f 2e       	mov	r0, r31
    32ea:	fe eb       	ldi	r31, 0xBE	; 190
    32ec:	ef 2e       	mov	r14, r31
    32ee:	f7 e0       	ldi	r31, 0x07	; 7
    32f0:	ff 2e       	mov	r15, r31
    32f2:	f0 2d       	mov	r31, r0
    32f4:	00 e0       	ldi	r16, 0x00	; 0
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	45 e5       	ldi	r20, 0x55	; 85
    32fc:	50 e0       	ldi	r21, 0x00	; 0
    32fe:	6d e5       	ldi	r22, 0x5D	; 93
    3300:	71 e0       	ldi	r23, 0x01	; 1
    3302:	87 ed       	ldi	r24, 0xD7	; 215
    3304:	9c e1       	ldi	r25, 0x1C	; 28
    3306:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <xTaskCreate>
    330a:	89 83       	std	Y+1, r24	; 0x01
    330c:	89 81       	ldd	r24, Y+1	; 0x01
    330e:	81 30       	cpi	r24, 0x01	; 1
    3310:	81 f4       	brne	.+32     	; 0x3332 <vTaskStartScheduler+0x5a>
    3312:	f8 94       	cli
    3314:	8f ef       	ldi	r24, 0xFF	; 255
    3316:	9f ef       	ldi	r25, 0xFF	; 255
    3318:	90 93 bd 07 	sts	0x07BD, r25	; 0x8007bd <xNextTaskUnblockTime+0x1>
    331c:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <xNextTaskUnblockTime>
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <xSchedulerRunning>
    3326:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <xTickCount+0x1>
    332a:	10 92 b4 07 	sts	0x07B4, r1	; 0x8007b4 <xTickCount>
    332e:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <xPortStartScheduler>
    3332:	00 00       	nop
    3334:	0f 90       	pop	r0
    3336:	df 91       	pop	r29
    3338:	cf 91       	pop	r28
    333a:	0f 91       	pop	r16
    333c:	ff 90       	pop	r15
    333e:	ef 90       	pop	r14
    3340:	08 95       	ret

00003342 <vTaskSuspendAll>:
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
    334a:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <uxSchedulerSuspended>
    334e:	8f 5f       	subi	r24, 0xFF	; 255
    3350:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <uxSchedulerSuspended>
    3354:	00 00       	nop
    3356:	df 91       	pop	r29
    3358:	cf 91       	pop	r28
    335a:	08 95       	ret

0000335c <xTaskResumeAll>:
    335c:	cf 93       	push	r28
    335e:	df 93       	push	r29
    3360:	00 d0       	rcall	.+0      	; 0x3362 <xTaskResumeAll+0x6>
    3362:	00 d0       	rcall	.+0      	; 0x3364 <xTaskResumeAll+0x8>
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
    3368:	1a 82       	std	Y+2, r1	; 0x02
    336a:	19 82       	std	Y+1, r1	; 0x01
    336c:	1b 82       	std	Y+3, r1	; 0x03
    336e:	0f b6       	in	r0, 0x3f	; 63
    3370:	f8 94       	cli
    3372:	0f 92       	push	r0
    3374:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <uxSchedulerSuspended>
    3378:	81 50       	subi	r24, 0x01	; 1
    337a:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <uxSchedulerSuspended>
    337e:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <uxSchedulerSuspended>
    3382:	88 23       	and	r24, r24
    3384:	09 f0       	breq	.+2      	; 0x3388 <xTaskResumeAll+0x2c>
    3386:	77 c0       	rjmp	.+238    	; 0x3476 <xTaskResumeAll+0x11a>
    3388:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <uxCurrentNumberOfTasks>
    338c:	88 23       	and	r24, r24
    338e:	09 f4       	brne	.+2      	; 0x3392 <xTaskResumeAll+0x36>
    3390:	72 c0       	rjmp	.+228    	; 0x3476 <xTaskResumeAll+0x11a>
    3392:	49 c0       	rjmp	.+146    	; 0x3426 <xTaskResumeAll+0xca>
    3394:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <xPendingReadyList+0x5>
    3398:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <xPendingReadyList+0x6>
    339c:	fc 01       	movw	r30, r24
    339e:	86 81       	ldd	r24, Z+6	; 0x06
    33a0:	97 81       	ldd	r25, Z+7	; 0x07
    33a2:	9a 83       	std	Y+2, r25	; 0x02
    33a4:	89 83       	std	Y+1, r24	; 0x01
    33a6:	89 81       	ldd	r24, Y+1	; 0x01
    33a8:	9a 81       	ldd	r25, Y+2	; 0x02
    33aa:	0c 96       	adiw	r24, 0x0c	; 12
    33ac:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <uxListRemove>
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	9a 81       	ldd	r25, Y+2	; 0x02
    33b4:	02 96       	adiw	r24, 0x02	; 2
    33b6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <uxListRemove>
    33ba:	89 81       	ldd	r24, Y+1	; 0x01
    33bc:	9a 81       	ldd	r25, Y+2	; 0x02
    33be:	fc 01       	movw	r30, r24
    33c0:	96 89       	ldd	r25, Z+22	; 0x16
    33c2:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxTopReadyPriority>
    33c6:	89 17       	cp	r24, r25
    33c8:	30 f4       	brcc	.+12     	; 0x33d6 <xTaskResumeAll+0x7a>
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	9a 81       	ldd	r25, Y+2	; 0x02
    33ce:	fc 01       	movw	r30, r24
    33d0:	86 89       	ldd	r24, Z+22	; 0x16
    33d2:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <uxTopReadyPriority>
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	9a 81       	ldd	r25, Y+2	; 0x02
    33da:	ac 01       	movw	r20, r24
    33dc:	4e 5f       	subi	r20, 0xFE	; 254
    33de:	5f 4f       	sbci	r21, 0xFF	; 255
    33e0:	89 81       	ldd	r24, Y+1	; 0x01
    33e2:	9a 81       	ldd	r25, Y+2	; 0x02
    33e4:	fc 01       	movw	r30, r24
    33e6:	86 89       	ldd	r24, Z+22	; 0x16
    33e8:	28 2f       	mov	r18, r24
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	c9 01       	movw	r24, r18
    33ee:	88 0f       	add	r24, r24
    33f0:	99 1f       	adc	r25, r25
    33f2:	88 0f       	add	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	82 0f       	add	r24, r18
    33fc:	93 1f       	adc	r25, r19
    33fe:	8a 59       	subi	r24, 0x9A	; 154
    3400:	98 4f       	sbci	r25, 0xF8	; 248
    3402:	ba 01       	movw	r22, r20
    3404:	0e 94 1d 0b 	call	0x163a	; 0x163a <vListInsertEnd>
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	9a 81       	ldd	r25, Y+2	; 0x02
    340c:	fc 01       	movw	r30, r24
    340e:	26 89       	ldd	r18, Z+22	; 0x16
    3410:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3414:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    3418:	fc 01       	movw	r30, r24
    341a:	86 89       	ldd	r24, Z+22	; 0x16
    341c:	28 17       	cp	r18, r24
    341e:	18 f0       	brcs	.+6      	; 0x3426 <xTaskResumeAll+0xca>
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <xYieldPending>
    3426:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <xPendingReadyList>
    342a:	88 23       	and	r24, r24
    342c:	09 f0       	breq	.+2      	; 0x3430 <xTaskResumeAll+0xd4>
    342e:	b2 cf       	rjmp	.-156    	; 0x3394 <xTaskResumeAll+0x38>
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	9a 81       	ldd	r25, Y+2	; 0x02
    3434:	89 2b       	or	r24, r25
    3436:	11 f0       	breq	.+4      	; 0x343c <xTaskResumeAll+0xe0>
    3438:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <prvResetNextTaskUnblockTime>
    343c:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <uxPendedTicks>
    3440:	8c 83       	std	Y+4, r24	; 0x04
    3442:	8c 81       	ldd	r24, Y+4	; 0x04
    3444:	88 23       	and	r24, r24
    3446:	79 f0       	breq	.+30     	; 0x3466 <xTaskResumeAll+0x10a>
    3448:	0e 94 45 1a 	call	0x348a	; 0x348a <xTaskIncrementTick>
    344c:	88 23       	and	r24, r24
    344e:	19 f0       	breq	.+6      	; 0x3456 <xTaskResumeAll+0xfa>
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <xYieldPending>
    3456:	8c 81       	ldd	r24, Y+4	; 0x04
    3458:	81 50       	subi	r24, 0x01	; 1
    345a:	8c 83       	std	Y+4, r24	; 0x04
    345c:	8c 81       	ldd	r24, Y+4	; 0x04
    345e:	88 23       	and	r24, r24
    3460:	99 f7       	brne	.-26     	; 0x3448 <xTaskResumeAll+0xec>
    3462:	10 92 b8 07 	sts	0x07B8, r1	; 0x8007b8 <uxPendedTicks>
    3466:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xYieldPending>
    346a:	88 23       	and	r24, r24
    346c:	21 f0       	breq	.+8      	; 0x3476 <xTaskResumeAll+0x11a>
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	8b 83       	std	Y+3, r24	; 0x03
    3472:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vPortYield>
    3476:	0f 90       	pop	r0
    3478:	0f be       	out	0x3f, r0	; 63
    347a:	8b 81       	ldd	r24, Y+3	; 0x03
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	0f 90       	pop	r0
    3484:	df 91       	pop	r29
    3486:	cf 91       	pop	r28
    3488:	08 95       	ret

0000348a <xTaskIncrementTick>:
    348a:	cf 93       	push	r28
    348c:	df 93       	push	r29
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
    3492:	29 97       	sbiw	r28, 0x09	; 9
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	f8 94       	cli
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	cd bf       	out	0x3d, r28	; 61
    349e:	19 82       	std	Y+1, r1	; 0x01
    34a0:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <uxSchedulerSuspended>
    34a4:	88 23       	and	r24, r24
    34a6:	09 f0       	breq	.+2      	; 0x34aa <xTaskIncrementTick+0x20>
    34a8:	c8 c0       	rjmp	.+400    	; 0x363a <xTaskIncrementTick+0x1b0>
    34aa:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <xTickCount>
    34ae:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <xTickCount+0x1>
    34b2:	01 96       	adiw	r24, 0x01	; 1
    34b4:	9b 83       	std	Y+3, r25	; 0x03
    34b6:	8a 83       	std	Y+2, r24	; 0x02
    34b8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ba:	9b 81       	ldd	r25, Y+3	; 0x03
    34bc:	90 93 b5 07 	sts	0x07B5, r25	; 0x8007b5 <xTickCount+0x1>
    34c0:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <xTickCount>
    34c4:	8a 81       	ldd	r24, Y+2	; 0x02
    34c6:	9b 81       	ldd	r25, Y+3	; 0x03
    34c8:	89 2b       	or	r24, r25
    34ca:	d9 f4       	brne	.+54     	; 0x3502 <xTaskIncrementTick+0x78>
    34cc:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <pxDelayedTaskList>
    34d0:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <pxDelayedTaskList+0x1>
    34d4:	9d 83       	std	Y+5, r25	; 0x05
    34d6:	8c 83       	std	Y+4, r24	; 0x04
    34d8:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <pxOverflowDelayedTaskList>
    34dc:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    34e0:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <pxDelayedTaskList+0x1>
    34e4:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <pxDelayedTaskList>
    34e8:	8c 81       	ldd	r24, Y+4	; 0x04
    34ea:	9d 81       	ldd	r25, Y+5	; 0x05
    34ec:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    34f0:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <pxOverflowDelayedTaskList>
    34f4:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <xNumOfOverflows>
    34f8:	8f 5f       	subi	r24, 0xFF	; 255
    34fa:	80 93 ba 07 	sts	0x07BA, r24	; 0x8007ba <xNumOfOverflows>
    34fe:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <prvResetNextTaskUnblockTime>
    3502:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <xNextTaskUnblockTime>
    3506:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <xNextTaskUnblockTime+0x1>
    350a:	2a 81       	ldd	r18, Y+2	; 0x02
    350c:	3b 81       	ldd	r19, Y+3	; 0x03
    350e:	28 17       	cp	r18, r24
    3510:	39 07       	cpc	r19, r25
    3512:	08 f4       	brcc	.+2      	; 0x3516 <xTaskIncrementTick+0x8c>
    3514:	78 c0       	rjmp	.+240    	; 0x3606 <xTaskIncrementTick+0x17c>
    3516:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <pxDelayedTaskList>
    351a:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <pxDelayedTaskList+0x1>
    351e:	fc 01       	movw	r30, r24
    3520:	80 81       	ld	r24, Z
    3522:	88 23       	and	r24, r24
    3524:	39 f4       	brne	.+14     	; 0x3534 <xTaskIncrementTick+0xaa>
    3526:	8f ef       	ldi	r24, 0xFF	; 255
    3528:	9f ef       	ldi	r25, 0xFF	; 255
    352a:	90 93 bd 07 	sts	0x07BD, r25	; 0x8007bd <xNextTaskUnblockTime+0x1>
    352e:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <xNextTaskUnblockTime>
    3532:	69 c0       	rjmp	.+210    	; 0x3606 <xTaskIncrementTick+0x17c>
    3534:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <pxDelayedTaskList>
    3538:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <pxDelayedTaskList+0x1>
    353c:	fc 01       	movw	r30, r24
    353e:	85 81       	ldd	r24, Z+5	; 0x05
    3540:	96 81       	ldd	r25, Z+6	; 0x06
    3542:	fc 01       	movw	r30, r24
    3544:	86 81       	ldd	r24, Z+6	; 0x06
    3546:	97 81       	ldd	r25, Z+7	; 0x07
    3548:	9f 83       	std	Y+7, r25	; 0x07
    354a:	8e 83       	std	Y+6, r24	; 0x06
    354c:	8e 81       	ldd	r24, Y+6	; 0x06
    354e:	9f 81       	ldd	r25, Y+7	; 0x07
    3550:	fc 01       	movw	r30, r24
    3552:	82 81       	ldd	r24, Z+2	; 0x02
    3554:	93 81       	ldd	r25, Z+3	; 0x03
    3556:	99 87       	std	Y+9, r25	; 0x09
    3558:	88 87       	std	Y+8, r24	; 0x08
    355a:	2a 81       	ldd	r18, Y+2	; 0x02
    355c:	3b 81       	ldd	r19, Y+3	; 0x03
    355e:	88 85       	ldd	r24, Y+8	; 0x08
    3560:	99 85       	ldd	r25, Y+9	; 0x09
    3562:	28 17       	cp	r18, r24
    3564:	39 07       	cpc	r19, r25
    3566:	38 f4       	brcc	.+14     	; 0x3576 <xTaskIncrementTick+0xec>
    3568:	88 85       	ldd	r24, Y+8	; 0x08
    356a:	99 85       	ldd	r25, Y+9	; 0x09
    356c:	90 93 bd 07 	sts	0x07BD, r25	; 0x8007bd <xNextTaskUnblockTime+0x1>
    3570:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <xNextTaskUnblockTime>
    3574:	48 c0       	rjmp	.+144    	; 0x3606 <xTaskIncrementTick+0x17c>
    3576:	8e 81       	ldd	r24, Y+6	; 0x06
    3578:	9f 81       	ldd	r25, Y+7	; 0x07
    357a:	02 96       	adiw	r24, 0x02	; 2
    357c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <uxListRemove>
    3580:	8e 81       	ldd	r24, Y+6	; 0x06
    3582:	9f 81       	ldd	r25, Y+7	; 0x07
    3584:	fc 01       	movw	r30, r24
    3586:	84 89       	ldd	r24, Z+20	; 0x14
    3588:	95 89       	ldd	r25, Z+21	; 0x15
    358a:	89 2b       	or	r24, r25
    358c:	29 f0       	breq	.+10     	; 0x3598 <xTaskIncrementTick+0x10e>
    358e:	8e 81       	ldd	r24, Y+6	; 0x06
    3590:	9f 81       	ldd	r25, Y+7	; 0x07
    3592:	0c 96       	adiw	r24, 0x0c	; 12
    3594:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <uxListRemove>
    3598:	8e 81       	ldd	r24, Y+6	; 0x06
    359a:	9f 81       	ldd	r25, Y+7	; 0x07
    359c:	fc 01       	movw	r30, r24
    359e:	96 89       	ldd	r25, Z+22	; 0x16
    35a0:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxTopReadyPriority>
    35a4:	89 17       	cp	r24, r25
    35a6:	30 f4       	brcc	.+12     	; 0x35b4 <xTaskIncrementTick+0x12a>
    35a8:	8e 81       	ldd	r24, Y+6	; 0x06
    35aa:	9f 81       	ldd	r25, Y+7	; 0x07
    35ac:	fc 01       	movw	r30, r24
    35ae:	86 89       	ldd	r24, Z+22	; 0x16
    35b0:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <uxTopReadyPriority>
    35b4:	8e 81       	ldd	r24, Y+6	; 0x06
    35b6:	9f 81       	ldd	r25, Y+7	; 0x07
    35b8:	ac 01       	movw	r20, r24
    35ba:	4e 5f       	subi	r20, 0xFE	; 254
    35bc:	5f 4f       	sbci	r21, 0xFF	; 255
    35be:	8e 81       	ldd	r24, Y+6	; 0x06
    35c0:	9f 81       	ldd	r25, Y+7	; 0x07
    35c2:	fc 01       	movw	r30, r24
    35c4:	86 89       	ldd	r24, Z+22	; 0x16
    35c6:	28 2f       	mov	r18, r24
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	c9 01       	movw	r24, r18
    35cc:	88 0f       	add	r24, r24
    35ce:	99 1f       	adc	r25, r25
    35d0:	88 0f       	add	r24, r24
    35d2:	99 1f       	adc	r25, r25
    35d4:	88 0f       	add	r24, r24
    35d6:	99 1f       	adc	r25, r25
    35d8:	82 0f       	add	r24, r18
    35da:	93 1f       	adc	r25, r19
    35dc:	8a 59       	subi	r24, 0x9A	; 154
    35de:	98 4f       	sbci	r25, 0xF8	; 248
    35e0:	ba 01       	movw	r22, r20
    35e2:	0e 94 1d 0b 	call	0x163a	; 0x163a <vListInsertEnd>
    35e6:	8e 81       	ldd	r24, Y+6	; 0x06
    35e8:	9f 81       	ldd	r25, Y+7	; 0x07
    35ea:	fc 01       	movw	r30, r24
    35ec:	26 89       	ldd	r18, Z+22	; 0x16
    35ee:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    35f2:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    35f6:	fc 01       	movw	r30, r24
    35f8:	86 89       	ldd	r24, Z+22	; 0x16
    35fa:	28 17       	cp	r18, r24
    35fc:	08 f4       	brcc	.+2      	; 0x3600 <xTaskIncrementTick+0x176>
    35fe:	8b cf       	rjmp	.-234    	; 0x3516 <xTaskIncrementTick+0x8c>
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	89 83       	std	Y+1, r24	; 0x01
    3604:	88 cf       	rjmp	.-240    	; 0x3516 <xTaskIncrementTick+0x8c>
    3606:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    360a:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    360e:	fc 01       	movw	r30, r24
    3610:	86 89       	ldd	r24, Z+22	; 0x16
    3612:	28 2f       	mov	r18, r24
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	c9 01       	movw	r24, r18
    3618:	88 0f       	add	r24, r24
    361a:	99 1f       	adc	r25, r25
    361c:	88 0f       	add	r24, r24
    361e:	99 1f       	adc	r25, r25
    3620:	88 0f       	add	r24, r24
    3622:	99 1f       	adc	r25, r25
    3624:	82 0f       	add	r24, r18
    3626:	93 1f       	adc	r25, r19
    3628:	8a 59       	subi	r24, 0x9A	; 154
    362a:	98 4f       	sbci	r25, 0xF8	; 248
    362c:	fc 01       	movw	r30, r24
    362e:	80 81       	ld	r24, Z
    3630:	82 30       	cpi	r24, 0x02	; 2
    3632:	40 f0       	brcs	.+16     	; 0x3644 <xTaskIncrementTick+0x1ba>
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	89 83       	std	Y+1, r24	; 0x01
    3638:	05 c0       	rjmp	.+10     	; 0x3644 <xTaskIncrementTick+0x1ba>
    363a:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <uxPendedTicks>
    363e:	8f 5f       	subi	r24, 0xFF	; 255
    3640:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <uxPendedTicks>
    3644:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xYieldPending>
    3648:	88 23       	and	r24, r24
    364a:	11 f0       	breq	.+4      	; 0x3650 <xTaskIncrementTick+0x1c6>
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	89 83       	std	Y+1, r24	; 0x01
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	29 96       	adiw	r28, 0x09	; 9
    3654:	0f b6       	in	r0, 0x3f	; 63
    3656:	f8 94       	cli
    3658:	de bf       	out	0x3e, r29	; 62
    365a:	0f be       	out	0x3f, r0	; 63
    365c:	cd bf       	out	0x3d, r28	; 61
    365e:	df 91       	pop	r29
    3660:	cf 91       	pop	r28
    3662:	08 95       	ret

00003664 <vTaskSwitchContext>:
    3664:	cf 93       	push	r28
    3666:	df 93       	push	r29
    3668:	00 d0       	rcall	.+0      	; 0x366a <vTaskSwitchContext+0x6>
    366a:	1f 92       	push	r1
    366c:	cd b7       	in	r28, 0x3d	; 61
    366e:	de b7       	in	r29, 0x3e	; 62
    3670:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <uxSchedulerSuspended>
    3674:	88 23       	and	r24, r24
    3676:	21 f0       	breq	.+8      	; 0x3680 <vTaskSwitchContext+0x1c>
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <xYieldPending>
    367e:	71 c0       	rjmp	.+226    	; 0x3762 <vTaskSwitchContext+0xfe>
    3680:	10 92 b9 07 	sts	0x07B9, r1	; 0x8007b9 <xYieldPending>
    3684:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3688:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    368c:	fc 01       	movw	r30, r24
    368e:	85 a1       	ldd	r24, Z+37	; 0x25
    3690:	96 a1       	ldd	r25, Z+38	; 0x26
    3692:	0e 94 1d 0a 	call	0x143a	; 0x143a <switch_out>
    3696:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxTopReadyPriority>
    369a:	89 83       	std	Y+1, r24	; 0x01
    369c:	03 c0       	rjmp	.+6      	; 0x36a4 <vTaskSwitchContext+0x40>
    369e:	89 81       	ldd	r24, Y+1	; 0x01
    36a0:	81 50       	subi	r24, 0x01	; 1
    36a2:	89 83       	std	Y+1, r24	; 0x01
    36a4:	89 81       	ldd	r24, Y+1	; 0x01
    36a6:	28 2f       	mov	r18, r24
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	c9 01       	movw	r24, r18
    36ac:	88 0f       	add	r24, r24
    36ae:	99 1f       	adc	r25, r25
    36b0:	88 0f       	add	r24, r24
    36b2:	99 1f       	adc	r25, r25
    36b4:	88 0f       	add	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	82 0f       	add	r24, r18
    36ba:	93 1f       	adc	r25, r19
    36bc:	8a 59       	subi	r24, 0x9A	; 154
    36be:	98 4f       	sbci	r25, 0xF8	; 248
    36c0:	fc 01       	movw	r30, r24
    36c2:	80 81       	ld	r24, Z
    36c4:	88 23       	and	r24, r24
    36c6:	59 f3       	breq	.-42     	; 0x369e <vTaskSwitchContext+0x3a>
    36c8:	89 81       	ldd	r24, Y+1	; 0x01
    36ca:	28 2f       	mov	r18, r24
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	c9 01       	movw	r24, r18
    36d0:	88 0f       	add	r24, r24
    36d2:	99 1f       	adc	r25, r25
    36d4:	88 0f       	add	r24, r24
    36d6:	99 1f       	adc	r25, r25
    36d8:	88 0f       	add	r24, r24
    36da:	99 1f       	adc	r25, r25
    36dc:	82 0f       	add	r24, r18
    36de:	93 1f       	adc	r25, r19
    36e0:	8a 59       	subi	r24, 0x9A	; 154
    36e2:	98 4f       	sbci	r25, 0xF8	; 248
    36e4:	9b 83       	std	Y+3, r25	; 0x03
    36e6:	8a 83       	std	Y+2, r24	; 0x02
    36e8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ea:	9b 81       	ldd	r25, Y+3	; 0x03
    36ec:	fc 01       	movw	r30, r24
    36ee:	81 81       	ldd	r24, Z+1	; 0x01
    36f0:	92 81       	ldd	r25, Z+2	; 0x02
    36f2:	fc 01       	movw	r30, r24
    36f4:	22 81       	ldd	r18, Z+2	; 0x02
    36f6:	33 81       	ldd	r19, Z+3	; 0x03
    36f8:	8a 81       	ldd	r24, Y+2	; 0x02
    36fa:	9b 81       	ldd	r25, Y+3	; 0x03
    36fc:	fc 01       	movw	r30, r24
    36fe:	32 83       	std	Z+2, r19	; 0x02
    3700:	21 83       	std	Z+1, r18	; 0x01
    3702:	8a 81       	ldd	r24, Y+2	; 0x02
    3704:	9b 81       	ldd	r25, Y+3	; 0x03
    3706:	fc 01       	movw	r30, r24
    3708:	21 81       	ldd	r18, Z+1	; 0x01
    370a:	32 81       	ldd	r19, Z+2	; 0x02
    370c:	8a 81       	ldd	r24, Y+2	; 0x02
    370e:	9b 81       	ldd	r25, Y+3	; 0x03
    3710:	03 96       	adiw	r24, 0x03	; 3
    3712:	28 17       	cp	r18, r24
    3714:	39 07       	cpc	r19, r25
    3716:	69 f4       	brne	.+26     	; 0x3732 <vTaskSwitchContext+0xce>
    3718:	8a 81       	ldd	r24, Y+2	; 0x02
    371a:	9b 81       	ldd	r25, Y+3	; 0x03
    371c:	fc 01       	movw	r30, r24
    371e:	81 81       	ldd	r24, Z+1	; 0x01
    3720:	92 81       	ldd	r25, Z+2	; 0x02
    3722:	fc 01       	movw	r30, r24
    3724:	22 81       	ldd	r18, Z+2	; 0x02
    3726:	33 81       	ldd	r19, Z+3	; 0x03
    3728:	8a 81       	ldd	r24, Y+2	; 0x02
    372a:	9b 81       	ldd	r25, Y+3	; 0x03
    372c:	fc 01       	movw	r30, r24
    372e:	32 83       	std	Z+2, r19	; 0x02
    3730:	21 83       	std	Z+1, r18	; 0x01
    3732:	8a 81       	ldd	r24, Y+2	; 0x02
    3734:	9b 81       	ldd	r25, Y+3	; 0x03
    3736:	fc 01       	movw	r30, r24
    3738:	81 81       	ldd	r24, Z+1	; 0x01
    373a:	92 81       	ldd	r25, Z+2	; 0x02
    373c:	fc 01       	movw	r30, r24
    373e:	86 81       	ldd	r24, Z+6	; 0x06
    3740:	97 81       	ldd	r25, Z+7	; 0x07
    3742:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <pxCurrentTCB+0x1>
    3746:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <pxCurrentTCB>
    374a:	89 81       	ldd	r24, Y+1	; 0x01
    374c:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <uxTopReadyPriority>
    3750:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3754:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    3758:	fc 01       	movw	r30, r24
    375a:	85 a1       	ldd	r24, Z+37	; 0x25
    375c:	96 a1       	ldd	r25, Z+38	; 0x26
    375e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <switch_in>
    3762:	00 00       	nop
    3764:	0f 90       	pop	r0
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	df 91       	pop	r29
    376c:	cf 91       	pop	r28
    376e:	08 95       	ret

00003770 <vTaskPlaceOnEventList>:
    3770:	cf 93       	push	r28
    3772:	df 93       	push	r29
    3774:	00 d0       	rcall	.+0      	; 0x3776 <vTaskPlaceOnEventList+0x6>
    3776:	00 d0       	rcall	.+0      	; 0x3778 <vTaskPlaceOnEventList+0x8>
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	9a 83       	std	Y+2, r25	; 0x02
    377e:	89 83       	std	Y+1, r24	; 0x01
    3780:	7c 83       	std	Y+4, r23	; 0x04
    3782:	6b 83       	std	Y+3, r22	; 0x03
    3784:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3788:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    378c:	9c 01       	movw	r18, r24
    378e:	24 5f       	subi	r18, 0xF4	; 244
    3790:	3f 4f       	sbci	r19, 0xFF	; 255
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	9a 81       	ldd	r25, Y+2	; 0x02
    3796:	b9 01       	movw	r22, r18
    3798:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <vListInsert>
    379c:	8b 81       	ldd	r24, Y+3	; 0x03
    379e:	9c 81       	ldd	r25, Y+4	; 0x04
    37a0:	61 e0       	ldi	r22, 0x01	; 1
    37a2:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <prvAddCurrentTaskToDelayedList>
    37a6:	00 00       	nop
    37a8:	0f 90       	pop	r0
    37aa:	0f 90       	pop	r0
    37ac:	0f 90       	pop	r0
    37ae:	0f 90       	pop	r0
    37b0:	df 91       	pop	r29
    37b2:	cf 91       	pop	r28
    37b4:	08 95       	ret

000037b6 <xTaskRemoveFromEventList>:
    37b6:	cf 93       	push	r28
    37b8:	df 93       	push	r29
    37ba:	00 d0       	rcall	.+0      	; 0x37bc <xTaskRemoveFromEventList+0x6>
    37bc:	00 d0       	rcall	.+0      	; 0x37be <xTaskRemoveFromEventList+0x8>
    37be:	1f 92       	push	r1
    37c0:	cd b7       	in	r28, 0x3d	; 61
    37c2:	de b7       	in	r29, 0x3e	; 62
    37c4:	9d 83       	std	Y+5, r25	; 0x05
    37c6:	8c 83       	std	Y+4, r24	; 0x04
    37c8:	8c 81       	ldd	r24, Y+4	; 0x04
    37ca:	9d 81       	ldd	r25, Y+5	; 0x05
    37cc:	fc 01       	movw	r30, r24
    37ce:	85 81       	ldd	r24, Z+5	; 0x05
    37d0:	96 81       	ldd	r25, Z+6	; 0x06
    37d2:	fc 01       	movw	r30, r24
    37d4:	86 81       	ldd	r24, Z+6	; 0x06
    37d6:	97 81       	ldd	r25, Z+7	; 0x07
    37d8:	9b 83       	std	Y+3, r25	; 0x03
    37da:	8a 83       	std	Y+2, r24	; 0x02
    37dc:	8a 81       	ldd	r24, Y+2	; 0x02
    37de:	9b 81       	ldd	r25, Y+3	; 0x03
    37e0:	0c 96       	adiw	r24, 0x0c	; 12
    37e2:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <uxListRemove>
    37e6:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <uxSchedulerSuspended>
    37ea:	88 23       	and	r24, r24
    37ec:	69 f5       	brne	.+90     	; 0x3848 <xTaskRemoveFromEventList+0x92>
    37ee:	8a 81       	ldd	r24, Y+2	; 0x02
    37f0:	9b 81       	ldd	r25, Y+3	; 0x03
    37f2:	02 96       	adiw	r24, 0x02	; 2
    37f4:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <uxListRemove>
    37f8:	8a 81       	ldd	r24, Y+2	; 0x02
    37fa:	9b 81       	ldd	r25, Y+3	; 0x03
    37fc:	fc 01       	movw	r30, r24
    37fe:	96 89       	ldd	r25, Z+22	; 0x16
    3800:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxTopReadyPriority>
    3804:	89 17       	cp	r24, r25
    3806:	30 f4       	brcc	.+12     	; 0x3814 <xTaskRemoveFromEventList+0x5e>
    3808:	8a 81       	ldd	r24, Y+2	; 0x02
    380a:	9b 81       	ldd	r25, Y+3	; 0x03
    380c:	fc 01       	movw	r30, r24
    380e:	86 89       	ldd	r24, Z+22	; 0x16
    3810:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <uxTopReadyPriority>
    3814:	8a 81       	ldd	r24, Y+2	; 0x02
    3816:	9b 81       	ldd	r25, Y+3	; 0x03
    3818:	ac 01       	movw	r20, r24
    381a:	4e 5f       	subi	r20, 0xFE	; 254
    381c:	5f 4f       	sbci	r21, 0xFF	; 255
    381e:	8a 81       	ldd	r24, Y+2	; 0x02
    3820:	9b 81       	ldd	r25, Y+3	; 0x03
    3822:	fc 01       	movw	r30, r24
    3824:	86 89       	ldd	r24, Z+22	; 0x16
    3826:	28 2f       	mov	r18, r24
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	c9 01       	movw	r24, r18
    382c:	88 0f       	add	r24, r24
    382e:	99 1f       	adc	r25, r25
    3830:	88 0f       	add	r24, r24
    3832:	99 1f       	adc	r25, r25
    3834:	88 0f       	add	r24, r24
    3836:	99 1f       	adc	r25, r25
    3838:	82 0f       	add	r24, r18
    383a:	93 1f       	adc	r25, r19
    383c:	8a 59       	subi	r24, 0x9A	; 154
    383e:	98 4f       	sbci	r25, 0xF8	; 248
    3840:	ba 01       	movw	r22, r20
    3842:	0e 94 1d 0b 	call	0x163a	; 0x163a <vListInsertEnd>
    3846:	08 c0       	rjmp	.+16     	; 0x3858 <xTaskRemoveFromEventList+0xa2>
    3848:	8a 81       	ldd	r24, Y+2	; 0x02
    384a:	9b 81       	ldd	r25, Y+3	; 0x03
    384c:	0c 96       	adiw	r24, 0x0c	; 12
    384e:	bc 01       	movw	r22, r24
    3850:	80 ea       	ldi	r24, 0xA0	; 160
    3852:	97 e0       	ldi	r25, 0x07	; 7
    3854:	0e 94 1d 0b 	call	0x163a	; 0x163a <vListInsertEnd>
    3858:	8a 81       	ldd	r24, Y+2	; 0x02
    385a:	9b 81       	ldd	r25, Y+3	; 0x03
    385c:	fc 01       	movw	r30, r24
    385e:	26 89       	ldd	r18, Z+22	; 0x16
    3860:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3864:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    3868:	fc 01       	movw	r30, r24
    386a:	86 89       	ldd	r24, Z+22	; 0x16
    386c:	82 17       	cp	r24, r18
    386e:	30 f4       	brcc	.+12     	; 0x387c <xTaskRemoveFromEventList+0xc6>
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	89 83       	std	Y+1, r24	; 0x01
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <xYieldPending>
    387a:	01 c0       	rjmp	.+2      	; 0x387e <xTaskRemoveFromEventList+0xc8>
    387c:	19 82       	std	Y+1, r1	; 0x01
    387e:	89 81       	ldd	r24, Y+1	; 0x01
    3880:	0f 90       	pop	r0
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	0f 90       	pop	r0
    3888:	0f 90       	pop	r0
    388a:	df 91       	pop	r29
    388c:	cf 91       	pop	r28
    388e:	08 95       	ret

00003890 <vTaskSetTimeOutState>:
    3890:	cf 93       	push	r28
    3892:	df 93       	push	r29
    3894:	00 d0       	rcall	.+0      	; 0x3896 <vTaskSetTimeOutState+0x6>
    3896:	cd b7       	in	r28, 0x3d	; 61
    3898:	de b7       	in	r29, 0x3e	; 62
    389a:	9a 83       	std	Y+2, r25	; 0x02
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	20 91 ba 07 	lds	r18, 0x07BA	; 0x8007ba <xNumOfOverflows>
    38a2:	89 81       	ldd	r24, Y+1	; 0x01
    38a4:	9a 81       	ldd	r25, Y+2	; 0x02
    38a6:	fc 01       	movw	r30, r24
    38a8:	20 83       	st	Z, r18
    38aa:	20 91 b4 07 	lds	r18, 0x07B4	; 0x8007b4 <xTickCount>
    38ae:	30 91 b5 07 	lds	r19, 0x07B5	; 0x8007b5 <xTickCount+0x1>
    38b2:	89 81       	ldd	r24, Y+1	; 0x01
    38b4:	9a 81       	ldd	r25, Y+2	; 0x02
    38b6:	fc 01       	movw	r30, r24
    38b8:	32 83       	std	Z+2, r19	; 0x02
    38ba:	21 83       	std	Z+1, r18	; 0x01
    38bc:	00 00       	nop
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	08 95       	ret

000038c8 <xTaskCheckForTimeOut>:
    38c8:	cf 93       	push	r28
    38ca:	df 93       	push	r29
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    38d0:	27 97       	sbiw	r28, 0x07	; 7
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
    38dc:	9d 83       	std	Y+5, r25	; 0x05
    38de:	8c 83       	std	Y+4, r24	; 0x04
    38e0:	7f 83       	std	Y+7, r23	; 0x07
    38e2:	6e 83       	std	Y+6, r22	; 0x06
    38e4:	0f b6       	in	r0, 0x3f	; 63
    38e6:	f8 94       	cli
    38e8:	0f 92       	push	r0
    38ea:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <xTickCount>
    38ee:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <xTickCount+0x1>
    38f2:	9b 83       	std	Y+3, r25	; 0x03
    38f4:	8a 83       	std	Y+2, r24	; 0x02
    38f6:	8c 81       	ldd	r24, Y+4	; 0x04
    38f8:	9d 81       	ldd	r25, Y+5	; 0x05
    38fa:	fc 01       	movw	r30, r24
    38fc:	90 81       	ld	r25, Z
    38fe:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <xNumOfOverflows>
    3902:	98 17       	cp	r25, r24
    3904:	69 f0       	breq	.+26     	; 0x3920 <xTaskCheckForTimeOut+0x58>
    3906:	8c 81       	ldd	r24, Y+4	; 0x04
    3908:	9d 81       	ldd	r25, Y+5	; 0x05
    390a:	fc 01       	movw	r30, r24
    390c:	21 81       	ldd	r18, Z+1	; 0x01
    390e:	32 81       	ldd	r19, Z+2	; 0x02
    3910:	8a 81       	ldd	r24, Y+2	; 0x02
    3912:	9b 81       	ldd	r25, Y+3	; 0x03
    3914:	82 17       	cp	r24, r18
    3916:	93 07       	cpc	r25, r19
    3918:	18 f0       	brcs	.+6      	; 0x3920 <xTaskCheckForTimeOut+0x58>
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	89 83       	std	Y+1, r24	; 0x01
    391e:	30 c0       	rjmp	.+96     	; 0x3980 <xTaskCheckForTimeOut+0xb8>
    3920:	8c 81       	ldd	r24, Y+4	; 0x04
    3922:	9d 81       	ldd	r25, Y+5	; 0x05
    3924:	fc 01       	movw	r30, r24
    3926:	81 81       	ldd	r24, Z+1	; 0x01
    3928:	92 81       	ldd	r25, Z+2	; 0x02
    392a:	2a 81       	ldd	r18, Y+2	; 0x02
    392c:	3b 81       	ldd	r19, Y+3	; 0x03
    392e:	28 1b       	sub	r18, r24
    3930:	39 0b       	sbc	r19, r25
    3932:	8e 81       	ldd	r24, Y+6	; 0x06
    3934:	9f 81       	ldd	r25, Y+7	; 0x07
    3936:	fc 01       	movw	r30, r24
    3938:	80 81       	ld	r24, Z
    393a:	91 81       	ldd	r25, Z+1	; 0x01
    393c:	28 17       	cp	r18, r24
    393e:	39 07       	cpc	r19, r25
    3940:	e8 f4       	brcc	.+58     	; 0x397c <xTaskCheckForTimeOut+0xb4>
    3942:	8e 81       	ldd	r24, Y+6	; 0x06
    3944:	9f 81       	ldd	r25, Y+7	; 0x07
    3946:	fc 01       	movw	r30, r24
    3948:	20 81       	ld	r18, Z
    394a:	31 81       	ldd	r19, Z+1	; 0x01
    394c:	8c 81       	ldd	r24, Y+4	; 0x04
    394e:	9d 81       	ldd	r25, Y+5	; 0x05
    3950:	fc 01       	movw	r30, r24
    3952:	41 81       	ldd	r20, Z+1	; 0x01
    3954:	52 81       	ldd	r21, Z+2	; 0x02
    3956:	8a 81       	ldd	r24, Y+2	; 0x02
    3958:	9b 81       	ldd	r25, Y+3	; 0x03
    395a:	ba 01       	movw	r22, r20
    395c:	68 1b       	sub	r22, r24
    395e:	79 0b       	sbc	r23, r25
    3960:	cb 01       	movw	r24, r22
    3962:	28 0f       	add	r18, r24
    3964:	39 1f       	adc	r19, r25
    3966:	8e 81       	ldd	r24, Y+6	; 0x06
    3968:	9f 81       	ldd	r25, Y+7	; 0x07
    396a:	fc 01       	movw	r30, r24
    396c:	31 83       	std	Z+1, r19	; 0x01
    396e:	20 83       	st	Z, r18
    3970:	8c 81       	ldd	r24, Y+4	; 0x04
    3972:	9d 81       	ldd	r25, Y+5	; 0x05
    3974:	0e 94 48 1c 	call	0x3890	; 0x3890 <vTaskSetTimeOutState>
    3978:	19 82       	std	Y+1, r1	; 0x01
    397a:	02 c0       	rjmp	.+4      	; 0x3980 <xTaskCheckForTimeOut+0xb8>
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	89 83       	std	Y+1, r24	; 0x01
    3980:	0f 90       	pop	r0
    3982:	0f be       	out	0x3f, r0	; 63
    3984:	89 81       	ldd	r24, Y+1	; 0x01
    3986:	27 96       	adiw	r28, 0x07	; 7
    3988:	0f b6       	in	r0, 0x3f	; 63
    398a:	f8 94       	cli
    398c:	de bf       	out	0x3e, r29	; 62
    398e:	0f be       	out	0x3f, r0	; 63
    3990:	cd bf       	out	0x3d, r28	; 61
    3992:	df 91       	pop	r29
    3994:	cf 91       	pop	r28
    3996:	08 95       	ret

00003998 <vTaskMissedYield>:
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <xYieldPending>
    39a6:	00 00       	nop
    39a8:	df 91       	pop	r29
    39aa:	cf 91       	pop	r28
    39ac:	08 95       	ret

000039ae <prvIdleTask>:
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
    39b2:	00 d0       	rcall	.+0      	; 0x39b4 <prvIdleTask+0x6>
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
    39b8:	9a 83       	std	Y+2, r25	; 0x02
    39ba:	89 83       	std	Y+1, r24	; 0x01
    39bc:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <prvCheckTasksWaitingTermination>
    39c0:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxReadyTasksLists>
    39c4:	82 30       	cpi	r24, 0x02	; 2
    39c6:	10 f0       	brcs	.+4      	; 0x39cc <prvIdleTask+0x1e>
    39c8:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vPortYield>
    39cc:	0e 94 3e 08 	call	0x107c	; 0x107c <vApplicationIdleHook>
    39d0:	f5 cf       	rjmp	.-22     	; 0x39bc <prvIdleTask+0xe>

000039d2 <prvInitialiseTaskLists>:
    39d2:	cf 93       	push	r28
    39d4:	df 93       	push	r29
    39d6:	1f 92       	push	r1
    39d8:	cd b7       	in	r28, 0x3d	; 61
    39da:	de b7       	in	r29, 0x3e	; 62
    39dc:	19 82       	std	Y+1, r1	; 0x01
    39de:	13 c0       	rjmp	.+38     	; 0x3a06 <prvInitialiseTaskLists+0x34>
    39e0:	89 81       	ldd	r24, Y+1	; 0x01
    39e2:	28 2f       	mov	r18, r24
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	c9 01       	movw	r24, r18
    39e8:	88 0f       	add	r24, r24
    39ea:	99 1f       	adc	r25, r25
    39ec:	88 0f       	add	r24, r24
    39ee:	99 1f       	adc	r25, r25
    39f0:	88 0f       	add	r24, r24
    39f2:	99 1f       	adc	r25, r25
    39f4:	82 0f       	add	r24, r18
    39f6:	93 1f       	adc	r25, r19
    39f8:	8a 59       	subi	r24, 0x9A	; 154
    39fa:	98 4f       	sbci	r25, 0xF8	; 248
    39fc:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <vListInitialise>
    3a00:	89 81       	ldd	r24, Y+1	; 0x01
    3a02:	8f 5f       	subi	r24, 0xFF	; 255
    3a04:	89 83       	std	Y+1, r24	; 0x01
    3a06:	89 81       	ldd	r24, Y+1	; 0x01
    3a08:	84 30       	cpi	r24, 0x04	; 4
    3a0a:	50 f3       	brcs	.-44     	; 0x39e0 <prvInitialiseTaskLists+0xe>
    3a0c:	8a e8       	ldi	r24, 0x8A	; 138
    3a0e:	97 e0       	ldi	r25, 0x07	; 7
    3a10:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <vListInitialise>
    3a14:	83 e9       	ldi	r24, 0x93	; 147
    3a16:	97 e0       	ldi	r25, 0x07	; 7
    3a18:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <vListInitialise>
    3a1c:	80 ea       	ldi	r24, 0xA0	; 160
    3a1e:	97 e0       	ldi	r25, 0x07	; 7
    3a20:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <vListInitialise>
    3a24:	89 ea       	ldi	r24, 0xA9	; 169
    3a26:	97 e0       	ldi	r25, 0x07	; 7
    3a28:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <vListInitialise>
    3a2c:	8a e8       	ldi	r24, 0x8A	; 138
    3a2e:	97 e0       	ldi	r25, 0x07	; 7
    3a30:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <pxDelayedTaskList+0x1>
    3a34:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <pxDelayedTaskList>
    3a38:	83 e9       	ldi	r24, 0x93	; 147
    3a3a:	97 e0       	ldi	r25, 0x07	; 7
    3a3c:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    3a40:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <pxOverflowDelayedTaskList>
    3a44:	00 00       	nop
    3a46:	0f 90       	pop	r0
    3a48:	df 91       	pop	r29
    3a4a:	cf 91       	pop	r28
    3a4c:	08 95       	ret

00003a4e <prvCheckTasksWaitingTermination>:
    3a4e:	cf 93       	push	r28
    3a50:	df 93       	push	r29
    3a52:	00 d0       	rcall	.+0      	; 0x3a54 <prvCheckTasksWaitingTermination+0x6>
    3a54:	1f 92       	push	r1
    3a56:	cd b7       	in	r28, 0x3d	; 61
    3a58:	de b7       	in	r29, 0x3e	; 62
    3a5a:	2f c0       	rjmp	.+94     	; 0x3aba <prvCheckTasksWaitingTermination+0x6c>
    3a5c:	0e 94 a1 19 	call	0x3342	; 0x3342 <vTaskSuspendAll>
    3a60:	90 91 a9 07 	lds	r25, 0x07A9	; 0x8007a9 <xTasksWaitingTermination>
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	99 23       	and	r25, r25
    3a68:	09 f0       	breq	.+2      	; 0x3a6c <prvCheckTasksWaitingTermination+0x1e>
    3a6a:	80 e0       	ldi	r24, 0x00	; 0
    3a6c:	89 83       	std	Y+1, r24	; 0x01
    3a6e:	0e 94 ae 19 	call	0x335c	; 0x335c <xTaskResumeAll>
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	88 23       	and	r24, r24
    3a76:	09 f5       	brne	.+66     	; 0x3aba <prvCheckTasksWaitingTermination+0x6c>
    3a78:	0f b6       	in	r0, 0x3f	; 63
    3a7a:	f8 94       	cli
    3a7c:	0f 92       	push	r0
    3a7e:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <xTasksWaitingTermination+0x5>
    3a82:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <xTasksWaitingTermination+0x6>
    3a86:	fc 01       	movw	r30, r24
    3a88:	86 81       	ldd	r24, Z+6	; 0x06
    3a8a:	97 81       	ldd	r25, Z+7	; 0x07
    3a8c:	9b 83       	std	Y+3, r25	; 0x03
    3a8e:	8a 83       	std	Y+2, r24	; 0x02
    3a90:	8a 81       	ldd	r24, Y+2	; 0x02
    3a92:	9b 81       	ldd	r25, Y+3	; 0x03
    3a94:	02 96       	adiw	r24, 0x02	; 2
    3a96:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <uxListRemove>
    3a9a:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <uxCurrentNumberOfTasks>
    3a9e:	81 50       	subi	r24, 0x01	; 1
    3aa0:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <uxCurrentNumberOfTasks>
    3aa4:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <uxDeletedTasksWaitingCleanUp>
    3aa8:	81 50       	subi	r24, 0x01	; 1
    3aaa:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <uxDeletedTasksWaitingCleanUp>
    3aae:	0f 90       	pop	r0
    3ab0:	0f be       	out	0x3f, r0	; 63
    3ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ab6:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <prvDeleteTCB>
    3aba:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <uxDeletedTasksWaitingCleanUp>
    3abe:	88 23       	and	r24, r24
    3ac0:	69 f6       	brne	.-102    	; 0x3a5c <prvCheckTasksWaitingTermination+0xe>
    3ac2:	00 00       	nop
    3ac4:	0f 90       	pop	r0
    3ac6:	0f 90       	pop	r0
    3ac8:	0f 90       	pop	r0
    3aca:	df 91       	pop	r29
    3acc:	cf 91       	pop	r28
    3ace:	08 95       	ret

00003ad0 <prvDeleteTCB>:
    3ad0:	cf 93       	push	r28
    3ad2:	df 93       	push	r29
    3ad4:	00 d0       	rcall	.+0      	; 0x3ad6 <prvDeleteTCB+0x6>
    3ad6:	cd b7       	in	r28, 0x3d	; 61
    3ad8:	de b7       	in	r29, 0x3e	; 62
    3ada:	9a 83       	std	Y+2, r25	; 0x02
    3adc:	89 83       	std	Y+1, r24	; 0x01
    3ade:	89 81       	ldd	r24, Y+1	; 0x01
    3ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	87 89       	ldd	r24, Z+23	; 0x17
    3ae6:	90 8d       	ldd	r25, Z+24	; 0x18
    3ae8:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <vPortFree>
    3aec:	89 81       	ldd	r24, Y+1	; 0x01
    3aee:	9a 81       	ldd	r25, Y+2	; 0x02
    3af0:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <vPortFree>
    3af4:	00 00       	nop
    3af6:	0f 90       	pop	r0
    3af8:	0f 90       	pop	r0
    3afa:	df 91       	pop	r29
    3afc:	cf 91       	pop	r28
    3afe:	08 95       	ret

00003b00 <prvResetNextTaskUnblockTime>:
    3b00:	cf 93       	push	r28
    3b02:	df 93       	push	r29
    3b04:	00 d0       	rcall	.+0      	; 0x3b06 <prvResetNextTaskUnblockTime+0x6>
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
    3b0a:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <pxDelayedTaskList>
    3b0e:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <pxDelayedTaskList+0x1>
    3b12:	fc 01       	movw	r30, r24
    3b14:	80 81       	ld	r24, Z
    3b16:	88 23       	and	r24, r24
    3b18:	39 f4       	brne	.+14     	; 0x3b28 <prvResetNextTaskUnblockTime+0x28>
    3b1a:	8f ef       	ldi	r24, 0xFF	; 255
    3b1c:	9f ef       	ldi	r25, 0xFF	; 255
    3b1e:	90 93 bd 07 	sts	0x07BD, r25	; 0x8007bd <xNextTaskUnblockTime+0x1>
    3b22:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <xNextTaskUnblockTime>
    3b26:	15 c0       	rjmp	.+42     	; 0x3b52 <prvResetNextTaskUnblockTime+0x52>
    3b28:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <pxDelayedTaskList>
    3b2c:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <pxDelayedTaskList+0x1>
    3b30:	fc 01       	movw	r30, r24
    3b32:	85 81       	ldd	r24, Z+5	; 0x05
    3b34:	96 81       	ldd	r25, Z+6	; 0x06
    3b36:	fc 01       	movw	r30, r24
    3b38:	86 81       	ldd	r24, Z+6	; 0x06
    3b3a:	97 81       	ldd	r25, Z+7	; 0x07
    3b3c:	9a 83       	std	Y+2, r25	; 0x02
    3b3e:	89 83       	std	Y+1, r24	; 0x01
    3b40:	89 81       	ldd	r24, Y+1	; 0x01
    3b42:	9a 81       	ldd	r25, Y+2	; 0x02
    3b44:	fc 01       	movw	r30, r24
    3b46:	82 81       	ldd	r24, Z+2	; 0x02
    3b48:	93 81       	ldd	r25, Z+3	; 0x03
    3b4a:	90 93 bd 07 	sts	0x07BD, r25	; 0x8007bd <xNextTaskUnblockTime+0x1>
    3b4e:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <xNextTaskUnblockTime>
    3b52:	00 00       	nop
    3b54:	0f 90       	pop	r0
    3b56:	0f 90       	pop	r0
    3b58:	df 91       	pop	r29
    3b5a:	cf 91       	pop	r28
    3b5c:	08 95       	ret

00003b5e <vTaskPriorityInherit>:
    3b5e:	cf 93       	push	r28
    3b60:	df 93       	push	r29
    3b62:	00 d0       	rcall	.+0      	; 0x3b64 <vTaskPriorityInherit+0x6>
    3b64:	00 d0       	rcall	.+0      	; 0x3b66 <vTaskPriorityInherit+0x8>
    3b66:	cd b7       	in	r28, 0x3d	; 61
    3b68:	de b7       	in	r29, 0x3e	; 62
    3b6a:	9c 83       	std	Y+4, r25	; 0x04
    3b6c:	8b 83       	std	Y+3, r24	; 0x03
    3b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b70:	9c 81       	ldd	r25, Y+4	; 0x04
    3b72:	9a 83       	std	Y+2, r25	; 0x02
    3b74:	89 83       	std	Y+1, r24	; 0x01
    3b76:	8b 81       	ldd	r24, Y+3	; 0x03
    3b78:	9c 81       	ldd	r25, Y+4	; 0x04
    3b7a:	89 2b       	or	r24, r25
    3b7c:	09 f4       	brne	.+2      	; 0x3b80 <vTaskPriorityInherit+0x22>
    3b7e:	7f c0       	rjmp	.+254    	; 0x3c7e <vTaskPriorityInherit+0x120>
    3b80:	89 81       	ldd	r24, Y+1	; 0x01
    3b82:	9a 81       	ldd	r25, Y+2	; 0x02
    3b84:	fc 01       	movw	r30, r24
    3b86:	26 89       	ldd	r18, Z+22	; 0x16
    3b88:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3b8c:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    3b90:	fc 01       	movw	r30, r24
    3b92:	86 89       	ldd	r24, Z+22	; 0x16
    3b94:	28 17       	cp	r18, r24
    3b96:	08 f0       	brcs	.+2      	; 0x3b9a <vTaskPriorityInherit+0x3c>
    3b98:	72 c0       	rjmp	.+228    	; 0x3c7e <vTaskPriorityInherit+0x120>
    3b9a:	89 81       	ldd	r24, Y+1	; 0x01
    3b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9e:	fc 01       	movw	r30, r24
    3ba0:	84 85       	ldd	r24, Z+12	; 0x0c
    3ba2:	95 85       	ldd	r25, Z+13	; 0x0d
    3ba4:	99 23       	and	r25, r25
    3ba6:	8c f0       	brlt	.+34     	; 0x3bca <vTaskPriorityInherit+0x6c>
    3ba8:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3bac:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	86 89       	ldd	r24, Z+22	; 0x16
    3bb4:	88 2f       	mov	r24, r24
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	24 e0       	ldi	r18, 0x04	; 4
    3bba:	30 e0       	ldi	r19, 0x00	; 0
    3bbc:	28 1b       	sub	r18, r24
    3bbe:	39 0b       	sbc	r19, r25
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc4:	fc 01       	movw	r30, r24
    3bc6:	35 87       	std	Z+13, r19	; 0x0d
    3bc8:	24 87       	std	Z+12, r18	; 0x0c
    3bca:	89 81       	ldd	r24, Y+1	; 0x01
    3bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bce:	fc 01       	movw	r30, r24
    3bd0:	42 85       	ldd	r20, Z+10	; 0x0a
    3bd2:	53 85       	ldd	r21, Z+11	; 0x0b
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd8:	fc 01       	movw	r30, r24
    3bda:	86 89       	ldd	r24, Z+22	; 0x16
    3bdc:	28 2f       	mov	r18, r24
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	c9 01       	movw	r24, r18
    3be2:	88 0f       	add	r24, r24
    3be4:	99 1f       	adc	r25, r25
    3be6:	88 0f       	add	r24, r24
    3be8:	99 1f       	adc	r25, r25
    3bea:	88 0f       	add	r24, r24
    3bec:	99 1f       	adc	r25, r25
    3bee:	82 0f       	add	r24, r18
    3bf0:	93 1f       	adc	r25, r19
    3bf2:	8a 59       	subi	r24, 0x9A	; 154
    3bf4:	98 4f       	sbci	r25, 0xF8	; 248
    3bf6:	48 17       	cp	r20, r24
    3bf8:	59 07       	cpc	r21, r25
    3bfa:	b9 f5       	brne	.+110    	; 0x3c6a <vTaskPriorityInherit+0x10c>
    3bfc:	89 81       	ldd	r24, Y+1	; 0x01
    3bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    3c00:	02 96       	adiw	r24, 0x02	; 2
    3c02:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <uxListRemove>
    3c06:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3c0a:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    3c0e:	fc 01       	movw	r30, r24
    3c10:	26 89       	ldd	r18, Z+22	; 0x16
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	9a 81       	ldd	r25, Y+2	; 0x02
    3c16:	fc 01       	movw	r30, r24
    3c18:	26 8b       	std	Z+22, r18	; 0x16
    3c1a:	89 81       	ldd	r24, Y+1	; 0x01
    3c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c1e:	fc 01       	movw	r30, r24
    3c20:	96 89       	ldd	r25, Z+22	; 0x16
    3c22:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxTopReadyPriority>
    3c26:	89 17       	cp	r24, r25
    3c28:	30 f4       	brcc	.+12     	; 0x3c36 <vTaskPriorityInherit+0xd8>
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2e:	fc 01       	movw	r30, r24
    3c30:	86 89       	ldd	r24, Z+22	; 0x16
    3c32:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <uxTopReadyPriority>
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3a:	ac 01       	movw	r20, r24
    3c3c:	4e 5f       	subi	r20, 0xFE	; 254
    3c3e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	9a 81       	ldd	r25, Y+2	; 0x02
    3c44:	fc 01       	movw	r30, r24
    3c46:	86 89       	ldd	r24, Z+22	; 0x16
    3c48:	28 2f       	mov	r18, r24
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	c9 01       	movw	r24, r18
    3c4e:	88 0f       	add	r24, r24
    3c50:	99 1f       	adc	r25, r25
    3c52:	88 0f       	add	r24, r24
    3c54:	99 1f       	adc	r25, r25
    3c56:	88 0f       	add	r24, r24
    3c58:	99 1f       	adc	r25, r25
    3c5a:	82 0f       	add	r24, r18
    3c5c:	93 1f       	adc	r25, r19
    3c5e:	8a 59       	subi	r24, 0x9A	; 154
    3c60:	98 4f       	sbci	r25, 0xF8	; 248
    3c62:	ba 01       	movw	r22, r20
    3c64:	0e 94 1d 0b 	call	0x163a	; 0x163a <vListInsertEnd>
    3c68:	0a c0       	rjmp	.+20     	; 0x3c7e <vTaskPriorityInherit+0x120>
    3c6a:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3c6e:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    3c72:	fc 01       	movw	r30, r24
    3c74:	26 89       	ldd	r18, Z+22	; 0x16
    3c76:	89 81       	ldd	r24, Y+1	; 0x01
    3c78:	9a 81       	ldd	r25, Y+2	; 0x02
    3c7a:	fc 01       	movw	r30, r24
    3c7c:	26 8b       	std	Z+22, r18	; 0x16
    3c7e:	00 00       	nop
    3c80:	0f 90       	pop	r0
    3c82:	0f 90       	pop	r0
    3c84:	0f 90       	pop	r0
    3c86:	0f 90       	pop	r0
    3c88:	df 91       	pop	r29
    3c8a:	cf 91       	pop	r28
    3c8c:	08 95       	ret

00003c8e <xTaskPriorityDisinherit>:
    3c8e:	cf 93       	push	r28
    3c90:	df 93       	push	r29
    3c92:	00 d0       	rcall	.+0      	; 0x3c94 <xTaskPriorityDisinherit+0x6>
    3c94:	00 d0       	rcall	.+0      	; 0x3c96 <xTaskPriorityDisinherit+0x8>
    3c96:	1f 92       	push	r1
    3c98:	cd b7       	in	r28, 0x3d	; 61
    3c9a:	de b7       	in	r29, 0x3e	; 62
    3c9c:	9d 83       	std	Y+5, r25	; 0x05
    3c9e:	8c 83       	std	Y+4, r24	; 0x04
    3ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ca2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ca4:	9b 83       	std	Y+3, r25	; 0x03
    3ca6:	8a 83       	std	Y+2, r24	; 0x02
    3ca8:	19 82       	std	Y+1, r1	; 0x01
    3caa:	8c 81       	ldd	r24, Y+4	; 0x04
    3cac:	9d 81       	ldd	r25, Y+5	; 0x05
    3cae:	89 2b       	or	r24, r25
    3cb0:	09 f4       	brne	.+2      	; 0x3cb4 <xTaskPriorityDisinherit+0x26>
    3cb2:	61 c0       	rjmp	.+194    	; 0x3d76 <xTaskPriorityDisinherit+0xe8>
    3cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    3cb8:	fc 01       	movw	r30, r24
    3cba:	84 a1       	ldd	r24, Z+36	; 0x24
    3cbc:	2f ef       	ldi	r18, 0xFF	; 255
    3cbe:	28 0f       	add	r18, r24
    3cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc4:	fc 01       	movw	r30, r24
    3cc6:	24 a3       	std	Z+36, r18	; 0x24
    3cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cca:	9b 81       	ldd	r25, Y+3	; 0x03
    3ccc:	fc 01       	movw	r30, r24
    3cce:	26 89       	ldd	r18, Z+22	; 0x16
    3cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	83 a1       	ldd	r24, Z+35	; 0x23
    3cd8:	28 17       	cp	r18, r24
    3cda:	09 f4       	brne	.+2      	; 0x3cde <xTaskPriorityDisinherit+0x50>
    3cdc:	4c c0       	rjmp	.+152    	; 0x3d76 <xTaskPriorityDisinherit+0xe8>
    3cde:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ce2:	fc 01       	movw	r30, r24
    3ce4:	84 a1       	ldd	r24, Z+36	; 0x24
    3ce6:	88 23       	and	r24, r24
    3ce8:	09 f0       	breq	.+2      	; 0x3cec <xTaskPriorityDisinherit+0x5e>
    3cea:	45 c0       	rjmp	.+138    	; 0x3d76 <xTaskPriorityDisinherit+0xe8>
    3cec:	8a 81       	ldd	r24, Y+2	; 0x02
    3cee:	9b 81       	ldd	r25, Y+3	; 0x03
    3cf0:	02 96       	adiw	r24, 0x02	; 2
    3cf2:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <uxListRemove>
    3cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    3cfa:	fc 01       	movw	r30, r24
    3cfc:	23 a1       	ldd	r18, Z+35	; 0x23
    3cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3d00:	9b 81       	ldd	r25, Y+3	; 0x03
    3d02:	fc 01       	movw	r30, r24
    3d04:	26 8b       	std	Z+22, r18	; 0x16
    3d06:	8a 81       	ldd	r24, Y+2	; 0x02
    3d08:	9b 81       	ldd	r25, Y+3	; 0x03
    3d0a:	fc 01       	movw	r30, r24
    3d0c:	86 89       	ldd	r24, Z+22	; 0x16
    3d0e:	88 2f       	mov	r24, r24
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	24 e0       	ldi	r18, 0x04	; 4
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	28 1b       	sub	r18, r24
    3d18:	39 0b       	sbc	r19, r25
    3d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d1e:	fc 01       	movw	r30, r24
    3d20:	35 87       	std	Z+13, r19	; 0x0d
    3d22:	24 87       	std	Z+12, r18	; 0x0c
    3d24:	8a 81       	ldd	r24, Y+2	; 0x02
    3d26:	9b 81       	ldd	r25, Y+3	; 0x03
    3d28:	fc 01       	movw	r30, r24
    3d2a:	96 89       	ldd	r25, Z+22	; 0x16
    3d2c:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <uxTopReadyPriority>
    3d30:	89 17       	cp	r24, r25
    3d32:	30 f4       	brcc	.+12     	; 0x3d40 <xTaskPriorityDisinherit+0xb2>
    3d34:	8a 81       	ldd	r24, Y+2	; 0x02
    3d36:	9b 81       	ldd	r25, Y+3	; 0x03
    3d38:	fc 01       	movw	r30, r24
    3d3a:	86 89       	ldd	r24, Z+22	; 0x16
    3d3c:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <uxTopReadyPriority>
    3d40:	8a 81       	ldd	r24, Y+2	; 0x02
    3d42:	9b 81       	ldd	r25, Y+3	; 0x03
    3d44:	ac 01       	movw	r20, r24
    3d46:	4e 5f       	subi	r20, 0xFE	; 254
    3d48:	5f 4f       	sbci	r21, 0xFF	; 255
    3d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d4e:	fc 01       	movw	r30, r24
    3d50:	86 89       	ldd	r24, Z+22	; 0x16
    3d52:	28 2f       	mov	r18, r24
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	c9 01       	movw	r24, r18
    3d58:	88 0f       	add	r24, r24
    3d5a:	99 1f       	adc	r25, r25
    3d5c:	88 0f       	add	r24, r24
    3d5e:	99 1f       	adc	r25, r25
    3d60:	88 0f       	add	r24, r24
    3d62:	99 1f       	adc	r25, r25
    3d64:	82 0f       	add	r24, r18
    3d66:	93 1f       	adc	r25, r19
    3d68:	8a 59       	subi	r24, 0x9A	; 154
    3d6a:	98 4f       	sbci	r25, 0xF8	; 248
    3d6c:	ba 01       	movw	r22, r20
    3d6e:	0e 94 1d 0b 	call	0x163a	; 0x163a <vListInsertEnd>
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	89 83       	std	Y+1, r24	; 0x01
    3d76:	89 81       	ldd	r24, Y+1	; 0x01
    3d78:	0f 90       	pop	r0
    3d7a:	0f 90       	pop	r0
    3d7c:	0f 90       	pop	r0
    3d7e:	0f 90       	pop	r0
    3d80:	0f 90       	pop	r0
    3d82:	df 91       	pop	r29
    3d84:	cf 91       	pop	r28
    3d86:	08 95       	ret

00003d88 <pvTaskIncrementMutexHeldCount>:
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	cd b7       	in	r28, 0x3d	; 61
    3d8e:	de b7       	in	r29, 0x3e	; 62
    3d90:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3d94:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    3d98:	89 2b       	or	r24, r25
    3d9a:	49 f0       	breq	.+18     	; 0x3dae <pvTaskIncrementMutexHeldCount+0x26>
    3d9c:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3da0:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    3da4:	fc 01       	movw	r30, r24
    3da6:	24 a1       	ldd	r18, Z+36	; 0x24
    3da8:	2f 5f       	subi	r18, 0xFF	; 255
    3daa:	fc 01       	movw	r30, r24
    3dac:	24 a3       	std	Z+36, r18	; 0x24
    3dae:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3db2:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    3db6:	df 91       	pop	r29
    3db8:	cf 91       	pop	r28
    3dba:	08 95       	ret

00003dbc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3dbc:	cf 93       	push	r28
    3dbe:	df 93       	push	r29
    3dc0:	cd b7       	in	r28, 0x3d	; 61
    3dc2:	de b7       	in	r29, 0x3e	; 62
    3dc4:	27 97       	sbiw	r28, 0x07	; 7
    3dc6:	0f b6       	in	r0, 0x3f	; 63
    3dc8:	f8 94       	cli
    3dca:	de bf       	out	0x3e, r29	; 62
    3dcc:	0f be       	out	0x3f, r0	; 63
    3dce:	cd bf       	out	0x3d, r28	; 61
    3dd0:	9e 83       	std	Y+6, r25	; 0x06
    3dd2:	8d 83       	std	Y+5, r24	; 0x05
    3dd4:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3dd6:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <xTickCount>
    3dda:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <xTickCount+0x1>
    3dde:	9a 83       	std	Y+2, r25	; 0x02
    3de0:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3de2:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3de6:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    3dea:	02 96       	adiw	r24, 0x02	; 2
    3dec:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    3df0:	29 81       	ldd	r18, Y+1	; 0x01
    3df2:	3a 81       	ldd	r19, Y+2	; 0x02
    3df4:	8d 81       	ldd	r24, Y+5	; 0x05
    3df6:	9e 81       	ldd	r25, Y+6	; 0x06
    3df8:	82 0f       	add	r24, r18
    3dfa:	93 1f       	adc	r25, r19
    3dfc:	9c 83       	std	Y+4, r25	; 0x04
    3dfe:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3e00:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3e04:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    3e08:	2b 81       	ldd	r18, Y+3	; 0x03
    3e0a:	3c 81       	ldd	r19, Y+4	; 0x04
    3e0c:	fc 01       	movw	r30, r24
    3e0e:	33 83       	std	Z+3, r19	; 0x03
    3e10:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    3e12:	2b 81       	ldd	r18, Y+3	; 0x03
    3e14:	3c 81       	ldd	r19, Y+4	; 0x04
    3e16:	89 81       	ldd	r24, Y+1	; 0x01
    3e18:	9a 81       	ldd	r25, Y+2	; 0x02
    3e1a:	28 17       	cp	r18, r24
    3e1c:	39 07       	cpc	r19, r25
    3e1e:	78 f4       	brcc	.+30     	; 0x3e3e <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3e20:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3e24:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    3e28:	9c 01       	movw	r18, r24
    3e2a:	2e 5f       	subi	r18, 0xFE	; 254
    3e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2e:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <pxOverflowDelayedTaskList>
    3e32:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    3e36:	b9 01       	movw	r22, r18
    3e38:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3e3c:	1d c0       	rjmp	.+58     	; 0x3e78 <prvAddCurrentTaskToDelayedList+0xbc>
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3e3e:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxCurrentTCB>
    3e42:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <pxCurrentTCB+0x1>
    3e46:	9c 01       	movw	r18, r24
    3e48:	2e 5f       	subi	r18, 0xFE	; 254
    3e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e4c:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <pxDelayedTaskList>
    3e50:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <pxDelayedTaskList+0x1>
    3e54:	b9 01       	movw	r22, r18
    3e56:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    3e5a:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <xNextTaskUnblockTime>
    3e5e:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <xNextTaskUnblockTime+0x1>
    3e62:	2b 81       	ldd	r18, Y+3	; 0x03
    3e64:	3c 81       	ldd	r19, Y+4	; 0x04
    3e66:	28 17       	cp	r18, r24
    3e68:	39 07       	cpc	r19, r25
    3e6a:	30 f4       	brcc	.+12     	; 0x3e78 <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    3e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e70:	90 93 bd 07 	sts	0x07BD, r25	; 0x8007bd <xNextTaskUnblockTime+0x1>
    3e74:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3e78:	00 00       	nop
    3e7a:	27 96       	adiw	r28, 0x07	; 7
    3e7c:	0f b6       	in	r0, 0x3f	; 63
    3e7e:	f8 94       	cli
    3e80:	de bf       	out	0x3e, r29	; 62
    3e82:	0f be       	out	0x3f, r0	; 63
    3e84:	cd bf       	out	0x3d, r28	; 61
    3e86:	df 91       	pop	r29
    3e88:	cf 91       	pop	r28
    3e8a:	08 95       	ret

00003e8c <__subsf3>:
    3e8c:	50 58       	subi	r21, 0x80	; 128

00003e8e <__addsf3>:
    3e8e:	bb 27       	eor	r27, r27
    3e90:	aa 27       	eor	r26, r26
    3e92:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__addsf3x>
    3e96:	0c 94 3d 20 	jmp	0x407a	; 0x407a <__fp_round>
    3e9a:	0e 94 2f 20 	call	0x405e	; 0x405e <__fp_pscA>
    3e9e:	38 f0       	brcs	.+14     	; 0x3eae <__addsf3+0x20>
    3ea0:	0e 94 36 20 	call	0x406c	; 0x406c <__fp_pscB>
    3ea4:	20 f0       	brcs	.+8      	; 0x3eae <__addsf3+0x20>
    3ea6:	39 f4       	brne	.+14     	; 0x3eb6 <__addsf3+0x28>
    3ea8:	9f 3f       	cpi	r25, 0xFF	; 255
    3eaa:	19 f4       	brne	.+6      	; 0x3eb2 <__addsf3+0x24>
    3eac:	26 f4       	brtc	.+8      	; 0x3eb6 <__addsf3+0x28>
    3eae:	0c 94 2c 20 	jmp	0x4058	; 0x4058 <__fp_nan>
    3eb2:	0e f4       	brtc	.+2      	; 0x3eb6 <__addsf3+0x28>
    3eb4:	e0 95       	com	r30
    3eb6:	e7 fb       	bst	r30, 7
    3eb8:	0c 94 26 20 	jmp	0x404c	; 0x404c <__fp_inf>

00003ebc <__addsf3x>:
    3ebc:	e9 2f       	mov	r30, r25
    3ebe:	0e 94 4e 20 	call	0x409c	; 0x409c <__fp_split3>
    3ec2:	58 f3       	brcs	.-42     	; 0x3e9a <__addsf3+0xc>
    3ec4:	ba 17       	cp	r27, r26
    3ec6:	62 07       	cpc	r22, r18
    3ec8:	73 07       	cpc	r23, r19
    3eca:	84 07       	cpc	r24, r20
    3ecc:	95 07       	cpc	r25, r21
    3ece:	20 f0       	brcs	.+8      	; 0x3ed8 <__addsf3x+0x1c>
    3ed0:	79 f4       	brne	.+30     	; 0x3ef0 <__addsf3x+0x34>
    3ed2:	a6 f5       	brtc	.+104    	; 0x3f3c <__addsf3x+0x80>
    3ed4:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__fp_zero>
    3ed8:	0e f4       	brtc	.+2      	; 0x3edc <__addsf3x+0x20>
    3eda:	e0 95       	com	r30
    3edc:	0b 2e       	mov	r0, r27
    3ede:	ba 2f       	mov	r27, r26
    3ee0:	a0 2d       	mov	r26, r0
    3ee2:	0b 01       	movw	r0, r22
    3ee4:	b9 01       	movw	r22, r18
    3ee6:	90 01       	movw	r18, r0
    3ee8:	0c 01       	movw	r0, r24
    3eea:	ca 01       	movw	r24, r20
    3eec:	a0 01       	movw	r20, r0
    3eee:	11 24       	eor	r1, r1
    3ef0:	ff 27       	eor	r31, r31
    3ef2:	59 1b       	sub	r21, r25
    3ef4:	99 f0       	breq	.+38     	; 0x3f1c <__addsf3x+0x60>
    3ef6:	59 3f       	cpi	r21, 0xF9	; 249
    3ef8:	50 f4       	brcc	.+20     	; 0x3f0e <__addsf3x+0x52>
    3efa:	50 3e       	cpi	r21, 0xE0	; 224
    3efc:	68 f1       	brcs	.+90     	; 0x3f58 <__addsf3x+0x9c>
    3efe:	1a 16       	cp	r1, r26
    3f00:	f0 40       	sbci	r31, 0x00	; 0
    3f02:	a2 2f       	mov	r26, r18
    3f04:	23 2f       	mov	r18, r19
    3f06:	34 2f       	mov	r19, r20
    3f08:	44 27       	eor	r20, r20
    3f0a:	58 5f       	subi	r21, 0xF8	; 248
    3f0c:	f3 cf       	rjmp	.-26     	; 0x3ef4 <__addsf3x+0x38>
    3f0e:	46 95       	lsr	r20
    3f10:	37 95       	ror	r19
    3f12:	27 95       	ror	r18
    3f14:	a7 95       	ror	r26
    3f16:	f0 40       	sbci	r31, 0x00	; 0
    3f18:	53 95       	inc	r21
    3f1a:	c9 f7       	brne	.-14     	; 0x3f0e <__addsf3x+0x52>
    3f1c:	7e f4       	brtc	.+30     	; 0x3f3c <__addsf3x+0x80>
    3f1e:	1f 16       	cp	r1, r31
    3f20:	ba 0b       	sbc	r27, r26
    3f22:	62 0b       	sbc	r22, r18
    3f24:	73 0b       	sbc	r23, r19
    3f26:	84 0b       	sbc	r24, r20
    3f28:	ba f0       	brmi	.+46     	; 0x3f58 <__addsf3x+0x9c>
    3f2a:	91 50       	subi	r25, 0x01	; 1
    3f2c:	a1 f0       	breq	.+40     	; 0x3f56 <__addsf3x+0x9a>
    3f2e:	ff 0f       	add	r31, r31
    3f30:	bb 1f       	adc	r27, r27
    3f32:	66 1f       	adc	r22, r22
    3f34:	77 1f       	adc	r23, r23
    3f36:	88 1f       	adc	r24, r24
    3f38:	c2 f7       	brpl	.-16     	; 0x3f2a <__addsf3x+0x6e>
    3f3a:	0e c0       	rjmp	.+28     	; 0x3f58 <__addsf3x+0x9c>
    3f3c:	ba 0f       	add	r27, r26
    3f3e:	62 1f       	adc	r22, r18
    3f40:	73 1f       	adc	r23, r19
    3f42:	84 1f       	adc	r24, r20
    3f44:	48 f4       	brcc	.+18     	; 0x3f58 <__addsf3x+0x9c>
    3f46:	87 95       	ror	r24
    3f48:	77 95       	ror	r23
    3f4a:	67 95       	ror	r22
    3f4c:	b7 95       	ror	r27
    3f4e:	f7 95       	ror	r31
    3f50:	9e 3f       	cpi	r25, 0xFE	; 254
    3f52:	08 f0       	brcs	.+2      	; 0x3f56 <__addsf3x+0x9a>
    3f54:	b0 cf       	rjmp	.-160    	; 0x3eb6 <__addsf3+0x28>
    3f56:	93 95       	inc	r25
    3f58:	88 0f       	add	r24, r24
    3f5a:	08 f0       	brcs	.+2      	; 0x3f5e <__addsf3x+0xa2>
    3f5c:	99 27       	eor	r25, r25
    3f5e:	ee 0f       	add	r30, r30
    3f60:	97 95       	ror	r25
    3f62:	87 95       	ror	r24
    3f64:	08 95       	ret

00003f66 <__fixsfsi>:
    3f66:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__fixunssfsi>
    3f6a:	68 94       	set
    3f6c:	b1 11       	cpse	r27, r1
    3f6e:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__fp_szero>
    3f72:	08 95       	ret

00003f74 <__fixunssfsi>:
    3f74:	0e 94 56 20 	call	0x40ac	; 0x40ac <__fp_splitA>
    3f78:	88 f0       	brcs	.+34     	; 0x3f9c <__fixunssfsi+0x28>
    3f7a:	9f 57       	subi	r25, 0x7F	; 127
    3f7c:	98 f0       	brcs	.+38     	; 0x3fa4 <__fixunssfsi+0x30>
    3f7e:	b9 2f       	mov	r27, r25
    3f80:	99 27       	eor	r25, r25
    3f82:	b7 51       	subi	r27, 0x17	; 23
    3f84:	b0 f0       	brcs	.+44     	; 0x3fb2 <__fixunssfsi+0x3e>
    3f86:	e1 f0       	breq	.+56     	; 0x3fc0 <__fixunssfsi+0x4c>
    3f88:	66 0f       	add	r22, r22
    3f8a:	77 1f       	adc	r23, r23
    3f8c:	88 1f       	adc	r24, r24
    3f8e:	99 1f       	adc	r25, r25
    3f90:	1a f0       	brmi	.+6      	; 0x3f98 <__fixunssfsi+0x24>
    3f92:	ba 95       	dec	r27
    3f94:	c9 f7       	brne	.-14     	; 0x3f88 <__fixunssfsi+0x14>
    3f96:	14 c0       	rjmp	.+40     	; 0x3fc0 <__fixunssfsi+0x4c>
    3f98:	b1 30       	cpi	r27, 0x01	; 1
    3f9a:	91 f0       	breq	.+36     	; 0x3fc0 <__fixunssfsi+0x4c>
    3f9c:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__fp_zero>
    3fa0:	b1 e0       	ldi	r27, 0x01	; 1
    3fa2:	08 95       	ret
    3fa4:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__fp_zero>
    3fa8:	67 2f       	mov	r22, r23
    3faa:	78 2f       	mov	r23, r24
    3fac:	88 27       	eor	r24, r24
    3fae:	b8 5f       	subi	r27, 0xF8	; 248
    3fb0:	39 f0       	breq	.+14     	; 0x3fc0 <__fixunssfsi+0x4c>
    3fb2:	b9 3f       	cpi	r27, 0xF9	; 249
    3fb4:	cc f3       	brlt	.-14     	; 0x3fa8 <__fixunssfsi+0x34>
    3fb6:	86 95       	lsr	r24
    3fb8:	77 95       	ror	r23
    3fba:	67 95       	ror	r22
    3fbc:	b3 95       	inc	r27
    3fbe:	d9 f7       	brne	.-10     	; 0x3fb6 <__fixunssfsi+0x42>
    3fc0:	3e f4       	brtc	.+14     	; 0x3fd0 <__fixunssfsi+0x5c>
    3fc2:	90 95       	com	r25
    3fc4:	80 95       	com	r24
    3fc6:	70 95       	com	r23
    3fc8:	61 95       	neg	r22
    3fca:	7f 4f       	sbci	r23, 0xFF	; 255
    3fcc:	8f 4f       	sbci	r24, 0xFF	; 255
    3fce:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd0:	08 95       	ret

00003fd2 <__floatunsisf>:
    3fd2:	e8 94       	clt
    3fd4:	09 c0       	rjmp	.+18     	; 0x3fe8 <__floatsisf+0x12>

00003fd6 <__floatsisf>:
    3fd6:	97 fb       	bst	r25, 7
    3fd8:	3e f4       	brtc	.+14     	; 0x3fe8 <__floatsisf+0x12>
    3fda:	90 95       	com	r25
    3fdc:	80 95       	com	r24
    3fde:	70 95       	com	r23
    3fe0:	61 95       	neg	r22
    3fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe4:	8f 4f       	sbci	r24, 0xFF	; 255
    3fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fe8:	99 23       	and	r25, r25
    3fea:	a9 f0       	breq	.+42     	; 0x4016 <__floatsisf+0x40>
    3fec:	f9 2f       	mov	r31, r25
    3fee:	96 e9       	ldi	r25, 0x96	; 150
    3ff0:	bb 27       	eor	r27, r27
    3ff2:	93 95       	inc	r25
    3ff4:	f6 95       	lsr	r31
    3ff6:	87 95       	ror	r24
    3ff8:	77 95       	ror	r23
    3ffa:	67 95       	ror	r22
    3ffc:	b7 95       	ror	r27
    3ffe:	f1 11       	cpse	r31, r1
    4000:	f8 cf       	rjmp	.-16     	; 0x3ff2 <__floatsisf+0x1c>
    4002:	fa f4       	brpl	.+62     	; 0x4042 <__floatsisf+0x6c>
    4004:	bb 0f       	add	r27, r27
    4006:	11 f4       	brne	.+4      	; 0x400c <__floatsisf+0x36>
    4008:	60 ff       	sbrs	r22, 0
    400a:	1b c0       	rjmp	.+54     	; 0x4042 <__floatsisf+0x6c>
    400c:	6f 5f       	subi	r22, 0xFF	; 255
    400e:	7f 4f       	sbci	r23, 0xFF	; 255
    4010:	8f 4f       	sbci	r24, 0xFF	; 255
    4012:	9f 4f       	sbci	r25, 0xFF	; 255
    4014:	16 c0       	rjmp	.+44     	; 0x4042 <__floatsisf+0x6c>
    4016:	88 23       	and	r24, r24
    4018:	11 f0       	breq	.+4      	; 0x401e <__floatsisf+0x48>
    401a:	96 e9       	ldi	r25, 0x96	; 150
    401c:	11 c0       	rjmp	.+34     	; 0x4040 <__floatsisf+0x6a>
    401e:	77 23       	and	r23, r23
    4020:	21 f0       	breq	.+8      	; 0x402a <__floatsisf+0x54>
    4022:	9e e8       	ldi	r25, 0x8E	; 142
    4024:	87 2f       	mov	r24, r23
    4026:	76 2f       	mov	r23, r22
    4028:	05 c0       	rjmp	.+10     	; 0x4034 <__floatsisf+0x5e>
    402a:	66 23       	and	r22, r22
    402c:	71 f0       	breq	.+28     	; 0x404a <__floatsisf+0x74>
    402e:	96 e8       	ldi	r25, 0x86	; 134
    4030:	86 2f       	mov	r24, r22
    4032:	70 e0       	ldi	r23, 0x00	; 0
    4034:	60 e0       	ldi	r22, 0x00	; 0
    4036:	2a f0       	brmi	.+10     	; 0x4042 <__floatsisf+0x6c>
    4038:	9a 95       	dec	r25
    403a:	66 0f       	add	r22, r22
    403c:	77 1f       	adc	r23, r23
    403e:	88 1f       	adc	r24, r24
    4040:	da f7       	brpl	.-10     	; 0x4038 <__floatsisf+0x62>
    4042:	88 0f       	add	r24, r24
    4044:	96 95       	lsr	r25
    4046:	87 95       	ror	r24
    4048:	97 f9       	bld	r25, 7
    404a:	08 95       	ret

0000404c <__fp_inf>:
    404c:	97 f9       	bld	r25, 7
    404e:	9f 67       	ori	r25, 0x7F	; 127
    4050:	80 e8       	ldi	r24, 0x80	; 128
    4052:	70 e0       	ldi	r23, 0x00	; 0
    4054:	60 e0       	ldi	r22, 0x00	; 0
    4056:	08 95       	ret

00004058 <__fp_nan>:
    4058:	9f ef       	ldi	r25, 0xFF	; 255
    405a:	80 ec       	ldi	r24, 0xC0	; 192
    405c:	08 95       	ret

0000405e <__fp_pscA>:
    405e:	00 24       	eor	r0, r0
    4060:	0a 94       	dec	r0
    4062:	16 16       	cp	r1, r22
    4064:	17 06       	cpc	r1, r23
    4066:	18 06       	cpc	r1, r24
    4068:	09 06       	cpc	r0, r25
    406a:	08 95       	ret

0000406c <__fp_pscB>:
    406c:	00 24       	eor	r0, r0
    406e:	0a 94       	dec	r0
    4070:	12 16       	cp	r1, r18
    4072:	13 06       	cpc	r1, r19
    4074:	14 06       	cpc	r1, r20
    4076:	05 06       	cpc	r0, r21
    4078:	08 95       	ret

0000407a <__fp_round>:
    407a:	09 2e       	mov	r0, r25
    407c:	03 94       	inc	r0
    407e:	00 0c       	add	r0, r0
    4080:	11 f4       	brne	.+4      	; 0x4086 <__fp_round+0xc>
    4082:	88 23       	and	r24, r24
    4084:	52 f0       	brmi	.+20     	; 0x409a <__fp_round+0x20>
    4086:	bb 0f       	add	r27, r27
    4088:	40 f4       	brcc	.+16     	; 0x409a <__fp_round+0x20>
    408a:	bf 2b       	or	r27, r31
    408c:	11 f4       	brne	.+4      	; 0x4092 <__fp_round+0x18>
    408e:	60 ff       	sbrs	r22, 0
    4090:	04 c0       	rjmp	.+8      	; 0x409a <__fp_round+0x20>
    4092:	6f 5f       	subi	r22, 0xFF	; 255
    4094:	7f 4f       	sbci	r23, 0xFF	; 255
    4096:	8f 4f       	sbci	r24, 0xFF	; 255
    4098:	9f 4f       	sbci	r25, 0xFF	; 255
    409a:	08 95       	ret

0000409c <__fp_split3>:
    409c:	57 fd       	sbrc	r21, 7
    409e:	90 58       	subi	r25, 0x80	; 128
    40a0:	44 0f       	add	r20, r20
    40a2:	55 1f       	adc	r21, r21
    40a4:	59 f0       	breq	.+22     	; 0x40bc <__fp_splitA+0x10>
    40a6:	5f 3f       	cpi	r21, 0xFF	; 255
    40a8:	71 f0       	breq	.+28     	; 0x40c6 <__fp_splitA+0x1a>
    40aa:	47 95       	ror	r20

000040ac <__fp_splitA>:
    40ac:	88 0f       	add	r24, r24
    40ae:	97 fb       	bst	r25, 7
    40b0:	99 1f       	adc	r25, r25
    40b2:	61 f0       	breq	.+24     	; 0x40cc <__fp_splitA+0x20>
    40b4:	9f 3f       	cpi	r25, 0xFF	; 255
    40b6:	79 f0       	breq	.+30     	; 0x40d6 <__fp_splitA+0x2a>
    40b8:	87 95       	ror	r24
    40ba:	08 95       	ret
    40bc:	12 16       	cp	r1, r18
    40be:	13 06       	cpc	r1, r19
    40c0:	14 06       	cpc	r1, r20
    40c2:	55 1f       	adc	r21, r21
    40c4:	f2 cf       	rjmp	.-28     	; 0x40aa <__fp_split3+0xe>
    40c6:	46 95       	lsr	r20
    40c8:	f1 df       	rcall	.-30     	; 0x40ac <__fp_splitA>
    40ca:	08 c0       	rjmp	.+16     	; 0x40dc <__fp_splitA+0x30>
    40cc:	16 16       	cp	r1, r22
    40ce:	17 06       	cpc	r1, r23
    40d0:	18 06       	cpc	r1, r24
    40d2:	99 1f       	adc	r25, r25
    40d4:	f1 cf       	rjmp	.-30     	; 0x40b8 <__fp_splitA+0xc>
    40d6:	86 95       	lsr	r24
    40d8:	71 05       	cpc	r23, r1
    40da:	61 05       	cpc	r22, r1
    40dc:	08 94       	sec
    40de:	08 95       	ret

000040e0 <__fp_zero>:
    40e0:	e8 94       	clt

000040e2 <__fp_szero>:
    40e2:	bb 27       	eor	r27, r27
    40e4:	66 27       	eor	r22, r22
    40e6:	77 27       	eor	r23, r23
    40e8:	cb 01       	movw	r24, r22
    40ea:	97 f9       	bld	r25, 7
    40ec:	08 95       	ret

000040ee <pow>:
    40ee:	fa 01       	movw	r30, r20
    40f0:	ee 0f       	add	r30, r30
    40f2:	ff 1f       	adc	r31, r31
    40f4:	30 96       	adiw	r30, 0x00	; 0
    40f6:	21 05       	cpc	r18, r1
    40f8:	31 05       	cpc	r19, r1
    40fa:	a1 f1       	breq	.+104    	; 0x4164 <pow+0x76>
    40fc:	61 15       	cp	r22, r1
    40fe:	71 05       	cpc	r23, r1
    4100:	61 f4       	brne	.+24     	; 0x411a <pow+0x2c>
    4102:	80 38       	cpi	r24, 0x80	; 128
    4104:	bf e3       	ldi	r27, 0x3F	; 63
    4106:	9b 07       	cpc	r25, r27
    4108:	49 f1       	breq	.+82     	; 0x415c <pow+0x6e>
    410a:	68 94       	set
    410c:	90 38       	cpi	r25, 0x80	; 128
    410e:	81 05       	cpc	r24, r1
    4110:	61 f0       	breq	.+24     	; 0x412a <pow+0x3c>
    4112:	80 38       	cpi	r24, 0x80	; 128
    4114:	bf ef       	ldi	r27, 0xFF	; 255
    4116:	9b 07       	cpc	r25, r27
    4118:	41 f0       	breq	.+16     	; 0x412a <pow+0x3c>
    411a:	99 23       	and	r25, r25
    411c:	4a f5       	brpl	.+82     	; 0x4170 <pow+0x82>
    411e:	ff 3f       	cpi	r31, 0xFF	; 255
    4120:	e1 05       	cpc	r30, r1
    4122:	31 05       	cpc	r19, r1
    4124:	21 05       	cpc	r18, r1
    4126:	19 f1       	breq	.+70     	; 0x416e <pow+0x80>
    4128:	e8 94       	clt
    412a:	08 94       	sec
    412c:	e7 95       	ror	r30
    412e:	d9 01       	movw	r26, r18
    4130:	aa 23       	and	r26, r26
    4132:	29 f4       	brne	.+10     	; 0x413e <pow+0x50>
    4134:	ab 2f       	mov	r26, r27
    4136:	be 2f       	mov	r27, r30
    4138:	f8 5f       	subi	r31, 0xF8	; 248
    413a:	d0 f3       	brcs	.-12     	; 0x4130 <pow+0x42>
    413c:	10 c0       	rjmp	.+32     	; 0x415e <pow+0x70>
    413e:	ff 5f       	subi	r31, 0xFF	; 255
    4140:	70 f4       	brcc	.+28     	; 0x415e <pow+0x70>
    4142:	a6 95       	lsr	r26
    4144:	e0 f7       	brcc	.-8      	; 0x413e <pow+0x50>
    4146:	f7 39       	cpi	r31, 0x97	; 151
    4148:	50 f0       	brcs	.+20     	; 0x415e <pow+0x70>
    414a:	19 f0       	breq	.+6      	; 0x4152 <pow+0x64>
    414c:	ff 3a       	cpi	r31, 0xAF	; 175
    414e:	38 f4       	brcc	.+14     	; 0x415e <pow+0x70>
    4150:	9f 77       	andi	r25, 0x7F	; 127
    4152:	9f 93       	push	r25
    4154:	0d d0       	rcall	.+26     	; 0x4170 <pow+0x82>
    4156:	0f 90       	pop	r0
    4158:	07 fc       	sbrc	r0, 7
    415a:	90 58       	subi	r25, 0x80	; 128
    415c:	08 95       	ret
    415e:	46 f0       	brts	.+16     	; 0x4170 <pow+0x82>
    4160:	0c 94 2c 20 	jmp	0x4058	; 0x4058 <__fp_nan>
    4164:	60 e0       	ldi	r22, 0x00	; 0
    4166:	70 e0       	ldi	r23, 0x00	; 0
    4168:	80 e8       	ldi	r24, 0x80	; 128
    416a:	9f e3       	ldi	r25, 0x3F	; 63
    416c:	08 95       	ret
    416e:	4f e7       	ldi	r20, 0x7F	; 127
    4170:	9f 77       	andi	r25, 0x7F	; 127
    4172:	5f 93       	push	r21
    4174:	4f 93       	push	r20
    4176:	3f 93       	push	r19
    4178:	2f 93       	push	r18
    417a:	0e 94 72 21 	call	0x42e4	; 0x42e4 <log>
    417e:	2f 91       	pop	r18
    4180:	3f 91       	pop	r19
    4182:	4f 91       	pop	r20
    4184:	5f 91       	pop	r21
    4186:	0e 94 ee 21 	call	0x43dc	; 0x43dc <__mulsf3>
    418a:	0c 94 cf 20 	jmp	0x419e	; 0x419e <exp>
    418e:	29 f4       	brne	.+10     	; 0x419a <pow+0xac>
    4190:	16 f0       	brts	.+4      	; 0x4196 <pow+0xa8>
    4192:	0c 94 26 20 	jmp	0x404c	; 0x404c <__fp_inf>
    4196:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__fp_zero>
    419a:	0c 94 2c 20 	jmp	0x4058	; 0x4058 <__fp_nan>

0000419e <exp>:
    419e:	0e 94 56 20 	call	0x40ac	; 0x40ac <__fp_splitA>
    41a2:	a8 f3       	brcs	.-22     	; 0x418e <pow+0xa0>
    41a4:	96 38       	cpi	r25, 0x86	; 134
    41a6:	a0 f7       	brcc	.-24     	; 0x4190 <pow+0xa2>
    41a8:	07 f8       	bld	r0, 7
    41aa:	0f 92       	push	r0
    41ac:	e8 94       	clt
    41ae:	2b e3       	ldi	r18, 0x3B	; 59
    41b0:	3a ea       	ldi	r19, 0xAA	; 170
    41b2:	48 eb       	ldi	r20, 0xB8	; 184
    41b4:	5f e7       	ldi	r21, 0x7F	; 127
    41b6:	0e 94 04 22 	call	0x4408	; 0x4408 <__mulsf3_pse>
    41ba:	0f 92       	push	r0
    41bc:	0f 92       	push	r0
    41be:	0f 92       	push	r0
    41c0:	4d b7       	in	r20, 0x3d	; 61
    41c2:	5e b7       	in	r21, 0x3e	; 62
    41c4:	0f 92       	push	r0
    41c6:	0e 94 ba 21 	call	0x4374	; 0x4374 <modf>
    41ca:	ea ee       	ldi	r30, 0xEA	; 234
    41cc:	f0 e0       	ldi	r31, 0x00	; 0
    41ce:	0e 94 01 21 	call	0x4202	; 0x4202 <__fp_powser>
    41d2:	4f 91       	pop	r20
    41d4:	5f 91       	pop	r21
    41d6:	ef 91       	pop	r30
    41d8:	ff 91       	pop	r31
    41da:	e5 95       	asr	r30
    41dc:	ee 1f       	adc	r30, r30
    41de:	ff 1f       	adc	r31, r31
    41e0:	49 f0       	breq	.+18     	; 0x41f4 <exp+0x56>
    41e2:	fe 57       	subi	r31, 0x7E	; 126
    41e4:	e0 68       	ori	r30, 0x80	; 128
    41e6:	44 27       	eor	r20, r20
    41e8:	ee 0f       	add	r30, r30
    41ea:	44 1f       	adc	r20, r20
    41ec:	fa 95       	dec	r31
    41ee:	e1 f7       	brne	.-8      	; 0x41e8 <exp+0x4a>
    41f0:	41 95       	neg	r20
    41f2:	55 0b       	sbc	r21, r21
    41f4:	0e 94 34 21 	call	0x4268	; 0x4268 <ldexp>
    41f8:	0f 90       	pop	r0
    41fa:	07 fe       	sbrs	r0, 7
    41fc:	0c 94 28 21 	jmp	0x4250	; 0x4250 <inverse>
    4200:	08 95       	ret

00004202 <__fp_powser>:
    4202:	df 93       	push	r29
    4204:	cf 93       	push	r28
    4206:	1f 93       	push	r17
    4208:	0f 93       	push	r16
    420a:	ff 92       	push	r15
    420c:	ef 92       	push	r14
    420e:	df 92       	push	r13
    4210:	7b 01       	movw	r14, r22
    4212:	8c 01       	movw	r16, r24
    4214:	68 94       	set
    4216:	06 c0       	rjmp	.+12     	; 0x4224 <__fp_powser+0x22>
    4218:	da 2e       	mov	r13, r26
    421a:	ef 01       	movw	r28, r30
    421c:	0e 94 01 22 	call	0x4402	; 0x4402 <__mulsf3x>
    4220:	fe 01       	movw	r30, r28
    4222:	e8 94       	clt
    4224:	a5 91       	lpm	r26, Z+
    4226:	25 91       	lpm	r18, Z+
    4228:	35 91       	lpm	r19, Z+
    422a:	45 91       	lpm	r20, Z+
    422c:	55 91       	lpm	r21, Z+
    422e:	a6 f3       	brts	.-24     	; 0x4218 <__fp_powser+0x16>
    4230:	ef 01       	movw	r28, r30
    4232:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__addsf3x>
    4236:	fe 01       	movw	r30, r28
    4238:	97 01       	movw	r18, r14
    423a:	a8 01       	movw	r20, r16
    423c:	da 94       	dec	r13
    423e:	69 f7       	brne	.-38     	; 0x421a <__fp_powser+0x18>
    4240:	df 90       	pop	r13
    4242:	ef 90       	pop	r14
    4244:	ff 90       	pop	r15
    4246:	0f 91       	pop	r16
    4248:	1f 91       	pop	r17
    424a:	cf 91       	pop	r28
    424c:	df 91       	pop	r29
    424e:	08 95       	ret

00004250 <inverse>:
    4250:	9b 01       	movw	r18, r22
    4252:	ac 01       	movw	r20, r24
    4254:	60 e0       	ldi	r22, 0x00	; 0
    4256:	70 e0       	ldi	r23, 0x00	; 0
    4258:	80 e8       	ldi	r24, 0x80	; 128
    425a:	9f e3       	ldi	r25, 0x3F	; 63
    425c:	0c 94 5b 22 	jmp	0x44b6	; 0x44b6 <__divsf3>
    4260:	0c 94 26 20 	jmp	0x404c	; 0x404c <__fp_inf>
    4264:	0c 94 cd 22 	jmp	0x459a	; 0x459a <__fp_mpack>

00004268 <ldexp>:
    4268:	0e 94 56 20 	call	0x40ac	; 0x40ac <__fp_splitA>
    426c:	d8 f3       	brcs	.-10     	; 0x4264 <inverse+0x14>
    426e:	99 23       	and	r25, r25
    4270:	c9 f3       	breq	.-14     	; 0x4264 <inverse+0x14>
    4272:	94 0f       	add	r25, r20
    4274:	51 1d       	adc	r21, r1
    4276:	a3 f3       	brvs	.-24     	; 0x4260 <inverse+0x10>
    4278:	91 50       	subi	r25, 0x01	; 1
    427a:	50 40       	sbci	r21, 0x00	; 0
    427c:	94 f0       	brlt	.+36     	; 0x42a2 <ldexp+0x3a>
    427e:	59 f0       	breq	.+22     	; 0x4296 <ldexp+0x2e>
    4280:	88 23       	and	r24, r24
    4282:	32 f0       	brmi	.+12     	; 0x4290 <ldexp+0x28>
    4284:	66 0f       	add	r22, r22
    4286:	77 1f       	adc	r23, r23
    4288:	88 1f       	adc	r24, r24
    428a:	91 50       	subi	r25, 0x01	; 1
    428c:	50 40       	sbci	r21, 0x00	; 0
    428e:	c1 f7       	brne	.-16     	; 0x4280 <ldexp+0x18>
    4290:	9e 3f       	cpi	r25, 0xFE	; 254
    4292:	51 05       	cpc	r21, r1
    4294:	2c f7       	brge	.-54     	; 0x4260 <inverse+0x10>
    4296:	88 0f       	add	r24, r24
    4298:	91 1d       	adc	r25, r1
    429a:	96 95       	lsr	r25
    429c:	87 95       	ror	r24
    429e:	97 f9       	bld	r25, 7
    42a0:	08 95       	ret
    42a2:	5f 3f       	cpi	r21, 0xFF	; 255
    42a4:	ac f0       	brlt	.+42     	; 0x42d0 <ldexp+0x68>
    42a6:	98 3e       	cpi	r25, 0xE8	; 232
    42a8:	9c f0       	brlt	.+38     	; 0x42d0 <ldexp+0x68>
    42aa:	bb 27       	eor	r27, r27
    42ac:	86 95       	lsr	r24
    42ae:	77 95       	ror	r23
    42b0:	67 95       	ror	r22
    42b2:	b7 95       	ror	r27
    42b4:	08 f4       	brcc	.+2      	; 0x42b8 <ldexp+0x50>
    42b6:	b1 60       	ori	r27, 0x01	; 1
    42b8:	93 95       	inc	r25
    42ba:	c1 f7       	brne	.-16     	; 0x42ac <ldexp+0x44>
    42bc:	bb 0f       	add	r27, r27
    42be:	58 f7       	brcc	.-42     	; 0x4296 <ldexp+0x2e>
    42c0:	11 f4       	brne	.+4      	; 0x42c6 <ldexp+0x5e>
    42c2:	60 ff       	sbrs	r22, 0
    42c4:	e8 cf       	rjmp	.-48     	; 0x4296 <ldexp+0x2e>
    42c6:	6f 5f       	subi	r22, 0xFF	; 255
    42c8:	7f 4f       	sbci	r23, 0xFF	; 255
    42ca:	8f 4f       	sbci	r24, 0xFF	; 255
    42cc:	9f 4f       	sbci	r25, 0xFF	; 255
    42ce:	e3 cf       	rjmp	.-58     	; 0x4296 <ldexp+0x2e>
    42d0:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__fp_szero>
    42d4:	16 f0       	brts	.+4      	; 0x42da <ldexp+0x72>
    42d6:	0c 94 cd 22 	jmp	0x459a	; 0x459a <__fp_mpack>
    42da:	0c 94 2c 20 	jmp	0x4058	; 0x4058 <__fp_nan>
    42de:	68 94       	set
    42e0:	0c 94 26 20 	jmp	0x404c	; 0x404c <__fp_inf>

000042e4 <log>:
    42e4:	0e 94 56 20 	call	0x40ac	; 0x40ac <__fp_splitA>
    42e8:	a8 f3       	brcs	.-22     	; 0x42d4 <ldexp+0x6c>
    42ea:	99 23       	and	r25, r25
    42ec:	c1 f3       	breq	.-16     	; 0x42de <ldexp+0x76>
    42ee:	ae f3       	brts	.-22     	; 0x42da <ldexp+0x72>
    42f0:	df 93       	push	r29
    42f2:	cf 93       	push	r28
    42f4:	1f 93       	push	r17
    42f6:	0f 93       	push	r16
    42f8:	ff 92       	push	r15
    42fa:	c9 2f       	mov	r28, r25
    42fc:	dd 27       	eor	r29, r29
    42fe:	88 23       	and	r24, r24
    4300:	2a f0       	brmi	.+10     	; 0x430c <log+0x28>
    4302:	21 97       	sbiw	r28, 0x01	; 1
    4304:	66 0f       	add	r22, r22
    4306:	77 1f       	adc	r23, r23
    4308:	88 1f       	adc	r24, r24
    430a:	da f7       	brpl	.-10     	; 0x4302 <log+0x1e>
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	40 e8       	ldi	r20, 0x80	; 128
    4312:	5f eb       	ldi	r21, 0xBF	; 191
    4314:	9f e3       	ldi	r25, 0x3F	; 63
    4316:	88 39       	cpi	r24, 0x98	; 152
    4318:	20 f0       	brcs	.+8      	; 0x4322 <log+0x3e>
    431a:	80 3e       	cpi	r24, 0xE0	; 224
    431c:	38 f0       	brcs	.+14     	; 0x432c <log+0x48>
    431e:	21 96       	adiw	r28, 0x01	; 1
    4320:	8f 77       	andi	r24, 0x7F	; 127
    4322:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__addsf3>
    4326:	e2 e1       	ldi	r30, 0x12	; 18
    4328:	f1 e0       	ldi	r31, 0x01	; 1
    432a:	04 c0       	rjmp	.+8      	; 0x4334 <log+0x50>
    432c:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__addsf3>
    4330:	ef e3       	ldi	r30, 0x3F	; 63
    4332:	f1 e0       	ldi	r31, 0x01	; 1
    4334:	0e 94 01 21 	call	0x4202	; 0x4202 <__fp_powser>
    4338:	8b 01       	movw	r16, r22
    433a:	be 01       	movw	r22, r28
    433c:	ec 01       	movw	r28, r24
    433e:	fb 2e       	mov	r15, r27
    4340:	6f 57       	subi	r22, 0x7F	; 127
    4342:	71 09       	sbc	r23, r1
    4344:	75 95       	asr	r23
    4346:	77 1f       	adc	r23, r23
    4348:	88 0b       	sbc	r24, r24
    434a:	99 0b       	sbc	r25, r25
    434c:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__floatsisf>
    4350:	28 e1       	ldi	r18, 0x18	; 24
    4352:	32 e7       	ldi	r19, 0x72	; 114
    4354:	41 e3       	ldi	r20, 0x31	; 49
    4356:	5f e3       	ldi	r21, 0x3F	; 63
    4358:	0e 94 01 22 	call	0x4402	; 0x4402 <__mulsf3x>
    435c:	af 2d       	mov	r26, r15
    435e:	98 01       	movw	r18, r16
    4360:	ae 01       	movw	r20, r28
    4362:	ff 90       	pop	r15
    4364:	0f 91       	pop	r16
    4366:	1f 91       	pop	r17
    4368:	cf 91       	pop	r28
    436a:	df 91       	pop	r29
    436c:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__addsf3x>
    4370:	0c 94 3d 20 	jmp	0x407a	; 0x407a <__fp_round>

00004374 <modf>:
    4374:	fa 01       	movw	r30, r20
    4376:	dc 01       	movw	r26, r24
    4378:	aa 0f       	add	r26, r26
    437a:	bb 1f       	adc	r27, r27
    437c:	9b 01       	movw	r18, r22
    437e:	ac 01       	movw	r20, r24
    4380:	bf 57       	subi	r27, 0x7F	; 127
    4382:	28 f4       	brcc	.+10     	; 0x438e <modf+0x1a>
    4384:	22 27       	eor	r18, r18
    4386:	33 27       	eor	r19, r19
    4388:	44 27       	eor	r20, r20
    438a:	50 78       	andi	r21, 0x80	; 128
    438c:	20 c0       	rjmp	.+64     	; 0x43ce <modf+0x5a>
    438e:	b7 51       	subi	r27, 0x17	; 23
    4390:	90 f4       	brcc	.+36     	; 0x43b6 <modf+0x42>
    4392:	ab 2f       	mov	r26, r27
    4394:	00 24       	eor	r0, r0
    4396:	46 95       	lsr	r20
    4398:	37 95       	ror	r19
    439a:	27 95       	ror	r18
    439c:	01 1c       	adc	r0, r1
    439e:	a3 95       	inc	r26
    43a0:	d2 f3       	brmi	.-12     	; 0x4396 <modf+0x22>
    43a2:	00 20       	and	r0, r0
    43a4:	71 f0       	breq	.+28     	; 0x43c2 <modf+0x4e>
    43a6:	22 0f       	add	r18, r18
    43a8:	33 1f       	adc	r19, r19
    43aa:	44 1f       	adc	r20, r20
    43ac:	b3 95       	inc	r27
    43ae:	da f3       	brmi	.-10     	; 0x43a6 <modf+0x32>
    43b0:	0e d0       	rcall	.+28     	; 0x43ce <modf+0x5a>
    43b2:	0c 94 46 1f 	jmp	0x3e8c	; 0x3e8c <__subsf3>
    43b6:	61 30       	cpi	r22, 0x01	; 1
    43b8:	71 05       	cpc	r23, r1
    43ba:	a0 e8       	ldi	r26, 0x80	; 128
    43bc:	8a 07       	cpc	r24, r26
    43be:	b9 46       	sbci	r27, 0x69	; 105
    43c0:	30 f4       	brcc	.+12     	; 0x43ce <modf+0x5a>
    43c2:	9b 01       	movw	r18, r22
    43c4:	ac 01       	movw	r20, r24
    43c6:	66 27       	eor	r22, r22
    43c8:	77 27       	eor	r23, r23
    43ca:	88 27       	eor	r24, r24
    43cc:	90 78       	andi	r25, 0x80	; 128
    43ce:	30 96       	adiw	r30, 0x00	; 0
    43d0:	21 f0       	breq	.+8      	; 0x43da <modf+0x66>
    43d2:	20 83       	st	Z, r18
    43d4:	31 83       	std	Z+1, r19	; 0x01
    43d6:	42 83       	std	Z+2, r20	; 0x02
    43d8:	53 83       	std	Z+3, r21	; 0x03
    43da:	08 95       	ret

000043dc <__mulsf3>:
    43dc:	0e 94 01 22 	call	0x4402	; 0x4402 <__mulsf3x>
    43e0:	0c 94 3d 20 	jmp	0x407a	; 0x407a <__fp_round>
    43e4:	0e 94 2f 20 	call	0x405e	; 0x405e <__fp_pscA>
    43e8:	38 f0       	brcs	.+14     	; 0x43f8 <__mulsf3+0x1c>
    43ea:	0e 94 36 20 	call	0x406c	; 0x406c <__fp_pscB>
    43ee:	20 f0       	brcs	.+8      	; 0x43f8 <__mulsf3+0x1c>
    43f0:	95 23       	and	r25, r21
    43f2:	11 f0       	breq	.+4      	; 0x43f8 <__mulsf3+0x1c>
    43f4:	0c 94 26 20 	jmp	0x404c	; 0x404c <__fp_inf>
    43f8:	0c 94 2c 20 	jmp	0x4058	; 0x4058 <__fp_nan>
    43fc:	11 24       	eor	r1, r1
    43fe:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__fp_szero>

00004402 <__mulsf3x>:
    4402:	0e 94 4e 20 	call	0x409c	; 0x409c <__fp_split3>
    4406:	70 f3       	brcs	.-36     	; 0x43e4 <__mulsf3+0x8>

00004408 <__mulsf3_pse>:
    4408:	95 9f       	mul	r25, r21
    440a:	c1 f3       	breq	.-16     	; 0x43fc <__mulsf3+0x20>
    440c:	95 0f       	add	r25, r21
    440e:	50 e0       	ldi	r21, 0x00	; 0
    4410:	55 1f       	adc	r21, r21
    4412:	62 9f       	mul	r22, r18
    4414:	f0 01       	movw	r30, r0
    4416:	72 9f       	mul	r23, r18
    4418:	bb 27       	eor	r27, r27
    441a:	f0 0d       	add	r31, r0
    441c:	b1 1d       	adc	r27, r1
    441e:	63 9f       	mul	r22, r19
    4420:	aa 27       	eor	r26, r26
    4422:	f0 0d       	add	r31, r0
    4424:	b1 1d       	adc	r27, r1
    4426:	aa 1f       	adc	r26, r26
    4428:	64 9f       	mul	r22, r20
    442a:	66 27       	eor	r22, r22
    442c:	b0 0d       	add	r27, r0
    442e:	a1 1d       	adc	r26, r1
    4430:	66 1f       	adc	r22, r22
    4432:	82 9f       	mul	r24, r18
    4434:	22 27       	eor	r18, r18
    4436:	b0 0d       	add	r27, r0
    4438:	a1 1d       	adc	r26, r1
    443a:	62 1f       	adc	r22, r18
    443c:	73 9f       	mul	r23, r19
    443e:	b0 0d       	add	r27, r0
    4440:	a1 1d       	adc	r26, r1
    4442:	62 1f       	adc	r22, r18
    4444:	83 9f       	mul	r24, r19
    4446:	a0 0d       	add	r26, r0
    4448:	61 1d       	adc	r22, r1
    444a:	22 1f       	adc	r18, r18
    444c:	74 9f       	mul	r23, r20
    444e:	33 27       	eor	r19, r19
    4450:	a0 0d       	add	r26, r0
    4452:	61 1d       	adc	r22, r1
    4454:	23 1f       	adc	r18, r19
    4456:	84 9f       	mul	r24, r20
    4458:	60 0d       	add	r22, r0
    445a:	21 1d       	adc	r18, r1
    445c:	82 2f       	mov	r24, r18
    445e:	76 2f       	mov	r23, r22
    4460:	6a 2f       	mov	r22, r26
    4462:	11 24       	eor	r1, r1
    4464:	9f 57       	subi	r25, 0x7F	; 127
    4466:	50 40       	sbci	r21, 0x00	; 0
    4468:	9a f0       	brmi	.+38     	; 0x4490 <__mulsf3_pse+0x88>
    446a:	f1 f0       	breq	.+60     	; 0x44a8 <__mulsf3_pse+0xa0>
    446c:	88 23       	and	r24, r24
    446e:	4a f0       	brmi	.+18     	; 0x4482 <__mulsf3_pse+0x7a>
    4470:	ee 0f       	add	r30, r30
    4472:	ff 1f       	adc	r31, r31
    4474:	bb 1f       	adc	r27, r27
    4476:	66 1f       	adc	r22, r22
    4478:	77 1f       	adc	r23, r23
    447a:	88 1f       	adc	r24, r24
    447c:	91 50       	subi	r25, 0x01	; 1
    447e:	50 40       	sbci	r21, 0x00	; 0
    4480:	a9 f7       	brne	.-22     	; 0x446c <__mulsf3_pse+0x64>
    4482:	9e 3f       	cpi	r25, 0xFE	; 254
    4484:	51 05       	cpc	r21, r1
    4486:	80 f0       	brcs	.+32     	; 0x44a8 <__mulsf3_pse+0xa0>
    4488:	0c 94 26 20 	jmp	0x404c	; 0x404c <__fp_inf>
    448c:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__fp_szero>
    4490:	5f 3f       	cpi	r21, 0xFF	; 255
    4492:	e4 f3       	brlt	.-8      	; 0x448c <__mulsf3_pse+0x84>
    4494:	98 3e       	cpi	r25, 0xE8	; 232
    4496:	d4 f3       	brlt	.-12     	; 0x448c <__mulsf3_pse+0x84>
    4498:	86 95       	lsr	r24
    449a:	77 95       	ror	r23
    449c:	67 95       	ror	r22
    449e:	b7 95       	ror	r27
    44a0:	f7 95       	ror	r31
    44a2:	e7 95       	ror	r30
    44a4:	9f 5f       	subi	r25, 0xFF	; 255
    44a6:	c1 f7       	brne	.-16     	; 0x4498 <__mulsf3_pse+0x90>
    44a8:	fe 2b       	or	r31, r30
    44aa:	88 0f       	add	r24, r24
    44ac:	91 1d       	adc	r25, r1
    44ae:	96 95       	lsr	r25
    44b0:	87 95       	ror	r24
    44b2:	97 f9       	bld	r25, 7
    44b4:	08 95       	ret

000044b6 <__divsf3>:
    44b6:	0e 94 6f 22 	call	0x44de	; 0x44de <__divsf3x>
    44ba:	0c 94 3d 20 	jmp	0x407a	; 0x407a <__fp_round>
    44be:	0e 94 36 20 	call	0x406c	; 0x406c <__fp_pscB>
    44c2:	58 f0       	brcs	.+22     	; 0x44da <__divsf3+0x24>
    44c4:	0e 94 2f 20 	call	0x405e	; 0x405e <__fp_pscA>
    44c8:	40 f0       	brcs	.+16     	; 0x44da <__divsf3+0x24>
    44ca:	29 f4       	brne	.+10     	; 0x44d6 <__divsf3+0x20>
    44cc:	5f 3f       	cpi	r21, 0xFF	; 255
    44ce:	29 f0       	breq	.+10     	; 0x44da <__divsf3+0x24>
    44d0:	0c 94 26 20 	jmp	0x404c	; 0x404c <__fp_inf>
    44d4:	51 11       	cpse	r21, r1
    44d6:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__fp_szero>
    44da:	0c 94 2c 20 	jmp	0x4058	; 0x4058 <__fp_nan>

000044de <__divsf3x>:
    44de:	0e 94 4e 20 	call	0x409c	; 0x409c <__fp_split3>
    44e2:	68 f3       	brcs	.-38     	; 0x44be <__divsf3+0x8>

000044e4 <__divsf3_pse>:
    44e4:	99 23       	and	r25, r25
    44e6:	b1 f3       	breq	.-20     	; 0x44d4 <__divsf3+0x1e>
    44e8:	55 23       	and	r21, r21
    44ea:	91 f3       	breq	.-28     	; 0x44d0 <__divsf3+0x1a>
    44ec:	95 1b       	sub	r25, r21
    44ee:	55 0b       	sbc	r21, r21
    44f0:	bb 27       	eor	r27, r27
    44f2:	aa 27       	eor	r26, r26
    44f4:	62 17       	cp	r22, r18
    44f6:	73 07       	cpc	r23, r19
    44f8:	84 07       	cpc	r24, r20
    44fa:	38 f0       	brcs	.+14     	; 0x450a <__divsf3_pse+0x26>
    44fc:	9f 5f       	subi	r25, 0xFF	; 255
    44fe:	5f 4f       	sbci	r21, 0xFF	; 255
    4500:	22 0f       	add	r18, r18
    4502:	33 1f       	adc	r19, r19
    4504:	44 1f       	adc	r20, r20
    4506:	aa 1f       	adc	r26, r26
    4508:	a9 f3       	breq	.-22     	; 0x44f4 <__divsf3_pse+0x10>
    450a:	35 d0       	rcall	.+106    	; 0x4576 <__divsf3_pse+0x92>
    450c:	0e 2e       	mov	r0, r30
    450e:	3a f0       	brmi	.+14     	; 0x451e <__divsf3_pse+0x3a>
    4510:	e0 e8       	ldi	r30, 0x80	; 128
    4512:	32 d0       	rcall	.+100    	; 0x4578 <__divsf3_pse+0x94>
    4514:	91 50       	subi	r25, 0x01	; 1
    4516:	50 40       	sbci	r21, 0x00	; 0
    4518:	e6 95       	lsr	r30
    451a:	00 1c       	adc	r0, r0
    451c:	ca f7       	brpl	.-14     	; 0x4510 <__divsf3_pse+0x2c>
    451e:	2b d0       	rcall	.+86     	; 0x4576 <__divsf3_pse+0x92>
    4520:	fe 2f       	mov	r31, r30
    4522:	29 d0       	rcall	.+82     	; 0x4576 <__divsf3_pse+0x92>
    4524:	66 0f       	add	r22, r22
    4526:	77 1f       	adc	r23, r23
    4528:	88 1f       	adc	r24, r24
    452a:	bb 1f       	adc	r27, r27
    452c:	26 17       	cp	r18, r22
    452e:	37 07       	cpc	r19, r23
    4530:	48 07       	cpc	r20, r24
    4532:	ab 07       	cpc	r26, r27
    4534:	b0 e8       	ldi	r27, 0x80	; 128
    4536:	09 f0       	breq	.+2      	; 0x453a <__divsf3_pse+0x56>
    4538:	bb 0b       	sbc	r27, r27
    453a:	80 2d       	mov	r24, r0
    453c:	bf 01       	movw	r22, r30
    453e:	ff 27       	eor	r31, r31
    4540:	93 58       	subi	r25, 0x83	; 131
    4542:	5f 4f       	sbci	r21, 0xFF	; 255
    4544:	3a f0       	brmi	.+14     	; 0x4554 <__divsf3_pse+0x70>
    4546:	9e 3f       	cpi	r25, 0xFE	; 254
    4548:	51 05       	cpc	r21, r1
    454a:	78 f0       	brcs	.+30     	; 0x456a <__divsf3_pse+0x86>
    454c:	0c 94 26 20 	jmp	0x404c	; 0x404c <__fp_inf>
    4550:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__fp_szero>
    4554:	5f 3f       	cpi	r21, 0xFF	; 255
    4556:	e4 f3       	brlt	.-8      	; 0x4550 <__divsf3_pse+0x6c>
    4558:	98 3e       	cpi	r25, 0xE8	; 232
    455a:	d4 f3       	brlt	.-12     	; 0x4550 <__divsf3_pse+0x6c>
    455c:	86 95       	lsr	r24
    455e:	77 95       	ror	r23
    4560:	67 95       	ror	r22
    4562:	b7 95       	ror	r27
    4564:	f7 95       	ror	r31
    4566:	9f 5f       	subi	r25, 0xFF	; 255
    4568:	c9 f7       	brne	.-14     	; 0x455c <__divsf3_pse+0x78>
    456a:	88 0f       	add	r24, r24
    456c:	91 1d       	adc	r25, r1
    456e:	96 95       	lsr	r25
    4570:	87 95       	ror	r24
    4572:	97 f9       	bld	r25, 7
    4574:	08 95       	ret
    4576:	e1 e0       	ldi	r30, 0x01	; 1
    4578:	66 0f       	add	r22, r22
    457a:	77 1f       	adc	r23, r23
    457c:	88 1f       	adc	r24, r24
    457e:	bb 1f       	adc	r27, r27
    4580:	62 17       	cp	r22, r18
    4582:	73 07       	cpc	r23, r19
    4584:	84 07       	cpc	r24, r20
    4586:	ba 07       	cpc	r27, r26
    4588:	20 f0       	brcs	.+8      	; 0x4592 <__divsf3_pse+0xae>
    458a:	62 1b       	sub	r22, r18
    458c:	73 0b       	sbc	r23, r19
    458e:	84 0b       	sbc	r24, r20
    4590:	ba 0b       	sbc	r27, r26
    4592:	ee 1f       	adc	r30, r30
    4594:	88 f7       	brcc	.-30     	; 0x4578 <__divsf3_pse+0x94>
    4596:	e0 95       	com	r30
    4598:	08 95       	ret

0000459a <__fp_mpack>:
    459a:	9f 3f       	cpi	r25, 0xFF	; 255
    459c:	31 f0       	breq	.+12     	; 0x45aa <__fp_mpack_finite+0xc>

0000459e <__fp_mpack_finite>:
    459e:	91 50       	subi	r25, 0x01	; 1
    45a0:	20 f4       	brcc	.+8      	; 0x45aa <__fp_mpack_finite+0xc>
    45a2:	87 95       	ror	r24
    45a4:	77 95       	ror	r23
    45a6:	67 95       	ror	r22
    45a8:	b7 95       	ror	r27
    45aa:	88 0f       	add	r24, r24
    45ac:	91 1d       	adc	r25, r1
    45ae:	96 95       	lsr	r25
    45b0:	87 95       	ror	r24
    45b2:	97 f9       	bld	r25, 7
    45b4:	08 95       	ret

000045b6 <__udivmodsi4>:
    45b6:	a1 e2       	ldi	r26, 0x21	; 33
    45b8:	1a 2e       	mov	r1, r26
    45ba:	aa 1b       	sub	r26, r26
    45bc:	bb 1b       	sub	r27, r27
    45be:	fd 01       	movw	r30, r26
    45c0:	0d c0       	rjmp	.+26     	; 0x45dc <__udivmodsi4_ep>

000045c2 <__udivmodsi4_loop>:
    45c2:	aa 1f       	adc	r26, r26
    45c4:	bb 1f       	adc	r27, r27
    45c6:	ee 1f       	adc	r30, r30
    45c8:	ff 1f       	adc	r31, r31
    45ca:	a2 17       	cp	r26, r18
    45cc:	b3 07       	cpc	r27, r19
    45ce:	e4 07       	cpc	r30, r20
    45d0:	f5 07       	cpc	r31, r21
    45d2:	20 f0       	brcs	.+8      	; 0x45dc <__udivmodsi4_ep>
    45d4:	a2 1b       	sub	r26, r18
    45d6:	b3 0b       	sbc	r27, r19
    45d8:	e4 0b       	sbc	r30, r20
    45da:	f5 0b       	sbc	r31, r21

000045dc <__udivmodsi4_ep>:
    45dc:	66 1f       	adc	r22, r22
    45de:	77 1f       	adc	r23, r23
    45e0:	88 1f       	adc	r24, r24
    45e2:	99 1f       	adc	r25, r25
    45e4:	1a 94       	dec	r1
    45e6:	69 f7       	brne	.-38     	; 0x45c2 <__udivmodsi4_loop>
    45e8:	60 95       	com	r22
    45ea:	70 95       	com	r23
    45ec:	80 95       	com	r24
    45ee:	90 95       	com	r25
    45f0:	9b 01       	movw	r18, r22
    45f2:	ac 01       	movw	r20, r24
    45f4:	bd 01       	movw	r22, r26
    45f6:	cf 01       	movw	r24, r30
    45f8:	08 95       	ret

000045fa <__tablejump2__>:
    45fa:	ee 0f       	add	r30, r30
    45fc:	ff 1f       	adc	r31, r31
    45fe:	05 90       	lpm	r0, Z+
    4600:	f4 91       	lpm	r31, Z
    4602:	e0 2d       	mov	r30, r0
    4604:	09 94       	ijmp

00004606 <malloc>:
    4606:	0f 93       	push	r16
    4608:	1f 93       	push	r17
    460a:	cf 93       	push	r28
    460c:	df 93       	push	r29
    460e:	82 30       	cpi	r24, 0x02	; 2
    4610:	91 05       	cpc	r25, r1
    4612:	10 f4       	brcc	.+4      	; 0x4618 <malloc+0x12>
    4614:	82 e0       	ldi	r24, 0x02	; 2
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	e0 91 c3 07 	lds	r30, 0x07C3	; 0x8007c3 <__flp>
    461c:	f0 91 c4 07 	lds	r31, 0x07C4	; 0x8007c4 <__flp+0x1>
    4620:	20 e0       	ldi	r18, 0x00	; 0
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	a0 e0       	ldi	r26, 0x00	; 0
    4626:	b0 e0       	ldi	r27, 0x00	; 0
    4628:	30 97       	sbiw	r30, 0x00	; 0
    462a:	19 f1       	breq	.+70     	; 0x4672 <malloc+0x6c>
    462c:	40 81       	ld	r20, Z
    462e:	51 81       	ldd	r21, Z+1	; 0x01
    4630:	02 81       	ldd	r16, Z+2	; 0x02
    4632:	13 81       	ldd	r17, Z+3	; 0x03
    4634:	48 17       	cp	r20, r24
    4636:	59 07       	cpc	r21, r25
    4638:	c8 f0       	brcs	.+50     	; 0x466c <malloc+0x66>
    463a:	84 17       	cp	r24, r20
    463c:	95 07       	cpc	r25, r21
    463e:	69 f4       	brne	.+26     	; 0x465a <malloc+0x54>
    4640:	10 97       	sbiw	r26, 0x00	; 0
    4642:	31 f0       	breq	.+12     	; 0x4650 <malloc+0x4a>
    4644:	12 96       	adiw	r26, 0x02	; 2
    4646:	0c 93       	st	X, r16
    4648:	12 97       	sbiw	r26, 0x02	; 2
    464a:	13 96       	adiw	r26, 0x03	; 3
    464c:	1c 93       	st	X, r17
    464e:	27 c0       	rjmp	.+78     	; 0x469e <malloc+0x98>
    4650:	00 93 c3 07 	sts	0x07C3, r16	; 0x8007c3 <__flp>
    4654:	10 93 c4 07 	sts	0x07C4, r17	; 0x8007c4 <__flp+0x1>
    4658:	22 c0       	rjmp	.+68     	; 0x469e <malloc+0x98>
    465a:	21 15       	cp	r18, r1
    465c:	31 05       	cpc	r19, r1
    465e:	19 f0       	breq	.+6      	; 0x4666 <malloc+0x60>
    4660:	42 17       	cp	r20, r18
    4662:	53 07       	cpc	r21, r19
    4664:	18 f4       	brcc	.+6      	; 0x466c <malloc+0x66>
    4666:	9a 01       	movw	r18, r20
    4668:	bd 01       	movw	r22, r26
    466a:	ef 01       	movw	r28, r30
    466c:	df 01       	movw	r26, r30
    466e:	f8 01       	movw	r30, r16
    4670:	db cf       	rjmp	.-74     	; 0x4628 <malloc+0x22>
    4672:	21 15       	cp	r18, r1
    4674:	31 05       	cpc	r19, r1
    4676:	f9 f0       	breq	.+62     	; 0x46b6 <malloc+0xb0>
    4678:	28 1b       	sub	r18, r24
    467a:	39 0b       	sbc	r19, r25
    467c:	24 30       	cpi	r18, 0x04	; 4
    467e:	31 05       	cpc	r19, r1
    4680:	80 f4       	brcc	.+32     	; 0x46a2 <malloc+0x9c>
    4682:	8a 81       	ldd	r24, Y+2	; 0x02
    4684:	9b 81       	ldd	r25, Y+3	; 0x03
    4686:	61 15       	cp	r22, r1
    4688:	71 05       	cpc	r23, r1
    468a:	21 f0       	breq	.+8      	; 0x4694 <malloc+0x8e>
    468c:	fb 01       	movw	r30, r22
    468e:	93 83       	std	Z+3, r25	; 0x03
    4690:	82 83       	std	Z+2, r24	; 0x02
    4692:	04 c0       	rjmp	.+8      	; 0x469c <malloc+0x96>
    4694:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <__flp+0x1>
    4698:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <__flp>
    469c:	fe 01       	movw	r30, r28
    469e:	32 96       	adiw	r30, 0x02	; 2
    46a0:	44 c0       	rjmp	.+136    	; 0x472a <malloc+0x124>
    46a2:	fe 01       	movw	r30, r28
    46a4:	e2 0f       	add	r30, r18
    46a6:	f3 1f       	adc	r31, r19
    46a8:	81 93       	st	Z+, r24
    46aa:	91 93       	st	Z+, r25
    46ac:	22 50       	subi	r18, 0x02	; 2
    46ae:	31 09       	sbc	r19, r1
    46b0:	39 83       	std	Y+1, r19	; 0x01
    46b2:	28 83       	st	Y, r18
    46b4:	3a c0       	rjmp	.+116    	; 0x472a <malloc+0x124>
    46b6:	20 91 c1 07 	lds	r18, 0x07C1	; 0x8007c1 <__brkval>
    46ba:	30 91 c2 07 	lds	r19, 0x07C2	; 0x8007c2 <__brkval+0x1>
    46be:	23 2b       	or	r18, r19
    46c0:	41 f4       	brne	.+16     	; 0x46d2 <malloc+0xcc>
    46c2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    46c6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    46ca:	30 93 c2 07 	sts	0x07C2, r19	; 0x8007c2 <__brkval+0x1>
    46ce:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <__brkval>
    46d2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    46d6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    46da:	21 15       	cp	r18, r1
    46dc:	31 05       	cpc	r19, r1
    46de:	41 f4       	brne	.+16     	; 0x46f0 <malloc+0xea>
    46e0:	2d b7       	in	r18, 0x3d	; 61
    46e2:	3e b7       	in	r19, 0x3e	; 62
    46e4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    46e8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    46ec:	24 1b       	sub	r18, r20
    46ee:	35 0b       	sbc	r19, r21
    46f0:	e0 91 c1 07 	lds	r30, 0x07C1	; 0x8007c1 <__brkval>
    46f4:	f0 91 c2 07 	lds	r31, 0x07C2	; 0x8007c2 <__brkval+0x1>
    46f8:	e2 17       	cp	r30, r18
    46fa:	f3 07       	cpc	r31, r19
    46fc:	a0 f4       	brcc	.+40     	; 0x4726 <malloc+0x120>
    46fe:	2e 1b       	sub	r18, r30
    4700:	3f 0b       	sbc	r19, r31
    4702:	28 17       	cp	r18, r24
    4704:	39 07       	cpc	r19, r25
    4706:	78 f0       	brcs	.+30     	; 0x4726 <malloc+0x120>
    4708:	ac 01       	movw	r20, r24
    470a:	4e 5f       	subi	r20, 0xFE	; 254
    470c:	5f 4f       	sbci	r21, 0xFF	; 255
    470e:	24 17       	cp	r18, r20
    4710:	35 07       	cpc	r19, r21
    4712:	48 f0       	brcs	.+18     	; 0x4726 <malloc+0x120>
    4714:	4e 0f       	add	r20, r30
    4716:	5f 1f       	adc	r21, r31
    4718:	50 93 c2 07 	sts	0x07C2, r21	; 0x8007c2 <__brkval+0x1>
    471c:	40 93 c1 07 	sts	0x07C1, r20	; 0x8007c1 <__brkval>
    4720:	81 93       	st	Z+, r24
    4722:	91 93       	st	Z+, r25
    4724:	02 c0       	rjmp	.+4      	; 0x472a <malloc+0x124>
    4726:	e0 e0       	ldi	r30, 0x00	; 0
    4728:	f0 e0       	ldi	r31, 0x00	; 0
    472a:	cf 01       	movw	r24, r30
    472c:	df 91       	pop	r29
    472e:	cf 91       	pop	r28
    4730:	1f 91       	pop	r17
    4732:	0f 91       	pop	r16
    4734:	08 95       	ret

00004736 <free>:
    4736:	cf 93       	push	r28
    4738:	df 93       	push	r29
    473a:	00 97       	sbiw	r24, 0x00	; 0
    473c:	09 f4       	brne	.+2      	; 0x4740 <free+0xa>
    473e:	81 c0       	rjmp	.+258    	; 0x4842 <free+0x10c>
    4740:	fc 01       	movw	r30, r24
    4742:	32 97       	sbiw	r30, 0x02	; 2
    4744:	13 82       	std	Z+3, r1	; 0x03
    4746:	12 82       	std	Z+2, r1	; 0x02
    4748:	a0 91 c3 07 	lds	r26, 0x07C3	; 0x8007c3 <__flp>
    474c:	b0 91 c4 07 	lds	r27, 0x07C4	; 0x8007c4 <__flp+0x1>
    4750:	10 97       	sbiw	r26, 0x00	; 0
    4752:	81 f4       	brne	.+32     	; 0x4774 <free+0x3e>
    4754:	20 81       	ld	r18, Z
    4756:	31 81       	ldd	r19, Z+1	; 0x01
    4758:	82 0f       	add	r24, r18
    475a:	93 1f       	adc	r25, r19
    475c:	20 91 c1 07 	lds	r18, 0x07C1	; 0x8007c1 <__brkval>
    4760:	30 91 c2 07 	lds	r19, 0x07C2	; 0x8007c2 <__brkval+0x1>
    4764:	28 17       	cp	r18, r24
    4766:	39 07       	cpc	r19, r25
    4768:	51 f5       	brne	.+84     	; 0x47be <free+0x88>
    476a:	f0 93 c2 07 	sts	0x07C2, r31	; 0x8007c2 <__brkval+0x1>
    476e:	e0 93 c1 07 	sts	0x07C1, r30	; 0x8007c1 <__brkval>
    4772:	67 c0       	rjmp	.+206    	; 0x4842 <free+0x10c>
    4774:	ed 01       	movw	r28, r26
    4776:	20 e0       	ldi	r18, 0x00	; 0
    4778:	30 e0       	ldi	r19, 0x00	; 0
    477a:	ce 17       	cp	r28, r30
    477c:	df 07       	cpc	r29, r31
    477e:	40 f4       	brcc	.+16     	; 0x4790 <free+0x5a>
    4780:	4a 81       	ldd	r20, Y+2	; 0x02
    4782:	5b 81       	ldd	r21, Y+3	; 0x03
    4784:	9e 01       	movw	r18, r28
    4786:	41 15       	cp	r20, r1
    4788:	51 05       	cpc	r21, r1
    478a:	f1 f0       	breq	.+60     	; 0x47c8 <free+0x92>
    478c:	ea 01       	movw	r28, r20
    478e:	f5 cf       	rjmp	.-22     	; 0x477a <free+0x44>
    4790:	d3 83       	std	Z+3, r29	; 0x03
    4792:	c2 83       	std	Z+2, r28	; 0x02
    4794:	40 81       	ld	r20, Z
    4796:	51 81       	ldd	r21, Z+1	; 0x01
    4798:	84 0f       	add	r24, r20
    479a:	95 1f       	adc	r25, r21
    479c:	c8 17       	cp	r28, r24
    479e:	d9 07       	cpc	r29, r25
    47a0:	59 f4       	brne	.+22     	; 0x47b8 <free+0x82>
    47a2:	88 81       	ld	r24, Y
    47a4:	99 81       	ldd	r25, Y+1	; 0x01
    47a6:	84 0f       	add	r24, r20
    47a8:	95 1f       	adc	r25, r21
    47aa:	02 96       	adiw	r24, 0x02	; 2
    47ac:	91 83       	std	Z+1, r25	; 0x01
    47ae:	80 83       	st	Z, r24
    47b0:	8a 81       	ldd	r24, Y+2	; 0x02
    47b2:	9b 81       	ldd	r25, Y+3	; 0x03
    47b4:	93 83       	std	Z+3, r25	; 0x03
    47b6:	82 83       	std	Z+2, r24	; 0x02
    47b8:	21 15       	cp	r18, r1
    47ba:	31 05       	cpc	r19, r1
    47bc:	29 f4       	brne	.+10     	; 0x47c8 <free+0x92>
    47be:	f0 93 c4 07 	sts	0x07C4, r31	; 0x8007c4 <__flp+0x1>
    47c2:	e0 93 c3 07 	sts	0x07C3, r30	; 0x8007c3 <__flp>
    47c6:	3d c0       	rjmp	.+122    	; 0x4842 <free+0x10c>
    47c8:	e9 01       	movw	r28, r18
    47ca:	fb 83       	std	Y+3, r31	; 0x03
    47cc:	ea 83       	std	Y+2, r30	; 0x02
    47ce:	49 91       	ld	r20, Y+
    47d0:	59 91       	ld	r21, Y+
    47d2:	c4 0f       	add	r28, r20
    47d4:	d5 1f       	adc	r29, r21
    47d6:	ec 17       	cp	r30, r28
    47d8:	fd 07       	cpc	r31, r29
    47da:	61 f4       	brne	.+24     	; 0x47f4 <free+0xbe>
    47dc:	80 81       	ld	r24, Z
    47de:	91 81       	ldd	r25, Z+1	; 0x01
    47e0:	84 0f       	add	r24, r20
    47e2:	95 1f       	adc	r25, r21
    47e4:	02 96       	adiw	r24, 0x02	; 2
    47e6:	e9 01       	movw	r28, r18
    47e8:	99 83       	std	Y+1, r25	; 0x01
    47ea:	88 83       	st	Y, r24
    47ec:	82 81       	ldd	r24, Z+2	; 0x02
    47ee:	93 81       	ldd	r25, Z+3	; 0x03
    47f0:	9b 83       	std	Y+3, r25	; 0x03
    47f2:	8a 83       	std	Y+2, r24	; 0x02
    47f4:	e0 e0       	ldi	r30, 0x00	; 0
    47f6:	f0 e0       	ldi	r31, 0x00	; 0
    47f8:	12 96       	adiw	r26, 0x02	; 2
    47fa:	8d 91       	ld	r24, X+
    47fc:	9c 91       	ld	r25, X
    47fe:	13 97       	sbiw	r26, 0x03	; 3
    4800:	00 97       	sbiw	r24, 0x00	; 0
    4802:	19 f0       	breq	.+6      	; 0x480a <free+0xd4>
    4804:	fd 01       	movw	r30, r26
    4806:	dc 01       	movw	r26, r24
    4808:	f7 cf       	rjmp	.-18     	; 0x47f8 <free+0xc2>
    480a:	8d 91       	ld	r24, X+
    480c:	9c 91       	ld	r25, X
    480e:	11 97       	sbiw	r26, 0x01	; 1
    4810:	9d 01       	movw	r18, r26
    4812:	2e 5f       	subi	r18, 0xFE	; 254
    4814:	3f 4f       	sbci	r19, 0xFF	; 255
    4816:	82 0f       	add	r24, r18
    4818:	93 1f       	adc	r25, r19
    481a:	20 91 c1 07 	lds	r18, 0x07C1	; 0x8007c1 <__brkval>
    481e:	30 91 c2 07 	lds	r19, 0x07C2	; 0x8007c2 <__brkval+0x1>
    4822:	28 17       	cp	r18, r24
    4824:	39 07       	cpc	r19, r25
    4826:	69 f4       	brne	.+26     	; 0x4842 <free+0x10c>
    4828:	30 97       	sbiw	r30, 0x00	; 0
    482a:	29 f4       	brne	.+10     	; 0x4836 <free+0x100>
    482c:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <__flp+0x1>
    4830:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <__flp>
    4834:	02 c0       	rjmp	.+4      	; 0x483a <free+0x104>
    4836:	13 82       	std	Z+3, r1	; 0x03
    4838:	12 82       	std	Z+2, r1	; 0x02
    483a:	b0 93 c2 07 	sts	0x07C2, r27	; 0x8007c2 <__brkval+0x1>
    483e:	a0 93 c1 07 	sts	0x07C1, r26	; 0x8007c1 <__brkval>
    4842:	df 91       	pop	r29
    4844:	cf 91       	pop	r28
    4846:	08 95       	ret

00004848 <memcpy>:
    4848:	fb 01       	movw	r30, r22
    484a:	dc 01       	movw	r26, r24
    484c:	02 c0       	rjmp	.+4      	; 0x4852 <memcpy+0xa>
    484e:	01 90       	ld	r0, Z+
    4850:	0d 92       	st	X+, r0
    4852:	41 50       	subi	r20, 0x01	; 1
    4854:	50 40       	sbci	r21, 0x00	; 0
    4856:	d8 f7       	brcc	.-10     	; 0x484e <memcpy+0x6>
    4858:	08 95       	ret

0000485a <memset>:
    485a:	dc 01       	movw	r26, r24
    485c:	01 c0       	rjmp	.+2      	; 0x4860 <memset+0x6>
    485e:	6d 93       	st	X+, r22
    4860:	41 50       	subi	r20, 0x01	; 1
    4862:	50 40       	sbci	r21, 0x00	; 0
    4864:	e0 f7       	brcc	.-8      	; 0x485e <memset+0x4>
    4866:	08 95       	ret

00004868 <_exit>:
    4868:	f8 94       	cli

0000486a <__stop_program>:
    486a:	ff cf       	rjmp	.-2      	; 0x486a <__stop_program>
