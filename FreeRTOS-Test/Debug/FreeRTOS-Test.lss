
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00003c04  00003c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ec  00800150  00800150  00003ce8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003ce8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e8  00000000  00000000  00003d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004117  00000000  00000000  00004240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000126f  00000000  00000000  00008357  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037ae  00000000  00000000  000095c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013a0  00000000  00000000  0000cd74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c80  00000000  00000000  0000e114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029eb  00000000  00000000  0000fd94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  0001277f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__ctors_end>
       4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      34:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__vector_13>
      38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      40:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__vector_16>
      44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      50:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__vector_20>
      54:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__vector_21>
      58:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      5c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      60:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      64:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      68:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      6c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      70:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__vector_28>
      74:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__vector_29>
      78:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	08 00       	.word	0x0008	; ????
      a6:	00 00       	nop
      a8:	be 92       	st	-X, r11
      aa:	24 49       	sbci	r18, 0x94	; 148
      ac:	12 3e       	cpi	r17, 0xE2	; 226
      ae:	ab aa       	std	Y+51, r10	; 0x33
      b0:	aa 2a       	or	r10, r26
      b2:	be cd       	rjmp	.-1156   	; 0xfffffc30 <__eeprom_end+0xff7efc30>
      b4:	cc cc       	rjmp	.-1640   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
      b6:	4c 3e       	cpi	r20, 0xEC	; 236
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	be ab       	std	Y+54, r27	; 0x36
      be:	aa aa       	std	Y+50, r10	; 0x32
      c0:	aa 3e       	cpi	r26, 0xEA	; 234
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	bf 00       	.word	0x00bf	; ????
      c8:	00 00       	nop
      ca:	80 3f       	cpi	r24, 0xF0	; 240
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 08       	sbc	r0, r0
      d2:	41 78       	andi	r20, 0x81	; 129
      d4:	d3 bb       	out	0x13, r29	; 19
      d6:	43 87       	std	Z+11, r20	; 0x0b
      d8:	d1 13       	cpse	r29, r17
      da:	3d 19       	sub	r19, r13
      dc:	0e 3c       	cpi	r16, 0xCE	; 206
      de:	c3 bd       	out	0x23, r28	; 35
      e0:	42 82       	std	Z+2, r4	; 0x02
      e2:	ad 2b       	or	r26, r29
      e4:	3e 68       	ori	r19, 0x8E	; 142
      e6:	ec 82       	std	Y+4, r14	; 0x04
      e8:	76 be       	out	0x36, r7	; 54
      ea:	d9 8f       	std	Y+25, r29	; 0x19
      ec:	e1 a9       	ldd	r30, Z+49	; 0x31
      ee:	3e 4c       	sbci	r19, 0xCE	; 206
      f0:	80 ef       	ldi	r24, 0xF0	; 240
      f2:	ff be       	out	0x3f, r15	; 63
      f4:	01 c4       	rjmp	.+2050   	; 0x8f8 <main+0x54>
      f6:	ff 7f       	andi	r31, 0xFF	; 255
      f8:	3f 00       	.word	0x003f	; ????
      fa:	00 00       	nop
	...

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d8 e0       	ldi	r29, 0x08	; 8
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
     10a:	11 e0       	ldi	r17, 0x01	; 1
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	e4 e0       	ldi	r30, 0x04	; 4
     112:	fc e3       	ldi	r31, 0x3C	; 60
     114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x10>
     116:	05 90       	lpm	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	a0 35       	cpi	r26, 0x50	; 80
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0xc>

00000120 <__do_clear_bss>:
     120:	27 e0       	ldi	r18, 0x07	; 7
     122:	a0 e5       	ldi	r26, 0x50	; 80
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	ac 33       	cpi	r26, 0x3C	; 60
     12c:	b2 07       	cpc	r27, r18
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
     130:	0e 94 52 04 	call	0x8a4	; 0x8a4 <main>
     134:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <_exit>

00000138 <__bad_interrupt>:
     138:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013c <make_frame>:
		player.y++;
		break;
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	2a 97       	sbiw	r28, 0x0a	; 10
     14a:	0f b6       	in	r0, 0x3f	; 63
     14c:	f8 94       	cli
     14e:	de bf       	out	0x3e, r29	; 62
     150:	0f be       	out	0x3f, r0	; 63
     152:	cd bf       	out	0x3d, r28	; 61
     154:	9a 87       	std	Y+10, r25	; 0x0a
     156:	89 87       	std	Y+9, r24	; 0x09
     158:	1a 82       	std	Y+2, r1	; 0x02
     15a:	19 82       	std	Y+1, r1	; 0x01
     15c:	1a c0       	rjmp	.+52     	; 0x192 <make_frame+0x56>
     15e:	1c 82       	std	Y+4, r1	; 0x04
     160:	1b 82       	std	Y+3, r1	; 0x03
     162:	0e c0       	rjmp	.+28     	; 0x180 <make_frame+0x44>
     164:	8b 81       	ldd	r24, Y+3	; 0x03
     166:	9c 81       	ldd	r25, Y+4	; 0x04
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	80 5b       	subi	r24, 0xB0	; 176
     16e:	9e 4f       	sbci	r25, 0xFE	; 254
     170:	fc 01       	movw	r30, r24
     172:	11 82       	std	Z+1, r1	; 0x01
     174:	10 82       	st	Z, r1
     176:	8b 81       	ldd	r24, Y+3	; 0x03
     178:	9c 81       	ldd	r25, Y+4	; 0x04
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	9c 83       	std	Y+4, r25	; 0x04
     17e:	8b 83       	std	Y+3, r24	; 0x03
     180:	8b 81       	ldd	r24, Y+3	; 0x03
     182:	9c 81       	ldd	r25, Y+4	; 0x04
     184:	0e 97       	sbiw	r24, 0x0e	; 14
     186:	74 f3       	brlt	.-36     	; 0x164 <make_frame+0x28>
     188:	89 81       	ldd	r24, Y+1	; 0x01
     18a:	9a 81       	ldd	r25, Y+2	; 0x02
     18c:	01 96       	adiw	r24, 0x01	; 1
     18e:	9a 83       	std	Y+2, r25	; 0x02
     190:	89 83       	std	Y+1, r24	; 0x01
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	9a 81       	ldd	r25, Y+2	; 0x02
     196:	0a 97       	sbiw	r24, 0x0a	; 10
     198:	14 f3       	brlt	.-60     	; 0x15e <make_frame+0x22>
     19a:	1e 82       	std	Y+6, r1	; 0x06
     19c:	1d 82       	std	Y+5, r1	; 0x05
     19e:	65 c0       	rjmp	.+202    	; 0x26a <make_frame+0x12e>
     1a0:	18 86       	std	Y+8, r1	; 0x08
     1a2:	1f 82       	std	Y+7, r1	; 0x07
     1a4:	58 c0       	rjmp	.+176    	; 0x256 <make_frame+0x11a>
     1a6:	8f 81       	ldd	r24, Y+7	; 0x07
     1a8:	98 85       	ldd	r25, Y+8	; 0x08
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	9c 01       	movw	r18, r24
     1b0:	22 0f       	add	r18, r18
     1b2:	33 1f       	adc	r19, r19
     1b4:	22 0f       	add	r18, r18
     1b6:	33 1f       	adc	r19, r19
     1b8:	82 0f       	add	r24, r18
     1ba:	93 1f       	adc	r25, r19
     1bc:	2d 81       	ldd	r18, Y+5	; 0x05
     1be:	3e 81       	ldd	r19, Y+6	; 0x06
     1c0:	82 0f       	add	r24, r18
     1c2:	93 1f       	adc	r25, r19
     1c4:	88 0f       	add	r24, r24
     1c6:	99 1f       	adc	r25, r25
     1c8:	84 59       	subi	r24, 0x94	; 148
     1ca:	9e 4f       	sbci	r25, 0xFE	; 254
     1cc:	fc 01       	movw	r30, r24
     1ce:	80 81       	ld	r24, Z
     1d0:	91 81       	ldd	r25, Z+1	; 0x01
     1d2:	89 2b       	or	r24, r25
     1d4:	d9 f1       	breq	.+118    	; 0x24c <make_frame+0x110>
     1d6:	8f 81       	ldd	r24, Y+7	; 0x07
     1d8:	98 85       	ldd	r25, Y+8	; 0x08
     1da:	88 0f       	add	r24, r24
     1dc:	99 1f       	adc	r25, r25
     1de:	80 5b       	subi	r24, 0xB0	; 176
     1e0:	9e 4f       	sbci	r25, 0xFE	; 254
     1e2:	fc 01       	movw	r30, r24
     1e4:	00 81       	ld	r16, Z
     1e6:	11 81       	ldd	r17, Z+1	; 0x01
     1e8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ea:	9e 81       	ldd	r25, Y+6	; 0x06
     1ec:	09 2e       	mov	r0, r25
     1ee:	00 0c       	add	r0, r0
     1f0:	aa 0b       	sbc	r26, r26
     1f2:	bb 0b       	sbc	r27, r27
     1f4:	bc 01       	movw	r22, r24
     1f6:	cd 01       	movw	r24, r26
     1f8:	0e 94 bd 19 	call	0x337a	; 0x337a <__floatsisf>
     1fc:	dc 01       	movw	r26, r24
     1fe:	cb 01       	movw	r24, r22
     200:	9c 01       	movw	r18, r24
     202:	ad 01       	movw	r20, r26
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e4       	ldi	r25, 0x40	; 64
     20c:	0e 94 49 1a 	call	0x3492	; 0x3492 <pow>
     210:	dc 01       	movw	r26, r24
     212:	cb 01       	movw	r24, r22
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	5f e3       	ldi	r21, 0x3F	; 63
     21c:	bc 01       	movw	r22, r24
     21e:	cd 01       	movw	r24, r26
     220:	0e 94 19 19 	call	0x3232	; 0x3232 <__addsf3>
     224:	dc 01       	movw	r26, r24
     226:	cb 01       	movw	r24, r22
     228:	bc 01       	movw	r22, r24
     22a:	cd 01       	movw	r24, r26
     22c:	0e 94 85 19 	call	0x330a	; 0x330a <__fixsfsi>
     230:	dc 01       	movw	r26, r24
     232:	cb 01       	movw	r24, r22
     234:	98 01       	movw	r18, r16
     236:	28 0f       	add	r18, r24
     238:	39 1f       	adc	r19, r25
     23a:	8f 81       	ldd	r24, Y+7	; 0x07
     23c:	98 85       	ldd	r25, Y+8	; 0x08
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	80 5b       	subi	r24, 0xB0	; 176
     244:	9e 4f       	sbci	r25, 0xFE	; 254
     246:	fc 01       	movw	r30, r24
     248:	31 83       	std	Z+1, r19	; 0x01
     24a:	20 83       	st	Z, r18
     24c:	8f 81       	ldd	r24, Y+7	; 0x07
     24e:	98 85       	ldd	r25, Y+8	; 0x08
     250:	01 96       	adiw	r24, 0x01	; 1
     252:	98 87       	std	Y+8, r25	; 0x08
     254:	8f 83       	std	Y+7, r24	; 0x07
     256:	8f 81       	ldd	r24, Y+7	; 0x07
     258:	98 85       	ldd	r25, Y+8	; 0x08
     25a:	0e 97       	sbiw	r24, 0x0e	; 14
     25c:	0c f4       	brge	.+2      	; 0x260 <make_frame+0x124>
     25e:	a3 cf       	rjmp	.-186    	; 0x1a6 <make_frame+0x6a>
     260:	8d 81       	ldd	r24, Y+5	; 0x05
     262:	9e 81       	ldd	r25, Y+6	; 0x06
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	9e 83       	std	Y+6, r25	; 0x06
     268:	8d 83       	std	Y+5, r24	; 0x05
     26a:	8d 81       	ldd	r24, Y+5	; 0x05
     26c:	9e 81       	ldd	r25, Y+6	; 0x06
     26e:	0a 97       	sbiw	r24, 0x0a	; 10
     270:	0c f4       	brge	.+2      	; 0x274 <make_frame+0x138>
     272:	96 cf       	rjmp	.-212    	; 0x1a0 <make_frame+0x64>
     274:	82 e3       	ldi	r24, 0x32	; 50
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 cd 13 	call	0x279a	; 0x279a <vTaskDelay>
     27c:	6d cf       	rjmp	.-294    	; 0x158 <make_frame+0x1c>

0000027e <die>:
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	66 e0       	ldi	r22, 0x06	; 6
     288:	85 e1       	ldi	r24, 0x15	; 21
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 48 05 	call	0xa90	; 0xa90 <com_send_bytes>
     290:	00 00       	nop
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <game_processing>:


/* TODO: protect gameState with a mutex */
void game_processing(void *pvParameters)
{
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	2f 97       	sbiw	r28, 0x0f	; 15
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	de bf       	out	0x3e, r29	; 62
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	9f 87       	std	Y+15, r25	; 0x0f
     2ae:	8e 87       	std	Y+14, r24	; 0x0e
	/* Populate gameState from the players' positions and tracks:
	* Start at turn[i] to compare with turn[i - 1] for each player
	*/

	bool collision = false;
     2b0:	19 82       	std	Y+1, r1	; 0x01

	playerOne.x = 5;
     2b2:	85 e0       	ldi	r24, 0x05	; 5
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <playerOne+0x1>
     2ba:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <playerOne>
	playerOne.y = 5;
     2be:	85 e0       	ldi	r24, 0x05	; 5
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <playerOne+0x3>
     2c6:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <playerOne+0x2>
	playerOne.direction = LEFT;
     2ca:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <playerOne+0x4>
	Turn turn0;
	turn0.x = 12;
     2ce:	8c e0       	ldi	r24, 0x0C	; 12
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	9b 87       	std	Y+11, r25	; 0x0b
     2d4:	8a 87       	std	Y+10, r24	; 0x0a
	turn0.y = 5;
     2d6:	85 e0       	ldi	r24, 0x05	; 5
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	9d 87       	std	Y+13, r25	; 0x0d
     2dc:	8c 87       	std	Y+12, r24	; 0x0c
	playerOne.turns[0] = turn0;
     2de:	8a 85       	ldd	r24, Y+10	; 0x0a
     2e0:	9b 85       	ldd	r25, Y+11	; 0x0b
     2e2:	ac 85       	ldd	r26, Y+12	; 0x0c
     2e4:	bd 85       	ldd	r27, Y+13	; 0x0d
     2e6:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <playerOne+0x5>
     2ea:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <playerOne+0x6>
     2ee:	a0 93 8b 02 	sts	0x028B, r26	; 0x80028b <playerOne+0x7>
     2f2:	b0 93 8c 02 	sts	0x028C, r27	; 0x80028c <playerOne+0x8>

	playerTwo.x = 10;
     2f6:	8a e0       	ldi	r24, 0x0A	; 10
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <playerTwo+0x1>
     2fe:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <playerTwo>
	playerTwo.y = 5;
     302:	85 e0       	ldi	r24, 0x05	; 5
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <playerTwo+0x3>
     30a:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <playerTwo+0x2>
	playerTwo.direction = DOWN;
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <playerTwo+0x4>

	for(;;) {


		while(!collision) {
     314:	fe c0       	rjmp	.+508    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
			if (gameState[i][j] == 1)
			gameState[i][j] = 0;
			*/
			if ((sizeof(playerOne.turns) / sizeof(playerOne.turns[0])) < 2) { //Didn't turn yet !

				if (playerOne.x == playerOne.turns[0].x) { //Vertical line
     316:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <playerOne>
     31a:	30 91 85 02 	lds	r19, 0x0285	; 0x800285 <playerOne+0x1>
     31e:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <playerOne+0x5>
     322:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <playerOne+0x6>
     326:	28 17       	cp	r18, r24
     328:	39 07       	cpc	r19, r25
     32a:	09 f0       	breq	.+2      	; 0x32e <game_processing+0x96>
     32c:	4e c0       	rjmp	.+156    	; 0x3ca <game_processing+0x132>

					//Turn on LEDs for this line
					for (int j = playerOne.y; j <= playerOne.turns[0].y; j++) {
     32e:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <playerOne+0x2>
     332:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <playerOne+0x3>
     336:	9b 83       	std	Y+3, r25	; 0x03
     338:	8a 83       	std	Y+2, r24	; 0x02
     33a:	3c c0       	rjmp	.+120    	; 0x3b4 <game_processing+0x11c>
						if (gameState[playerOne.turns[0].x][j] == 2) { //Collision with player two !!
     33c:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <playerOne+0x5>
     340:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <playerOne+0x6>
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	9c 01       	movw	r18, r24
     34a:	22 0f       	add	r18, r18
     34c:	33 1f       	adc	r19, r19
     34e:	22 0f       	add	r18, r18
     350:	33 1f       	adc	r19, r19
     352:	82 0f       	add	r24, r18
     354:	93 1f       	adc	r25, r19
     356:	2a 81       	ldd	r18, Y+2	; 0x02
     358:	3b 81       	ldd	r19, Y+3	; 0x03
     35a:	82 0f       	add	r24, r18
     35c:	93 1f       	adc	r25, r19
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	84 59       	subi	r24, 0x94	; 148
     364:	9e 4f       	sbci	r25, 0xFE	; 254
     366:	fc 01       	movw	r30, r24
     368:	80 81       	ld	r24, Z
     36a:	91 81       	ldd	r25, Z+1	; 0x01
     36c:	02 97       	sbiw	r24, 0x02	; 2
     36e:	19 f4       	brne	.+6      	; 0x376 <game_processing+0xde>
							collision = 1;
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	89 83       	std	Y+1, r24	; 0x01
     374:	1a c0       	rjmp	.+52     	; 0x3aa <game_processing+0x112>
							} else {
							gameState[playerOne.turns[0].x][j] = 1;
     376:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <playerOne+0x5>
     37a:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <playerOne+0x6>
     37e:	88 0f       	add	r24, r24
     380:	99 1f       	adc	r25, r25
     382:	9c 01       	movw	r18, r24
     384:	22 0f       	add	r18, r18
     386:	33 1f       	adc	r19, r19
     388:	22 0f       	add	r18, r18
     38a:	33 1f       	adc	r19, r19
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
     390:	2a 81       	ldd	r18, Y+2	; 0x02
     392:	3b 81       	ldd	r19, Y+3	; 0x03
     394:	82 0f       	add	r24, r18
     396:	93 1f       	adc	r25, r19
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	84 59       	subi	r24, 0x94	; 148
     39e:	9e 4f       	sbci	r25, 0xFE	; 254
     3a0:	21 e0       	ldi	r18, 0x01	; 1
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	fc 01       	movw	r30, r24
     3a6:	31 83       	std	Z+1, r19	; 0x01
     3a8:	20 83       	st	Z, r18
			if ((sizeof(playerOne.turns) / sizeof(playerOne.turns[0])) < 2) { //Didn't turn yet !

				if (playerOne.x == playerOne.turns[0].x) { //Vertical line

					//Turn on LEDs for this line
					for (int j = playerOne.y; j <= playerOne.turns[0].y; j++) {
     3aa:	8a 81       	ldd	r24, Y+2	; 0x02
     3ac:	9b 81       	ldd	r25, Y+3	; 0x03
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	9b 83       	std	Y+3, r25	; 0x03
     3b2:	8a 83       	std	Y+2, r24	; 0x02
     3b4:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <playerOne+0x7>
     3b8:	30 91 8c 02 	lds	r19, 0x028C	; 0x80028c <playerOne+0x8>
     3bc:	8a 81       	ldd	r24, Y+2	; 0x02
     3be:	9b 81       	ldd	r25, Y+3	; 0x03
     3c0:	28 17       	cp	r18, r24
     3c2:	39 07       	cpc	r19, r25
     3c4:	0c f0       	brlt	.+2      	; 0x3c8 <game_processing+0x130>
     3c6:	ba cf       	rjmp	.-140    	; 0x33c <game_processing+0xa4>
     3c8:	59 c0       	rjmp	.+178    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
							} else {
							gameState[playerOne.turns[0].x][j] = 1;
						}
					}

					} else if (playerOne.y == playerOne.turns[0].y) { //Horizontal line
     3ca:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <playerOne+0x2>
     3ce:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <playerOne+0x3>
     3d2:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <playerOne+0x7>
     3d6:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <playerOne+0x8>
     3da:	28 17       	cp	r18, r24
     3dc:	39 07       	cpc	r19, r25
     3de:	09 f0       	breq	.+2      	; 0x3e2 <game_processing+0x14a>
     3e0:	4d c0       	rjmp	.+154    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
					
					for (int j = playerOne.x; j <= playerOne.turns[0].x; j++) {
     3e2:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <playerOne>
     3e6:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <playerOne+0x1>
     3ea:	9d 83       	std	Y+5, r25	; 0x05
     3ec:	8c 83       	std	Y+4, r24	; 0x04
     3ee:	3c c0       	rjmp	.+120    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
						if (gameState[j][playerOne.turns[0].y] == 2) { //Collision with player two !!
     3f0:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <playerOne+0x7>
     3f4:	30 91 8c 02 	lds	r19, 0x028C	; 0x80028c <playerOne+0x8>
     3f8:	8c 81       	ldd	r24, Y+4	; 0x04
     3fa:	9d 81       	ldd	r25, Y+5	; 0x05
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	ac 01       	movw	r20, r24
     402:	44 0f       	add	r20, r20
     404:	55 1f       	adc	r21, r21
     406:	44 0f       	add	r20, r20
     408:	55 1f       	adc	r21, r21
     40a:	84 0f       	add	r24, r20
     40c:	95 1f       	adc	r25, r21
     40e:	82 0f       	add	r24, r18
     410:	93 1f       	adc	r25, r19
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	84 59       	subi	r24, 0x94	; 148
     418:	9e 4f       	sbci	r25, 0xFE	; 254
     41a:	fc 01       	movw	r30, r24
     41c:	80 81       	ld	r24, Z
     41e:	91 81       	ldd	r25, Z+1	; 0x01
     420:	02 97       	sbiw	r24, 0x02	; 2
     422:	19 f4       	brne	.+6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
							collision = 1;
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	89 83       	std	Y+1, r24	; 0x01
     428:	1a c0       	rjmp	.+52     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
							} else {
							gameState[j][playerOne.turns[0].y] = 1;
     42a:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <playerOne+0x7>
     42e:	30 91 8c 02 	lds	r19, 0x028C	; 0x80028c <playerOne+0x8>
     432:	8c 81       	ldd	r24, Y+4	; 0x04
     434:	9d 81       	ldd	r25, Y+5	; 0x05
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	ac 01       	movw	r20, r24
     43c:	44 0f       	add	r20, r20
     43e:	55 1f       	adc	r21, r21
     440:	44 0f       	add	r20, r20
     442:	55 1f       	adc	r21, r21
     444:	84 0f       	add	r24, r20
     446:	95 1f       	adc	r25, r21
     448:	82 0f       	add	r24, r18
     44a:	93 1f       	adc	r25, r19
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	84 59       	subi	r24, 0x94	; 148
     452:	9e 4f       	sbci	r25, 0xFE	; 254
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	fc 01       	movw	r30, r24
     45a:	31 83       	std	Z+1, r19	; 0x01
     45c:	20 83       	st	Z, r18
						}
					}

					} else if (playerOne.y == playerOne.turns[0].y) { //Horizontal line
					
					for (int j = playerOne.x; j <= playerOne.turns[0].x; j++) {
     45e:	8c 81       	ldd	r24, Y+4	; 0x04
     460:	9d 81       	ldd	r25, Y+5	; 0x05
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	9d 83       	std	Y+5, r25	; 0x05
     466:	8c 83       	std	Y+4, r24	; 0x04
     468:	20 91 89 02 	lds	r18, 0x0289	; 0x800289 <playerOne+0x5>
     46c:	30 91 8a 02 	lds	r19, 0x028A	; 0x80028a <playerOne+0x6>
     470:	8c 81       	ldd	r24, Y+4	; 0x04
     472:	9d 81       	ldd	r25, Y+5	; 0x05
     474:	28 17       	cp	r18, r24
     476:	39 07       	cpc	r19, r25
     478:	0c f0       	brlt	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47a:	ba cf       	rjmp	.-140    	; 0x3f0 <game_processing+0x158>
					}
				}
			}

			/* Erase player two */
			for (int i = 0; i < 14; i++)
     47c:	1f 82       	std	Y+7, r1	; 0x07
     47e:	1e 82       	std	Y+6, r1	; 0x06
     480:	3f c0       	rjmp	.+126    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
			for (int j = 0; j < 10; j++)
     482:	19 86       	std	Y+9, r1	; 0x09
     484:	18 86       	std	Y+8, r1	; 0x08
     486:	33 c0       	rjmp	.+102    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
			if (gameState[i][j] == 2)
     488:	8e 81       	ldd	r24, Y+6	; 0x06
     48a:	9f 81       	ldd	r25, Y+7	; 0x07
     48c:	88 0f       	add	r24, r24
     48e:	99 1f       	adc	r25, r25
     490:	9c 01       	movw	r18, r24
     492:	22 0f       	add	r18, r18
     494:	33 1f       	adc	r19, r19
     496:	22 0f       	add	r18, r18
     498:	33 1f       	adc	r19, r19
     49a:	82 0f       	add	r24, r18
     49c:	93 1f       	adc	r25, r19
     49e:	28 85       	ldd	r18, Y+8	; 0x08
     4a0:	39 85       	ldd	r19, Y+9	; 0x09
     4a2:	82 0f       	add	r24, r18
     4a4:	93 1f       	adc	r25, r19
     4a6:	88 0f       	add	r24, r24
     4a8:	99 1f       	adc	r25, r25
     4aa:	84 59       	subi	r24, 0x94	; 148
     4ac:	9e 4f       	sbci	r25, 0xFE	; 254
     4ae:	fc 01       	movw	r30, r24
     4b0:	80 81       	ld	r24, Z
     4b2:	91 81       	ldd	r25, Z+1	; 0x01
     4b4:	02 97       	sbiw	r24, 0x02	; 2
     4b6:	b1 f4       	brne	.+44     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
			gameState[i][j] = 0;
     4b8:	8e 81       	ldd	r24, Y+6	; 0x06
     4ba:	9f 81       	ldd	r25, Y+7	; 0x07
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
     4c0:	9c 01       	movw	r18, r24
     4c2:	22 0f       	add	r18, r18
     4c4:	33 1f       	adc	r19, r19
     4c6:	22 0f       	add	r18, r18
     4c8:	33 1f       	adc	r19, r19
     4ca:	82 0f       	add	r24, r18
     4cc:	93 1f       	adc	r25, r19
     4ce:	28 85       	ldd	r18, Y+8	; 0x08
     4d0:	39 85       	ldd	r19, Y+9	; 0x09
     4d2:	82 0f       	add	r24, r18
     4d4:	93 1f       	adc	r25, r19
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	84 59       	subi	r24, 0x94	; 148
     4dc:	9e 4f       	sbci	r25, 0xFE	; 254
     4de:	fc 01       	movw	r30, r24
     4e0:	11 82       	std	Z+1, r1	; 0x01
     4e2:	10 82       	st	Z, r1
				}
			}

			/* Erase player two */
			for (int i = 0; i < 14; i++)
			for (int j = 0; j < 10; j++)
     4e4:	88 85       	ldd	r24, Y+8	; 0x08
     4e6:	99 85       	ldd	r25, Y+9	; 0x09
     4e8:	01 96       	adiw	r24, 0x01	; 1
     4ea:	99 87       	std	Y+9, r25	; 0x09
     4ec:	88 87       	std	Y+8, r24	; 0x08
     4ee:	88 85       	ldd	r24, Y+8	; 0x08
     4f0:	99 85       	ldd	r25, Y+9	; 0x09
     4f2:	0a 97       	sbiw	r24, 0x0a	; 10
     4f4:	4c f2       	brlt	.-110    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
					}
				}
			}

			/* Erase player two */
			for (int i = 0; i < 14; i++)
     4f6:	8e 81       	ldd	r24, Y+6	; 0x06
     4f8:	9f 81       	ldd	r25, Y+7	; 0x07
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	9f 83       	std	Y+7, r25	; 0x07
     4fe:	8e 83       	std	Y+6, r24	; 0x06
     500:	8e 81       	ldd	r24, Y+6	; 0x06
     502:	9f 81       	ldd	r25, Y+7	; 0x07
     504:	0e 97       	sbiw	r24, 0x0e	; 14
     506:	0c f4       	brge	.+2      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     508:	bc cf       	rjmp	.-136    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>

			/* Move players in their current direction */
			//move_player(playerOne);
			//move_player(playerTwo);

			vTaskDelay(1000);
     50a:	88 ee       	ldi	r24, 0xE8	; 232
     50c:	93 e0       	ldi	r25, 0x03	; 3
     50e:	0e 94 cd 13 	call	0x279a	; 0x279a <vTaskDelay>
	playerTwo.direction = DOWN;

	for(;;) {


		while(!collision) {
     512:	99 81       	ldd	r25, Y+1	; 0x01
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	89 27       	eor	r24, r25
     518:	88 23       	and	r24, r24
     51a:	09 f0       	breq	.+2      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     51c:	fc ce       	rjmp	.-520    	; 0x316 <game_processing+0x7e>
			//move_player(playerTwo);

			vTaskDelay(1000);
		}

		die();
     51e:	0e 94 3f 01 	call	0x27e	; 0x27e <die>
	}
     522:	f8 ce       	rjmp	.-528    	; 0x314 <game_processing+0x7c>

00000524 <read_joystick>:

}


void read_joystick(void *pvParameters)
{
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	2c 97       	sbiw	r28, 0x0c	; 12
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	9c 87       	std	Y+12, r25	; 0x0c
     542:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t Left;
	uint8_t Up;
	uint8_t Down;
	uint8_t Pushed;
	Direction direction;
	uint8_t debounceCounter = 0;
     544:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t debounceThreshold = 15;
     546:	8f e0       	ldi	r24, 0x0F	; 15
     548:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t turnPlayer = 0;
     54a:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t isPressing = 0;
     54c:	1c 82       	std	Y+4, r1	; 0x04

	for (;;) {
		/*Constantly checking joystick state*/
		Right	= !(PINC>>1 & 0x01);
     54e:	86 e2       	ldi	r24, 0x26	; 38
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	fc 01       	movw	r30, r24
     554:	80 81       	ld	r24, Z
     556:	86 95       	lsr	r24
     558:	88 2f       	mov	r24, r24
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	81 70       	andi	r24, 0x01	; 1
     55e:	99 27       	eor	r25, r25
     560:	21 e0       	ldi	r18, 0x01	; 1
     562:	89 2b       	or	r24, r25
     564:	09 f0       	breq	.+2      	; 0x568 <read_joystick+0x44>
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	2e 83       	std	Y+6, r18	; 0x06
		Left	= !(PINC>>7 & 0x01);
     56a:	86 e2       	ldi	r24, 0x26	; 38
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	fc 01       	movw	r30, r24
     570:	80 81       	ld	r24, Z
     572:	88 1f       	adc	r24, r24
     574:	88 27       	eor	r24, r24
     576:	88 1f       	adc	r24, r24
     578:	88 2f       	mov	r24, r24
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	81 70       	andi	r24, 0x01	; 1
     57e:	99 27       	eor	r25, r25
     580:	21 e0       	ldi	r18, 0x01	; 1
     582:	89 2b       	or	r24, r25
     584:	09 f0       	breq	.+2      	; 0x588 <read_joystick+0x64>
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	2f 83       	std	Y+7, r18	; 0x07
		Up		= !(PINC>>6 & 0x01);
     58a:	86 e2       	ldi	r24, 0x26	; 38
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	fc 01       	movw	r30, r24
     590:	80 81       	ld	r24, Z
     592:	82 95       	swap	r24
     594:	86 95       	lsr	r24
     596:	86 95       	lsr	r24
     598:	83 70       	andi	r24, 0x03	; 3
     59a:	88 2f       	mov	r24, r24
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	81 70       	andi	r24, 0x01	; 1
     5a0:	99 27       	eor	r25, r25
     5a2:	21 e0       	ldi	r18, 0x01	; 1
     5a4:	89 2b       	or	r24, r25
     5a6:	09 f0       	breq	.+2      	; 0x5aa <read_joystick+0x86>
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	28 87       	std	Y+8, r18	; 0x08
		Down	= !(PINC>>0 & 0x01);
     5ac:	86 e2       	ldi	r24, 0x26	; 38
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	fc 01       	movw	r30, r24
     5b2:	80 81       	ld	r24, Z
     5b4:	88 2f       	mov	r24, r24
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	81 70       	andi	r24, 0x01	; 1
     5ba:	99 27       	eor	r25, r25
     5bc:	21 e0       	ldi	r18, 0x01	; 1
     5be:	89 2b       	or	r24, r25
     5c0:	09 f0       	breq	.+2      	; 0x5c4 <read_joystick+0xa0>
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	29 87       	std	Y+9, r18	; 0x09
		Pushed  = !(PIND>>3 & 0x01);
     5c6:	89 e2       	ldi	r24, 0x29	; 41
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	fc 01       	movw	r30, r24
     5cc:	80 81       	ld	r24, Z
     5ce:	86 95       	lsr	r24
     5d0:	86 95       	lsr	r24
     5d2:	86 95       	lsr	r24
     5d4:	88 2f       	mov	r24, r24
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	81 70       	andi	r24, 0x01	; 1
     5da:	99 27       	eor	r25, r25
     5dc:	21 e0       	ldi	r18, 0x01	; 1
     5de:	89 2b       	or	r24, r25
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <read_joystick+0xc0>
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	2a 87       	std	Y+10, r18	; 0x0a

		if (Down){
     5e6:	89 85       	ldd	r24, Y+9	; 0x09
     5e8:	88 23       	and	r24, r24
     5ea:	39 f0       	breq	.+14     	; 0x5fa <read_joystick+0xd6>
			direction = DOWN;
     5ec:	83 e0       	ldi	r24, 0x03	; 3
     5ee:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	8c 83       	std	Y+4, r24	; 0x04
     5f8:	23 c0       	rjmp	.+70     	; 0x640 <read_joystick+0x11c>
			} else if (Right) {
     5fa:	8e 81       	ldd	r24, Y+6	; 0x06
     5fc:	88 23       	and	r24, r24
     5fe:	39 f0       	breq	.+14     	; 0x60e <read_joystick+0xea>
			direction = RIGHT;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	8c 83       	std	Y+4, r24	; 0x04
     60c:	19 c0       	rjmp	.+50     	; 0x640 <read_joystick+0x11c>
			} else if (Up) {
     60e:	88 85       	ldd	r24, Y+8	; 0x08
     610:	88 23       	and	r24, r24
     612:	39 f0       	breq	.+14     	; 0x622 <read_joystick+0xfe>
			direction = UP;
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	8c 83       	std	Y+4, r24	; 0x04
     620:	0f c0       	rjmp	.+30     	; 0x640 <read_joystick+0x11c>
			} else if (Left) {
     622:	8f 81       	ldd	r24, Y+7	; 0x07
     624:	88 23       	and	r24, r24
     626:	31 f0       	breq	.+12     	; 0x634 <read_joystick+0x110>
			direction = LEFT;
     628:	19 82       	std	Y+1, r1	; 0x01
			turnPlayer = 1;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	8c 83       	std	Y+4, r24	; 0x04
     632:	06 c0       	rjmp	.+12     	; 0x640 <read_joystick+0x11c>
			} else if (Pushed) {
     634:	8a 85       	ldd	r24, Y+10	; 0x0a
     636:	88 23       	and	r24, r24
     638:	11 f0       	breq	.+4      	; 0x63e <read_joystick+0x11a>
			//TODO: pause game
			debounceCounter = 0;
     63a:	1a 82       	std	Y+2, r1	; 0x02
     63c:	01 c0       	rjmp	.+2      	; 0x640 <read_joystick+0x11c>
			} else {
			isPressing = 0;
     63e:	1c 82       	std	Y+4, r1	; 0x04
			//debounceCounter = 0;
		}

		if (turnPlayer && !isPressing && (++debounceCounter >= debounceThreshold)) {
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	88 23       	and	r24, r24
     644:	49 f1       	breq	.+82     	; 0x698 <read_joystick+0x174>
     646:	8c 81       	ldd	r24, Y+4	; 0x04
     648:	88 23       	and	r24, r24
     64a:	31 f5       	brne	.+76     	; 0x698 <read_joystick+0x174>
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	8f 5f       	subi	r24, 0xFF	; 255
     650:	8a 83       	std	Y+2, r24	; 0x02
     652:	9a 81       	ldd	r25, Y+2	; 0x02
     654:	8d 81       	ldd	r24, Y+5	; 0x05
     656:	98 17       	cp	r25, r24
     658:	f8 f0       	brcs	.+62     	; 0x698 <read_joystick+0x174>
			com_send_bytes("move", 4);
     65a:	64 e0       	ldi	r22, 0x04	; 4
     65c:	8c e1       	ldi	r24, 0x1C	; 28
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 48 05 	call	0xa90	; 0xa90 <com_send_bytes>
			turn_player(playerOne, direction);
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	88 2f       	mov	r24, r24
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	7c 01       	movw	r14, r24
     66c:	00 91 84 02 	lds	r16, 0x0284	; 0x800284 <playerOne>
     670:	10 91 85 02 	lds	r17, 0x0285	; 0x800285 <playerOne+0x1>
     674:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <playerOne+0x2>
     678:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <playerOne+0x3>
     67c:	40 91 88 02 	lds	r20, 0x0288	; 0x800288 <playerOne+0x4>
     680:	50 91 89 02 	lds	r21, 0x0289	; 0x800289 <playerOne+0x5>
     684:	60 91 8a 02 	lds	r22, 0x028A	; 0x80028a <playerOne+0x6>
     688:	70 91 8b 02 	lds	r23, 0x028B	; 0x80028b <playerOne+0x7>
     68c:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <playerOne+0x8>
     690:	0e 94 51 03 	call	0x6a2	; 0x6a2 <turn_player>
			turnPlayer = 0;
     694:	1b 82       	std	Y+3, r1	; 0x03
			debounceCounter = 0;
     696:	1a 82       	std	Y+2, r1	; 0x02
		}
		vTaskDelay(20);
     698:	84 e1       	ldi	r24, 0x14	; 20
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 cd 13 	call	0x279a	; 0x279a <vTaskDelay>
	}
     6a0:	56 cf       	rjmp	.-340    	; 0x54e <read_joystick+0x2a>

000006a2 <turn_player>:



/* Changes the player's direction: will be applied in game_processing() */
void turn_player(Position player, Direction direction)
{
     6a2:	ef 92       	push	r14
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	2a 97       	sbiw	r28, 0x0a	; 10
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	09 83       	std	Y+1, r16	; 0x01
     6be:	1a 83       	std	Y+2, r17	; 0x02
     6c0:	2b 83       	std	Y+3, r18	; 0x03
     6c2:	3c 83       	std	Y+4, r19	; 0x04
     6c4:	4d 83       	std	Y+5, r20	; 0x05
     6c6:	5e 83       	std	Y+6, r21	; 0x06
     6c8:	6f 83       	std	Y+7, r22	; 0x07
     6ca:	78 87       	std	Y+8, r23	; 0x08
     6cc:	89 87       	std	Y+9, r24	; 0x09
     6ce:	ea 86       	std	Y+10, r14	; 0x0a

	switch (direction) {
     6d0:	8a 85       	ldd	r24, Y+10	; 0x0a
     6d2:	88 2f       	mov	r24, r24
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	91 05       	cpc	r25, r1
     6da:	39 f1       	breq	.+78     	; 0x72a <turn_player+0x88>
     6dc:	82 30       	cpi	r24, 0x02	; 2
     6de:	91 05       	cpc	r25, r1
     6e0:	1c f4       	brge	.+6      	; 0x6e8 <turn_player+0x46>
     6e2:	89 2b       	or	r24, r25
     6e4:	c9 f0       	breq	.+50     	; 0x718 <turn_player+0x76>
		case RIGHT:
		if (player.direction == UP || player.direction == DOWN)
		player.direction = direction;
		break;
	}
}
     6e6:	31 c0       	rjmp	.+98     	; 0x74a <turn_player+0xa8>

/* Changes the player's direction: will be applied in game_processing() */
void turn_player(Position player, Direction direction)
{

	switch (direction) {
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	91 05       	cpc	r25, r1
     6ec:	19 f0       	breq	.+6      	; 0x6f4 <turn_player+0x52>
     6ee:	03 97       	sbiw	r24, 0x03	; 3
     6f0:	51 f0       	breq	.+20     	; 0x706 <turn_player+0x64>
		case RIGHT:
		if (player.direction == UP || player.direction == DOWN)
		player.direction = direction;
		break;
	}
}
     6f2:	2b c0       	rjmp	.+86     	; 0x74a <turn_player+0xa8>
void turn_player(Position player, Direction direction)
{

	switch (direction) {
		case UP:
		if (player.direction == LEFT || player.direction == RIGHT)
     6f4:	8d 81       	ldd	r24, Y+5	; 0x05
     6f6:	88 23       	and	r24, r24
     6f8:	19 f0       	breq	.+6      	; 0x700 <turn_player+0x5e>
     6fa:	8d 81       	ldd	r24, Y+5	; 0x05
     6fc:	81 30       	cpi	r24, 0x01	; 1
     6fe:	f1 f4       	brne	.+60     	; 0x73c <turn_player+0x9a>
		player.direction = direction;
     700:	8a 85       	ldd	r24, Y+10	; 0x0a
     702:	8d 83       	std	Y+5, r24	; 0x05
		break;
     704:	1b c0       	rjmp	.+54     	; 0x73c <turn_player+0x9a>
		case DOWN:
		if (player.direction == LEFT || player.direction == RIGHT)
     706:	8d 81       	ldd	r24, Y+5	; 0x05
     708:	88 23       	and	r24, r24
     70a:	19 f0       	breq	.+6      	; 0x712 <turn_player+0x70>
     70c:	8d 81       	ldd	r24, Y+5	; 0x05
     70e:	81 30       	cpi	r24, 0x01	; 1
     710:	b9 f4       	brne	.+46     	; 0x740 <turn_player+0x9e>
		player.direction = direction;
     712:	8a 85       	ldd	r24, Y+10	; 0x0a
     714:	8d 83       	std	Y+5, r24	; 0x05
		break;
     716:	14 c0       	rjmp	.+40     	; 0x740 <turn_player+0x9e>
		case LEFT:
		if (player.direction == UP || player.direction == DOWN)
     718:	8d 81       	ldd	r24, Y+5	; 0x05
     71a:	82 30       	cpi	r24, 0x02	; 2
     71c:	19 f0       	breq	.+6      	; 0x724 <turn_player+0x82>
     71e:	8d 81       	ldd	r24, Y+5	; 0x05
     720:	83 30       	cpi	r24, 0x03	; 3
     722:	81 f4       	brne	.+32     	; 0x744 <turn_player+0xa2>
		player.direction = direction;
     724:	8a 85       	ldd	r24, Y+10	; 0x0a
     726:	8d 83       	std	Y+5, r24	; 0x05
		break;
     728:	0d c0       	rjmp	.+26     	; 0x744 <turn_player+0xa2>
		case RIGHT:
		if (player.direction == UP || player.direction == DOWN)
     72a:	8d 81       	ldd	r24, Y+5	; 0x05
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	19 f0       	breq	.+6      	; 0x736 <turn_player+0x94>
     730:	8d 81       	ldd	r24, Y+5	; 0x05
     732:	83 30       	cpi	r24, 0x03	; 3
     734:	49 f4       	brne	.+18     	; 0x748 <turn_player+0xa6>
		player.direction = direction;
     736:	8a 85       	ldd	r24, Y+10	; 0x0a
     738:	8d 83       	std	Y+5, r24	; 0x05
		break;
     73a:	06 c0       	rjmp	.+12     	; 0x748 <turn_player+0xa6>

	switch (direction) {
		case UP:
		if (player.direction == LEFT || player.direction == RIGHT)
		player.direction = direction;
		break;
     73c:	00 00       	nop
     73e:	05 c0       	rjmp	.+10     	; 0x74a <turn_player+0xa8>
		case DOWN:
		if (player.direction == LEFT || player.direction == RIGHT)
		player.direction = direction;
		break;
     740:	00 00       	nop
     742:	03 c0       	rjmp	.+6      	; 0x74a <turn_player+0xa8>
		case LEFT:
		if (player.direction == UP || player.direction == DOWN)
		player.direction = direction;
		break;
     744:	00 00       	nop
     746:	01 c0       	rjmp	.+2      	; 0x74a <turn_player+0xa8>
		case RIGHT:
		if (player.direction == UP || player.direction == DOWN)
		player.direction = direction;
		break;
     748:	00 00       	nop
	}
}
     74a:	00 00       	nop
     74c:	2a 96       	adiw	r28, 0x0a	; 10
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	f8 94       	cli
     752:	de bf       	out	0x3e, r29	; 62
     754:	0f be       	out	0x3f, r0	; 63
     756:	cd bf       	out	0x3d, r28	; 61
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	ef 90       	pop	r14
     762:	08 95       	ret

00000764 <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
	// Set SER to 1
	PORTD |= _BV(PORTD2);
     76c:	8b e2       	ldi	r24, 0x2B	; 43
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	2b e2       	ldi	r18, 0x2B	; 43
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	f9 01       	movw	r30, r18
     776:	20 81       	ld	r18, Z
     778:	24 60       	ori	r18, 0x04	; 4
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18
}
     77e:	00 00       	nop
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
	// one SCK pulse
	PORTD |= _BV(PORTD5);
     78e:	8b e2       	ldi	r24, 0x2B	; 43
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	2b e2       	ldi	r18, 0x2B	; 43
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	f9 01       	movw	r30, r18
     798:	20 81       	ld	r18, Z
     79a:	20 62       	ori	r18, 0x20	; 32
     79c:	fc 01       	movw	r30, r24
     79e:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     7a0:	8b e2       	ldi	r24, 0x2B	; 43
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	2b e2       	ldi	r18, 0x2B	; 43
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	f9 01       	movw	r30, r18
     7aa:	20 81       	ld	r18, Z
     7ac:	2f 7d       	andi	r18, 0xDF	; 223
     7ae:	fc 01       	movw	r30, r24
     7b0:	20 83       	st	Z, r18
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
     7b2:	8b e2       	ldi	r24, 0x2B	; 43
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	2b e2       	ldi	r18, 0x2B	; 43
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	f9 01       	movw	r30, r18
     7bc:	20 81       	ld	r18, Z
     7be:	20 61       	ori	r18, 0x10	; 16
     7c0:	fc 01       	movw	r30, r24
     7c2:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     7c4:	8b e2       	ldi	r24, 0x2B	; 43
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	2b e2       	ldi	r18, 0x2B	; 43
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	f9 01       	movw	r30, r18
     7ce:	20 81       	ld	r18, Z
     7d0:	2f 7e       	andi	r18, 0xEF	; 239
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
     7d6:	8b e2       	ldi	r24, 0x2B	; 43
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	2b e2       	ldi	r18, 0x2B	; 43
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	f9 01       	movw	r30, r18
     7e0:	20 81       	ld	r18, Z
     7e2:	2b 7f       	andi	r18, 0xFB	; 251
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 83       	st	Z, r18
}
     7e8:	00 00       	nop
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <load_col_value>:

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <load_col_value+0x6>
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	9a 83       	std	Y+2, r25	; 0x02
     7fc:	89 83       	std	Y+1, r24	; 0x01
	PORTA = ~(col_value & 0xFF);
     7fe:	82 e2       	ldi	r24, 0x22	; 34
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	29 81       	ldd	r18, Y+1	; 0x01
     804:	20 95       	com	r18
     806:	fc 01       	movw	r30, r24
     808:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     80a:	85 e2       	ldi	r24, 0x25	; 37
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	25 e2       	ldi	r18, 0x25	; 37
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	f9 01       	movw	r30, r18
     814:	20 81       	ld	r18, Z
     816:	23 60       	ori	r18, 0x03	; 3
     818:	fc 01       	movw	r30, r24
     81a:	20 83       	st	Z, r18
	PORTB &= ~((col_value >> 8) & 0x03);
     81c:	85 e2       	ldi	r24, 0x25	; 37
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	25 e2       	ldi	r18, 0x25	; 37
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	f9 01       	movw	r30, r18
     826:	40 81       	ld	r20, Z
     828:	29 81       	ldd	r18, Y+1	; 0x01
     82a:	3a 81       	ldd	r19, Y+2	; 0x02
     82c:	23 2f       	mov	r18, r19
     82e:	33 27       	eor	r19, r19
     830:	23 70       	andi	r18, 0x03	; 3
     832:	20 95       	com	r18
     834:	24 23       	and	r18, r20
     836:	fc 01       	movw	r30, r24
     838:	20 83       	st	Z, r18
}
     83a:	00 00       	nop
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <handle_display>:

//-----------------------------------------
void handle_display(void)
{
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
	static uint8_t col = 0;
	
	if (col == 0)
     84e:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <col.2819>
     852:	88 23       	and	r24, r24
     854:	11 f4       	brne	.+4      	; 0x85a <handle_display+0x14>
	prepare_shiftregister();
     856:	0e 94 b2 03 	call	0x764	; 0x764 <prepare_shiftregister>
	
	load_col_value(frame_buffer[col]);
     85a:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <col.2819>
     85e:	88 2f       	mov	r24, r24
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	80 5b       	subi	r24, 0xB0	; 176
     868:	9e 4f       	sbci	r25, 0xFE	; 254
     86a:	fc 01       	movw	r30, r24
     86c:	80 81       	ld	r24, Z
     86e:	91 81       	ldd	r25, Z+1	; 0x01
     870:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     874:	0e 94 c3 03 	call	0x786	; 0x786 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	if (col++ > 13)
     878:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <col.2819>
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	98 0f       	add	r25, r24
     880:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <col.2819>
     884:	8e 30       	cpi	r24, 0x0E	; 14
     886:	10 f0       	brcs	.+4      	; 0x88c <handle_display+0x46>
	col = 0;
     888:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <col.2819>
}
     88c:	00 00       	nop
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
	//
}
     89c:	00 00       	nop
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <main>:

//-----------------------------------------
int main(void)
{
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <main+0xc>
     8b0:	1f 92       	push	r1
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     8b6:	0e 94 62 05 	call	0xac4	; 0xac4 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     8ba:	8b e2       	ldi	r24, 0x2B	; 43
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	2b e2       	ldi	r18, 0x2B	; 43
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	f9 01       	movw	r30, r18
     8c4:	20 81       	ld	r18, Z
     8c6:	2f 7b       	andi	r18, 0xBF	; 191
     8c8:	fc 01       	movw	r30, r24
     8ca:	20 83       	st	Z, r18

	/* Semaphores creation */
	xGameStateSemaphore = xSemaphoreCreateMutex();
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <xQueueCreateMutex>
     8d2:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <xGameStateSemaphore+0x1>
     8d6:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <xGameStateSemaphore>
	xPlayerOneSemaphore = xSemaphoreCreateMutex();
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <xQueueCreateMutex>
     8e0:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <xPlayerOneSemaphore+0x1>
     8e4:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <xPlayerOneSemaphore>
	xPlayerTwoSemaphore = xSemaphoreCreateMutex();
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <xQueueCreateMutex>
     8ee:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <xPlayerTwoSemaphore+0x1>
     8f2:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <xPlayerTwoSemaphore>
	xGameOverSemaphore = xSemaphoreCreateMutex();
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <xQueueCreateMutex>
     8fc:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <xGameOverSemaphore+0x1>
     900:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <xGameOverSemaphore>

	BaseType_t taskReadJoystick = xTaskCreate(read_joystick, (const char*)"Read joystick", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     904:	e1 2c       	mov	r14, r1
     906:	f1 2c       	mov	r15, r1
     908:	00 e0       	ldi	r16, 0x00	; 0
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	45 e5       	ldi	r20, 0x55	; 85
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	61 e2       	ldi	r22, 0x21	; 33
     914:	71 e0       	ldi	r23, 0x01	; 1
     916:	82 e9       	ldi	r24, 0x92	; 146
     918:	92 e0       	ldi	r25, 0x02	; 2
     91a:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <xTaskCreate>
     91e:	89 83       	std	Y+1, r24	; 0x01
	BaseType_t taskGameProcessing = xTaskCreate(game_processing, (const char*)"Game processing", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     920:	e1 2c       	mov	r14, r1
     922:	f1 2c       	mov	r15, r1
     924:	00 e0       	ldi	r16, 0x00	; 0
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	45 e5       	ldi	r20, 0x55	; 85
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	6f e2       	ldi	r22, 0x2F	; 47
     930:	71 e0       	ldi	r23, 0x01	; 1
     932:	8c e4       	ldi	r24, 0x4C	; 76
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <xTaskCreate>
     93a:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t taskMakeFrame = xTaskCreate(make_frame, (const char*)"Make frame", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL );
     93c:	e1 2c       	mov	r14, r1
     93e:	f1 2c       	mov	r15, r1
     940:	00 e0       	ldi	r16, 0x00	; 0
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	45 e5       	ldi	r20, 0x55	; 85
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	6f e3       	ldi	r22, 0x3F	; 63
     94c:	71 e0       	ldi	r23, 0x01	; 1
     94e:	8e e9       	ldi	r24, 0x9E	; 158
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <xTaskCreate>
     956:	8b 83       	std	Y+3, r24	; 0x03


	// Start the display handler timer
	init_display_timer(handle_display);
     958:	83 e2       	ldi	r24, 0x23	; 35
     95a:	94 e0       	ldi	r25, 0x04	; 4
     95c:	0e 94 de 04 	call	0x9bc	; 0x9bc <init_display_timer>
	
	sei();
     960:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
     962:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <vTaskStartScheduler>
	
	//Should never reach here
	while (1) {}
     966:	ff cf       	rjmp	.-2      	; 0x966 <__stack+0x67>

00000968 <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
	_x_rx_com_queue = x_rx_queue;
}
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	00 d0       	rcall	.+0      	; 0x96e <_com_call_back+0x6>
     96e:	00 d0       	rcall	.+0      	; 0x970 <_com_call_back+0x8>
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	9b 83       	std	Y+3, r25	; 0x03
     976:	8a 83       	std	Y+2, r24	; 0x02
     978:	6c 83       	std	Y+4, r22	; 0x04
     97a:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_x_rx_com_queue>
     97e:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <_x_rx_com_queue+0x1>
     982:	89 2b       	or	r24, r25
     984:	99 f0       	breq	.+38     	; 0x9ac <_com_call_back+0x44>
     986:	19 82       	std	Y+1, r1	; 0x01
     988:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_x_rx_com_queue>
     98c:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <_x_rx_com_queue+0x1>
     990:	be 01       	movw	r22, r28
     992:	6c 5f       	subi	r22, 0xFC	; 252
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	ae 01       	movw	r20, r28
     99a:	4f 5f       	subi	r20, 0xFF	; 255
     99c:	5f 4f       	sbci	r21, 0xFF	; 255
     99e:	0e 94 41 10 	call	0x2082	; 0x2082 <xQueueGenericSendFromISR>
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	88 23       	and	r24, r24
     9a6:	11 f0       	breq	.+4      	; 0x9ac <_com_call_back+0x44>
     9a8:	0e 94 02 0a 	call	0x1404	; 0x1404 <vPortYield>
     9ac:	00 00       	nop
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <init_display_timer>:

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <init_display_timer+0x6>
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	9a 83       	std	Y+2, r25	; 0x02
     9c8:	89 83       	std	Y+1, r24	; 0x01
	cb_ptr = cb;
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	9a 81       	ldd	r25, Y+2	; 0x02
     9ce:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <cb_ptr+0x1>
     9d2:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
     9d6:	87 e4       	ldi	r24, 0x47	; 71
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	2a e0       	ldi	r18, 0x0A	; 10
     9dc:	fc 01       	movw	r30, r24
     9de:	20 83       	st	Z, r18
	TCCR0A |= _BV(WGM01); // Mode 2
     9e0:	84 e4       	ldi	r24, 0x44	; 68
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	24 e4       	ldi	r18, 0x44	; 68
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	f9 01       	movw	r30, r18
     9ea:	20 81       	ld	r18, Z
     9ec:	22 60       	ori	r18, 0x02	; 2
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
     9f2:	8e e6       	ldi	r24, 0x6E	; 110
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	2e e6       	ldi	r18, 0x6E	; 110
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	f9 01       	movw	r30, r18
     9fc:	20 81       	ld	r18, Z
     9fe:	22 60       	ori	r18, 0x02	; 2
     a00:	fc 01       	movw	r30, r24
     a02:	20 83       	st	Z, r18
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
     a04:	85 e4       	ldi	r24, 0x45	; 69
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	25 e4       	ldi	r18, 0x45	; 69
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	f9 01       	movw	r30, r18
     a0e:	20 81       	ld	r18, Z
     a10:	25 60       	ori	r18, 0x05	; 5
     a12:	fc 01       	movw	r30, r24
     a14:	20 83       	st	Z, r18
}
     a16:	00 00       	nop
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	08 95       	ret

00000a22 <__vector_16>:

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
     a22:	1f 92       	push	r1
     a24:	0f 92       	push	r0
     a26:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a2a:	0f 92       	push	r0
     a2c:	11 24       	eor	r1, r1
     a2e:	2f 93       	push	r18
     a30:	3f 93       	push	r19
     a32:	4f 93       	push	r20
     a34:	5f 93       	push	r21
     a36:	6f 93       	push	r22
     a38:	7f 93       	push	r23
     a3a:	8f 93       	push	r24
     a3c:	9f 93       	push	r25
     a3e:	af 93       	push	r26
     a40:	bf 93       	push	r27
     a42:	ef 93       	push	r30
     a44:	ff 93       	push	r31
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
	if (cb_ptr)
     a4e:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <cb_ptr>
     a52:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <cb_ptr+0x1>
     a56:	89 2b       	or	r24, r25
     a58:	31 f0       	breq	.+12     	; 0xa66 <__vector_16+0x44>
	{
		cb_ptr();
     a5a:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <cb_ptr>
     a5e:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <cb_ptr+0x1>
     a62:	fc 01       	movw	r30, r24
     a64:	09 95       	icall
	}
}
     a66:	00 00       	nop
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	ff 91       	pop	r31
     a6e:	ef 91       	pop	r30
     a70:	bf 91       	pop	r27
     a72:	af 91       	pop	r26
     a74:	9f 91       	pop	r25
     a76:	8f 91       	pop	r24
     a78:	7f 91       	pop	r23
     a7a:	6f 91       	pop	r22
     a7c:	5f 91       	pop	r21
     a7e:	4f 91       	pop	r20
     a80:	3f 91       	pop	r19
     a82:	2f 91       	pop	r18
     a84:	0f 90       	pop	r0
     a86:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a8a:	0f 90       	pop	r0
     a8c:	1f 90       	pop	r1
     a8e:	18 95       	reti

00000a90 <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	00 d0       	rcall	.+0      	; 0xa96 <com_send_bytes+0x6>
     a96:	1f 92       	push	r1
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	9a 83       	std	Y+2, r25	; 0x02
     a9e:	89 83       	std	Y+1, r24	; 0x01
     aa0:	6b 83       	std	Y+3, r22	; 0x03
	serial_send_bytes(_com_serial_instance, bytes, len);
     aa2:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <_com_serial_instance>
     aa6:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <_com_serial_instance+0x1>
     aaa:	29 81       	ldd	r18, Y+1	; 0x01
     aac:	3a 81       	ldd	r19, Y+2	; 0x02
     aae:	4b 81       	ldd	r20, Y+3	; 0x03
     ab0:	b9 01       	movw	r22, r18
     ab2:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <serial_send_bytes>
}
     ab6:	00 00       	nop
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     ac4:	8f 92       	push	r8
     ac6:	9f 92       	push	r9
     ac8:	af 92       	push	r10
     aca:	bf 92       	push	r11
     acc:	cf 92       	push	r12
     ace:	df 92       	push	r13
     ad0:	ef 92       	push	r14
     ad2:	0f 93       	push	r16
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     adc:	85 ea       	ldi	r24, 0xA5	; 165
     ade:	92 e0       	ldi	r25, 0x02	; 2
     ae0:	0e 94 1a 06 	call	0xc34	; 0xc34 <buffer_init>
	buffer_init(&_com_tx_buffer);
     ae4:	88 ec       	ldi	r24, 0xC8	; 200
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	0e 94 1a 06 	call	0xc34	; 0xc34 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     aec:	0f 2e       	mov	r0, r31
     aee:	f4 eb       	ldi	r31, 0xB4	; 180
     af0:	8f 2e       	mov	r8, r31
     af2:	f4 e0       	ldi	r31, 0x04	; 4
     af4:	9f 2e       	mov	r9, r31
     af6:	f0 2d       	mov	r31, r0
     af8:	0f 2e       	mov	r0, r31
     afa:	f8 ec       	ldi	r31, 0xC8	; 200
     afc:	af 2e       	mov	r10, r31
     afe:	f2 e0       	ldi	r31, 0x02	; 2
     b00:	bf 2e       	mov	r11, r31
     b02:	f0 2d       	mov	r31, r0
     b04:	0f 2e       	mov	r0, r31
     b06:	f5 ea       	ldi	r31, 0xA5	; 165
     b08:	cf 2e       	mov	r12, r31
     b0a:	f2 e0       	ldi	r31, 0x02	; 2
     b0c:	df 2e       	mov	r13, r31
     b0e:	f0 2d       	mov	r31, r0
     b10:	e1 2c       	mov	r14, r1
     b12:	00 e0       	ldi	r16, 0x00	; 0
     b14:	23 e0       	ldi	r18, 0x03	; 3
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	52 ec       	ldi	r21, 0xC2	; 194
     b1a:	61 e0       	ldi	r22, 0x01	; 1
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	0e 94 9b 0b 	call	0x1736	; 0x1736 <serial_new_instance>
     b24:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <_com_serial_instance+0x1>
     b28:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     b2c:	88 e2       	ldi	r24, 0x28	; 40
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	28 e2       	ldi	r18, 0x28	; 40
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	f9 01       	movw	r30, r18
     b36:	20 81       	ld	r18, Z
     b38:	23 6c       	ori	r18, 0xC3	; 195
     b3a:	fc 01       	movw	r30, r24
     b3c:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
     b3e:	8b e2       	ldi	r24, 0x2B	; 43
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	2b e2       	ldi	r18, 0x2B	; 43
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	f9 01       	movw	r30, r18
     b48:	20 81       	ld	r18, Z
     b4a:	28 60       	ori	r18, 0x08	; 8
     b4c:	fc 01       	movw	r30, r24
     b4e:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     b50:	8a e2       	ldi	r24, 0x2A	; 42
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	2a e2       	ldi	r18, 0x2A	; 42
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	f9 01       	movw	r30, r18
     b5a:	20 81       	ld	r18, Z
     b5c:	24 67       	ori	r18, 0x74	; 116
     b5e:	fc 01       	movw	r30, r24
     b60:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     b62:	8b e2       	ldi	r24, 0x2B	; 43
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	2b e2       	ldi	r18, 0x2B	; 43
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	f9 01       	movw	r30, r18
     b6c:	20 81       	ld	r18, Z
     b6e:	20 64       	ori	r18, 0x40	; 64
     b70:	fc 01       	movw	r30, r24
     b72:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
     b74:	81 e2       	ldi	r24, 0x21	; 33
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	fc 01       	movw	r30, r24
     b7a:	80 81       	ld	r24, Z
     b7c:	81 e2       	ldi	r24, 0x21	; 33
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	2f ef       	ldi	r18, 0xFF	; 255
     b82:	fc 01       	movw	r30, r24
     b84:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
     b86:	84 e2       	ldi	r24, 0x24	; 36
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	24 e2       	ldi	r18, 0x24	; 36
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	f9 01       	movw	r30, r18
     b90:	20 81       	ld	r18, Z
     b92:	23 60       	ori	r18, 0x03	; 3
     b94:	fc 01       	movw	r30, r24
     b96:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     b98:	84 e2       	ldi	r24, 0x24	; 36
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	24 e2       	ldi	r18, 0x24	; 36
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	f9 01       	movw	r30, r18
     ba2:	20 81       	ld	r18, Z
     ba4:	2c 63       	ori	r18, 0x3C	; 60
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 83       	st	Z, r18
}
     baa:	00 00       	nop
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	0f 91       	pop	r16
     bb2:	ef 90       	pop	r14
     bb4:	df 90       	pop	r13
     bb6:	cf 90       	pop	r12
     bb8:	bf 90       	pop	r11
     bba:	af 90       	pop	r10
     bbc:	9f 90       	pop	r9
     bbe:	8f 90       	pop	r8
     bc0:	08 95       	ret

00000bc2 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	1f 92       	push	r1
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
     bce:	85 e2       	ldi	r24, 0x25	; 37
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	25 e2       	ldi	r18, 0x25	; 37
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	f9 01       	movw	r30, r18
     bd8:	20 81       	ld	r18, Z
     bda:	23 7c       	andi	r18, 0xC3	; 195
     bdc:	fc 01       	movw	r30, r24
     bde:	20 83       	st	Z, r18
		PORTB |= task_no << 2;
     be0:	85 e2       	ldi	r24, 0x25	; 37
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	25 e2       	ldi	r18, 0x25	; 37
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	f9 01       	movw	r30, r18
     bea:	20 81       	ld	r18, Z
     bec:	42 2f       	mov	r20, r18
     bee:	29 81       	ldd	r18, Y+1	; 0x01
     bf0:	22 2f       	mov	r18, r18
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	22 0f       	add	r18, r18
     bf6:	33 1f       	adc	r19, r19
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	24 2b       	or	r18, r20
     bfe:	fc 01       	movw	r30, r24
     c00:	20 83       	st	Z, r18
	}
     c02:	00 00       	nop
     c04:	0f 90       	pop	r0
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	08 95       	ret

00000c0c <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	1f 92       	push	r1
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
     c18:	85 e2       	ldi	r24, 0x25	; 37
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	25 e2       	ldi	r18, 0x25	; 37
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	f9 01       	movw	r30, r18
     c22:	20 81       	ld	r18, Z
     c24:	23 7c       	andi	r18, 0xC3	; 195
     c26:	fc 01       	movw	r30, r24
     c28:	20 83       	st	Z, r18
	}
     c2a:	00 00       	nop
     c2c:	0f 90       	pop	r0
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret

00000c34 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	00 d0       	rcall	.+0      	; 0xc3a <buffer_init+0x6>
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	fc 01       	movw	r30, r24
     c48:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	fc 01       	movw	r30, r24
     c50:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
     c56:	fc 01       	movw	r30, r24
     c58:	12 a2       	std	Z+34, r1	; 0x22
}
     c5a:	00 00       	nop
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	00 d0       	rcall	.+0      	; 0xc6c <buffer_get_item+0x6>
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <buffer_get_item+0x8>
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	9a 83       	std	Y+2, r25	; 0x02
     c74:	89 83       	std	Y+1, r24	; 0x01
     c76:	7c 83       	std	Y+4, r23	; 0x04
     c78:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	fc 01       	movw	r30, r24
     c80:	82 a1       	ldd	r24, Z+34	; 0x22
     c82:	88 23       	and	r24, r24
     c84:	81 f1       	breq	.+96     	; 0xce6 <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	9a 81       	ldd	r25, Y+2	; 0x02
     c8a:	fc 01       	movw	r30, r24
     c8c:	81 a1       	ldd	r24, Z+33	; 0x21
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	29 81       	ldd	r18, Y+1	; 0x01
     c94:	3a 81       	ldd	r19, Y+2	; 0x02
     c96:	82 0f       	add	r24, r18
     c98:	93 1f       	adc	r25, r19
     c9a:	fc 01       	movw	r30, r24
     c9c:	20 81       	ld	r18, Z
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	fc 01       	movw	r30, r24
     ca4:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	fc 01       	movw	r30, r24
     cac:	81 a1       	ldd	r24, Z+33	; 0x21
     cae:	88 2f       	mov	r24, r24
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	8f 71       	andi	r24, 0x1F	; 31
     cb6:	90 78       	andi	r25, 0x80	; 128
     cb8:	99 23       	and	r25, r25
     cba:	24 f4       	brge	.+8      	; 0xcc4 <buffer_get_item+0x5e>
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	80 6e       	ori	r24, 0xE0	; 224
     cc0:	9f 6f       	ori	r25, 0xFF	; 255
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	28 2f       	mov	r18, r24
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	9a 81       	ldd	r25, Y+2	; 0x02
     cca:	fc 01       	movw	r30, r24
     ccc:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	fc 01       	movw	r30, r24
     cd4:	82 a1       	ldd	r24, Z+34	; 0x22
     cd6:	2f ef       	ldi	r18, 0xFF	; 255
     cd8:	28 0f       	add	r18, r24
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	fc 01       	movw	r30, r24
     ce0:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
}
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <buffer_put_item+0x6>
     cfc:	1f 92       	push	r1
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	89 83       	std	Y+1, r24	; 0x01
     d06:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	9a 81       	ldd	r25, Y+2	; 0x02
     d0c:	fc 01       	movw	r30, r24
     d0e:	82 a1       	ldd	r24, Z+34	; 0x22
     d10:	80 32       	cpi	r24, 0x20	; 32
     d12:	68 f5       	brcc	.+90     	; 0xd6e <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	9a 81       	ldd	r25, Y+2	; 0x02
     d18:	fc 01       	movw	r30, r24
     d1a:	80 a1       	ldd	r24, Z+32	; 0x20
     d1c:	88 2f       	mov	r24, r24
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	29 81       	ldd	r18, Y+1	; 0x01
     d22:	3a 81       	ldd	r19, Y+2	; 0x02
     d24:	82 0f       	add	r24, r18
     d26:	93 1f       	adc	r25, r19
     d28:	2b 81       	ldd	r18, Y+3	; 0x03
     d2a:	fc 01       	movw	r30, r24
     d2c:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	9a 81       	ldd	r25, Y+2	; 0x02
     d32:	fc 01       	movw	r30, r24
     d34:	80 a1       	ldd	r24, Z+32	; 0x20
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	8f 71       	andi	r24, 0x1F	; 31
     d3e:	90 78       	andi	r25, 0x80	; 128
     d40:	99 23       	and	r25, r25
     d42:	24 f4       	brge	.+8      	; 0xd4c <buffer_put_item+0x56>
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	80 6e       	ori	r24, 0xE0	; 224
     d48:	9f 6f       	ori	r25, 0xFF	; 255
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	28 2f       	mov	r18, r24
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	fc 01       	movw	r30, r24
     d54:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	9a 81       	ldd	r25, Y+2	; 0x02
     d5a:	fc 01       	movw	r30, r24
     d5c:	82 a1       	ldd	r24, Z+34	; 0x22
     d5e:	21 e0       	ldi	r18, 0x01	; 1
     d60:	28 0f       	add	r18, r24
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	9a 81       	ldd	r25, Y+2	; 0x02
     d66:	fc 01       	movw	r30, r24
     d68:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
     d6e:	82 e0       	ldi	r24, 0x02	; 2
}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	00 d0       	rcall	.+0      	; 0xd82 <vListInitialise+0x6>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	9a 83       	std	Y+2, r25	; 0x02
     d88:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	9a 81       	ldd	r25, Y+2	; 0x02
     d8e:	9c 01       	movw	r18, r24
     d90:	2d 5f       	subi	r18, 0xFD	; 253
     d92:	3f 4f       	sbci	r19, 0xFF	; 255
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	fc 01       	movw	r30, r24
     d9a:	32 83       	std	Z+2, r19	; 0x02
     d9c:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	2f ef       	ldi	r18, 0xFF	; 255
     da4:	3f ef       	ldi	r19, 0xFF	; 255
     da6:	fc 01       	movw	r30, r24
     da8:	34 83       	std	Z+4, r19	; 0x04
     daa:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	9a 81       	ldd	r25, Y+2	; 0x02
     db0:	9c 01       	movw	r18, r24
     db2:	2d 5f       	subi	r18, 0xFD	; 253
     db4:	3f 4f       	sbci	r19, 0xFF	; 255
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	fc 01       	movw	r30, r24
     dbc:	36 83       	std	Z+6, r19	; 0x06
     dbe:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	9a 81       	ldd	r25, Y+2	; 0x02
     dc4:	9c 01       	movw	r18, r24
     dc6:	2d 5f       	subi	r18, 0xFD	; 253
     dc8:	3f 4f       	sbci	r19, 0xFF	; 255
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	9a 81       	ldd	r25, Y+2	; 0x02
     dce:	fc 01       	movw	r30, r24
     dd0:	30 87       	std	Z+8, r19	; 0x08
     dd2:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	fc 01       	movw	r30, r24
     dda:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     ddc:	00 00       	nop
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	08 95       	ret

00000de8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	00 d0       	rcall	.+0      	; 0xdee <vListInitialiseItem+0x6>
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	9a 83       	std	Y+2, r25	; 0x02
     df4:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	9a 81       	ldd	r25, Y+2	; 0x02
     dfa:	fc 01       	movw	r30, r24
     dfc:	11 86       	std	Z+9, r1	; 0x09
     dfe:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     e00:	00 00       	nop
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	08 95       	ret

00000e0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	00 d0       	rcall	.+0      	; 0xe12 <vListInsertEnd+0x6>
     e12:	00 d0       	rcall	.+0      	; 0xe14 <vListInsertEnd+0x8>
     e14:	00 d0       	rcall	.+0      	; 0xe16 <vListInsertEnd+0xa>
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	9c 83       	std	Y+4, r25	; 0x04
     e1c:	8b 83       	std	Y+3, r24	; 0x03
     e1e:	7e 83       	std	Y+6, r23	; 0x06
     e20:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	9c 81       	ldd	r25, Y+4	; 0x04
     e26:	fc 01       	movw	r30, r24
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	92 81       	ldd	r25, Z+2	; 0x02
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     e30:	8d 81       	ldd	r24, Y+5	; 0x05
     e32:	9e 81       	ldd	r25, Y+6	; 0x06
     e34:	29 81       	ldd	r18, Y+1	; 0x01
     e36:	3a 81       	ldd	r19, Y+2	; 0x02
     e38:	fc 01       	movw	r30, r24
     e3a:	33 83       	std	Z+3, r19	; 0x03
     e3c:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	9a 81       	ldd	r25, Y+2	; 0x02
     e42:	fc 01       	movw	r30, r24
     e44:	24 81       	ldd	r18, Z+4	; 0x04
     e46:	35 81       	ldd	r19, Z+5	; 0x05
     e48:	8d 81       	ldd	r24, Y+5	; 0x05
     e4a:	9e 81       	ldd	r25, Y+6	; 0x06
     e4c:	fc 01       	movw	r30, r24
     e4e:	35 83       	std	Z+5, r19	; 0x05
     e50:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	9a 81       	ldd	r25, Y+2	; 0x02
     e56:	fc 01       	movw	r30, r24
     e58:	84 81       	ldd	r24, Z+4	; 0x04
     e5a:	95 81       	ldd	r25, Z+5	; 0x05
     e5c:	2d 81       	ldd	r18, Y+5	; 0x05
     e5e:	3e 81       	ldd	r19, Y+6	; 0x06
     e60:	fc 01       	movw	r30, r24
     e62:	33 83       	std	Z+3, r19	; 0x03
     e64:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	2d 81       	ldd	r18, Y+5	; 0x05
     e6c:	3e 81       	ldd	r19, Y+6	; 0x06
     e6e:	fc 01       	movw	r30, r24
     e70:	35 83       	std	Z+5, r19	; 0x05
     e72:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     e74:	8d 81       	ldd	r24, Y+5	; 0x05
     e76:	9e 81       	ldd	r25, Y+6	; 0x06
     e78:	2b 81       	ldd	r18, Y+3	; 0x03
     e7a:	3c 81       	ldd	r19, Y+4	; 0x04
     e7c:	fc 01       	movw	r30, r24
     e7e:	31 87       	std	Z+9, r19	; 0x09
     e80:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	9c 81       	ldd	r25, Y+4	; 0x04
     e86:	fc 01       	movw	r30, r24
     e88:	80 81       	ld	r24, Z
     e8a:	21 e0       	ldi	r18, 0x01	; 1
     e8c:	28 0f       	add	r18, r24
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	9c 81       	ldd	r25, Y+4	; 0x04
     e92:	fc 01       	movw	r30, r24
     e94:	20 83       	st	Z, r18
}
     e96:	00 00       	nop
     e98:	26 96       	adiw	r28, 0x06	; 6
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	28 97       	sbiw	r28, 0x08	; 8
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	9e 83       	std	Y+6, r25	; 0x06
     ec0:	8d 83       	std	Y+5, r24	; 0x05
     ec2:	78 87       	std	Y+8, r23	; 0x08
     ec4:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     ec6:	8f 81       	ldd	r24, Y+7	; 0x07
     ec8:	98 85       	ldd	r25, Y+8	; 0x08
     eca:	fc 01       	movw	r30, r24
     ecc:	80 81       	ld	r24, Z
     ece:	91 81       	ldd	r25, Z+1	; 0x01
     ed0:	9c 83       	std	Y+4, r25	; 0x04
     ed2:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	9c 81       	ldd	r25, Y+4	; 0x04
     ed8:	01 96       	adiw	r24, 0x01	; 1
     eda:	41 f4       	brne	.+16     	; 0xeec <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	9e 81       	ldd	r25, Y+6	; 0x06
     ee0:	fc 01       	movw	r30, r24
     ee2:	87 81       	ldd	r24, Z+7	; 0x07
     ee4:	90 85       	ldd	r25, Z+8	; 0x08
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	1a c0       	rjmp	.+52     	; 0xf20 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     eec:	8d 81       	ldd	r24, Y+5	; 0x05
     eee:	9e 81       	ldd	r25, Y+6	; 0x06
     ef0:	03 96       	adiw	r24, 0x03	; 3
     ef2:	9a 83       	std	Y+2, r25	; 0x02
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	07 c0       	rjmp	.+14     	; 0xf06 <vListInsert+0x5c>
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	fc 01       	movw	r30, r24
     efe:	82 81       	ldd	r24, Z+2	; 0x02
     f00:	93 81       	ldd	r25, Z+3	; 0x03
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	fc 01       	movw	r30, r24
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	93 81       	ldd	r25, Z+3	; 0x03
     f10:	fc 01       	movw	r30, r24
     f12:	20 81       	ld	r18, Z
     f14:	31 81       	ldd	r19, Z+1	; 0x01
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	9c 81       	ldd	r25, Y+4	; 0x04
     f1a:	82 17       	cp	r24, r18
     f1c:	93 07       	cpc	r25, r19
     f1e:	60 f7       	brcc	.-40     	; 0xef8 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	fc 01       	movw	r30, r24
     f26:	22 81       	ldd	r18, Z+2	; 0x02
     f28:	33 81       	ldd	r19, Z+3	; 0x03
     f2a:	8f 81       	ldd	r24, Y+7	; 0x07
     f2c:	98 85       	ldd	r25, Y+8	; 0x08
     f2e:	fc 01       	movw	r30, r24
     f30:	33 83       	std	Z+3, r19	; 0x03
     f32:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     f34:	8f 81       	ldd	r24, Y+7	; 0x07
     f36:	98 85       	ldd	r25, Y+8	; 0x08
     f38:	fc 01       	movw	r30, r24
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	93 81       	ldd	r25, Z+3	; 0x03
     f3e:	2f 81       	ldd	r18, Y+7	; 0x07
     f40:	38 85       	ldd	r19, Y+8	; 0x08
     f42:	fc 01       	movw	r30, r24
     f44:	35 83       	std	Z+5, r19	; 0x05
     f46:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     f48:	8f 81       	ldd	r24, Y+7	; 0x07
     f4a:	98 85       	ldd	r25, Y+8	; 0x08
     f4c:	29 81       	ldd	r18, Y+1	; 0x01
     f4e:	3a 81       	ldd	r19, Y+2	; 0x02
     f50:	fc 01       	movw	r30, r24
     f52:	35 83       	std	Z+5, r19	; 0x05
     f54:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	2f 81       	ldd	r18, Y+7	; 0x07
     f5c:	38 85       	ldd	r19, Y+8	; 0x08
     f5e:	fc 01       	movw	r30, r24
     f60:	33 83       	std	Z+3, r19	; 0x03
     f62:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     f64:	8f 81       	ldd	r24, Y+7	; 0x07
     f66:	98 85       	ldd	r25, Y+8	; 0x08
     f68:	2d 81       	ldd	r18, Y+5	; 0x05
     f6a:	3e 81       	ldd	r19, Y+6	; 0x06
     f6c:	fc 01       	movw	r30, r24
     f6e:	31 87       	std	Z+9, r19	; 0x09
     f70:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     f72:	8d 81       	ldd	r24, Y+5	; 0x05
     f74:	9e 81       	ldd	r25, Y+6	; 0x06
     f76:	fc 01       	movw	r30, r24
     f78:	80 81       	ld	r24, Z
     f7a:	21 e0       	ldi	r18, 0x01	; 1
     f7c:	28 0f       	add	r18, r24
     f7e:	8d 81       	ldd	r24, Y+5	; 0x05
     f80:	9e 81       	ldd	r25, Y+6	; 0x06
     f82:	fc 01       	movw	r30, r24
     f84:	20 83       	st	Z, r18
}
     f86:	00 00       	nop
     f88:	28 96       	adiw	r28, 0x08	; 8
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <uxListRemove+0x6>
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <uxListRemove+0x8>
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	9c 83       	std	Y+4, r25	; 0x04
     fa8:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	9c 81       	ldd	r25, Y+4	; 0x04
     fae:	fc 01       	movw	r30, r24
     fb0:	80 85       	ldd	r24, Z+8	; 0x08
     fb2:	91 85       	ldd	r25, Z+9	; 0x09
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	9c 81       	ldd	r25, Y+4	; 0x04
     fbc:	fc 01       	movw	r30, r24
     fbe:	82 81       	ldd	r24, Z+2	; 0x02
     fc0:	93 81       	ldd	r25, Z+3	; 0x03
     fc2:	2b 81       	ldd	r18, Y+3	; 0x03
     fc4:	3c 81       	ldd	r19, Y+4	; 0x04
     fc6:	f9 01       	movw	r30, r18
     fc8:	24 81       	ldd	r18, Z+4	; 0x04
     fca:	35 81       	ldd	r19, Z+5	; 0x05
     fcc:	fc 01       	movw	r30, r24
     fce:	35 83       	std	Z+5, r19	; 0x05
     fd0:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	9c 81       	ldd	r25, Y+4	; 0x04
     fd6:	fc 01       	movw	r30, r24
     fd8:	84 81       	ldd	r24, Z+4	; 0x04
     fda:	95 81       	ldd	r25, Z+5	; 0x05
     fdc:	2b 81       	ldd	r18, Y+3	; 0x03
     fde:	3c 81       	ldd	r19, Y+4	; 0x04
     fe0:	f9 01       	movw	r30, r18
     fe2:	22 81       	ldd	r18, Z+2	; 0x02
     fe4:	33 81       	ldd	r19, Z+3	; 0x03
     fe6:	fc 01       	movw	r30, r24
     fe8:	33 83       	std	Z+3, r19	; 0x03
     fea:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	fc 01       	movw	r30, r24
     ff2:	21 81       	ldd	r18, Z+1	; 0x01
     ff4:	32 81       	ldd	r19, Z+2	; 0x02
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	28 17       	cp	r18, r24
     ffc:	39 07       	cpc	r19, r25
     ffe:	51 f4       	brne	.+20     	; 0x1014 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	fc 01       	movw	r30, r24
    1006:	24 81       	ldd	r18, Z+4	; 0x04
    1008:	35 81       	ldd	r19, Z+5	; 0x05
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
    100e:	fc 01       	movw	r30, r24
    1010:	32 83       	std	Z+2, r19	; 0x02
    1012:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	fc 01       	movw	r30, r24
    101a:	11 86       	std	Z+9, r1	; 0x09
    101c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
    1022:	fc 01       	movw	r30, r24
    1024:	80 81       	ld	r24, Z
    1026:	2f ef       	ldi	r18, 0xFF	; 255
    1028:	28 0f       	add	r18, r24
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	fc 01       	movw	r30, r24
    1030:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	9a 81       	ldd	r25, Y+2	; 0x02
    1036:	fc 01       	movw	r30, r24
    1038:	80 81       	ld	r24, Z
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	28 97       	sbiw	r28, 0x08	; 8
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	9c 83       	std	Y+4, r25	; 0x04
    105e:	8b 83       	std	Y+3, r24	; 0x03
    1060:	7e 83       	std	Y+6, r23	; 0x06
    1062:	6d 83       	std	Y+5, r22	; 0x05
    1064:	58 87       	std	Y+8, r21	; 0x08
    1066:	4f 83       	std	Y+7, r20	; 0x07
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	21 e1       	ldi	r18, 0x11	; 17
    106e:	fc 01       	movw	r30, r24
    1070:	20 83       	st	Z, r18
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	9c 83       	std	Y+4, r25	; 0x04
    107a:	8b 83       	std	Y+3, r24	; 0x03
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	22 e2       	ldi	r18, 0x22	; 34
    1082:	fc 01       	movw	r30, r24
    1084:	20 83       	st	Z, r18
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	9c 83       	std	Y+4, r25	; 0x04
    108e:	8b 83       	std	Y+3, r24	; 0x03
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	23 e3       	ldi	r18, 0x33	; 51
    1096:	fc 01       	movw	r30, r24
    1098:	20 83       	st	Z, r18
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	9c 83       	std	Y+4, r25	; 0x04
    10a2:	8b 83       	std	Y+3, r24	; 0x03
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	29 81       	ldd	r18, Y+1	; 0x01
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	fc 01       	movw	r30, r24
    10b4:	20 83       	st	Z, r18
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	9c 83       	std	Y+4, r25	; 0x04
    10be:	8b 83       	std	Y+3, r24	; 0x03
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	9a 81       	ldd	r25, Y+2	; 0x02
    10c4:	89 2f       	mov	r24, r25
    10c6:	99 27       	eor	r25, r25
    10c8:	9a 83       	std	Y+2, r25	; 0x02
    10ca:	89 83       	std	Y+1, r24	; 0x01
    10cc:	29 81       	ldd	r18, Y+1	; 0x01
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	fc 01       	movw	r30, r24
    10d4:	20 83       	st	Z, r18
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	9c 83       	std	Y+4, r25	; 0x04
    10de:	8b 83       	std	Y+3, r24	; 0x03
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	fc 01       	movw	r30, r24
    10e6:	10 82       	st	Z, r1
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	9c 83       	std	Y+4, r25	; 0x04
    10f0:	8b 83       	std	Y+3, r24	; 0x03
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	20 e8       	ldi	r18, 0x80	; 128
    10f8:	fc 01       	movw	r30, r24
    10fa:	20 83       	st	Z, r18
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	9c 83       	std	Y+4, r25	; 0x04
    1104:	8b 83       	std	Y+3, r24	; 0x03
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	fc 01       	movw	r30, r24
    110c:	10 82       	st	Z, r1
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	9c 83       	std	Y+4, r25	; 0x04
    1116:	8b 83       	std	Y+3, r24	; 0x03
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	22 e0       	ldi	r18, 0x02	; 2
    111e:	fc 01       	movw	r30, r24
    1120:	20 83       	st	Z, r18
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	23 e0       	ldi	r18, 0x03	; 3
    1132:	fc 01       	movw	r30, r24
    1134:	20 83       	st	Z, r18
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	9c 83       	std	Y+4, r25	; 0x04
    113e:	8b 83       	std	Y+3, r24	; 0x03
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	9c 81       	ldd	r25, Y+4	; 0x04
    1144:	24 e0       	ldi	r18, 0x04	; 4
    1146:	fc 01       	movw	r30, r24
    1148:	20 83       	st	Z, r18
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	9c 83       	std	Y+4, r25	; 0x04
    1152:	8b 83       	std	Y+3, r24	; 0x03
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	25 e0       	ldi	r18, 0x05	; 5
    115a:	fc 01       	movw	r30, r24
    115c:	20 83       	st	Z, r18
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	9c 83       	std	Y+4, r25	; 0x04
    1166:	8b 83       	std	Y+3, r24	; 0x03
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04
    116c:	26 e0       	ldi	r18, 0x06	; 6
    116e:	fc 01       	movw	r30, r24
    1170:	20 83       	st	Z, r18
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	9c 83       	std	Y+4, r25	; 0x04
    117a:	8b 83       	std	Y+3, r24	; 0x03
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	27 e0       	ldi	r18, 0x07	; 7
    1182:	fc 01       	movw	r30, r24
    1184:	20 83       	st	Z, r18
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	9c 83       	std	Y+4, r25	; 0x04
    118e:	8b 83       	std	Y+3, r24	; 0x03
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	28 e0       	ldi	r18, 0x08	; 8
    1196:	fc 01       	movw	r30, r24
    1198:	20 83       	st	Z, r18
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	9c 83       	std	Y+4, r25	; 0x04
    11a2:	8b 83       	std	Y+3, r24	; 0x03
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	29 e0       	ldi	r18, 0x09	; 9
    11aa:	fc 01       	movw	r30, r24
    11ac:	20 83       	st	Z, r18
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	9c 81       	ldd	r25, Y+4	; 0x04
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	9c 83       	std	Y+4, r25	; 0x04
    11b6:	8b 83       	std	Y+3, r24	; 0x03
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	20 e1       	ldi	r18, 0x10	; 16
    11be:	fc 01       	movw	r30, r24
    11c0:	20 83       	st	Z, r18
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	9c 83       	std	Y+4, r25	; 0x04
    11ca:	8b 83       	std	Y+3, r24	; 0x03
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	21 e1       	ldi	r18, 0x11	; 17
    11d2:	fc 01       	movw	r30, r24
    11d4:	20 83       	st	Z, r18
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	9c 83       	std	Y+4, r25	; 0x04
    11de:	8b 83       	std	Y+3, r24	; 0x03
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	22 e1       	ldi	r18, 0x12	; 18
    11e6:	fc 01       	movw	r30, r24
    11e8:	20 83       	st	Z, r18
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	9c 83       	std	Y+4, r25	; 0x04
    11f2:	8b 83       	std	Y+3, r24	; 0x03
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	23 e1       	ldi	r18, 0x13	; 19
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 83       	st	Z, r18
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	9c 83       	std	Y+4, r25	; 0x04
    1206:	8b 83       	std	Y+3, r24	; 0x03
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	24 e1       	ldi	r18, 0x14	; 20
    120e:	fc 01       	movw	r30, r24
    1210:	20 83       	st	Z, r18
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	9c 83       	std	Y+4, r25	; 0x04
    121a:	8b 83       	std	Y+3, r24	; 0x03
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	25 e1       	ldi	r18, 0x15	; 21
    1222:	fc 01       	movw	r30, r24
    1224:	20 83       	st	Z, r18
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	9c 83       	std	Y+4, r25	; 0x04
    122e:	8b 83       	std	Y+3, r24	; 0x03
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	26 e1       	ldi	r18, 0x16	; 22
    1236:	fc 01       	movw	r30, r24
    1238:	20 83       	st	Z, r18
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	9c 83       	std	Y+4, r25	; 0x04
    1242:	8b 83       	std	Y+3, r24	; 0x03
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	27 e1       	ldi	r18, 0x17	; 23
    124a:	fc 01       	movw	r30, r24
    124c:	20 83       	st	Z, r18
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	9c 83       	std	Y+4, r25	; 0x04
    1256:	8b 83       	std	Y+3, r24	; 0x03
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	28 e1       	ldi	r18, 0x18	; 24
    125e:	fc 01       	movw	r30, r24
    1260:	20 83       	st	Z, r18
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	9c 83       	std	Y+4, r25	; 0x04
    126a:	8b 83       	std	Y+3, r24	; 0x03
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	29 e1       	ldi	r18, 0x19	; 25
    1272:	fc 01       	movw	r30, r24
    1274:	20 83       	st	Z, r18
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	9c 83       	std	Y+4, r25	; 0x04
    127e:	8b 83       	std	Y+3, r24	; 0x03
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	20 e2       	ldi	r18, 0x20	; 32
    1286:	fc 01       	movw	r30, r24
    1288:	20 83       	st	Z, r18
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	9c 81       	ldd	r25, Y+4	; 0x04
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	9c 83       	std	Y+4, r25	; 0x04
    1292:	8b 83       	std	Y+3, r24	; 0x03
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	21 e2       	ldi	r18, 0x21	; 33
    129a:	fc 01       	movw	r30, r24
    129c:	20 83       	st	Z, r18
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	9c 83       	std	Y+4, r25	; 0x04
    12a6:	8b 83       	std	Y+3, r24	; 0x03
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	22 e2       	ldi	r18, 0x22	; 34
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	9c 83       	std	Y+4, r25	; 0x04
    12ba:	8b 83       	std	Y+3, r24	; 0x03
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	23 e2       	ldi	r18, 0x23	; 35
    12c2:	fc 01       	movw	r30, r24
    12c4:	20 83       	st	Z, r18
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9c 83       	std	Y+4, r25	; 0x04
    12ce:	8b 83       	std	Y+3, r24	; 0x03
    12d0:	8f 81       	ldd	r24, Y+7	; 0x07
    12d2:	98 85       	ldd	r25, Y+8	; 0x08
    12d4:	9a 83       	std	Y+2, r25	; 0x02
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	29 81       	ldd	r18, Y+1	; 0x01
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	fc 01       	movw	r30, r24
    12e0:	20 83       	st	Z, r18
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	9c 81       	ldd	r25, Y+4	; 0x04
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	9c 83       	std	Y+4, r25	; 0x04
    12ea:	8b 83       	std	Y+3, r24	; 0x03
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	9a 81       	ldd	r25, Y+2	; 0x02
    12f0:	89 2f       	mov	r24, r25
    12f2:	99 27       	eor	r25, r25
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	29 81       	ldd	r18, Y+1	; 0x01
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	fc 01       	movw	r30, r24
    1300:	20 83       	st	Z, r18
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	9c 81       	ldd	r25, Y+4	; 0x04
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	9c 83       	std	Y+4, r25	; 0x04
    130a:	8b 83       	std	Y+3, r24	; 0x03
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	26 e2       	ldi	r18, 0x26	; 38
    1312:	fc 01       	movw	r30, r24
    1314:	20 83       	st	Z, r18
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	9c 83       	std	Y+4, r25	; 0x04
    131e:	8b 83       	std	Y+3, r24	; 0x03
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	27 e2       	ldi	r18, 0x27	; 39
    1326:	fc 01       	movw	r30, r24
    1328:	20 83       	st	Z, r18
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	9c 81       	ldd	r25, Y+4	; 0x04
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	28 e2       	ldi	r18, 0x28	; 40
    133a:	fc 01       	movw	r30, r24
    133c:	20 83       	st	Z, r18
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	9c 83       	std	Y+4, r25	; 0x04
    1346:	8b 83       	std	Y+3, r24	; 0x03
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	29 e2       	ldi	r18, 0x29	; 41
    134e:	fc 01       	movw	r30, r24
    1350:	20 83       	st	Z, r18
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	9c 83       	std	Y+4, r25	; 0x04
    135a:	8b 83       	std	Y+3, r24	; 0x03
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	20 e3       	ldi	r18, 0x30	; 48
    1362:	fc 01       	movw	r30, r24
    1364:	20 83       	st	Z, r18
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	9c 83       	std	Y+4, r25	; 0x04
    136e:	8b 83       	std	Y+3, r24	; 0x03
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	21 e3       	ldi	r18, 0x31	; 49
    1376:	fc 01       	movw	r30, r24
    1378:	20 83       	st	Z, r18
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	28 96       	adiw	r28, 0x08	; 8
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	08 95       	ret

0000139a <xPortStartScheduler>:
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	0e 94 ba 0a 	call	0x1574	; 0x1574 <prvSetupTimerInterrupt>
    13a6:	a0 91 db 06 	lds	r26, 0x06DB	; 0x8006db <pxCurrentTCB>
    13aa:	b0 91 dc 06 	lds	r27, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    13ae:	cd 91       	ld	r28, X+
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	dd 91       	ld	r29, X+
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	ff 91       	pop	r31
    13b8:	ef 91       	pop	r30
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	bf 91       	pop	r27
    13c0:	af 91       	pop	r26
    13c2:	9f 91       	pop	r25
    13c4:	8f 91       	pop	r24
    13c6:	7f 91       	pop	r23
    13c8:	6f 91       	pop	r22
    13ca:	5f 91       	pop	r21
    13cc:	4f 91       	pop	r20
    13ce:	3f 91       	pop	r19
    13d0:	2f 91       	pop	r18
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	cf 90       	pop	r12
    13de:	bf 90       	pop	r11
    13e0:	af 90       	pop	r10
    13e2:	9f 90       	pop	r9
    13e4:	8f 90       	pop	r8
    13e6:	7f 90       	pop	r7
    13e8:	6f 90       	pop	r6
    13ea:	5f 90       	pop	r5
    13ec:	4f 90       	pop	r4
    13ee:	3f 90       	pop	r3
    13f0:	2f 90       	pop	r2
    13f2:	1f 90       	pop	r1
    13f4:	0f 90       	pop	r0
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	0f 90       	pop	r0
    13fa:	08 95       	ret
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	08 95       	ret

00001404 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1404:	0f 92       	push	r0
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	0f 92       	push	r0
    140c:	1f 92       	push	r1
    140e:	11 24       	eor	r1, r1
    1410:	2f 92       	push	r2
    1412:	3f 92       	push	r3
    1414:	4f 92       	push	r4
    1416:	5f 92       	push	r5
    1418:	6f 92       	push	r6
    141a:	7f 92       	push	r7
    141c:	8f 92       	push	r8
    141e:	9f 92       	push	r9
    1420:	af 92       	push	r10
    1422:	bf 92       	push	r11
    1424:	cf 92       	push	r12
    1426:	df 92       	push	r13
    1428:	ef 92       	push	r14
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	2f 93       	push	r18
    1432:	3f 93       	push	r19
    1434:	4f 93       	push	r20
    1436:	5f 93       	push	r21
    1438:	6f 93       	push	r22
    143a:	7f 93       	push	r23
    143c:	8f 93       	push	r24
    143e:	9f 93       	push	r25
    1440:	af 93       	push	r26
    1442:	bf 93       	push	r27
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	ef 93       	push	r30
    144a:	ff 93       	push	r31
    144c:	a0 91 db 06 	lds	r26, 0x06DB	; 0x8006db <pxCurrentTCB>
    1450:	b0 91 dc 06 	lds	r27, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    1454:	0d b6       	in	r0, 0x3d	; 61
    1456:	0d 92       	st	X+, r0
    1458:	0e b6       	in	r0, 0x3e	; 62
    145a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    145c:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1460:	a0 91 db 06 	lds	r26, 0x06DB	; 0x8006db <pxCurrentTCB>
    1464:	b0 91 dc 06 	lds	r27, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    1468:	cd 91       	ld	r28, X+
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	dd 91       	ld	r29, X+
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	ff 91       	pop	r31
    1472:	ef 91       	pop	r30
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	bf 91       	pop	r27
    147a:	af 91       	pop	r26
    147c:	9f 91       	pop	r25
    147e:	8f 91       	pop	r24
    1480:	7f 91       	pop	r23
    1482:	6f 91       	pop	r22
    1484:	5f 91       	pop	r21
    1486:	4f 91       	pop	r20
    1488:	3f 91       	pop	r19
    148a:	2f 91       	pop	r18
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	bf 90       	pop	r11
    149a:	af 90       	pop	r10
    149c:	9f 90       	pop	r9
    149e:	8f 90       	pop	r8
    14a0:	7f 90       	pop	r7
    14a2:	6f 90       	pop	r6
    14a4:	5f 90       	pop	r5
    14a6:	4f 90       	pop	r4
    14a8:	3f 90       	pop	r3
    14aa:	2f 90       	pop	r2
    14ac:	1f 90       	pop	r1
    14ae:	0f 90       	pop	r0
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	0f 90       	pop	r0

	asm volatile ( "ret" );
    14b4:	08 95       	ret
	...

000014b8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    14b8:	0f 92       	push	r0
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	0f 92       	push	r0
    14c0:	1f 92       	push	r1
    14c2:	11 24       	eor	r1, r1
    14c4:	2f 92       	push	r2
    14c6:	3f 92       	push	r3
    14c8:	4f 92       	push	r4
    14ca:	5f 92       	push	r5
    14cc:	6f 92       	push	r6
    14ce:	7f 92       	push	r7
    14d0:	8f 92       	push	r8
    14d2:	9f 92       	push	r9
    14d4:	af 92       	push	r10
    14d6:	bf 92       	push	r11
    14d8:	cf 92       	push	r12
    14da:	df 92       	push	r13
    14dc:	ef 92       	push	r14
    14de:	ff 92       	push	r15
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	2f 93       	push	r18
    14e6:	3f 93       	push	r19
    14e8:	4f 93       	push	r20
    14ea:	5f 93       	push	r21
    14ec:	6f 93       	push	r22
    14ee:	7f 93       	push	r23
    14f0:	8f 93       	push	r24
    14f2:	9f 93       	push	r25
    14f4:	af 93       	push	r26
    14f6:	bf 93       	push	r27
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	ef 93       	push	r30
    14fe:	ff 93       	push	r31
    1500:	a0 91 db 06 	lds	r26, 0x06DB	; 0x8006db <pxCurrentTCB>
    1504:	b0 91 dc 06 	lds	r27, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    1508:	0d b6       	in	r0, 0x3d	; 61
    150a:	0d 92       	st	X+, r0
    150c:	0e b6       	in	r0, 0x3e	; 62
    150e:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1510:	0e 94 c9 14 	call	0x2992	; 0x2992 <xTaskIncrementTick>
    1514:	88 23       	and	r24, r24
    1516:	11 f0       	breq	.+4      	; 0x151c <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    1518:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    151c:	a0 91 db 06 	lds	r26, 0x06DB	; 0x8006db <pxCurrentTCB>
    1520:	b0 91 dc 06 	lds	r27, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    1524:	cd 91       	ld	r28, X+
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	dd 91       	ld	r29, X+
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	ff 91       	pop	r31
    152e:	ef 91       	pop	r30
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	bf 91       	pop	r27
    1536:	af 91       	pop	r26
    1538:	9f 91       	pop	r25
    153a:	8f 91       	pop	r24
    153c:	7f 91       	pop	r23
    153e:	6f 91       	pop	r22
    1540:	5f 91       	pop	r21
    1542:	4f 91       	pop	r20
    1544:	3f 91       	pop	r19
    1546:	2f 91       	pop	r18
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	bf 90       	pop	r11
    1556:	af 90       	pop	r10
    1558:	9f 90       	pop	r9
    155a:	8f 90       	pop	r8
    155c:	7f 90       	pop	r7
    155e:	6f 90       	pop	r6
    1560:	5f 90       	pop	r5
    1562:	4f 90       	pop	r4
    1564:	3f 90       	pop	r3
    1566:	2f 90       	pop	r2
    1568:	1f 90       	pop	r1
    156a:	0f 90       	pop	r0
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1570:	08 95       	ret
	...

00001574 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	00 d0       	rcall	.+0      	; 0x157a <prvSetupTimerInterrupt+0x6>
    157a:	00 d0       	rcall	.+0      	; 0x157c <prvSetupTimerInterrupt+0x8>
    157c:	00 d0       	rcall	.+0      	; 0x157e <prvSetupTimerInterrupt+0xa>
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1582:	89 e9       	ldi	r24, 0x99	; 153
    1584:	99 e3       	ldi	r25, 0x39	; 57
    1586:	a0 e0       	ldi	r26, 0x00	; 0
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	9a 83       	std	Y+2, r25	; 0x02
    158e:	ab 83       	std	Y+3, r26	; 0x03
    1590:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	9a 81       	ldd	r25, Y+2	; 0x02
    1596:	ab 81       	ldd	r26, Y+3	; 0x03
    1598:	bc 81       	ldd	r27, Y+4	; 0x04
    159a:	68 94       	set
    159c:	15 f8       	bld	r1, 5
    159e:	b6 95       	lsr	r27
    15a0:	a7 95       	ror	r26
    15a2:	97 95       	ror	r25
    15a4:	87 95       	ror	r24
    15a6:	16 94       	lsr	r1
    15a8:	d1 f7       	brne	.-12     	; 0x159e <prvSetupTimerInterrupt+0x2a>
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	9a 83       	std	Y+2, r25	; 0x02
    15ae:	ab 83       	std	Y+3, r26	; 0x03
    15b0:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	ab 81       	ldd	r26, Y+3	; 0x03
    15b8:	bc 81       	ldd	r27, Y+4	; 0x04
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	a1 09       	sbc	r26, r1
    15be:	b1 09       	sbc	r27, r1
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	9a 83       	std	Y+2, r25	; 0x02
    15c4:	ab 83       	std	Y+3, r26	; 0x03
    15c6:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	ab 81       	ldd	r26, Y+3	; 0x03
    15d2:	bc 81       	ldd	r27, Y+4	; 0x04
    15d4:	89 2f       	mov	r24, r25
    15d6:	9a 2f       	mov	r25, r26
    15d8:	ab 2f       	mov	r26, r27
    15da:	bb 27       	eor	r27, r27
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	ab 83       	std	Y+3, r26	; 0x03
    15e2:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    15e8:	89 e8       	ldi	r24, 0x89	; 137
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	2e 81       	ldd	r18, Y+6	; 0x06
    15ee:	fc 01       	movw	r30, r24
    15f0:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    15f2:	88 e8       	ldi	r24, 0x88	; 136
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	2d 81       	ldd	r18, Y+5	; 0x05
    15f8:	fc 01       	movw	r30, r24
    15fa:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    15fc:	8b e0       	ldi	r24, 0x0B	; 11
    15fe:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    1600:	81 e8       	ldi	r24, 0x81	; 129
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	2d 81       	ldd	r18, Y+5	; 0x05
    1606:	fc 01       	movw	r30, r24
    1608:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    160a:	8f e6       	ldi	r24, 0x6F	; 111
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	fc 01       	movw	r30, r24
    1610:	80 81       	ld	r24, Z
    1612:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	82 60       	ori	r24, 0x02	; 2
    1618:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    161a:	8f e6       	ldi	r24, 0x6F	; 111
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	2d 81       	ldd	r18, Y+5	; 0x05
    1620:	fc 01       	movw	r30, r24
    1622:	20 83       	st	Z, r18
}
    1624:	00 00       	nop
    1626:	26 96       	adiw	r28, 0x06	; 6
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	08 95       	ret

00001638 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    1638:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <vPortYieldFromTick>
		asm volatile ( "reti" );
    163c:	18 95       	reti
	...

00001640 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	00 d0       	rcall	.+0      	; 0x1646 <pvPortMalloc+0x6>
    1646:	00 d0       	rcall	.+0      	; 0x1648 <pvPortMalloc+0x8>
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	9c 83       	std	Y+4, r25	; 0x04
    164e:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    1650:	1a 82       	std	Y+2, r1	; 0x02
    1652:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    1654:	0e 94 25 14 	call	0x284a	; 0x284a <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1658:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <pucAlignedHeap.2084>
    165c:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <pucAlignedHeap.2084+0x1>
    1660:	89 2b       	or	r24, r25
    1662:	31 f4       	brne	.+12     	; 0x1670 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1664:	8c ee       	ldi	r24, 0xEC	; 236
    1666:	92 e0       	ldi	r25, 0x02	; 2
    1668:	90 93 d6 06 	sts	0x06D6, r25	; 0x8006d6 <pucAlignedHeap.2084+0x1>
    166c:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <pucAlignedHeap.2084>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1670:	20 91 d3 06 	lds	r18, 0x06D3	; 0x8006d3 <xNextFreeByte>
    1674:	30 91 d4 06 	lds	r19, 0x06D4	; 0x8006d4 <xNextFreeByte+0x1>
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	82 0f       	add	r24, r18
    167e:	93 1f       	adc	r25, r19
    1680:	87 3e       	cpi	r24, 0xE7	; 231
    1682:	93 40       	sbci	r25, 0x03	; 3
    1684:	38 f5       	brcc	.+78     	; 0x16d4 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    1686:	20 91 d3 06 	lds	r18, 0x06D3	; 0x8006d3 <xNextFreeByte>
    168a:	30 91 d4 06 	lds	r19, 0x06D4	; 0x8006d4 <xNextFreeByte+0x1>
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	28 0f       	add	r18, r24
    1694:	39 1f       	adc	r19, r25
    1696:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <xNextFreeByte>
    169a:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    169e:	82 17       	cp	r24, r18
    16a0:	93 07       	cpc	r25, r19
    16a2:	c0 f4       	brcc	.+48     	; 0x16d4 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    16a4:	20 91 d5 06 	lds	r18, 0x06D5	; 0x8006d5 <pucAlignedHeap.2084>
    16a8:	30 91 d6 06 	lds	r19, 0x06D6	; 0x8006d6 <pucAlignedHeap.2084+0x1>
    16ac:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <xNextFreeByte>
    16b0:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <xNextFreeByte+0x1>
    16b4:	82 0f       	add	r24, r18
    16b6:	93 1f       	adc	r25, r19
    16b8:	9a 83       	std	Y+2, r25	; 0x02
    16ba:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    16bc:	20 91 d3 06 	lds	r18, 0x06D3	; 0x8006d3 <xNextFreeByte>
    16c0:	30 91 d4 06 	lds	r19, 0x06D4	; 0x8006d4 <xNextFreeByte+0x1>
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	82 0f       	add	r24, r18
    16ca:	93 1f       	adc	r25, r19
    16cc:	90 93 d4 06 	sts	0x06D4, r25	; 0x8006d4 <xNextFreeByte+0x1>
    16d0:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    16d4:	0e 94 32 14 	call	0x2864	; 0x2864 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	08 95       	ret

000016ea <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <vPortFree+0x6>
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	9a 83       	std	Y+2, r25	; 0x02
    16f6:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    16f8:	00 00       	nop
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	08 95       	ret

00001704 <_serial_tx_int_on>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	00 d0       	rcall	.+0      	; 0x170a <_serial_tx_int_on+0x6>
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	9a 83       	std	Y+2, r25	; 0x02
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	05 97       	sbiw	r24, 0x05	; 5
    1718:	29 81       	ldd	r18, Y+1	; 0x01
    171a:	3a 81       	ldd	r19, Y+2	; 0x02
    171c:	25 50       	subi	r18, 0x05	; 5
    171e:	31 09       	sbc	r19, r1
    1720:	f9 01       	movw	r30, r18
    1722:	20 81       	ld	r18, Z
    1724:	20 62       	ori	r18, 0x20	; 32
    1726:	fc 01       	movw	r30, r24
    1728:	20 83       	st	Z, r18
    172a:	00 00       	nop
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	08 95       	ret

00001736 <serial_new_instance>:
    1736:	8f 92       	push	r8
    1738:	9f 92       	push	r9
    173a:	af 92       	push	r10
    173c:	bf 92       	push	r11
    173e:	cf 92       	push	r12
    1740:	df 92       	push	r13
    1742:	ef 92       	push	r14
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	61 97       	sbiw	r28, 0x11	; 17
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	8c 83       	std	Y+4, r24	; 0x04
    175e:	4d 83       	std	Y+5, r20	; 0x05
    1760:	5e 83       	std	Y+6, r21	; 0x06
    1762:	6f 83       	std	Y+7, r22	; 0x07
    1764:	78 87       	std	Y+8, r23	; 0x08
    1766:	29 87       	std	Y+9, r18	; 0x09
    1768:	0a 87       	std	Y+10, r16	; 0x0a
    176a:	eb 86       	std	Y+11, r14	; 0x0b
    176c:	dd 86       	std	Y+13, r13	; 0x0d
    176e:	cc 86       	std	Y+12, r12	; 0x0c
    1770:	bf 86       	std	Y+15, r11	; 0x0f
    1772:	ae 86       	std	Y+14, r10	; 0x0e
    1774:	99 8a       	std	Y+17, r9	; 0x11
    1776:	88 8a       	std	Y+16, r8	; 0x10
    1778:	88 e0       	ldi	r24, 0x08	; 8
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 cf 1c 	call	0x399e	; 0x399e <malloc>
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	89 52       	subi	r24, 0x29	; 41
    1790:	99 4f       	sbci	r25, 0xF9	; 249
    1792:	29 81       	ldd	r18, Y+1	; 0x01
    1794:	3a 81       	ldd	r19, Y+2	; 0x02
    1796:	fc 01       	movw	r30, r24
    1798:	31 83       	std	Z+1, r19	; 0x01
    179a:	20 83       	st	Z, r18
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	88 2f       	mov	r24, r24
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	8a 5f       	subi	r24, 0xFA	; 250
    17a8:	9e 4f       	sbci	r25, 0xFE	; 254
    17aa:	fc 01       	movw	r30, r24
    17ac:	20 81       	ld	r18, Z
    17ae:	31 81       	ldd	r19, Z+1	; 0x01
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	fc 01       	movw	r30, r24
    17b6:	31 83       	std	Z+1, r19	; 0x01
    17b8:	20 83       	st	Z, r18
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	2e 85       	ldd	r18, Y+14	; 0x0e
    17c0:	3f 85       	ldd	r19, Y+15	; 0x0f
    17c2:	fc 01       	movw	r30, r24
    17c4:	33 83       	std	Z+3, r19	; 0x03
    17c6:	22 83       	std	Z+2, r18	; 0x02
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	9a 81       	ldd	r25, Y+2	; 0x02
    17cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    17ce:	3d 85       	ldd	r19, Y+13	; 0x0d
    17d0:	fc 01       	movw	r30, r24
    17d2:	35 83       	std	Z+5, r19	; 0x05
    17d4:	24 83       	std	Z+4, r18	; 0x04
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	28 89       	ldd	r18, Y+16	; 0x10
    17dc:	39 89       	ldd	r19, Y+17	; 0x11
    17de:	fc 01       	movw	r30, r24
    17e0:	37 83       	std	Z+7, r19	; 0x07
    17e2:	26 83       	std	Z+6, r18	; 0x06
    17e4:	8f e5       	ldi	r24, 0x5F	; 95
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	fc 01       	movw	r30, r24
    17ea:	80 81       	ld	r24, Z
    17ec:	8b 83       	std	Y+3, r24	; 0x03
    17ee:	f8 94       	cli
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	9a 81       	ldd	r25, Y+2	; 0x02
    17f4:	fc 01       	movw	r30, r24
    17f6:	80 81       	ld	r24, Z
    17f8:	91 81       	ldd	r25, Z+1	; 0x01
    17fa:	06 97       	sbiw	r24, 0x06	; 6
    17fc:	29 81       	ldd	r18, Y+1	; 0x01
    17fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1800:	f9 01       	movw	r30, r18
    1802:	20 81       	ld	r18, Z
    1804:	31 81       	ldd	r19, Z+1	; 0x01
    1806:	26 50       	subi	r18, 0x06	; 6
    1808:	31 09       	sbc	r19, r1
    180a:	f9 01       	movw	r30, r18
    180c:	20 81       	ld	r18, Z
    180e:	22 60       	ori	r18, 0x02	; 2
    1810:	fc 01       	movw	r30, r24
    1812:	20 83       	st	Z, r18
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	fc 01       	movw	r30, r24
    181a:	80 81       	ld	r24, Z
    181c:	91 81       	ldd	r25, Z+1	; 0x01
    181e:	8c 01       	movw	r16, r24
    1820:	02 50       	subi	r16, 0x02	; 2
    1822:	11 09       	sbc	r17, r1
    1824:	8d 81       	ldd	r24, Y+5	; 0x05
    1826:	9e 81       	ldd	r25, Y+6	; 0x06
    1828:	af 81       	ldd	r26, Y+7	; 0x07
    182a:	b8 85       	ldd	r27, Y+8	; 0x08
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	aa 1f       	adc	r26, r26
    1832:	bb 1f       	adc	r27, r27
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	aa 1f       	adc	r26, r26
    183a:	bb 1f       	adc	r27, r27
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	aa 1f       	adc	r26, r26
    1842:	bb 1f       	adc	r27, r27
    1844:	9c 01       	movw	r18, r24
    1846:	ad 01       	movw	r20, r26
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a1 ee       	ldi	r26, 0xE1	; 225
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	0e 94 ad 1c 	call	0x395a	; 0x395a <__udivmodsi4>
    1858:	da 01       	movw	r26, r20
    185a:	c9 01       	movw	r24, r18
    185c:	81 50       	subi	r24, 0x01	; 1
    185e:	f8 01       	movw	r30, r16
    1860:	80 83       	st	Z, r24
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	fc 01       	movw	r30, r24
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	05 97       	sbiw	r24, 0x05	; 5
    186e:	28 e9       	ldi	r18, 0x98	; 152
    1870:	fc 01       	movw	r30, r24
    1872:	20 83       	st	Z, r18
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	9a 81       	ldd	r25, Y+2	; 0x02
    1878:	fc 01       	movw	r30, r24
    187a:	80 81       	ld	r24, Z
    187c:	91 81       	ldd	r25, Z+1	; 0x01
    187e:	04 97       	sbiw	r24, 0x04	; 4
    1880:	26 e0       	ldi	r18, 0x06	; 6
    1882:	fc 01       	movw	r30, r24
    1884:	20 83       	st	Z, r18
    1886:	8f e5       	ldi	r24, 0x5F	; 95
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	2b 81       	ldd	r18, Y+3	; 0x03
    188c:	fc 01       	movw	r30, r24
    188e:	20 83       	st	Z, r18
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	61 96       	adiw	r28, 0x11	; 17
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	ef 90       	pop	r14
    18aa:	df 90       	pop	r13
    18ac:	cf 90       	pop	r12
    18ae:	bf 90       	pop	r11
    18b0:	af 90       	pop	r10
    18b2:	9f 90       	pop	r9
    18b4:	8f 90       	pop	r8
    18b6:	08 95       	ret

000018b8 <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	00 d0       	rcall	.+0      	; 0x18be <serial_send_bytes+0x6>
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <serial_send_bytes+0x8>
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <serial_send_bytes+0xa>
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	9b 83       	std	Y+3, r25	; 0x03
    18c8:	8a 83       	std	Y+2, r24	; 0x02
    18ca:	7d 83       	std	Y+5, r23	; 0x05
    18cc:	6c 83       	std	Y+4, r22	; 0x04
    18ce:	4e 83       	std	Y+6, r20	; 0x06
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	9b 81       	ldd	r25, Y+3	; 0x03
    18d4:	fc 01       	movw	r30, r24
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	89 2b       	or	r24, r25
    18dc:	a9 f0       	breq	.+42     	; 0x1908 <serial_send_bytes+0x50>
    18de:	8e 81       	ldd	r24, Y+6	; 0x06
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	9b 81       	ldd	r25, Y+3	; 0x03
    18e8:	fc 01       	movw	r30, r24
    18ea:	82 81       	ldd	r24, Z+2	; 0x02
    18ec:	93 81       	ldd	r25, Z+3	; 0x03
    18ee:	fc 01       	movw	r30, r24
    18f0:	82 a1       	ldd	r24, Z+34	; 0x22
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	40 e2       	ldi	r20, 0x20	; 32
    18f8:	50 e0       	ldi	r21, 0x00	; 0
    18fa:	ba 01       	movw	r22, r20
    18fc:	68 1b       	sub	r22, r24
    18fe:	79 0b       	sbc	r23, r25
    1900:	cb 01       	movw	r24, r22
    1902:	82 17       	cp	r24, r18
    1904:	93 07       	cpc	r25, r19
    1906:	54 f0       	brlt	.+20     	; 0x191c <serial_send_bytes+0x64>
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	9b 81       	ldd	r25, Y+3	; 0x03
    190c:	fc 01       	movw	r30, r24
    190e:	82 81       	ldd	r24, Z+2	; 0x02
    1910:	93 81       	ldd	r25, Z+3	; 0x03
    1912:	89 2b       	or	r24, r25
    1914:	29 f4       	brne	.+10     	; 0x1920 <serial_send_bytes+0x68>
    1916:	8e 81       	ldd	r24, Y+6	; 0x06
    1918:	82 30       	cpi	r24, 0x02	; 2
    191a:	10 f0       	brcs	.+4      	; 0x1920 <serial_send_bytes+0x68>
		return BUFFER_FULL;
    191c:	82 e0       	ldi	r24, 0x02	; 2
    191e:	22 c0       	rjmp	.+68     	; 0x1964 <serial_send_bytes+0xac>
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    1920:	19 82       	std	Y+1, r1	; 0x01
    1922:	14 c0       	rjmp	.+40     	; 0x194c <serial_send_bytes+0x94>
		buffer_put_item(handle->_tx_buf, buf[i]);
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	2c 81       	ldd	r18, Y+4	; 0x04
    192c:	3d 81       	ldd	r19, Y+5	; 0x05
    192e:	82 0f       	add	r24, r18
    1930:	93 1f       	adc	r25, r19
    1932:	fc 01       	movw	r30, r24
    1934:	20 81       	ld	r18, Z
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	9b 81       	ldd	r25, Y+3	; 0x03
    193a:	fc 01       	movw	r30, r24
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	93 81       	ldd	r25, Z+3	; 0x03
    1940:	62 2f       	mov	r22, r18
    1942:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	8f 5f       	subi	r24, 0xFF	; 255
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	99 81       	ldd	r25, Y+1	; 0x01
    194e:	8e 81       	ldd	r24, Y+6	; 0x06
    1950:	98 17       	cp	r25, r24
    1952:	40 f3       	brcs	.-48     	; 0x1924 <serial_send_bytes+0x6c>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	9b 81       	ldd	r25, Y+3	; 0x03
    1958:	fc 01       	movw	r30, r24
    195a:	80 81       	ld	r24, Z
    195c:	91 81       	ldd	r25, Z+1	; 0x01
    195e:	0e 94 82 0b 	call	0x1704	; 0x1704 <_serial_tx_int_on>
	return BUFFER_OK;
    1962:	80 e0       	ldi	r24, 0x00	; 0
}
    1964:	26 96       	adiw	r28, 0x06	; 6
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	08 95       	ret

00001976 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    1976:	1f 92       	push	r1
    1978:	0f 92       	push	r0
    197a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    197e:	0f 92       	push	r0
    1980:	11 24       	eor	r1, r1
    1982:	2f 93       	push	r18
    1984:	3f 93       	push	r19
    1986:	4f 93       	push	r20
    1988:	5f 93       	push	r21
    198a:	6f 93       	push	r22
    198c:	7f 93       	push	r23
    198e:	8f 93       	push	r24
    1990:	9f 93       	push	r25
    1992:	af 93       	push	r26
    1994:	bf 93       	push	r27
    1996:	ef 93       	push	r30
    1998:	ff 93       	push	r31
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	1f 92       	push	r1
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    19a4:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <_ser_handle>
    19a8:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <_ser_handle+0x1>
    19ac:	89 2b       	or	r24, r25
    19ae:	31 f1       	breq	.+76     	; 0x19fc <__vector_20+0x86>
		item = UDR0;
    19b0:	86 ec       	ldi	r24, 0xC6	; 198
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	fc 01       	movw	r30, r24
    19b6:	80 81       	ld	r24, Z
    19b8:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    19ba:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <_ser_handle>
    19be:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <_ser_handle+0x1>
    19c2:	fc 01       	movw	r30, r24
    19c4:	84 81       	ldd	r24, Z+4	; 0x04
    19c6:	95 81       	ldd	r25, Z+5	; 0x05
    19c8:	69 81       	ldd	r22, Y+1	; 0x01
    19ca:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    19ce:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <_ser_handle>
    19d2:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <_ser_handle+0x1>
    19d6:	fc 01       	movw	r30, r24
    19d8:	86 81       	ldd	r24, Z+6	; 0x06
    19da:	97 81       	ldd	r25, Z+7	; 0x07
    19dc:	89 2b       	or	r24, r25
    19de:	71 f0       	breq	.+28     	; 0x19fc <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    19e0:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <_ser_handle>
    19e4:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <_ser_handle+0x1>
    19e8:	fc 01       	movw	r30, r24
    19ea:	26 81       	ldd	r18, Z+6	; 0x06
    19ec:	37 81       	ldd	r19, Z+7	; 0x07
    19ee:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <_ser_handle>
    19f2:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <_ser_handle+0x1>
    19f6:	69 81       	ldd	r22, Y+1	; 0x01
    19f8:	f9 01       	movw	r30, r18
    19fa:	09 95       	icall
		}
	}
}
    19fc:	00 00       	nop
    19fe:	0f 90       	pop	r0
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	ff 91       	pop	r31
    1a06:	ef 91       	pop	r30
    1a08:	bf 91       	pop	r27
    1a0a:	af 91       	pop	r26
    1a0c:	9f 91       	pop	r25
    1a0e:	8f 91       	pop	r24
    1a10:	7f 91       	pop	r23
    1a12:	6f 91       	pop	r22
    1a14:	5f 91       	pop	r21
    1a16:	4f 91       	pop	r20
    1a18:	3f 91       	pop	r19
    1a1a:	2f 91       	pop	r18
    1a1c:	0f 90       	pop	r0
    1a1e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a22:	0f 90       	pop	r0
    1a24:	1f 90       	pop	r1
    1a26:	18 95       	reti

00001a28 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    1a28:	1f 92       	push	r1
    1a2a:	0f 92       	push	r0
    1a2c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a30:	0f 92       	push	r0
    1a32:	11 24       	eor	r1, r1
    1a34:	2f 93       	push	r18
    1a36:	3f 93       	push	r19
    1a38:	4f 93       	push	r20
    1a3a:	5f 93       	push	r21
    1a3c:	6f 93       	push	r22
    1a3e:	7f 93       	push	r23
    1a40:	8f 93       	push	r24
    1a42:	9f 93       	push	r25
    1a44:	af 93       	push	r26
    1a46:	bf 93       	push	r27
    1a48:	ef 93       	push	r30
    1a4a:	ff 93       	push	r31
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	1f 92       	push	r1
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1a56:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <_ser_handle>
    1a5a:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <_ser_handle+0x1>
    1a5e:	89 2b       	or	r24, r25
    1a60:	f9 f0       	breq	.+62     	; 0x1aa0 <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    1a62:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <_ser_handle>
    1a66:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <_ser_handle+0x1>
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	9e 01       	movw	r18, r28
    1a72:	2f 5f       	subi	r18, 0xFF	; 255
    1a74:	3f 4f       	sbci	r19, 0xFF	; 255
    1a76:	b9 01       	movw	r22, r18
    1a78:	0e 94 33 06 	call	0xc66	; 0xc66 <buffer_get_item>
    1a7c:	88 23       	and	r24, r24
    1a7e:	31 f4       	brne	.+12     	; 0x1a8c <__vector_21+0x64>
			UDR0 = item;
    1a80:	86 ec       	ldi	r24, 0xC6	; 198
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	29 81       	ldd	r18, Y+1	; 0x01
    1a86:	fc 01       	movw	r30, r24
    1a88:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    1a8a:	13 c0       	rjmp	.+38     	; 0x1ab2 <__vector_21+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
			UDR0 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    1a8c:	81 ec       	ldi	r24, 0xC1	; 193
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	21 ec       	ldi	r18, 0xC1	; 193
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	f9 01       	movw	r30, r18
    1a96:	20 81       	ld	r18, Z
    1a98:	2f 7d       	andi	r18, 0xDF	; 223
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    1a9e:	09 c0       	rjmp	.+18     	; 0x1ab2 <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    1aa0:	81 ec       	ldi	r24, 0xC1	; 193
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	21 ec       	ldi	r18, 0xC1	; 193
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	f9 01       	movw	r30, r18
    1aaa:	20 81       	ld	r18, Z
    1aac:	2f 7d       	andi	r18, 0xDF	; 223
    1aae:	fc 01       	movw	r30, r24
    1ab0:	20 83       	st	Z, r18
	}
}
    1ab2:	00 00       	nop
    1ab4:	0f 90       	pop	r0
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	ff 91       	pop	r31
    1abc:	ef 91       	pop	r30
    1abe:	bf 91       	pop	r27
    1ac0:	af 91       	pop	r26
    1ac2:	9f 91       	pop	r25
    1ac4:	8f 91       	pop	r24
    1ac6:	7f 91       	pop	r23
    1ac8:	6f 91       	pop	r22
    1aca:	5f 91       	pop	r21
    1acc:	4f 91       	pop	r20
    1ace:	3f 91       	pop	r19
    1ad0:	2f 91       	pop	r18
    1ad2:	0f 90       	pop	r0
    1ad4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1ad8:	0f 90       	pop	r0
    1ada:	1f 90       	pop	r1
    1adc:	18 95       	reti

00001ade <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    1ade:	1f 92       	push	r1
    1ae0:	0f 92       	push	r0
    1ae2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1ae6:	0f 92       	push	r0
    1ae8:	11 24       	eor	r1, r1
    1aea:	2f 93       	push	r18
    1aec:	3f 93       	push	r19
    1aee:	4f 93       	push	r20
    1af0:	5f 93       	push	r21
    1af2:	6f 93       	push	r22
    1af4:	7f 93       	push	r23
    1af6:	8f 93       	push	r24
    1af8:	9f 93       	push	r25
    1afa:	af 93       	push	r26
    1afc:	bf 93       	push	r27
    1afe:	ef 93       	push	r30
    1b00:	ff 93       	push	r31
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	1f 92       	push	r1
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1b0c:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <_ser_handle+0x2>
    1b10:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <_ser_handle+0x3>
    1b14:	89 2b       	or	r24, r25
    1b16:	31 f1       	breq	.+76     	; 0x1b64 <__vector_28+0x86>
		item = UDR1;
    1b18:	8e ec       	ldi	r24, 0xCE	; 206
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	80 81       	ld	r24, Z
    1b20:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    1b22:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <_ser_handle+0x2>
    1b26:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <_ser_handle+0x3>
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	84 81       	ldd	r24, Z+4	; 0x04
    1b2e:	95 81       	ldd	r25, Z+5	; 0x05
    1b30:	69 81       	ldd	r22, Y+1	; 0x01
    1b32:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    1b36:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <_ser_handle+0x2>
    1b3a:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <_ser_handle+0x3>
    1b3e:	fc 01       	movw	r30, r24
    1b40:	86 81       	ldd	r24, Z+6	; 0x06
    1b42:	97 81       	ldd	r25, Z+7	; 0x07
    1b44:	89 2b       	or	r24, r25
    1b46:	71 f0       	breq	.+28     	; 0x1b64 <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    1b48:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <_ser_handle+0x2>
    1b4c:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <_ser_handle+0x3>
    1b50:	fc 01       	movw	r30, r24
    1b52:	26 81       	ldd	r18, Z+6	; 0x06
    1b54:	37 81       	ldd	r19, Z+7	; 0x07
    1b56:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <_ser_handle+0x2>
    1b5a:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <_ser_handle+0x3>
    1b5e:	69 81       	ldd	r22, Y+1	; 0x01
    1b60:	f9 01       	movw	r30, r18
    1b62:	09 95       	icall
		}
	}
}
    1b64:	00 00       	nop
    1b66:	0f 90       	pop	r0
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
    1b6c:	ff 91       	pop	r31
    1b6e:	ef 91       	pop	r30
    1b70:	bf 91       	pop	r27
    1b72:	af 91       	pop	r26
    1b74:	9f 91       	pop	r25
    1b76:	8f 91       	pop	r24
    1b78:	7f 91       	pop	r23
    1b7a:	6f 91       	pop	r22
    1b7c:	5f 91       	pop	r21
    1b7e:	4f 91       	pop	r20
    1b80:	3f 91       	pop	r19
    1b82:	2f 91       	pop	r18
    1b84:	0f 90       	pop	r0
    1b86:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b8a:	0f 90       	pop	r0
    1b8c:	1f 90       	pop	r1
    1b8e:	18 95       	reti

00001b90 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    1b90:	1f 92       	push	r1
    1b92:	0f 92       	push	r0
    1b94:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b98:	0f 92       	push	r0
    1b9a:	11 24       	eor	r1, r1
    1b9c:	2f 93       	push	r18
    1b9e:	3f 93       	push	r19
    1ba0:	4f 93       	push	r20
    1ba2:	5f 93       	push	r21
    1ba4:	6f 93       	push	r22
    1ba6:	7f 93       	push	r23
    1ba8:	8f 93       	push	r24
    1baa:	9f 93       	push	r25
    1bac:	af 93       	push	r26
    1bae:	bf 93       	push	r27
    1bb0:	ef 93       	push	r30
    1bb2:	ff 93       	push	r31
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	1f 92       	push	r1
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1bbe:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <_ser_handle+0x2>
    1bc2:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <_ser_handle+0x3>
    1bc6:	89 2b       	or	r24, r25
    1bc8:	f9 f0       	breq	.+62     	; 0x1c08 <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1bca:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <_ser_handle+0x2>
    1bce:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <_ser_handle+0x3>
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	82 81       	ldd	r24, Z+2	; 0x02
    1bd6:	93 81       	ldd	r25, Z+3	; 0x03
    1bd8:	9e 01       	movw	r18, r28
    1bda:	2f 5f       	subi	r18, 0xFF	; 255
    1bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bde:	b9 01       	movw	r22, r18
    1be0:	0e 94 33 06 	call	0xc66	; 0xc66 <buffer_get_item>
    1be4:	88 23       	and	r24, r24
    1be6:	31 f4       	brne	.+12     	; 0x1bf4 <__vector_29+0x64>
			UDR1 = item;
    1be8:	8e ec       	ldi	r24, 0xCE	; 206
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	29 81       	ldd	r18, Y+1	; 0x01
    1bee:	fc 01       	movw	r30, r24
    1bf0:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    1bf2:	13 c0       	rjmp	.+38     	; 0x1c1a <__vector_29+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
			UDR1 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    1bf4:	89 ec       	ldi	r24, 0xC9	; 201
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	29 ec       	ldi	r18, 0xC9	; 201
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	f9 01       	movw	r30, r18
    1bfe:	20 81       	ld	r18, Z
    1c00:	2f 7d       	andi	r18, 0xDF	; 223
    1c02:	fc 01       	movw	r30, r24
    1c04:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    1c06:	09 c0       	rjmp	.+18     	; 0x1c1a <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    1c08:	89 ec       	ldi	r24, 0xC9	; 201
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	29 ec       	ldi	r18, 0xC9	; 201
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	f9 01       	movw	r30, r18
    1c12:	20 81       	ld	r18, Z
    1c14:	2f 7d       	andi	r18, 0xDF	; 223
    1c16:	fc 01       	movw	r30, r24
    1c18:	20 83       	st	Z, r18
	}
}
    1c1a:	00 00       	nop
    1c1c:	0f 90       	pop	r0
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	ff 91       	pop	r31
    1c24:	ef 91       	pop	r30
    1c26:	bf 91       	pop	r27
    1c28:	af 91       	pop	r26
    1c2a:	9f 91       	pop	r25
    1c2c:	8f 91       	pop	r24
    1c2e:	7f 91       	pop	r23
    1c30:	6f 91       	pop	r22
    1c32:	5f 91       	pop	r21
    1c34:	4f 91       	pop	r20
    1c36:	3f 91       	pop	r19
    1c38:	2f 91       	pop	r18
    1c3a:	0f 90       	pop	r0
    1c3c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c40:	0f 90       	pop	r0
    1c42:	1f 90       	pop	r1
    1c44:	18 95       	reti

00001c46 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <xQueueGenericReset+0x6>
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <xQueueGenericReset+0x8>
    1c4e:	1f 92       	push	r1
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	9c 83       	std	Y+4, r25	; 0x04
    1c56:	8b 83       	std	Y+3, r24	; 0x03
    1c58:	6d 83       	std	Y+5, r22	; 0x05
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	9a 83       	std	Y+2, r25	; 0x02
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	0f 92       	push	r0
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	80 81       	ld	r24, Z
    1c70:	91 81       	ldd	r25, Z+1	; 0x01
    1c72:	29 81       	ldd	r18, Y+1	; 0x01
    1c74:	3a 81       	ldd	r19, Y+2	; 0x02
    1c76:	f9 01       	movw	r30, r18
    1c78:	23 8d       	ldd	r18, Z+27	; 0x1b
    1c7a:	42 2f       	mov	r20, r18
    1c7c:	50 e0       	ldi	r21, 0x00	; 0
    1c7e:	29 81       	ldd	r18, Y+1	; 0x01
    1c80:	3a 81       	ldd	r19, Y+2	; 0x02
    1c82:	f9 01       	movw	r30, r18
    1c84:	24 8d       	ldd	r18, Z+28	; 0x1c
    1c86:	22 2f       	mov	r18, r18
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	42 9f       	mul	r20, r18
    1c8c:	b0 01       	movw	r22, r0
    1c8e:	43 9f       	mul	r20, r19
    1c90:	70 0d       	add	r23, r0
    1c92:	52 9f       	mul	r21, r18
    1c94:	70 0d       	add	r23, r0
    1c96:	11 24       	eor	r1, r1
    1c98:	9b 01       	movw	r18, r22
    1c9a:	28 0f       	add	r18, r24
    1c9c:	39 1f       	adc	r19, r25
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	33 83       	std	Z+3, r19	; 0x03
    1ca6:	22 83       	std	Z+2, r18	; 0x02
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	fc 01       	movw	r30, r24
    1cae:	12 8e       	std	Z+26, r1	; 0x1a
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	20 81       	ld	r18, Z
    1cb8:	31 81       	ldd	r19, Z+1	; 0x01
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	35 83       	std	Z+5, r19	; 0x05
    1cc2:	24 83       	std	Z+4, r18	; 0x04
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	fc 01       	movw	r30, r24
    1cca:	80 81       	ld	r24, Z
    1ccc:	91 81       	ldd	r25, Z+1	; 0x01
    1cce:	29 81       	ldd	r18, Y+1	; 0x01
    1cd0:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	23 8d       	ldd	r18, Z+27	; 0x1b
    1cd6:	22 2f       	mov	r18, r18
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	a9 01       	movw	r20, r18
    1cdc:	41 50       	subi	r20, 0x01	; 1
    1cde:	51 09       	sbc	r21, r1
    1ce0:	29 81       	ldd	r18, Y+1	; 0x01
    1ce2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ce4:	f9 01       	movw	r30, r18
    1ce6:	24 8d       	ldd	r18, Z+28	; 0x1c
    1ce8:	22 2f       	mov	r18, r18
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	42 9f       	mul	r20, r18
    1cee:	b0 01       	movw	r22, r0
    1cf0:	43 9f       	mul	r20, r19
    1cf2:	70 0d       	add	r23, r0
    1cf4:	52 9f       	mul	r21, r18
    1cf6:	70 0d       	add	r23, r0
    1cf8:	11 24       	eor	r1, r1
    1cfa:	9b 01       	movw	r18, r22
    1cfc:	28 0f       	add	r18, r24
    1cfe:	39 1f       	adc	r19, r25
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	9a 81       	ldd	r25, Y+2	; 0x02
    1d04:	fc 01       	movw	r30, r24
    1d06:	37 83       	std	Z+7, r19	; 0x07
    1d08:	26 83       	std	Z+6, r18	; 0x06
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0e:	2f ef       	ldi	r18, 0xFF	; 255
    1d10:	fc 01       	movw	r30, r24
    1d12:	25 8f       	std	Z+29, r18	; 0x1d
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	9a 81       	ldd	r25, Y+2	; 0x02
    1d18:	2f ef       	ldi	r18, 0xFF	; 255
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	26 8f       	std	Z+30, r18	; 0x1e
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	88 23       	and	r24, r24
    1d22:	81 f4       	brne	.+32     	; 0x1d44 <xQueueGenericReset+0xfe>
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	9a 81       	ldd	r25, Y+2	; 0x02
    1d28:	fc 01       	movw	r30, r24
    1d2a:	80 85       	ldd	r24, Z+8	; 0x08
    1d2c:	88 23       	and	r24, r24
    1d2e:	a1 f0       	breq	.+40     	; 0x1d58 <xQueueGenericReset+0x112>
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	9a 81       	ldd	r25, Y+2	; 0x02
    1d34:	08 96       	adiw	r24, 0x08	; 8
    1d36:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <xTaskRemoveFromEventList>
    1d3a:	88 23       	and	r24, r24
    1d3c:	69 f0       	breq	.+26     	; 0x1d58 <xQueueGenericReset+0x112>
    1d3e:	0e 94 02 0a 	call	0x1404	; 0x1404 <vPortYield>
    1d42:	0a c0       	rjmp	.+20     	; 0x1d58 <xQueueGenericReset+0x112>
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	08 96       	adiw	r24, 0x08	; 8
    1d4a:	0e 94 be 06 	call	0xd7c	; 0xd7c <vListInitialise>
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	9a 81       	ldd	r25, Y+2	; 0x02
    1d52:	41 96       	adiw	r24, 0x11	; 17
    1d54:	0e 94 be 06 	call	0xd7c	; 0xd7c <vListInitialise>
    1d58:	0f 90       	pop	r0
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	08 95       	ret

00001d6e <xQueueGenericCreate>:
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	29 97       	sbiw	r28, 0x09	; 9
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	8f 83       	std	Y+7, r24	; 0x07
    1d88:	68 87       	std	Y+8, r22	; 0x08
    1d8a:	49 87       	std	Y+9, r20	; 0x09
    1d8c:	88 85       	ldd	r24, Y+8	; 0x08
    1d8e:	88 23       	and	r24, r24
    1d90:	19 f4       	brne	.+6      	; 0x1d98 <xQueueGenericCreate+0x2a>
    1d92:	1a 82       	std	Y+2, r1	; 0x02
    1d94:	19 82       	std	Y+1, r1	; 0x01
    1d96:	0f c0       	rjmp	.+30     	; 0x1db6 <xQueueGenericCreate+0x48>
    1d98:	8f 81       	ldd	r24, Y+7	; 0x07
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	88 85       	ldd	r24, Y+8	; 0x08
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	42 9f       	mul	r20, r18
    1da6:	c0 01       	movw	r24, r0
    1da8:	43 9f       	mul	r20, r19
    1daa:	90 0d       	add	r25, r0
    1dac:	52 9f       	mul	r21, r18
    1dae:	90 0d       	add	r25, r0
    1db0:	11 24       	eor	r1, r1
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	81 96       	adiw	r24, 0x21	; 33
    1dbc:	0e 94 20 0b 	call	0x1640	; 0x1640 <pvPortMalloc>
    1dc0:	9c 83       	std	Y+4, r25	; 0x04
    1dc2:	8b 83       	std	Y+3, r24	; 0x03
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	89 2b       	or	r24, r25
    1dca:	81 f0       	breq	.+32     	; 0x1dec <xQueueGenericCreate+0x7e>
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd0:	81 96       	adiw	r24, 0x21	; 33
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
    1dd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dda:	8d 81       	ldd	r24, Y+5	; 0x05
    1ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dde:	89 01       	movw	r16, r18
    1de0:	29 85       	ldd	r18, Y+9	; 0x09
    1de2:	ac 01       	movw	r20, r24
    1de4:	68 85       	ldd	r22, Y+8	; 0x08
    1de6:	8f 81       	ldd	r24, Y+7	; 0x07
    1de8:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <prvInitialiseNewQueue>
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9c 81       	ldd	r25, Y+4	; 0x04
    1df0:	29 96       	adiw	r28, 0x09	; 9
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	08 95       	ret

00001e06 <prvInitialiseNewQueue>:
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	27 97       	sbiw	r28, 0x07	; 7
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	6a 83       	std	Y+2, r22	; 0x02
    1e22:	5c 83       	std	Y+4, r21	; 0x04
    1e24:	4b 83       	std	Y+3, r20	; 0x03
    1e26:	2d 83       	std	Y+5, r18	; 0x05
    1e28:	1f 83       	std	Y+7, r17	; 0x07
    1e2a:	0e 83       	std	Y+6, r16	; 0x06
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	88 23       	and	r24, r24
    1e30:	41 f4       	brne	.+16     	; 0x1e42 <prvInitialiseNewQueue+0x3c>
    1e32:	8e 81       	ldd	r24, Y+6	; 0x06
    1e34:	9f 81       	ldd	r25, Y+7	; 0x07
    1e36:	2e 81       	ldd	r18, Y+6	; 0x06
    1e38:	3f 81       	ldd	r19, Y+7	; 0x07
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	31 83       	std	Z+1, r19	; 0x01
    1e3e:	20 83       	st	Z, r18
    1e40:	07 c0       	rjmp	.+14     	; 0x1e50 <prvInitialiseNewQueue+0x4a>
    1e42:	8e 81       	ldd	r24, Y+6	; 0x06
    1e44:	9f 81       	ldd	r25, Y+7	; 0x07
    1e46:	2b 81       	ldd	r18, Y+3	; 0x03
    1e48:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	31 83       	std	Z+1, r19	; 0x01
    1e4e:	20 83       	st	Z, r18
    1e50:	8e 81       	ldd	r24, Y+6	; 0x06
    1e52:	9f 81       	ldd	r25, Y+7	; 0x07
    1e54:	29 81       	ldd	r18, Y+1	; 0x01
    1e56:	fc 01       	movw	r30, r24
    1e58:	23 8f       	std	Z+27, r18	; 0x1b
    1e5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e5e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e60:	fc 01       	movw	r30, r24
    1e62:	24 8f       	std	Z+28, r18	; 0x1c
    1e64:	8e 81       	ldd	r24, Y+6	; 0x06
    1e66:	9f 81       	ldd	r25, Y+7	; 0x07
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <xQueueGenericReset>
    1e6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e70:	9f 81       	ldd	r25, Y+7	; 0x07
    1e72:	2d 81       	ldd	r18, Y+5	; 0x05
    1e74:	fc 01       	movw	r30, r24
    1e76:	20 a3       	std	Z+32, r18	; 0x20
    1e78:	00 00       	nop
    1e7a:	27 96       	adiw	r28, 0x07	; 7
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	0f 91       	pop	r16
    1e8e:	08 95       	ret

00001e90 <prvInitialiseMutex>:
    1e90:	cf 93       	push	r28
    1e92:	df 93       	push	r29
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <prvInitialiseMutex+0x6>
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	9a 83       	std	Y+2, r25	; 0x02
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea2:	89 2b       	or	r24, r25
    1ea4:	b9 f0       	breq	.+46     	; 0x1ed4 <prvInitialiseMutex+0x44>
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eaa:	fc 01       	movw	r30, r24
    1eac:	13 82       	std	Z+3, r1	; 0x03
    1eae:	12 82       	std	Z+2, r1	; 0x02
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	11 82       	std	Z+1, r1	; 0x01
    1eb8:	10 82       	st	Z, r1
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	16 82       	std	Z+6, r1	; 0x06
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	40 e0       	ldi	r20, 0x00	; 0
    1eca:	50 e0       	ldi	r21, 0x00	; 0
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	70 e0       	ldi	r23, 0x00	; 0
    1ed0:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <xQueueGenericSend>
    1ed4:	00 00       	nop
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	08 95       	ret

00001ee0 <xQueueCreateMutex>:
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <xQueueCreateMutex+0x6>
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <xQueueCreateMutex+0x8>
    1ee8:	1f 92       	push	r1
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	8d 83       	std	Y+5, r24	; 0x05
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	1a 82       	std	Y+2, r1	; 0x02
    1ef6:	4d 81       	ldd	r20, Y+5	; 0x05
    1ef8:	6a 81       	ldd	r22, Y+2	; 0x02
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <xQueueGenericCreate>
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	9c 81       	ldd	r25, Y+4	; 0x04
    1f08:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <prvInitialiseMutex>
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	df 91       	pop	r29
    1f1c:	cf 91       	pop	r28
    1f1e:	08 95       	ret

00001f20 <xQueueGenericSend>:
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	2e 97       	sbiw	r28, 0x0e	; 14
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	99 87       	std	Y+9, r25	; 0x09
    1f36:	88 87       	std	Y+8, r24	; 0x08
    1f38:	7b 87       	std	Y+11, r23	; 0x0b
    1f3a:	6a 87       	std	Y+10, r22	; 0x0a
    1f3c:	5d 87       	std	Y+13, r21	; 0x0d
    1f3e:	4c 87       	std	Y+12, r20	; 0x0c
    1f40:	2e 87       	std	Y+14, r18	; 0x0e
    1f42:	19 82       	std	Y+1, r1	; 0x01
    1f44:	88 85       	ldd	r24, Y+8	; 0x08
    1f46:	99 85       	ldd	r25, Y+9	; 0x09
    1f48:	9b 83       	std	Y+3, r25	; 0x03
    1f4a:	8a 83       	std	Y+2, r24	; 0x02
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	0f 92       	push	r0
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	9b 81       	ldd	r25, Y+3	; 0x03
    1f56:	fc 01       	movw	r30, r24
    1f58:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5e:	fc 01       	movw	r30, r24
    1f60:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f62:	28 17       	cp	r18, r24
    1f64:	18 f0       	brcs	.+6      	; 0x1f6c <xQueueGenericSend+0x4c>
    1f66:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f68:	82 30       	cpi	r24, 0x02	; 2
    1f6a:	11 f5       	brne	.+68     	; 0x1fb0 <xQueueGenericSend+0x90>
    1f6c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f6e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	9b 81       	ldd	r25, Y+3	; 0x03
    1f74:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f76:	b9 01       	movw	r22, r18
    1f78:	0e 94 a0 10 	call	0x2140	; 0x2140 <prvCopyDataToQueue>
    1f7c:	8c 83       	std	Y+4, r24	; 0x04
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	9b 81       	ldd	r25, Y+3	; 0x03
    1f82:	fc 01       	movw	r30, r24
    1f84:	81 89       	ldd	r24, Z+17	; 0x11
    1f86:	88 23       	and	r24, r24
    1f88:	51 f0       	breq	.+20     	; 0x1f9e <xQueueGenericSend+0x7e>
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8e:	41 96       	adiw	r24, 0x11	; 17
    1f90:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <xTaskRemoveFromEventList>
    1f94:	88 23       	and	r24, r24
    1f96:	41 f0       	breq	.+16     	; 0x1fa8 <xQueueGenericSend+0x88>
    1f98:	0e 94 02 0a 	call	0x1404	; 0x1404 <vPortYield>
    1f9c:	05 c0       	rjmp	.+10     	; 0x1fa8 <xQueueGenericSend+0x88>
    1f9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa0:	88 23       	and	r24, r24
    1fa2:	11 f0       	breq	.+4      	; 0x1fa8 <xQueueGenericSend+0x88>
    1fa4:	0e 94 02 0a 	call	0x1404	; 0x1404 <vPortYield>
    1fa8:	0f 90       	pop	r0
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	60 c0       	rjmp	.+192    	; 0x2070 <xQueueGenericSend+0x150>
    1fb0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fb2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fb4:	89 2b       	or	r24, r25
    1fb6:	21 f4       	brne	.+8      	; 0x1fc0 <xQueueGenericSend+0xa0>
    1fb8:	0f 90       	pop	r0
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	58 c0       	rjmp	.+176    	; 0x2070 <xQueueGenericSend+0x150>
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	88 23       	and	r24, r24
    1fc4:	31 f4       	brne	.+12     	; 0x1fd2 <xQueueGenericSend+0xb2>
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	05 96       	adiw	r24, 0x05	; 5
    1fca:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <vTaskSetTimeOutState>
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	0f 90       	pop	r0
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	0e 94 25 14 	call	0x284a	; 0x284a <vTaskSuspendAll>
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	0f 92       	push	r0
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	85 8d       	ldd	r24, Z+29	; 0x1d
    1fe8:	8f 3f       	cpi	r24, 0xFF	; 255
    1fea:	21 f4       	brne	.+8      	; 0x1ff4 <xQueueGenericSend+0xd4>
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	15 8e       	std	Z+29, r1	; 0x1d
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ffc:	8f 3f       	cpi	r24, 0xFF	; 255
    1ffe:	21 f4       	brne	.+8      	; 0x2008 <xQueueGenericSend+0xe8>
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	9b 81       	ldd	r25, Y+3	; 0x03
    2004:	fc 01       	movw	r30, r24
    2006:	16 8e       	std	Z+30, r1	; 0x1e
    2008:	0f 90       	pop	r0
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	9e 01       	movw	r18, r28
    200e:	24 5f       	subi	r18, 0xF4	; 244
    2010:	3f 4f       	sbci	r19, 0xFF	; 255
    2012:	ce 01       	movw	r24, r28
    2014:	05 96       	adiw	r24, 0x05	; 5
    2016:	b9 01       	movw	r22, r18
    2018:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <xTaskCheckForTimeOut>
    201c:	88 23       	and	r24, r24
    201e:	09 f5       	brne	.+66     	; 0x2062 <xQueueGenericSend+0x142>
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	9b 81       	ldd	r25, Y+3	; 0x03
    2024:	0e 94 ce 11 	call	0x239c	; 0x239c <prvIsQueueFull>
    2028:	88 23       	and	r24, r24
    202a:	a1 f0       	breq	.+40     	; 0x2054 <xQueueGenericSend+0x134>
    202c:	2c 85       	ldd	r18, Y+12	; 0x0c
    202e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	9b 81       	ldd	r25, Y+3	; 0x03
    2034:	08 96       	adiw	r24, 0x08	; 8
    2036:	b9 01       	movw	r22, r18
    2038:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <vTaskPlaceOnEventList>
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	9b 81       	ldd	r25, Y+3	; 0x03
    2040:	0e 94 70 11 	call	0x22e0	; 0x22e0 <prvUnlockQueue>
    2044:	0e 94 32 14 	call	0x2864	; 0x2864 <xTaskResumeAll>
    2048:	88 23       	and	r24, r24
    204a:	09 f0       	breq	.+2      	; 0x204e <xQueueGenericSend+0x12e>
    204c:	7f cf       	rjmp	.-258    	; 0x1f4c <xQueueGenericSend+0x2c>
    204e:	0e 94 02 0a 	call	0x1404	; 0x1404 <vPortYield>
    2052:	7c cf       	rjmp	.-264    	; 0x1f4c <xQueueGenericSend+0x2c>
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	9b 81       	ldd	r25, Y+3	; 0x03
    2058:	0e 94 70 11 	call	0x22e0	; 0x22e0 <prvUnlockQueue>
    205c:	0e 94 32 14 	call	0x2864	; 0x2864 <xTaskResumeAll>
    2060:	75 cf       	rjmp	.-278    	; 0x1f4c <xQueueGenericSend+0x2c>
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	9b 81       	ldd	r25, Y+3	; 0x03
    2066:	0e 94 70 11 	call	0x22e0	; 0x22e0 <prvUnlockQueue>
    206a:	0e 94 32 14 	call	0x2864	; 0x2864 <xTaskResumeAll>
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	2e 96       	adiw	r28, 0x0e	; 14
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	08 95       	ret

00002082 <xQueueGenericSendFromISR>:
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	2c 97       	sbiw	r28, 0x0c	; 12
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	9f 83       	std	Y+7, r25	; 0x07
    2098:	8e 83       	std	Y+6, r24	; 0x06
    209a:	79 87       	std	Y+9, r23	; 0x09
    209c:	68 87       	std	Y+8, r22	; 0x08
    209e:	5b 87       	std	Y+11, r21	; 0x0b
    20a0:	4a 87       	std	Y+10, r20	; 0x0a
    20a2:	2c 87       	std	Y+12, r18	; 0x0c
    20a4:	8e 81       	ldd	r24, Y+6	; 0x06
    20a6:	9f 81       	ldd	r25, Y+7	; 0x07
    20a8:	9b 83       	std	Y+3, r25	; 0x03
    20aa:	8a 83       	std	Y+2, r24	; 0x02
    20ac:	1c 82       	std	Y+4, r1	; 0x04
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	9b 81       	ldd	r25, Y+3	; 0x03
    20b2:	fc 01       	movw	r30, r24
    20b4:	22 8d       	ldd	r18, Z+26	; 0x1a
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ba:	fc 01       	movw	r30, r24
    20bc:	83 8d       	ldd	r24, Z+27	; 0x1b
    20be:	28 17       	cp	r18, r24
    20c0:	18 f0       	brcs	.+6      	; 0x20c8 <xQueueGenericSendFromISR+0x46>
    20c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    20c4:	82 30       	cpi	r24, 0x02	; 2
    20c6:	89 f5       	brne	.+98     	; 0x212a <xQueueGenericSendFromISR+0xa8>
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	9b 81       	ldd	r25, Y+3	; 0x03
    20cc:	fc 01       	movw	r30, r24
    20ce:	86 8d       	ldd	r24, Z+30	; 0x1e
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	28 85       	ldd	r18, Y+8	; 0x08
    20d4:	39 85       	ldd	r19, Y+9	; 0x09
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	9b 81       	ldd	r25, Y+3	; 0x03
    20da:	4c 85       	ldd	r20, Y+12	; 0x0c
    20dc:	b9 01       	movw	r22, r18
    20de:	0e 94 a0 10 	call	0x2140	; 0x2140 <prvCopyDataToQueue>
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	8f 3f       	cpi	r24, 0xFF	; 255
    20e6:	b9 f4       	brne	.+46     	; 0x2116 <xQueueGenericSendFromISR+0x94>
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	9b 81       	ldd	r25, Y+3	; 0x03
    20ec:	fc 01       	movw	r30, r24
    20ee:	81 89       	ldd	r24, Z+17	; 0x11
    20f0:	88 23       	and	r24, r24
    20f2:	c1 f0       	breq	.+48     	; 0x2124 <xQueueGenericSendFromISR+0xa2>
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	9b 81       	ldd	r25, Y+3	; 0x03
    20f8:	41 96       	adiw	r24, 0x11	; 17
    20fa:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <xTaskRemoveFromEventList>
    20fe:	88 23       	and	r24, r24
    2100:	89 f0       	breq	.+34     	; 0x2124 <xQueueGenericSendFromISR+0xa2>
    2102:	8a 85       	ldd	r24, Y+10	; 0x0a
    2104:	9b 85       	ldd	r25, Y+11	; 0x0b
    2106:	89 2b       	or	r24, r25
    2108:	69 f0       	breq	.+26     	; 0x2124 <xQueueGenericSendFromISR+0xa2>
    210a:	8a 85       	ldd	r24, Y+10	; 0x0a
    210c:	9b 85       	ldd	r25, Y+11	; 0x0b
    210e:	21 e0       	ldi	r18, 0x01	; 1
    2110:	fc 01       	movw	r30, r24
    2112:	20 83       	st	Z, r18
    2114:	07 c0       	rjmp	.+14     	; 0x2124 <xQueueGenericSendFromISR+0xa2>
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	8f 5f       	subi	r24, 0xFF	; 255
    211a:	28 2f       	mov	r18, r24
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	9b 81       	ldd	r25, Y+3	; 0x03
    2120:	fc 01       	movw	r30, r24
    2122:	26 8f       	std	Z+30, r18	; 0x1e
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	01 c0       	rjmp	.+2      	; 0x212c <xQueueGenericSendFromISR+0xaa>
    212a:	19 82       	std	Y+1, r1	; 0x01
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	2c 96       	adiw	r28, 0x0c	; 12
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	08 95       	ret

00002140 <prvCopyDataToQueue>:
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	27 97       	sbiw	r28, 0x07	; 7
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	de bf       	out	0x3e, r29	; 62
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	cd bf       	out	0x3d, r28	; 61
    2154:	9c 83       	std	Y+4, r25	; 0x04
    2156:	8b 83       	std	Y+3, r24	; 0x03
    2158:	7e 83       	std	Y+6, r23	; 0x06
    215a:	6d 83       	std	Y+5, r22	; 0x05
    215c:	4f 83       	std	Y+7, r20	; 0x07
    215e:	19 82       	std	Y+1, r1	; 0x01
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	9c 81       	ldd	r25, Y+4	; 0x04
    2164:	fc 01       	movw	r30, r24
    2166:	82 8d       	ldd	r24, Z+26	; 0x1a
    2168:	8a 83       	std	Y+2, r24	; 0x02
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	9c 81       	ldd	r25, Y+4	; 0x04
    216e:	fc 01       	movw	r30, r24
    2170:	84 8d       	ldd	r24, Z+28	; 0x1c
    2172:	88 23       	and	r24, r24
    2174:	b1 f4       	brne	.+44     	; 0x21a2 <prvCopyDataToQueue+0x62>
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	9c 81       	ldd	r25, Y+4	; 0x04
    217a:	fc 01       	movw	r30, r24
    217c:	80 81       	ld	r24, Z
    217e:	91 81       	ldd	r25, Z+1	; 0x01
    2180:	89 2b       	or	r24, r25
    2182:	09 f0       	breq	.+2      	; 0x2186 <prvCopyDataToQueue+0x46>
    2184:	9c c0       	rjmp	.+312    	; 0x22be <prvCopyDataToQueue+0x17e>
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	9c 81       	ldd	r25, Y+4	; 0x04
    218a:	fc 01       	movw	r30, r24
    218c:	82 81       	ldd	r24, Z+2	; 0x02
    218e:	93 81       	ldd	r25, Z+3	; 0x03
    2190:	0e 94 33 18 	call	0x3066	; 0x3066 <xTaskPriorityDisinherit>
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	9c 81       	ldd	r25, Y+4	; 0x04
    219a:	fc 01       	movw	r30, r24
    219c:	13 82       	std	Z+3, r1	; 0x03
    219e:	12 82       	std	Z+2, r1	; 0x02
    21a0:	8e c0       	rjmp	.+284    	; 0x22be <prvCopyDataToQueue+0x17e>
    21a2:	8f 81       	ldd	r24, Y+7	; 0x07
    21a4:	88 23       	and	r24, r24
    21a6:	d9 f5       	brne	.+118    	; 0x221e <prvCopyDataToQueue+0xde>
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	fc 01       	movw	r30, r24
    21ae:	84 8d       	ldd	r24, Z+28	; 0x1c
    21b0:	48 2f       	mov	r20, r24
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	9c 81       	ldd	r25, Y+4	; 0x04
    21b8:	fc 01       	movw	r30, r24
    21ba:	84 81       	ldd	r24, Z+4	; 0x04
    21bc:	95 81       	ldd	r25, Z+5	; 0x05
    21be:	2d 81       	ldd	r18, Y+5	; 0x05
    21c0:	3e 81       	ldd	r19, Y+6	; 0x06
    21c2:	b9 01       	movw	r22, r18
    21c4:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <memcpy>
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	fc 01       	movw	r30, r24
    21ce:	24 81       	ldd	r18, Z+4	; 0x04
    21d0:	35 81       	ldd	r19, Z+5	; 0x05
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	fc 01       	movw	r30, r24
    21d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    21da:	88 2f       	mov	r24, r24
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	28 0f       	add	r18, r24
    21e0:	39 1f       	adc	r19, r25
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	fc 01       	movw	r30, r24
    21e8:	35 83       	std	Z+5, r19	; 0x05
    21ea:	24 83       	std	Z+4, r18	; 0x04
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	fc 01       	movw	r30, r24
    21f2:	24 81       	ldd	r18, Z+4	; 0x04
    21f4:	35 81       	ldd	r19, Z+5	; 0x05
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	fc 01       	movw	r30, r24
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	28 17       	cp	r18, r24
    2202:	39 07       	cpc	r19, r25
    2204:	08 f4       	brcc	.+2      	; 0x2208 <prvCopyDataToQueue+0xc8>
    2206:	5b c0       	rjmp	.+182    	; 0x22be <prvCopyDataToQueue+0x17e>
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	fc 01       	movw	r30, r24
    220e:	20 81       	ld	r18, Z
    2210:	31 81       	ldd	r19, Z+1	; 0x01
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	9c 81       	ldd	r25, Y+4	; 0x04
    2216:	fc 01       	movw	r30, r24
    2218:	35 83       	std	Z+5, r19	; 0x05
    221a:	24 83       	std	Z+4, r18	; 0x04
    221c:	50 c0       	rjmp	.+160    	; 0x22be <prvCopyDataToQueue+0x17e>
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	9c 81       	ldd	r25, Y+4	; 0x04
    2222:	fc 01       	movw	r30, r24
    2224:	84 8d       	ldd	r24, Z+28	; 0x1c
    2226:	48 2f       	mov	r20, r24
    2228:	50 e0       	ldi	r21, 0x00	; 0
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	fc 01       	movw	r30, r24
    2230:	86 81       	ldd	r24, Z+6	; 0x06
    2232:	97 81       	ldd	r25, Z+7	; 0x07
    2234:	2d 81       	ldd	r18, Y+5	; 0x05
    2236:	3e 81       	ldd	r19, Y+6	; 0x06
    2238:	b9 01       	movw	r22, r18
    223a:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <memcpy>
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	fc 01       	movw	r30, r24
    2244:	26 81       	ldd	r18, Z+6	; 0x06
    2246:	37 81       	ldd	r19, Z+7	; 0x07
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	fc 01       	movw	r30, r24
    224e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2250:	88 2f       	mov	r24, r24
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	91 95       	neg	r25
    2256:	81 95       	neg	r24
    2258:	91 09       	sbc	r25, r1
    225a:	28 0f       	add	r18, r24
    225c:	39 1f       	adc	r19, r25
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	fc 01       	movw	r30, r24
    2264:	37 83       	std	Z+7, r19	; 0x07
    2266:	26 83       	std	Z+6, r18	; 0x06
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	fc 01       	movw	r30, r24
    226e:	26 81       	ldd	r18, Z+6	; 0x06
    2270:	37 81       	ldd	r19, Z+7	; 0x07
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	fc 01       	movw	r30, r24
    2278:	80 81       	ld	r24, Z
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	28 17       	cp	r18, r24
    227e:	39 07       	cpc	r19, r25
    2280:	a8 f4       	brcc	.+42     	; 0x22ac <prvCopyDataToQueue+0x16c>
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	9c 81       	ldd	r25, Y+4	; 0x04
    2286:	fc 01       	movw	r30, r24
    2288:	22 81       	ldd	r18, Z+2	; 0x02
    228a:	33 81       	ldd	r19, Z+3	; 0x03
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	fc 01       	movw	r30, r24
    2292:	84 8d       	ldd	r24, Z+28	; 0x1c
    2294:	88 2f       	mov	r24, r24
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	91 95       	neg	r25
    229a:	81 95       	neg	r24
    229c:	91 09       	sbc	r25, r1
    229e:	28 0f       	add	r18, r24
    22a0:	39 1f       	adc	r19, r25
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	9c 81       	ldd	r25, Y+4	; 0x04
    22a6:	fc 01       	movw	r30, r24
    22a8:	37 83       	std	Z+7, r19	; 0x07
    22aa:	26 83       	std	Z+6, r18	; 0x06
    22ac:	8f 81       	ldd	r24, Y+7	; 0x07
    22ae:	82 30       	cpi	r24, 0x02	; 2
    22b0:	31 f4       	brne	.+12     	; 0x22be <prvCopyDataToQueue+0x17e>
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	88 23       	and	r24, r24
    22b6:	19 f0       	breq	.+6      	; 0x22be <prvCopyDataToQueue+0x17e>
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	81 50       	subi	r24, 0x01	; 1
    22bc:	8a 83       	std	Y+2, r24	; 0x02
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	21 e0       	ldi	r18, 0x01	; 1
    22c2:	28 0f       	add	r18, r24
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	9c 81       	ldd	r25, Y+4	; 0x04
    22c8:	fc 01       	movw	r30, r24
    22ca:	22 8f       	std	Z+26, r18	; 0x1a
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	27 96       	adiw	r28, 0x07	; 7
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	08 95       	ret

000022e0 <prvUnlockQueue>:
    22e0:	cf 93       	push	r28
    22e2:	df 93       	push	r29
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <prvUnlockQueue+0x6>
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <prvUnlockQueue+0x8>
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    22ec:	9c 83       	std	Y+4, r25	; 0x04
    22ee:	8b 83       	std	Y+3, r24	; 0x03
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	0f 92       	push	r0
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	fc 01       	movw	r30, r24
    22fc:	86 8d       	ldd	r24, Z+30	; 0x1e
    22fe:	89 83       	std	Y+1, r24	; 0x01
    2300:	12 c0       	rjmp	.+36     	; 0x2326 <prvUnlockQueue+0x46>
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	9c 81       	ldd	r25, Y+4	; 0x04
    2306:	fc 01       	movw	r30, r24
    2308:	81 89       	ldd	r24, Z+17	; 0x11
    230a:	88 23       	and	r24, r24
    230c:	81 f0       	breq	.+32     	; 0x232e <prvUnlockQueue+0x4e>
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	9c 81       	ldd	r25, Y+4	; 0x04
    2312:	41 96       	adiw	r24, 0x11	; 17
    2314:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <xTaskRemoveFromEventList>
    2318:	88 23       	and	r24, r24
    231a:	11 f0       	breq	.+4      	; 0x2320 <prvUnlockQueue+0x40>
    231c:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <vTaskMissedYield>
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	81 50       	subi	r24, 0x01	; 1
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	18 16       	cp	r1, r24
    232a:	5c f3       	brlt	.-42     	; 0x2302 <prvUnlockQueue+0x22>
    232c:	01 c0       	rjmp	.+2      	; 0x2330 <prvUnlockQueue+0x50>
    232e:	00 00       	nop
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	9c 81       	ldd	r25, Y+4	; 0x04
    2334:	2f ef       	ldi	r18, 0xFF	; 255
    2336:	fc 01       	movw	r30, r24
    2338:	26 8f       	std	Z+30, r18	; 0x1e
    233a:	0f 90       	pop	r0
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	0f 92       	push	r0
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	9c 81       	ldd	r25, Y+4	; 0x04
    2348:	fc 01       	movw	r30, r24
    234a:	85 8d       	ldd	r24, Z+29	; 0x1d
    234c:	8a 83       	std	Y+2, r24	; 0x02
    234e:	12 c0       	rjmp	.+36     	; 0x2374 <prvUnlockQueue+0x94>
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	fc 01       	movw	r30, r24
    2356:	80 85       	ldd	r24, Z+8	; 0x08
    2358:	88 23       	and	r24, r24
    235a:	81 f0       	breq	.+32     	; 0x237c <prvUnlockQueue+0x9c>
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	9c 81       	ldd	r25, Y+4	; 0x04
    2360:	08 96       	adiw	r24, 0x08	; 8
    2362:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <xTaskRemoveFromEventList>
    2366:	88 23       	and	r24, r24
    2368:	11 f0       	breq	.+4      	; 0x236e <prvUnlockQueue+0x8e>
    236a:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <vTaskMissedYield>
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	81 50       	subi	r24, 0x01	; 1
    2372:	8a 83       	std	Y+2, r24	; 0x02
    2374:	8a 81       	ldd	r24, Y+2	; 0x02
    2376:	18 16       	cp	r1, r24
    2378:	5c f3       	brlt	.-42     	; 0x2350 <prvUnlockQueue+0x70>
    237a:	01 c0       	rjmp	.+2      	; 0x237e <prvUnlockQueue+0x9e>
    237c:	00 00       	nop
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	9c 81       	ldd	r25, Y+4	; 0x04
    2382:	2f ef       	ldi	r18, 0xFF	; 255
    2384:	fc 01       	movw	r30, r24
    2386:	25 8f       	std	Z+29, r18	; 0x1d
    2388:	0f 90       	pop	r0
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	00 00       	nop
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	08 95       	ret

0000239c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    239c:	cf 93       	push	r28
    239e:	df 93       	push	r29
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <prvIsQueueFull+0x6>
    23a2:	1f 92       	push	r1
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	9b 83       	std	Y+3, r25	; 0x03
    23aa:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	9b 81       	ldd	r25, Y+3	; 0x03
    23b6:	fc 01       	movw	r30, r24
    23b8:	22 8d       	ldd	r18, Z+26	; 0x1a
    23ba:	8a 81       	ldd	r24, Y+2	; 0x02
    23bc:	9b 81       	ldd	r25, Y+3	; 0x03
    23be:	fc 01       	movw	r30, r24
    23c0:	83 8d       	ldd	r24, Z+27	; 0x1b
    23c2:	28 17       	cp	r18, r24
    23c4:	19 f4       	brne	.+6      	; 0x23cc <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	01 c0       	rjmp	.+2      	; 0x23ce <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    23cc:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    23ce:	0f 90       	pop	r0
    23d0:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	df 91       	pop	r29
    23dc:	cf 91       	pop	r28
    23de:	08 95       	ret

000023e0 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    23e0:	8f 92       	push	r8
    23e2:	9f 92       	push	r9
    23e4:	af 92       	push	r10
    23e6:	bf 92       	push	r11
    23e8:	cf 92       	push	r12
    23ea:	df 92       	push	r13
    23ec:	ef 92       	push	r14
    23ee:	ff 92       	push	r15
    23f0:	0f 93       	push	r16
    23f2:	1f 93       	push	r17
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	60 97       	sbiw	r28, 0x10	; 16
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	9f 83       	std	Y+7, r25	; 0x07
    240a:	8e 83       	std	Y+6, r24	; 0x06
    240c:	79 87       	std	Y+9, r23	; 0x09
    240e:	68 87       	std	Y+8, r22	; 0x08
    2410:	5b 87       	std	Y+11, r21	; 0x0b
    2412:	4a 87       	std	Y+10, r20	; 0x0a
    2414:	3d 87       	std	Y+13, r19	; 0x0d
    2416:	2c 87       	std	Y+12, r18	; 0x0c
    2418:	0e 87       	std	Y+14, r16	; 0x0e
    241a:	f8 8a       	std	Y+16, r15	; 0x10
    241c:	ef 86       	std	Y+15, r14	; 0x0f
    241e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2420:	9b 85       	ldd	r25, Y+11	; 0x0b
    2422:	0e 94 20 0b 	call	0x1640	; 0x1640 <pvPortMalloc>
    2426:	9d 83       	std	Y+5, r25	; 0x05
    2428:	8c 83       	std	Y+4, r24	; 0x04
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	9d 81       	ldd	r25, Y+5	; 0x05
    242e:	89 2b       	or	r24, r25
    2430:	b9 f0       	breq	.+46     	; 0x2460 <xTaskCreate+0x80>
    2432:	8c e2       	ldi	r24, 0x2C	; 44
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	0e 94 20 0b 	call	0x1640	; 0x1640 <pvPortMalloc>
    243a:	9a 83       	std	Y+2, r25	; 0x02
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	9a 81       	ldd	r25, Y+2	; 0x02
    2442:	89 2b       	or	r24, r25
    2444:	41 f0       	breq	.+16     	; 0x2456 <xTaskCreate+0x76>
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	2c 81       	ldd	r18, Y+4	; 0x04
    244c:	3d 81       	ldd	r19, Y+5	; 0x05
    244e:	fc 01       	movw	r30, r24
    2450:	30 8f       	std	Z+24, r19	; 0x18
    2452:	27 8b       	std	Z+23, r18	; 0x17
    2454:	07 c0       	rjmp	.+14     	; 0x2464 <xTaskCreate+0x84>
    2456:	8c 81       	ldd	r24, Y+4	; 0x04
    2458:	9d 81       	ldd	r25, Y+5	; 0x05
    245a:	0e 94 75 0b 	call	0x16ea	; 0x16ea <vPortFree>
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <xTaskCreate+0x84>
    2460:	1a 82       	std	Y+2, r1	; 0x02
    2462:	19 82       	std	Y+1, r1	; 0x01
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	9a 81       	ldd	r25, Y+2	; 0x02
    2468:	89 2b       	or	r24, r25
    246a:	09 f1       	breq	.+66     	; 0x24ae <xTaskCreate+0xce>
    246c:	8a 85       	ldd	r24, Y+10	; 0x0a
    246e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2470:	cc 01       	movw	r24, r24
    2472:	a0 e0       	ldi	r26, 0x00	; 0
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	09 81       	ldd	r16, Y+1	; 0x01
    2478:	1a 81       	ldd	r17, Y+2	; 0x02
    247a:	4f 85       	ldd	r20, Y+15	; 0x0f
    247c:	58 89       	ldd	r21, Y+16	; 0x10
    247e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2480:	3d 85       	ldd	r19, Y+13	; 0x0d
    2482:	68 85       	ldd	r22, Y+8	; 0x08
    2484:	79 85       	ldd	r23, Y+9	; 0x09
    2486:	ee 81       	ldd	r30, Y+6	; 0x06
    2488:	ff 81       	ldd	r31, Y+7	; 0x07
    248a:	81 2c       	mov	r8, r1
    248c:	91 2c       	mov	r9, r1
    248e:	58 01       	movw	r10, r16
    2490:	6a 01       	movw	r12, r20
    2492:	ee 84       	ldd	r14, Y+14	; 0x0e
    2494:	89 01       	movw	r16, r18
    2496:	9c 01       	movw	r18, r24
    2498:	ad 01       	movw	r20, r26
    249a:	cf 01       	movw	r24, r30
    249c:	0e 94 6d 12 	call	0x24da	; 0x24da <prvInitialiseNewTask>
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	0e 94 49 13 	call	0x2692	; 0x2692 <prvAddNewTaskToReadyList>
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	8b 83       	std	Y+3, r24	; 0x03
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <xTaskCreate+0xd2>
    24ae:	8f ef       	ldi	r24, 0xFF	; 255
    24b0:	8b 83       	std	Y+3, r24	; 0x03
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	60 96       	adiw	r28, 0x10	; 16
    24b6:	0f b6       	in	r0, 0x3f	; 63
    24b8:	f8 94       	cli
    24ba:	de bf       	out	0x3e, r29	; 62
    24bc:	0f be       	out	0x3f, r0	; 63
    24be:	cd bf       	out	0x3d, r28	; 61
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	1f 91       	pop	r17
    24c6:	0f 91       	pop	r16
    24c8:	ff 90       	pop	r15
    24ca:	ef 90       	pop	r14
    24cc:	df 90       	pop	r13
    24ce:	cf 90       	pop	r12
    24d0:	bf 90       	pop	r11
    24d2:	af 90       	pop	r10
    24d4:	9f 90       	pop	r9
    24d6:	8f 90       	pop	r8
    24d8:	08 95       	ret

000024da <prvInitialiseNewTask>:
    24da:	8f 92       	push	r8
    24dc:	9f 92       	push	r9
    24de:	af 92       	push	r10
    24e0:	bf 92       	push	r11
    24e2:	cf 92       	push	r12
    24e4:	df 92       	push	r13
    24e6:	ef 92       	push	r14
    24e8:	0f 93       	push	r16
    24ea:	1f 93       	push	r17
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	64 97       	sbiw	r28, 0x14	; 20
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	9d 83       	std	Y+5, r25	; 0x05
    2502:	8c 83       	std	Y+4, r24	; 0x04
    2504:	7f 83       	std	Y+7, r23	; 0x07
    2506:	6e 83       	std	Y+6, r22	; 0x06
    2508:	28 87       	std	Y+8, r18	; 0x08
    250a:	39 87       	std	Y+9, r19	; 0x09
    250c:	4a 87       	std	Y+10, r20	; 0x0a
    250e:	5b 87       	std	Y+11, r21	; 0x0b
    2510:	1d 87       	std	Y+13, r17	; 0x0d
    2512:	0c 87       	std	Y+12, r16	; 0x0c
    2514:	ee 86       	std	Y+14, r14	; 0x0e
    2516:	d8 8a       	std	Y+16, r13	; 0x10
    2518:	cf 86       	std	Y+15, r12	; 0x0f
    251a:	ba 8a       	std	Y+18, r11	; 0x12
    251c:	a9 8a       	std	Y+17, r10	; 0x11
    251e:	9c 8a       	std	Y+20, r9	; 0x14
    2520:	8b 8a       	std	Y+19, r8	; 0x13
    2522:	28 85       	ldd	r18, Y+8	; 0x08
    2524:	39 85       	ldd	r19, Y+9	; 0x09
    2526:	89 89       	ldd	r24, Y+17	; 0x11
    2528:	9a 89       	ldd	r25, Y+18	; 0x12
    252a:	fc 01       	movw	r30, r24
    252c:	87 89       	ldd	r24, Z+23	; 0x17
    252e:	90 8d       	ldd	r25, Z+24	; 0x18
    2530:	a9 01       	movw	r20, r18
    2532:	65 ea       	ldi	r22, 0xA5	; 165
    2534:	70 e0       	ldi	r23, 0x00	; 0
    2536:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <memset>
    253a:	89 89       	ldd	r24, Y+17	; 0x11
    253c:	9a 89       	ldd	r25, Y+18	; 0x12
    253e:	fc 01       	movw	r30, r24
    2540:	27 89       	ldd	r18, Z+23	; 0x17
    2542:	30 8d       	ldd	r19, Z+24	; 0x18
    2544:	88 85       	ldd	r24, Y+8	; 0x08
    2546:	99 85       	ldd	r25, Y+9	; 0x09
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	82 0f       	add	r24, r18
    254c:	93 1f       	adc	r25, r19
    254e:	9b 83       	std	Y+3, r25	; 0x03
    2550:	8a 83       	std	Y+2, r24	; 0x02
    2552:	19 82       	std	Y+1, r1	; 0x01
    2554:	21 c0       	rjmp	.+66     	; 0x2598 <prvInitialiseNewTask+0xbe>
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	88 2f       	mov	r24, r24
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	29 81       	ldd	r18, Y+1	; 0x01
    255e:	22 2f       	mov	r18, r18
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	4e 81       	ldd	r20, Y+6	; 0x06
    2564:	5f 81       	ldd	r21, Y+7	; 0x07
    2566:	24 0f       	add	r18, r20
    2568:	35 1f       	adc	r19, r21
    256a:	f9 01       	movw	r30, r18
    256c:	40 81       	ld	r20, Z
    256e:	29 89       	ldd	r18, Y+17	; 0x11
    2570:	3a 89       	ldd	r19, Y+18	; 0x12
    2572:	82 0f       	add	r24, r18
    2574:	93 1f       	adc	r25, r19
    2576:	49 96       	adiw	r24, 0x19	; 25
    2578:	fc 01       	movw	r30, r24
    257a:	40 83       	st	Z, r20
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	88 2f       	mov	r24, r24
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	2e 81       	ldd	r18, Y+6	; 0x06
    2584:	3f 81       	ldd	r19, Y+7	; 0x07
    2586:	82 0f       	add	r24, r18
    2588:	93 1f       	adc	r25, r19
    258a:	fc 01       	movw	r30, r24
    258c:	80 81       	ld	r24, Z
    258e:	88 23       	and	r24, r24
    2590:	39 f0       	breq	.+14     	; 0x25a0 <prvInitialiseNewTask+0xc6>
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	8f 5f       	subi	r24, 0xFF	; 255
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	88 30       	cpi	r24, 0x08	; 8
    259c:	e0 f2       	brcs	.-72     	; 0x2556 <prvInitialiseNewTask+0x7c>
    259e:	01 c0       	rjmp	.+2      	; 0x25a2 <prvInitialiseNewTask+0xc8>
    25a0:	00 00       	nop
    25a2:	89 89       	ldd	r24, Y+17	; 0x11
    25a4:	9a 89       	ldd	r25, Y+18	; 0x12
    25a6:	fc 01       	movw	r30, r24
    25a8:	10 a2       	std	Z+32, r1	; 0x20
    25aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    25ac:	84 30       	cpi	r24, 0x04	; 4
    25ae:	10 f0       	brcs	.+4      	; 0x25b4 <prvInitialiseNewTask+0xda>
    25b0:	83 e0       	ldi	r24, 0x03	; 3
    25b2:	8e 87       	std	Y+14, r24	; 0x0e
    25b4:	89 89       	ldd	r24, Y+17	; 0x11
    25b6:	9a 89       	ldd	r25, Y+18	; 0x12
    25b8:	2e 85       	ldd	r18, Y+14	; 0x0e
    25ba:	fc 01       	movw	r30, r24
    25bc:	26 8b       	std	Z+22, r18	; 0x16
    25be:	89 89       	ldd	r24, Y+17	; 0x11
    25c0:	9a 89       	ldd	r25, Y+18	; 0x12
    25c2:	2e 85       	ldd	r18, Y+14	; 0x0e
    25c4:	fc 01       	movw	r30, r24
    25c6:	23 a3       	std	Z+35, r18	; 0x23
    25c8:	89 89       	ldd	r24, Y+17	; 0x11
    25ca:	9a 89       	ldd	r25, Y+18	; 0x12
    25cc:	fc 01       	movw	r30, r24
    25ce:	14 a2       	std	Z+36, r1	; 0x24
    25d0:	89 89       	ldd	r24, Y+17	; 0x11
    25d2:	9a 89       	ldd	r25, Y+18	; 0x12
    25d4:	02 96       	adiw	r24, 0x02	; 2
    25d6:	0e 94 f4 06 	call	0xde8	; 0xde8 <vListInitialiseItem>
    25da:	89 89       	ldd	r24, Y+17	; 0x11
    25dc:	9a 89       	ldd	r25, Y+18	; 0x12
    25de:	0c 96       	adiw	r24, 0x0c	; 12
    25e0:	0e 94 f4 06 	call	0xde8	; 0xde8 <vListInitialiseItem>
    25e4:	89 89       	ldd	r24, Y+17	; 0x11
    25e6:	9a 89       	ldd	r25, Y+18	; 0x12
    25e8:	29 89       	ldd	r18, Y+17	; 0x11
    25ea:	3a 89       	ldd	r19, Y+18	; 0x12
    25ec:	fc 01       	movw	r30, r24
    25ee:	31 87       	std	Z+9, r19	; 0x09
    25f0:	20 87       	std	Z+8, r18	; 0x08
    25f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25f4:	88 2f       	mov	r24, r24
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	24 e0       	ldi	r18, 0x04	; 4
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	28 1b       	sub	r18, r24
    25fe:	39 0b       	sbc	r19, r25
    2600:	89 89       	ldd	r24, Y+17	; 0x11
    2602:	9a 89       	ldd	r25, Y+18	; 0x12
    2604:	fc 01       	movw	r30, r24
    2606:	35 87       	std	Z+13, r19	; 0x0d
    2608:	24 87       	std	Z+12, r18	; 0x0c
    260a:	89 89       	ldd	r24, Y+17	; 0x11
    260c:	9a 89       	ldd	r25, Y+18	; 0x12
    260e:	29 89       	ldd	r18, Y+17	; 0x11
    2610:	3a 89       	ldd	r19, Y+18	; 0x12
    2612:	fc 01       	movw	r30, r24
    2614:	33 8b       	std	Z+19, r19	; 0x13
    2616:	22 8b       	std	Z+18, r18	; 0x12
    2618:	89 89       	ldd	r24, Y+17	; 0x11
    261a:	9a 89       	ldd	r25, Y+18	; 0x12
    261c:	fc 01       	movw	r30, r24
    261e:	16 a2       	std	Z+38, r1	; 0x26
    2620:	15 a2       	std	Z+37, r1	; 0x25
    2622:	89 89       	ldd	r24, Y+17	; 0x11
    2624:	9a 89       	ldd	r25, Y+18	; 0x12
    2626:	fc 01       	movw	r30, r24
    2628:	17 a2       	std	Z+39, r1	; 0x27
    262a:	10 a6       	std	Z+40, r1	; 0x28
    262c:	11 a6       	std	Z+41, r1	; 0x29
    262e:	12 a6       	std	Z+42, r1	; 0x2a
    2630:	89 89       	ldd	r24, Y+17	; 0x11
    2632:	9a 89       	ldd	r25, Y+18	; 0x12
    2634:	fc 01       	movw	r30, r24
    2636:	13 a6       	std	Z+43, r1	; 0x2b
    2638:	4c 85       	ldd	r20, Y+12	; 0x0c
    263a:	5d 85       	ldd	r21, Y+13	; 0x0d
    263c:	2c 81       	ldd	r18, Y+4	; 0x04
    263e:	3d 81       	ldd	r19, Y+5	; 0x05
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	9b 81       	ldd	r25, Y+3	; 0x03
    2644:	b9 01       	movw	r22, r18
    2646:	0e 94 24 08 	call	0x1048	; 0x1048 <pxPortInitialiseStack>
    264a:	9c 01       	movw	r18, r24
    264c:	89 89       	ldd	r24, Y+17	; 0x11
    264e:	9a 89       	ldd	r25, Y+18	; 0x12
    2650:	fc 01       	movw	r30, r24
    2652:	31 83       	std	Z+1, r19	; 0x01
    2654:	20 83       	st	Z, r18
    2656:	8f 85       	ldd	r24, Y+15	; 0x0f
    2658:	98 89       	ldd	r25, Y+16	; 0x10
    265a:	89 2b       	or	r24, r25
    265c:	39 f0       	breq	.+14     	; 0x266c <prvInitialiseNewTask+0x192>
    265e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2660:	98 89       	ldd	r25, Y+16	; 0x10
    2662:	29 89       	ldd	r18, Y+17	; 0x11
    2664:	3a 89       	ldd	r19, Y+18	; 0x12
    2666:	fc 01       	movw	r30, r24
    2668:	31 83       	std	Z+1, r19	; 0x01
    266a:	20 83       	st	Z, r18
    266c:	00 00       	nop
    266e:	64 96       	adiw	r28, 0x14	; 20
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	ef 90       	pop	r14
    2684:	df 90       	pop	r13
    2686:	cf 90       	pop	r12
    2688:	bf 90       	pop	r11
    268a:	af 90       	pop	r10
    268c:	9f 90       	pop	r9
    268e:	8f 90       	pop	r8
    2690:	08 95       	ret

00002692 <prvAddNewTaskToReadyList>:
    2692:	cf 93       	push	r28
    2694:	df 93       	push	r29
    2696:	00 d0       	rcall	.+0      	; 0x2698 <prvAddNewTaskToReadyList+0x6>
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
    269c:	9a 83       	std	Y+2, r25	; 0x02
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	0f 92       	push	r0
    26a6:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxCurrentNumberOfTasks>
    26aa:	8f 5f       	subi	r24, 0xFF	; 255
    26ac:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <uxCurrentNumberOfTasks>
    26b0:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    26b4:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    26b8:	89 2b       	or	r24, r25
    26ba:	69 f4       	brne	.+26     	; 0x26d6 <prvAddNewTaskToReadyList+0x44>
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	9a 81       	ldd	r25, Y+2	; 0x02
    26c0:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <pxCurrentTCB+0x1>
    26c4:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <pxCurrentTCB>
    26c8:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxCurrentNumberOfTasks>
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	c9 f4       	brne	.+50     	; 0x2702 <prvAddNewTaskToReadyList+0x70>
    26d0:	0e 94 6d 17 	call	0x2eda	; 0x2eda <prvInitialiseTaskLists>
    26d4:	16 c0       	rjmp	.+44     	; 0x2702 <prvAddNewTaskToReadyList+0x70>
    26d6:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <xSchedulerRunning>
    26da:	88 23       	and	r24, r24
    26dc:	91 f4       	brne	.+36     	; 0x2702 <prvAddNewTaskToReadyList+0x70>
    26de:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    26e2:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    26e6:	fc 01       	movw	r30, r24
    26e8:	26 89       	ldd	r18, Z+22	; 0x16
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	9a 81       	ldd	r25, Y+2	; 0x02
    26ee:	fc 01       	movw	r30, r24
    26f0:	86 89       	ldd	r24, Z+22	; 0x16
    26f2:	82 17       	cp	r24, r18
    26f4:	30 f0       	brcs	.+12     	; 0x2702 <prvAddNewTaskToReadyList+0x70>
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	9a 81       	ldd	r25, Y+2	; 0x02
    26fa:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <pxCurrentTCB+0x1>
    26fe:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <pxCurrentTCB>
    2702:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <uxTaskNumber>
    2706:	8f 5f       	subi	r24, 0xFF	; 255
    2708:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <uxTaskNumber>
    270c:	20 91 32 07 	lds	r18, 0x0732	; 0x800732 <uxTaskNumber>
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	fc 01       	movw	r30, r24
    2716:	21 a3       	std	Z+33, r18	; 0x21
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	9a 81       	ldd	r25, Y+2	; 0x02
    271c:	fc 01       	movw	r30, r24
    271e:	96 89       	ldd	r25, Z+22	; 0x16
    2720:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxTopReadyPriority>
    2724:	89 17       	cp	r24, r25
    2726:	30 f4       	brcc	.+12     	; 0x2734 <prvAddNewTaskToReadyList+0xa2>
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	fc 01       	movw	r30, r24
    272e:	86 89       	ldd	r24, Z+22	; 0x16
    2730:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <uxTopReadyPriority>
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	ac 01       	movw	r20, r24
    273a:	4e 5f       	subi	r20, 0xFE	; 254
    273c:	5f 4f       	sbci	r21, 0xFF	; 255
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	9a 81       	ldd	r25, Y+2	; 0x02
    2742:	fc 01       	movw	r30, r24
    2744:	86 89       	ldd	r24, Z+22	; 0x16
    2746:	28 2f       	mov	r18, r24
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	c9 01       	movw	r24, r18
    274c:	88 0f       	add	r24, r24
    274e:	99 1f       	adc	r25, r25
    2750:	88 0f       	add	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	82 0f       	add	r24, r18
    275a:	93 1f       	adc	r25, r19
    275c:	83 52       	subi	r24, 0x23	; 35
    275e:	99 4f       	sbci	r25, 0xF9	; 249
    2760:	ba 01       	movw	r22, r20
    2762:	0e 94 06 07 	call	0xe0c	; 0xe0c <vListInsertEnd>
    2766:	0f 90       	pop	r0
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <xSchedulerRunning>
    276e:	88 23       	and	r24, r24
    2770:	71 f0       	breq	.+28     	; 0x278e <prvAddNewTaskToReadyList+0xfc>
    2772:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2776:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    277a:	fc 01       	movw	r30, r24
    277c:	26 89       	ldd	r18, Z+22	; 0x16
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	9a 81       	ldd	r25, Y+2	; 0x02
    2782:	fc 01       	movw	r30, r24
    2784:	86 89       	ldd	r24, Z+22	; 0x16
    2786:	28 17       	cp	r18, r24
    2788:	10 f4       	brcc	.+4      	; 0x278e <prvAddNewTaskToReadyList+0xfc>
    278a:	0e 94 02 0a 	call	0x1404	; 0x1404 <vPortYield>
    278e:	00 00       	nop
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	08 95       	ret

0000279a <vTaskDelay>:
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <vTaskDelay+0x6>
    27a0:	1f 92       	push	r1
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	9b 83       	std	Y+3, r25	; 0x03
    27a8:	8a 83       	std	Y+2, r24	; 0x02
    27aa:	19 82       	std	Y+1, r1	; 0x01
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	9b 81       	ldd	r25, Y+3	; 0x03
    27b0:	89 2b       	or	r24, r25
    27b2:	51 f0       	breq	.+20     	; 0x27c8 <vTaskDelay+0x2e>
    27b4:	0e 94 25 14 	call	0x284a	; 0x284a <vTaskSuspendAll>
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	9b 81       	ldd	r25, Y+3	; 0x03
    27bc:	60 e0       	ldi	r22, 0x00	; 0
    27be:	0e 94 b0 18 	call	0x3160	; 0x3160 <prvAddCurrentTaskToDelayedList>
    27c2:	0e 94 32 14 	call	0x2864	; 0x2864 <xTaskResumeAll>
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	88 23       	and	r24, r24
    27cc:	11 f4       	brne	.+4      	; 0x27d2 <vTaskDelay+0x38>
    27ce:	0e 94 02 0a 	call	0x1404	; 0x1404 <vPortYield>
    27d2:	00 00       	nop
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	08 95       	ret

000027e0 <vTaskStartScheduler>:
    27e0:	ef 92       	push	r14
    27e2:	ff 92       	push	r15
    27e4:	0f 93       	push	r16
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	1f 92       	push	r1
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	0f 2e       	mov	r0, r31
    27f2:	f5 e3       	ldi	r31, 0x35	; 53
    27f4:	ef 2e       	mov	r14, r31
    27f6:	f7 e0       	ldi	r31, 0x07	; 7
    27f8:	ff 2e       	mov	r15, r31
    27fa:	f0 2d       	mov	r31, r0
    27fc:	00 e0       	ldi	r16, 0x00	; 0
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	45 e5       	ldi	r20, 0x55	; 85
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	6a e4       	ldi	r22, 0x4A	; 74
    2808:	71 e0       	ldi	r23, 0x01	; 1
    280a:	8b e5       	ldi	r24, 0x5B	; 91
    280c:	97 e1       	ldi	r25, 0x17	; 23
    280e:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <xTaskCreate>
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	81 30       	cpi	r24, 0x01	; 1
    2818:	81 f4       	brne	.+32     	; 0x283a <vTaskStartScheduler+0x5a>
    281a:	f8 94       	cli
    281c:	8f ef       	ldi	r24, 0xFF	; 255
    281e:	9f ef       	ldi	r25, 0xFF	; 255
    2820:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <xNextTaskUnblockTime+0x1>
    2824:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <xNextTaskUnblockTime>
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <xSchedulerRunning>
    282e:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <xTickCount+0x1>
    2832:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <xTickCount>
    2836:	0e 94 cd 09 	call	0x139a	; 0x139a <xPortStartScheduler>
    283a:	00 00       	nop
    283c:	0f 90       	pop	r0
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	0f 91       	pop	r16
    2844:	ff 90       	pop	r15
    2846:	ef 90       	pop	r14
    2848:	08 95       	ret

0000284a <vTaskSuspendAll>:
    284a:	cf 93       	push	r28
    284c:	df 93       	push	r29
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxSchedulerSuspended>
    2856:	8f 5f       	subi	r24, 0xFF	; 255
    2858:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <uxSchedulerSuspended>
    285c:	00 00       	nop
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	08 95       	ret

00002864 <xTaskResumeAll>:
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	00 d0       	rcall	.+0      	; 0x286a <xTaskResumeAll+0x6>
    286a:	00 d0       	rcall	.+0      	; 0x286c <xTaskResumeAll+0x8>
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	1a 82       	std	Y+2, r1	; 0x02
    2872:	19 82       	std	Y+1, r1	; 0x01
    2874:	1b 82       	std	Y+3, r1	; 0x03
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	0f 92       	push	r0
    287c:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxSchedulerSuspended>
    2880:	81 50       	subi	r24, 0x01	; 1
    2882:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <uxSchedulerSuspended>
    2886:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxSchedulerSuspended>
    288a:	88 23       	and	r24, r24
    288c:	09 f0       	breq	.+2      	; 0x2890 <xTaskResumeAll+0x2c>
    288e:	77 c0       	rjmp	.+238    	; 0x297e <xTaskResumeAll+0x11a>
    2890:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxCurrentNumberOfTasks>
    2894:	88 23       	and	r24, r24
    2896:	09 f4       	brne	.+2      	; 0x289a <xTaskResumeAll+0x36>
    2898:	72 c0       	rjmp	.+228    	; 0x297e <xTaskResumeAll+0x11a>
    289a:	49 c0       	rjmp	.+146    	; 0x292e <xTaskResumeAll+0xca>
    289c:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <xPendingReadyList+0x5>
    28a0:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <xPendingReadyList+0x6>
    28a4:	fc 01       	movw	r30, r24
    28a6:	86 81       	ldd	r24, Z+6	; 0x06
    28a8:	97 81       	ldd	r25, Z+7	; 0x07
    28aa:	9a 83       	std	Y+2, r25	; 0x02
    28ac:	89 83       	std	Y+1, r24	; 0x01
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	9a 81       	ldd	r25, Y+2	; 0x02
    28b2:	0c 96       	adiw	r24, 0x0c	; 12
    28b4:	0e 94 cd 07 	call	0xf9a	; 0xf9a <uxListRemove>
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	02 96       	adiw	r24, 0x02	; 2
    28be:	0e 94 cd 07 	call	0xf9a	; 0xf9a <uxListRemove>
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	9a 81       	ldd	r25, Y+2	; 0x02
    28c6:	fc 01       	movw	r30, r24
    28c8:	96 89       	ldd	r25, Z+22	; 0x16
    28ca:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxTopReadyPriority>
    28ce:	89 17       	cp	r24, r25
    28d0:	30 f4       	brcc	.+12     	; 0x28de <xTaskResumeAll+0x7a>
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	9a 81       	ldd	r25, Y+2	; 0x02
    28d6:	fc 01       	movw	r30, r24
    28d8:	86 89       	ldd	r24, Z+22	; 0x16
    28da:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <uxTopReadyPriority>
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	9a 81       	ldd	r25, Y+2	; 0x02
    28e2:	ac 01       	movw	r20, r24
    28e4:	4e 5f       	subi	r20, 0xFE	; 254
    28e6:	5f 4f       	sbci	r21, 0xFF	; 255
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	9a 81       	ldd	r25, Y+2	; 0x02
    28ec:	fc 01       	movw	r30, r24
    28ee:	86 89       	ldd	r24, Z+22	; 0x16
    28f0:	28 2f       	mov	r18, r24
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	c9 01       	movw	r24, r18
    28f6:	88 0f       	add	r24, r24
    28f8:	99 1f       	adc	r25, r25
    28fa:	88 0f       	add	r24, r24
    28fc:	99 1f       	adc	r25, r25
    28fe:	88 0f       	add	r24, r24
    2900:	99 1f       	adc	r25, r25
    2902:	82 0f       	add	r24, r18
    2904:	93 1f       	adc	r25, r19
    2906:	83 52       	subi	r24, 0x23	; 35
    2908:	99 4f       	sbci	r25, 0xF9	; 249
    290a:	ba 01       	movw	r22, r20
    290c:	0e 94 06 07 	call	0xe0c	; 0xe0c <vListInsertEnd>
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	9a 81       	ldd	r25, Y+2	; 0x02
    2914:	fc 01       	movw	r30, r24
    2916:	26 89       	ldd	r18, Z+22	; 0x16
    2918:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    291c:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    2920:	fc 01       	movw	r30, r24
    2922:	86 89       	ldd	r24, Z+22	; 0x16
    2924:	28 17       	cp	r18, r24
    2926:	18 f0       	brcs	.+6      	; 0x292e <xTaskResumeAll+0xca>
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <xYieldPending>
    292e:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xPendingReadyList>
    2932:	88 23       	and	r24, r24
    2934:	09 f0       	breq	.+2      	; 0x2938 <xTaskResumeAll+0xd4>
    2936:	b2 cf       	rjmp	.-156    	; 0x289c <xTaskResumeAll+0x38>
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	9a 81       	ldd	r25, Y+2	; 0x02
    293c:	89 2b       	or	r24, r25
    293e:	11 f0       	breq	.+4      	; 0x2944 <xTaskResumeAll+0xe0>
    2940:	0e 94 04 18 	call	0x3008	; 0x3008 <prvResetNextTaskUnblockTime>
    2944:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <uxPendedTicks>
    2948:	8c 83       	std	Y+4, r24	; 0x04
    294a:	8c 81       	ldd	r24, Y+4	; 0x04
    294c:	88 23       	and	r24, r24
    294e:	79 f0       	breq	.+30     	; 0x296e <xTaskResumeAll+0x10a>
    2950:	0e 94 c9 14 	call	0x2992	; 0x2992 <xTaskIncrementTick>
    2954:	88 23       	and	r24, r24
    2956:	19 f0       	breq	.+6      	; 0x295e <xTaskResumeAll+0xfa>
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <xYieldPending>
    295e:	8c 81       	ldd	r24, Y+4	; 0x04
    2960:	81 50       	subi	r24, 0x01	; 1
    2962:	8c 83       	std	Y+4, r24	; 0x04
    2964:	8c 81       	ldd	r24, Y+4	; 0x04
    2966:	88 23       	and	r24, r24
    2968:	99 f7       	brne	.-26     	; 0x2950 <xTaskResumeAll+0xec>
    296a:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <uxPendedTicks>
    296e:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <xYieldPending>
    2972:	88 23       	and	r24, r24
    2974:	21 f0       	breq	.+8      	; 0x297e <xTaskResumeAll+0x11a>
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	8b 83       	std	Y+3, r24	; 0x03
    297a:	0e 94 02 0a 	call	0x1404	; 0x1404 <vPortYield>
    297e:	0f 90       	pop	r0
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	df 91       	pop	r29
    298e:	cf 91       	pop	r28
    2990:	08 95       	ret

00002992 <xTaskIncrementTick>:
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	29 97       	sbiw	r28, 0x09	; 9
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	19 82       	std	Y+1, r1	; 0x01
    29a8:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxSchedulerSuspended>
    29ac:	88 23       	and	r24, r24
    29ae:	09 f0       	breq	.+2      	; 0x29b2 <xTaskIncrementTick+0x20>
    29b0:	c8 c0       	rjmp	.+400    	; 0x2b42 <xTaskIncrementTick+0x1b0>
    29b2:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <xTickCount>
    29b6:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <xTickCount+0x1>
    29ba:	01 96       	adiw	r24, 0x01	; 1
    29bc:	9b 83       	std	Y+3, r25	; 0x03
    29be:	8a 83       	std	Y+2, r24	; 0x02
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	9b 81       	ldd	r25, Y+3	; 0x03
    29c4:	90 93 2c 07 	sts	0x072C, r25	; 0x80072c <xTickCount+0x1>
    29c8:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <xTickCount>
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	9b 81       	ldd	r25, Y+3	; 0x03
    29d0:	89 2b       	or	r24, r25
    29d2:	d9 f4       	brne	.+54     	; 0x2a0a <xTaskIncrementTick+0x78>
    29d4:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
    29d8:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
    29dc:	9d 83       	std	Y+5, r25	; 0x05
    29de:	8c 83       	std	Y+4, r24	; 0x04
    29e0:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <pxOverflowDelayedTaskList>
    29e4:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <pxOverflowDelayedTaskList+0x1>
    29e8:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxDelayedTaskList+0x1>
    29ec:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxDelayedTaskList>
    29f0:	8c 81       	ldd	r24, Y+4	; 0x04
    29f2:	9d 81       	ldd	r25, Y+5	; 0x05
    29f4:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <pxOverflowDelayedTaskList+0x1>
    29f8:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <pxOverflowDelayedTaskList>
    29fc:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <xNumOfOverflows>
    2a00:	8f 5f       	subi	r24, 0xFF	; 255
    2a02:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <xNumOfOverflows>
    2a06:	0e 94 04 18 	call	0x3008	; 0x3008 <prvResetNextTaskUnblockTime>
    2a0a:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <xNextTaskUnblockTime>
    2a0e:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <xNextTaskUnblockTime+0x1>
    2a12:	2a 81       	ldd	r18, Y+2	; 0x02
    2a14:	3b 81       	ldd	r19, Y+3	; 0x03
    2a16:	28 17       	cp	r18, r24
    2a18:	39 07       	cpc	r19, r25
    2a1a:	08 f4       	brcc	.+2      	; 0x2a1e <xTaskIncrementTick+0x8c>
    2a1c:	78 c0       	rjmp	.+240    	; 0x2b0e <xTaskIncrementTick+0x17c>
    2a1e:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
    2a22:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
    2a26:	fc 01       	movw	r30, r24
    2a28:	80 81       	ld	r24, Z
    2a2a:	88 23       	and	r24, r24
    2a2c:	39 f4       	brne	.+14     	; 0x2a3c <xTaskIncrementTick+0xaa>
    2a2e:	8f ef       	ldi	r24, 0xFF	; 255
    2a30:	9f ef       	ldi	r25, 0xFF	; 255
    2a32:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <xNextTaskUnblockTime+0x1>
    2a36:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <xNextTaskUnblockTime>
    2a3a:	69 c0       	rjmp	.+210    	; 0x2b0e <xTaskIncrementTick+0x17c>
    2a3c:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
    2a40:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
    2a44:	fc 01       	movw	r30, r24
    2a46:	85 81       	ldd	r24, Z+5	; 0x05
    2a48:	96 81       	ldd	r25, Z+6	; 0x06
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	86 81       	ldd	r24, Z+6	; 0x06
    2a4e:	97 81       	ldd	r25, Z+7	; 0x07
    2a50:	9f 83       	std	Y+7, r25	; 0x07
    2a52:	8e 83       	std	Y+6, r24	; 0x06
    2a54:	8e 81       	ldd	r24, Y+6	; 0x06
    2a56:	9f 81       	ldd	r25, Y+7	; 0x07
    2a58:	fc 01       	movw	r30, r24
    2a5a:	82 81       	ldd	r24, Z+2	; 0x02
    2a5c:	93 81       	ldd	r25, Z+3	; 0x03
    2a5e:	99 87       	std	Y+9, r25	; 0x09
    2a60:	88 87       	std	Y+8, r24	; 0x08
    2a62:	2a 81       	ldd	r18, Y+2	; 0x02
    2a64:	3b 81       	ldd	r19, Y+3	; 0x03
    2a66:	88 85       	ldd	r24, Y+8	; 0x08
    2a68:	99 85       	ldd	r25, Y+9	; 0x09
    2a6a:	28 17       	cp	r18, r24
    2a6c:	39 07       	cpc	r19, r25
    2a6e:	38 f4       	brcc	.+14     	; 0x2a7e <xTaskIncrementTick+0xec>
    2a70:	88 85       	ldd	r24, Y+8	; 0x08
    2a72:	99 85       	ldd	r25, Y+9	; 0x09
    2a74:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <xNextTaskUnblockTime+0x1>
    2a78:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <xNextTaskUnblockTime>
    2a7c:	48 c0       	rjmp	.+144    	; 0x2b0e <xTaskIncrementTick+0x17c>
    2a7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a80:	9f 81       	ldd	r25, Y+7	; 0x07
    2a82:	02 96       	adiw	r24, 0x02	; 2
    2a84:	0e 94 cd 07 	call	0xf9a	; 0xf9a <uxListRemove>
    2a88:	8e 81       	ldd	r24, Y+6	; 0x06
    2a8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	84 89       	ldd	r24, Z+20	; 0x14
    2a90:	95 89       	ldd	r25, Z+21	; 0x15
    2a92:	89 2b       	or	r24, r25
    2a94:	29 f0       	breq	.+10     	; 0x2aa0 <xTaskIncrementTick+0x10e>
    2a96:	8e 81       	ldd	r24, Y+6	; 0x06
    2a98:	9f 81       	ldd	r25, Y+7	; 0x07
    2a9a:	0c 96       	adiw	r24, 0x0c	; 12
    2a9c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <uxListRemove>
    2aa0:	8e 81       	ldd	r24, Y+6	; 0x06
    2aa2:	9f 81       	ldd	r25, Y+7	; 0x07
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	96 89       	ldd	r25, Z+22	; 0x16
    2aa8:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxTopReadyPriority>
    2aac:	89 17       	cp	r24, r25
    2aae:	30 f4       	brcc	.+12     	; 0x2abc <xTaskIncrementTick+0x12a>
    2ab0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	86 89       	ldd	r24, Z+22	; 0x16
    2ab8:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <uxTopReadyPriority>
    2abc:	8e 81       	ldd	r24, Y+6	; 0x06
    2abe:	9f 81       	ldd	r25, Y+7	; 0x07
    2ac0:	ac 01       	movw	r20, r24
    2ac2:	4e 5f       	subi	r20, 0xFE	; 254
    2ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac8:	9f 81       	ldd	r25, Y+7	; 0x07
    2aca:	fc 01       	movw	r30, r24
    2acc:	86 89       	ldd	r24, Z+22	; 0x16
    2ace:	28 2f       	mov	r18, r24
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	c9 01       	movw	r24, r18
    2ad4:	88 0f       	add	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	88 0f       	add	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	88 0f       	add	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	82 0f       	add	r24, r18
    2ae2:	93 1f       	adc	r25, r19
    2ae4:	83 52       	subi	r24, 0x23	; 35
    2ae6:	99 4f       	sbci	r25, 0xF9	; 249
    2ae8:	ba 01       	movw	r22, r20
    2aea:	0e 94 06 07 	call	0xe0c	; 0xe0c <vListInsertEnd>
    2aee:	8e 81       	ldd	r24, Y+6	; 0x06
    2af0:	9f 81       	ldd	r25, Y+7	; 0x07
    2af2:	fc 01       	movw	r30, r24
    2af4:	26 89       	ldd	r18, Z+22	; 0x16
    2af6:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2afa:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    2afe:	fc 01       	movw	r30, r24
    2b00:	86 89       	ldd	r24, Z+22	; 0x16
    2b02:	28 17       	cp	r18, r24
    2b04:	08 f4       	brcc	.+2      	; 0x2b08 <xTaskIncrementTick+0x176>
    2b06:	8b cf       	rjmp	.-234    	; 0x2a1e <xTaskIncrementTick+0x8c>
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	89 83       	std	Y+1, r24	; 0x01
    2b0c:	88 cf       	rjmp	.-240    	; 0x2a1e <xTaskIncrementTick+0x8c>
    2b0e:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2b12:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    2b16:	fc 01       	movw	r30, r24
    2b18:	86 89       	ldd	r24, Z+22	; 0x16
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	c9 01       	movw	r24, r18
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	82 0f       	add	r24, r18
    2b2e:	93 1f       	adc	r25, r19
    2b30:	83 52       	subi	r24, 0x23	; 35
    2b32:	99 4f       	sbci	r25, 0xF9	; 249
    2b34:	fc 01       	movw	r30, r24
    2b36:	80 81       	ld	r24, Z
    2b38:	82 30       	cpi	r24, 0x02	; 2
    2b3a:	40 f0       	brcs	.+16     	; 0x2b4c <xTaskIncrementTick+0x1ba>
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	89 83       	std	Y+1, r24	; 0x01
    2b40:	05 c0       	rjmp	.+10     	; 0x2b4c <xTaskIncrementTick+0x1ba>
    2b42:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <uxPendedTicks>
    2b46:	8f 5f       	subi	r24, 0xFF	; 255
    2b48:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <uxPendedTicks>
    2b4c:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <xYieldPending>
    2b50:	88 23       	and	r24, r24
    2b52:	11 f0       	breq	.+4      	; 0x2b58 <xTaskIncrementTick+0x1c6>
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	89 83       	std	Y+1, r24	; 0x01
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	29 96       	adiw	r28, 0x09	; 9
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	08 95       	ret

00002b6c <vTaskSwitchContext>:
    2b6c:	cf 93       	push	r28
    2b6e:	df 93       	push	r29
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <vTaskSwitchContext+0x6>
    2b72:	1f 92       	push	r1
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxSchedulerSuspended>
    2b7c:	88 23       	and	r24, r24
    2b7e:	21 f0       	breq	.+8      	; 0x2b88 <vTaskSwitchContext+0x1c>
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <xYieldPending>
    2b86:	71 c0       	rjmp	.+226    	; 0x2c6a <vTaskSwitchContext+0xfe>
    2b88:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <xYieldPending>
    2b8c:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2b90:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    2b94:	fc 01       	movw	r30, r24
    2b96:	85 a1       	ldd	r24, Z+37	; 0x25
    2b98:	96 a1       	ldd	r25, Z+38	; 0x26
    2b9a:	0e 94 06 06 	call	0xc0c	; 0xc0c <switch_out>
    2b9e:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxTopReadyPriority>
    2ba2:	89 83       	std	Y+1, r24	; 0x01
    2ba4:	03 c0       	rjmp	.+6      	; 0x2bac <vTaskSwitchContext+0x40>
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	81 50       	subi	r24, 0x01	; 1
    2baa:	89 83       	std	Y+1, r24	; 0x01
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	28 2f       	mov	r18, r24
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	c9 01       	movw	r24, r18
    2bb4:	88 0f       	add	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	88 0f       	add	r24, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	88 0f       	add	r24, r24
    2bbe:	99 1f       	adc	r25, r25
    2bc0:	82 0f       	add	r24, r18
    2bc2:	93 1f       	adc	r25, r19
    2bc4:	83 52       	subi	r24, 0x23	; 35
    2bc6:	99 4f       	sbci	r25, 0xF9	; 249
    2bc8:	fc 01       	movw	r30, r24
    2bca:	80 81       	ld	r24, Z
    2bcc:	88 23       	and	r24, r24
    2bce:	59 f3       	breq	.-42     	; 0x2ba6 <vTaskSwitchContext+0x3a>
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	c9 01       	movw	r24, r18
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	88 0f       	add	r24, r24
    2bde:	99 1f       	adc	r25, r25
    2be0:	88 0f       	add	r24, r24
    2be2:	99 1f       	adc	r25, r25
    2be4:	82 0f       	add	r24, r18
    2be6:	93 1f       	adc	r25, r19
    2be8:	83 52       	subi	r24, 0x23	; 35
    2bea:	99 4f       	sbci	r25, 0xF9	; 249
    2bec:	9b 83       	std	Y+3, r25	; 0x03
    2bee:	8a 83       	std	Y+2, r24	; 0x02
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	81 81       	ldd	r24, Z+1	; 0x01
    2bf8:	92 81       	ldd	r25, Z+2	; 0x02
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	22 81       	ldd	r18, Z+2	; 0x02
    2bfe:	33 81       	ldd	r19, Z+3	; 0x03
    2c00:	8a 81       	ldd	r24, Y+2	; 0x02
    2c02:	9b 81       	ldd	r25, Y+3	; 0x03
    2c04:	fc 01       	movw	r30, r24
    2c06:	32 83       	std	Z+2, r19	; 0x02
    2c08:	21 83       	std	Z+1, r18	; 0x01
    2c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c0e:	fc 01       	movw	r30, r24
    2c10:	21 81       	ldd	r18, Z+1	; 0x01
    2c12:	32 81       	ldd	r19, Z+2	; 0x02
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	9b 81       	ldd	r25, Y+3	; 0x03
    2c18:	03 96       	adiw	r24, 0x03	; 3
    2c1a:	28 17       	cp	r18, r24
    2c1c:	39 07       	cpc	r19, r25
    2c1e:	69 f4       	brne	.+26     	; 0x2c3a <vTaskSwitchContext+0xce>
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	9b 81       	ldd	r25, Y+3	; 0x03
    2c24:	fc 01       	movw	r30, r24
    2c26:	81 81       	ldd	r24, Z+1	; 0x01
    2c28:	92 81       	ldd	r25, Z+2	; 0x02
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	22 81       	ldd	r18, Z+2	; 0x02
    2c2e:	33 81       	ldd	r19, Z+3	; 0x03
    2c30:	8a 81       	ldd	r24, Y+2	; 0x02
    2c32:	9b 81       	ldd	r25, Y+3	; 0x03
    2c34:	fc 01       	movw	r30, r24
    2c36:	32 83       	std	Z+2, r19	; 0x02
    2c38:	21 83       	std	Z+1, r18	; 0x01
    2c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3e:	fc 01       	movw	r30, r24
    2c40:	81 81       	ldd	r24, Z+1	; 0x01
    2c42:	92 81       	ldd	r25, Z+2	; 0x02
    2c44:	fc 01       	movw	r30, r24
    2c46:	86 81       	ldd	r24, Z+6	; 0x06
    2c48:	97 81       	ldd	r25, Z+7	; 0x07
    2c4a:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <pxCurrentTCB+0x1>
    2c4e:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <pxCurrentTCB>
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <uxTopReadyPriority>
    2c58:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2c5c:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    2c60:	fc 01       	movw	r30, r24
    2c62:	85 a1       	ldd	r24, Z+37	; 0x25
    2c64:	96 a1       	ldd	r25, Z+38	; 0x26
    2c66:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <switch_in>
    2c6a:	00 00       	nop
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	08 95       	ret

00002c78 <vTaskPlaceOnEventList>:
    2c78:	cf 93       	push	r28
    2c7a:	df 93       	push	r29
    2c7c:	00 d0       	rcall	.+0      	; 0x2c7e <vTaskPlaceOnEventList+0x6>
    2c7e:	00 d0       	rcall	.+0      	; 0x2c80 <vTaskPlaceOnEventList+0x8>
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	9a 83       	std	Y+2, r25	; 0x02
    2c86:	89 83       	std	Y+1, r24	; 0x01
    2c88:	7c 83       	std	Y+4, r23	; 0x04
    2c8a:	6b 83       	std	Y+3, r22	; 0x03
    2c8c:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2c90:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    2c94:	9c 01       	movw	r18, r24
    2c96:	24 5f       	subi	r18, 0xF4	; 244
    2c98:	3f 4f       	sbci	r19, 0xFF	; 255
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9e:	b9 01       	movw	r22, r18
    2ca0:	0e 94 55 07 	call	0xeaa	; 0xeaa <vListInsert>
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca8:	61 e0       	ldi	r22, 0x01	; 1
    2caa:	0e 94 b0 18 	call	0x3160	; 0x3160 <prvAddCurrentTaskToDelayedList>
    2cae:	00 00       	nop
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	df 91       	pop	r29
    2cba:	cf 91       	pop	r28
    2cbc:	08 95       	ret

00002cbe <xTaskRemoveFromEventList>:
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
    2cc2:	00 d0       	rcall	.+0      	; 0x2cc4 <xTaskRemoveFromEventList+0x6>
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <xTaskRemoveFromEventList+0x8>
    2cc6:	1f 92       	push	r1
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
    2ccc:	9d 83       	std	Y+5, r25	; 0x05
    2cce:	8c 83       	std	Y+4, r24	; 0x04
    2cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	85 81       	ldd	r24, Z+5	; 0x05
    2cd8:	96 81       	ldd	r25, Z+6	; 0x06
    2cda:	fc 01       	movw	r30, r24
    2cdc:	86 81       	ldd	r24, Z+6	; 0x06
    2cde:	97 81       	ldd	r25, Z+7	; 0x07
    2ce0:	9b 83       	std	Y+3, r25	; 0x03
    2ce2:	8a 83       	std	Y+2, r24	; 0x02
    2ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce8:	0c 96       	adiw	r24, 0x0c	; 12
    2cea:	0e 94 cd 07 	call	0xf9a	; 0xf9a <uxListRemove>
    2cee:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxSchedulerSuspended>
    2cf2:	88 23       	and	r24, r24
    2cf4:	69 f5       	brne	.+90     	; 0x2d50 <xTaskRemoveFromEventList+0x92>
    2cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfa:	02 96       	adiw	r24, 0x02	; 2
    2cfc:	0e 94 cd 07 	call	0xf9a	; 0xf9a <uxListRemove>
    2d00:	8a 81       	ldd	r24, Y+2	; 0x02
    2d02:	9b 81       	ldd	r25, Y+3	; 0x03
    2d04:	fc 01       	movw	r30, r24
    2d06:	96 89       	ldd	r25, Z+22	; 0x16
    2d08:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxTopReadyPriority>
    2d0c:	89 17       	cp	r24, r25
    2d0e:	30 f4       	brcc	.+12     	; 0x2d1c <xTaskRemoveFromEventList+0x5e>
    2d10:	8a 81       	ldd	r24, Y+2	; 0x02
    2d12:	9b 81       	ldd	r25, Y+3	; 0x03
    2d14:	fc 01       	movw	r30, r24
    2d16:	86 89       	ldd	r24, Z+22	; 0x16
    2d18:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <uxTopReadyPriority>
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d20:	ac 01       	movw	r20, r24
    2d22:	4e 5f       	subi	r20, 0xFE	; 254
    2d24:	5f 4f       	sbci	r21, 0xFF	; 255
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	86 89       	ldd	r24, Z+22	; 0x16
    2d2e:	28 2f       	mov	r18, r24
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	c9 01       	movw	r24, r18
    2d34:	88 0f       	add	r24, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	88 0f       	add	r24, r24
    2d3a:	99 1f       	adc	r25, r25
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	82 0f       	add	r24, r18
    2d42:	93 1f       	adc	r25, r19
    2d44:	83 52       	subi	r24, 0x23	; 35
    2d46:	99 4f       	sbci	r25, 0xF9	; 249
    2d48:	ba 01       	movw	r22, r20
    2d4a:	0e 94 06 07 	call	0xe0c	; 0xe0c <vListInsertEnd>
    2d4e:	08 c0       	rjmp	.+16     	; 0x2d60 <xTaskRemoveFromEventList+0xa2>
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	9b 81       	ldd	r25, Y+3	; 0x03
    2d54:	0c 96       	adiw	r24, 0x0c	; 12
    2d56:	bc 01       	movw	r22, r24
    2d58:	87 e1       	ldi	r24, 0x17	; 23
    2d5a:	97 e0       	ldi	r25, 0x07	; 7
    2d5c:	0e 94 06 07 	call	0xe0c	; 0xe0c <vListInsertEnd>
    2d60:	8a 81       	ldd	r24, Y+2	; 0x02
    2d62:	9b 81       	ldd	r25, Y+3	; 0x03
    2d64:	fc 01       	movw	r30, r24
    2d66:	26 89       	ldd	r18, Z+22	; 0x16
    2d68:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2d6c:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    2d70:	fc 01       	movw	r30, r24
    2d72:	86 89       	ldd	r24, Z+22	; 0x16
    2d74:	82 17       	cp	r24, r18
    2d76:	30 f4       	brcc	.+12     	; 0x2d84 <xTaskRemoveFromEventList+0xc6>
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	89 83       	std	Y+1, r24	; 0x01
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <xYieldPending>
    2d82:	01 c0       	rjmp	.+2      	; 0x2d86 <xTaskRemoveFromEventList+0xc8>
    2d84:	19 82       	std	Y+1, r1	; 0x01
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	df 91       	pop	r29
    2d94:	cf 91       	pop	r28
    2d96:	08 95       	ret

00002d98 <vTaskSetTimeOutState>:
    2d98:	cf 93       	push	r28
    2d9a:	df 93       	push	r29
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <vTaskSetTimeOutState+0x6>
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	9a 83       	std	Y+2, r25	; 0x02
    2da4:	89 83       	std	Y+1, r24	; 0x01
    2da6:	20 91 31 07 	lds	r18, 0x0731	; 0x800731 <xNumOfOverflows>
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	9a 81       	ldd	r25, Y+2	; 0x02
    2dae:	fc 01       	movw	r30, r24
    2db0:	20 83       	st	Z, r18
    2db2:	20 91 2b 07 	lds	r18, 0x072B	; 0x80072b <xTickCount>
    2db6:	30 91 2c 07 	lds	r19, 0x072C	; 0x80072c <xTickCount+0x1>
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	32 83       	std	Z+2, r19	; 0x02
    2dc2:	21 83       	std	Z+1, r18	; 0x01
    2dc4:	00 00       	nop
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	df 91       	pop	r29
    2dcc:	cf 91       	pop	r28
    2dce:	08 95       	ret

00002dd0 <xTaskCheckForTimeOut>:
    2dd0:	cf 93       	push	r28
    2dd2:	df 93       	push	r29
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	27 97       	sbiw	r28, 0x07	; 7
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	f8 94       	cli
    2dde:	de bf       	out	0x3e, r29	; 62
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	cd bf       	out	0x3d, r28	; 61
    2de4:	9d 83       	std	Y+5, r25	; 0x05
    2de6:	8c 83       	std	Y+4, r24	; 0x04
    2de8:	7f 83       	std	Y+7, r23	; 0x07
    2dea:	6e 83       	std	Y+6, r22	; 0x06
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	f8 94       	cli
    2df0:	0f 92       	push	r0
    2df2:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <xTickCount>
    2df6:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <xTickCount+0x1>
    2dfa:	9b 83       	std	Y+3, r25	; 0x03
    2dfc:	8a 83       	std	Y+2, r24	; 0x02
    2dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    2e00:	9d 81       	ldd	r25, Y+5	; 0x05
    2e02:	fc 01       	movw	r30, r24
    2e04:	90 81       	ld	r25, Z
    2e06:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <xNumOfOverflows>
    2e0a:	98 17       	cp	r25, r24
    2e0c:	69 f0       	breq	.+26     	; 0x2e28 <xTaskCheckForTimeOut+0x58>
    2e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e10:	9d 81       	ldd	r25, Y+5	; 0x05
    2e12:	fc 01       	movw	r30, r24
    2e14:	21 81       	ldd	r18, Z+1	; 0x01
    2e16:	32 81       	ldd	r19, Z+2	; 0x02
    2e18:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1c:	82 17       	cp	r24, r18
    2e1e:	93 07       	cpc	r25, r19
    2e20:	18 f0       	brcs	.+6      	; 0x2e28 <xTaskCheckForTimeOut+0x58>
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	89 83       	std	Y+1, r24	; 0x01
    2e26:	30 c0       	rjmp	.+96     	; 0x2e88 <xTaskCheckForTimeOut+0xb8>
    2e28:	8c 81       	ldd	r24, Y+4	; 0x04
    2e2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	81 81       	ldd	r24, Z+1	; 0x01
    2e30:	92 81       	ldd	r25, Z+2	; 0x02
    2e32:	2a 81       	ldd	r18, Y+2	; 0x02
    2e34:	3b 81       	ldd	r19, Y+3	; 0x03
    2e36:	28 1b       	sub	r18, r24
    2e38:	39 0b       	sbc	r19, r25
    2e3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2e3e:	fc 01       	movw	r30, r24
    2e40:	80 81       	ld	r24, Z
    2e42:	91 81       	ldd	r25, Z+1	; 0x01
    2e44:	28 17       	cp	r18, r24
    2e46:	39 07       	cpc	r19, r25
    2e48:	e8 f4       	brcc	.+58     	; 0x2e84 <xTaskCheckForTimeOut+0xb4>
    2e4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2e4e:	fc 01       	movw	r30, r24
    2e50:	20 81       	ld	r18, Z
    2e52:	31 81       	ldd	r19, Z+1	; 0x01
    2e54:	8c 81       	ldd	r24, Y+4	; 0x04
    2e56:	9d 81       	ldd	r25, Y+5	; 0x05
    2e58:	fc 01       	movw	r30, r24
    2e5a:	41 81       	ldd	r20, Z+1	; 0x01
    2e5c:	52 81       	ldd	r21, Z+2	; 0x02
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	9b 81       	ldd	r25, Y+3	; 0x03
    2e62:	ba 01       	movw	r22, r20
    2e64:	68 1b       	sub	r22, r24
    2e66:	79 0b       	sbc	r23, r25
    2e68:	cb 01       	movw	r24, r22
    2e6a:	28 0f       	add	r18, r24
    2e6c:	39 1f       	adc	r19, r25
    2e6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e70:	9f 81       	ldd	r25, Y+7	; 0x07
    2e72:	fc 01       	movw	r30, r24
    2e74:	31 83       	std	Z+1, r19	; 0x01
    2e76:	20 83       	st	Z, r18
    2e78:	8c 81       	ldd	r24, Y+4	; 0x04
    2e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e7c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <vTaskSetTimeOutState>
    2e80:	19 82       	std	Y+1, r1	; 0x01
    2e82:	02 c0       	rjmp	.+4      	; 0x2e88 <xTaskCheckForTimeOut+0xb8>
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	89 83       	std	Y+1, r24	; 0x01
    2e88:	0f 90       	pop	r0
    2e8a:	0f be       	out	0x3f, r0	; 63
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	27 96       	adiw	r28, 0x07	; 7
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	f8 94       	cli
    2e94:	de bf       	out	0x3e, r29	; 62
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	cd bf       	out	0x3d, r28	; 61
    2e9a:	df 91       	pop	r29
    2e9c:	cf 91       	pop	r28
    2e9e:	08 95       	ret

00002ea0 <vTaskMissedYield>:
    2ea0:	cf 93       	push	r28
    2ea2:	df 93       	push	r29
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <xYieldPending>
    2eae:	00 00       	nop
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	08 95       	ret

00002eb6 <prvIdleTask>:
    2eb6:	cf 93       	push	r28
    2eb8:	df 93       	push	r29
    2eba:	00 d0       	rcall	.+0      	; 0x2ebc <prvIdleTask+0x6>
    2ebc:	cd b7       	in	r28, 0x3d	; 61
    2ebe:	de b7       	in	r29, 0x3e	; 62
    2ec0:	9a 83       	std	Y+2, r25	; 0x02
    2ec2:	89 83       	std	Y+1, r24	; 0x01
    2ec4:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <prvCheckTasksWaitingTermination>
    2ec8:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <pxReadyTasksLists>
    2ecc:	82 30       	cpi	r24, 0x02	; 2
    2ece:	10 f0       	brcs	.+4      	; 0x2ed4 <prvIdleTask+0x1e>
    2ed0:	0e 94 02 0a 	call	0x1404	; 0x1404 <vPortYield>
    2ed4:	0e 94 4a 04 	call	0x894	; 0x894 <vApplicationIdleHook>
    2ed8:	f5 cf       	rjmp	.-22     	; 0x2ec4 <prvIdleTask+0xe>

00002eda <prvInitialiseTaskLists>:
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
    2ede:	1f 92       	push	r1
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
    2ee4:	19 82       	std	Y+1, r1	; 0x01
    2ee6:	13 c0       	rjmp	.+38     	; 0x2f0e <prvInitialiseTaskLists+0x34>
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	28 2f       	mov	r18, r24
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	c9 01       	movw	r24, r18
    2ef0:	88 0f       	add	r24, r24
    2ef2:	99 1f       	adc	r25, r25
    2ef4:	88 0f       	add	r24, r24
    2ef6:	99 1f       	adc	r25, r25
    2ef8:	88 0f       	add	r24, r24
    2efa:	99 1f       	adc	r25, r25
    2efc:	82 0f       	add	r24, r18
    2efe:	93 1f       	adc	r25, r19
    2f00:	83 52       	subi	r24, 0x23	; 35
    2f02:	99 4f       	sbci	r25, 0xF9	; 249
    2f04:	0e 94 be 06 	call	0xd7c	; 0xd7c <vListInitialise>
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	8f 5f       	subi	r24, 0xFF	; 255
    2f0c:	89 83       	std	Y+1, r24	; 0x01
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	84 30       	cpi	r24, 0x04	; 4
    2f12:	50 f3       	brcs	.-44     	; 0x2ee8 <prvInitialiseTaskLists+0xe>
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	97 e0       	ldi	r25, 0x07	; 7
    2f18:	0e 94 be 06 	call	0xd7c	; 0xd7c <vListInitialise>
    2f1c:	8a e0       	ldi	r24, 0x0A	; 10
    2f1e:	97 e0       	ldi	r25, 0x07	; 7
    2f20:	0e 94 be 06 	call	0xd7c	; 0xd7c <vListInitialise>
    2f24:	87 e1       	ldi	r24, 0x17	; 23
    2f26:	97 e0       	ldi	r25, 0x07	; 7
    2f28:	0e 94 be 06 	call	0xd7c	; 0xd7c <vListInitialise>
    2f2c:	80 e2       	ldi	r24, 0x20	; 32
    2f2e:	97 e0       	ldi	r25, 0x07	; 7
    2f30:	0e 94 be 06 	call	0xd7c	; 0xd7c <vListInitialise>
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	97 e0       	ldi	r25, 0x07	; 7
    2f38:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxDelayedTaskList+0x1>
    2f3c:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxDelayedTaskList>
    2f40:	8a e0       	ldi	r24, 0x0A	; 10
    2f42:	97 e0       	ldi	r25, 0x07	; 7
    2f44:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <pxOverflowDelayedTaskList+0x1>
    2f48:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <pxOverflowDelayedTaskList>
    2f4c:	00 00       	nop
    2f4e:	0f 90       	pop	r0
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	08 95       	ret

00002f56 <prvCheckTasksWaitingTermination>:
    2f56:	cf 93       	push	r28
    2f58:	df 93       	push	r29
    2f5a:	00 d0       	rcall	.+0      	; 0x2f5c <prvCheckTasksWaitingTermination+0x6>
    2f5c:	1f 92       	push	r1
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	2f c0       	rjmp	.+94     	; 0x2fc2 <prvCheckTasksWaitingTermination+0x6c>
    2f64:	0e 94 25 14 	call	0x284a	; 0x284a <vTaskSuspendAll>
    2f68:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <xTasksWaitingTermination>
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	99 23       	and	r25, r25
    2f70:	09 f0       	breq	.+2      	; 0x2f74 <prvCheckTasksWaitingTermination+0x1e>
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	89 83       	std	Y+1, r24	; 0x01
    2f76:	0e 94 32 14 	call	0x2864	; 0x2864 <xTaskResumeAll>
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	88 23       	and	r24, r24
    2f7e:	09 f5       	brne	.+66     	; 0x2fc2 <prvCheckTasksWaitingTermination+0x6c>
    2f80:	0f b6       	in	r0, 0x3f	; 63
    2f82:	f8 94       	cli
    2f84:	0f 92       	push	r0
    2f86:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <xTasksWaitingTermination+0x5>
    2f8a:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <xTasksWaitingTermination+0x6>
    2f8e:	fc 01       	movw	r30, r24
    2f90:	86 81       	ldd	r24, Z+6	; 0x06
    2f92:	97 81       	ldd	r25, Z+7	; 0x07
    2f94:	9b 83       	std	Y+3, r25	; 0x03
    2f96:	8a 83       	std	Y+2, r24	; 0x02
    2f98:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9c:	02 96       	adiw	r24, 0x02	; 2
    2f9e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <uxListRemove>
    2fa2:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxCurrentNumberOfTasks>
    2fa6:	81 50       	subi	r24, 0x01	; 1
    2fa8:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <uxCurrentNumberOfTasks>
    2fac:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <uxDeletedTasksWaitingCleanUp>
    2fb0:	81 50       	subi	r24, 0x01	; 1
    2fb2:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <uxDeletedTasksWaitingCleanUp>
    2fb6:	0f 90       	pop	r0
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fbe:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <prvDeleteTCB>
    2fc2:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <uxDeletedTasksWaitingCleanUp>
    2fc6:	88 23       	and	r24, r24
    2fc8:	69 f6       	brne	.-102    	; 0x2f64 <prvCheckTasksWaitingTermination+0xe>
    2fca:	00 00       	nop
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	df 91       	pop	r29
    2fd4:	cf 91       	pop	r28
    2fd6:	08 95       	ret

00002fd8 <prvDeleteTCB>:
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <prvDeleteTCB+0x6>
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	9a 83       	std	Y+2, r25	; 0x02
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fea:	fc 01       	movw	r30, r24
    2fec:	87 89       	ldd	r24, Z+23	; 0x17
    2fee:	90 8d       	ldd	r25, Z+24	; 0x18
    2ff0:	0e 94 75 0b 	call	0x16ea	; 0x16ea <vPortFree>
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff8:	0e 94 75 0b 	call	0x16ea	; 0x16ea <vPortFree>
    2ffc:	00 00       	nop
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	08 95       	ret

00003008 <prvResetNextTaskUnblockTime>:
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	00 d0       	rcall	.+0      	; 0x300e <prvResetNextTaskUnblockTime+0x6>
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
    3016:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
    301a:	fc 01       	movw	r30, r24
    301c:	80 81       	ld	r24, Z
    301e:	88 23       	and	r24, r24
    3020:	39 f4       	brne	.+14     	; 0x3030 <prvResetNextTaskUnblockTime+0x28>
    3022:	8f ef       	ldi	r24, 0xFF	; 255
    3024:	9f ef       	ldi	r25, 0xFF	; 255
    3026:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <xNextTaskUnblockTime+0x1>
    302a:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <xNextTaskUnblockTime>
    302e:	15 c0       	rjmp	.+42     	; 0x305a <prvResetNextTaskUnblockTime+0x52>
    3030:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
    3034:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
    3038:	fc 01       	movw	r30, r24
    303a:	85 81       	ldd	r24, Z+5	; 0x05
    303c:	96 81       	ldd	r25, Z+6	; 0x06
    303e:	fc 01       	movw	r30, r24
    3040:	86 81       	ldd	r24, Z+6	; 0x06
    3042:	97 81       	ldd	r25, Z+7	; 0x07
    3044:	9a 83       	std	Y+2, r25	; 0x02
    3046:	89 83       	std	Y+1, r24	; 0x01
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	9a 81       	ldd	r25, Y+2	; 0x02
    304c:	fc 01       	movw	r30, r24
    304e:	82 81       	ldd	r24, Z+2	; 0x02
    3050:	93 81       	ldd	r25, Z+3	; 0x03
    3052:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <xNextTaskUnblockTime+0x1>
    3056:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <xNextTaskUnblockTime>
    305a:	00 00       	nop
    305c:	0f 90       	pop	r0
    305e:	0f 90       	pop	r0
    3060:	df 91       	pop	r29
    3062:	cf 91       	pop	r28
    3064:	08 95       	ret

00003066 <xTaskPriorityDisinherit>:
    3066:	cf 93       	push	r28
    3068:	df 93       	push	r29
    306a:	00 d0       	rcall	.+0      	; 0x306c <xTaskPriorityDisinherit+0x6>
    306c:	00 d0       	rcall	.+0      	; 0x306e <xTaskPriorityDisinherit+0x8>
    306e:	1f 92       	push	r1
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	9d 83       	std	Y+5, r25	; 0x05
    3076:	8c 83       	std	Y+4, r24	; 0x04
    3078:	8c 81       	ldd	r24, Y+4	; 0x04
    307a:	9d 81       	ldd	r25, Y+5	; 0x05
    307c:	9b 83       	std	Y+3, r25	; 0x03
    307e:	8a 83       	std	Y+2, r24	; 0x02
    3080:	19 82       	std	Y+1, r1	; 0x01
    3082:	8c 81       	ldd	r24, Y+4	; 0x04
    3084:	9d 81       	ldd	r25, Y+5	; 0x05
    3086:	89 2b       	or	r24, r25
    3088:	09 f4       	brne	.+2      	; 0x308c <xTaskPriorityDisinherit+0x26>
    308a:	61 c0       	rjmp	.+194    	; 0x314e <xTaskPriorityDisinherit+0xe8>
    308c:	8a 81       	ldd	r24, Y+2	; 0x02
    308e:	9b 81       	ldd	r25, Y+3	; 0x03
    3090:	fc 01       	movw	r30, r24
    3092:	84 a1       	ldd	r24, Z+36	; 0x24
    3094:	2f ef       	ldi	r18, 0xFF	; 255
    3096:	28 0f       	add	r18, r24
    3098:	8a 81       	ldd	r24, Y+2	; 0x02
    309a:	9b 81       	ldd	r25, Y+3	; 0x03
    309c:	fc 01       	movw	r30, r24
    309e:	24 a3       	std	Z+36, r18	; 0x24
    30a0:	8a 81       	ldd	r24, Y+2	; 0x02
    30a2:	9b 81       	ldd	r25, Y+3	; 0x03
    30a4:	fc 01       	movw	r30, r24
    30a6:	26 89       	ldd	r18, Z+22	; 0x16
    30a8:	8a 81       	ldd	r24, Y+2	; 0x02
    30aa:	9b 81       	ldd	r25, Y+3	; 0x03
    30ac:	fc 01       	movw	r30, r24
    30ae:	83 a1       	ldd	r24, Z+35	; 0x23
    30b0:	28 17       	cp	r18, r24
    30b2:	09 f4       	brne	.+2      	; 0x30b6 <xTaskPriorityDisinherit+0x50>
    30b4:	4c c0       	rjmp	.+152    	; 0x314e <xTaskPriorityDisinherit+0xe8>
    30b6:	8a 81       	ldd	r24, Y+2	; 0x02
    30b8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ba:	fc 01       	movw	r30, r24
    30bc:	84 a1       	ldd	r24, Z+36	; 0x24
    30be:	88 23       	and	r24, r24
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <xTaskPriorityDisinherit+0x5e>
    30c2:	45 c0       	rjmp	.+138    	; 0x314e <xTaskPriorityDisinherit+0xe8>
    30c4:	8a 81       	ldd	r24, Y+2	; 0x02
    30c6:	9b 81       	ldd	r25, Y+3	; 0x03
    30c8:	02 96       	adiw	r24, 0x02	; 2
    30ca:	0e 94 cd 07 	call	0xf9a	; 0xf9a <uxListRemove>
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	9b 81       	ldd	r25, Y+3	; 0x03
    30d2:	fc 01       	movw	r30, r24
    30d4:	23 a1       	ldd	r18, Z+35	; 0x23
    30d6:	8a 81       	ldd	r24, Y+2	; 0x02
    30d8:	9b 81       	ldd	r25, Y+3	; 0x03
    30da:	fc 01       	movw	r30, r24
    30dc:	26 8b       	std	Z+22, r18	; 0x16
    30de:	8a 81       	ldd	r24, Y+2	; 0x02
    30e0:	9b 81       	ldd	r25, Y+3	; 0x03
    30e2:	fc 01       	movw	r30, r24
    30e4:	86 89       	ldd	r24, Z+22	; 0x16
    30e6:	88 2f       	mov	r24, r24
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	24 e0       	ldi	r18, 0x04	; 4
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	28 1b       	sub	r18, r24
    30f0:	39 0b       	sbc	r19, r25
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	9b 81       	ldd	r25, Y+3	; 0x03
    30f6:	fc 01       	movw	r30, r24
    30f8:	35 87       	std	Z+13, r19	; 0x0d
    30fa:	24 87       	std	Z+12, r18	; 0x0c
    30fc:	8a 81       	ldd	r24, Y+2	; 0x02
    30fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3100:	fc 01       	movw	r30, r24
    3102:	96 89       	ldd	r25, Z+22	; 0x16
    3104:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxTopReadyPriority>
    3108:	89 17       	cp	r24, r25
    310a:	30 f4       	brcc	.+12     	; 0x3118 <xTaskPriorityDisinherit+0xb2>
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	9b 81       	ldd	r25, Y+3	; 0x03
    3110:	fc 01       	movw	r30, r24
    3112:	86 89       	ldd	r24, Z+22	; 0x16
    3114:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <uxTopReadyPriority>
    3118:	8a 81       	ldd	r24, Y+2	; 0x02
    311a:	9b 81       	ldd	r25, Y+3	; 0x03
    311c:	ac 01       	movw	r20, r24
    311e:	4e 5f       	subi	r20, 0xFE	; 254
    3120:	5f 4f       	sbci	r21, 0xFF	; 255
    3122:	8a 81       	ldd	r24, Y+2	; 0x02
    3124:	9b 81       	ldd	r25, Y+3	; 0x03
    3126:	fc 01       	movw	r30, r24
    3128:	86 89       	ldd	r24, Z+22	; 0x16
    312a:	28 2f       	mov	r18, r24
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	c9 01       	movw	r24, r18
    3130:	88 0f       	add	r24, r24
    3132:	99 1f       	adc	r25, r25
    3134:	88 0f       	add	r24, r24
    3136:	99 1f       	adc	r25, r25
    3138:	88 0f       	add	r24, r24
    313a:	99 1f       	adc	r25, r25
    313c:	82 0f       	add	r24, r18
    313e:	93 1f       	adc	r25, r19
    3140:	83 52       	subi	r24, 0x23	; 35
    3142:	99 4f       	sbci	r25, 0xF9	; 249
    3144:	ba 01       	movw	r22, r20
    3146:	0e 94 06 07 	call	0xe0c	; 0xe0c <vListInsertEnd>
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	89 83       	std	Y+1, r24	; 0x01
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	0f 90       	pop	r0
    3158:	0f 90       	pop	r0
    315a:	df 91       	pop	r29
    315c:	cf 91       	pop	r28
    315e:	08 95       	ret

00003160 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3160:	cf 93       	push	r28
    3162:	df 93       	push	r29
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
    3168:	27 97       	sbiw	r28, 0x07	; 7
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	f8 94       	cli
    316e:	de bf       	out	0x3e, r29	; 62
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	cd bf       	out	0x3d, r28	; 61
    3174:	9e 83       	std	Y+6, r25	; 0x06
    3176:	8d 83       	std	Y+5, r24	; 0x05
    3178:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    317a:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <xTickCount>
    317e:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <xTickCount+0x1>
    3182:	9a 83       	std	Y+2, r25	; 0x02
    3184:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3186:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    318a:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    318e:	02 96       	adiw	r24, 0x02	; 2
    3190:	0e 94 cd 07 	call	0xf9a	; 0xf9a <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    3194:	29 81       	ldd	r18, Y+1	; 0x01
    3196:	3a 81       	ldd	r19, Y+2	; 0x02
    3198:	8d 81       	ldd	r24, Y+5	; 0x05
    319a:	9e 81       	ldd	r25, Y+6	; 0x06
    319c:	82 0f       	add	r24, r18
    319e:	93 1f       	adc	r25, r19
    31a0:	9c 83       	std	Y+4, r25	; 0x04
    31a2:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    31a4:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    31a8:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    31ac:	2b 81       	ldd	r18, Y+3	; 0x03
    31ae:	3c 81       	ldd	r19, Y+4	; 0x04
    31b0:	fc 01       	movw	r30, r24
    31b2:	33 83       	std	Z+3, r19	; 0x03
    31b4:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    31b6:	2b 81       	ldd	r18, Y+3	; 0x03
    31b8:	3c 81       	ldd	r19, Y+4	; 0x04
    31ba:	89 81       	ldd	r24, Y+1	; 0x01
    31bc:	9a 81       	ldd	r25, Y+2	; 0x02
    31be:	28 17       	cp	r18, r24
    31c0:	39 07       	cpc	r19, r25
    31c2:	78 f4       	brcc	.+30     	; 0x31e2 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    31c4:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    31c8:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    31cc:	9c 01       	movw	r18, r24
    31ce:	2e 5f       	subi	r18, 0xFE	; 254
    31d0:	3f 4f       	sbci	r19, 0xFF	; 255
    31d2:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <pxOverflowDelayedTaskList>
    31d6:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <pxOverflowDelayedTaskList+0x1>
    31da:	b9 01       	movw	r22, r18
    31dc:	0e 94 55 07 	call	0xeaa	; 0xeaa <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    31e0:	1d c0       	rjmp	.+58     	; 0x321c <prvAddCurrentTaskToDelayedList+0xbc>
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    31e2:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    31e6:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    31ea:	9c 01       	movw	r18, r24
    31ec:	2e 5f       	subi	r18, 0xFE	; 254
    31ee:	3f 4f       	sbci	r19, 0xFF	; 255
    31f0:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
    31f4:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
    31f8:	b9 01       	movw	r22, r18
    31fa:	0e 94 55 07 	call	0xeaa	; 0xeaa <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    31fe:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <xNextTaskUnblockTime>
    3202:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <xNextTaskUnblockTime+0x1>
    3206:	2b 81       	ldd	r18, Y+3	; 0x03
    3208:	3c 81       	ldd	r19, Y+4	; 0x04
    320a:	28 17       	cp	r18, r24
    320c:	39 07       	cpc	r19, r25
    320e:	30 f4       	brcc	.+12     	; 0x321c <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	9c 81       	ldd	r25, Y+4	; 0x04
    3214:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <xNextTaskUnblockTime+0x1>
    3218:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    321c:	00 00       	nop
    321e:	27 96       	adiw	r28, 0x07	; 7
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	df 91       	pop	r29
    322c:	cf 91       	pop	r28
    322e:	08 95       	ret

00003230 <__subsf3>:
    3230:	50 58       	subi	r21, 0x80	; 128

00003232 <__addsf3>:
    3232:	bb 27       	eor	r27, r27
    3234:	aa 27       	eor	r26, r26
    3236:	0e 94 30 19 	call	0x3260	; 0x3260 <__addsf3x>
    323a:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__fp_round>
    323e:	0e 94 01 1a 	call	0x3402	; 0x3402 <__fp_pscA>
    3242:	38 f0       	brcs	.+14     	; 0x3252 <__addsf3+0x20>
    3244:	0e 94 08 1a 	call	0x3410	; 0x3410 <__fp_pscB>
    3248:	20 f0       	brcs	.+8      	; 0x3252 <__addsf3+0x20>
    324a:	39 f4       	brne	.+14     	; 0x325a <__addsf3+0x28>
    324c:	9f 3f       	cpi	r25, 0xFF	; 255
    324e:	19 f4       	brne	.+6      	; 0x3256 <__addsf3+0x24>
    3250:	26 f4       	brtc	.+8      	; 0x325a <__addsf3+0x28>
    3252:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__fp_nan>
    3256:	0e f4       	brtc	.+2      	; 0x325a <__addsf3+0x28>
    3258:	e0 95       	com	r30
    325a:	e7 fb       	bst	r30, 7
    325c:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__fp_inf>

00003260 <__addsf3x>:
    3260:	e9 2f       	mov	r30, r25
    3262:	0e 94 20 1a 	call	0x3440	; 0x3440 <__fp_split3>
    3266:	58 f3       	brcs	.-42     	; 0x323e <__addsf3+0xc>
    3268:	ba 17       	cp	r27, r26
    326a:	62 07       	cpc	r22, r18
    326c:	73 07       	cpc	r23, r19
    326e:	84 07       	cpc	r24, r20
    3270:	95 07       	cpc	r25, r21
    3272:	20 f0       	brcs	.+8      	; 0x327c <__addsf3x+0x1c>
    3274:	79 f4       	brne	.+30     	; 0x3294 <__addsf3x+0x34>
    3276:	a6 f5       	brtc	.+104    	; 0x32e0 <__addsf3x+0x80>
    3278:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__fp_zero>
    327c:	0e f4       	brtc	.+2      	; 0x3280 <__addsf3x+0x20>
    327e:	e0 95       	com	r30
    3280:	0b 2e       	mov	r0, r27
    3282:	ba 2f       	mov	r27, r26
    3284:	a0 2d       	mov	r26, r0
    3286:	0b 01       	movw	r0, r22
    3288:	b9 01       	movw	r22, r18
    328a:	90 01       	movw	r18, r0
    328c:	0c 01       	movw	r0, r24
    328e:	ca 01       	movw	r24, r20
    3290:	a0 01       	movw	r20, r0
    3292:	11 24       	eor	r1, r1
    3294:	ff 27       	eor	r31, r31
    3296:	59 1b       	sub	r21, r25
    3298:	99 f0       	breq	.+38     	; 0x32c0 <__addsf3x+0x60>
    329a:	59 3f       	cpi	r21, 0xF9	; 249
    329c:	50 f4       	brcc	.+20     	; 0x32b2 <__addsf3x+0x52>
    329e:	50 3e       	cpi	r21, 0xE0	; 224
    32a0:	68 f1       	brcs	.+90     	; 0x32fc <__addsf3x+0x9c>
    32a2:	1a 16       	cp	r1, r26
    32a4:	f0 40       	sbci	r31, 0x00	; 0
    32a6:	a2 2f       	mov	r26, r18
    32a8:	23 2f       	mov	r18, r19
    32aa:	34 2f       	mov	r19, r20
    32ac:	44 27       	eor	r20, r20
    32ae:	58 5f       	subi	r21, 0xF8	; 248
    32b0:	f3 cf       	rjmp	.-26     	; 0x3298 <__addsf3x+0x38>
    32b2:	46 95       	lsr	r20
    32b4:	37 95       	ror	r19
    32b6:	27 95       	ror	r18
    32b8:	a7 95       	ror	r26
    32ba:	f0 40       	sbci	r31, 0x00	; 0
    32bc:	53 95       	inc	r21
    32be:	c9 f7       	brne	.-14     	; 0x32b2 <__addsf3x+0x52>
    32c0:	7e f4       	brtc	.+30     	; 0x32e0 <__addsf3x+0x80>
    32c2:	1f 16       	cp	r1, r31
    32c4:	ba 0b       	sbc	r27, r26
    32c6:	62 0b       	sbc	r22, r18
    32c8:	73 0b       	sbc	r23, r19
    32ca:	84 0b       	sbc	r24, r20
    32cc:	ba f0       	brmi	.+46     	; 0x32fc <__addsf3x+0x9c>
    32ce:	91 50       	subi	r25, 0x01	; 1
    32d0:	a1 f0       	breq	.+40     	; 0x32fa <__addsf3x+0x9a>
    32d2:	ff 0f       	add	r31, r31
    32d4:	bb 1f       	adc	r27, r27
    32d6:	66 1f       	adc	r22, r22
    32d8:	77 1f       	adc	r23, r23
    32da:	88 1f       	adc	r24, r24
    32dc:	c2 f7       	brpl	.-16     	; 0x32ce <__addsf3x+0x6e>
    32de:	0e c0       	rjmp	.+28     	; 0x32fc <__addsf3x+0x9c>
    32e0:	ba 0f       	add	r27, r26
    32e2:	62 1f       	adc	r22, r18
    32e4:	73 1f       	adc	r23, r19
    32e6:	84 1f       	adc	r24, r20
    32e8:	48 f4       	brcc	.+18     	; 0x32fc <__addsf3x+0x9c>
    32ea:	87 95       	ror	r24
    32ec:	77 95       	ror	r23
    32ee:	67 95       	ror	r22
    32f0:	b7 95       	ror	r27
    32f2:	f7 95       	ror	r31
    32f4:	9e 3f       	cpi	r25, 0xFE	; 254
    32f6:	08 f0       	brcs	.+2      	; 0x32fa <__addsf3x+0x9a>
    32f8:	b0 cf       	rjmp	.-160    	; 0x325a <__addsf3+0x28>
    32fa:	93 95       	inc	r25
    32fc:	88 0f       	add	r24, r24
    32fe:	08 f0       	brcs	.+2      	; 0x3302 <__addsf3x+0xa2>
    3300:	99 27       	eor	r25, r25
    3302:	ee 0f       	add	r30, r30
    3304:	97 95       	ror	r25
    3306:	87 95       	ror	r24
    3308:	08 95       	ret

0000330a <__fixsfsi>:
    330a:	0e 94 8c 19 	call	0x3318	; 0x3318 <__fixunssfsi>
    330e:	68 94       	set
    3310:	b1 11       	cpse	r27, r1
    3312:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__fp_szero>
    3316:	08 95       	ret

00003318 <__fixunssfsi>:
    3318:	0e 94 28 1a 	call	0x3450	; 0x3450 <__fp_splitA>
    331c:	88 f0       	brcs	.+34     	; 0x3340 <__fixunssfsi+0x28>
    331e:	9f 57       	subi	r25, 0x7F	; 127
    3320:	98 f0       	brcs	.+38     	; 0x3348 <__fixunssfsi+0x30>
    3322:	b9 2f       	mov	r27, r25
    3324:	99 27       	eor	r25, r25
    3326:	b7 51       	subi	r27, 0x17	; 23
    3328:	b0 f0       	brcs	.+44     	; 0x3356 <__fixunssfsi+0x3e>
    332a:	e1 f0       	breq	.+56     	; 0x3364 <__fixunssfsi+0x4c>
    332c:	66 0f       	add	r22, r22
    332e:	77 1f       	adc	r23, r23
    3330:	88 1f       	adc	r24, r24
    3332:	99 1f       	adc	r25, r25
    3334:	1a f0       	brmi	.+6      	; 0x333c <__fixunssfsi+0x24>
    3336:	ba 95       	dec	r27
    3338:	c9 f7       	brne	.-14     	; 0x332c <__fixunssfsi+0x14>
    333a:	14 c0       	rjmp	.+40     	; 0x3364 <__fixunssfsi+0x4c>
    333c:	b1 30       	cpi	r27, 0x01	; 1
    333e:	91 f0       	breq	.+36     	; 0x3364 <__fixunssfsi+0x4c>
    3340:	0e 94 42 1a 	call	0x3484	; 0x3484 <__fp_zero>
    3344:	b1 e0       	ldi	r27, 0x01	; 1
    3346:	08 95       	ret
    3348:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__fp_zero>
    334c:	67 2f       	mov	r22, r23
    334e:	78 2f       	mov	r23, r24
    3350:	88 27       	eor	r24, r24
    3352:	b8 5f       	subi	r27, 0xF8	; 248
    3354:	39 f0       	breq	.+14     	; 0x3364 <__fixunssfsi+0x4c>
    3356:	b9 3f       	cpi	r27, 0xF9	; 249
    3358:	cc f3       	brlt	.-14     	; 0x334c <__fixunssfsi+0x34>
    335a:	86 95       	lsr	r24
    335c:	77 95       	ror	r23
    335e:	67 95       	ror	r22
    3360:	b3 95       	inc	r27
    3362:	d9 f7       	brne	.-10     	; 0x335a <__fixunssfsi+0x42>
    3364:	3e f4       	brtc	.+14     	; 0x3374 <__fixunssfsi+0x5c>
    3366:	90 95       	com	r25
    3368:	80 95       	com	r24
    336a:	70 95       	com	r23
    336c:	61 95       	neg	r22
    336e:	7f 4f       	sbci	r23, 0xFF	; 255
    3370:	8f 4f       	sbci	r24, 0xFF	; 255
    3372:	9f 4f       	sbci	r25, 0xFF	; 255
    3374:	08 95       	ret

00003376 <__floatunsisf>:
    3376:	e8 94       	clt
    3378:	09 c0       	rjmp	.+18     	; 0x338c <__floatsisf+0x12>

0000337a <__floatsisf>:
    337a:	97 fb       	bst	r25, 7
    337c:	3e f4       	brtc	.+14     	; 0x338c <__floatsisf+0x12>
    337e:	90 95       	com	r25
    3380:	80 95       	com	r24
    3382:	70 95       	com	r23
    3384:	61 95       	neg	r22
    3386:	7f 4f       	sbci	r23, 0xFF	; 255
    3388:	8f 4f       	sbci	r24, 0xFF	; 255
    338a:	9f 4f       	sbci	r25, 0xFF	; 255
    338c:	99 23       	and	r25, r25
    338e:	a9 f0       	breq	.+42     	; 0x33ba <__floatsisf+0x40>
    3390:	f9 2f       	mov	r31, r25
    3392:	96 e9       	ldi	r25, 0x96	; 150
    3394:	bb 27       	eor	r27, r27
    3396:	93 95       	inc	r25
    3398:	f6 95       	lsr	r31
    339a:	87 95       	ror	r24
    339c:	77 95       	ror	r23
    339e:	67 95       	ror	r22
    33a0:	b7 95       	ror	r27
    33a2:	f1 11       	cpse	r31, r1
    33a4:	f8 cf       	rjmp	.-16     	; 0x3396 <__floatsisf+0x1c>
    33a6:	fa f4       	brpl	.+62     	; 0x33e6 <__floatsisf+0x6c>
    33a8:	bb 0f       	add	r27, r27
    33aa:	11 f4       	brne	.+4      	; 0x33b0 <__floatsisf+0x36>
    33ac:	60 ff       	sbrs	r22, 0
    33ae:	1b c0       	rjmp	.+54     	; 0x33e6 <__floatsisf+0x6c>
    33b0:	6f 5f       	subi	r22, 0xFF	; 255
    33b2:	7f 4f       	sbci	r23, 0xFF	; 255
    33b4:	8f 4f       	sbci	r24, 0xFF	; 255
    33b6:	9f 4f       	sbci	r25, 0xFF	; 255
    33b8:	16 c0       	rjmp	.+44     	; 0x33e6 <__floatsisf+0x6c>
    33ba:	88 23       	and	r24, r24
    33bc:	11 f0       	breq	.+4      	; 0x33c2 <__floatsisf+0x48>
    33be:	96 e9       	ldi	r25, 0x96	; 150
    33c0:	11 c0       	rjmp	.+34     	; 0x33e4 <__floatsisf+0x6a>
    33c2:	77 23       	and	r23, r23
    33c4:	21 f0       	breq	.+8      	; 0x33ce <__floatsisf+0x54>
    33c6:	9e e8       	ldi	r25, 0x8E	; 142
    33c8:	87 2f       	mov	r24, r23
    33ca:	76 2f       	mov	r23, r22
    33cc:	05 c0       	rjmp	.+10     	; 0x33d8 <__floatsisf+0x5e>
    33ce:	66 23       	and	r22, r22
    33d0:	71 f0       	breq	.+28     	; 0x33ee <__floatsisf+0x74>
    33d2:	96 e8       	ldi	r25, 0x86	; 134
    33d4:	86 2f       	mov	r24, r22
    33d6:	70 e0       	ldi	r23, 0x00	; 0
    33d8:	60 e0       	ldi	r22, 0x00	; 0
    33da:	2a f0       	brmi	.+10     	; 0x33e6 <__floatsisf+0x6c>
    33dc:	9a 95       	dec	r25
    33de:	66 0f       	add	r22, r22
    33e0:	77 1f       	adc	r23, r23
    33e2:	88 1f       	adc	r24, r24
    33e4:	da f7       	brpl	.-10     	; 0x33dc <__floatsisf+0x62>
    33e6:	88 0f       	add	r24, r24
    33e8:	96 95       	lsr	r25
    33ea:	87 95       	ror	r24
    33ec:	97 f9       	bld	r25, 7
    33ee:	08 95       	ret

000033f0 <__fp_inf>:
    33f0:	97 f9       	bld	r25, 7
    33f2:	9f 67       	ori	r25, 0x7F	; 127
    33f4:	80 e8       	ldi	r24, 0x80	; 128
    33f6:	70 e0       	ldi	r23, 0x00	; 0
    33f8:	60 e0       	ldi	r22, 0x00	; 0
    33fa:	08 95       	ret

000033fc <__fp_nan>:
    33fc:	9f ef       	ldi	r25, 0xFF	; 255
    33fe:	80 ec       	ldi	r24, 0xC0	; 192
    3400:	08 95       	ret

00003402 <__fp_pscA>:
    3402:	00 24       	eor	r0, r0
    3404:	0a 94       	dec	r0
    3406:	16 16       	cp	r1, r22
    3408:	17 06       	cpc	r1, r23
    340a:	18 06       	cpc	r1, r24
    340c:	09 06       	cpc	r0, r25
    340e:	08 95       	ret

00003410 <__fp_pscB>:
    3410:	00 24       	eor	r0, r0
    3412:	0a 94       	dec	r0
    3414:	12 16       	cp	r1, r18
    3416:	13 06       	cpc	r1, r19
    3418:	14 06       	cpc	r1, r20
    341a:	05 06       	cpc	r0, r21
    341c:	08 95       	ret

0000341e <__fp_round>:
    341e:	09 2e       	mov	r0, r25
    3420:	03 94       	inc	r0
    3422:	00 0c       	add	r0, r0
    3424:	11 f4       	brne	.+4      	; 0x342a <__fp_round+0xc>
    3426:	88 23       	and	r24, r24
    3428:	52 f0       	brmi	.+20     	; 0x343e <__fp_round+0x20>
    342a:	bb 0f       	add	r27, r27
    342c:	40 f4       	brcc	.+16     	; 0x343e <__fp_round+0x20>
    342e:	bf 2b       	or	r27, r31
    3430:	11 f4       	brne	.+4      	; 0x3436 <__fp_round+0x18>
    3432:	60 ff       	sbrs	r22, 0
    3434:	04 c0       	rjmp	.+8      	; 0x343e <__fp_round+0x20>
    3436:	6f 5f       	subi	r22, 0xFF	; 255
    3438:	7f 4f       	sbci	r23, 0xFF	; 255
    343a:	8f 4f       	sbci	r24, 0xFF	; 255
    343c:	9f 4f       	sbci	r25, 0xFF	; 255
    343e:	08 95       	ret

00003440 <__fp_split3>:
    3440:	57 fd       	sbrc	r21, 7
    3442:	90 58       	subi	r25, 0x80	; 128
    3444:	44 0f       	add	r20, r20
    3446:	55 1f       	adc	r21, r21
    3448:	59 f0       	breq	.+22     	; 0x3460 <__fp_splitA+0x10>
    344a:	5f 3f       	cpi	r21, 0xFF	; 255
    344c:	71 f0       	breq	.+28     	; 0x346a <__fp_splitA+0x1a>
    344e:	47 95       	ror	r20

00003450 <__fp_splitA>:
    3450:	88 0f       	add	r24, r24
    3452:	97 fb       	bst	r25, 7
    3454:	99 1f       	adc	r25, r25
    3456:	61 f0       	breq	.+24     	; 0x3470 <__fp_splitA+0x20>
    3458:	9f 3f       	cpi	r25, 0xFF	; 255
    345a:	79 f0       	breq	.+30     	; 0x347a <__fp_splitA+0x2a>
    345c:	87 95       	ror	r24
    345e:	08 95       	ret
    3460:	12 16       	cp	r1, r18
    3462:	13 06       	cpc	r1, r19
    3464:	14 06       	cpc	r1, r20
    3466:	55 1f       	adc	r21, r21
    3468:	f2 cf       	rjmp	.-28     	; 0x344e <__fp_split3+0xe>
    346a:	46 95       	lsr	r20
    346c:	f1 df       	rcall	.-30     	; 0x3450 <__fp_splitA>
    346e:	08 c0       	rjmp	.+16     	; 0x3480 <__fp_splitA+0x30>
    3470:	16 16       	cp	r1, r22
    3472:	17 06       	cpc	r1, r23
    3474:	18 06       	cpc	r1, r24
    3476:	99 1f       	adc	r25, r25
    3478:	f1 cf       	rjmp	.-30     	; 0x345c <__fp_splitA+0xc>
    347a:	86 95       	lsr	r24
    347c:	71 05       	cpc	r23, r1
    347e:	61 05       	cpc	r22, r1
    3480:	08 94       	sec
    3482:	08 95       	ret

00003484 <__fp_zero>:
    3484:	e8 94       	clt

00003486 <__fp_szero>:
    3486:	bb 27       	eor	r27, r27
    3488:	66 27       	eor	r22, r22
    348a:	77 27       	eor	r23, r23
    348c:	cb 01       	movw	r24, r22
    348e:	97 f9       	bld	r25, 7
    3490:	08 95       	ret

00003492 <pow>:
    3492:	fa 01       	movw	r30, r20
    3494:	ee 0f       	add	r30, r30
    3496:	ff 1f       	adc	r31, r31
    3498:	30 96       	adiw	r30, 0x00	; 0
    349a:	21 05       	cpc	r18, r1
    349c:	31 05       	cpc	r19, r1
    349e:	a1 f1       	breq	.+104    	; 0x3508 <pow+0x76>
    34a0:	61 15       	cp	r22, r1
    34a2:	71 05       	cpc	r23, r1
    34a4:	61 f4       	brne	.+24     	; 0x34be <pow+0x2c>
    34a6:	80 38       	cpi	r24, 0x80	; 128
    34a8:	bf e3       	ldi	r27, 0x3F	; 63
    34aa:	9b 07       	cpc	r25, r27
    34ac:	49 f1       	breq	.+82     	; 0x3500 <pow+0x6e>
    34ae:	68 94       	set
    34b0:	90 38       	cpi	r25, 0x80	; 128
    34b2:	81 05       	cpc	r24, r1
    34b4:	61 f0       	breq	.+24     	; 0x34ce <pow+0x3c>
    34b6:	80 38       	cpi	r24, 0x80	; 128
    34b8:	bf ef       	ldi	r27, 0xFF	; 255
    34ba:	9b 07       	cpc	r25, r27
    34bc:	41 f0       	breq	.+16     	; 0x34ce <pow+0x3c>
    34be:	99 23       	and	r25, r25
    34c0:	4a f5       	brpl	.+82     	; 0x3514 <pow+0x82>
    34c2:	ff 3f       	cpi	r31, 0xFF	; 255
    34c4:	e1 05       	cpc	r30, r1
    34c6:	31 05       	cpc	r19, r1
    34c8:	21 05       	cpc	r18, r1
    34ca:	19 f1       	breq	.+70     	; 0x3512 <pow+0x80>
    34cc:	e8 94       	clt
    34ce:	08 94       	sec
    34d0:	e7 95       	ror	r30
    34d2:	d9 01       	movw	r26, r18
    34d4:	aa 23       	and	r26, r26
    34d6:	29 f4       	brne	.+10     	; 0x34e2 <pow+0x50>
    34d8:	ab 2f       	mov	r26, r27
    34da:	be 2f       	mov	r27, r30
    34dc:	f8 5f       	subi	r31, 0xF8	; 248
    34de:	d0 f3       	brcs	.-12     	; 0x34d4 <pow+0x42>
    34e0:	10 c0       	rjmp	.+32     	; 0x3502 <pow+0x70>
    34e2:	ff 5f       	subi	r31, 0xFF	; 255
    34e4:	70 f4       	brcc	.+28     	; 0x3502 <pow+0x70>
    34e6:	a6 95       	lsr	r26
    34e8:	e0 f7       	brcc	.-8      	; 0x34e2 <pow+0x50>
    34ea:	f7 39       	cpi	r31, 0x97	; 151
    34ec:	50 f0       	brcs	.+20     	; 0x3502 <pow+0x70>
    34ee:	19 f0       	breq	.+6      	; 0x34f6 <pow+0x64>
    34f0:	ff 3a       	cpi	r31, 0xAF	; 175
    34f2:	38 f4       	brcc	.+14     	; 0x3502 <pow+0x70>
    34f4:	9f 77       	andi	r25, 0x7F	; 127
    34f6:	9f 93       	push	r25
    34f8:	0d d0       	rcall	.+26     	; 0x3514 <pow+0x82>
    34fa:	0f 90       	pop	r0
    34fc:	07 fc       	sbrc	r0, 7
    34fe:	90 58       	subi	r25, 0x80	; 128
    3500:	08 95       	ret
    3502:	46 f0       	brts	.+16     	; 0x3514 <pow+0x82>
    3504:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__fp_nan>
    3508:	60 e0       	ldi	r22, 0x00	; 0
    350a:	70 e0       	ldi	r23, 0x00	; 0
    350c:	80 e8       	ldi	r24, 0x80	; 128
    350e:	9f e3       	ldi	r25, 0x3F	; 63
    3510:	08 95       	ret
    3512:	4f e7       	ldi	r20, 0x7F	; 127
    3514:	9f 77       	andi	r25, 0x7F	; 127
    3516:	5f 93       	push	r21
    3518:	4f 93       	push	r20
    351a:	3f 93       	push	r19
    351c:	2f 93       	push	r18
    351e:	0e 94 44 1b 	call	0x3688	; 0x3688 <log>
    3522:	2f 91       	pop	r18
    3524:	3f 91       	pop	r19
    3526:	4f 91       	pop	r20
    3528:	5f 91       	pop	r21
    352a:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__mulsf3>
    352e:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <exp>
    3532:	29 f4       	brne	.+10     	; 0x353e <pow+0xac>
    3534:	16 f0       	brts	.+4      	; 0x353a <pow+0xa8>
    3536:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__fp_inf>
    353a:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__fp_zero>
    353e:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__fp_nan>

00003542 <exp>:
    3542:	0e 94 28 1a 	call	0x3450	; 0x3450 <__fp_splitA>
    3546:	a8 f3       	brcs	.-22     	; 0x3532 <pow+0xa0>
    3548:	96 38       	cpi	r25, 0x86	; 134
    354a:	a0 f7       	brcc	.-24     	; 0x3534 <pow+0xa2>
    354c:	07 f8       	bld	r0, 7
    354e:	0f 92       	push	r0
    3550:	e8 94       	clt
    3552:	2b e3       	ldi	r18, 0x3B	; 59
    3554:	3a ea       	ldi	r19, 0xAA	; 170
    3556:	48 eb       	ldi	r20, 0xB8	; 184
    3558:	5f e7       	ldi	r21, 0x7F	; 127
    355a:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__mulsf3_pse>
    355e:	0f 92       	push	r0
    3560:	0f 92       	push	r0
    3562:	0f 92       	push	r0
    3564:	4d b7       	in	r20, 0x3d	; 61
    3566:	5e b7       	in	r21, 0x3e	; 62
    3568:	0f 92       	push	r0
    356a:	0e 94 8c 1b 	call	0x3718	; 0x3718 <modf>
    356e:	ec e7       	ldi	r30, 0x7C	; 124
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__fp_powser>
    3576:	4f 91       	pop	r20
    3578:	5f 91       	pop	r21
    357a:	ef 91       	pop	r30
    357c:	ff 91       	pop	r31
    357e:	e5 95       	asr	r30
    3580:	ee 1f       	adc	r30, r30
    3582:	ff 1f       	adc	r31, r31
    3584:	49 f0       	breq	.+18     	; 0x3598 <exp+0x56>
    3586:	fe 57       	subi	r31, 0x7E	; 126
    3588:	e0 68       	ori	r30, 0x80	; 128
    358a:	44 27       	eor	r20, r20
    358c:	ee 0f       	add	r30, r30
    358e:	44 1f       	adc	r20, r20
    3590:	fa 95       	dec	r31
    3592:	e1 f7       	brne	.-8      	; 0x358c <exp+0x4a>
    3594:	41 95       	neg	r20
    3596:	55 0b       	sbc	r21, r21
    3598:	0e 94 06 1b 	call	0x360c	; 0x360c <ldexp>
    359c:	0f 90       	pop	r0
    359e:	07 fe       	sbrs	r0, 7
    35a0:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <inverse>
    35a4:	08 95       	ret

000035a6 <__fp_powser>:
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	1f 93       	push	r17
    35ac:	0f 93       	push	r16
    35ae:	ff 92       	push	r15
    35b0:	ef 92       	push	r14
    35b2:	df 92       	push	r13
    35b4:	7b 01       	movw	r14, r22
    35b6:	8c 01       	movw	r16, r24
    35b8:	68 94       	set
    35ba:	06 c0       	rjmp	.+12     	; 0x35c8 <__fp_powser+0x22>
    35bc:	da 2e       	mov	r13, r26
    35be:	ef 01       	movw	r28, r30
    35c0:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <__mulsf3x>
    35c4:	fe 01       	movw	r30, r28
    35c6:	e8 94       	clt
    35c8:	a5 91       	lpm	r26, Z+
    35ca:	25 91       	lpm	r18, Z+
    35cc:	35 91       	lpm	r19, Z+
    35ce:	45 91       	lpm	r20, Z+
    35d0:	55 91       	lpm	r21, Z+
    35d2:	a6 f3       	brts	.-24     	; 0x35bc <__fp_powser+0x16>
    35d4:	ef 01       	movw	r28, r30
    35d6:	0e 94 30 19 	call	0x3260	; 0x3260 <__addsf3x>
    35da:	fe 01       	movw	r30, r28
    35dc:	97 01       	movw	r18, r14
    35de:	a8 01       	movw	r20, r16
    35e0:	da 94       	dec	r13
    35e2:	69 f7       	brne	.-38     	; 0x35be <__fp_powser+0x18>
    35e4:	df 90       	pop	r13
    35e6:	ef 90       	pop	r14
    35e8:	ff 90       	pop	r15
    35ea:	0f 91       	pop	r16
    35ec:	1f 91       	pop	r17
    35ee:	cf 91       	pop	r28
    35f0:	df 91       	pop	r29
    35f2:	08 95       	ret

000035f4 <inverse>:
    35f4:	9b 01       	movw	r18, r22
    35f6:	ac 01       	movw	r20, r24
    35f8:	60 e0       	ldi	r22, 0x00	; 0
    35fa:	70 e0       	ldi	r23, 0x00	; 0
    35fc:	80 e8       	ldi	r24, 0x80	; 128
    35fe:	9f e3       	ldi	r25, 0x3F	; 63
    3600:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__divsf3>
    3604:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__fp_inf>
    3608:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <__fp_mpack>

0000360c <ldexp>:
    360c:	0e 94 28 1a 	call	0x3450	; 0x3450 <__fp_splitA>
    3610:	d8 f3       	brcs	.-10     	; 0x3608 <inverse+0x14>
    3612:	99 23       	and	r25, r25
    3614:	c9 f3       	breq	.-14     	; 0x3608 <inverse+0x14>
    3616:	94 0f       	add	r25, r20
    3618:	51 1d       	adc	r21, r1
    361a:	a3 f3       	brvs	.-24     	; 0x3604 <inverse+0x10>
    361c:	91 50       	subi	r25, 0x01	; 1
    361e:	50 40       	sbci	r21, 0x00	; 0
    3620:	94 f0       	brlt	.+36     	; 0x3646 <ldexp+0x3a>
    3622:	59 f0       	breq	.+22     	; 0x363a <ldexp+0x2e>
    3624:	88 23       	and	r24, r24
    3626:	32 f0       	brmi	.+12     	; 0x3634 <ldexp+0x28>
    3628:	66 0f       	add	r22, r22
    362a:	77 1f       	adc	r23, r23
    362c:	88 1f       	adc	r24, r24
    362e:	91 50       	subi	r25, 0x01	; 1
    3630:	50 40       	sbci	r21, 0x00	; 0
    3632:	c1 f7       	brne	.-16     	; 0x3624 <ldexp+0x18>
    3634:	9e 3f       	cpi	r25, 0xFE	; 254
    3636:	51 05       	cpc	r21, r1
    3638:	2c f7       	brge	.-54     	; 0x3604 <inverse+0x10>
    363a:	88 0f       	add	r24, r24
    363c:	91 1d       	adc	r25, r1
    363e:	96 95       	lsr	r25
    3640:	87 95       	ror	r24
    3642:	97 f9       	bld	r25, 7
    3644:	08 95       	ret
    3646:	5f 3f       	cpi	r21, 0xFF	; 255
    3648:	ac f0       	brlt	.+42     	; 0x3674 <ldexp+0x68>
    364a:	98 3e       	cpi	r25, 0xE8	; 232
    364c:	9c f0       	brlt	.+38     	; 0x3674 <ldexp+0x68>
    364e:	bb 27       	eor	r27, r27
    3650:	86 95       	lsr	r24
    3652:	77 95       	ror	r23
    3654:	67 95       	ror	r22
    3656:	b7 95       	ror	r27
    3658:	08 f4       	brcc	.+2      	; 0x365c <ldexp+0x50>
    365a:	b1 60       	ori	r27, 0x01	; 1
    365c:	93 95       	inc	r25
    365e:	c1 f7       	brne	.-16     	; 0x3650 <ldexp+0x44>
    3660:	bb 0f       	add	r27, r27
    3662:	58 f7       	brcc	.-42     	; 0x363a <ldexp+0x2e>
    3664:	11 f4       	brne	.+4      	; 0x366a <ldexp+0x5e>
    3666:	60 ff       	sbrs	r22, 0
    3668:	e8 cf       	rjmp	.-48     	; 0x363a <ldexp+0x2e>
    366a:	6f 5f       	subi	r22, 0xFF	; 255
    366c:	7f 4f       	sbci	r23, 0xFF	; 255
    366e:	8f 4f       	sbci	r24, 0xFF	; 255
    3670:	9f 4f       	sbci	r25, 0xFF	; 255
    3672:	e3 cf       	rjmp	.-58     	; 0x363a <ldexp+0x2e>
    3674:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__fp_szero>
    3678:	16 f0       	brts	.+4      	; 0x367e <ldexp+0x72>
    367a:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <__fp_mpack>
    367e:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__fp_nan>
    3682:	68 94       	set
    3684:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__fp_inf>

00003688 <log>:
    3688:	0e 94 28 1a 	call	0x3450	; 0x3450 <__fp_splitA>
    368c:	a8 f3       	brcs	.-22     	; 0x3678 <ldexp+0x6c>
    368e:	99 23       	and	r25, r25
    3690:	c1 f3       	breq	.-16     	; 0x3682 <ldexp+0x76>
    3692:	ae f3       	brts	.-22     	; 0x367e <ldexp+0x72>
    3694:	df 93       	push	r29
    3696:	cf 93       	push	r28
    3698:	1f 93       	push	r17
    369a:	0f 93       	push	r16
    369c:	ff 92       	push	r15
    369e:	c9 2f       	mov	r28, r25
    36a0:	dd 27       	eor	r29, r29
    36a2:	88 23       	and	r24, r24
    36a4:	2a f0       	brmi	.+10     	; 0x36b0 <log+0x28>
    36a6:	21 97       	sbiw	r28, 0x01	; 1
    36a8:	66 0f       	add	r22, r22
    36aa:	77 1f       	adc	r23, r23
    36ac:	88 1f       	adc	r24, r24
    36ae:	da f7       	brpl	.-10     	; 0x36a6 <log+0x1e>
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	40 e8       	ldi	r20, 0x80	; 128
    36b6:	5f eb       	ldi	r21, 0xBF	; 191
    36b8:	9f e3       	ldi	r25, 0x3F	; 63
    36ba:	88 39       	cpi	r24, 0x98	; 152
    36bc:	20 f0       	brcs	.+8      	; 0x36c6 <log+0x3e>
    36be:	80 3e       	cpi	r24, 0xE0	; 224
    36c0:	38 f0       	brcs	.+14     	; 0x36d0 <log+0x48>
    36c2:	21 96       	adiw	r28, 0x01	; 1
    36c4:	8f 77       	andi	r24, 0x7F	; 127
    36c6:	0e 94 19 19 	call	0x3232	; 0x3232 <__addsf3>
    36ca:	e4 ea       	ldi	r30, 0xA4	; 164
    36cc:	f0 e0       	ldi	r31, 0x00	; 0
    36ce:	04 c0       	rjmp	.+8      	; 0x36d8 <log+0x50>
    36d0:	0e 94 19 19 	call	0x3232	; 0x3232 <__addsf3>
    36d4:	e1 ed       	ldi	r30, 0xD1	; 209
    36d6:	f0 e0       	ldi	r31, 0x00	; 0
    36d8:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__fp_powser>
    36dc:	8b 01       	movw	r16, r22
    36de:	be 01       	movw	r22, r28
    36e0:	ec 01       	movw	r28, r24
    36e2:	fb 2e       	mov	r15, r27
    36e4:	6f 57       	subi	r22, 0x7F	; 127
    36e6:	71 09       	sbc	r23, r1
    36e8:	75 95       	asr	r23
    36ea:	77 1f       	adc	r23, r23
    36ec:	88 0b       	sbc	r24, r24
    36ee:	99 0b       	sbc	r25, r25
    36f0:	0e 94 bd 19 	call	0x337a	; 0x337a <__floatsisf>
    36f4:	28 e1       	ldi	r18, 0x18	; 24
    36f6:	32 e7       	ldi	r19, 0x72	; 114
    36f8:	41 e3       	ldi	r20, 0x31	; 49
    36fa:	5f e3       	ldi	r21, 0x3F	; 63
    36fc:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <__mulsf3x>
    3700:	af 2d       	mov	r26, r15
    3702:	98 01       	movw	r18, r16
    3704:	ae 01       	movw	r20, r28
    3706:	ff 90       	pop	r15
    3708:	0f 91       	pop	r16
    370a:	1f 91       	pop	r17
    370c:	cf 91       	pop	r28
    370e:	df 91       	pop	r29
    3710:	0e 94 30 19 	call	0x3260	; 0x3260 <__addsf3x>
    3714:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__fp_round>

00003718 <modf>:
    3718:	fa 01       	movw	r30, r20
    371a:	dc 01       	movw	r26, r24
    371c:	aa 0f       	add	r26, r26
    371e:	bb 1f       	adc	r27, r27
    3720:	9b 01       	movw	r18, r22
    3722:	ac 01       	movw	r20, r24
    3724:	bf 57       	subi	r27, 0x7F	; 127
    3726:	28 f4       	brcc	.+10     	; 0x3732 <modf+0x1a>
    3728:	22 27       	eor	r18, r18
    372a:	33 27       	eor	r19, r19
    372c:	44 27       	eor	r20, r20
    372e:	50 78       	andi	r21, 0x80	; 128
    3730:	20 c0       	rjmp	.+64     	; 0x3772 <modf+0x5a>
    3732:	b7 51       	subi	r27, 0x17	; 23
    3734:	90 f4       	brcc	.+36     	; 0x375a <modf+0x42>
    3736:	ab 2f       	mov	r26, r27
    3738:	00 24       	eor	r0, r0
    373a:	46 95       	lsr	r20
    373c:	37 95       	ror	r19
    373e:	27 95       	ror	r18
    3740:	01 1c       	adc	r0, r1
    3742:	a3 95       	inc	r26
    3744:	d2 f3       	brmi	.-12     	; 0x373a <modf+0x22>
    3746:	00 20       	and	r0, r0
    3748:	71 f0       	breq	.+28     	; 0x3766 <modf+0x4e>
    374a:	22 0f       	add	r18, r18
    374c:	33 1f       	adc	r19, r19
    374e:	44 1f       	adc	r20, r20
    3750:	b3 95       	inc	r27
    3752:	da f3       	brmi	.-10     	; 0x374a <modf+0x32>
    3754:	0e d0       	rcall	.+28     	; 0x3772 <modf+0x5a>
    3756:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__subsf3>
    375a:	61 30       	cpi	r22, 0x01	; 1
    375c:	71 05       	cpc	r23, r1
    375e:	a0 e8       	ldi	r26, 0x80	; 128
    3760:	8a 07       	cpc	r24, r26
    3762:	b9 46       	sbci	r27, 0x69	; 105
    3764:	30 f4       	brcc	.+12     	; 0x3772 <modf+0x5a>
    3766:	9b 01       	movw	r18, r22
    3768:	ac 01       	movw	r20, r24
    376a:	66 27       	eor	r22, r22
    376c:	77 27       	eor	r23, r23
    376e:	88 27       	eor	r24, r24
    3770:	90 78       	andi	r25, 0x80	; 128
    3772:	30 96       	adiw	r30, 0x00	; 0
    3774:	21 f0       	breq	.+8      	; 0x377e <modf+0x66>
    3776:	20 83       	st	Z, r18
    3778:	31 83       	std	Z+1, r19	; 0x01
    377a:	42 83       	std	Z+2, r20	; 0x02
    377c:	53 83       	std	Z+3, r21	; 0x03
    377e:	08 95       	ret

00003780 <__mulsf3>:
    3780:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <__mulsf3x>
    3784:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__fp_round>
    3788:	0e 94 01 1a 	call	0x3402	; 0x3402 <__fp_pscA>
    378c:	38 f0       	brcs	.+14     	; 0x379c <__mulsf3+0x1c>
    378e:	0e 94 08 1a 	call	0x3410	; 0x3410 <__fp_pscB>
    3792:	20 f0       	brcs	.+8      	; 0x379c <__mulsf3+0x1c>
    3794:	95 23       	and	r25, r21
    3796:	11 f0       	breq	.+4      	; 0x379c <__mulsf3+0x1c>
    3798:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__fp_inf>
    379c:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__fp_nan>
    37a0:	11 24       	eor	r1, r1
    37a2:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__fp_szero>

000037a6 <__mulsf3x>:
    37a6:	0e 94 20 1a 	call	0x3440	; 0x3440 <__fp_split3>
    37aa:	70 f3       	brcs	.-36     	; 0x3788 <__mulsf3+0x8>

000037ac <__mulsf3_pse>:
    37ac:	95 9f       	mul	r25, r21
    37ae:	c1 f3       	breq	.-16     	; 0x37a0 <__mulsf3+0x20>
    37b0:	95 0f       	add	r25, r21
    37b2:	50 e0       	ldi	r21, 0x00	; 0
    37b4:	55 1f       	adc	r21, r21
    37b6:	62 9f       	mul	r22, r18
    37b8:	f0 01       	movw	r30, r0
    37ba:	72 9f       	mul	r23, r18
    37bc:	bb 27       	eor	r27, r27
    37be:	f0 0d       	add	r31, r0
    37c0:	b1 1d       	adc	r27, r1
    37c2:	63 9f       	mul	r22, r19
    37c4:	aa 27       	eor	r26, r26
    37c6:	f0 0d       	add	r31, r0
    37c8:	b1 1d       	adc	r27, r1
    37ca:	aa 1f       	adc	r26, r26
    37cc:	64 9f       	mul	r22, r20
    37ce:	66 27       	eor	r22, r22
    37d0:	b0 0d       	add	r27, r0
    37d2:	a1 1d       	adc	r26, r1
    37d4:	66 1f       	adc	r22, r22
    37d6:	82 9f       	mul	r24, r18
    37d8:	22 27       	eor	r18, r18
    37da:	b0 0d       	add	r27, r0
    37dc:	a1 1d       	adc	r26, r1
    37de:	62 1f       	adc	r22, r18
    37e0:	73 9f       	mul	r23, r19
    37e2:	b0 0d       	add	r27, r0
    37e4:	a1 1d       	adc	r26, r1
    37e6:	62 1f       	adc	r22, r18
    37e8:	83 9f       	mul	r24, r19
    37ea:	a0 0d       	add	r26, r0
    37ec:	61 1d       	adc	r22, r1
    37ee:	22 1f       	adc	r18, r18
    37f0:	74 9f       	mul	r23, r20
    37f2:	33 27       	eor	r19, r19
    37f4:	a0 0d       	add	r26, r0
    37f6:	61 1d       	adc	r22, r1
    37f8:	23 1f       	adc	r18, r19
    37fa:	84 9f       	mul	r24, r20
    37fc:	60 0d       	add	r22, r0
    37fe:	21 1d       	adc	r18, r1
    3800:	82 2f       	mov	r24, r18
    3802:	76 2f       	mov	r23, r22
    3804:	6a 2f       	mov	r22, r26
    3806:	11 24       	eor	r1, r1
    3808:	9f 57       	subi	r25, 0x7F	; 127
    380a:	50 40       	sbci	r21, 0x00	; 0
    380c:	9a f0       	brmi	.+38     	; 0x3834 <__mulsf3_pse+0x88>
    380e:	f1 f0       	breq	.+60     	; 0x384c <__mulsf3_pse+0xa0>
    3810:	88 23       	and	r24, r24
    3812:	4a f0       	brmi	.+18     	; 0x3826 <__mulsf3_pse+0x7a>
    3814:	ee 0f       	add	r30, r30
    3816:	ff 1f       	adc	r31, r31
    3818:	bb 1f       	adc	r27, r27
    381a:	66 1f       	adc	r22, r22
    381c:	77 1f       	adc	r23, r23
    381e:	88 1f       	adc	r24, r24
    3820:	91 50       	subi	r25, 0x01	; 1
    3822:	50 40       	sbci	r21, 0x00	; 0
    3824:	a9 f7       	brne	.-22     	; 0x3810 <__mulsf3_pse+0x64>
    3826:	9e 3f       	cpi	r25, 0xFE	; 254
    3828:	51 05       	cpc	r21, r1
    382a:	80 f0       	brcs	.+32     	; 0x384c <__mulsf3_pse+0xa0>
    382c:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__fp_inf>
    3830:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__fp_szero>
    3834:	5f 3f       	cpi	r21, 0xFF	; 255
    3836:	e4 f3       	brlt	.-8      	; 0x3830 <__mulsf3_pse+0x84>
    3838:	98 3e       	cpi	r25, 0xE8	; 232
    383a:	d4 f3       	brlt	.-12     	; 0x3830 <__mulsf3_pse+0x84>
    383c:	86 95       	lsr	r24
    383e:	77 95       	ror	r23
    3840:	67 95       	ror	r22
    3842:	b7 95       	ror	r27
    3844:	f7 95       	ror	r31
    3846:	e7 95       	ror	r30
    3848:	9f 5f       	subi	r25, 0xFF	; 255
    384a:	c1 f7       	brne	.-16     	; 0x383c <__mulsf3_pse+0x90>
    384c:	fe 2b       	or	r31, r30
    384e:	88 0f       	add	r24, r24
    3850:	91 1d       	adc	r25, r1
    3852:	96 95       	lsr	r25
    3854:	87 95       	ror	r24
    3856:	97 f9       	bld	r25, 7
    3858:	08 95       	ret

0000385a <__divsf3>:
    385a:	0e 94 41 1c 	call	0x3882	; 0x3882 <__divsf3x>
    385e:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__fp_round>
    3862:	0e 94 08 1a 	call	0x3410	; 0x3410 <__fp_pscB>
    3866:	58 f0       	brcs	.+22     	; 0x387e <__divsf3+0x24>
    3868:	0e 94 01 1a 	call	0x3402	; 0x3402 <__fp_pscA>
    386c:	40 f0       	brcs	.+16     	; 0x387e <__divsf3+0x24>
    386e:	29 f4       	brne	.+10     	; 0x387a <__divsf3+0x20>
    3870:	5f 3f       	cpi	r21, 0xFF	; 255
    3872:	29 f0       	breq	.+10     	; 0x387e <__divsf3+0x24>
    3874:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__fp_inf>
    3878:	51 11       	cpse	r21, r1
    387a:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__fp_szero>
    387e:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__fp_nan>

00003882 <__divsf3x>:
    3882:	0e 94 20 1a 	call	0x3440	; 0x3440 <__fp_split3>
    3886:	68 f3       	brcs	.-38     	; 0x3862 <__divsf3+0x8>

00003888 <__divsf3_pse>:
    3888:	99 23       	and	r25, r25
    388a:	b1 f3       	breq	.-20     	; 0x3878 <__divsf3+0x1e>
    388c:	55 23       	and	r21, r21
    388e:	91 f3       	breq	.-28     	; 0x3874 <__divsf3+0x1a>
    3890:	95 1b       	sub	r25, r21
    3892:	55 0b       	sbc	r21, r21
    3894:	bb 27       	eor	r27, r27
    3896:	aa 27       	eor	r26, r26
    3898:	62 17       	cp	r22, r18
    389a:	73 07       	cpc	r23, r19
    389c:	84 07       	cpc	r24, r20
    389e:	38 f0       	brcs	.+14     	; 0x38ae <__divsf3_pse+0x26>
    38a0:	9f 5f       	subi	r25, 0xFF	; 255
    38a2:	5f 4f       	sbci	r21, 0xFF	; 255
    38a4:	22 0f       	add	r18, r18
    38a6:	33 1f       	adc	r19, r19
    38a8:	44 1f       	adc	r20, r20
    38aa:	aa 1f       	adc	r26, r26
    38ac:	a9 f3       	breq	.-22     	; 0x3898 <__divsf3_pse+0x10>
    38ae:	35 d0       	rcall	.+106    	; 0x391a <__divsf3_pse+0x92>
    38b0:	0e 2e       	mov	r0, r30
    38b2:	3a f0       	brmi	.+14     	; 0x38c2 <__divsf3_pse+0x3a>
    38b4:	e0 e8       	ldi	r30, 0x80	; 128
    38b6:	32 d0       	rcall	.+100    	; 0x391c <__divsf3_pse+0x94>
    38b8:	91 50       	subi	r25, 0x01	; 1
    38ba:	50 40       	sbci	r21, 0x00	; 0
    38bc:	e6 95       	lsr	r30
    38be:	00 1c       	adc	r0, r0
    38c0:	ca f7       	brpl	.-14     	; 0x38b4 <__divsf3_pse+0x2c>
    38c2:	2b d0       	rcall	.+86     	; 0x391a <__divsf3_pse+0x92>
    38c4:	fe 2f       	mov	r31, r30
    38c6:	29 d0       	rcall	.+82     	; 0x391a <__divsf3_pse+0x92>
    38c8:	66 0f       	add	r22, r22
    38ca:	77 1f       	adc	r23, r23
    38cc:	88 1f       	adc	r24, r24
    38ce:	bb 1f       	adc	r27, r27
    38d0:	26 17       	cp	r18, r22
    38d2:	37 07       	cpc	r19, r23
    38d4:	48 07       	cpc	r20, r24
    38d6:	ab 07       	cpc	r26, r27
    38d8:	b0 e8       	ldi	r27, 0x80	; 128
    38da:	09 f0       	breq	.+2      	; 0x38de <__divsf3_pse+0x56>
    38dc:	bb 0b       	sbc	r27, r27
    38de:	80 2d       	mov	r24, r0
    38e0:	bf 01       	movw	r22, r30
    38e2:	ff 27       	eor	r31, r31
    38e4:	93 58       	subi	r25, 0x83	; 131
    38e6:	5f 4f       	sbci	r21, 0xFF	; 255
    38e8:	3a f0       	brmi	.+14     	; 0x38f8 <__divsf3_pse+0x70>
    38ea:	9e 3f       	cpi	r25, 0xFE	; 254
    38ec:	51 05       	cpc	r21, r1
    38ee:	78 f0       	brcs	.+30     	; 0x390e <__divsf3_pse+0x86>
    38f0:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__fp_inf>
    38f4:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__fp_szero>
    38f8:	5f 3f       	cpi	r21, 0xFF	; 255
    38fa:	e4 f3       	brlt	.-8      	; 0x38f4 <__divsf3_pse+0x6c>
    38fc:	98 3e       	cpi	r25, 0xE8	; 232
    38fe:	d4 f3       	brlt	.-12     	; 0x38f4 <__divsf3_pse+0x6c>
    3900:	86 95       	lsr	r24
    3902:	77 95       	ror	r23
    3904:	67 95       	ror	r22
    3906:	b7 95       	ror	r27
    3908:	f7 95       	ror	r31
    390a:	9f 5f       	subi	r25, 0xFF	; 255
    390c:	c9 f7       	brne	.-14     	; 0x3900 <__divsf3_pse+0x78>
    390e:	88 0f       	add	r24, r24
    3910:	91 1d       	adc	r25, r1
    3912:	96 95       	lsr	r25
    3914:	87 95       	ror	r24
    3916:	97 f9       	bld	r25, 7
    3918:	08 95       	ret
    391a:	e1 e0       	ldi	r30, 0x01	; 1
    391c:	66 0f       	add	r22, r22
    391e:	77 1f       	adc	r23, r23
    3920:	88 1f       	adc	r24, r24
    3922:	bb 1f       	adc	r27, r27
    3924:	62 17       	cp	r22, r18
    3926:	73 07       	cpc	r23, r19
    3928:	84 07       	cpc	r24, r20
    392a:	ba 07       	cpc	r27, r26
    392c:	20 f0       	brcs	.+8      	; 0x3936 <__divsf3_pse+0xae>
    392e:	62 1b       	sub	r22, r18
    3930:	73 0b       	sbc	r23, r19
    3932:	84 0b       	sbc	r24, r20
    3934:	ba 0b       	sbc	r27, r26
    3936:	ee 1f       	adc	r30, r30
    3938:	88 f7       	brcc	.-30     	; 0x391c <__divsf3_pse+0x94>
    393a:	e0 95       	com	r30
    393c:	08 95       	ret

0000393e <__fp_mpack>:
    393e:	9f 3f       	cpi	r25, 0xFF	; 255
    3940:	31 f0       	breq	.+12     	; 0x394e <__fp_mpack_finite+0xc>

00003942 <__fp_mpack_finite>:
    3942:	91 50       	subi	r25, 0x01	; 1
    3944:	20 f4       	brcc	.+8      	; 0x394e <__fp_mpack_finite+0xc>
    3946:	87 95       	ror	r24
    3948:	77 95       	ror	r23
    394a:	67 95       	ror	r22
    394c:	b7 95       	ror	r27
    394e:	88 0f       	add	r24, r24
    3950:	91 1d       	adc	r25, r1
    3952:	96 95       	lsr	r25
    3954:	87 95       	ror	r24
    3956:	97 f9       	bld	r25, 7
    3958:	08 95       	ret

0000395a <__udivmodsi4>:
    395a:	a1 e2       	ldi	r26, 0x21	; 33
    395c:	1a 2e       	mov	r1, r26
    395e:	aa 1b       	sub	r26, r26
    3960:	bb 1b       	sub	r27, r27
    3962:	fd 01       	movw	r30, r26
    3964:	0d c0       	rjmp	.+26     	; 0x3980 <__udivmodsi4_ep>

00003966 <__udivmodsi4_loop>:
    3966:	aa 1f       	adc	r26, r26
    3968:	bb 1f       	adc	r27, r27
    396a:	ee 1f       	adc	r30, r30
    396c:	ff 1f       	adc	r31, r31
    396e:	a2 17       	cp	r26, r18
    3970:	b3 07       	cpc	r27, r19
    3972:	e4 07       	cpc	r30, r20
    3974:	f5 07       	cpc	r31, r21
    3976:	20 f0       	brcs	.+8      	; 0x3980 <__udivmodsi4_ep>
    3978:	a2 1b       	sub	r26, r18
    397a:	b3 0b       	sbc	r27, r19
    397c:	e4 0b       	sbc	r30, r20
    397e:	f5 0b       	sbc	r31, r21

00003980 <__udivmodsi4_ep>:
    3980:	66 1f       	adc	r22, r22
    3982:	77 1f       	adc	r23, r23
    3984:	88 1f       	adc	r24, r24
    3986:	99 1f       	adc	r25, r25
    3988:	1a 94       	dec	r1
    398a:	69 f7       	brne	.-38     	; 0x3966 <__udivmodsi4_loop>
    398c:	60 95       	com	r22
    398e:	70 95       	com	r23
    3990:	80 95       	com	r24
    3992:	90 95       	com	r25
    3994:	9b 01       	movw	r18, r22
    3996:	ac 01       	movw	r20, r24
    3998:	bd 01       	movw	r22, r26
    399a:	cf 01       	movw	r24, r30
    399c:	08 95       	ret

0000399e <malloc>:
    399e:	0f 93       	push	r16
    39a0:	1f 93       	push	r17
    39a2:	cf 93       	push	r28
    39a4:	df 93       	push	r29
    39a6:	82 30       	cpi	r24, 0x02	; 2
    39a8:	91 05       	cpc	r25, r1
    39aa:	10 f4       	brcc	.+4      	; 0x39b0 <malloc+0x12>
    39ac:	82 e0       	ldi	r24, 0x02	; 2
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <__flp>
    39b4:	f0 91 3b 07 	lds	r31, 0x073B	; 0x80073b <__flp+0x1>
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	a0 e0       	ldi	r26, 0x00	; 0
    39be:	b0 e0       	ldi	r27, 0x00	; 0
    39c0:	30 97       	sbiw	r30, 0x00	; 0
    39c2:	19 f1       	breq	.+70     	; 0x3a0a <malloc+0x6c>
    39c4:	40 81       	ld	r20, Z
    39c6:	51 81       	ldd	r21, Z+1	; 0x01
    39c8:	02 81       	ldd	r16, Z+2	; 0x02
    39ca:	13 81       	ldd	r17, Z+3	; 0x03
    39cc:	48 17       	cp	r20, r24
    39ce:	59 07       	cpc	r21, r25
    39d0:	c8 f0       	brcs	.+50     	; 0x3a04 <malloc+0x66>
    39d2:	84 17       	cp	r24, r20
    39d4:	95 07       	cpc	r25, r21
    39d6:	69 f4       	brne	.+26     	; 0x39f2 <malloc+0x54>
    39d8:	10 97       	sbiw	r26, 0x00	; 0
    39da:	31 f0       	breq	.+12     	; 0x39e8 <malloc+0x4a>
    39dc:	12 96       	adiw	r26, 0x02	; 2
    39de:	0c 93       	st	X, r16
    39e0:	12 97       	sbiw	r26, 0x02	; 2
    39e2:	13 96       	adiw	r26, 0x03	; 3
    39e4:	1c 93       	st	X, r17
    39e6:	27 c0       	rjmp	.+78     	; 0x3a36 <malloc+0x98>
    39e8:	00 93 3a 07 	sts	0x073A, r16	; 0x80073a <__flp>
    39ec:	10 93 3b 07 	sts	0x073B, r17	; 0x80073b <__flp+0x1>
    39f0:	22 c0       	rjmp	.+68     	; 0x3a36 <malloc+0x98>
    39f2:	21 15       	cp	r18, r1
    39f4:	31 05       	cpc	r19, r1
    39f6:	19 f0       	breq	.+6      	; 0x39fe <malloc+0x60>
    39f8:	42 17       	cp	r20, r18
    39fa:	53 07       	cpc	r21, r19
    39fc:	18 f4       	brcc	.+6      	; 0x3a04 <malloc+0x66>
    39fe:	9a 01       	movw	r18, r20
    3a00:	bd 01       	movw	r22, r26
    3a02:	ef 01       	movw	r28, r30
    3a04:	df 01       	movw	r26, r30
    3a06:	f8 01       	movw	r30, r16
    3a08:	db cf       	rjmp	.-74     	; 0x39c0 <malloc+0x22>
    3a0a:	21 15       	cp	r18, r1
    3a0c:	31 05       	cpc	r19, r1
    3a0e:	f9 f0       	breq	.+62     	; 0x3a4e <malloc+0xb0>
    3a10:	28 1b       	sub	r18, r24
    3a12:	39 0b       	sbc	r19, r25
    3a14:	24 30       	cpi	r18, 0x04	; 4
    3a16:	31 05       	cpc	r19, r1
    3a18:	80 f4       	brcc	.+32     	; 0x3a3a <malloc+0x9c>
    3a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a1e:	61 15       	cp	r22, r1
    3a20:	71 05       	cpc	r23, r1
    3a22:	21 f0       	breq	.+8      	; 0x3a2c <malloc+0x8e>
    3a24:	fb 01       	movw	r30, r22
    3a26:	93 83       	std	Z+3, r25	; 0x03
    3a28:	82 83       	std	Z+2, r24	; 0x02
    3a2a:	04 c0       	rjmp	.+8      	; 0x3a34 <malloc+0x96>
    3a2c:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <__flp+0x1>
    3a30:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <__flp>
    3a34:	fe 01       	movw	r30, r28
    3a36:	32 96       	adiw	r30, 0x02	; 2
    3a38:	44 c0       	rjmp	.+136    	; 0x3ac2 <malloc+0x124>
    3a3a:	fe 01       	movw	r30, r28
    3a3c:	e2 0f       	add	r30, r18
    3a3e:	f3 1f       	adc	r31, r19
    3a40:	81 93       	st	Z+, r24
    3a42:	91 93       	st	Z+, r25
    3a44:	22 50       	subi	r18, 0x02	; 2
    3a46:	31 09       	sbc	r19, r1
    3a48:	39 83       	std	Y+1, r19	; 0x01
    3a4a:	28 83       	st	Y, r18
    3a4c:	3a c0       	rjmp	.+116    	; 0x3ac2 <malloc+0x124>
    3a4e:	20 91 38 07 	lds	r18, 0x0738	; 0x800738 <__brkval>
    3a52:	30 91 39 07 	lds	r19, 0x0739	; 0x800739 <__brkval+0x1>
    3a56:	23 2b       	or	r18, r19
    3a58:	41 f4       	brne	.+16     	; 0x3a6a <malloc+0xcc>
    3a5a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3a5e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3a62:	30 93 39 07 	sts	0x0739, r19	; 0x800739 <__brkval+0x1>
    3a66:	20 93 38 07 	sts	0x0738, r18	; 0x800738 <__brkval>
    3a6a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3a6e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3a72:	21 15       	cp	r18, r1
    3a74:	31 05       	cpc	r19, r1
    3a76:	41 f4       	brne	.+16     	; 0x3a88 <malloc+0xea>
    3a78:	2d b7       	in	r18, 0x3d	; 61
    3a7a:	3e b7       	in	r19, 0x3e	; 62
    3a7c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3a80:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3a84:	24 1b       	sub	r18, r20
    3a86:	35 0b       	sbc	r19, r21
    3a88:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <__brkval>
    3a8c:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <__brkval+0x1>
    3a90:	e2 17       	cp	r30, r18
    3a92:	f3 07       	cpc	r31, r19
    3a94:	a0 f4       	brcc	.+40     	; 0x3abe <malloc+0x120>
    3a96:	2e 1b       	sub	r18, r30
    3a98:	3f 0b       	sbc	r19, r31
    3a9a:	28 17       	cp	r18, r24
    3a9c:	39 07       	cpc	r19, r25
    3a9e:	78 f0       	brcs	.+30     	; 0x3abe <malloc+0x120>
    3aa0:	ac 01       	movw	r20, r24
    3aa2:	4e 5f       	subi	r20, 0xFE	; 254
    3aa4:	5f 4f       	sbci	r21, 0xFF	; 255
    3aa6:	24 17       	cp	r18, r20
    3aa8:	35 07       	cpc	r19, r21
    3aaa:	48 f0       	brcs	.+18     	; 0x3abe <malloc+0x120>
    3aac:	4e 0f       	add	r20, r30
    3aae:	5f 1f       	adc	r21, r31
    3ab0:	50 93 39 07 	sts	0x0739, r21	; 0x800739 <__brkval+0x1>
    3ab4:	40 93 38 07 	sts	0x0738, r20	; 0x800738 <__brkval>
    3ab8:	81 93       	st	Z+, r24
    3aba:	91 93       	st	Z+, r25
    3abc:	02 c0       	rjmp	.+4      	; 0x3ac2 <malloc+0x124>
    3abe:	e0 e0       	ldi	r30, 0x00	; 0
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	cf 01       	movw	r24, r30
    3ac4:	df 91       	pop	r29
    3ac6:	cf 91       	pop	r28
    3ac8:	1f 91       	pop	r17
    3aca:	0f 91       	pop	r16
    3acc:	08 95       	ret

00003ace <free>:
    3ace:	cf 93       	push	r28
    3ad0:	df 93       	push	r29
    3ad2:	00 97       	sbiw	r24, 0x00	; 0
    3ad4:	09 f4       	brne	.+2      	; 0x3ad8 <free+0xa>
    3ad6:	81 c0       	rjmp	.+258    	; 0x3bda <free+0x10c>
    3ad8:	fc 01       	movw	r30, r24
    3ada:	32 97       	sbiw	r30, 0x02	; 2
    3adc:	13 82       	std	Z+3, r1	; 0x03
    3ade:	12 82       	std	Z+2, r1	; 0x02
    3ae0:	a0 91 3a 07 	lds	r26, 0x073A	; 0x80073a <__flp>
    3ae4:	b0 91 3b 07 	lds	r27, 0x073B	; 0x80073b <__flp+0x1>
    3ae8:	10 97       	sbiw	r26, 0x00	; 0
    3aea:	81 f4       	brne	.+32     	; 0x3b0c <free+0x3e>
    3aec:	20 81       	ld	r18, Z
    3aee:	31 81       	ldd	r19, Z+1	; 0x01
    3af0:	82 0f       	add	r24, r18
    3af2:	93 1f       	adc	r25, r19
    3af4:	20 91 38 07 	lds	r18, 0x0738	; 0x800738 <__brkval>
    3af8:	30 91 39 07 	lds	r19, 0x0739	; 0x800739 <__brkval+0x1>
    3afc:	28 17       	cp	r18, r24
    3afe:	39 07       	cpc	r19, r25
    3b00:	51 f5       	brne	.+84     	; 0x3b56 <free+0x88>
    3b02:	f0 93 39 07 	sts	0x0739, r31	; 0x800739 <__brkval+0x1>
    3b06:	e0 93 38 07 	sts	0x0738, r30	; 0x800738 <__brkval>
    3b0a:	67 c0       	rjmp	.+206    	; 0x3bda <free+0x10c>
    3b0c:	ed 01       	movw	r28, r26
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	ce 17       	cp	r28, r30
    3b14:	df 07       	cpc	r29, r31
    3b16:	40 f4       	brcc	.+16     	; 0x3b28 <free+0x5a>
    3b18:	4a 81       	ldd	r20, Y+2	; 0x02
    3b1a:	5b 81       	ldd	r21, Y+3	; 0x03
    3b1c:	9e 01       	movw	r18, r28
    3b1e:	41 15       	cp	r20, r1
    3b20:	51 05       	cpc	r21, r1
    3b22:	f1 f0       	breq	.+60     	; 0x3b60 <free+0x92>
    3b24:	ea 01       	movw	r28, r20
    3b26:	f5 cf       	rjmp	.-22     	; 0x3b12 <free+0x44>
    3b28:	d3 83       	std	Z+3, r29	; 0x03
    3b2a:	c2 83       	std	Z+2, r28	; 0x02
    3b2c:	40 81       	ld	r20, Z
    3b2e:	51 81       	ldd	r21, Z+1	; 0x01
    3b30:	84 0f       	add	r24, r20
    3b32:	95 1f       	adc	r25, r21
    3b34:	c8 17       	cp	r28, r24
    3b36:	d9 07       	cpc	r29, r25
    3b38:	59 f4       	brne	.+22     	; 0x3b50 <free+0x82>
    3b3a:	88 81       	ld	r24, Y
    3b3c:	99 81       	ldd	r25, Y+1	; 0x01
    3b3e:	84 0f       	add	r24, r20
    3b40:	95 1f       	adc	r25, r21
    3b42:	02 96       	adiw	r24, 0x02	; 2
    3b44:	91 83       	std	Z+1, r25	; 0x01
    3b46:	80 83       	st	Z, r24
    3b48:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b4c:	93 83       	std	Z+3, r25	; 0x03
    3b4e:	82 83       	std	Z+2, r24	; 0x02
    3b50:	21 15       	cp	r18, r1
    3b52:	31 05       	cpc	r19, r1
    3b54:	29 f4       	brne	.+10     	; 0x3b60 <free+0x92>
    3b56:	f0 93 3b 07 	sts	0x073B, r31	; 0x80073b <__flp+0x1>
    3b5a:	e0 93 3a 07 	sts	0x073A, r30	; 0x80073a <__flp>
    3b5e:	3d c0       	rjmp	.+122    	; 0x3bda <free+0x10c>
    3b60:	e9 01       	movw	r28, r18
    3b62:	fb 83       	std	Y+3, r31	; 0x03
    3b64:	ea 83       	std	Y+2, r30	; 0x02
    3b66:	49 91       	ld	r20, Y+
    3b68:	59 91       	ld	r21, Y+
    3b6a:	c4 0f       	add	r28, r20
    3b6c:	d5 1f       	adc	r29, r21
    3b6e:	ec 17       	cp	r30, r28
    3b70:	fd 07       	cpc	r31, r29
    3b72:	61 f4       	brne	.+24     	; 0x3b8c <free+0xbe>
    3b74:	80 81       	ld	r24, Z
    3b76:	91 81       	ldd	r25, Z+1	; 0x01
    3b78:	84 0f       	add	r24, r20
    3b7a:	95 1f       	adc	r25, r21
    3b7c:	02 96       	adiw	r24, 0x02	; 2
    3b7e:	e9 01       	movw	r28, r18
    3b80:	99 83       	std	Y+1, r25	; 0x01
    3b82:	88 83       	st	Y, r24
    3b84:	82 81       	ldd	r24, Z+2	; 0x02
    3b86:	93 81       	ldd	r25, Z+3	; 0x03
    3b88:	9b 83       	std	Y+3, r25	; 0x03
    3b8a:	8a 83       	std	Y+2, r24	; 0x02
    3b8c:	e0 e0       	ldi	r30, 0x00	; 0
    3b8e:	f0 e0       	ldi	r31, 0x00	; 0
    3b90:	12 96       	adiw	r26, 0x02	; 2
    3b92:	8d 91       	ld	r24, X+
    3b94:	9c 91       	ld	r25, X
    3b96:	13 97       	sbiw	r26, 0x03	; 3
    3b98:	00 97       	sbiw	r24, 0x00	; 0
    3b9a:	19 f0       	breq	.+6      	; 0x3ba2 <free+0xd4>
    3b9c:	fd 01       	movw	r30, r26
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	f7 cf       	rjmp	.-18     	; 0x3b90 <free+0xc2>
    3ba2:	8d 91       	ld	r24, X+
    3ba4:	9c 91       	ld	r25, X
    3ba6:	11 97       	sbiw	r26, 0x01	; 1
    3ba8:	9d 01       	movw	r18, r26
    3baa:	2e 5f       	subi	r18, 0xFE	; 254
    3bac:	3f 4f       	sbci	r19, 0xFF	; 255
    3bae:	82 0f       	add	r24, r18
    3bb0:	93 1f       	adc	r25, r19
    3bb2:	20 91 38 07 	lds	r18, 0x0738	; 0x800738 <__brkval>
    3bb6:	30 91 39 07 	lds	r19, 0x0739	; 0x800739 <__brkval+0x1>
    3bba:	28 17       	cp	r18, r24
    3bbc:	39 07       	cpc	r19, r25
    3bbe:	69 f4       	brne	.+26     	; 0x3bda <free+0x10c>
    3bc0:	30 97       	sbiw	r30, 0x00	; 0
    3bc2:	29 f4       	brne	.+10     	; 0x3bce <free+0x100>
    3bc4:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <__flp+0x1>
    3bc8:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <__flp>
    3bcc:	02 c0       	rjmp	.+4      	; 0x3bd2 <free+0x104>
    3bce:	13 82       	std	Z+3, r1	; 0x03
    3bd0:	12 82       	std	Z+2, r1	; 0x02
    3bd2:	b0 93 39 07 	sts	0x0739, r27	; 0x800739 <__brkval+0x1>
    3bd6:	a0 93 38 07 	sts	0x0738, r26	; 0x800738 <__brkval>
    3bda:	df 91       	pop	r29
    3bdc:	cf 91       	pop	r28
    3bde:	08 95       	ret

00003be0 <memcpy>:
    3be0:	fb 01       	movw	r30, r22
    3be2:	dc 01       	movw	r26, r24
    3be4:	02 c0       	rjmp	.+4      	; 0x3bea <memcpy+0xa>
    3be6:	01 90       	ld	r0, Z+
    3be8:	0d 92       	st	X+, r0
    3bea:	41 50       	subi	r20, 0x01	; 1
    3bec:	50 40       	sbci	r21, 0x00	; 0
    3bee:	d8 f7       	brcc	.-10     	; 0x3be6 <memcpy+0x6>
    3bf0:	08 95       	ret

00003bf2 <memset>:
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	01 c0       	rjmp	.+2      	; 0x3bf8 <memset+0x6>
    3bf6:	6d 93       	st	X+, r22
    3bf8:	41 50       	subi	r20, 0x01	; 1
    3bfa:	50 40       	sbci	r21, 0x00	; 0
    3bfc:	e0 f7       	brcc	.-8      	; 0x3bf6 <memset+0x4>
    3bfe:	08 95       	ret

00003c00 <_exit>:
    3c00:	f8 94       	cli

00003c02 <__stop_program>:
    3c02:	ff cf       	rjmp	.-2      	; 0x3c02 <__stop_program>
