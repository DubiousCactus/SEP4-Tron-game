
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000425a  000042ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000425a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000660  00800150  00800150  0000433e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000433e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f0  00000000  00000000  000043b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041e1  00000000  00000000  000048a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001290  00000000  00000000  00008a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000039b4  00000000  00000000  00009d11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000137c  00000000  00000000  0000d6c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ca9  00000000  00000000  0000ea44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000298c  00000000  00000000  000106ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  00013079  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__ctors_end>
       4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      34:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <__vector_13>
      38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      40:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__vector_16>
      44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      50:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__vector_20>
      54:	0c 94 3f 10 	jmp	0x207e	; 0x207e <__vector_21>
      58:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      5c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      60:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      64:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      68:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      6c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      70:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <__vector_28>
      74:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__vector_29>
      78:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	08 00       	.word	0x0008	; ????
      a6:	00 00       	nop
      a8:	be 92       	st	-X, r11
      aa:	24 49       	sbci	r18, 0x94	; 148
      ac:	12 3e       	cpi	r17, 0xE2	; 226
      ae:	ab aa       	std	Y+51, r10	; 0x33
      b0:	aa 2a       	or	r10, r26
      b2:	be cd       	rjmp	.-1156   	; 0xfffffc30 <__eeprom_end+0xff7efc30>
      b4:	cc cc       	rjmp	.-1640   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
      b6:	4c 3e       	cpi	r20, 0xEC	; 236
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	be ab       	std	Y+54, r27	; 0x36
      be:	aa aa       	std	Y+50, r10	; 0x32
      c0:	aa 3e       	cpi	r26, 0xEA	; 234
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	bf 00       	.word	0x00bf	; ????
      c8:	00 00       	nop
      ca:	80 3f       	cpi	r24, 0xF0	; 240
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 08       	sbc	r0, r0
      d2:	41 78       	andi	r20, 0x81	; 129
      d4:	d3 bb       	out	0x13, r29	; 19
      d6:	43 87       	std	Z+11, r20	; 0x0b
      d8:	d1 13       	cpse	r29, r17
      da:	3d 19       	sub	r19, r13
      dc:	0e 3c       	cpi	r16, 0xCE	; 206
      de:	c3 bd       	out	0x23, r28	; 35
      e0:	42 82       	std	Z+2, r4	; 0x02
      e2:	ad 2b       	or	r26, r29
      e4:	3e 68       	ori	r19, 0x8E	; 142
      e6:	ec 82       	std	Y+4, r14	; 0x04
      e8:	76 be       	out	0x36, r7	; 54
      ea:	d9 8f       	std	Y+25, r29	; 0x19
      ec:	e1 a9       	ldd	r30, Z+49	; 0x31
      ee:	3e 4c       	sbci	r19, 0xCE	; 206
      f0:	80 ef       	ldi	r24, 0xF0	; 240
      f2:	ff be       	out	0x3f, r15	; 63
      f4:	01 c4       	rjmp	.+2050   	; 0x8f8 <__LOCK_REGION_LENGTH__+0x4f8>
      f6:	ff 7f       	andi	r31, 0xFF	; 255
      f8:	3f 00       	.word	0x003f	; ????
      fa:	00 00       	nop
	...

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d8 e0       	ldi	r29, 0x08	; 8
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
     10a:	11 e0       	ldi	r17, 0x01	; 1
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	ea e5       	ldi	r30, 0x5A	; 90
     112:	f2 e4       	ldi	r31, 0x42	; 66
     114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x10>
     116:	05 90       	lpm	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	a0 35       	cpi	r26, 0x50	; 80
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0xc>

00000120 <__do_clear_bss>:
     120:	27 e0       	ldi	r18, 0x07	; 7
     122:	a0 e5       	ldi	r26, 0x50	; 80
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	a0 3b       	cpi	r26, 0xB0	; 176
     12c:	b2 07       	cpc	r27, r18
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
     130:	0e 94 7b 07 	call	0xef6	; 0xef6 <main>
     134:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <_exit>

00000138 <__bad_interrupt>:
     138:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013c <make_frame>:
	vTaskDelete(NULL);
}

/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	2a 97       	sbiw	r28, 0x0a	; 10
     14a:	0f b6       	in	r0, 0x3f	; 63
     14c:	f8 94       	cli
     14e:	de bf       	out	0x3e, r29	; 62
     150:	0f be       	out	0x3f, r0	; 63
     152:	cd bf       	out	0x3d, r28	; 61
     154:	9a 87       	std	Y+10, r25	; 0x0a
     156:	89 87       	std	Y+9, r24	; 0x09
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     158:	1a 82       	std	Y+2, r1	; 0x02
     15a:	19 82       	std	Y+1, r1	; 0x01
     15c:	1a c0       	rjmp	.+52     	; 0x192 <make_frame+0x56>
			for (int i = 0; i < 14; i++) { //For each column
     15e:	1c 82       	std	Y+4, r1	; 0x04
     160:	1b 82       	std	Y+3, r1	; 0x03
     162:	0e c0       	rjmp	.+28     	; 0x180 <make_frame+0x44>
				frame_buffer[i]	= 0;
     164:	8b 81       	ldd	r24, Y+3	; 0x03
     166:	9c 81       	ldd	r25, Y+4	; 0x04
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	80 5b       	subi	r24, 0xB0	; 176
     16e:	9e 4f       	sbci	r25, 0xFE	; 254
     170:	fc 01       	movw	r30, r24
     172:	11 82       	std	Z+1, r1	; 0x01
     174:	10 82       	st	Z, r1
/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
			for (int i = 0; i < 14; i++) { //For each column
     176:	8b 81       	ldd	r24, Y+3	; 0x03
     178:	9c 81       	ldd	r25, Y+4	; 0x04
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	9c 83       	std	Y+4, r25	; 0x04
     17e:	8b 83       	std	Y+3, r24	; 0x03
     180:	8b 81       	ldd	r24, Y+3	; 0x03
     182:	9c 81       	ldd	r25, Y+4	; 0x04
     184:	0e 97       	sbiw	r24, 0x0e	; 14
     186:	74 f3       	brlt	.-36     	; 0x164 <make_frame+0x28>

/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     188:	89 81       	ldd	r24, Y+1	; 0x01
     18a:	9a 81       	ldd	r25, Y+2	; 0x02
     18c:	01 96       	adiw	r24, 0x01	; 1
     18e:	9a 83       	std	Y+2, r25	; 0x02
     190:	89 83       	std	Y+1, r24	; 0x01
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	9a 81       	ldd	r25, Y+2	; 0x02
     196:	0a 97       	sbiw	r24, 0x0a	; 10
     198:	14 f3       	brlt	.-60     	; 0x15e <make_frame+0x22>
				frame_buffer[i]	= 0;
			}
		}

		/* Create frame from gameState */
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     19a:	1e 82       	std	Y+6, r1	; 0x06
     19c:	1d 82       	std	Y+5, r1	; 0x05
     19e:	65 c0       	rjmp	.+202    	; 0x26a <make_frame+0x12e>
			for (int i = 0; i < 14; i++) { //For each column
     1a0:	18 86       	std	Y+8, r1	; 0x08
     1a2:	1f 82       	std	Y+7, r1	; 0x07
     1a4:	58 c0       	rjmp	.+176    	; 0x256 <make_frame+0x11a>
				if (gameState[i][j] != 0) { //Add up
     1a6:	8f 81       	ldd	r24, Y+7	; 0x07
     1a8:	98 85       	ldd	r25, Y+8	; 0x08
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	9c 01       	movw	r18, r24
     1b0:	22 0f       	add	r18, r18
     1b2:	33 1f       	adc	r19, r19
     1b4:	22 0f       	add	r18, r18
     1b6:	33 1f       	adc	r19, r19
     1b8:	82 0f       	add	r24, r18
     1ba:	93 1f       	adc	r25, r19
     1bc:	2d 81       	ldd	r18, Y+5	; 0x05
     1be:	3e 81       	ldd	r19, Y+6	; 0x06
     1c0:	82 0f       	add	r24, r18
     1c2:	93 1f       	adc	r25, r19
     1c4:	88 0f       	add	r24, r24
     1c6:	99 1f       	adc	r25, r25
     1c8:	84 59       	subi	r24, 0x94	; 148
     1ca:	9e 4f       	sbci	r25, 0xFE	; 254
     1cc:	fc 01       	movw	r30, r24
     1ce:	80 81       	ld	r24, Z
     1d0:	91 81       	ldd	r25, Z+1	; 0x01
     1d2:	89 2b       	or	r24, r25
     1d4:	d9 f1       	breq	.+118    	; 0x24c <make_frame+0x110>
					frame_buffer[i]	+= (int) (pow(2,  j) + 0.5);
     1d6:	8f 81       	ldd	r24, Y+7	; 0x07
     1d8:	98 85       	ldd	r25, Y+8	; 0x08
     1da:	88 0f       	add	r24, r24
     1dc:	99 1f       	adc	r25, r25
     1de:	80 5b       	subi	r24, 0xB0	; 176
     1e0:	9e 4f       	sbci	r25, 0xFE	; 254
     1e2:	fc 01       	movw	r30, r24
     1e4:	00 81       	ld	r16, Z
     1e6:	11 81       	ldd	r17, Z+1	; 0x01
     1e8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ea:	9e 81       	ldd	r25, Y+6	; 0x06
     1ec:	09 2e       	mov	r0, r25
     1ee:	00 0c       	add	r0, r0
     1f0:	aa 0b       	sbc	r26, r26
     1f2:	bb 0b       	sbc	r27, r27
     1f4:	bc 01       	movw	r22, r24
     1f6:	cd 01       	movw	r24, r26
     1f8:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
     1fc:	dc 01       	movw	r26, r24
     1fe:	cb 01       	movw	r24, r22
     200:	9c 01       	movw	r18, r24
     202:	ad 01       	movw	r20, r26
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e4       	ldi	r25, 0x40	; 64
     20c:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <pow>
     210:	dc 01       	movw	r26, r24
     212:	cb 01       	movw	r24, r22
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	5f e3       	ldi	r21, 0x3F	; 63
     21c:	bc 01       	movw	r22, r24
     21e:	cd 01       	movw	r24, r26
     220:	0e 94 44 1c 	call	0x3888	; 0x3888 <__addsf3>
     224:	dc 01       	movw	r26, r24
     226:	cb 01       	movw	r24, r22
     228:	bc 01       	movw	r22, r24
     22a:	cd 01       	movw	r24, r26
     22c:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__fixsfsi>
     230:	dc 01       	movw	r26, r24
     232:	cb 01       	movw	r24, r22
     234:	98 01       	movw	r18, r16
     236:	28 0f       	add	r18, r24
     238:	39 1f       	adc	r19, r25
     23a:	8f 81       	ldd	r24, Y+7	; 0x07
     23c:	98 85       	ldd	r25, Y+8	; 0x08
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	80 5b       	subi	r24, 0xB0	; 176
     244:	9e 4f       	sbci	r25, 0xFE	; 254
     246:	fc 01       	movw	r30, r24
     248:	31 83       	std	Z+1, r19	; 0x01
     24a:	20 83       	st	Z, r18
			}
		}

		/* Create frame from gameState */
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
			for (int i = 0; i < 14; i++) { //For each column
     24c:	8f 81       	ldd	r24, Y+7	; 0x07
     24e:	98 85       	ldd	r25, Y+8	; 0x08
     250:	01 96       	adiw	r24, 0x01	; 1
     252:	98 87       	std	Y+8, r25	; 0x08
     254:	8f 83       	std	Y+7, r24	; 0x07
     256:	8f 81       	ldd	r24, Y+7	; 0x07
     258:	98 85       	ldd	r25, Y+8	; 0x08
     25a:	0e 97       	sbiw	r24, 0x0e	; 14
     25c:	0c f4       	brge	.+2      	; 0x260 <make_frame+0x124>
     25e:	a3 cf       	rjmp	.-186    	; 0x1a6 <make_frame+0x6a>
				frame_buffer[i]	= 0;
			}
		}

		/* Create frame from gameState */
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     260:	8d 81       	ldd	r24, Y+5	; 0x05
     262:	9e 81       	ldd	r25, Y+6	; 0x06
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	9e 83       	std	Y+6, r25	; 0x06
     268:	8d 83       	std	Y+5, r24	; 0x05
     26a:	8d 81       	ldd	r24, Y+5	; 0x05
     26c:	9e 81       	ldd	r25, Y+6	; 0x06
     26e:	0a 97       	sbiw	r24, 0x0a	; 10
     270:	0c f4       	brge	.+2      	; 0x274 <make_frame+0x138>
     272:	96 cf       	rjmp	.-212    	; 0x1a0 <make_frame+0x64>
					frame_buffer[i]	+= (int) (pow(2,  j) + 0.5);
				}
			}
		}

		vTaskDelay(50);
     274:	82 e3       	ldi	r24, 0x32	; 50
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <vTaskDelay>
	}
     27c:	6d cf       	rjmp	.-294    	; 0x158 <make_frame+0x1c>

0000027e <die>:

	vTaskDelete(NULL);
}

void die()
{
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
	//TODO
	com_send_bytes("DEAD!\n", 6);
     286:	66 e0       	ldi	r22, 0x06	; 6
     288:	85 e1       	ldi	r24, 0x15	; 21
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <com_send_bytes>
}
     290:	00 00       	nop
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <move_player>:

void move_player(Player* player)
{
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	00 d0       	rcall	.+0      	; 0x29e <move_player+0x6>
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	9a 83       	std	Y+2, r25	; 0x02
     2a4:	89 83       	std	Y+1, r24	; 0x01
	switch ((*player).direction) {
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	9a 81       	ldd	r25, Y+2	; 0x02
     2aa:	fc 01       	movw	r30, r24
     2ac:	84 81       	ldd	r24, Z+4	; 0x04
     2ae:	88 2f       	mov	r24, r24
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	81 30       	cpi	r24, 0x01	; 1
     2b4:	91 05       	cpc	r25, r1
     2b6:	21 f1       	breq	.+72     	; 0x300 <move_player+0x68>
     2b8:	82 30       	cpi	r24, 0x02	; 2
     2ba:	91 05       	cpc	r25, r1
     2bc:	1c f4       	brge	.+6      	; 0x2c4 <move_player+0x2c>
     2be:	89 2b       	or	r24, r25
     2c0:	41 f0       	breq	.+16     	; 0x2d2 <move_player+0x3a>
				(*player).y++;
			break;
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     2c2:	65 c0       	rjmp	.+202    	; 0x38e <move_player+0xf6>
	com_send_bytes("DEAD!\n", 6);
}

void move_player(Player* player)
{
	switch ((*player).direction) {
     2c4:	82 30       	cpi	r24, 0x02	; 2
     2c6:	91 05       	cpc	r25, r1
     2c8:	81 f1       	breq	.+96     	; 0x32a <move_player+0x92>
     2ca:	03 97       	sbiw	r24, 0x03	; 3
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <move_player+0x38>
     2ce:	43 c0       	rjmp	.+134    	; 0x356 <move_player+0xbe>
				(*player).y++;
			break;
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     2d0:	5e c0       	rjmp	.+188    	; 0x38e <move_player+0xf6>

void move_player(Player* player)
{
	switch ((*player).direction) {
		case LEFT:
			if ((*player).x > 0)
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	9a 81       	ldd	r25, Y+2	; 0x02
     2d6:	fc 01       	movw	r30, r24
     2d8:	80 81       	ld	r24, Z
     2da:	91 81       	ldd	r25, Z+1	; 0x01
     2dc:	18 16       	cp	r1, r24
     2de:	19 06       	cpc	r1, r25
     2e0:	0c f0       	brlt	.+2      	; 0x2e4 <move_player+0x4c>
     2e2:	4e c0       	rjmp	.+156    	; 0x380 <move_player+0xe8>
				(*player).x--;
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	fc 01       	movw	r30, r24
     2ea:	80 81       	ld	r24, Z
     2ec:	91 81       	ldd	r25, Z+1	; 0x01
     2ee:	9c 01       	movw	r18, r24
     2f0:	21 50       	subi	r18, 0x01	; 1
     2f2:	31 09       	sbc	r19, r1
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	fc 01       	movw	r30, r24
     2fa:	31 83       	std	Z+1, r19	; 0x01
     2fc:	20 83       	st	Z, r18
			break;
     2fe:	40 c0       	rjmp	.+128    	; 0x380 <move_player+0xe8>
		case RIGHT:
			if ((*player).x < 14)
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	9a 81       	ldd	r25, Y+2	; 0x02
     304:	fc 01       	movw	r30, r24
     306:	80 81       	ld	r24, Z
     308:	91 81       	ldd	r25, Z+1	; 0x01
     30a:	0e 97       	sbiw	r24, 0x0e	; 14
     30c:	dc f5       	brge	.+118    	; 0x384 <move_player+0xec>
				(*player).x++;
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	9a 81       	ldd	r25, Y+2	; 0x02
     312:	fc 01       	movw	r30, r24
     314:	80 81       	ld	r24, Z
     316:	91 81       	ldd	r25, Z+1	; 0x01
     318:	9c 01       	movw	r18, r24
     31a:	2f 5f       	subi	r18, 0xFF	; 255
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	9a 81       	ldd	r25, Y+2	; 0x02
     322:	fc 01       	movw	r30, r24
     324:	31 83       	std	Z+1, r19	; 0x01
     326:	20 83       	st	Z, r18
			break;
     328:	2d c0       	rjmp	.+90     	; 0x384 <move_player+0xec>
		case UP:
			if ((*player).y > 0)
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	fc 01       	movw	r30, r24
     330:	82 81       	ldd	r24, Z+2	; 0x02
     332:	93 81       	ldd	r25, Z+3	; 0x03
     334:	18 16       	cp	r1, r24
     336:	19 06       	cpc	r1, r25
     338:	3c f5       	brge	.+78     	; 0x388 <move_player+0xf0>
				(*player).y--;
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	fc 01       	movw	r30, r24
     340:	82 81       	ldd	r24, Z+2	; 0x02
     342:	93 81       	ldd	r25, Z+3	; 0x03
     344:	9c 01       	movw	r18, r24
     346:	21 50       	subi	r18, 0x01	; 1
     348:	31 09       	sbc	r19, r1
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	9a 81       	ldd	r25, Y+2	; 0x02
     34e:	fc 01       	movw	r30, r24
     350:	33 83       	std	Z+3, r19	; 0x03
     352:	22 83       	std	Z+2, r18	; 0x02
			break;
     354:	19 c0       	rjmp	.+50     	; 0x388 <move_player+0xf0>
		case DOWN:
			if ((*player).y < 10)
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	9a 81       	ldd	r25, Y+2	; 0x02
     35a:	fc 01       	movw	r30, r24
     35c:	82 81       	ldd	r24, Z+2	; 0x02
     35e:	93 81       	ldd	r25, Z+3	; 0x03
     360:	0a 97       	sbiw	r24, 0x0a	; 10
     362:	a4 f4       	brge	.+40     	; 0x38c <move_player+0xf4>
				(*player).y++;
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	9a 81       	ldd	r25, Y+2	; 0x02
     368:	fc 01       	movw	r30, r24
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	9c 01       	movw	r18, r24
     370:	2f 5f       	subi	r18, 0xFF	; 255
     372:	3f 4f       	sbci	r19, 0xFF	; 255
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	9a 81       	ldd	r25, Y+2	; 0x02
     378:	fc 01       	movw	r30, r24
     37a:	33 83       	std	Z+3, r19	; 0x03
     37c:	22 83       	std	Z+2, r18	; 0x02
			break;
     37e:	06 c0       	rjmp	.+12     	; 0x38c <move_player+0xf4>
{
	switch ((*player).direction) {
		case LEFT:
			if ((*player).x > 0)
				(*player).x--;
			break;
     380:	00 00       	nop
     382:	05 c0       	rjmp	.+10     	; 0x38e <move_player+0xf6>
		case RIGHT:
			if ((*player).x < 14)
				(*player).x++;
			break;
     384:	00 00       	nop
     386:	03 c0       	rjmp	.+6      	; 0x38e <move_player+0xf6>
		case UP:
			if ((*player).y > 0)
				(*player).y--;
			break;
     388:	00 00       	nop
     38a:	01 c0       	rjmp	.+2      	; 0x38e <move_player+0xf6>
		case DOWN:
			if ((*player).y < 10)
				(*player).y++;
			break;
     38c:	00 00       	nop
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     38e:	00 00       	nop
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <game_processing>:


/* TODO: protect gameState with a mutex */
void game_processing(void *pvParameters)
{
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	65 97       	sbiw	r28, 0x15	; 21
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	9d 8b       	std	Y+21, r25	; 0x15
     3b0:	8c 8b       	std	Y+20, r24	; 0x14
	/* Populate gameState from the players' positions and tracks:
	* Start at turn[i] to compare with turn[i - 1] for each player
	*/

	bool collision = false;
     3b2:	19 82       	std	Y+1, r1	; 0x01
	int from, to;

	for(;;) {

		while(!collision) {
     3b4:	bd c2       	rjmp	.+1402   	; 0x930 <__stack+0x31>
			
			/* Erase player one */
			for (int i = 0; i < 14; i++)
     3b6:	1f 82       	std	Y+7, r1	; 0x07
     3b8:	1e 82       	std	Y+6, r1	; 0x06
     3ba:	3f c0       	rjmp	.+126    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
				for (int j = 0; j < 10; j++)
     3bc:	19 86       	std	Y+9, r1	; 0x09
     3be:	18 86       	std	Y+8, r1	; 0x08
     3c0:	33 c0       	rjmp	.+102    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
					if (gameState[i][j] == 1)
     3c2:	8e 81       	ldd	r24, Y+6	; 0x06
     3c4:	9f 81       	ldd	r25, Y+7	; 0x07
     3c6:	88 0f       	add	r24, r24
     3c8:	99 1f       	adc	r25, r25
     3ca:	9c 01       	movw	r18, r24
     3cc:	22 0f       	add	r18, r18
     3ce:	33 1f       	adc	r19, r19
     3d0:	22 0f       	add	r18, r18
     3d2:	33 1f       	adc	r19, r19
     3d4:	82 0f       	add	r24, r18
     3d6:	93 1f       	adc	r25, r19
     3d8:	28 85       	ldd	r18, Y+8	; 0x08
     3da:	39 85       	ldd	r19, Y+9	; 0x09
     3dc:	82 0f       	add	r24, r18
     3de:	93 1f       	adc	r25, r19
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	84 59       	subi	r24, 0x94	; 148
     3e6:	9e 4f       	sbci	r25, 0xFE	; 254
     3e8:	fc 01       	movw	r30, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	b1 f4       	brne	.+44     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
						gameState[i][j] = 0;
     3f2:	8e 81       	ldd	r24, Y+6	; 0x06
     3f4:	9f 81       	ldd	r25, Y+7	; 0x07
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
     3fa:	9c 01       	movw	r18, r24
     3fc:	22 0f       	add	r18, r18
     3fe:	33 1f       	adc	r19, r19
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	82 0f       	add	r24, r18
     406:	93 1f       	adc	r25, r19
     408:	28 85       	ldd	r18, Y+8	; 0x08
     40a:	39 85       	ldd	r19, Y+9	; 0x09
     40c:	82 0f       	add	r24, r18
     40e:	93 1f       	adc	r25, r19
     410:	88 0f       	add	r24, r24
     412:	99 1f       	adc	r25, r25
     414:	84 59       	subi	r24, 0x94	; 148
     416:	9e 4f       	sbci	r25, 0xFE	; 254
     418:	fc 01       	movw	r30, r24
     41a:	11 82       	std	Z+1, r1	; 0x01
     41c:	10 82       	st	Z, r1

		while(!collision) {
			
			/* Erase player one */
			for (int i = 0; i < 14; i++)
				for (int j = 0; j < 10; j++)
     41e:	88 85       	ldd	r24, Y+8	; 0x08
     420:	99 85       	ldd	r25, Y+9	; 0x09
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	99 87       	std	Y+9, r25	; 0x09
     426:	88 87       	std	Y+8, r24	; 0x08
     428:	88 85       	ldd	r24, Y+8	; 0x08
     42a:	99 85       	ldd	r25, Y+9	; 0x09
     42c:	0a 97       	sbiw	r24, 0x0a	; 10
     42e:	4c f2       	brlt	.-110    	; 0x3c2 <game_processing+0x28>
	for(;;) {

		while(!collision) {
			
			/* Erase player one */
			for (int i = 0; i < 14; i++)
     430:	8e 81       	ldd	r24, Y+6	; 0x06
     432:	9f 81       	ldd	r25, Y+7	; 0x07
     434:	01 96       	adiw	r24, 0x01	; 1
     436:	9f 83       	std	Y+7, r25	; 0x07
     438:	8e 83       	std	Y+6, r24	; 0x06
     43a:	8e 81       	ldd	r24, Y+6	; 0x06
     43c:	9f 81       	ldd	r25, Y+7	; 0x07
     43e:	0e 97       	sbiw	r24, 0x0e	; 14
     440:	0c f4       	brge	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     442:	bc cf       	rjmp	.-136    	; 0x3bc <game_processing+0x22>
				for (int j = 0; j < 10; j++)
					if (gameState[i][j] == 1)
						gameState[i][j] = 0;
	
			for (int i = 0; i < playerOne.turnsCount + 1; i++) {
     444:	1b 86       	std	Y+11, r1	; 0x0b
     446:	1a 86       	std	Y+10, r1	; 0x0a
     448:	5e c2       	rjmp	.+1212   	; 0x906 <__stack+0x7>

				if (i < playerOne.turnsCount) { //Processing every turn
     44a:	20 91 c5 02 	lds	r18, 0x02C5	; 0x8002c5 <playerOne+0x41>
     44e:	30 91 c6 02 	lds	r19, 0x02C6	; 0x8002c6 <playerOne+0x42>
     452:	8a 85       	ldd	r24, Y+10	; 0x0a
     454:	9b 85       	ldd	r25, Y+11	; 0x0b
     456:	82 17       	cp	r24, r18
     458:	93 07       	cpc	r25, r19
     45a:	0c f0       	brlt	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45c:	4e c1       	rjmp	.+668    	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>

					if (playerOne.turns[i].x == playerOne.turns[i + 1].x) { //Draw vertical line
     45e:	8a 85       	ldd	r24, Y+10	; 0x0a
     460:	9b 85       	ldd	r25, Y+11	; 0x0b
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	87 57       	subi	r24, 0x77	; 119
     46c:	9d 4f       	sbci	r25, 0xFD	; 253
     46e:	fc 01       	movw	r30, r24
     470:	20 81       	ld	r18, Z
     472:	31 81       	ldd	r19, Z+1	; 0x01
     474:	8a 85       	ldd	r24, Y+10	; 0x0a
     476:	9b 85       	ldd	r25, Y+11	; 0x0b
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	87 57       	subi	r24, 0x77	; 119
     484:	9d 4f       	sbci	r25, 0xFD	; 253
     486:	fc 01       	movw	r30, r24
     488:	80 81       	ld	r24, Z
     48a:	91 81       	ldd	r25, Z+1	; 0x01
     48c:	28 17       	cp	r18, r24
     48e:	39 07       	cpc	r19, r25
     490:	09 f0       	breq	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     492:	8c c0       	rjmp	.+280    	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>

						from = playerOne.turns[i].y;
     494:	8a 85       	ldd	r24, Y+10	; 0x0a
     496:	9b 85       	ldd	r25, Y+11	; 0x0b
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	85 57       	subi	r24, 0x75	; 117
     4a2:	9d 4f       	sbci	r25, 0xFD	; 253
     4a4:	fc 01       	movw	r30, r24
     4a6:	80 81       	ld	r24, Z
     4a8:	91 81       	ldd	r25, Z+1	; 0x01
     4aa:	9b 83       	std	Y+3, r25	; 0x03
     4ac:	8a 83       	std	Y+2, r24	; 0x02
						to = playerOne.turns[i + 1].y;
     4ae:	8a 85       	ldd	r24, Y+10	; 0x0a
     4b0:	9b 85       	ldd	r25, Y+11	; 0x0b
     4b2:	01 96       	adiw	r24, 0x01	; 1
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	85 57       	subi	r24, 0x75	; 117
     4be:	9d 4f       	sbci	r25, 0xFD	; 253
     4c0:	fc 01       	movw	r30, r24
     4c2:	80 81       	ld	r24, Z
     4c4:	91 81       	ldd	r25, Z+1	; 0x01
     4c6:	9d 83       	std	Y+5, r25	; 0x05
     4c8:	8c 83       	std	Y+4, r24	; 0x04

						if (from > to) {
     4ca:	2a 81       	ldd	r18, Y+2	; 0x02
     4cc:	3b 81       	ldd	r19, Y+3	; 0x03
     4ce:	8c 81       	ldd	r24, Y+4	; 0x04
     4d0:	9d 81       	ldd	r25, Y+5	; 0x05
     4d2:	82 17       	cp	r24, r18
     4d4:	93 07       	cpc	r25, r19
     4d6:	94 f4       	brge	.+36     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
							to = from;
     4d8:	8a 81       	ldd	r24, Y+2	; 0x02
     4da:	9b 81       	ldd	r25, Y+3	; 0x03
     4dc:	9d 83       	std	Y+5, r25	; 0x05
     4de:	8c 83       	std	Y+4, r24	; 0x04
							from = playerOne.turns[i + 1].y;
     4e0:	8a 85       	ldd	r24, Y+10	; 0x0a
     4e2:	9b 85       	ldd	r25, Y+11	; 0x0b
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	88 0f       	add	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	85 57       	subi	r24, 0x75	; 117
     4f0:	9d 4f       	sbci	r25, 0xFD	; 253
     4f2:	fc 01       	movw	r30, r24
     4f4:	80 81       	ld	r24, Z
     4f6:	91 81       	ldd	r25, Z+1	; 0x01
     4f8:	9b 83       	std	Y+3, r25	; 0x03
     4fa:	8a 83       	std	Y+2, r24	; 0x02
						}

						//Draw line in gameState
						for (int j = from; j <= to; j++) {
     4fc:	8a 81       	ldd	r24, Y+2	; 0x02
     4fe:	9b 81       	ldd	r25, Y+3	; 0x03
     500:	9d 87       	std	Y+13, r25	; 0x0d
     502:	8c 87       	std	Y+12, r24	; 0x0c
     504:	4a c0       	rjmp	.+148    	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
							if (gameState[playerOne.turns[i].x][j] == 2) //Collision with player 2 !
     506:	8a 85       	ldd	r24, Y+10	; 0x0a
     508:	9b 85       	ldd	r25, Y+11	; 0x0b
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	87 57       	subi	r24, 0x77	; 119
     514:	9d 4f       	sbci	r25, 0xFD	; 253
     516:	fc 01       	movw	r30, r24
     518:	80 81       	ld	r24, Z
     51a:	91 81       	ldd	r25, Z+1	; 0x01
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	9c 01       	movw	r18, r24
     522:	22 0f       	add	r18, r18
     524:	33 1f       	adc	r19, r19
     526:	22 0f       	add	r18, r18
     528:	33 1f       	adc	r19, r19
     52a:	82 0f       	add	r24, r18
     52c:	93 1f       	adc	r25, r19
     52e:	2c 85       	ldd	r18, Y+12	; 0x0c
     530:	3d 85       	ldd	r19, Y+13	; 0x0d
     532:	82 0f       	add	r24, r18
     534:	93 1f       	adc	r25, r19
     536:	88 0f       	add	r24, r24
     538:	99 1f       	adc	r25, r25
     53a:	84 59       	subi	r24, 0x94	; 148
     53c:	9e 4f       	sbci	r25, 0xFE	; 254
     53e:	fc 01       	movw	r30, r24
     540:	80 81       	ld	r24, Z
     542:	91 81       	ldd	r25, Z+1	; 0x01
     544:	02 97       	sbiw	r24, 0x02	; 2
     546:	19 f4       	brne	.+6      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
								collision = true;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	89 83       	std	Y+1, r24	; 0x01
     54c:	21 c0       	rjmp	.+66     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
							else
								gameState[playerOne.turns[i].x][j] = 1;
     54e:	8a 85       	ldd	r24, Y+10	; 0x0a
     550:	9b 85       	ldd	r25, Y+11	; 0x0b
     552:	88 0f       	add	r24, r24
     554:	99 1f       	adc	r25, r25
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	87 57       	subi	r24, 0x77	; 119
     55c:	9d 4f       	sbci	r25, 0xFD	; 253
     55e:	fc 01       	movw	r30, r24
     560:	80 81       	ld	r24, Z
     562:	91 81       	ldd	r25, Z+1	; 0x01
     564:	88 0f       	add	r24, r24
     566:	99 1f       	adc	r25, r25
     568:	9c 01       	movw	r18, r24
     56a:	22 0f       	add	r18, r18
     56c:	33 1f       	adc	r19, r19
     56e:	22 0f       	add	r18, r18
     570:	33 1f       	adc	r19, r19
     572:	82 0f       	add	r24, r18
     574:	93 1f       	adc	r25, r19
     576:	2c 85       	ldd	r18, Y+12	; 0x0c
     578:	3d 85       	ldd	r19, Y+13	; 0x0d
     57a:	82 0f       	add	r24, r18
     57c:	93 1f       	adc	r25, r19
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	84 59       	subi	r24, 0x94	; 148
     584:	9e 4f       	sbci	r25, 0xFE	; 254
     586:	21 e0       	ldi	r18, 0x01	; 1
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	fc 01       	movw	r30, r24
     58c:	31 83       	std	Z+1, r19	; 0x01
     58e:	20 83       	st	Z, r18
							to = from;
							from = playerOne.turns[i + 1].y;
						}

						//Draw line in gameState
						for (int j = from; j <= to; j++) {
     590:	8c 85       	ldd	r24, Y+12	; 0x0c
     592:	9d 85       	ldd	r25, Y+13	; 0x0d
     594:	01 96       	adiw	r24, 0x01	; 1
     596:	9d 87       	std	Y+13, r25	; 0x0d
     598:	8c 87       	std	Y+12, r24	; 0x0c
     59a:	2c 85       	ldd	r18, Y+12	; 0x0c
     59c:	3d 85       	ldd	r19, Y+13	; 0x0d
     59e:	8c 81       	ldd	r24, Y+4	; 0x04
     5a0:	9d 81       	ldd	r25, Y+5	; 0x05
     5a2:	82 17       	cp	r24, r18
     5a4:	93 07       	cpc	r25, r19
     5a6:	0c f0       	brlt	.+2      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5a8:	ae cf       	rjmp	.-164    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     5aa:	a8 c1       	rjmp	.+848    	; 0x8fc <__LOCK_REGION_LENGTH__+0x4fc>
								collision = true;
							else
								gameState[playerOne.turns[i].x][j] = 1;
						}

					} else if (playerOne.turns[i].y == playerOne.turns[i + 1].y) { //Draw horizontal line
     5ac:	8a 85       	ldd	r24, Y+10	; 0x0a
     5ae:	9b 85       	ldd	r25, Y+11	; 0x0b
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	88 0f       	add	r24, r24
     5b6:	99 1f       	adc	r25, r25
     5b8:	85 57       	subi	r24, 0x75	; 117
     5ba:	9d 4f       	sbci	r25, 0xFD	; 253
     5bc:	fc 01       	movw	r30, r24
     5be:	20 81       	ld	r18, Z
     5c0:	31 81       	ldd	r19, Z+1	; 0x01
     5c2:	8a 85       	ldd	r24, Y+10	; 0x0a
     5c4:	9b 85       	ldd	r25, Y+11	; 0x0b
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	85 57       	subi	r24, 0x75	; 117
     5d2:	9d 4f       	sbci	r25, 0xFD	; 253
     5d4:	fc 01       	movw	r30, r24
     5d6:	80 81       	ld	r24, Z
     5d8:	91 81       	ldd	r25, Z+1	; 0x01
     5da:	28 17       	cp	r18, r24
     5dc:	39 07       	cpc	r19, r25
     5de:	09 f0       	breq	.+2      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     5e0:	8d c1       	rjmp	.+794    	; 0x8fc <__LOCK_REGION_LENGTH__+0x4fc>

						from = playerOne.turns[i].x;
     5e2:	8a 85       	ldd	r24, Y+10	; 0x0a
     5e4:	9b 85       	ldd	r25, Y+11	; 0x0b
     5e6:	88 0f       	add	r24, r24
     5e8:	99 1f       	adc	r25, r25
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	87 57       	subi	r24, 0x77	; 119
     5f0:	9d 4f       	sbci	r25, 0xFD	; 253
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 81       	ld	r24, Z
     5f6:	91 81       	ldd	r25, Z+1	; 0x01
     5f8:	9b 83       	std	Y+3, r25	; 0x03
     5fa:	8a 83       	std	Y+2, r24	; 0x02
						to = playerOne.turns[i + 1].x;
     5fc:	8a 85       	ldd	r24, Y+10	; 0x0a
     5fe:	9b 85       	ldd	r25, Y+11	; 0x0b
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	88 0f       	add	r24, r24
     608:	99 1f       	adc	r25, r25
     60a:	87 57       	subi	r24, 0x77	; 119
     60c:	9d 4f       	sbci	r25, 0xFD	; 253
     60e:	fc 01       	movw	r30, r24
     610:	80 81       	ld	r24, Z
     612:	91 81       	ldd	r25, Z+1	; 0x01
     614:	9d 83       	std	Y+5, r25	; 0x05
     616:	8c 83       	std	Y+4, r24	; 0x04

						if (from > to) {
     618:	2a 81       	ldd	r18, Y+2	; 0x02
     61a:	3b 81       	ldd	r19, Y+3	; 0x03
     61c:	8c 81       	ldd	r24, Y+4	; 0x04
     61e:	9d 81       	ldd	r25, Y+5	; 0x05
     620:	82 17       	cp	r24, r18
     622:	93 07       	cpc	r25, r19
     624:	94 f4       	brge	.+36     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
							to = from;
     626:	8a 81       	ldd	r24, Y+2	; 0x02
     628:	9b 81       	ldd	r25, Y+3	; 0x03
     62a:	9d 83       	std	Y+5, r25	; 0x05
     62c:	8c 83       	std	Y+4, r24	; 0x04
							from = playerOne.turns[i + 1].x;
     62e:	8a 85       	ldd	r24, Y+10	; 0x0a
     630:	9b 85       	ldd	r25, Y+11	; 0x0b
     632:	01 96       	adiw	r24, 0x01	; 1
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	87 57       	subi	r24, 0x77	; 119
     63e:	9d 4f       	sbci	r25, 0xFD	; 253
     640:	fc 01       	movw	r30, r24
     642:	80 81       	ld	r24, Z
     644:	91 81       	ldd	r25, Z+1	; 0x01
     646:	9b 83       	std	Y+3, r25	; 0x03
     648:	8a 83       	std	Y+2, r24	; 0x02
						}

						//Draw line in gameState
						for (int j = from; j <= to; j++) {
     64a:	8a 81       	ldd	r24, Y+2	; 0x02
     64c:	9b 81       	ldd	r25, Y+3	; 0x03
     64e:	9f 87       	std	Y+15, r25	; 0x0f
     650:	8e 87       	std	Y+14, r24	; 0x0e
     652:	4a c0       	rjmp	.+148    	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
							if (gameState[j][playerOne.turns[i].y] == 2) //Collision with player 2 !
     654:	8a 85       	ldd	r24, Y+10	; 0x0a
     656:	9b 85       	ldd	r25, Y+11	; 0x0b
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	88 0f       	add	r24, r24
     65e:	99 1f       	adc	r25, r25
     660:	85 57       	subi	r24, 0x75	; 117
     662:	9d 4f       	sbci	r25, 0xFD	; 253
     664:	fc 01       	movw	r30, r24
     666:	20 81       	ld	r18, Z
     668:	31 81       	ldd	r19, Z+1	; 0x01
     66a:	8e 85       	ldd	r24, Y+14	; 0x0e
     66c:	9f 85       	ldd	r25, Y+15	; 0x0f
     66e:	88 0f       	add	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	ac 01       	movw	r20, r24
     674:	44 0f       	add	r20, r20
     676:	55 1f       	adc	r21, r21
     678:	44 0f       	add	r20, r20
     67a:	55 1f       	adc	r21, r21
     67c:	84 0f       	add	r24, r20
     67e:	95 1f       	adc	r25, r21
     680:	82 0f       	add	r24, r18
     682:	93 1f       	adc	r25, r19
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	84 59       	subi	r24, 0x94	; 148
     68a:	9e 4f       	sbci	r25, 0xFE	; 254
     68c:	fc 01       	movw	r30, r24
     68e:	80 81       	ld	r24, Z
     690:	91 81       	ldd	r25, Z+1	; 0x01
     692:	02 97       	sbiw	r24, 0x02	; 2
     694:	19 f4       	brne	.+6      	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
								collision = true;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	89 83       	std	Y+1, r24	; 0x01
     69a:	21 c0       	rjmp	.+66     	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
							else
								gameState[j][playerOne.turns[i].y] = 1;
     69c:	8a 85       	ldd	r24, Y+10	; 0x0a
     69e:	9b 85       	ldd	r25, Y+11	; 0x0b
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	88 0f       	add	r24, r24
     6a6:	99 1f       	adc	r25, r25
     6a8:	85 57       	subi	r24, 0x75	; 117
     6aa:	9d 4f       	sbci	r25, 0xFD	; 253
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 81       	ld	r18, Z
     6b0:	31 81       	ldd	r19, Z+1	; 0x01
     6b2:	8e 85       	ldd	r24, Y+14	; 0x0e
     6b4:	9f 85       	ldd	r25, Y+15	; 0x0f
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	ac 01       	movw	r20, r24
     6bc:	44 0f       	add	r20, r20
     6be:	55 1f       	adc	r21, r21
     6c0:	44 0f       	add	r20, r20
     6c2:	55 1f       	adc	r21, r21
     6c4:	84 0f       	add	r24, r20
     6c6:	95 1f       	adc	r25, r21
     6c8:	82 0f       	add	r24, r18
     6ca:	93 1f       	adc	r25, r19
     6cc:	88 0f       	add	r24, r24
     6ce:	99 1f       	adc	r25, r25
     6d0:	84 59       	subi	r24, 0x94	; 148
     6d2:	9e 4f       	sbci	r25, 0xFE	; 254
     6d4:	21 e0       	ldi	r18, 0x01	; 1
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	fc 01       	movw	r30, r24
     6da:	31 83       	std	Z+1, r19	; 0x01
     6dc:	20 83       	st	Z, r18
							to = from;
							from = playerOne.turns[i + 1].x;
						}

						//Draw line in gameState
						for (int j = from; j <= to; j++) {
     6de:	8e 85       	ldd	r24, Y+14	; 0x0e
     6e0:	9f 85       	ldd	r25, Y+15	; 0x0f
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	9f 87       	std	Y+15, r25	; 0x0f
     6e6:	8e 87       	std	Y+14, r24	; 0x0e
     6e8:	2e 85       	ldd	r18, Y+14	; 0x0e
     6ea:	3f 85       	ldd	r19, Y+15	; 0x0f
     6ec:	8c 81       	ldd	r24, Y+4	; 0x04
     6ee:	9d 81       	ldd	r25, Y+5	; 0x05
     6f0:	82 17       	cp	r24, r18
     6f2:	93 07       	cpc	r25, r19
     6f4:	0c f0       	brlt	.+2      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6f6:	ae cf       	rjmp	.-164    	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     6f8:	01 c1       	rjmp	.+514    	; 0x8fc <__LOCK_REGION_LENGTH__+0x4fc>

					}

				} else { //Processing the current position

					if (playerOne.turns[i].x == playerOne.x) { //Draw vertical line
     6fa:	8a 85       	ldd	r24, Y+10	; 0x0a
     6fc:	9b 85       	ldd	r25, Y+11	; 0x0b
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	87 57       	subi	r24, 0x77	; 119
     708:	9d 4f       	sbci	r25, 0xFD	; 253
     70a:	fc 01       	movw	r30, r24
     70c:	20 81       	ld	r18, Z
     70e:	31 81       	ldd	r19, Z+1	; 0x01
     710:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <playerOne>
     714:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <playerOne+0x1>
     718:	28 17       	cp	r18, r24
     71a:	39 07       	cpc	r19, r25
     71c:	09 f0       	breq	.+2      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     71e:	6e c0       	rjmp	.+220    	; 0x7fc <__LOCK_REGION_LENGTH__+0x3fc>

						from = playerOne.turns[i].y;
     720:	8a 85       	ldd	r24, Y+10	; 0x0a
     722:	9b 85       	ldd	r25, Y+11	; 0x0b
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	88 0f       	add	r24, r24
     72a:	99 1f       	adc	r25, r25
     72c:	85 57       	subi	r24, 0x75	; 117
     72e:	9d 4f       	sbci	r25, 0xFD	; 253
     730:	fc 01       	movw	r30, r24
     732:	80 81       	ld	r24, Z
     734:	91 81       	ldd	r25, Z+1	; 0x01
     736:	9b 83       	std	Y+3, r25	; 0x03
     738:	8a 83       	std	Y+2, r24	; 0x02
						to = playerOne.y;
     73a:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <playerOne+0x2>
     73e:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <playerOne+0x3>
     742:	9d 83       	std	Y+5, r25	; 0x05
     744:	8c 83       	std	Y+4, r24	; 0x04

						if (from > to) {
     746:	2a 81       	ldd	r18, Y+2	; 0x02
     748:	3b 81       	ldd	r19, Y+3	; 0x03
     74a:	8c 81       	ldd	r24, Y+4	; 0x04
     74c:	9d 81       	ldd	r25, Y+5	; 0x05
     74e:	82 17       	cp	r24, r18
     750:	93 07       	cpc	r25, r19
     752:	54 f4       	brge	.+20     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
							to = from;
     754:	8a 81       	ldd	r24, Y+2	; 0x02
     756:	9b 81       	ldd	r25, Y+3	; 0x03
     758:	9d 83       	std	Y+5, r25	; 0x05
     75a:	8c 83       	std	Y+4, r24	; 0x04
							from = playerOne.y;
     75c:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <playerOne+0x2>
     760:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <playerOne+0x3>
     764:	9b 83       	std	Y+3, r25	; 0x03
     766:	8a 83       	std	Y+2, r24	; 0x02
						}

						//Draw line in gameState
						for (int j = from; j <= to; j++) {
     768:	8a 81       	ldd	r24, Y+2	; 0x02
     76a:	9b 81       	ldd	r25, Y+3	; 0x03
     76c:	99 8b       	std	Y+17, r25	; 0x11
     76e:	88 8b       	std	Y+16, r24	; 0x10
     770:	3c c0       	rjmp	.+120    	; 0x7ea <__LOCK_REGION_LENGTH__+0x3ea>
							if (gameState[playerOne.x][j] == 2) //Collision with player 2 !
     772:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <playerOne>
     776:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <playerOne+0x1>
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	9c 01       	movw	r18, r24
     780:	22 0f       	add	r18, r18
     782:	33 1f       	adc	r19, r19
     784:	22 0f       	add	r18, r18
     786:	33 1f       	adc	r19, r19
     788:	82 0f       	add	r24, r18
     78a:	93 1f       	adc	r25, r19
     78c:	28 89       	ldd	r18, Y+16	; 0x10
     78e:	39 89       	ldd	r19, Y+17	; 0x11
     790:	82 0f       	add	r24, r18
     792:	93 1f       	adc	r25, r19
     794:	88 0f       	add	r24, r24
     796:	99 1f       	adc	r25, r25
     798:	84 59       	subi	r24, 0x94	; 148
     79a:	9e 4f       	sbci	r25, 0xFE	; 254
     79c:	fc 01       	movw	r30, r24
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	02 97       	sbiw	r24, 0x02	; 2
     7a4:	19 f4       	brne	.+6      	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
								collision = true;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	89 83       	std	Y+1, r24	; 0x01
     7aa:	1a c0       	rjmp	.+52     	; 0x7e0 <__LOCK_REGION_LENGTH__+0x3e0>
							else
								gameState[playerOne.x][j] = 1;
     7ac:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <playerOne>
     7b0:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <playerOne+0x1>
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	9c 01       	movw	r18, r24
     7ba:	22 0f       	add	r18, r18
     7bc:	33 1f       	adc	r19, r19
     7be:	22 0f       	add	r18, r18
     7c0:	33 1f       	adc	r19, r19
     7c2:	82 0f       	add	r24, r18
     7c4:	93 1f       	adc	r25, r19
     7c6:	28 89       	ldd	r18, Y+16	; 0x10
     7c8:	39 89       	ldd	r19, Y+17	; 0x11
     7ca:	82 0f       	add	r24, r18
     7cc:	93 1f       	adc	r25, r19
     7ce:	88 0f       	add	r24, r24
     7d0:	99 1f       	adc	r25, r25
     7d2:	84 59       	subi	r24, 0x94	; 148
     7d4:	9e 4f       	sbci	r25, 0xFE	; 254
     7d6:	21 e0       	ldi	r18, 0x01	; 1
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	fc 01       	movw	r30, r24
     7dc:	31 83       	std	Z+1, r19	; 0x01
     7de:	20 83       	st	Z, r18
							to = from;
							from = playerOne.y;
						}

						//Draw line in gameState
						for (int j = from; j <= to; j++) {
     7e0:	88 89       	ldd	r24, Y+16	; 0x10
     7e2:	99 89       	ldd	r25, Y+17	; 0x11
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	99 8b       	std	Y+17, r25	; 0x11
     7e8:	88 8b       	std	Y+16, r24	; 0x10
     7ea:	28 89       	ldd	r18, Y+16	; 0x10
     7ec:	39 89       	ldd	r19, Y+17	; 0x11
     7ee:	8c 81       	ldd	r24, Y+4	; 0x04
     7f0:	9d 81       	ldd	r25, Y+5	; 0x05
     7f2:	82 17       	cp	r24, r18
     7f4:	93 07       	cpc	r25, r19
     7f6:	0c f0       	brlt	.+2      	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
     7f8:	bc cf       	rjmp	.-136    	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
     7fa:	80 c0       	rjmp	.+256    	; 0x8fc <__LOCK_REGION_LENGTH__+0x4fc>
								collision = true;
							else
								gameState[playerOne.x][j] = 1;
						}

					} else if (playerOne.turns[i].y == playerOne.y) { //Draw horizontal line
     7fc:	8a 85       	ldd	r24, Y+10	; 0x0a
     7fe:	9b 85       	ldd	r25, Y+11	; 0x0b
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	88 0f       	add	r24, r24
     806:	99 1f       	adc	r25, r25
     808:	85 57       	subi	r24, 0x75	; 117
     80a:	9d 4f       	sbci	r25, 0xFD	; 253
     80c:	fc 01       	movw	r30, r24
     80e:	20 81       	ld	r18, Z
     810:	31 81       	ldd	r19, Z+1	; 0x01
     812:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <playerOne+0x2>
     816:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <playerOne+0x3>
     81a:	28 17       	cp	r18, r24
     81c:	39 07       	cpc	r19, r25
     81e:	09 f0       	breq	.+2      	; 0x822 <__LOCK_REGION_LENGTH__+0x422>
     820:	6d c0       	rjmp	.+218    	; 0x8fc <__LOCK_REGION_LENGTH__+0x4fc>

						from = playerOne.turns[i].x;
     822:	8a 85       	ldd	r24, Y+10	; 0x0a
     824:	9b 85       	ldd	r25, Y+11	; 0x0b
     826:	88 0f       	add	r24, r24
     828:	99 1f       	adc	r25, r25
     82a:	88 0f       	add	r24, r24
     82c:	99 1f       	adc	r25, r25
     82e:	87 57       	subi	r24, 0x77	; 119
     830:	9d 4f       	sbci	r25, 0xFD	; 253
     832:	fc 01       	movw	r30, r24
     834:	80 81       	ld	r24, Z
     836:	91 81       	ldd	r25, Z+1	; 0x01
     838:	9b 83       	std	Y+3, r25	; 0x03
     83a:	8a 83       	std	Y+2, r24	; 0x02
						to = playerOne.x;
     83c:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <playerOne>
     840:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <playerOne+0x1>
     844:	9d 83       	std	Y+5, r25	; 0x05
     846:	8c 83       	std	Y+4, r24	; 0x04

						if (from > to) {
     848:	2a 81       	ldd	r18, Y+2	; 0x02
     84a:	3b 81       	ldd	r19, Y+3	; 0x03
     84c:	8c 81       	ldd	r24, Y+4	; 0x04
     84e:	9d 81       	ldd	r25, Y+5	; 0x05
     850:	82 17       	cp	r24, r18
     852:	93 07       	cpc	r25, r19
     854:	54 f4       	brge	.+20     	; 0x86a <__LOCK_REGION_LENGTH__+0x46a>
							to = from;
     856:	8a 81       	ldd	r24, Y+2	; 0x02
     858:	9b 81       	ldd	r25, Y+3	; 0x03
     85a:	9d 83       	std	Y+5, r25	; 0x05
     85c:	8c 83       	std	Y+4, r24	; 0x04
							from = playerOne.x;
     85e:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <playerOne>
     862:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <playerOne+0x1>
     866:	9b 83       	std	Y+3, r25	; 0x03
     868:	8a 83       	std	Y+2, r24	; 0x02
						}

						//Draw line in gameState
						for (int j = from; j <= to; j++) {
     86a:	8a 81       	ldd	r24, Y+2	; 0x02
     86c:	9b 81       	ldd	r25, Y+3	; 0x03
     86e:	9b 8b       	std	Y+19, r25	; 0x13
     870:	8a 8b       	std	Y+18, r24	; 0x12
     872:	3c c0       	rjmp	.+120    	; 0x8ec <__LOCK_REGION_LENGTH__+0x4ec>
							if (gameState[j][playerOne.y] == 2) //Collision with player 2 !
     874:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <playerOne+0x2>
     878:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <playerOne+0x3>
     87c:	8a 89       	ldd	r24, Y+18	; 0x12
     87e:	9b 89       	ldd	r25, Y+19	; 0x13
     880:	88 0f       	add	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	ac 01       	movw	r20, r24
     886:	44 0f       	add	r20, r20
     888:	55 1f       	adc	r21, r21
     88a:	44 0f       	add	r20, r20
     88c:	55 1f       	adc	r21, r21
     88e:	84 0f       	add	r24, r20
     890:	95 1f       	adc	r25, r21
     892:	82 0f       	add	r24, r18
     894:	93 1f       	adc	r25, r19
     896:	88 0f       	add	r24, r24
     898:	99 1f       	adc	r25, r25
     89a:	84 59       	subi	r24, 0x94	; 148
     89c:	9e 4f       	sbci	r25, 0xFE	; 254
     89e:	fc 01       	movw	r30, r24
     8a0:	80 81       	ld	r24, Z
     8a2:	91 81       	ldd	r25, Z+1	; 0x01
     8a4:	02 97       	sbiw	r24, 0x02	; 2
     8a6:	19 f4       	brne	.+6      	; 0x8ae <__LOCK_REGION_LENGTH__+0x4ae>
								collision = true;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	89 83       	std	Y+1, r24	; 0x01
     8ac:	1a c0       	rjmp	.+52     	; 0x8e2 <__LOCK_REGION_LENGTH__+0x4e2>
							else
								gameState[j][playerOne.y] = 1;
     8ae:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <playerOne+0x2>
     8b2:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <playerOne+0x3>
     8b6:	8a 89       	ldd	r24, Y+18	; 0x12
     8b8:	9b 89       	ldd	r25, Y+19	; 0x13
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	ac 01       	movw	r20, r24
     8c0:	44 0f       	add	r20, r20
     8c2:	55 1f       	adc	r21, r21
     8c4:	44 0f       	add	r20, r20
     8c6:	55 1f       	adc	r21, r21
     8c8:	84 0f       	add	r24, r20
     8ca:	95 1f       	adc	r25, r21
     8cc:	82 0f       	add	r24, r18
     8ce:	93 1f       	adc	r25, r19
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	84 59       	subi	r24, 0x94	; 148
     8d6:	9e 4f       	sbci	r25, 0xFE	; 254
     8d8:	21 e0       	ldi	r18, 0x01	; 1
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	fc 01       	movw	r30, r24
     8de:	31 83       	std	Z+1, r19	; 0x01
     8e0:	20 83       	st	Z, r18
							to = from;
							from = playerOne.x;
						}

						//Draw line in gameState
						for (int j = from; j <= to; j++) {
     8e2:	8a 89       	ldd	r24, Y+18	; 0x12
     8e4:	9b 89       	ldd	r25, Y+19	; 0x13
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	9b 8b       	std	Y+19, r25	; 0x13
     8ea:	8a 8b       	std	Y+18, r24	; 0x12
     8ec:	2a 89       	ldd	r18, Y+18	; 0x12
     8ee:	3b 89       	ldd	r19, Y+19	; 0x13
     8f0:	8c 81       	ldd	r24, Y+4	; 0x04
     8f2:	9d 81       	ldd	r25, Y+5	; 0x05
     8f4:	82 17       	cp	r24, r18
     8f6:	93 07       	cpc	r25, r19
     8f8:	0c f0       	brlt	.+2      	; 0x8fc <__LOCK_REGION_LENGTH__+0x4fc>
     8fa:	bc cf       	rjmp	.-136    	; 0x874 <__LOCK_REGION_LENGTH__+0x474>
			for (int i = 0; i < 14; i++)
				for (int j = 0; j < 10; j++)
					if (gameState[i][j] == 1)
						gameState[i][j] = 0;
	
			for (int i = 0; i < playerOne.turnsCount + 1; i++) {
     8fc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8fe:	9b 85       	ldd	r25, Y+11	; 0x0b
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	9b 87       	std	Y+11, r25	; 0x0b
     904:	8a 87       	std	Y+10, r24	; 0x0a
     906:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <playerOne+0x41>
     90a:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <playerOne+0x42>
     90e:	9c 01       	movw	r18, r24
     910:	2f 5f       	subi	r18, 0xFF	; 255
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	8a 85       	ldd	r24, Y+10	; 0x0a
     916:	9b 85       	ldd	r25, Y+11	; 0x0b
     918:	82 17       	cp	r24, r18
     91a:	93 07       	cpc	r25, r19
     91c:	0c f4       	brge	.+2      	; 0x920 <__stack+0x21>
     91e:	95 cd       	rjmp	.-1238   	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>

				}
			}

			/* Move players in their current direction */
			move_player(&playerOne);
     920:	84 e8       	ldi	r24, 0x84	; 132
     922:	92 e0       	ldi	r25, 0x02	; 2
     924:	0e 94 4c 01 	call	0x298	; 0x298 <move_player>

			vTaskDelay(1000);
     928:	88 ee       	ldi	r24, 0xE8	; 232
     92a:	93 e0       	ldi	r25, 0x03	; 3
     92c:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <vTaskDelay>
	bool collision = false;
	int from, to;

	for(;;) {

		while(!collision) {
     930:	99 81       	ldd	r25, Y+1	; 0x01
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	89 27       	eor	r24, r25
     936:	88 23       	and	r24, r24
     938:	09 f0       	breq	.+2      	; 0x93c <__stack+0x3d>
     93a:	3d cd       	rjmp	.-1414   	; 0x3b6 <game_processing+0x1c>
			move_player(&playerOne);

			vTaskDelay(1000);
		}

		die();
     93c:	0e 94 3f 01 	call	0x27e	; 0x27e <die>
	}
     940:	39 cd       	rjmp	.-1422   	; 0x3b4 <game_processing+0x1a>

00000942 <read_joystick>:
	vTaskDelete(NULL);
}


void read_joystick(void *pvParameters)
{
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
     94a:	2c 97       	sbiw	r28, 0x0c	; 12
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	9c 87       	std	Y+12, r25	; 0x0c
     958:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t left;
	uint8_t up;
	uint8_t down;
	uint8_t pushed;
	Direction direction;
	uint8_t debounceCounter = 0;
     95a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t debounceThreshold = 15;
     95c:	8f e0       	ldi	r24, 0x0F	; 15
     95e:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t turnPlayer = 0;
     960:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t isPressing = 0;
     962:	1c 82       	std	Y+4, r1	; 0x04

	for (;;) {
		/*Constantly checking joystick state*/
		right	= !(PINC >> 1 & 0x01);
     964:	86 e2       	ldi	r24, 0x26	; 38
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	fc 01       	movw	r30, r24
     96a:	80 81       	ld	r24, Z
     96c:	86 95       	lsr	r24
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	81 70       	andi	r24, 0x01	; 1
     974:	99 27       	eor	r25, r25
     976:	21 e0       	ldi	r18, 0x01	; 1
     978:	89 2b       	or	r24, r25
     97a:	09 f0       	breq	.+2      	; 0x97e <read_joystick+0x3c>
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	2e 83       	std	Y+6, r18	; 0x06
		left	= !(PINC >> 7 & 0x01);
     980:	86 e2       	ldi	r24, 0x26	; 38
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	fc 01       	movw	r30, r24
     986:	80 81       	ld	r24, Z
     988:	88 1f       	adc	r24, r24
     98a:	88 27       	eor	r24, r24
     98c:	88 1f       	adc	r24, r24
     98e:	88 2f       	mov	r24, r24
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	81 70       	andi	r24, 0x01	; 1
     994:	99 27       	eor	r25, r25
     996:	21 e0       	ldi	r18, 0x01	; 1
     998:	89 2b       	or	r24, r25
     99a:	09 f0       	breq	.+2      	; 0x99e <read_joystick+0x5c>
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	2f 83       	std	Y+7, r18	; 0x07
		up		= !(PINC >> 6 & 0x01);
     9a0:	86 e2       	ldi	r24, 0x26	; 38
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	fc 01       	movw	r30, r24
     9a6:	80 81       	ld	r24, Z
     9a8:	82 95       	swap	r24
     9aa:	86 95       	lsr	r24
     9ac:	86 95       	lsr	r24
     9ae:	83 70       	andi	r24, 0x03	; 3
     9b0:	88 2f       	mov	r24, r24
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	81 70       	andi	r24, 0x01	; 1
     9b6:	99 27       	eor	r25, r25
     9b8:	21 e0       	ldi	r18, 0x01	; 1
     9ba:	89 2b       	or	r24, r25
     9bc:	09 f0       	breq	.+2      	; 0x9c0 <read_joystick+0x7e>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	28 87       	std	Y+8, r18	; 0x08
		down	= !(PINC >> 0 & 0x01);
     9c2:	86 e2       	ldi	r24, 0x26	; 38
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	fc 01       	movw	r30, r24
     9c8:	80 81       	ld	r24, Z
     9ca:	88 2f       	mov	r24, r24
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	81 70       	andi	r24, 0x01	; 1
     9d0:	99 27       	eor	r25, r25
     9d2:	21 e0       	ldi	r18, 0x01	; 1
     9d4:	89 2b       	or	r24, r25
     9d6:	09 f0       	breq	.+2      	; 0x9da <read_joystick+0x98>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	29 87       	std	Y+9, r18	; 0x09
		pushed  = !(PIND >> 3 & 0x01);
     9dc:	89 e2       	ldi	r24, 0x29	; 41
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	fc 01       	movw	r30, r24
     9e2:	80 81       	ld	r24, Z
     9e4:	86 95       	lsr	r24
     9e6:	86 95       	lsr	r24
     9e8:	86 95       	lsr	r24
     9ea:	88 2f       	mov	r24, r24
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	81 70       	andi	r24, 0x01	; 1
     9f0:	99 27       	eor	r25, r25
     9f2:	21 e0       	ldi	r18, 0x01	; 1
     9f4:	89 2b       	or	r24, r25
     9f6:	09 f0       	breq	.+2      	; 0x9fa <read_joystick+0xb8>
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	2a 87       	std	Y+10, r18	; 0x0a

		if (down){
     9fc:	89 85       	ldd	r24, Y+9	; 0x09
     9fe:	88 23       	and	r24, r24
     a00:	39 f0       	breq	.+14     	; 0xa10 <read_joystick+0xce>
			direction = DOWN;
     a02:	83 e0       	ldi	r24, 0x03	; 3
     a04:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	8c 83       	std	Y+4, r24	; 0x04
     a0e:	23 c0       	rjmp	.+70     	; 0xa56 <read_joystick+0x114>
		} else if (right) {
     a10:	8e 81       	ldd	r24, Y+6	; 0x06
     a12:	88 23       	and	r24, r24
     a14:	39 f0       	breq	.+14     	; 0xa24 <read_joystick+0xe2>
			direction = RIGHT;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	8c 83       	std	Y+4, r24	; 0x04
     a22:	19 c0       	rjmp	.+50     	; 0xa56 <read_joystick+0x114>
		} else if (up) {
     a24:	88 85       	ldd	r24, Y+8	; 0x08
     a26:	88 23       	and	r24, r24
     a28:	39 f0       	breq	.+14     	; 0xa38 <read_joystick+0xf6>
			direction = UP;
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	8c 83       	std	Y+4, r24	; 0x04
     a36:	0f c0       	rjmp	.+30     	; 0xa56 <read_joystick+0x114>
		} else if (left) {
     a38:	8f 81       	ldd	r24, Y+7	; 0x07
     a3a:	88 23       	and	r24, r24
     a3c:	31 f0       	breq	.+12     	; 0xa4a <read_joystick+0x108>
			direction = LEFT;
     a3e:	19 82       	std	Y+1, r1	; 0x01
			turnPlayer = 1;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	8c 83       	std	Y+4, r24	; 0x04
     a48:	06 c0       	rjmp	.+12     	; 0xa56 <read_joystick+0x114>
		} else if (pushed) {
     a4a:	8a 85       	ldd	r24, Y+10	; 0x0a
     a4c:	88 23       	and	r24, r24
     a4e:	11 f0       	breq	.+4      	; 0xa54 <read_joystick+0x112>
			//TODO: pause game
			debounceCounter = 0;
     a50:	1a 82       	std	Y+2, r1	; 0x02
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <read_joystick+0x114>
		} else {
			isPressing = 0;
     a54:	1c 82       	std	Y+4, r1	; 0x04
			//debounceCounter = 0;
		}

		if (turnPlayer && !isPressing && (++debounceCounter >= debounceThreshold)) {
     a56:	8b 81       	ldd	r24, Y+3	; 0x03
     a58:	88 23       	and	r24, r24
     a5a:	c9 f0       	breq	.+50     	; 0xa8e <read_joystick+0x14c>
     a5c:	8c 81       	ldd	r24, Y+4	; 0x04
     a5e:	88 23       	and	r24, r24
     a60:	b1 f4       	brne	.+44     	; 0xa8e <read_joystick+0x14c>
     a62:	8a 81       	ldd	r24, Y+2	; 0x02
     a64:	8f 5f       	subi	r24, 0xFF	; 255
     a66:	8a 83       	std	Y+2, r24	; 0x02
     a68:	9a 81       	ldd	r25, Y+2	; 0x02
     a6a:	8d 81       	ldd	r24, Y+5	; 0x05
     a6c:	98 17       	cp	r25, r24
     a6e:	78 f0       	brcs	.+30     	; 0xa8e <read_joystick+0x14c>
			com_send_bytes("move", 4);
     a70:	64 e0       	ldi	r22, 0x04	; 4
     a72:	8c e1       	ldi	r24, 0x1C	; 28
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	0e 94 73 08 	call	0x10e6	; 0x10e6 <com_send_bytes>
			turn_player(&playerOne, direction);
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	88 2f       	mov	r24, r24
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	bc 01       	movw	r22, r24
     a82:	84 e8       	ldi	r24, 0x84	; 132
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	0e 94 4c 05 	call	0xa98	; 0xa98 <turn_player>
			turnPlayer = 0;
     a8a:	1b 82       	std	Y+3, r1	; 0x03
			debounceCounter = 0;
     a8c:	1a 82       	std	Y+2, r1	; 0x02
		}

		vTaskDelay(20);
     a8e:	84 e1       	ldi	r24, 0x14	; 20
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <vTaskDelay>
	}
     a96:	66 cf       	rjmp	.-308    	; 0x964 <read_joystick+0x22>

00000a98 <turn_player>:



/* Changes the player's direction: will be applied in game_processing() */
void turn_player(Player *player, Direction direction)
{
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	00 d0       	rcall	.+0      	; 0xa9e <turn_player+0x6>
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <turn_player+0x8>
     aa0:	1f 92       	push	r1
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
     aa6:	9c 83       	std	Y+4, r25	; 0x04
     aa8:	8b 83       	std	Y+3, r24	; 0x03
     aaa:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t validTurn = false, doTurn = false;
     aac:	19 82       	std	Y+1, r1	; 0x01
     aae:	1a 82       	std	Y+2, r1	; 0x02

	if ((*player).direction != direction)
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	9c 81       	ldd	r25, Y+4	; 0x04
     ab4:	fc 01       	movw	r30, r24
     ab6:	94 81       	ldd	r25, Z+4	; 0x04
     ab8:	8d 81       	ldd	r24, Y+5	; 0x05
     aba:	98 17       	cp	r25, r24
     abc:	11 f0       	breq	.+4      	; 0xac2 <turn_player+0x2a>
		doTurn = true;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	8a 83       	std	Y+2, r24	; 0x02

	switch (direction) {
     ac2:	8d 81       	ldd	r24, Y+5	; 0x05
     ac4:	88 2f       	mov	r24, r24
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	91 05       	cpc	r25, r1
     acc:	09 f4       	brne	.+2      	; 0xad0 <turn_player+0x38>
     ace:	49 c0       	rjmp	.+146    	; 0xb62 <turn_player+0xca>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	91 05       	cpc	r25, r1
     ad4:	1c f4       	brge	.+6      	; 0xadc <turn_player+0x44>
     ad6:	89 2b       	or	r24, r25
     ad8:	81 f1       	breq	.+96     	; 0xb3a <turn_player+0xa2>
     ada:	5e c0       	rjmp	.+188    	; 0xb98 <turn_player+0x100>
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	91 05       	cpc	r25, r1
     ae0:	19 f0       	breq	.+6      	; 0xae8 <turn_player+0x50>
     ae2:	03 97       	sbiw	r24, 0x03	; 3
     ae4:	b1 f0       	breq	.+44     	; 0xb12 <turn_player+0x7a>
     ae6:	58 c0       	rjmp	.+176    	; 0xb98 <turn_player+0x100>
		case UP:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	9c 81       	ldd	r25, Y+4	; 0x04
     aec:	fc 01       	movw	r30, r24
     aee:	84 81       	ldd	r24, Z+4	; 0x04
     af0:	88 23       	and	r24, r24
     af2:	39 f0       	breq	.+14     	; 0xb02 <turn_player+0x6a>
     af4:	8b 81       	ldd	r24, Y+3	; 0x03
     af6:	9c 81       	ldd	r25, Y+4	; 0x04
     af8:	fc 01       	movw	r30, r24
     afa:	84 81       	ldd	r24, Z+4	; 0x04
     afc:	81 30       	cpi	r24, 0x01	; 1
     afe:	09 f0       	breq	.+2      	; 0xb02 <turn_player+0x6a>
     b00:	44 c0       	rjmp	.+136    	; 0xb8a <turn_player+0xf2>
				(*player).direction = direction;
     b02:	8b 81       	ldd	r24, Y+3	; 0x03
     b04:	9c 81       	ldd	r25, Y+4	; 0x04
     b06:	2d 81       	ldd	r18, Y+5	; 0x05
     b08:	fc 01       	movw	r30, r24
     b0a:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     b10:	3c c0       	rjmp	.+120    	; 0xb8a <turn_player+0xf2>
		case DOWN:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
     b12:	8b 81       	ldd	r24, Y+3	; 0x03
     b14:	9c 81       	ldd	r25, Y+4	; 0x04
     b16:	fc 01       	movw	r30, r24
     b18:	84 81       	ldd	r24, Z+4	; 0x04
     b1a:	88 23       	and	r24, r24
     b1c:	31 f0       	breq	.+12     	; 0xb2a <turn_player+0x92>
     b1e:	8b 81       	ldd	r24, Y+3	; 0x03
     b20:	9c 81       	ldd	r25, Y+4	; 0x04
     b22:	fc 01       	movw	r30, r24
     b24:	84 81       	ldd	r24, Z+4	; 0x04
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	91 f5       	brne	.+100    	; 0xb8e <turn_player+0xf6>
				(*player).direction = direction;
     b2a:	8b 81       	ldd	r24, Y+3	; 0x03
     b2c:	9c 81       	ldd	r25, Y+4	; 0x04
     b2e:	2d 81       	ldd	r18, Y+5	; 0x05
     b30:	fc 01       	movw	r30, r24
     b32:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     b38:	2a c0       	rjmp	.+84     	; 0xb8e <turn_player+0xf6>
		case LEFT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	9c 81       	ldd	r25, Y+4	; 0x04
     b3e:	fc 01       	movw	r30, r24
     b40:	84 81       	ldd	r24, Z+4	; 0x04
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	31 f0       	breq	.+12     	; 0xb52 <turn_player+0xba>
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	fc 01       	movw	r30, r24
     b4c:	84 81       	ldd	r24, Z+4	; 0x04
     b4e:	83 30       	cpi	r24, 0x03	; 3
     b50:	01 f5       	brne	.+64     	; 0xb92 <turn_player+0xfa>
				(*player).direction = direction;
     b52:	8b 81       	ldd	r24, Y+3	; 0x03
     b54:	9c 81       	ldd	r25, Y+4	; 0x04
     b56:	2d 81       	ldd	r18, Y+5	; 0x05
     b58:	fc 01       	movw	r30, r24
     b5a:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     b60:	18 c0       	rjmp	.+48     	; 0xb92 <turn_player+0xfa>
		case RIGHT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	fc 01       	movw	r30, r24
     b68:	84 81       	ldd	r24, Z+4	; 0x04
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	31 f0       	breq	.+12     	; 0xb7a <turn_player+0xe2>
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	9c 81       	ldd	r25, Y+4	; 0x04
     b72:	fc 01       	movw	r30, r24
     b74:	84 81       	ldd	r24, Z+4	; 0x04
     b76:	83 30       	cpi	r24, 0x03	; 3
     b78:	71 f4       	brne	.+28     	; 0xb96 <turn_player+0xfe>
				(*player).direction = direction;
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	9c 81       	ldd	r25, Y+4	; 0x04
     b7e:	2d 81       	ldd	r18, Y+5	; 0x05
     b80:	fc 01       	movw	r30, r24
     b82:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     b88:	06 c0       	rjmp	.+12     	; 0xb96 <turn_player+0xfe>
		case UP:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
     b8a:	00 00       	nop
     b8c:	05 c0       	rjmp	.+10     	; 0xb98 <turn_player+0x100>
		case DOWN:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
     b8e:	00 00       	nop
     b90:	03 c0       	rjmp	.+6      	; 0xb98 <turn_player+0x100>
		case LEFT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
     b92:	00 00       	nop
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <turn_player+0x100>
		case RIGHT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
     b96:	00 00       	nop
	}

	if (doTurn && validTurn) { //New turn !
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	88 23       	and	r24, r24
     b9c:	09 f4       	brne	.+2      	; 0xba0 <turn_player+0x108>
     b9e:	68 c0       	rjmp	.+208    	; 0xc70 <turn_player+0x1d8>
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	88 23       	and	r24, r24
     ba4:	09 f4       	brne	.+2      	; 0xba8 <turn_player+0x110>
     ba6:	64 c0       	rjmp	.+200    	; 0xc70 <turn_player+0x1d8>
		(*player).turnsCount++;
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	9c 81       	ldd	r25, Y+4	; 0x04
     bac:	8f 5b       	subi	r24, 0xBF	; 191
     bae:	9f 4f       	sbci	r25, 0xFF	; 255
     bb0:	fc 01       	movw	r30, r24
     bb2:	80 81       	ld	r24, Z
     bb4:	91 81       	ldd	r25, Z+1	; 0x01
     bb6:	9c 01       	movw	r18, r24
     bb8:	2f 5f       	subi	r18, 0xFF	; 255
     bba:	3f 4f       	sbci	r19, 0xFF	; 255
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	9c 81       	ldd	r25, Y+4	; 0x04
     bc0:	8f 5b       	subi	r24, 0xBF	; 191
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	fc 01       	movw	r30, r24
     bc6:	31 83       	std	Z+1, r19	; 0x01
     bc8:	20 83       	st	Z, r18

		if ((*player).turnsCount < MAXTURNS && (*player).turns[(*player).turnsCount].x == -1) { //Free turn slot
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	8f 5b       	subi	r24, 0xBF	; 191
     bd0:	9f 4f       	sbci	r25, 0xFF	; 255
     bd2:	fc 01       	movw	r30, r24
     bd4:	80 81       	ld	r24, Z
     bd6:	91 81       	ldd	r25, Z+1	; 0x01
     bd8:	0e 97       	sbiw	r24, 0x0e	; 14
     bda:	0c f0       	brlt	.+2      	; 0xbde <turn_player+0x146>
     bdc:	45 c0       	rjmp	.+138    	; 0xc68 <turn_player+0x1d0>
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	9c 81       	ldd	r25, Y+4	; 0x04
     be2:	8f 5b       	subi	r24, 0xBF	; 191
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	fc 01       	movw	r30, r24
     be8:	80 81       	ld	r24, Z
     bea:	91 81       	ldd	r25, Z+1	; 0x01
     bec:	2b 81       	ldd	r18, Y+3	; 0x03
     bee:	3c 81       	ldd	r19, Y+4	; 0x04
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	82 0f       	add	r24, r18
     bfa:	93 1f       	adc	r25, r19
     bfc:	05 96       	adiw	r24, 0x05	; 5
     bfe:	fc 01       	movw	r30, r24
     c00:	80 81       	ld	r24, Z
     c02:	91 81       	ldd	r25, Z+1	; 0x01
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	81 f5       	brne	.+96     	; 0xc68 <turn_player+0x1d0>
			(*player).turns[(*player).turnsCount].x = (*player).x;
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	9c 81       	ldd	r25, Y+4	; 0x04
     c0c:	8f 5b       	subi	r24, 0xBF	; 191
     c0e:	9f 4f       	sbci	r25, 0xFF	; 255
     c10:	fc 01       	movw	r30, r24
     c12:	80 81       	ld	r24, Z
     c14:	91 81       	ldd	r25, Z+1	; 0x01
     c16:	2b 81       	ldd	r18, Y+3	; 0x03
     c18:	3c 81       	ldd	r19, Y+4	; 0x04
     c1a:	f9 01       	movw	r30, r18
     c1c:	20 81       	ld	r18, Z
     c1e:	31 81       	ldd	r19, Z+1	; 0x01
     c20:	4b 81       	ldd	r20, Y+3	; 0x03
     c22:	5c 81       	ldd	r21, Y+4	; 0x04
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	84 0f       	add	r24, r20
     c2e:	95 1f       	adc	r25, r21
     c30:	05 96       	adiw	r24, 0x05	; 5
     c32:	fc 01       	movw	r30, r24
     c34:	31 83       	std	Z+1, r19	; 0x01
     c36:	20 83       	st	Z, r18
			(*player).turns[(*player).turnsCount].y =  (*player).y;
     c38:	8b 81       	ldd	r24, Y+3	; 0x03
     c3a:	9c 81       	ldd	r25, Y+4	; 0x04
     c3c:	8f 5b       	subi	r24, 0xBF	; 191
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	fc 01       	movw	r30, r24
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	2b 81       	ldd	r18, Y+3	; 0x03
     c48:	3c 81       	ldd	r19, Y+4	; 0x04
     c4a:	f9 01       	movw	r30, r18
     c4c:	22 81       	ldd	r18, Z+2	; 0x02
     c4e:	33 81       	ldd	r19, Z+3	; 0x03
     c50:	4b 81       	ldd	r20, Y+3	; 0x03
     c52:	5c 81       	ldd	r21, Y+4	; 0x04
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	84 0f       	add	r24, r20
     c5e:	95 1f       	adc	r25, r21
     c60:	07 96       	adiw	r24, 0x07	; 7
     c62:	fc 01       	movw	r30, r24
     c64:	31 83       	std	Z+1, r19	; 0x01
     c66:	20 83       	st	Z, r18
		} else {
			//TODO
		}

		move_player(player);
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	0e 94 4c 01 	call	0x298	; 0x298 <move_player>
	}
}
     c70:	00 00       	nop
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <init_players>:

/* Initialize the players' positions and turns */
void init_players()
{
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	00 d0       	rcall	.+0      	; 0xc88 <init_players+0x6>
     c88:	00 d0       	rcall	.+0      	; 0xc8a <init_players+0x8>
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <init_players+0xa>
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62

	for (int i = 0; i < MAXTURNS + 1; i++) { //MAXTURNS + 1 because turn[0] is the init position, not a turn
     c90:	1a 82       	std	Y+2, r1	; 0x02
     c92:	19 82       	std	Y+1, r1	; 0x01
     c94:	39 c0       	rjmp	.+114    	; 0xd08 <init_players+0x86>
		playerOne.turns[i].x = -1;
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	87 57       	subi	r24, 0x77	; 119
     ca4:	9d 4f       	sbci	r25, 0xFD	; 253
     ca6:	2f ef       	ldi	r18, 0xFF	; 255
     ca8:	3f ef       	ldi	r19, 0xFF	; 255
     caa:	fc 01       	movw	r30, r24
     cac:	31 83       	std	Z+1, r19	; 0x01
     cae:	20 83       	st	Z, r18
		playerOne.turns[i].y = -1;
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	85 57       	subi	r24, 0x75	; 117
     cbe:	9d 4f       	sbci	r25, 0xFD	; 253
     cc0:	2f ef       	ldi	r18, 0xFF	; 255
     cc2:	3f ef       	ldi	r19, 0xFF	; 255
     cc4:	fc 01       	movw	r30, r24
     cc6:	31 83       	std	Z+1, r19	; 0x01
     cc8:	20 83       	st	Z, r18
		playerTwo.turns[i].x = -1;
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	84 53       	subi	r24, 0x34	; 52
     cd8:	9d 4f       	sbci	r25, 0xFD	; 253
     cda:	2f ef       	ldi	r18, 0xFF	; 255
     cdc:	3f ef       	ldi	r19, 0xFF	; 255
     cde:	fc 01       	movw	r30, r24
     ce0:	31 83       	std	Z+1, r19	; 0x01
     ce2:	20 83       	st	Z, r18
		playerTwo.turns[i].y = -1;
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	82 53       	subi	r24, 0x32	; 50
     cf2:	9d 4f       	sbci	r25, 0xFD	; 253
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	fc 01       	movw	r30, r24
     cfa:	31 83       	std	Z+1, r19	; 0x01
     cfc:	20 83       	st	Z, r18

/* Initialize the players' positions and turns */
void init_players()
{

	for (int i = 0; i < MAXTURNS + 1; i++) { //MAXTURNS + 1 because turn[0] is the init position, not a turn
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	9a 81       	ldd	r25, Y+2	; 0x02
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	9a 83       	std	Y+2, r25	; 0x02
     d06:	89 83       	std	Y+1, r24	; 0x01
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	9a 81       	ldd	r25, Y+2	; 0x02
     d0c:	0f 97       	sbiw	r24, 0x0f	; 15
     d0e:	1c f2       	brlt	.-122    	; 0xc96 <init_players+0x14>
		playerOne.turns[i].y = -1;
		playerTwo.turns[i].x = -1;
		playerTwo.turns[i].y = -1;
	}

	playerOne.turnsCount = 0;
     d10:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <playerOne+0x42>
     d14:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <playerOne+0x41>
	playerTwo.turnsCount = 0;
     d18:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <playerTwo+0x42>
     d1c:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <playerTwo+0x41>

	playerOne.x = 0;
     d20:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <playerOne+0x1>
     d24:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <playerOne>
	playerOne.y = 5;
     d28:	85 e0       	ldi	r24, 0x05	; 5
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <playerOne+0x3>
     d30:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <playerOne+0x2>
	playerOne.direction = RIGHT;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <playerOne+0x4>
	Turn turn0;
	turn0.x = 0;
     d3a:	1c 82       	std	Y+4, r1	; 0x04
     d3c:	1b 82       	std	Y+3, r1	; 0x03
	turn0.y = 5;
     d3e:	85 e0       	ldi	r24, 0x05	; 5
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	9e 83       	std	Y+6, r25	; 0x06
     d44:	8d 83       	std	Y+5, r24	; 0x05
	playerOne.turns[0] = turn0;
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	9c 81       	ldd	r25, Y+4	; 0x04
     d4a:	ad 81       	ldd	r26, Y+5	; 0x05
     d4c:	be 81       	ldd	r27, Y+6	; 0x06
     d4e:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <playerOne+0x5>
     d52:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <playerOne+0x6>
     d56:	a0 93 8b 02 	sts	0x028B, r26	; 0x80028b <playerOne+0x7>
     d5a:	b0 93 8c 02 	sts	0x028C, r27	; 0x80028c <playerOne+0x8>

	playerTwo.x = 10;
     d5e:	8a e0       	ldi	r24, 0x0A	; 10
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <playerTwo+0x1>
     d66:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <playerTwo>
	playerTwo.y = 5;
     d6a:	85 e0       	ldi	r24, 0x05	; 5
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <playerTwo+0x3>
     d72:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <playerTwo+0x2>
	playerTwo.direction = LEFT;
     d76:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <playerTwo+0x4>
	turn0;
	turn0.x = 10;
     d7a:	8a e0       	ldi	r24, 0x0A	; 10
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	9c 83       	std	Y+4, r25	; 0x04
     d80:	8b 83       	std	Y+3, r24	; 0x03
	turn0.y = 5;
     d82:	85 e0       	ldi	r24, 0x05	; 5
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9e 83       	std	Y+6, r25	; 0x06
     d88:	8d 83       	std	Y+5, r24	; 0x05
	playerTwo.turns[0] = turn0;
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	9c 81       	ldd	r25, Y+4	; 0x04
     d8e:	ad 81       	ldd	r26, Y+5	; 0x05
     d90:	be 81       	ldd	r27, Y+6	; 0x06
     d92:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <playerTwo+0x5>
     d96:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <playerTwo+0x6>
     d9a:	a0 93 ce 02 	sts	0x02CE, r26	; 0x8002ce <playerTwo+0x7>
     d9e:	b0 93 cf 02 	sts	0x02CF, r27	; 0x8002cf <playerTwo+0x8>
}
     da2:	00 00       	nop
     da4:	26 96       	adiw	r28, 0x06	; 6
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	08 95       	ret

00000db6 <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
	// Set SER to 1
	PORTD |= _BV(PORTD2);
     dbe:	8b e2       	ldi	r24, 0x2B	; 43
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	2b e2       	ldi	r18, 0x2B	; 43
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	f9 01       	movw	r30, r18
     dc8:	20 81       	ld	r18, Z
     dca:	24 60       	ori	r18, 0x04	; 4
     dcc:	fc 01       	movw	r30, r24
     dce:	20 83       	st	Z, r18
}
     dd0:	00 00       	nop
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
	// one SCK pulse
	PORTD |= _BV(PORTD5);
     de0:	8b e2       	ldi	r24, 0x2B	; 43
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	2b e2       	ldi	r18, 0x2B	; 43
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	f9 01       	movw	r30, r18
     dea:	20 81       	ld	r18, Z
     dec:	20 62       	ori	r18, 0x20	; 32
     dee:	fc 01       	movw	r30, r24
     df0:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     df2:	8b e2       	ldi	r24, 0x2B	; 43
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	2b e2       	ldi	r18, 0x2B	; 43
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	f9 01       	movw	r30, r18
     dfc:	20 81       	ld	r18, Z
     dfe:	2f 7d       	andi	r18, 0xDF	; 223
     e00:	fc 01       	movw	r30, r24
     e02:	20 83       	st	Z, r18
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
     e04:	8b e2       	ldi	r24, 0x2B	; 43
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	2b e2       	ldi	r18, 0x2B	; 43
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	f9 01       	movw	r30, r18
     e0e:	20 81       	ld	r18, Z
     e10:	20 61       	ori	r18, 0x10	; 16
     e12:	fc 01       	movw	r30, r24
     e14:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     e16:	8b e2       	ldi	r24, 0x2B	; 43
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	2b e2       	ldi	r18, 0x2B	; 43
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	f9 01       	movw	r30, r18
     e20:	20 81       	ld	r18, Z
     e22:	2f 7e       	andi	r18, 0xEF	; 239
     e24:	fc 01       	movw	r30, r24
     e26:	20 83       	st	Z, r18
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
     e28:	8b e2       	ldi	r24, 0x2B	; 43
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	2b e2       	ldi	r18, 0x2B	; 43
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	f9 01       	movw	r30, r18
     e32:	20 81       	ld	r18, Z
     e34:	2b 7f       	andi	r18, 0xFB	; 251
     e36:	fc 01       	movw	r30, r24
     e38:	20 83       	st	Z, r18
}
     e3a:	00 00       	nop
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	08 95       	ret

00000e42 <load_col_value>:

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	00 d0       	rcall	.+0      	; 0xe48 <load_col_value+0x6>
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	9a 83       	std	Y+2, r25	; 0x02
     e4e:	89 83       	std	Y+1, r24	; 0x01
	PORTA = ~(col_value & 0xFF);
     e50:	82 e2       	ldi	r24, 0x22	; 34
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	29 81       	ldd	r18, Y+1	; 0x01
     e56:	20 95       	com	r18
     e58:	fc 01       	movw	r30, r24
     e5a:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     e5c:	85 e2       	ldi	r24, 0x25	; 37
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	25 e2       	ldi	r18, 0x25	; 37
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	f9 01       	movw	r30, r18
     e66:	20 81       	ld	r18, Z
     e68:	23 60       	ori	r18, 0x03	; 3
     e6a:	fc 01       	movw	r30, r24
     e6c:	20 83       	st	Z, r18
	PORTB &= ~((col_value >> 8) & 0x03);
     e6e:	85 e2       	ldi	r24, 0x25	; 37
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	25 e2       	ldi	r18, 0x25	; 37
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	f9 01       	movw	r30, r18
     e78:	40 81       	ld	r20, Z
     e7a:	29 81       	ldd	r18, Y+1	; 0x01
     e7c:	3a 81       	ldd	r19, Y+2	; 0x02
     e7e:	23 2f       	mov	r18, r19
     e80:	33 27       	eor	r19, r19
     e82:	23 70       	andi	r18, 0x03	; 3
     e84:	20 95       	com	r18
     e86:	24 23       	and	r18, r20
     e88:	fc 01       	movw	r30, r24
     e8a:	20 83       	st	Z, r18
}
     e8c:	00 00       	nop
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <handle_display>:

//-----------------------------------------
void handle_display(void)
{
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
	static uint8_t col = 0;
	
	if (col == 0)
     ea0:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <col.2830>
     ea4:	88 23       	and	r24, r24
     ea6:	11 f4       	brne	.+4      	; 0xeac <handle_display+0x14>
		prepare_shiftregister();
     ea8:	0e 94 db 06 	call	0xdb6	; 0xdb6 <prepare_shiftregister>
	
	load_col_value(frame_buffer[col]);
     eac:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <col.2830>
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	80 5b       	subi	r24, 0xB0	; 176
     eba:	9e 4f       	sbci	r25, 0xFE	; 254
     ebc:	fc 01       	movw	r30, r24
     ebe:	80 81       	ld	r24, Z
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
     ec2:	0e 94 21 07 	call	0xe42	; 0xe42 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     ec6:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	if (col++ > 13)
     eca:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <col.2830>
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	98 0f       	add	r25, r24
     ed2:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <col.2830>
     ed6:	8e 30       	cpi	r24, 0x0E	; 14
     ed8:	10 f0       	brcs	.+4      	; 0xede <handle_display+0x46>
		col = 0;
     eda:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <col.2830>
}
     ede:	00 00       	nop
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	//
}
     eee:	00 00       	nop
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <main>:

//-----------------------------------------
int main(void)
{
     ef6:	ef 92       	push	r14
     ef8:	ff 92       	push	r15
     efa:	0f 93       	push	r16
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	00 d0       	rcall	.+0      	; 0xf02 <main+0xc>
     f02:	1f 92       	push	r1
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     f08:	0e 94 8d 08 	call	0x111a	; 0x111a <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     f0c:	8b e2       	ldi	r24, 0x2B	; 43
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	2b e2       	ldi	r18, 0x2B	; 43
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	f9 01       	movw	r30, r18
     f16:	20 81       	ld	r18, Z
     f18:	2f 7b       	andi	r18, 0xBF	; 191
     f1a:	fc 01       	movw	r30, r24
     f1c:	20 83       	st	Z, r18

	/* Semaphores creation */
	xGameStateSemaphore = xSemaphoreCreateMutex();
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	0e 94 9b 12 	call	0x2536	; 0x2536 <xQueueCreateMutex>
     f24:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <xGameStateSemaphore+0x1>
     f28:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <xGameStateSemaphore>
	xPlayerOneSemaphore = xSemaphoreCreateMutex();
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	0e 94 9b 12 	call	0x2536	; 0x2536 <xQueueCreateMutex>
     f32:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <xPlayerOneSemaphore+0x1>
     f36:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <xPlayerOneSemaphore>
	xPlayerTwoSemaphore = xSemaphoreCreateMutex();
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	0e 94 9b 12 	call	0x2536	; 0x2536 <xQueueCreateMutex>
     f40:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <xPlayerTwoSemaphore+0x1>
     f44:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <xPlayerTwoSemaphore>
	xGameOverSemaphore = xSemaphoreCreateMutex();
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	0e 94 9b 12 	call	0x2536	; 0x2536 <xQueueCreateMutex>
     f4e:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <xGameOverSemaphore+0x1>
     f52:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <xGameOverSemaphore>

	init_players();
     f56:	0e 94 41 06 	call	0xc82	; 0xc82 <init_players>

	BaseType_t taskReadJoystick = xTaskCreate(read_joystick, (const char*)"Read joystick", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     f5a:	e1 2c       	mov	r14, r1
     f5c:	f1 2c       	mov	r15, r1
     f5e:	00 e0       	ldi	r16, 0x00	; 0
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	45 e5       	ldi	r20, 0x55	; 85
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	61 e2       	ldi	r22, 0x21	; 33
     f6a:	71 e0       	ldi	r23, 0x01	; 1
     f6c:	81 ea       	ldi	r24, 0xA1	; 161
     f6e:	94 e0       	ldi	r25, 0x04	; 4
     f70:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <xTaskCreate>
     f74:	89 83       	std	Y+1, r24	; 0x01
	BaseType_t taskGameProcessing = xTaskCreate(game_processing, (const char*)"Game processing", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     f76:	e1 2c       	mov	r14, r1
     f78:	f1 2c       	mov	r15, r1
     f7a:	00 e0       	ldi	r16, 0x00	; 0
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	45 e5       	ldi	r20, 0x55	; 85
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	6f e2       	ldi	r22, 0x2F	; 47
     f86:	71 e0       	ldi	r23, 0x01	; 1
     f88:	8d ec       	ldi	r24, 0xCD	; 205
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <xTaskCreate>
     f90:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t taskMakeFrame = xTaskCreate(make_frame, (const char*)"Make frame", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL );
     f92:	e1 2c       	mov	r14, r1
     f94:	f1 2c       	mov	r15, r1
     f96:	00 e0       	ldi	r16, 0x00	; 0
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	45 e5       	ldi	r20, 0x55	; 85
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	6f e3       	ldi	r22, 0x3F	; 63
     fa2:	71 e0       	ldi	r23, 0x01	; 1
     fa4:	8e e9       	ldi	r24, 0x9E	; 158
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <xTaskCreate>
     fac:	8b 83       	std	Y+3, r24	; 0x03


	// Start the display handler timer
	init_display_timer(handle_display);
     fae:	8c e4       	ldi	r24, 0x4C	; 76
     fb0:	97 e0       	ldi	r25, 0x07	; 7
     fb2:	0e 94 09 08 	call	0x1012	; 0x1012 <init_display_timer>
	
	sei();
     fb6:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
     fb8:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <vTaskStartScheduler>
	
	//Should never reach here
	while (1) {}
     fbc:	ff cf       	rjmp	.-2      	; 0xfbc <main+0xc6>

00000fbe <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
	_x_rx_com_queue = x_rx_queue;
}
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <_com_call_back+0x6>
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <_com_call_back+0x8>
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	9b 83       	std	Y+3, r25	; 0x03
     fcc:	8a 83       	std	Y+2, r24	; 0x02
     fce:	6c 83       	std	Y+4, r22	; 0x04
     fd0:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_x_rx_com_queue>
     fd4:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <_x_rx_com_queue+0x1>
     fd8:	89 2b       	or	r24, r25
     fda:	99 f0       	breq	.+38     	; 0x1002 <_com_call_back+0x44>
     fdc:	19 82       	std	Y+1, r1	; 0x01
     fde:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_x_rx_com_queue>
     fe2:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <_x_rx_com_queue+0x1>
     fe6:	be 01       	movw	r22, r28
     fe8:	6c 5f       	subi	r22, 0xFC	; 252
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	ae 01       	movw	r20, r28
     ff0:	4f 5f       	subi	r20, 0xFF	; 255
     ff2:	5f 4f       	sbci	r21, 0xFF	; 255
     ff4:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <xQueueGenericSendFromISR>
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	88 23       	and	r24, r24
     ffc:	11 f0       	breq	.+4      	; 0x1002 <_com_call_back+0x44>
     ffe:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vPortYield>
    1002:	00 00       	nop
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	08 95       	ret

00001012 <init_display_timer>:

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	00 d0       	rcall	.+0      	; 0x1018 <init_display_timer+0x6>
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
	cb_ptr = cb;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <cb_ptr+0x1>
    1028:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
    102c:	87 e4       	ldi	r24, 0x47	; 71
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	2a e0       	ldi	r18, 0x0A	; 10
    1032:	fc 01       	movw	r30, r24
    1034:	20 83       	st	Z, r18
	TCCR0A |= _BV(WGM01); // Mode 2
    1036:	84 e4       	ldi	r24, 0x44	; 68
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	24 e4       	ldi	r18, 0x44	; 68
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	f9 01       	movw	r30, r18
    1040:	20 81       	ld	r18, Z
    1042:	22 60       	ori	r18, 0x02	; 2
    1044:	fc 01       	movw	r30, r24
    1046:	20 83       	st	Z, r18
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
    1048:	8e e6       	ldi	r24, 0x6E	; 110
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	2e e6       	ldi	r18, 0x6E	; 110
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	f9 01       	movw	r30, r18
    1052:	20 81       	ld	r18, Z
    1054:	22 60       	ori	r18, 0x02	; 2
    1056:	fc 01       	movw	r30, r24
    1058:	20 83       	st	Z, r18
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
    105a:	85 e4       	ldi	r24, 0x45	; 69
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	25 e4       	ldi	r18, 0x45	; 69
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	f9 01       	movw	r30, r18
    1064:	20 81       	ld	r18, Z
    1066:	25 60       	ori	r18, 0x05	; 5
    1068:	fc 01       	movw	r30, r24
    106a:	20 83       	st	Z, r18
}
    106c:	00 00       	nop
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	08 95       	ret

00001078 <__vector_16>:

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
    1078:	1f 92       	push	r1
    107a:	0f 92       	push	r0
    107c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	2f 93       	push	r18
    1086:	3f 93       	push	r19
    1088:	4f 93       	push	r20
    108a:	5f 93       	push	r21
    108c:	6f 93       	push	r22
    108e:	7f 93       	push	r23
    1090:	8f 93       	push	r24
    1092:	9f 93       	push	r25
    1094:	af 93       	push	r26
    1096:	bf 93       	push	r27
    1098:	ef 93       	push	r30
    109a:	ff 93       	push	r31
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	if (cb_ptr)
    10a4:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <cb_ptr>
    10a8:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <cb_ptr+0x1>
    10ac:	89 2b       	or	r24, r25
    10ae:	31 f0       	breq	.+12     	; 0x10bc <__vector_16+0x44>
	{
		cb_ptr();
    10b0:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <cb_ptr>
    10b4:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <cb_ptr+0x1>
    10b8:	fc 01       	movw	r30, r24
    10ba:	09 95       	icall
	}
}
    10bc:	00 00       	nop
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	ff 91       	pop	r31
    10c4:	ef 91       	pop	r30
    10c6:	bf 91       	pop	r27
    10c8:	af 91       	pop	r26
    10ca:	9f 91       	pop	r25
    10cc:	8f 91       	pop	r24
    10ce:	7f 91       	pop	r23
    10d0:	6f 91       	pop	r22
    10d2:	5f 91       	pop	r21
    10d4:	4f 91       	pop	r20
    10d6:	3f 91       	pop	r19
    10d8:	2f 91       	pop	r18
    10da:	0f 90       	pop	r0
    10dc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <com_send_bytes+0x6>
    10ec:	1f 92       	push	r1
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	9a 83       	std	Y+2, r25	; 0x02
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	6b 83       	std	Y+3, r22	; 0x03
	serial_send_bytes(_com_serial_instance, bytes, len);
    10f8:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_com_serial_instance>
    10fc:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <_com_serial_instance+0x1>
    1100:	29 81       	ldd	r18, Y+1	; 0x01
    1102:	3a 81       	ldd	r19, Y+2	; 0x02
    1104:	4b 81       	ldd	r20, Y+3	; 0x03
    1106:	b9 01       	movw	r22, r18
    1108:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <serial_send_bytes>
}
    110c:	00 00       	nop
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
    111a:	8f 92       	push	r8
    111c:	9f 92       	push	r9
    111e:	af 92       	push	r10
    1120:	bf 92       	push	r11
    1122:	cf 92       	push	r12
    1124:	df 92       	push	r13
    1126:	ef 92       	push	r14
    1128:	0f 93       	push	r16
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
    1132:	89 e1       	ldi	r24, 0x19	; 25
    1134:	93 e0       	ldi	r25, 0x03	; 3
    1136:	0e 94 45 09 	call	0x128a	; 0x128a <buffer_init>
	buffer_init(&_com_tx_buffer);
    113a:	8c e3       	ldi	r24, 0x3C	; 60
    113c:	93 e0       	ldi	r25, 0x03	; 3
    113e:	0e 94 45 09 	call	0x128a	; 0x128a <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
    1142:	0f 2e       	mov	r0, r31
    1144:	ff ed       	ldi	r31, 0xDF	; 223
    1146:	8f 2e       	mov	r8, r31
    1148:	f7 e0       	ldi	r31, 0x07	; 7
    114a:	9f 2e       	mov	r9, r31
    114c:	f0 2d       	mov	r31, r0
    114e:	0f 2e       	mov	r0, r31
    1150:	fc e3       	ldi	r31, 0x3C	; 60
    1152:	af 2e       	mov	r10, r31
    1154:	f3 e0       	ldi	r31, 0x03	; 3
    1156:	bf 2e       	mov	r11, r31
    1158:	f0 2d       	mov	r31, r0
    115a:	0f 2e       	mov	r0, r31
    115c:	f9 e1       	ldi	r31, 0x19	; 25
    115e:	cf 2e       	mov	r12, r31
    1160:	f3 e0       	ldi	r31, 0x03	; 3
    1162:	df 2e       	mov	r13, r31
    1164:	f0 2d       	mov	r31, r0
    1166:	e1 2c       	mov	r14, r1
    1168:	00 e0       	ldi	r16, 0x00	; 0
    116a:	23 e0       	ldi	r18, 0x03	; 3
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	52 ec       	ldi	r21, 0xC2	; 194
    1170:	61 e0       	ldi	r22, 0x01	; 1
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <serial_new_instance>
    117a:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <_com_serial_instance+0x1>
    117e:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
    1182:	88 e2       	ldi	r24, 0x28	; 40
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	28 e2       	ldi	r18, 0x28	; 40
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	f9 01       	movw	r30, r18
    118c:	20 81       	ld	r18, Z
    118e:	23 6c       	ori	r18, 0xC3	; 195
    1190:	fc 01       	movw	r30, r24
    1192:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
    1194:	8b e2       	ldi	r24, 0x2B	; 43
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	2b e2       	ldi	r18, 0x2B	; 43
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	f9 01       	movw	r30, r18
    119e:	20 81       	ld	r18, Z
    11a0:	28 60       	ori	r18, 0x08	; 8
    11a2:	fc 01       	movw	r30, r24
    11a4:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
    11a6:	8a e2       	ldi	r24, 0x2A	; 42
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	2a e2       	ldi	r18, 0x2A	; 42
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	f9 01       	movw	r30, r18
    11b0:	20 81       	ld	r18, Z
    11b2:	24 67       	ori	r18, 0x74	; 116
    11b4:	fc 01       	movw	r30, r24
    11b6:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
    11b8:	8b e2       	ldi	r24, 0x2B	; 43
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	2b e2       	ldi	r18, 0x2B	; 43
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	f9 01       	movw	r30, r18
    11c2:	20 81       	ld	r18, Z
    11c4:	20 64       	ori	r18, 0x40	; 64
    11c6:	fc 01       	movw	r30, r24
    11c8:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
    11ca:	81 e2       	ldi	r24, 0x21	; 33
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	fc 01       	movw	r30, r24
    11d0:	80 81       	ld	r24, Z
    11d2:	81 e2       	ldi	r24, 0x21	; 33
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	2f ef       	ldi	r18, 0xFF	; 255
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
    11dc:	84 e2       	ldi	r24, 0x24	; 36
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	24 e2       	ldi	r18, 0x24	; 36
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	f9 01       	movw	r30, r18
    11e6:	20 81       	ld	r18, Z
    11e8:	23 60       	ori	r18, 0x03	; 3
    11ea:	fc 01       	movw	r30, r24
    11ec:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
    11ee:	84 e2       	ldi	r24, 0x24	; 36
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	24 e2       	ldi	r18, 0x24	; 36
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	f9 01       	movw	r30, r18
    11f8:	20 81       	ld	r18, Z
    11fa:	2c 63       	ori	r18, 0x3C	; 60
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18
}
    1200:	00 00       	nop
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	0f 91       	pop	r16
    1208:	ef 90       	pop	r14
    120a:	df 90       	pop	r13
    120c:	cf 90       	pop	r12
    120e:	bf 90       	pop	r11
    1210:	af 90       	pop	r10
    1212:	9f 90       	pop	r9
    1214:	8f 90       	pop	r8
    1216:	08 95       	ret

00001218 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	1f 92       	push	r1
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
    1224:	85 e2       	ldi	r24, 0x25	; 37
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	25 e2       	ldi	r18, 0x25	; 37
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	f9 01       	movw	r30, r18
    122e:	20 81       	ld	r18, Z
    1230:	23 7c       	andi	r18, 0xC3	; 195
    1232:	fc 01       	movw	r30, r24
    1234:	20 83       	st	Z, r18
		PORTB |= task_no << 2;
    1236:	85 e2       	ldi	r24, 0x25	; 37
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	25 e2       	ldi	r18, 0x25	; 37
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	f9 01       	movw	r30, r18
    1240:	20 81       	ld	r18, Z
    1242:	42 2f       	mov	r20, r18
    1244:	29 81       	ldd	r18, Y+1	; 0x01
    1246:	22 2f       	mov	r18, r18
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	22 0f       	add	r18, r18
    124c:	33 1f       	adc	r19, r19
    124e:	22 0f       	add	r18, r18
    1250:	33 1f       	adc	r19, r19
    1252:	24 2b       	or	r18, r20
    1254:	fc 01       	movw	r30, r24
    1256:	20 83       	st	Z, r18
	}
    1258:	00 00       	nop
    125a:	0f 90       	pop	r0
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	1f 92       	push	r1
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
    126e:	85 e2       	ldi	r24, 0x25	; 37
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	25 e2       	ldi	r18, 0x25	; 37
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	f9 01       	movw	r30, r18
    1278:	20 81       	ld	r18, Z
    127a:	23 7c       	andi	r18, 0xC3	; 195
    127c:	fc 01       	movw	r30, r24
    127e:	20 83       	st	Z, r18
	}
    1280:	00 00       	nop
    1282:	0f 90       	pop	r0
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	08 95       	ret

0000128a <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	00 d0       	rcall	.+0      	; 0x1290 <buffer_init+0x6>
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	9a 83       	std	Y+2, r25	; 0x02
    1296:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	fc 01       	movw	r30, r24
    129e:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	fc 01       	movw	r30, r24
    12a6:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	fc 01       	movw	r30, r24
    12ae:	12 a2       	std	Z+34, r1	; 0x22
}
    12b0:	00 00       	nop
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

000012bc <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <buffer_get_item+0x6>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <buffer_get_item+0x8>
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	9a 83       	std	Y+2, r25	; 0x02
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	7c 83       	std	Y+4, r23	; 0x04
    12ce:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	fc 01       	movw	r30, r24
    12d6:	82 a1       	ldd	r24, Z+34	; 0x22
    12d8:	88 23       	and	r24, r24
    12da:	81 f1       	breq	.+96     	; 0x133c <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	fc 01       	movw	r30, r24
    12e2:	81 a1       	ldd	r24, Z+33	; 0x21
    12e4:	88 2f       	mov	r24, r24
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	29 81       	ldd	r18, Y+1	; 0x01
    12ea:	3a 81       	ldd	r19, Y+2	; 0x02
    12ec:	82 0f       	add	r24, r18
    12ee:	93 1f       	adc	r25, r19
    12f0:	fc 01       	movw	r30, r24
    12f2:	20 81       	ld	r18, Z
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	fc 01       	movw	r30, r24
    12fa:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	fc 01       	movw	r30, r24
    1302:	81 a1       	ldd	r24, Z+33	; 0x21
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	8f 71       	andi	r24, 0x1F	; 31
    130c:	90 78       	andi	r25, 0x80	; 128
    130e:	99 23       	and	r25, r25
    1310:	24 f4       	brge	.+8      	; 0x131a <buffer_get_item+0x5e>
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	80 6e       	ori	r24, 0xE0	; 224
    1316:	9f 6f       	ori	r25, 0xFF	; 255
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	28 2f       	mov	r18, r24
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	fc 01       	movw	r30, r24
    1322:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	9a 81       	ldd	r25, Y+2	; 0x02
    1328:	fc 01       	movw	r30, r24
    132a:	82 a1       	ldd	r24, Z+34	; 0x22
    132c:	2f ef       	ldi	r18, 0xFF	; 255
    132e:	28 0f       	add	r18, r24
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	fc 01       	movw	r30, r24
    1336:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	01 c0       	rjmp	.+2      	; 0x133e <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
    133c:	81 e0       	ldi	r24, 0x01	; 1
}
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	08 95       	ret

0000134c <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	00 d0       	rcall	.+0      	; 0x1352 <buffer_put_item+0x6>
    1352:	1f 92       	push	r1
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	9a 83       	std	Y+2, r25	; 0x02
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	fc 01       	movw	r30, r24
    1364:	82 a1       	ldd	r24, Z+34	; 0x22
    1366:	80 32       	cpi	r24, 0x20	; 32
    1368:	68 f5       	brcc	.+90     	; 0x13c4 <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	fc 01       	movw	r30, r24
    1370:	80 a1       	ldd	r24, Z+32	; 0x20
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	29 81       	ldd	r18, Y+1	; 0x01
    1378:	3a 81       	ldd	r19, Y+2	; 0x02
    137a:	82 0f       	add	r24, r18
    137c:	93 1f       	adc	r25, r19
    137e:	2b 81       	ldd	r18, Y+3	; 0x03
    1380:	fc 01       	movw	r30, r24
    1382:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	fc 01       	movw	r30, r24
    138a:	80 a1       	ldd	r24, Z+32	; 0x20
    138c:	88 2f       	mov	r24, r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	8f 71       	andi	r24, 0x1F	; 31
    1394:	90 78       	andi	r25, 0x80	; 128
    1396:	99 23       	and	r25, r25
    1398:	24 f4       	brge	.+8      	; 0x13a2 <buffer_put_item+0x56>
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	80 6e       	ori	r24, 0xE0	; 224
    139e:	9f 6f       	ori	r25, 0xFF	; 255
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	28 2f       	mov	r18, r24
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	9a 81       	ldd	r25, Y+2	; 0x02
    13a8:	fc 01       	movw	r30, r24
    13aa:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	9a 81       	ldd	r25, Y+2	; 0x02
    13b0:	fc 01       	movw	r30, r24
    13b2:	82 a1       	ldd	r24, Z+34	; 0x22
    13b4:	21 e0       	ldi	r18, 0x01	; 1
    13b6:	28 0f       	add	r18, r24
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	9a 81       	ldd	r25, Y+2	; 0x02
    13bc:	fc 01       	movw	r30, r24
    13be:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	01 c0       	rjmp	.+2      	; 0x13c6 <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
    13c4:	82 e0       	ldi	r24, 0x02	; 2
}
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

000013d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <vListInitialise+0x6>
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	9c 01       	movw	r18, r24
    13e6:	2d 5f       	subi	r18, 0xFD	; 253
    13e8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	fc 01       	movw	r30, r24
    13f0:	32 83       	std	Z+2, r19	; 0x02
    13f2:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	2f ef       	ldi	r18, 0xFF	; 255
    13fa:	3f ef       	ldi	r19, 0xFF	; 255
    13fc:	fc 01       	movw	r30, r24
    13fe:	34 83       	std	Z+4, r19	; 0x04
    1400:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	9a 81       	ldd	r25, Y+2	; 0x02
    1406:	9c 01       	movw	r18, r24
    1408:	2d 5f       	subi	r18, 0xFD	; 253
    140a:	3f 4f       	sbci	r19, 0xFF	; 255
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	fc 01       	movw	r30, r24
    1412:	36 83       	std	Z+6, r19	; 0x06
    1414:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	9a 81       	ldd	r25, Y+2	; 0x02
    141a:	9c 01       	movw	r18, r24
    141c:	2d 5f       	subi	r18, 0xFD	; 253
    141e:	3f 4f       	sbci	r19, 0xFF	; 255
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	fc 01       	movw	r30, r24
    1426:	30 87       	std	Z+8, r19	; 0x08
    1428:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	fc 01       	movw	r30, r24
    1430:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1432:	00 00       	nop
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret

0000143e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	00 d0       	rcall	.+0      	; 0x1444 <vListInitialiseItem+0x6>
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	9a 83       	std	Y+2, r25	; 0x02
    144a:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	fc 01       	movw	r30, r24
    1452:	11 86       	std	Z+9, r1	; 0x09
    1454:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1456:	00 00       	nop
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	08 95       	ret

00001462 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	00 d0       	rcall	.+0      	; 0x1468 <vListInsertEnd+0x6>
    1468:	00 d0       	rcall	.+0      	; 0x146a <vListInsertEnd+0x8>
    146a:	00 d0       	rcall	.+0      	; 0x146c <vListInsertEnd+0xa>
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	9c 83       	std	Y+4, r25	; 0x04
    1472:	8b 83       	std	Y+3, r24	; 0x03
    1474:	7e 83       	std	Y+6, r23	; 0x06
    1476:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	fc 01       	movw	r30, r24
    147e:	81 81       	ldd	r24, Z+1	; 0x01
    1480:	92 81       	ldd	r25, Z+2	; 0x02
    1482:	9a 83       	std	Y+2, r25	; 0x02
    1484:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	9e 81       	ldd	r25, Y+6	; 0x06
    148a:	29 81       	ldd	r18, Y+1	; 0x01
    148c:	3a 81       	ldd	r19, Y+2	; 0x02
    148e:	fc 01       	movw	r30, r24
    1490:	33 83       	std	Z+3, r19	; 0x03
    1492:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	fc 01       	movw	r30, r24
    149a:	24 81       	ldd	r18, Z+4	; 0x04
    149c:	35 81       	ldd	r19, Z+5	; 0x05
    149e:	8d 81       	ldd	r24, Y+5	; 0x05
    14a0:	9e 81       	ldd	r25, Y+6	; 0x06
    14a2:	fc 01       	movw	r30, r24
    14a4:	35 83       	std	Z+5, r19	; 0x05
    14a6:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	9a 81       	ldd	r25, Y+2	; 0x02
    14ac:	fc 01       	movw	r30, r24
    14ae:	84 81       	ldd	r24, Z+4	; 0x04
    14b0:	95 81       	ldd	r25, Z+5	; 0x05
    14b2:	2d 81       	ldd	r18, Y+5	; 0x05
    14b4:	3e 81       	ldd	r19, Y+6	; 0x06
    14b6:	fc 01       	movw	r30, r24
    14b8:	33 83       	std	Z+3, r19	; 0x03
    14ba:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	2d 81       	ldd	r18, Y+5	; 0x05
    14c2:	3e 81       	ldd	r19, Y+6	; 0x06
    14c4:	fc 01       	movw	r30, r24
    14c6:	35 83       	std	Z+5, r19	; 0x05
    14c8:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	2b 81       	ldd	r18, Y+3	; 0x03
    14d0:	3c 81       	ldd	r19, Y+4	; 0x04
    14d2:	fc 01       	movw	r30, r24
    14d4:	31 87       	std	Z+9, r19	; 0x09
    14d6:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	fc 01       	movw	r30, r24
    14de:	80 81       	ld	r24, Z
    14e0:	21 e0       	ldi	r18, 0x01	; 1
    14e2:	28 0f       	add	r18, r24
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	fc 01       	movw	r30, r24
    14ea:	20 83       	st	Z, r18
}
    14ec:	00 00       	nop
    14ee:	26 96       	adiw	r28, 0x06	; 6
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	08 95       	ret

00001500 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	28 97       	sbiw	r28, 0x08	; 8
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	9e 83       	std	Y+6, r25	; 0x06
    1516:	8d 83       	std	Y+5, r24	; 0x05
    1518:	78 87       	std	Y+8, r23	; 0x08
    151a:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    151c:	8f 81       	ldd	r24, Y+7	; 0x07
    151e:	98 85       	ldd	r25, Y+8	; 0x08
    1520:	fc 01       	movw	r30, r24
    1522:	80 81       	ld	r24, Z
    1524:	91 81       	ldd	r25, Z+1	; 0x01
    1526:	9c 83       	std	Y+4, r25	; 0x04
    1528:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	41 f4       	brne	.+16     	; 0x1542 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	fc 01       	movw	r30, r24
    1538:	87 81       	ldd	r24, Z+7	; 0x07
    153a:	90 85       	ldd	r25, Z+8	; 0x08
    153c:	9a 83       	std	Y+2, r25	; 0x02
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	1a c0       	rjmp	.+52     	; 0x1576 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	03 96       	adiw	r24, 0x03	; 3
    1548:	9a 83       	std	Y+2, r25	; 0x02
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	07 c0       	rjmp	.+14     	; 0x155c <vListInsert+0x5c>
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	fc 01       	movw	r30, r24
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	9a 83       	std	Y+2, r25	; 0x02
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	9a 81       	ldd	r25, Y+2	; 0x02
    1560:	fc 01       	movw	r30, r24
    1562:	82 81       	ldd	r24, Z+2	; 0x02
    1564:	93 81       	ldd	r25, Z+3	; 0x03
    1566:	fc 01       	movw	r30, r24
    1568:	20 81       	ld	r18, Z
    156a:	31 81       	ldd	r19, Z+1	; 0x01
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	82 17       	cp	r24, r18
    1572:	93 07       	cpc	r25, r19
    1574:	60 f7       	brcc	.-40     	; 0x154e <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	9a 81       	ldd	r25, Y+2	; 0x02
    157a:	fc 01       	movw	r30, r24
    157c:	22 81       	ldd	r18, Z+2	; 0x02
    157e:	33 81       	ldd	r19, Z+3	; 0x03
    1580:	8f 81       	ldd	r24, Y+7	; 0x07
    1582:	98 85       	ldd	r25, Y+8	; 0x08
    1584:	fc 01       	movw	r30, r24
    1586:	33 83       	std	Z+3, r19	; 0x03
    1588:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    158a:	8f 81       	ldd	r24, Y+7	; 0x07
    158c:	98 85       	ldd	r25, Y+8	; 0x08
    158e:	fc 01       	movw	r30, r24
    1590:	82 81       	ldd	r24, Z+2	; 0x02
    1592:	93 81       	ldd	r25, Z+3	; 0x03
    1594:	2f 81       	ldd	r18, Y+7	; 0x07
    1596:	38 85       	ldd	r19, Y+8	; 0x08
    1598:	fc 01       	movw	r30, r24
    159a:	35 83       	std	Z+5, r19	; 0x05
    159c:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    159e:	8f 81       	ldd	r24, Y+7	; 0x07
    15a0:	98 85       	ldd	r25, Y+8	; 0x08
    15a2:	29 81       	ldd	r18, Y+1	; 0x01
    15a4:	3a 81       	ldd	r19, Y+2	; 0x02
    15a6:	fc 01       	movw	r30, r24
    15a8:	35 83       	std	Z+5, r19	; 0x05
    15aa:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	2f 81       	ldd	r18, Y+7	; 0x07
    15b2:	38 85       	ldd	r19, Y+8	; 0x08
    15b4:	fc 01       	movw	r30, r24
    15b6:	33 83       	std	Z+3, r19	; 0x03
    15b8:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    15ba:	8f 81       	ldd	r24, Y+7	; 0x07
    15bc:	98 85       	ldd	r25, Y+8	; 0x08
    15be:	2d 81       	ldd	r18, Y+5	; 0x05
    15c0:	3e 81       	ldd	r19, Y+6	; 0x06
    15c2:	fc 01       	movw	r30, r24
    15c4:	31 87       	std	Z+9, r19	; 0x09
    15c6:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    15c8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ca:	9e 81       	ldd	r25, Y+6	; 0x06
    15cc:	fc 01       	movw	r30, r24
    15ce:	80 81       	ld	r24, Z
    15d0:	21 e0       	ldi	r18, 0x01	; 1
    15d2:	28 0f       	add	r18, r24
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	9e 81       	ldd	r25, Y+6	; 0x06
    15d8:	fc 01       	movw	r30, r24
    15da:	20 83       	st	Z, r18
}
    15dc:	00 00       	nop
    15de:	28 96       	adiw	r28, 0x08	; 8
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	08 95       	ret

000015f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <uxListRemove+0x6>
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <uxListRemove+0x8>
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	9c 83       	std	Y+4, r25	; 0x04
    15fe:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	fc 01       	movw	r30, r24
    1606:	80 85       	ldd	r24, Z+8	; 0x08
    1608:	91 85       	ldd	r25, Z+9	; 0x09
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	fc 01       	movw	r30, r24
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	2b 81       	ldd	r18, Y+3	; 0x03
    161a:	3c 81       	ldd	r19, Y+4	; 0x04
    161c:	f9 01       	movw	r30, r18
    161e:	24 81       	ldd	r18, Z+4	; 0x04
    1620:	35 81       	ldd	r19, Z+5	; 0x05
    1622:	fc 01       	movw	r30, r24
    1624:	35 83       	std	Z+5, r19	; 0x05
    1626:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	fc 01       	movw	r30, r24
    162e:	84 81       	ldd	r24, Z+4	; 0x04
    1630:	95 81       	ldd	r25, Z+5	; 0x05
    1632:	2b 81       	ldd	r18, Y+3	; 0x03
    1634:	3c 81       	ldd	r19, Y+4	; 0x04
    1636:	f9 01       	movw	r30, r18
    1638:	22 81       	ldd	r18, Z+2	; 0x02
    163a:	33 81       	ldd	r19, Z+3	; 0x03
    163c:	fc 01       	movw	r30, r24
    163e:	33 83       	std	Z+3, r19	; 0x03
    1640:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	9a 81       	ldd	r25, Y+2	; 0x02
    1646:	fc 01       	movw	r30, r24
    1648:	21 81       	ldd	r18, Z+1	; 0x01
    164a:	32 81       	ldd	r19, Z+2	; 0x02
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	28 17       	cp	r18, r24
    1652:	39 07       	cpc	r19, r25
    1654:	51 f4       	brne	.+20     	; 0x166a <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	fc 01       	movw	r30, r24
    165c:	24 81       	ldd	r18, Z+4	; 0x04
    165e:	35 81       	ldd	r19, Z+5	; 0x05
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	9a 81       	ldd	r25, Y+2	; 0x02
    1664:	fc 01       	movw	r30, r24
    1666:	32 83       	std	Z+2, r19	; 0x02
    1668:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	fc 01       	movw	r30, r24
    1670:	11 86       	std	Z+9, r1	; 0x09
    1672:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	fc 01       	movw	r30, r24
    167a:	80 81       	ld	r24, Z
    167c:	2f ef       	ldi	r18, 0xFF	; 255
    167e:	28 0f       	add	r18, r24
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
    1684:	fc 01       	movw	r30, r24
    1686:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	9a 81       	ldd	r25, Y+2	; 0x02
    168c:	fc 01       	movw	r30, r24
    168e:	80 81       	ld	r24, Z
}
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	08 95       	ret

0000169e <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	28 97       	sbiw	r28, 0x08	; 8
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	9c 83       	std	Y+4, r25	; 0x04
    16b4:	8b 83       	std	Y+3, r24	; 0x03
    16b6:	7e 83       	std	Y+6, r23	; 0x06
    16b8:	6d 83       	std	Y+5, r22	; 0x05
    16ba:	58 87       	std	Y+8, r21	; 0x08
    16bc:	4f 83       	std	Y+7, r20	; 0x07
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	21 e1       	ldi	r18, 0x11	; 17
    16c4:	fc 01       	movw	r30, r24
    16c6:	20 83       	st	Z, r18
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	9c 83       	std	Y+4, r25	; 0x04
    16d0:	8b 83       	std	Y+3, r24	; 0x03
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	9c 81       	ldd	r25, Y+4	; 0x04
    16d6:	22 e2       	ldi	r18, 0x22	; 34
    16d8:	fc 01       	movw	r30, r24
    16da:	20 83       	st	Z, r18
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	9c 83       	std	Y+4, r25	; 0x04
    16e4:	8b 83       	std	Y+3, r24	; 0x03
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ea:	23 e3       	ldi	r18, 0x33	; 51
    16ec:	fc 01       	movw	r30, r24
    16ee:	20 83       	st	Z, r18
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	9c 83       	std	Y+4, r25	; 0x04
    16f8:	8b 83       	std	Y+3, r24	; 0x03
    16fa:	8d 81       	ldd	r24, Y+5	; 0x05
    16fc:	9e 81       	ldd	r25, Y+6	; 0x06
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	29 81       	ldd	r18, Y+1	; 0x01
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	fc 01       	movw	r30, r24
    170a:	20 83       	st	Z, r18
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	9c 81       	ldd	r25, Y+4	; 0x04
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	9c 83       	std	Y+4, r25	; 0x04
    1714:	8b 83       	std	Y+3, r24	; 0x03
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	89 2f       	mov	r24, r25
    171c:	99 27       	eor	r25, r25
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	29 81       	ldd	r18, Y+1	; 0x01
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	fc 01       	movw	r30, r24
    172a:	20 83       	st	Z, r18
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	9c 81       	ldd	r25, Y+4	; 0x04
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	9c 83       	std	Y+4, r25	; 0x04
    1734:	8b 83       	std	Y+3, r24	; 0x03
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	fc 01       	movw	r30, r24
    173c:	10 82       	st	Z, r1
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	9c 83       	std	Y+4, r25	; 0x04
    1746:	8b 83       	std	Y+3, r24	; 0x03
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	20 e8       	ldi	r18, 0x80	; 128
    174e:	fc 01       	movw	r30, r24
    1750:	20 83       	st	Z, r18
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	9c 81       	ldd	r25, Y+4	; 0x04
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	9c 83       	std	Y+4, r25	; 0x04
    175a:	8b 83       	std	Y+3, r24	; 0x03
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	9c 81       	ldd	r25, Y+4	; 0x04
    1760:	fc 01       	movw	r30, r24
    1762:	10 82       	st	Z, r1
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	9c 81       	ldd	r25, Y+4	; 0x04
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	9c 83       	std	Y+4, r25	; 0x04
    176c:	8b 83       	std	Y+3, r24	; 0x03
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	22 e0       	ldi	r18, 0x02	; 2
    1774:	fc 01       	movw	r30, r24
    1776:	20 83       	st	Z, r18
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	9c 81       	ldd	r25, Y+4	; 0x04
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	9c 83       	std	Y+4, r25	; 0x04
    1780:	8b 83       	std	Y+3, r24	; 0x03
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	23 e0       	ldi	r18, 0x03	; 3
    1788:	fc 01       	movw	r30, r24
    178a:	20 83       	st	Z, r18
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	9c 83       	std	Y+4, r25	; 0x04
    1794:	8b 83       	std	Y+3, r24	; 0x03
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	24 e0       	ldi	r18, 0x04	; 4
    179c:	fc 01       	movw	r30, r24
    179e:	20 83       	st	Z, r18
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	9c 83       	std	Y+4, r25	; 0x04
    17a8:	8b 83       	std	Y+3, r24	; 0x03
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	25 e0       	ldi	r18, 0x05	; 5
    17b0:	fc 01       	movw	r30, r24
    17b2:	20 83       	st	Z, r18
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	9c 83       	std	Y+4, r25	; 0x04
    17bc:	8b 83       	std	Y+3, r24	; 0x03
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	9c 81       	ldd	r25, Y+4	; 0x04
    17c2:	26 e0       	ldi	r18, 0x06	; 6
    17c4:	fc 01       	movw	r30, r24
    17c6:	20 83       	st	Z, r18
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	9c 83       	std	Y+4, r25	; 0x04
    17d0:	8b 83       	std	Y+3, r24	; 0x03
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	27 e0       	ldi	r18, 0x07	; 7
    17d8:	fc 01       	movw	r30, r24
    17da:	20 83       	st	Z, r18
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	9c 83       	std	Y+4, r25	; 0x04
    17e4:	8b 83       	std	Y+3, r24	; 0x03
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	28 e0       	ldi	r18, 0x08	; 8
    17ec:	fc 01       	movw	r30, r24
    17ee:	20 83       	st	Z, r18
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	9c 83       	std	Y+4, r25	; 0x04
    17f8:	8b 83       	std	Y+3, r24	; 0x03
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	29 e0       	ldi	r18, 0x09	; 9
    1800:	fc 01       	movw	r30, r24
    1802:	20 83       	st	Z, r18
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	9c 83       	std	Y+4, r25	; 0x04
    180c:	8b 83       	std	Y+3, r24	; 0x03
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	20 e1       	ldi	r18, 0x10	; 16
    1814:	fc 01       	movw	r30, r24
    1816:	20 83       	st	Z, r18
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	9c 83       	std	Y+4, r25	; 0x04
    1820:	8b 83       	std	Y+3, r24	; 0x03
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	21 e1       	ldi	r18, 0x11	; 17
    1828:	fc 01       	movw	r30, r24
    182a:	20 83       	st	Z, r18
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	9c 83       	std	Y+4, r25	; 0x04
    1834:	8b 83       	std	Y+3, r24	; 0x03
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	22 e1       	ldi	r18, 0x12	; 18
    183c:	fc 01       	movw	r30, r24
    183e:	20 83       	st	Z, r18
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	9c 83       	std	Y+4, r25	; 0x04
    1848:	8b 83       	std	Y+3, r24	; 0x03
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	23 e1       	ldi	r18, 0x13	; 19
    1850:	fc 01       	movw	r30, r24
    1852:	20 83       	st	Z, r18
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	9c 83       	std	Y+4, r25	; 0x04
    185c:	8b 83       	std	Y+3, r24	; 0x03
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	24 e1       	ldi	r18, 0x14	; 20
    1864:	fc 01       	movw	r30, r24
    1866:	20 83       	st	Z, r18
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	9c 81       	ldd	r25, Y+4	; 0x04
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	9c 83       	std	Y+4, r25	; 0x04
    1870:	8b 83       	std	Y+3, r24	; 0x03
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	25 e1       	ldi	r18, 0x15	; 21
    1878:	fc 01       	movw	r30, r24
    187a:	20 83       	st	Z, r18
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	9c 83       	std	Y+4, r25	; 0x04
    1884:	8b 83       	std	Y+3, r24	; 0x03
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	9c 81       	ldd	r25, Y+4	; 0x04
    188a:	26 e1       	ldi	r18, 0x16	; 22
    188c:	fc 01       	movw	r30, r24
    188e:	20 83       	st	Z, r18
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	9c 83       	std	Y+4, r25	; 0x04
    1898:	8b 83       	std	Y+3, r24	; 0x03
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	27 e1       	ldi	r18, 0x17	; 23
    18a0:	fc 01       	movw	r30, r24
    18a2:	20 83       	st	Z, r18
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	9c 83       	std	Y+4, r25	; 0x04
    18ac:	8b 83       	std	Y+3, r24	; 0x03
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	9c 81       	ldd	r25, Y+4	; 0x04
    18b2:	28 e1       	ldi	r18, 0x18	; 24
    18b4:	fc 01       	movw	r30, r24
    18b6:	20 83       	st	Z, r18
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	9c 83       	std	Y+4, r25	; 0x04
    18c0:	8b 83       	std	Y+3, r24	; 0x03
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	9c 81       	ldd	r25, Y+4	; 0x04
    18c6:	29 e1       	ldi	r18, 0x19	; 25
    18c8:	fc 01       	movw	r30, r24
    18ca:	20 83       	st	Z, r18
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	9c 83       	std	Y+4, r25	; 0x04
    18d4:	8b 83       	std	Y+3, r24	; 0x03
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	20 e2       	ldi	r18, 0x20	; 32
    18dc:	fc 01       	movw	r30, r24
    18de:	20 83       	st	Z, r18
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	9c 81       	ldd	r25, Y+4	; 0x04
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	9c 83       	std	Y+4, r25	; 0x04
    18e8:	8b 83       	std	Y+3, r24	; 0x03
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	21 e2       	ldi	r18, 0x21	; 33
    18f0:	fc 01       	movw	r30, r24
    18f2:	20 83       	st	Z, r18
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	9c 83       	std	Y+4, r25	; 0x04
    18fc:	8b 83       	std	Y+3, r24	; 0x03
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	9c 81       	ldd	r25, Y+4	; 0x04
    1902:	22 e2       	ldi	r18, 0x22	; 34
    1904:	fc 01       	movw	r30, r24
    1906:	20 83       	st	Z, r18
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	9c 83       	std	Y+4, r25	; 0x04
    1910:	8b 83       	std	Y+3, r24	; 0x03
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	23 e2       	ldi	r18, 0x23	; 35
    1918:	fc 01       	movw	r30, r24
    191a:	20 83       	st	Z, r18
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	9c 81       	ldd	r25, Y+4	; 0x04
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	9c 83       	std	Y+4, r25	; 0x04
    1924:	8b 83       	std	Y+3, r24	; 0x03
    1926:	8f 81       	ldd	r24, Y+7	; 0x07
    1928:	98 85       	ldd	r25, Y+8	; 0x08
    192a:	9a 83       	std	Y+2, r25	; 0x02
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	29 81       	ldd	r18, Y+1	; 0x01
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	fc 01       	movw	r30, r24
    1936:	20 83       	st	Z, r18
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	9c 83       	std	Y+4, r25	; 0x04
    1940:	8b 83       	std	Y+3, r24	; 0x03
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	9a 81       	ldd	r25, Y+2	; 0x02
    1946:	89 2f       	mov	r24, r25
    1948:	99 27       	eor	r25, r25
    194a:	9a 83       	std	Y+2, r25	; 0x02
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	29 81       	ldd	r18, Y+1	; 0x01
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	fc 01       	movw	r30, r24
    1956:	20 83       	st	Z, r18
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	9c 83       	std	Y+4, r25	; 0x04
    1960:	8b 83       	std	Y+3, r24	; 0x03
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	26 e2       	ldi	r18, 0x26	; 38
    1968:	fc 01       	movw	r30, r24
    196a:	20 83       	st	Z, r18
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	9c 83       	std	Y+4, r25	; 0x04
    1974:	8b 83       	std	Y+3, r24	; 0x03
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	27 e2       	ldi	r18, 0x27	; 39
    197c:	fc 01       	movw	r30, r24
    197e:	20 83       	st	Z, r18
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	9c 81       	ldd	r25, Y+4	; 0x04
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	9c 83       	std	Y+4, r25	; 0x04
    1988:	8b 83       	std	Y+3, r24	; 0x03
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	9c 81       	ldd	r25, Y+4	; 0x04
    198e:	28 e2       	ldi	r18, 0x28	; 40
    1990:	fc 01       	movw	r30, r24
    1992:	20 83       	st	Z, r18
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	9c 81       	ldd	r25, Y+4	; 0x04
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	9c 83       	std	Y+4, r25	; 0x04
    199c:	8b 83       	std	Y+3, r24	; 0x03
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	29 e2       	ldi	r18, 0x29	; 41
    19a4:	fc 01       	movw	r30, r24
    19a6:	20 83       	st	Z, r18
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	9c 81       	ldd	r25, Y+4	; 0x04
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	9c 83       	std	Y+4, r25	; 0x04
    19b0:	8b 83       	std	Y+3, r24	; 0x03
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	20 e3       	ldi	r18, 0x30	; 48
    19b8:	fc 01       	movw	r30, r24
    19ba:	20 83       	st	Z, r18
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	9c 81       	ldd	r25, Y+4	; 0x04
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	9c 83       	std	Y+4, r25	; 0x04
    19c4:	8b 83       	std	Y+3, r24	; 0x03
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	21 e3       	ldi	r18, 0x31	; 49
    19cc:	fc 01       	movw	r30, r24
    19ce:	20 83       	st	Z, r18
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	9c 81       	ldd	r25, Y+4	; 0x04
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	9c 83       	std	Y+4, r25	; 0x04
    19d8:	8b 83       	std	Y+3, r24	; 0x03
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	28 96       	adiw	r28, 0x08	; 8
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	08 95       	ret

000019f0 <xPortStartScheduler>:
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <prvSetupTimerInterrupt>
    19fc:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
    1a00:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    1a04:	cd 91       	ld	r28, X+
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	dd 91       	ld	r29, X+
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	ff 91       	pop	r31
    1a0e:	ef 91       	pop	r30
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	bf 91       	pop	r27
    1a16:	af 91       	pop	r26
    1a18:	9f 91       	pop	r25
    1a1a:	8f 91       	pop	r24
    1a1c:	7f 91       	pop	r23
    1a1e:	6f 91       	pop	r22
    1a20:	5f 91       	pop	r21
    1a22:	4f 91       	pop	r20
    1a24:	3f 91       	pop	r19
    1a26:	2f 91       	pop	r18
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	df 90       	pop	r13
    1a32:	cf 90       	pop	r12
    1a34:	bf 90       	pop	r11
    1a36:	af 90       	pop	r10
    1a38:	9f 90       	pop	r9
    1a3a:	8f 90       	pop	r8
    1a3c:	7f 90       	pop	r7
    1a3e:	6f 90       	pop	r6
    1a40:	5f 90       	pop	r5
    1a42:	4f 90       	pop	r4
    1a44:	3f 90       	pop	r3
    1a46:	2f 90       	pop	r2
    1a48:	1f 90       	pop	r1
    1a4a:	0f 90       	pop	r0
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	0f 90       	pop	r0
    1a50:	08 95       	ret
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	08 95       	ret

00001a5a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1a5a:	0f 92       	push	r0
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	0f 92       	push	r0
    1a62:	1f 92       	push	r1
    1a64:	11 24       	eor	r1, r1
    1a66:	2f 92       	push	r2
    1a68:	3f 92       	push	r3
    1a6a:	4f 92       	push	r4
    1a6c:	5f 92       	push	r5
    1a6e:	6f 92       	push	r6
    1a70:	7f 92       	push	r7
    1a72:	8f 92       	push	r8
    1a74:	9f 92       	push	r9
    1a76:	af 92       	push	r10
    1a78:	bf 92       	push	r11
    1a7a:	cf 92       	push	r12
    1a7c:	df 92       	push	r13
    1a7e:	ef 92       	push	r14
    1a80:	ff 92       	push	r15
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	2f 93       	push	r18
    1a88:	3f 93       	push	r19
    1a8a:	4f 93       	push	r20
    1a8c:	5f 93       	push	r21
    1a8e:	6f 93       	push	r22
    1a90:	7f 93       	push	r23
    1a92:	8f 93       	push	r24
    1a94:	9f 93       	push	r25
    1a96:	af 93       	push	r26
    1a98:	bf 93       	push	r27
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	ef 93       	push	r30
    1aa0:	ff 93       	push	r31
    1aa2:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
    1aa6:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    1aaa:	0d b6       	in	r0, 0x3d	; 61
    1aac:	0d 92       	st	X+, r0
    1aae:	0e b6       	in	r0, 0x3e	; 62
    1ab0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1ab2:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1ab6:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
    1aba:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    1abe:	cd 91       	ld	r28, X+
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	dd 91       	ld	r29, X+
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	ff 91       	pop	r31
    1ac8:	ef 91       	pop	r30
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	bf 91       	pop	r27
    1ad0:	af 91       	pop	r26
    1ad2:	9f 91       	pop	r25
    1ad4:	8f 91       	pop	r24
    1ad6:	7f 91       	pop	r23
    1ad8:	6f 91       	pop	r22
    1ada:	5f 91       	pop	r21
    1adc:	4f 91       	pop	r20
    1ade:	3f 91       	pop	r19
    1ae0:	2f 91       	pop	r18
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	ff 90       	pop	r15
    1ae8:	ef 90       	pop	r14
    1aea:	df 90       	pop	r13
    1aec:	cf 90       	pop	r12
    1aee:	bf 90       	pop	r11
    1af0:	af 90       	pop	r10
    1af2:	9f 90       	pop	r9
    1af4:	8f 90       	pop	r8
    1af6:	7f 90       	pop	r7
    1af8:	6f 90       	pop	r6
    1afa:	5f 90       	pop	r5
    1afc:	4f 90       	pop	r4
    1afe:	3f 90       	pop	r3
    1b00:	2f 90       	pop	r2
    1b02:	1f 90       	pop	r1
    1b04:	0f 90       	pop	r0
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1b0a:	08 95       	ret
	...

00001b0e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1b0e:	0f 92       	push	r0
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	0f 92       	push	r0
    1b16:	1f 92       	push	r1
    1b18:	11 24       	eor	r1, r1
    1b1a:	2f 92       	push	r2
    1b1c:	3f 92       	push	r3
    1b1e:	4f 92       	push	r4
    1b20:	5f 92       	push	r5
    1b22:	6f 92       	push	r6
    1b24:	7f 92       	push	r7
    1b26:	8f 92       	push	r8
    1b28:	9f 92       	push	r9
    1b2a:	af 92       	push	r10
    1b2c:	bf 92       	push	r11
    1b2e:	cf 92       	push	r12
    1b30:	df 92       	push	r13
    1b32:	ef 92       	push	r14
    1b34:	ff 92       	push	r15
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	2f 93       	push	r18
    1b3c:	3f 93       	push	r19
    1b3e:	4f 93       	push	r20
    1b40:	5f 93       	push	r21
    1b42:	6f 93       	push	r22
    1b44:	7f 93       	push	r23
    1b46:	8f 93       	push	r24
    1b48:	9f 93       	push	r25
    1b4a:	af 93       	push	r26
    1b4c:	bf 93       	push	r27
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	ef 93       	push	r30
    1b54:	ff 93       	push	r31
    1b56:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
    1b5a:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    1b5e:	0d b6       	in	r0, 0x3d	; 61
    1b60:	0d 92       	st	X+, r0
    1b62:	0e b6       	in	r0, 0x3e	; 62
    1b64:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1b66:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <xTaskIncrementTick>
    1b6a:	88 23       	and	r24, r24
    1b6c:	11 f0       	breq	.+4      	; 0x1b72 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    1b6e:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1b72:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
    1b76:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    1b7a:	cd 91       	ld	r28, X+
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	dd 91       	ld	r29, X+
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	ff 91       	pop	r31
    1b84:	ef 91       	pop	r30
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	bf 91       	pop	r27
    1b8c:	af 91       	pop	r26
    1b8e:	9f 91       	pop	r25
    1b90:	8f 91       	pop	r24
    1b92:	7f 91       	pop	r23
    1b94:	6f 91       	pop	r22
    1b96:	5f 91       	pop	r21
    1b98:	4f 91       	pop	r20
    1b9a:	3f 91       	pop	r19
    1b9c:	2f 91       	pop	r18
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	ff 90       	pop	r15
    1ba4:	ef 90       	pop	r14
    1ba6:	df 90       	pop	r13
    1ba8:	cf 90       	pop	r12
    1baa:	bf 90       	pop	r11
    1bac:	af 90       	pop	r10
    1bae:	9f 90       	pop	r9
    1bb0:	8f 90       	pop	r8
    1bb2:	7f 90       	pop	r7
    1bb4:	6f 90       	pop	r6
    1bb6:	5f 90       	pop	r5
    1bb8:	4f 90       	pop	r4
    1bba:	3f 90       	pop	r3
    1bbc:	2f 90       	pop	r2
    1bbe:	1f 90       	pop	r1
    1bc0:	0f 90       	pop	r0
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1bc6:	08 95       	ret
	...

00001bca <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <prvSetupTimerInterrupt+0x6>
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <prvSetupTimerInterrupt+0x8>
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <prvSetupTimerInterrupt+0xa>
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1bd8:	89 e9       	ldi	r24, 0x99	; 153
    1bda:	99 e3       	ldi	r25, 0x39	; 57
    1bdc:	a0 e0       	ldi	r26, 0x00	; 0
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	9a 83       	std	Y+2, r25	; 0x02
    1be4:	ab 83       	std	Y+3, r26	; 0x03
    1be6:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	9a 81       	ldd	r25, Y+2	; 0x02
    1bec:	ab 81       	ldd	r26, Y+3	; 0x03
    1bee:	bc 81       	ldd	r27, Y+4	; 0x04
    1bf0:	68 94       	set
    1bf2:	15 f8       	bld	r1, 5
    1bf4:	b6 95       	lsr	r27
    1bf6:	a7 95       	ror	r26
    1bf8:	97 95       	ror	r25
    1bfa:	87 95       	ror	r24
    1bfc:	16 94       	lsr	r1
    1bfe:	d1 f7       	brne	.-12     	; 0x1bf4 <prvSetupTimerInterrupt+0x2a>
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	9a 83       	std	Y+2, r25	; 0x02
    1c04:	ab 83       	std	Y+3, r26	; 0x03
    1c06:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	ab 81       	ldd	r26, Y+3	; 0x03
    1c0e:	bc 81       	ldd	r27, Y+4	; 0x04
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	a1 09       	sbc	r26, r1
    1c14:	b1 09       	sbc	r27, r1
    1c16:	89 83       	std	Y+1, r24	; 0x01
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	ab 83       	std	Y+3, r26	; 0x03
    1c1c:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	ab 81       	ldd	r26, Y+3	; 0x03
    1c28:	bc 81       	ldd	r27, Y+4	; 0x04
    1c2a:	89 2f       	mov	r24, r25
    1c2c:	9a 2f       	mov	r25, r26
    1c2e:	ab 2f       	mov	r26, r27
    1c30:	bb 27       	eor	r27, r27
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	9a 83       	std	Y+2, r25	; 0x02
    1c36:	ab 83       	std	Y+3, r26	; 0x03
    1c38:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    1c3e:	89 e8       	ldi	r24, 0x89	; 137
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	2e 81       	ldd	r18, Y+6	; 0x06
    1c44:	fc 01       	movw	r30, r24
    1c46:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    1c48:	88 e8       	ldi	r24, 0x88	; 136
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c4e:	fc 01       	movw	r30, r24
    1c50:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1c52:	8b e0       	ldi	r24, 0x0B	; 11
    1c54:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    1c56:	81 e8       	ldi	r24, 0x81	; 129
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    1c60:	8f e6       	ldi	r24, 0x6F	; 111
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	fc 01       	movw	r30, r24
    1c66:	80 81       	ld	r24, Z
    1c68:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6c:	82 60       	ori	r24, 0x02	; 2
    1c6e:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    1c70:	8f e6       	ldi	r24, 0x6F	; 111
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	2d 81       	ldd	r18, Y+5	; 0x05
    1c76:	fc 01       	movw	r30, r24
    1c78:	20 83       	st	Z, r18
}
    1c7a:	00 00       	nop
    1c7c:	26 96       	adiw	r28, 0x06	; 6
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	08 95       	ret

00001c8e <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    1c8e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <vPortYieldFromTick>
		asm volatile ( "reti" );
    1c92:	18 95       	reti
	...

00001c96 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <pvPortMalloc+0x6>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <pvPortMalloc+0x8>
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	9c 83       	std	Y+4, r25	; 0x04
    1ca4:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    1ca6:	1a 82       	std	Y+2, r1	; 0x02
    1ca8:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    1caa:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1cae:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <pucAlignedHeap.2084>
    1cb2:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <pucAlignedHeap.2084+0x1>
    1cb6:	89 2b       	or	r24, r25
    1cb8:	31 f4       	brne	.+12     	; 0x1cc6 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1cba:	80 e6       	ldi	r24, 0x60	; 96
    1cbc:	93 e0       	ldi	r25, 0x03	; 3
    1cbe:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <pucAlignedHeap.2084+0x1>
    1cc2:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <pucAlignedHeap.2084>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1cc6:	20 91 47 07 	lds	r18, 0x0747	; 0x800747 <xNextFreeByte>
    1cca:	30 91 48 07 	lds	r19, 0x0748	; 0x800748 <xNextFreeByte+0x1>
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	82 0f       	add	r24, r18
    1cd4:	93 1f       	adc	r25, r19
    1cd6:	87 3e       	cpi	r24, 0xE7	; 231
    1cd8:	93 40       	sbci	r25, 0x03	; 3
    1cda:	38 f5       	brcc	.+78     	; 0x1d2a <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    1cdc:	20 91 47 07 	lds	r18, 0x0747	; 0x800747 <xNextFreeByte>
    1ce0:	30 91 48 07 	lds	r19, 0x0748	; 0x800748 <xNextFreeByte+0x1>
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce8:	28 0f       	add	r18, r24
    1cea:	39 1f       	adc	r19, r25
    1cec:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <xNextFreeByte>
    1cf0:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1cf4:	82 17       	cp	r24, r18
    1cf6:	93 07       	cpc	r25, r19
    1cf8:	c0 f4       	brcc	.+48     	; 0x1d2a <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1cfa:	20 91 49 07 	lds	r18, 0x0749	; 0x800749 <pucAlignedHeap.2084>
    1cfe:	30 91 4a 07 	lds	r19, 0x074A	; 0x80074a <pucAlignedHeap.2084+0x1>
    1d02:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <xNextFreeByte>
    1d06:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <xNextFreeByte+0x1>
    1d0a:	82 0f       	add	r24, r18
    1d0c:	93 1f       	adc	r25, r19
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
    1d10:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    1d12:	20 91 47 07 	lds	r18, 0x0747	; 0x800747 <xNextFreeByte>
    1d16:	30 91 48 07 	lds	r19, 0x0748	; 0x800748 <xNextFreeByte+0x1>
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	82 0f       	add	r24, r18
    1d20:	93 1f       	adc	r25, r19
    1d22:	90 93 48 07 	sts	0x0748, r25	; 0x800748 <xNextFreeByte+0x1>
    1d26:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1d2a:	0e 94 5d 17 	call	0x2eba	; 0x2eba <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	08 95       	ret

00001d40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <vPortFree+0x6>
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	9a 83       	std	Y+2, r25	; 0x02
    1d4c:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1d4e:	00 00       	nop
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	08 95       	ret

00001d5a <_serial_tx_int_on>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <_serial_tx_int_on+0x6>
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	9a 83       	std	Y+2, r25	; 0x02
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6c:	05 97       	sbiw	r24, 0x05	; 5
    1d6e:	29 81       	ldd	r18, Y+1	; 0x01
    1d70:	3a 81       	ldd	r19, Y+2	; 0x02
    1d72:	25 50       	subi	r18, 0x05	; 5
    1d74:	31 09       	sbc	r19, r1
    1d76:	f9 01       	movw	r30, r18
    1d78:	20 81       	ld	r18, Z
    1d7a:	20 62       	ori	r18, 0x20	; 32
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	20 83       	st	Z, r18
    1d80:	00 00       	nop
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	08 95       	ret

00001d8c <serial_new_instance>:
    1d8c:	8f 92       	push	r8
    1d8e:	9f 92       	push	r9
    1d90:	af 92       	push	r10
    1d92:	bf 92       	push	r11
    1d94:	cf 92       	push	r12
    1d96:	df 92       	push	r13
    1d98:	ef 92       	push	r14
    1d9a:	0f 93       	push	r16
    1d9c:	1f 93       	push	r17
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	61 97       	sbiw	r28, 0x11	; 17
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	8c 83       	std	Y+4, r24	; 0x04
    1db4:	4d 83       	std	Y+5, r20	; 0x05
    1db6:	5e 83       	std	Y+6, r21	; 0x06
    1db8:	6f 83       	std	Y+7, r22	; 0x07
    1dba:	78 87       	std	Y+8, r23	; 0x08
    1dbc:	29 87       	std	Y+9, r18	; 0x09
    1dbe:	0a 87       	std	Y+10, r16	; 0x0a
    1dc0:	eb 86       	std	Y+11, r14	; 0x0b
    1dc2:	dd 86       	std	Y+13, r13	; 0x0d
    1dc4:	cc 86       	std	Y+12, r12	; 0x0c
    1dc6:	bf 86       	std	Y+15, r11	; 0x0f
    1dc8:	ae 86       	std	Y+14, r10	; 0x0e
    1dca:	99 8a       	std	Y+17, r9	; 0x11
    1dcc:	88 8a       	std	Y+16, r8	; 0x10
    1dce:	88 e0       	ldi	r24, 0x08	; 8
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <malloc>
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	8c 81       	ldd	r24, Y+4	; 0x04
    1ddc:	88 2f       	mov	r24, r24
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	85 5b       	subi	r24, 0xB5	; 181
    1de6:	98 4f       	sbci	r25, 0xF8	; 248
    1de8:	29 81       	ldd	r18, Y+1	; 0x01
    1dea:	3a 81       	ldd	r19, Y+2	; 0x02
    1dec:	fc 01       	movw	r30, r24
    1dee:	31 83       	std	Z+1, r19	; 0x01
    1df0:	20 83       	st	Z, r18
    1df2:	8c 81       	ldd	r24, Y+4	; 0x04
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	8a 5f       	subi	r24, 0xFA	; 250
    1dfe:	9e 4f       	sbci	r25, 0xFE	; 254
    1e00:	fc 01       	movw	r30, r24
    1e02:	20 81       	ld	r18, Z
    1e04:	31 81       	ldd	r19, Z+1	; 0x01
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	31 83       	std	Z+1, r19	; 0x01
    1e0e:	20 83       	st	Z, r18
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	9a 81       	ldd	r25, Y+2	; 0x02
    1e14:	2e 85       	ldd	r18, Y+14	; 0x0e
    1e16:	3f 85       	ldd	r19, Y+15	; 0x0f
    1e18:	fc 01       	movw	r30, r24
    1e1a:	33 83       	std	Z+3, r19	; 0x03
    1e1c:	22 83       	std	Z+2, r18	; 0x02
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	9a 81       	ldd	r25, Y+2	; 0x02
    1e22:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e24:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e26:	fc 01       	movw	r30, r24
    1e28:	35 83       	std	Z+5, r19	; 0x05
    1e2a:	24 83       	std	Z+4, r18	; 0x04
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	28 89       	ldd	r18, Y+16	; 0x10
    1e32:	39 89       	ldd	r19, Y+17	; 0x11
    1e34:	fc 01       	movw	r30, r24
    1e36:	37 83       	std	Z+7, r19	; 0x07
    1e38:	26 83       	std	Z+6, r18	; 0x06
    1e3a:	8f e5       	ldi	r24, 0x5F	; 95
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	fc 01       	movw	r30, r24
    1e40:	80 81       	ld	r24, Z
    1e42:	8b 83       	std	Y+3, r24	; 0x03
    1e44:	f8 94       	cli
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	80 81       	ld	r24, Z
    1e4e:	91 81       	ldd	r25, Z+1	; 0x01
    1e50:	06 97       	sbiw	r24, 0x06	; 6
    1e52:	29 81       	ldd	r18, Y+1	; 0x01
    1e54:	3a 81       	ldd	r19, Y+2	; 0x02
    1e56:	f9 01       	movw	r30, r18
    1e58:	20 81       	ld	r18, Z
    1e5a:	31 81       	ldd	r19, Z+1	; 0x01
    1e5c:	26 50       	subi	r18, 0x06	; 6
    1e5e:	31 09       	sbc	r19, r1
    1e60:	f9 01       	movw	r30, r18
    1e62:	20 81       	ld	r18, Z
    1e64:	22 60       	ori	r18, 0x02	; 2
    1e66:	fc 01       	movw	r30, r24
    1e68:	20 83       	st	Z, r18
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6e:	fc 01       	movw	r30, r24
    1e70:	80 81       	ld	r24, Z
    1e72:	91 81       	ldd	r25, Z+1	; 0x01
    1e74:	8c 01       	movw	r16, r24
    1e76:	02 50       	subi	r16, 0x02	; 2
    1e78:	11 09       	sbc	r17, r1
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	af 81       	ldd	r26, Y+7	; 0x07
    1e80:	b8 85       	ldd	r27, Y+8	; 0x08
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	aa 1f       	adc	r26, r26
    1e88:	bb 1f       	adc	r27, r27
    1e8a:	88 0f       	add	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	aa 1f       	adc	r26, r26
    1e90:	bb 1f       	adc	r27, r27
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	aa 1f       	adc	r26, r26
    1e98:	bb 1f       	adc	r27, r27
    1e9a:	9c 01       	movw	r18, r24
    1e9c:	ad 01       	movw	r20, r26
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	a1 ee       	ldi	r26, 0xE1	; 225
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	bc 01       	movw	r22, r24
    1ea8:	cd 01       	movw	r24, r26
    1eaa:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <__udivmodsi4>
    1eae:	da 01       	movw	r26, r20
    1eb0:	c9 01       	movw	r24, r18
    1eb2:	81 50       	subi	r24, 0x01	; 1
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	80 83       	st	Z, r24
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	80 81       	ld	r24, Z
    1ec0:	91 81       	ldd	r25, Z+1	; 0x01
    1ec2:	05 97       	sbiw	r24, 0x05	; 5
    1ec4:	28 e9       	ldi	r18, 0x98	; 152
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	20 83       	st	Z, r18
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ece:	fc 01       	movw	r30, r24
    1ed0:	80 81       	ld	r24, Z
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	04 97       	sbiw	r24, 0x04	; 4
    1ed6:	26 e0       	ldi	r18, 0x06	; 6
    1ed8:	fc 01       	movw	r30, r24
    1eda:	20 83       	st	Z, r18
    1edc:	8f e5       	ldi	r24, 0x5F	; 95
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	20 83       	st	Z, r18
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	61 96       	adiw	r28, 0x11	; 17
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	ef 90       	pop	r14
    1f00:	df 90       	pop	r13
    1f02:	cf 90       	pop	r12
    1f04:	bf 90       	pop	r11
    1f06:	af 90       	pop	r10
    1f08:	9f 90       	pop	r9
    1f0a:	8f 90       	pop	r8
    1f0c:	08 95       	ret

00001f0e <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <serial_send_bytes+0x6>
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <serial_send_bytes+0x8>
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <serial_send_bytes+0xa>
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	9b 83       	std	Y+3, r25	; 0x03
    1f1e:	8a 83       	std	Y+2, r24	; 0x02
    1f20:	7d 83       	std	Y+5, r23	; 0x05
    1f22:	6c 83       	std	Y+4, r22	; 0x04
    1f24:	4e 83       	std	Y+6, r20	; 0x06
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	93 81       	ldd	r25, Z+3	; 0x03
    1f30:	89 2b       	or	r24, r25
    1f32:	a9 f0       	breq	.+42     	; 0x1f5e <serial_send_bytes+0x50>
    1f34:	8e 81       	ldd	r24, Y+6	; 0x06
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3e:	fc 01       	movw	r30, r24
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	93 81       	ldd	r25, Z+3	; 0x03
    1f44:	fc 01       	movw	r30, r24
    1f46:	82 a1       	ldd	r24, Z+34	; 0x22
    1f48:	88 2f       	mov	r24, r24
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	40 e2       	ldi	r20, 0x20	; 32
    1f4e:	50 e0       	ldi	r21, 0x00	; 0
    1f50:	ba 01       	movw	r22, r20
    1f52:	68 1b       	sub	r22, r24
    1f54:	79 0b       	sbc	r23, r25
    1f56:	cb 01       	movw	r24, r22
    1f58:	82 17       	cp	r24, r18
    1f5a:	93 07       	cpc	r25, r19
    1f5c:	54 f0       	brlt	.+20     	; 0x1f72 <serial_send_bytes+0x64>
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	9b 81       	ldd	r25, Y+3	; 0x03
    1f62:	fc 01       	movw	r30, r24
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	89 2b       	or	r24, r25
    1f6a:	29 f4       	brne	.+10     	; 0x1f76 <serial_send_bytes+0x68>
    1f6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f6e:	82 30       	cpi	r24, 0x02	; 2
    1f70:	10 f0       	brcs	.+4      	; 0x1f76 <serial_send_bytes+0x68>
		return BUFFER_FULL;
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	22 c0       	rjmp	.+68     	; 0x1fba <serial_send_bytes+0xac>
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    1f76:	19 82       	std	Y+1, r1	; 0x01
    1f78:	14 c0       	rjmp	.+40     	; 0x1fa2 <serial_send_bytes+0x94>
		buffer_put_item(handle->_tx_buf, buf[i]);
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	88 2f       	mov	r24, r24
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	2c 81       	ldd	r18, Y+4	; 0x04
    1f82:	3d 81       	ldd	r19, Y+5	; 0x05
    1f84:	82 0f       	add	r24, r18
    1f86:	93 1f       	adc	r25, r19
    1f88:	fc 01       	movw	r30, r24
    1f8a:	20 81       	ld	r18, Z
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f90:	fc 01       	movw	r30, r24
    1f92:	82 81       	ldd	r24, Z+2	; 0x02
    1f94:	93 81       	ldd	r25, Z+3	; 0x03
    1f96:	62 2f       	mov	r22, r18
    1f98:	0e 94 a6 09 	call	0x134c	; 0x134c <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	8f 5f       	subi	r24, 0xFF	; 255
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	99 81       	ldd	r25, Y+1	; 0x01
    1fa4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa6:	98 17       	cp	r25, r24
    1fa8:	40 f3       	brcs	.-48     	; 0x1f7a <serial_send_bytes+0x6c>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	9b 81       	ldd	r25, Y+3	; 0x03
    1fae:	fc 01       	movw	r30, r24
    1fb0:	80 81       	ld	r24, Z
    1fb2:	91 81       	ldd	r25, Z+1	; 0x01
    1fb4:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <_serial_tx_int_on>
	return BUFFER_OK;
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
}
    1fba:	26 96       	adiw	r28, 0x06	; 6
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	08 95       	ret

00001fcc <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    1fcc:	1f 92       	push	r1
    1fce:	0f 92       	push	r0
    1fd0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1fd4:	0f 92       	push	r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	2f 93       	push	r18
    1fda:	3f 93       	push	r19
    1fdc:	4f 93       	push	r20
    1fde:	5f 93       	push	r21
    1fe0:	6f 93       	push	r22
    1fe2:	7f 93       	push	r23
    1fe4:	8f 93       	push	r24
    1fe6:	9f 93       	push	r25
    1fe8:	af 93       	push	r26
    1fea:	bf 93       	push	r27
    1fec:	ef 93       	push	r30
    1fee:	ff 93       	push	r31
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	1f 92       	push	r1
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1ffa:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    1ffe:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    2002:	89 2b       	or	r24, r25
    2004:	31 f1       	breq	.+76     	; 0x2052 <__vector_20+0x86>
		item = UDR0;
    2006:	86 ec       	ldi	r24, 0xC6	; 198
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	fc 01       	movw	r30, r24
    200c:	80 81       	ld	r24, Z
    200e:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    2010:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    2014:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    2018:	fc 01       	movw	r30, r24
    201a:	84 81       	ldd	r24, Z+4	; 0x04
    201c:	95 81       	ldd	r25, Z+5	; 0x05
    201e:	69 81       	ldd	r22, Y+1	; 0x01
    2020:	0e 94 a6 09 	call	0x134c	; 0x134c <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    2024:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    2028:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    202c:	fc 01       	movw	r30, r24
    202e:	86 81       	ldd	r24, Z+6	; 0x06
    2030:	97 81       	ldd	r25, Z+7	; 0x07
    2032:	89 2b       	or	r24, r25
    2034:	71 f0       	breq	.+28     	; 0x2052 <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    2036:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    203a:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    203e:	fc 01       	movw	r30, r24
    2040:	26 81       	ldd	r18, Z+6	; 0x06
    2042:	37 81       	ldd	r19, Z+7	; 0x07
    2044:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    2048:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    204c:	69 81       	ldd	r22, Y+1	; 0x01
    204e:	f9 01       	movw	r30, r18
    2050:	09 95       	icall
		}
	}
}
    2052:	00 00       	nop
    2054:	0f 90       	pop	r0
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	ff 91       	pop	r31
    205c:	ef 91       	pop	r30
    205e:	bf 91       	pop	r27
    2060:	af 91       	pop	r26
    2062:	9f 91       	pop	r25
    2064:	8f 91       	pop	r24
    2066:	7f 91       	pop	r23
    2068:	6f 91       	pop	r22
    206a:	5f 91       	pop	r21
    206c:	4f 91       	pop	r20
    206e:	3f 91       	pop	r19
    2070:	2f 91       	pop	r18
    2072:	0f 90       	pop	r0
    2074:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2078:	0f 90       	pop	r0
    207a:	1f 90       	pop	r1
    207c:	18 95       	reti

0000207e <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    207e:	1f 92       	push	r1
    2080:	0f 92       	push	r0
    2082:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2086:	0f 92       	push	r0
    2088:	11 24       	eor	r1, r1
    208a:	2f 93       	push	r18
    208c:	3f 93       	push	r19
    208e:	4f 93       	push	r20
    2090:	5f 93       	push	r21
    2092:	6f 93       	push	r22
    2094:	7f 93       	push	r23
    2096:	8f 93       	push	r24
    2098:	9f 93       	push	r25
    209a:	af 93       	push	r26
    209c:	bf 93       	push	r27
    209e:	ef 93       	push	r30
    20a0:	ff 93       	push	r31
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	1f 92       	push	r1
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    20ac:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    20b0:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    20b4:	89 2b       	or	r24, r25
    20b6:	f9 f0       	breq	.+62     	; 0x20f6 <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    20b8:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    20bc:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    20c0:	fc 01       	movw	r30, r24
    20c2:	82 81       	ldd	r24, Z+2	; 0x02
    20c4:	93 81       	ldd	r25, Z+3	; 0x03
    20c6:	9e 01       	movw	r18, r28
    20c8:	2f 5f       	subi	r18, 0xFF	; 255
    20ca:	3f 4f       	sbci	r19, 0xFF	; 255
    20cc:	b9 01       	movw	r22, r18
    20ce:	0e 94 5e 09 	call	0x12bc	; 0x12bc <buffer_get_item>
    20d2:	88 23       	and	r24, r24
    20d4:	31 f4       	brne	.+12     	; 0x20e2 <__vector_21+0x64>
			UDR0 = item;
    20d6:	86 ec       	ldi	r24, 0xC6	; 198
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	29 81       	ldd	r18, Y+1	; 0x01
    20dc:	fc 01       	movw	r30, r24
    20de:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    20e0:	13 c0       	rjmp	.+38     	; 0x2108 <__vector_21+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
			UDR0 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    20e2:	81 ec       	ldi	r24, 0xC1	; 193
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	21 ec       	ldi	r18, 0xC1	; 193
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	f9 01       	movw	r30, r18
    20ec:	20 81       	ld	r18, Z
    20ee:	2f 7d       	andi	r18, 0xDF	; 223
    20f0:	fc 01       	movw	r30, r24
    20f2:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    20f4:	09 c0       	rjmp	.+18     	; 0x2108 <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    20f6:	81 ec       	ldi	r24, 0xC1	; 193
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	21 ec       	ldi	r18, 0xC1	; 193
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	f9 01       	movw	r30, r18
    2100:	20 81       	ld	r18, Z
    2102:	2f 7d       	andi	r18, 0xDF	; 223
    2104:	fc 01       	movw	r30, r24
    2106:	20 83       	st	Z, r18
	}
}
    2108:	00 00       	nop
    210a:	0f 90       	pop	r0
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	ff 91       	pop	r31
    2112:	ef 91       	pop	r30
    2114:	bf 91       	pop	r27
    2116:	af 91       	pop	r26
    2118:	9f 91       	pop	r25
    211a:	8f 91       	pop	r24
    211c:	7f 91       	pop	r23
    211e:	6f 91       	pop	r22
    2120:	5f 91       	pop	r21
    2122:	4f 91       	pop	r20
    2124:	3f 91       	pop	r19
    2126:	2f 91       	pop	r18
    2128:	0f 90       	pop	r0
    212a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    212e:	0f 90       	pop	r0
    2130:	1f 90       	pop	r1
    2132:	18 95       	reti

00002134 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    2134:	1f 92       	push	r1
    2136:	0f 92       	push	r0
    2138:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    213c:	0f 92       	push	r0
    213e:	11 24       	eor	r1, r1
    2140:	2f 93       	push	r18
    2142:	3f 93       	push	r19
    2144:	4f 93       	push	r20
    2146:	5f 93       	push	r21
    2148:	6f 93       	push	r22
    214a:	7f 93       	push	r23
    214c:	8f 93       	push	r24
    214e:	9f 93       	push	r25
    2150:	af 93       	push	r26
    2152:	bf 93       	push	r27
    2154:	ef 93       	push	r30
    2156:	ff 93       	push	r31
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	1f 92       	push	r1
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    2162:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    2166:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    216a:	89 2b       	or	r24, r25
    216c:	31 f1       	breq	.+76     	; 0x21ba <__vector_28+0x86>
		item = UDR1;
    216e:	8e ec       	ldi	r24, 0xCE	; 206
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	fc 01       	movw	r30, r24
    2174:	80 81       	ld	r24, Z
    2176:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    2178:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    217c:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    2180:	fc 01       	movw	r30, r24
    2182:	84 81       	ldd	r24, Z+4	; 0x04
    2184:	95 81       	ldd	r25, Z+5	; 0x05
    2186:	69 81       	ldd	r22, Y+1	; 0x01
    2188:	0e 94 a6 09 	call	0x134c	; 0x134c <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    218c:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    2190:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    2194:	fc 01       	movw	r30, r24
    2196:	86 81       	ldd	r24, Z+6	; 0x06
    2198:	97 81       	ldd	r25, Z+7	; 0x07
    219a:	89 2b       	or	r24, r25
    219c:	71 f0       	breq	.+28     	; 0x21ba <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    219e:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    21a2:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    21a6:	fc 01       	movw	r30, r24
    21a8:	26 81       	ldd	r18, Z+6	; 0x06
    21aa:	37 81       	ldd	r19, Z+7	; 0x07
    21ac:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    21b0:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    21b4:	69 81       	ldd	r22, Y+1	; 0x01
    21b6:	f9 01       	movw	r30, r18
    21b8:	09 95       	icall
		}
	}
}
    21ba:	00 00       	nop
    21bc:	0f 90       	pop	r0
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	ff 91       	pop	r31
    21c4:	ef 91       	pop	r30
    21c6:	bf 91       	pop	r27
    21c8:	af 91       	pop	r26
    21ca:	9f 91       	pop	r25
    21cc:	8f 91       	pop	r24
    21ce:	7f 91       	pop	r23
    21d0:	6f 91       	pop	r22
    21d2:	5f 91       	pop	r21
    21d4:	4f 91       	pop	r20
    21d6:	3f 91       	pop	r19
    21d8:	2f 91       	pop	r18
    21da:	0f 90       	pop	r0
    21dc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    21e0:	0f 90       	pop	r0
    21e2:	1f 90       	pop	r1
    21e4:	18 95       	reti

000021e6 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    21e6:	1f 92       	push	r1
    21e8:	0f 92       	push	r0
    21ea:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    21ee:	0f 92       	push	r0
    21f0:	11 24       	eor	r1, r1
    21f2:	2f 93       	push	r18
    21f4:	3f 93       	push	r19
    21f6:	4f 93       	push	r20
    21f8:	5f 93       	push	r21
    21fa:	6f 93       	push	r22
    21fc:	7f 93       	push	r23
    21fe:	8f 93       	push	r24
    2200:	9f 93       	push	r25
    2202:	af 93       	push	r26
    2204:	bf 93       	push	r27
    2206:	ef 93       	push	r30
    2208:	ff 93       	push	r31
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	1f 92       	push	r1
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    2214:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    2218:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    221c:	89 2b       	or	r24, r25
    221e:	f9 f0       	breq	.+62     	; 0x225e <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    2220:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    2224:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    2228:	fc 01       	movw	r30, r24
    222a:	82 81       	ldd	r24, Z+2	; 0x02
    222c:	93 81       	ldd	r25, Z+3	; 0x03
    222e:	9e 01       	movw	r18, r28
    2230:	2f 5f       	subi	r18, 0xFF	; 255
    2232:	3f 4f       	sbci	r19, 0xFF	; 255
    2234:	b9 01       	movw	r22, r18
    2236:	0e 94 5e 09 	call	0x12bc	; 0x12bc <buffer_get_item>
    223a:	88 23       	and	r24, r24
    223c:	31 f4       	brne	.+12     	; 0x224a <__vector_29+0x64>
			UDR1 = item;
    223e:	8e ec       	ldi	r24, 0xCE	; 206
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	29 81       	ldd	r18, Y+1	; 0x01
    2244:	fc 01       	movw	r30, r24
    2246:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    2248:	13 c0       	rjmp	.+38     	; 0x2270 <__vector_29+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
			UDR1 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    224a:	89 ec       	ldi	r24, 0xC9	; 201
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	29 ec       	ldi	r18, 0xC9	; 201
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	f9 01       	movw	r30, r18
    2254:	20 81       	ld	r18, Z
    2256:	2f 7d       	andi	r18, 0xDF	; 223
    2258:	fc 01       	movw	r30, r24
    225a:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    225c:	09 c0       	rjmp	.+18     	; 0x2270 <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    225e:	89 ec       	ldi	r24, 0xC9	; 201
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	29 ec       	ldi	r18, 0xC9	; 201
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	f9 01       	movw	r30, r18
    2268:	20 81       	ld	r18, Z
    226a:	2f 7d       	andi	r18, 0xDF	; 223
    226c:	fc 01       	movw	r30, r24
    226e:	20 83       	st	Z, r18
	}
}
    2270:	00 00       	nop
    2272:	0f 90       	pop	r0
    2274:	df 91       	pop	r29
    2276:	cf 91       	pop	r28
    2278:	ff 91       	pop	r31
    227a:	ef 91       	pop	r30
    227c:	bf 91       	pop	r27
    227e:	af 91       	pop	r26
    2280:	9f 91       	pop	r25
    2282:	8f 91       	pop	r24
    2284:	7f 91       	pop	r23
    2286:	6f 91       	pop	r22
    2288:	5f 91       	pop	r21
    228a:	4f 91       	pop	r20
    228c:	3f 91       	pop	r19
    228e:	2f 91       	pop	r18
    2290:	0f 90       	pop	r0
    2292:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2296:	0f 90       	pop	r0
    2298:	1f 90       	pop	r1
    229a:	18 95       	reti

0000229c <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	00 d0       	rcall	.+0      	; 0x22a2 <xQueueGenericReset+0x6>
    22a2:	00 d0       	rcall	.+0      	; 0x22a4 <xQueueGenericReset+0x8>
    22a4:	1f 92       	push	r1
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	9c 83       	std	Y+4, r25	; 0x04
    22ac:	8b 83       	std	Y+3, r24	; 0x03
    22ae:	6d 83       	std	Y+5, r22	; 0x05
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	0f 92       	push	r0
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	9a 81       	ldd	r25, Y+2	; 0x02
    22c2:	fc 01       	movw	r30, r24
    22c4:	80 81       	ld	r24, Z
    22c6:	91 81       	ldd	r25, Z+1	; 0x01
    22c8:	29 81       	ldd	r18, Y+1	; 0x01
    22ca:	3a 81       	ldd	r19, Y+2	; 0x02
    22cc:	f9 01       	movw	r30, r18
    22ce:	23 8d       	ldd	r18, Z+27	; 0x1b
    22d0:	42 2f       	mov	r20, r18
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	29 81       	ldd	r18, Y+1	; 0x01
    22d6:	3a 81       	ldd	r19, Y+2	; 0x02
    22d8:	f9 01       	movw	r30, r18
    22da:	24 8d       	ldd	r18, Z+28	; 0x1c
    22dc:	22 2f       	mov	r18, r18
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	42 9f       	mul	r20, r18
    22e2:	b0 01       	movw	r22, r0
    22e4:	43 9f       	mul	r20, r19
    22e6:	70 0d       	add	r23, r0
    22e8:	52 9f       	mul	r21, r18
    22ea:	70 0d       	add	r23, r0
    22ec:	11 24       	eor	r1, r1
    22ee:	9b 01       	movw	r18, r22
    22f0:	28 0f       	add	r18, r24
    22f2:	39 1f       	adc	r19, r25
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	fc 01       	movw	r30, r24
    22fa:	33 83       	std	Z+3, r19	; 0x03
    22fc:	22 83       	std	Z+2, r18	; 0x02
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	9a 81       	ldd	r25, Y+2	; 0x02
    2302:	fc 01       	movw	r30, r24
    2304:	12 8e       	std	Z+26, r1	; 0x1a
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	fc 01       	movw	r30, r24
    230c:	20 81       	ld	r18, Z
    230e:	31 81       	ldd	r19, Z+1	; 0x01
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	9a 81       	ldd	r25, Y+2	; 0x02
    2314:	fc 01       	movw	r30, r24
    2316:	35 83       	std	Z+5, r19	; 0x05
    2318:	24 83       	std	Z+4, r18	; 0x04
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	9a 81       	ldd	r25, Y+2	; 0x02
    231e:	fc 01       	movw	r30, r24
    2320:	80 81       	ld	r24, Z
    2322:	91 81       	ldd	r25, Z+1	; 0x01
    2324:	29 81       	ldd	r18, Y+1	; 0x01
    2326:	3a 81       	ldd	r19, Y+2	; 0x02
    2328:	f9 01       	movw	r30, r18
    232a:	23 8d       	ldd	r18, Z+27	; 0x1b
    232c:	22 2f       	mov	r18, r18
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	a9 01       	movw	r20, r18
    2332:	41 50       	subi	r20, 0x01	; 1
    2334:	51 09       	sbc	r21, r1
    2336:	29 81       	ldd	r18, Y+1	; 0x01
    2338:	3a 81       	ldd	r19, Y+2	; 0x02
    233a:	f9 01       	movw	r30, r18
    233c:	24 8d       	ldd	r18, Z+28	; 0x1c
    233e:	22 2f       	mov	r18, r18
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	42 9f       	mul	r20, r18
    2344:	b0 01       	movw	r22, r0
    2346:	43 9f       	mul	r20, r19
    2348:	70 0d       	add	r23, r0
    234a:	52 9f       	mul	r21, r18
    234c:	70 0d       	add	r23, r0
    234e:	11 24       	eor	r1, r1
    2350:	9b 01       	movw	r18, r22
    2352:	28 0f       	add	r18, r24
    2354:	39 1f       	adc	r19, r25
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	9a 81       	ldd	r25, Y+2	; 0x02
    235a:	fc 01       	movw	r30, r24
    235c:	37 83       	std	Z+7, r19	; 0x07
    235e:	26 83       	std	Z+6, r18	; 0x06
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	2f ef       	ldi	r18, 0xFF	; 255
    2366:	fc 01       	movw	r30, r24
    2368:	25 8f       	std	Z+29, r18	; 0x1d
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	9a 81       	ldd	r25, Y+2	; 0x02
    236e:	2f ef       	ldi	r18, 0xFF	; 255
    2370:	fc 01       	movw	r30, r24
    2372:	26 8f       	std	Z+30, r18	; 0x1e
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	88 23       	and	r24, r24
    2378:	81 f4       	brne	.+32     	; 0x239a <xQueueGenericReset+0xfe>
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	9a 81       	ldd	r25, Y+2	; 0x02
    237e:	fc 01       	movw	r30, r24
    2380:	80 85       	ldd	r24, Z+8	; 0x08
    2382:	88 23       	and	r24, r24
    2384:	a1 f0       	breq	.+40     	; 0x23ae <xQueueGenericReset+0x112>
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	08 96       	adiw	r24, 0x08	; 8
    238c:	0e 94 8a 19 	call	0x3314	; 0x3314 <xTaskRemoveFromEventList>
    2390:	88 23       	and	r24, r24
    2392:	69 f0       	breq	.+26     	; 0x23ae <xQueueGenericReset+0x112>
    2394:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vPortYield>
    2398:	0a c0       	rjmp	.+20     	; 0x23ae <xQueueGenericReset+0x112>
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	08 96       	adiw	r24, 0x08	; 8
    23a0:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <vListInitialise>
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	41 96       	adiw	r24, 0x11	; 17
    23aa:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <vListInitialise>
    23ae:	0f 90       	pop	r0
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	08 95       	ret

000023c4 <xQueueGenericCreate>:
    23c4:	0f 93       	push	r16
    23c6:	1f 93       	push	r17
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	29 97       	sbiw	r28, 0x09	; 9
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	8f 83       	std	Y+7, r24	; 0x07
    23de:	68 87       	std	Y+8, r22	; 0x08
    23e0:	49 87       	std	Y+9, r20	; 0x09
    23e2:	88 85       	ldd	r24, Y+8	; 0x08
    23e4:	88 23       	and	r24, r24
    23e6:	19 f4       	brne	.+6      	; 0x23ee <xQueueGenericCreate+0x2a>
    23e8:	1a 82       	std	Y+2, r1	; 0x02
    23ea:	19 82       	std	Y+1, r1	; 0x01
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <xQueueGenericCreate+0x48>
    23ee:	8f 81       	ldd	r24, Y+7	; 0x07
    23f0:	48 2f       	mov	r20, r24
    23f2:	50 e0       	ldi	r21, 0x00	; 0
    23f4:	88 85       	ldd	r24, Y+8	; 0x08
    23f6:	28 2f       	mov	r18, r24
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	42 9f       	mul	r20, r18
    23fc:	c0 01       	movw	r24, r0
    23fe:	43 9f       	mul	r20, r19
    2400:	90 0d       	add	r25, r0
    2402:	52 9f       	mul	r21, r18
    2404:	90 0d       	add	r25, r0
    2406:	11 24       	eor	r1, r1
    2408:	9a 83       	std	Y+2, r25	; 0x02
    240a:	89 83       	std	Y+1, r24	; 0x01
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	9a 81       	ldd	r25, Y+2	; 0x02
    2410:	81 96       	adiw	r24, 0x21	; 33
    2412:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <pvPortMalloc>
    2416:	9c 83       	std	Y+4, r25	; 0x04
    2418:	8b 83       	std	Y+3, r24	; 0x03
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	89 2b       	or	r24, r25
    2420:	81 f0       	breq	.+32     	; 0x2442 <xQueueGenericCreate+0x7e>
    2422:	8b 81       	ldd	r24, Y+3	; 0x03
    2424:	9c 81       	ldd	r25, Y+4	; 0x04
    2426:	81 96       	adiw	r24, 0x21	; 33
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
    242c:	2b 81       	ldd	r18, Y+3	; 0x03
    242e:	3c 81       	ldd	r19, Y+4	; 0x04
    2430:	8d 81       	ldd	r24, Y+5	; 0x05
    2432:	9e 81       	ldd	r25, Y+6	; 0x06
    2434:	89 01       	movw	r16, r18
    2436:	29 85       	ldd	r18, Y+9	; 0x09
    2438:	ac 01       	movw	r20, r24
    243a:	68 85       	ldd	r22, Y+8	; 0x08
    243c:	8f 81       	ldd	r24, Y+7	; 0x07
    243e:	0e 94 2e 12 	call	0x245c	; 0x245c <prvInitialiseNewQueue>
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	9c 81       	ldd	r25, Y+4	; 0x04
    2446:	29 96       	adiw	r28, 0x09	; 9
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	1f 91       	pop	r17
    2458:	0f 91       	pop	r16
    245a:	08 95       	ret

0000245c <prvInitialiseNewQueue>:
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	27 97       	sbiw	r28, 0x07	; 7
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	89 83       	std	Y+1, r24	; 0x01
    2476:	6a 83       	std	Y+2, r22	; 0x02
    2478:	5c 83       	std	Y+4, r21	; 0x04
    247a:	4b 83       	std	Y+3, r20	; 0x03
    247c:	2d 83       	std	Y+5, r18	; 0x05
    247e:	1f 83       	std	Y+7, r17	; 0x07
    2480:	0e 83       	std	Y+6, r16	; 0x06
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	88 23       	and	r24, r24
    2486:	41 f4       	brne	.+16     	; 0x2498 <prvInitialiseNewQueue+0x3c>
    2488:	8e 81       	ldd	r24, Y+6	; 0x06
    248a:	9f 81       	ldd	r25, Y+7	; 0x07
    248c:	2e 81       	ldd	r18, Y+6	; 0x06
    248e:	3f 81       	ldd	r19, Y+7	; 0x07
    2490:	fc 01       	movw	r30, r24
    2492:	31 83       	std	Z+1, r19	; 0x01
    2494:	20 83       	st	Z, r18
    2496:	07 c0       	rjmp	.+14     	; 0x24a6 <prvInitialiseNewQueue+0x4a>
    2498:	8e 81       	ldd	r24, Y+6	; 0x06
    249a:	9f 81       	ldd	r25, Y+7	; 0x07
    249c:	2b 81       	ldd	r18, Y+3	; 0x03
    249e:	3c 81       	ldd	r19, Y+4	; 0x04
    24a0:	fc 01       	movw	r30, r24
    24a2:	31 83       	std	Z+1, r19	; 0x01
    24a4:	20 83       	st	Z, r18
    24a6:	8e 81       	ldd	r24, Y+6	; 0x06
    24a8:	9f 81       	ldd	r25, Y+7	; 0x07
    24aa:	29 81       	ldd	r18, Y+1	; 0x01
    24ac:	fc 01       	movw	r30, r24
    24ae:	23 8f       	std	Z+27, r18	; 0x1b
    24b0:	8e 81       	ldd	r24, Y+6	; 0x06
    24b2:	9f 81       	ldd	r25, Y+7	; 0x07
    24b4:	2a 81       	ldd	r18, Y+2	; 0x02
    24b6:	fc 01       	movw	r30, r24
    24b8:	24 8f       	std	Z+28, r18	; 0x1c
    24ba:	8e 81       	ldd	r24, Y+6	; 0x06
    24bc:	9f 81       	ldd	r25, Y+7	; 0x07
    24be:	61 e0       	ldi	r22, 0x01	; 1
    24c0:	0e 94 4e 11 	call	0x229c	; 0x229c <xQueueGenericReset>
    24c4:	8e 81       	ldd	r24, Y+6	; 0x06
    24c6:	9f 81       	ldd	r25, Y+7	; 0x07
    24c8:	2d 81       	ldd	r18, Y+5	; 0x05
    24ca:	fc 01       	movw	r30, r24
    24cc:	20 a3       	std	Z+32, r18	; 0x20
    24ce:	00 00       	nop
    24d0:	27 96       	adiw	r28, 0x07	; 7
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	08 95       	ret

000024e6 <prvInitialiseMutex>:
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	00 d0       	rcall	.+0      	; 0x24ec <prvInitialiseMutex+0x6>
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	9a 83       	std	Y+2, r25	; 0x02
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	9a 81       	ldd	r25, Y+2	; 0x02
    24f8:	89 2b       	or	r24, r25
    24fa:	b9 f0       	breq	.+46     	; 0x252a <prvInitialiseMutex+0x44>
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2500:	fc 01       	movw	r30, r24
    2502:	13 82       	std	Z+3, r1	; 0x03
    2504:	12 82       	std	Z+2, r1	; 0x02
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	9a 81       	ldd	r25, Y+2	; 0x02
    250a:	fc 01       	movw	r30, r24
    250c:	11 82       	std	Z+1, r1	; 0x01
    250e:	10 82       	st	Z, r1
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	9a 81       	ldd	r25, Y+2	; 0x02
    2514:	fc 01       	movw	r30, r24
    2516:	16 82       	std	Z+6, r1	; 0x06
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	9a 81       	ldd	r25, Y+2	; 0x02
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	40 e0       	ldi	r20, 0x00	; 0
    2520:	50 e0       	ldi	r21, 0x00	; 0
    2522:	60 e0       	ldi	r22, 0x00	; 0
    2524:	70 e0       	ldi	r23, 0x00	; 0
    2526:	0e 94 bb 12 	call	0x2576	; 0x2576 <xQueueGenericSend>
    252a:	00 00       	nop
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	df 91       	pop	r29
    2532:	cf 91       	pop	r28
    2534:	08 95       	ret

00002536 <xQueueCreateMutex>:
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	00 d0       	rcall	.+0      	; 0x253c <xQueueCreateMutex+0x6>
    253c:	00 d0       	rcall	.+0      	; 0x253e <xQueueCreateMutex+0x8>
    253e:	1f 92       	push	r1
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	8d 83       	std	Y+5, r24	; 0x05
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	89 83       	std	Y+1, r24	; 0x01
    254a:	1a 82       	std	Y+2, r1	; 0x02
    254c:	4d 81       	ldd	r20, Y+5	; 0x05
    254e:	6a 81       	ldd	r22, Y+2	; 0x02
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <xQueueGenericCreate>
    2556:	9c 83       	std	Y+4, r25	; 0x04
    2558:	8b 83       	std	Y+3, r24	; 0x03
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	0e 94 73 12 	call	0x24e6	; 0x24e6 <prvInitialiseMutex>
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	08 95       	ret

00002576 <xQueueGenericSend>:
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	2e 97       	sbiw	r28, 0x0e	; 14
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	99 87       	std	Y+9, r25	; 0x09
    258c:	88 87       	std	Y+8, r24	; 0x08
    258e:	7b 87       	std	Y+11, r23	; 0x0b
    2590:	6a 87       	std	Y+10, r22	; 0x0a
    2592:	5d 87       	std	Y+13, r21	; 0x0d
    2594:	4c 87       	std	Y+12, r20	; 0x0c
    2596:	2e 87       	std	Y+14, r18	; 0x0e
    2598:	19 82       	std	Y+1, r1	; 0x01
    259a:	88 85       	ldd	r24, Y+8	; 0x08
    259c:	99 85       	ldd	r25, Y+9	; 0x09
    259e:	9b 83       	std	Y+3, r25	; 0x03
    25a0:	8a 83       	std	Y+2, r24	; 0x02
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	0f 92       	push	r0
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	9b 81       	ldd	r25, Y+3	; 0x03
    25ac:	fc 01       	movw	r30, r24
    25ae:	22 8d       	ldd	r18, Z+26	; 0x1a
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	9b 81       	ldd	r25, Y+3	; 0x03
    25b4:	fc 01       	movw	r30, r24
    25b6:	83 8d       	ldd	r24, Z+27	; 0x1b
    25b8:	28 17       	cp	r18, r24
    25ba:	18 f0       	brcs	.+6      	; 0x25c2 <xQueueGenericSend+0x4c>
    25bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    25be:	82 30       	cpi	r24, 0x02	; 2
    25c0:	11 f5       	brne	.+68     	; 0x2606 <xQueueGenericSend+0x90>
    25c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    25c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ca:	4e 85       	ldd	r20, Y+14	; 0x0e
    25cc:	b9 01       	movw	r22, r18
    25ce:	0e 94 cb 13 	call	0x2796	; 0x2796 <prvCopyDataToQueue>
    25d2:	8c 83       	std	Y+4, r24	; 0x04
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
    25d6:	9b 81       	ldd	r25, Y+3	; 0x03
    25d8:	fc 01       	movw	r30, r24
    25da:	81 89       	ldd	r24, Z+17	; 0x11
    25dc:	88 23       	and	r24, r24
    25de:	51 f0       	breq	.+20     	; 0x25f4 <xQueueGenericSend+0x7e>
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	9b 81       	ldd	r25, Y+3	; 0x03
    25e4:	41 96       	adiw	r24, 0x11	; 17
    25e6:	0e 94 8a 19 	call	0x3314	; 0x3314 <xTaskRemoveFromEventList>
    25ea:	88 23       	and	r24, r24
    25ec:	41 f0       	breq	.+16     	; 0x25fe <xQueueGenericSend+0x88>
    25ee:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vPortYield>
    25f2:	05 c0       	rjmp	.+10     	; 0x25fe <xQueueGenericSend+0x88>
    25f4:	8c 81       	ldd	r24, Y+4	; 0x04
    25f6:	88 23       	and	r24, r24
    25f8:	11 f0       	breq	.+4      	; 0x25fe <xQueueGenericSend+0x88>
    25fa:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vPortYield>
    25fe:	0f 90       	pop	r0
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	60 c0       	rjmp	.+192    	; 0x26c6 <xQueueGenericSend+0x150>
    2606:	8c 85       	ldd	r24, Y+12	; 0x0c
    2608:	9d 85       	ldd	r25, Y+13	; 0x0d
    260a:	89 2b       	or	r24, r25
    260c:	21 f4       	brne	.+8      	; 0x2616 <xQueueGenericSend+0xa0>
    260e:	0f 90       	pop	r0
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	58 c0       	rjmp	.+176    	; 0x26c6 <xQueueGenericSend+0x150>
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	88 23       	and	r24, r24
    261a:	31 f4       	brne	.+12     	; 0x2628 <xQueueGenericSend+0xb2>
    261c:	ce 01       	movw	r24, r28
    261e:	05 96       	adiw	r24, 0x05	; 5
    2620:	0e 94 f7 19 	call	0x33ee	; 0x33ee <vTaskSetTimeOutState>
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	0f 90       	pop	r0
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <vTaskSuspendAll>
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	0f 92       	push	r0
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	9b 81       	ldd	r25, Y+3	; 0x03
    263a:	fc 01       	movw	r30, r24
    263c:	85 8d       	ldd	r24, Z+29	; 0x1d
    263e:	8f 3f       	cpi	r24, 0xFF	; 255
    2640:	21 f4       	brne	.+8      	; 0x264a <xQueueGenericSend+0xd4>
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	9b 81       	ldd	r25, Y+3	; 0x03
    2646:	fc 01       	movw	r30, r24
    2648:	15 8e       	std	Z+29, r1	; 0x1d
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	9b 81       	ldd	r25, Y+3	; 0x03
    264e:	fc 01       	movw	r30, r24
    2650:	86 8d       	ldd	r24, Z+30	; 0x1e
    2652:	8f 3f       	cpi	r24, 0xFF	; 255
    2654:	21 f4       	brne	.+8      	; 0x265e <xQueueGenericSend+0xe8>
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	9b 81       	ldd	r25, Y+3	; 0x03
    265a:	fc 01       	movw	r30, r24
    265c:	16 8e       	std	Z+30, r1	; 0x1e
    265e:	0f 90       	pop	r0
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	9e 01       	movw	r18, r28
    2664:	24 5f       	subi	r18, 0xF4	; 244
    2666:	3f 4f       	sbci	r19, 0xFF	; 255
    2668:	ce 01       	movw	r24, r28
    266a:	05 96       	adiw	r24, 0x05	; 5
    266c:	b9 01       	movw	r22, r18
    266e:	0e 94 13 1a 	call	0x3426	; 0x3426 <xTaskCheckForTimeOut>
    2672:	88 23       	and	r24, r24
    2674:	09 f5       	brne	.+66     	; 0x26b8 <xQueueGenericSend+0x142>
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	9b 81       	ldd	r25, Y+3	; 0x03
    267a:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <prvIsQueueFull>
    267e:	88 23       	and	r24, r24
    2680:	a1 f0       	breq	.+40     	; 0x26aa <xQueueGenericSend+0x134>
    2682:	2c 85       	ldd	r18, Y+12	; 0x0c
    2684:	3d 85       	ldd	r19, Y+13	; 0x0d
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	9b 81       	ldd	r25, Y+3	; 0x03
    268a:	08 96       	adiw	r24, 0x08	; 8
    268c:	b9 01       	movw	r22, r18
    268e:	0e 94 67 19 	call	0x32ce	; 0x32ce <vTaskPlaceOnEventList>
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	9b 81       	ldd	r25, Y+3	; 0x03
    2696:	0e 94 9b 14 	call	0x2936	; 0x2936 <prvUnlockQueue>
    269a:	0e 94 5d 17 	call	0x2eba	; 0x2eba <xTaskResumeAll>
    269e:	88 23       	and	r24, r24
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <xQueueGenericSend+0x12e>
    26a2:	7f cf       	rjmp	.-258    	; 0x25a2 <xQueueGenericSend+0x2c>
    26a4:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vPortYield>
    26a8:	7c cf       	rjmp	.-264    	; 0x25a2 <xQueueGenericSend+0x2c>
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	9b 81       	ldd	r25, Y+3	; 0x03
    26ae:	0e 94 9b 14 	call	0x2936	; 0x2936 <prvUnlockQueue>
    26b2:	0e 94 5d 17 	call	0x2eba	; 0x2eba <xTaskResumeAll>
    26b6:	75 cf       	rjmp	.-278    	; 0x25a2 <xQueueGenericSend+0x2c>
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	9b 81       	ldd	r25, Y+3	; 0x03
    26bc:	0e 94 9b 14 	call	0x2936	; 0x2936 <prvUnlockQueue>
    26c0:	0e 94 5d 17 	call	0x2eba	; 0x2eba <xTaskResumeAll>
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	2e 96       	adiw	r28, 0x0e	; 14
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	df 91       	pop	r29
    26d4:	cf 91       	pop	r28
    26d6:	08 95       	ret

000026d8 <xQueueGenericSendFromISR>:
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	2c 97       	sbiw	r28, 0x0c	; 12
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	9f 83       	std	Y+7, r25	; 0x07
    26ee:	8e 83       	std	Y+6, r24	; 0x06
    26f0:	79 87       	std	Y+9, r23	; 0x09
    26f2:	68 87       	std	Y+8, r22	; 0x08
    26f4:	5b 87       	std	Y+11, r21	; 0x0b
    26f6:	4a 87       	std	Y+10, r20	; 0x0a
    26f8:	2c 87       	std	Y+12, r18	; 0x0c
    26fa:	8e 81       	ldd	r24, Y+6	; 0x06
    26fc:	9f 81       	ldd	r25, Y+7	; 0x07
    26fe:	9b 83       	std	Y+3, r25	; 0x03
    2700:	8a 83       	std	Y+2, r24	; 0x02
    2702:	1c 82       	std	Y+4, r1	; 0x04
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	9b 81       	ldd	r25, Y+3	; 0x03
    2708:	fc 01       	movw	r30, r24
    270a:	22 8d       	ldd	r18, Z+26	; 0x1a
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	9b 81       	ldd	r25, Y+3	; 0x03
    2710:	fc 01       	movw	r30, r24
    2712:	83 8d       	ldd	r24, Z+27	; 0x1b
    2714:	28 17       	cp	r18, r24
    2716:	18 f0       	brcs	.+6      	; 0x271e <xQueueGenericSendFromISR+0x46>
    2718:	8c 85       	ldd	r24, Y+12	; 0x0c
    271a:	82 30       	cpi	r24, 0x02	; 2
    271c:	89 f5       	brne	.+98     	; 0x2780 <xQueueGenericSendFromISR+0xa8>
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	9b 81       	ldd	r25, Y+3	; 0x03
    2722:	fc 01       	movw	r30, r24
    2724:	86 8d       	ldd	r24, Z+30	; 0x1e
    2726:	8d 83       	std	Y+5, r24	; 0x05
    2728:	28 85       	ldd	r18, Y+8	; 0x08
    272a:	39 85       	ldd	r19, Y+9	; 0x09
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	4c 85       	ldd	r20, Y+12	; 0x0c
    2732:	b9 01       	movw	r22, r18
    2734:	0e 94 cb 13 	call	0x2796	; 0x2796 <prvCopyDataToQueue>
    2738:	8d 81       	ldd	r24, Y+5	; 0x05
    273a:	8f 3f       	cpi	r24, 0xFF	; 255
    273c:	b9 f4       	brne	.+46     	; 0x276c <xQueueGenericSendFromISR+0x94>
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	9b 81       	ldd	r25, Y+3	; 0x03
    2742:	fc 01       	movw	r30, r24
    2744:	81 89       	ldd	r24, Z+17	; 0x11
    2746:	88 23       	and	r24, r24
    2748:	c1 f0       	breq	.+48     	; 0x277a <xQueueGenericSendFromISR+0xa2>
    274a:	8a 81       	ldd	r24, Y+2	; 0x02
    274c:	9b 81       	ldd	r25, Y+3	; 0x03
    274e:	41 96       	adiw	r24, 0x11	; 17
    2750:	0e 94 8a 19 	call	0x3314	; 0x3314 <xTaskRemoveFromEventList>
    2754:	88 23       	and	r24, r24
    2756:	89 f0       	breq	.+34     	; 0x277a <xQueueGenericSendFromISR+0xa2>
    2758:	8a 85       	ldd	r24, Y+10	; 0x0a
    275a:	9b 85       	ldd	r25, Y+11	; 0x0b
    275c:	89 2b       	or	r24, r25
    275e:	69 f0       	breq	.+26     	; 0x277a <xQueueGenericSendFromISR+0xa2>
    2760:	8a 85       	ldd	r24, Y+10	; 0x0a
    2762:	9b 85       	ldd	r25, Y+11	; 0x0b
    2764:	21 e0       	ldi	r18, 0x01	; 1
    2766:	fc 01       	movw	r30, r24
    2768:	20 83       	st	Z, r18
    276a:	07 c0       	rjmp	.+14     	; 0x277a <xQueueGenericSendFromISR+0xa2>
    276c:	8d 81       	ldd	r24, Y+5	; 0x05
    276e:	8f 5f       	subi	r24, 0xFF	; 255
    2770:	28 2f       	mov	r18, r24
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	9b 81       	ldd	r25, Y+3	; 0x03
    2776:	fc 01       	movw	r30, r24
    2778:	26 8f       	std	Z+30, r18	; 0x1e
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	89 83       	std	Y+1, r24	; 0x01
    277e:	01 c0       	rjmp	.+2      	; 0x2782 <xQueueGenericSendFromISR+0xaa>
    2780:	19 82       	std	Y+1, r1	; 0x01
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	2c 96       	adiw	r28, 0x0c	; 12
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	08 95       	ret

00002796 <prvCopyDataToQueue>:
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
    279e:	27 97       	sbiw	r28, 0x07	; 7
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	9c 83       	std	Y+4, r25	; 0x04
    27ac:	8b 83       	std	Y+3, r24	; 0x03
    27ae:	7e 83       	std	Y+6, r23	; 0x06
    27b0:	6d 83       	std	Y+5, r22	; 0x05
    27b2:	4f 83       	std	Y+7, r20	; 0x07
    27b4:	19 82       	std	Y+1, r1	; 0x01
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	fc 01       	movw	r30, r24
    27bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    27be:	8a 83       	std	Y+2, r24	; 0x02
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	9c 81       	ldd	r25, Y+4	; 0x04
    27c4:	fc 01       	movw	r30, r24
    27c6:	84 8d       	ldd	r24, Z+28	; 0x1c
    27c8:	88 23       	and	r24, r24
    27ca:	b1 f4       	brne	.+44     	; 0x27f8 <prvCopyDataToQueue+0x62>
    27cc:	8b 81       	ldd	r24, Y+3	; 0x03
    27ce:	9c 81       	ldd	r25, Y+4	; 0x04
    27d0:	fc 01       	movw	r30, r24
    27d2:	80 81       	ld	r24, Z
    27d4:	91 81       	ldd	r25, Z+1	; 0x01
    27d6:	89 2b       	or	r24, r25
    27d8:	09 f0       	breq	.+2      	; 0x27dc <prvCopyDataToQueue+0x46>
    27da:	9c c0       	rjmp	.+312    	; 0x2914 <prvCopyDataToQueue+0x17e>
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	9c 81       	ldd	r25, Y+4	; 0x04
    27e0:	fc 01       	movw	r30, r24
    27e2:	82 81       	ldd	r24, Z+2	; 0x02
    27e4:	93 81       	ldd	r25, Z+3	; 0x03
    27e6:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <xTaskPriorityDisinherit>
    27ea:	89 83       	std	Y+1, r24	; 0x01
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	9c 81       	ldd	r25, Y+4	; 0x04
    27f0:	fc 01       	movw	r30, r24
    27f2:	13 82       	std	Z+3, r1	; 0x03
    27f4:	12 82       	std	Z+2, r1	; 0x02
    27f6:	8e c0       	rjmp	.+284    	; 0x2914 <prvCopyDataToQueue+0x17e>
    27f8:	8f 81       	ldd	r24, Y+7	; 0x07
    27fa:	88 23       	and	r24, r24
    27fc:	d9 f5       	brne	.+118    	; 0x2874 <prvCopyDataToQueue+0xde>
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	fc 01       	movw	r30, r24
    2804:	84 8d       	ldd	r24, Z+28	; 0x1c
    2806:	48 2f       	mov	r20, r24
    2808:	50 e0       	ldi	r21, 0x00	; 0
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	9c 81       	ldd	r25, Y+4	; 0x04
    280e:	fc 01       	movw	r30, r24
    2810:	84 81       	ldd	r24, Z+4	; 0x04
    2812:	95 81       	ldd	r25, Z+5	; 0x05
    2814:	2d 81       	ldd	r18, Y+5	; 0x05
    2816:	3e 81       	ldd	r19, Y+6	; 0x06
    2818:	b9 01       	movw	r22, r18
    281a:	0e 94 1b 21 	call	0x4236	; 0x4236 <memcpy>
    281e:	8b 81       	ldd	r24, Y+3	; 0x03
    2820:	9c 81       	ldd	r25, Y+4	; 0x04
    2822:	fc 01       	movw	r30, r24
    2824:	24 81       	ldd	r18, Z+4	; 0x04
    2826:	35 81       	ldd	r19, Z+5	; 0x05
    2828:	8b 81       	ldd	r24, Y+3	; 0x03
    282a:	9c 81       	ldd	r25, Y+4	; 0x04
    282c:	fc 01       	movw	r30, r24
    282e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2830:	88 2f       	mov	r24, r24
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	28 0f       	add	r18, r24
    2836:	39 1f       	adc	r19, r25
    2838:	8b 81       	ldd	r24, Y+3	; 0x03
    283a:	9c 81       	ldd	r25, Y+4	; 0x04
    283c:	fc 01       	movw	r30, r24
    283e:	35 83       	std	Z+5, r19	; 0x05
    2840:	24 83       	std	Z+4, r18	; 0x04
    2842:	8b 81       	ldd	r24, Y+3	; 0x03
    2844:	9c 81       	ldd	r25, Y+4	; 0x04
    2846:	fc 01       	movw	r30, r24
    2848:	24 81       	ldd	r18, Z+4	; 0x04
    284a:	35 81       	ldd	r19, Z+5	; 0x05
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	9c 81       	ldd	r25, Y+4	; 0x04
    2850:	fc 01       	movw	r30, r24
    2852:	82 81       	ldd	r24, Z+2	; 0x02
    2854:	93 81       	ldd	r25, Z+3	; 0x03
    2856:	28 17       	cp	r18, r24
    2858:	39 07       	cpc	r19, r25
    285a:	08 f4       	brcc	.+2      	; 0x285e <prvCopyDataToQueue+0xc8>
    285c:	5b c0       	rjmp	.+182    	; 0x2914 <prvCopyDataToQueue+0x17e>
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	9c 81       	ldd	r25, Y+4	; 0x04
    2862:	fc 01       	movw	r30, r24
    2864:	20 81       	ld	r18, Z
    2866:	31 81       	ldd	r19, Z+1	; 0x01
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	9c 81       	ldd	r25, Y+4	; 0x04
    286c:	fc 01       	movw	r30, r24
    286e:	35 83       	std	Z+5, r19	; 0x05
    2870:	24 83       	std	Z+4, r18	; 0x04
    2872:	50 c0       	rjmp	.+160    	; 0x2914 <prvCopyDataToQueue+0x17e>
    2874:	8b 81       	ldd	r24, Y+3	; 0x03
    2876:	9c 81       	ldd	r25, Y+4	; 0x04
    2878:	fc 01       	movw	r30, r24
    287a:	84 8d       	ldd	r24, Z+28	; 0x1c
    287c:	48 2f       	mov	r20, r24
    287e:	50 e0       	ldi	r21, 0x00	; 0
    2880:	8b 81       	ldd	r24, Y+3	; 0x03
    2882:	9c 81       	ldd	r25, Y+4	; 0x04
    2884:	fc 01       	movw	r30, r24
    2886:	86 81       	ldd	r24, Z+6	; 0x06
    2888:	97 81       	ldd	r25, Z+7	; 0x07
    288a:	2d 81       	ldd	r18, Y+5	; 0x05
    288c:	3e 81       	ldd	r19, Y+6	; 0x06
    288e:	b9 01       	movw	r22, r18
    2890:	0e 94 1b 21 	call	0x4236	; 0x4236 <memcpy>
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	9c 81       	ldd	r25, Y+4	; 0x04
    2898:	fc 01       	movw	r30, r24
    289a:	26 81       	ldd	r18, Z+6	; 0x06
    289c:	37 81       	ldd	r19, Z+7	; 0x07
    289e:	8b 81       	ldd	r24, Y+3	; 0x03
    28a0:	9c 81       	ldd	r25, Y+4	; 0x04
    28a2:	fc 01       	movw	r30, r24
    28a4:	84 8d       	ldd	r24, Z+28	; 0x1c
    28a6:	88 2f       	mov	r24, r24
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	91 95       	neg	r25
    28ac:	81 95       	neg	r24
    28ae:	91 09       	sbc	r25, r1
    28b0:	28 0f       	add	r18, r24
    28b2:	39 1f       	adc	r19, r25
    28b4:	8b 81       	ldd	r24, Y+3	; 0x03
    28b6:	9c 81       	ldd	r25, Y+4	; 0x04
    28b8:	fc 01       	movw	r30, r24
    28ba:	37 83       	std	Z+7, r19	; 0x07
    28bc:	26 83       	std	Z+6, r18	; 0x06
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	fc 01       	movw	r30, r24
    28c4:	26 81       	ldd	r18, Z+6	; 0x06
    28c6:	37 81       	ldd	r19, Z+7	; 0x07
    28c8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ca:	9c 81       	ldd	r25, Y+4	; 0x04
    28cc:	fc 01       	movw	r30, r24
    28ce:	80 81       	ld	r24, Z
    28d0:	91 81       	ldd	r25, Z+1	; 0x01
    28d2:	28 17       	cp	r18, r24
    28d4:	39 07       	cpc	r19, r25
    28d6:	a8 f4       	brcc	.+42     	; 0x2902 <prvCopyDataToQueue+0x16c>
    28d8:	8b 81       	ldd	r24, Y+3	; 0x03
    28da:	9c 81       	ldd	r25, Y+4	; 0x04
    28dc:	fc 01       	movw	r30, r24
    28de:	22 81       	ldd	r18, Z+2	; 0x02
    28e0:	33 81       	ldd	r19, Z+3	; 0x03
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	9c 81       	ldd	r25, Y+4	; 0x04
    28e6:	fc 01       	movw	r30, r24
    28e8:	84 8d       	ldd	r24, Z+28	; 0x1c
    28ea:	88 2f       	mov	r24, r24
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	91 95       	neg	r25
    28f0:	81 95       	neg	r24
    28f2:	91 09       	sbc	r25, r1
    28f4:	28 0f       	add	r18, r24
    28f6:	39 1f       	adc	r19, r25
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	9c 81       	ldd	r25, Y+4	; 0x04
    28fc:	fc 01       	movw	r30, r24
    28fe:	37 83       	std	Z+7, r19	; 0x07
    2900:	26 83       	std	Z+6, r18	; 0x06
    2902:	8f 81       	ldd	r24, Y+7	; 0x07
    2904:	82 30       	cpi	r24, 0x02	; 2
    2906:	31 f4       	brne	.+12     	; 0x2914 <prvCopyDataToQueue+0x17e>
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	88 23       	and	r24, r24
    290c:	19 f0       	breq	.+6      	; 0x2914 <prvCopyDataToQueue+0x17e>
    290e:	8a 81       	ldd	r24, Y+2	; 0x02
    2910:	81 50       	subi	r24, 0x01	; 1
    2912:	8a 83       	std	Y+2, r24	; 0x02
    2914:	8a 81       	ldd	r24, Y+2	; 0x02
    2916:	21 e0       	ldi	r18, 0x01	; 1
    2918:	28 0f       	add	r18, r24
    291a:	8b 81       	ldd	r24, Y+3	; 0x03
    291c:	9c 81       	ldd	r25, Y+4	; 0x04
    291e:	fc 01       	movw	r30, r24
    2920:	22 8f       	std	Z+26, r18	; 0x1a
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	27 96       	adiw	r28, 0x07	; 7
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	df 91       	pop	r29
    2932:	cf 91       	pop	r28
    2934:	08 95       	ret

00002936 <prvUnlockQueue>:
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	00 d0       	rcall	.+0      	; 0x293c <prvUnlockQueue+0x6>
    293c:	00 d0       	rcall	.+0      	; 0x293e <prvUnlockQueue+0x8>
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	9c 83       	std	Y+4, r25	; 0x04
    2944:	8b 83       	std	Y+3, r24	; 0x03
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	f8 94       	cli
    294a:	0f 92       	push	r0
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	9c 81       	ldd	r25, Y+4	; 0x04
    2950:	fc 01       	movw	r30, r24
    2952:	86 8d       	ldd	r24, Z+30	; 0x1e
    2954:	89 83       	std	Y+1, r24	; 0x01
    2956:	12 c0       	rjmp	.+36     	; 0x297c <prvUnlockQueue+0x46>
    2958:	8b 81       	ldd	r24, Y+3	; 0x03
    295a:	9c 81       	ldd	r25, Y+4	; 0x04
    295c:	fc 01       	movw	r30, r24
    295e:	81 89       	ldd	r24, Z+17	; 0x11
    2960:	88 23       	and	r24, r24
    2962:	81 f0       	breq	.+32     	; 0x2984 <prvUnlockQueue+0x4e>
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	9c 81       	ldd	r25, Y+4	; 0x04
    2968:	41 96       	adiw	r24, 0x11	; 17
    296a:	0e 94 8a 19 	call	0x3314	; 0x3314 <xTaskRemoveFromEventList>
    296e:	88 23       	and	r24, r24
    2970:	11 f0       	breq	.+4      	; 0x2976 <prvUnlockQueue+0x40>
    2972:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <vTaskMissedYield>
    2976:	89 81       	ldd	r24, Y+1	; 0x01
    2978:	81 50       	subi	r24, 0x01	; 1
    297a:	89 83       	std	Y+1, r24	; 0x01
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	18 16       	cp	r1, r24
    2980:	5c f3       	brlt	.-42     	; 0x2958 <prvUnlockQueue+0x22>
    2982:	01 c0       	rjmp	.+2      	; 0x2986 <prvUnlockQueue+0x50>
    2984:	00 00       	nop
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	9c 81       	ldd	r25, Y+4	; 0x04
    298a:	2f ef       	ldi	r18, 0xFF	; 255
    298c:	fc 01       	movw	r30, r24
    298e:	26 8f       	std	Z+30, r18	; 0x1e
    2990:	0f 90       	pop	r0
    2992:	0f be       	out	0x3f, r0	; 63
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	f8 94       	cli
    2998:	0f 92       	push	r0
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	9c 81       	ldd	r25, Y+4	; 0x04
    299e:	fc 01       	movw	r30, r24
    29a0:	85 8d       	ldd	r24, Z+29	; 0x1d
    29a2:	8a 83       	std	Y+2, r24	; 0x02
    29a4:	12 c0       	rjmp	.+36     	; 0x29ca <prvUnlockQueue+0x94>
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	9c 81       	ldd	r25, Y+4	; 0x04
    29aa:	fc 01       	movw	r30, r24
    29ac:	80 85       	ldd	r24, Z+8	; 0x08
    29ae:	88 23       	and	r24, r24
    29b0:	81 f0       	breq	.+32     	; 0x29d2 <prvUnlockQueue+0x9c>
    29b2:	8b 81       	ldd	r24, Y+3	; 0x03
    29b4:	9c 81       	ldd	r25, Y+4	; 0x04
    29b6:	08 96       	adiw	r24, 0x08	; 8
    29b8:	0e 94 8a 19 	call	0x3314	; 0x3314 <xTaskRemoveFromEventList>
    29bc:	88 23       	and	r24, r24
    29be:	11 f0       	breq	.+4      	; 0x29c4 <prvUnlockQueue+0x8e>
    29c0:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <vTaskMissedYield>
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	81 50       	subi	r24, 0x01	; 1
    29c8:	8a 83       	std	Y+2, r24	; 0x02
    29ca:	8a 81       	ldd	r24, Y+2	; 0x02
    29cc:	18 16       	cp	r1, r24
    29ce:	5c f3       	brlt	.-42     	; 0x29a6 <prvUnlockQueue+0x70>
    29d0:	01 c0       	rjmp	.+2      	; 0x29d4 <prvUnlockQueue+0x9e>
    29d2:	00 00       	nop
    29d4:	8b 81       	ldd	r24, Y+3	; 0x03
    29d6:	9c 81       	ldd	r25, Y+4	; 0x04
    29d8:	2f ef       	ldi	r18, 0xFF	; 255
    29da:	fc 01       	movw	r30, r24
    29dc:	25 8f       	std	Z+29, r18	; 0x1d
    29de:	0f 90       	pop	r0
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	00 00       	nop
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	08 95       	ret

000029f2 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    29f2:	cf 93       	push	r28
    29f4:	df 93       	push	r29
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <prvIsQueueFull+0x6>
    29f8:	1f 92       	push	r1
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	9b 83       	std	Y+3, r25	; 0x03
    2a00:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2a08:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a0c:	fc 01       	movw	r30, r24
    2a0e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2a10:	8a 81       	ldd	r24, Y+2	; 0x02
    2a12:	9b 81       	ldd	r25, Y+3	; 0x03
    2a14:	fc 01       	movw	r30, r24
    2a16:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a18:	28 17       	cp	r18, r24
    2a1a:	19 f4       	brne	.+6      	; 0x2a22 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    2a20:	01 c0       	rjmp	.+2      	; 0x2a24 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    2a22:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2a24:	0f 90       	pop	r0
    2a26:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
    2a34:	08 95       	ret

00002a36 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    2a36:	8f 92       	push	r8
    2a38:	9f 92       	push	r9
    2a3a:	af 92       	push	r10
    2a3c:	bf 92       	push	r11
    2a3e:	cf 92       	push	r12
    2a40:	df 92       	push	r13
    2a42:	ef 92       	push	r14
    2a44:	ff 92       	push	r15
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	60 97       	sbiw	r28, 0x10	; 16
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	9f 83       	std	Y+7, r25	; 0x07
    2a60:	8e 83       	std	Y+6, r24	; 0x06
    2a62:	79 87       	std	Y+9, r23	; 0x09
    2a64:	68 87       	std	Y+8, r22	; 0x08
    2a66:	5b 87       	std	Y+11, r21	; 0x0b
    2a68:	4a 87       	std	Y+10, r20	; 0x0a
    2a6a:	3d 87       	std	Y+13, r19	; 0x0d
    2a6c:	2c 87       	std	Y+12, r18	; 0x0c
    2a6e:	0e 87       	std	Y+14, r16	; 0x0e
    2a70:	f8 8a       	std	Y+16, r15	; 0x10
    2a72:	ef 86       	std	Y+15, r14	; 0x0f
    2a74:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a76:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a78:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <pvPortMalloc>
    2a7c:	9d 83       	std	Y+5, r25	; 0x05
    2a7e:	8c 83       	std	Y+4, r24	; 0x04
    2a80:	8c 81       	ldd	r24, Y+4	; 0x04
    2a82:	9d 81       	ldd	r25, Y+5	; 0x05
    2a84:	89 2b       	or	r24, r25
    2a86:	b9 f0       	breq	.+46     	; 0x2ab6 <xTaskCreate+0x80>
    2a88:	8c e2       	ldi	r24, 0x2C	; 44
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <pvPortMalloc>
    2a90:	9a 83       	std	Y+2, r25	; 0x02
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	9a 81       	ldd	r25, Y+2	; 0x02
    2a98:	89 2b       	or	r24, r25
    2a9a:	41 f0       	breq	.+16     	; 0x2aac <xTaskCreate+0x76>
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa0:	2c 81       	ldd	r18, Y+4	; 0x04
    2aa2:	3d 81       	ldd	r19, Y+5	; 0x05
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	30 8f       	std	Z+24, r19	; 0x18
    2aa8:	27 8b       	std	Z+23, r18	; 0x17
    2aaa:	07 c0       	rjmp	.+14     	; 0x2aba <xTaskCreate+0x84>
    2aac:	8c 81       	ldd	r24, Y+4	; 0x04
    2aae:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <vPortFree>
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <xTaskCreate+0x84>
    2ab6:	1a 82       	std	Y+2, r1	; 0x02
    2ab8:	19 82       	std	Y+1, r1	; 0x01
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
    2abc:	9a 81       	ldd	r25, Y+2	; 0x02
    2abe:	89 2b       	or	r24, r25
    2ac0:	09 f1       	breq	.+66     	; 0x2b04 <xTaskCreate+0xce>
    2ac2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ac4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ac6:	cc 01       	movw	r24, r24
    2ac8:	a0 e0       	ldi	r26, 0x00	; 0
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	09 81       	ldd	r16, Y+1	; 0x01
    2ace:	1a 81       	ldd	r17, Y+2	; 0x02
    2ad0:	4f 85       	ldd	r20, Y+15	; 0x0f
    2ad2:	58 89       	ldd	r21, Y+16	; 0x10
    2ad4:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ad6:	3d 85       	ldd	r19, Y+13	; 0x0d
    2ad8:	68 85       	ldd	r22, Y+8	; 0x08
    2ada:	79 85       	ldd	r23, Y+9	; 0x09
    2adc:	ee 81       	ldd	r30, Y+6	; 0x06
    2ade:	ff 81       	ldd	r31, Y+7	; 0x07
    2ae0:	81 2c       	mov	r8, r1
    2ae2:	91 2c       	mov	r9, r1
    2ae4:	58 01       	movw	r10, r16
    2ae6:	6a 01       	movw	r12, r20
    2ae8:	ee 84       	ldd	r14, Y+14	; 0x0e
    2aea:	89 01       	movw	r16, r18
    2aec:	9c 01       	movw	r18, r24
    2aee:	ad 01       	movw	r20, r26
    2af0:	cf 01       	movw	r24, r30
    2af2:	0e 94 98 15 	call	0x2b30	; 0x2b30 <prvInitialiseNewTask>
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	9a 81       	ldd	r25, Y+2	; 0x02
    2afa:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <prvAddNewTaskToReadyList>
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	8b 83       	std	Y+3, r24	; 0x03
    2b02:	02 c0       	rjmp	.+4      	; 0x2b08 <xTaskCreate+0xd2>
    2b04:	8f ef       	ldi	r24, 0xFF	; 255
    2b06:	8b 83       	std	Y+3, r24	; 0x03
    2b08:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0a:	60 96       	adiw	r28, 0x10	; 16
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	ff 90       	pop	r15
    2b20:	ef 90       	pop	r14
    2b22:	df 90       	pop	r13
    2b24:	cf 90       	pop	r12
    2b26:	bf 90       	pop	r11
    2b28:	af 90       	pop	r10
    2b2a:	9f 90       	pop	r9
    2b2c:	8f 90       	pop	r8
    2b2e:	08 95       	ret

00002b30 <prvInitialiseNewTask>:
    2b30:	8f 92       	push	r8
    2b32:	9f 92       	push	r9
    2b34:	af 92       	push	r10
    2b36:	bf 92       	push	r11
    2b38:	cf 92       	push	r12
    2b3a:	df 92       	push	r13
    2b3c:	ef 92       	push	r14
    2b3e:	0f 93       	push	r16
    2b40:	1f 93       	push	r17
    2b42:	cf 93       	push	r28
    2b44:	df 93       	push	r29
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	64 97       	sbiw	r28, 0x14	; 20
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	9d 83       	std	Y+5, r25	; 0x05
    2b58:	8c 83       	std	Y+4, r24	; 0x04
    2b5a:	7f 83       	std	Y+7, r23	; 0x07
    2b5c:	6e 83       	std	Y+6, r22	; 0x06
    2b5e:	28 87       	std	Y+8, r18	; 0x08
    2b60:	39 87       	std	Y+9, r19	; 0x09
    2b62:	4a 87       	std	Y+10, r20	; 0x0a
    2b64:	5b 87       	std	Y+11, r21	; 0x0b
    2b66:	1d 87       	std	Y+13, r17	; 0x0d
    2b68:	0c 87       	std	Y+12, r16	; 0x0c
    2b6a:	ee 86       	std	Y+14, r14	; 0x0e
    2b6c:	d8 8a       	std	Y+16, r13	; 0x10
    2b6e:	cf 86       	std	Y+15, r12	; 0x0f
    2b70:	ba 8a       	std	Y+18, r11	; 0x12
    2b72:	a9 8a       	std	Y+17, r10	; 0x11
    2b74:	9c 8a       	std	Y+20, r9	; 0x14
    2b76:	8b 8a       	std	Y+19, r8	; 0x13
    2b78:	28 85       	ldd	r18, Y+8	; 0x08
    2b7a:	39 85       	ldd	r19, Y+9	; 0x09
    2b7c:	89 89       	ldd	r24, Y+17	; 0x11
    2b7e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b80:	fc 01       	movw	r30, r24
    2b82:	87 89       	ldd	r24, Z+23	; 0x17
    2b84:	90 8d       	ldd	r25, Z+24	; 0x18
    2b86:	a9 01       	movw	r20, r18
    2b88:	65 ea       	ldi	r22, 0xA5	; 165
    2b8a:	70 e0       	ldi	r23, 0x00	; 0
    2b8c:	0e 94 24 21 	call	0x4248	; 0x4248 <memset>
    2b90:	89 89       	ldd	r24, Y+17	; 0x11
    2b92:	9a 89       	ldd	r25, Y+18	; 0x12
    2b94:	fc 01       	movw	r30, r24
    2b96:	27 89       	ldd	r18, Z+23	; 0x17
    2b98:	30 8d       	ldd	r19, Z+24	; 0x18
    2b9a:	88 85       	ldd	r24, Y+8	; 0x08
    2b9c:	99 85       	ldd	r25, Y+9	; 0x09
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	82 0f       	add	r24, r18
    2ba2:	93 1f       	adc	r25, r19
    2ba4:	9b 83       	std	Y+3, r25	; 0x03
    2ba6:	8a 83       	std	Y+2, r24	; 0x02
    2ba8:	19 82       	std	Y+1, r1	; 0x01
    2baa:	21 c0       	rjmp	.+66     	; 0x2bee <prvInitialiseNewTask+0xbe>
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	88 2f       	mov	r24, r24
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	29 81       	ldd	r18, Y+1	; 0x01
    2bb4:	22 2f       	mov	r18, r18
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	4e 81       	ldd	r20, Y+6	; 0x06
    2bba:	5f 81       	ldd	r21, Y+7	; 0x07
    2bbc:	24 0f       	add	r18, r20
    2bbe:	35 1f       	adc	r19, r21
    2bc0:	f9 01       	movw	r30, r18
    2bc2:	40 81       	ld	r20, Z
    2bc4:	29 89       	ldd	r18, Y+17	; 0x11
    2bc6:	3a 89       	ldd	r19, Y+18	; 0x12
    2bc8:	82 0f       	add	r24, r18
    2bca:	93 1f       	adc	r25, r19
    2bcc:	49 96       	adiw	r24, 0x19	; 25
    2bce:	fc 01       	movw	r30, r24
    2bd0:	40 83       	st	Z, r20
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	88 2f       	mov	r24, r24
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	2e 81       	ldd	r18, Y+6	; 0x06
    2bda:	3f 81       	ldd	r19, Y+7	; 0x07
    2bdc:	82 0f       	add	r24, r18
    2bde:	93 1f       	adc	r25, r19
    2be0:	fc 01       	movw	r30, r24
    2be2:	80 81       	ld	r24, Z
    2be4:	88 23       	and	r24, r24
    2be6:	39 f0       	breq	.+14     	; 0x2bf6 <prvInitialiseNewTask+0xc6>
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	8f 5f       	subi	r24, 0xFF	; 255
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	88 30       	cpi	r24, 0x08	; 8
    2bf2:	e0 f2       	brcs	.-72     	; 0x2bac <prvInitialiseNewTask+0x7c>
    2bf4:	01 c0       	rjmp	.+2      	; 0x2bf8 <prvInitialiseNewTask+0xc8>
    2bf6:	00 00       	nop
    2bf8:	89 89       	ldd	r24, Y+17	; 0x11
    2bfa:	9a 89       	ldd	r25, Y+18	; 0x12
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	10 a2       	std	Z+32, r1	; 0x20
    2c00:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c02:	84 30       	cpi	r24, 0x04	; 4
    2c04:	10 f0       	brcs	.+4      	; 0x2c0a <prvInitialiseNewTask+0xda>
    2c06:	83 e0       	ldi	r24, 0x03	; 3
    2c08:	8e 87       	std	Y+14, r24	; 0x0e
    2c0a:	89 89       	ldd	r24, Y+17	; 0x11
    2c0c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c0e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2c10:	fc 01       	movw	r30, r24
    2c12:	26 8b       	std	Z+22, r18	; 0x16
    2c14:	89 89       	ldd	r24, Y+17	; 0x11
    2c16:	9a 89       	ldd	r25, Y+18	; 0x12
    2c18:	2e 85       	ldd	r18, Y+14	; 0x0e
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	23 a3       	std	Z+35, r18	; 0x23
    2c1e:	89 89       	ldd	r24, Y+17	; 0x11
    2c20:	9a 89       	ldd	r25, Y+18	; 0x12
    2c22:	fc 01       	movw	r30, r24
    2c24:	14 a2       	std	Z+36, r1	; 0x24
    2c26:	89 89       	ldd	r24, Y+17	; 0x11
    2c28:	9a 89       	ldd	r25, Y+18	; 0x12
    2c2a:	02 96       	adiw	r24, 0x02	; 2
    2c2c:	0e 94 1f 0a 	call	0x143e	; 0x143e <vListInitialiseItem>
    2c30:	89 89       	ldd	r24, Y+17	; 0x11
    2c32:	9a 89       	ldd	r25, Y+18	; 0x12
    2c34:	0c 96       	adiw	r24, 0x0c	; 12
    2c36:	0e 94 1f 0a 	call	0x143e	; 0x143e <vListInitialiseItem>
    2c3a:	89 89       	ldd	r24, Y+17	; 0x11
    2c3c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c3e:	29 89       	ldd	r18, Y+17	; 0x11
    2c40:	3a 89       	ldd	r19, Y+18	; 0x12
    2c42:	fc 01       	movw	r30, r24
    2c44:	31 87       	std	Z+9, r19	; 0x09
    2c46:	20 87       	std	Z+8, r18	; 0x08
    2c48:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c4a:	88 2f       	mov	r24, r24
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	24 e0       	ldi	r18, 0x04	; 4
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	28 1b       	sub	r18, r24
    2c54:	39 0b       	sbc	r19, r25
    2c56:	89 89       	ldd	r24, Y+17	; 0x11
    2c58:	9a 89       	ldd	r25, Y+18	; 0x12
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	35 87       	std	Z+13, r19	; 0x0d
    2c5e:	24 87       	std	Z+12, r18	; 0x0c
    2c60:	89 89       	ldd	r24, Y+17	; 0x11
    2c62:	9a 89       	ldd	r25, Y+18	; 0x12
    2c64:	29 89       	ldd	r18, Y+17	; 0x11
    2c66:	3a 89       	ldd	r19, Y+18	; 0x12
    2c68:	fc 01       	movw	r30, r24
    2c6a:	33 8b       	std	Z+19, r19	; 0x13
    2c6c:	22 8b       	std	Z+18, r18	; 0x12
    2c6e:	89 89       	ldd	r24, Y+17	; 0x11
    2c70:	9a 89       	ldd	r25, Y+18	; 0x12
    2c72:	fc 01       	movw	r30, r24
    2c74:	16 a2       	std	Z+38, r1	; 0x26
    2c76:	15 a2       	std	Z+37, r1	; 0x25
    2c78:	89 89       	ldd	r24, Y+17	; 0x11
    2c7a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	17 a2       	std	Z+39, r1	; 0x27
    2c80:	10 a6       	std	Z+40, r1	; 0x28
    2c82:	11 a6       	std	Z+41, r1	; 0x29
    2c84:	12 a6       	std	Z+42, r1	; 0x2a
    2c86:	89 89       	ldd	r24, Y+17	; 0x11
    2c88:	9a 89       	ldd	r25, Y+18	; 0x12
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	13 a6       	std	Z+43, r1	; 0x2b
    2c8e:	4c 85       	ldd	r20, Y+12	; 0x0c
    2c90:	5d 85       	ldd	r21, Y+13	; 0x0d
    2c92:	2c 81       	ldd	r18, Y+4	; 0x04
    2c94:	3d 81       	ldd	r19, Y+5	; 0x05
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9a:	b9 01       	movw	r22, r18
    2c9c:	0e 94 4f 0b 	call	0x169e	; 0x169e <pxPortInitialiseStack>
    2ca0:	9c 01       	movw	r18, r24
    2ca2:	89 89       	ldd	r24, Y+17	; 0x11
    2ca4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	31 83       	std	Z+1, r19	; 0x01
    2caa:	20 83       	st	Z, r18
    2cac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cae:	98 89       	ldd	r25, Y+16	; 0x10
    2cb0:	89 2b       	or	r24, r25
    2cb2:	39 f0       	breq	.+14     	; 0x2cc2 <prvInitialiseNewTask+0x192>
    2cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cb6:	98 89       	ldd	r25, Y+16	; 0x10
    2cb8:	29 89       	ldd	r18, Y+17	; 0x11
    2cba:	3a 89       	ldd	r19, Y+18	; 0x12
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	31 83       	std	Z+1, r19	; 0x01
    2cc0:	20 83       	st	Z, r18
    2cc2:	00 00       	nop
    2cc4:	64 96       	adiw	r28, 0x14	; 20
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	1f 91       	pop	r17
    2cd6:	0f 91       	pop	r16
    2cd8:	ef 90       	pop	r14
    2cda:	df 90       	pop	r13
    2cdc:	cf 90       	pop	r12
    2cde:	bf 90       	pop	r11
    2ce0:	af 90       	pop	r10
    2ce2:	9f 90       	pop	r9
    2ce4:	8f 90       	pop	r8
    2ce6:	08 95       	ret

00002ce8 <prvAddNewTaskToReadyList>:
    2ce8:	cf 93       	push	r28
    2cea:	df 93       	push	r29
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <prvAddNewTaskToReadyList+0x6>
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	9a 83       	std	Y+2, r25	; 0x02
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	0f 92       	push	r0
    2cfc:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <uxCurrentNumberOfTasks>
    2d00:	8f 5f       	subi	r24, 0xFF	; 255
    2d02:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <uxCurrentNumberOfTasks>
    2d06:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    2d0a:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    2d0e:	89 2b       	or	r24, r25
    2d10:	69 f4       	brne	.+26     	; 0x2d2c <prvAddNewTaskToReadyList+0x44>
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	9a 81       	ldd	r25, Y+2	; 0x02
    2d16:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <pxCurrentTCB+0x1>
    2d1a:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <pxCurrentTCB>
    2d1e:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <uxCurrentNumberOfTasks>
    2d22:	81 30       	cpi	r24, 0x01	; 1
    2d24:	c9 f4       	brne	.+50     	; 0x2d58 <prvAddNewTaskToReadyList+0x70>
    2d26:	0e 94 98 1a 	call	0x3530	; 0x3530 <prvInitialiseTaskLists>
    2d2a:	16 c0       	rjmp	.+44     	; 0x2d58 <prvAddNewTaskToReadyList+0x70>
    2d2c:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <xSchedulerRunning>
    2d30:	88 23       	and	r24, r24
    2d32:	91 f4       	brne	.+36     	; 0x2d58 <prvAddNewTaskToReadyList+0x70>
    2d34:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    2d38:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	26 89       	ldd	r18, Z+22	; 0x16
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
    2d42:	9a 81       	ldd	r25, Y+2	; 0x02
    2d44:	fc 01       	movw	r30, r24
    2d46:	86 89       	ldd	r24, Z+22	; 0x16
    2d48:	82 17       	cp	r24, r18
    2d4a:	30 f0       	brcs	.+12     	; 0x2d58 <prvAddNewTaskToReadyList+0x70>
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d50:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <pxCurrentTCB+0x1>
    2d54:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <pxCurrentTCB>
    2d58:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <uxTaskNumber>
    2d5c:	8f 5f       	subi	r24, 0xFF	; 255
    2d5e:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <uxTaskNumber>
    2d62:	20 91 a6 07 	lds	r18, 0x07A6	; 0x8007a6 <uxTaskNumber>
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	21 a3       	std	Z+33, r18	; 0x21
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	9a 81       	ldd	r25, Y+2	; 0x02
    2d72:	fc 01       	movw	r30, r24
    2d74:	96 89       	ldd	r25, Z+22	; 0x16
    2d76:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    2d7a:	89 17       	cp	r24, r25
    2d7c:	30 f4       	brcc	.+12     	; 0x2d8a <prvAddNewTaskToReadyList+0xa2>
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	9a 81       	ldd	r25, Y+2	; 0x02
    2d82:	fc 01       	movw	r30, r24
    2d84:	86 89       	ldd	r24, Z+22	; 0x16
    2d86:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8e:	ac 01       	movw	r20, r24
    2d90:	4e 5f       	subi	r20, 0xFE	; 254
    2d92:	5f 4f       	sbci	r21, 0xFF	; 255
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	9a 81       	ldd	r25, Y+2	; 0x02
    2d98:	fc 01       	movw	r30, r24
    2d9a:	86 89       	ldd	r24, Z+22	; 0x16
    2d9c:	28 2f       	mov	r18, r24
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	c9 01       	movw	r24, r18
    2da2:	88 0f       	add	r24, r24
    2da4:	99 1f       	adc	r25, r25
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	88 0f       	add	r24, r24
    2dac:	99 1f       	adc	r25, r25
    2dae:	82 0f       	add	r24, r18
    2db0:	93 1f       	adc	r25, r19
    2db2:	8f 5a       	subi	r24, 0xAF	; 175
    2db4:	98 4f       	sbci	r25, 0xF8	; 248
    2db6:	ba 01       	movw	r22, r20
    2db8:	0e 94 31 0a 	call	0x1462	; 0x1462 <vListInsertEnd>
    2dbc:	0f 90       	pop	r0
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <xSchedulerRunning>
    2dc4:	88 23       	and	r24, r24
    2dc6:	71 f0       	breq	.+28     	; 0x2de4 <prvAddNewTaskToReadyList+0xfc>
    2dc8:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    2dcc:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	26 89       	ldd	r18, Z+22	; 0x16
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd8:	fc 01       	movw	r30, r24
    2dda:	86 89       	ldd	r24, Z+22	; 0x16
    2ddc:	28 17       	cp	r18, r24
    2dde:	10 f4       	brcc	.+4      	; 0x2de4 <prvAddNewTaskToReadyList+0xfc>
    2de0:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vPortYield>
    2de4:	00 00       	nop
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	df 91       	pop	r29
    2dec:	cf 91       	pop	r28
    2dee:	08 95       	ret

00002df0 <vTaskDelay>:
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	00 d0       	rcall	.+0      	; 0x2df6 <vTaskDelay+0x6>
    2df6:	1f 92       	push	r1
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    2dfc:	9b 83       	std	Y+3, r25	; 0x03
    2dfe:	8a 83       	std	Y+2, r24	; 0x02
    2e00:	19 82       	std	Y+1, r1	; 0x01
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	9b 81       	ldd	r25, Y+3	; 0x03
    2e06:	89 2b       	or	r24, r25
    2e08:	51 f0       	breq	.+20     	; 0x2e1e <vTaskDelay+0x2e>
    2e0a:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <vTaskSuspendAll>
    2e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e10:	9b 81       	ldd	r25, Y+3	; 0x03
    2e12:	60 e0       	ldi	r22, 0x00	; 0
    2e14:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <prvAddCurrentTaskToDelayedList>
    2e18:	0e 94 5d 17 	call	0x2eba	; 0x2eba <xTaskResumeAll>
    2e1c:	89 83       	std	Y+1, r24	; 0x01
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	88 23       	and	r24, r24
    2e22:	11 f4       	brne	.+4      	; 0x2e28 <vTaskDelay+0x38>
    2e24:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vPortYield>
    2e28:	00 00       	nop
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	df 91       	pop	r29
    2e32:	cf 91       	pop	r28
    2e34:	08 95       	ret

00002e36 <vTaskStartScheduler>:
    2e36:	ef 92       	push	r14
    2e38:	ff 92       	push	r15
    2e3a:	0f 93       	push	r16
    2e3c:	cf 93       	push	r28
    2e3e:	df 93       	push	r29
    2e40:	1f 92       	push	r1
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	0f 2e       	mov	r0, r31
    2e48:	f9 ea       	ldi	r31, 0xA9	; 169
    2e4a:	ef 2e       	mov	r14, r31
    2e4c:	f7 e0       	ldi	r31, 0x07	; 7
    2e4e:	ff 2e       	mov	r15, r31
    2e50:	f0 2d       	mov	r31, r0
    2e52:	00 e0       	ldi	r16, 0x00	; 0
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	45 e5       	ldi	r20, 0x55	; 85
    2e5a:	50 e0       	ldi	r21, 0x00	; 0
    2e5c:	6a e4       	ldi	r22, 0x4A	; 74
    2e5e:	71 e0       	ldi	r23, 0x01	; 1
    2e60:	86 e8       	ldi	r24, 0x86	; 134
    2e62:	9a e1       	ldi	r25, 0x1A	; 26
    2e64:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <xTaskCreate>
    2e68:	89 83       	std	Y+1, r24	; 0x01
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	81 30       	cpi	r24, 0x01	; 1
    2e6e:	81 f4       	brne	.+32     	; 0x2e90 <vTaskStartScheduler+0x5a>
    2e70:	f8 94       	cli
    2e72:	8f ef       	ldi	r24, 0xFF	; 255
    2e74:	9f ef       	ldi	r25, 0xFF	; 255
    2e76:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    2e7a:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xSchedulerRunning>
    2e84:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <xTickCount+0x1>
    2e88:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <xTickCount>
    2e8c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <xPortStartScheduler>
    2e90:	00 00       	nop
    2e92:	0f 90       	pop	r0
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	0f 91       	pop	r16
    2e9a:	ff 90       	pop	r15
    2e9c:	ef 90       	pop	r14
    2e9e:	08 95       	ret

00002ea0 <vTaskSuspendAll>:
    2ea0:	cf 93       	push	r28
    2ea2:	df 93       	push	r29
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    2eac:	8f 5f       	subi	r24, 0xFF	; 255
    2eae:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <uxSchedulerSuspended>
    2eb2:	00 00       	nop
    2eb4:	df 91       	pop	r29
    2eb6:	cf 91       	pop	r28
    2eb8:	08 95       	ret

00002eba <xTaskResumeAll>:
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	00 d0       	rcall	.+0      	; 0x2ec0 <xTaskResumeAll+0x6>
    2ec0:	00 d0       	rcall	.+0      	; 0x2ec2 <xTaskResumeAll+0x8>
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
    2ec6:	1a 82       	std	Y+2, r1	; 0x02
    2ec8:	19 82       	std	Y+1, r1	; 0x01
    2eca:	1b 82       	std	Y+3, r1	; 0x03
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	f8 94       	cli
    2ed0:	0f 92       	push	r0
    2ed2:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    2ed6:	81 50       	subi	r24, 0x01	; 1
    2ed8:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <uxSchedulerSuspended>
    2edc:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    2ee0:	88 23       	and	r24, r24
    2ee2:	09 f0       	breq	.+2      	; 0x2ee6 <xTaskResumeAll+0x2c>
    2ee4:	77 c0       	rjmp	.+238    	; 0x2fd4 <xTaskResumeAll+0x11a>
    2ee6:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <uxCurrentNumberOfTasks>
    2eea:	88 23       	and	r24, r24
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <xTaskResumeAll+0x36>
    2eee:	72 c0       	rjmp	.+228    	; 0x2fd4 <xTaskResumeAll+0x11a>
    2ef0:	49 c0       	rjmp	.+146    	; 0x2f84 <xTaskResumeAll+0xca>
    2ef2:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <xPendingReadyList+0x5>
    2ef6:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <xPendingReadyList+0x6>
    2efa:	fc 01       	movw	r30, r24
    2efc:	86 81       	ldd	r24, Z+6	; 0x06
    2efe:	97 81       	ldd	r25, Z+7	; 0x07
    2f00:	9a 83       	std	Y+2, r25	; 0x02
    2f02:	89 83       	std	Y+1, r24	; 0x01
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
    2f06:	9a 81       	ldd	r25, Y+2	; 0x02
    2f08:	0c 96       	adiw	r24, 0x0c	; 12
    2f0a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <uxListRemove>
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	9a 81       	ldd	r25, Y+2	; 0x02
    2f12:	02 96       	adiw	r24, 0x02	; 2
    2f14:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <uxListRemove>
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1c:	fc 01       	movw	r30, r24
    2f1e:	96 89       	ldd	r25, Z+22	; 0x16
    2f20:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    2f24:	89 17       	cp	r24, r25
    2f26:	30 f4       	brcc	.+12     	; 0x2f34 <xTaskResumeAll+0x7a>
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	86 89       	ldd	r24, Z+22	; 0x16
    2f30:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	9a 81       	ldd	r25, Y+2	; 0x02
    2f38:	ac 01       	movw	r20, r24
    2f3a:	4e 5f       	subi	r20, 0xFE	; 254
    2f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	9a 81       	ldd	r25, Y+2	; 0x02
    2f42:	fc 01       	movw	r30, r24
    2f44:	86 89       	ldd	r24, Z+22	; 0x16
    2f46:	28 2f       	mov	r18, r24
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	c9 01       	movw	r24, r18
    2f4c:	88 0f       	add	r24, r24
    2f4e:	99 1f       	adc	r25, r25
    2f50:	88 0f       	add	r24, r24
    2f52:	99 1f       	adc	r25, r25
    2f54:	88 0f       	add	r24, r24
    2f56:	99 1f       	adc	r25, r25
    2f58:	82 0f       	add	r24, r18
    2f5a:	93 1f       	adc	r25, r19
    2f5c:	8f 5a       	subi	r24, 0xAF	; 175
    2f5e:	98 4f       	sbci	r25, 0xF8	; 248
    2f60:	ba 01       	movw	r22, r20
    2f62:	0e 94 31 0a 	call	0x1462	; 0x1462 <vListInsertEnd>
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	26 89       	ldd	r18, Z+22	; 0x16
    2f6e:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    2f72:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    2f76:	fc 01       	movw	r30, r24
    2f78:	86 89       	ldd	r24, Z+22	; 0x16
    2f7a:	28 17       	cp	r18, r24
    2f7c:	18 f0       	brcs	.+6      	; 0x2f84 <xTaskResumeAll+0xca>
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xYieldPending>
    2f84:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xPendingReadyList>
    2f88:	88 23       	and	r24, r24
    2f8a:	09 f0       	breq	.+2      	; 0x2f8e <xTaskResumeAll+0xd4>
    2f8c:	b2 cf       	rjmp	.-156    	; 0x2ef2 <xTaskResumeAll+0x38>
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	9a 81       	ldd	r25, Y+2	; 0x02
    2f92:	89 2b       	or	r24, r25
    2f94:	11 f0       	breq	.+4      	; 0x2f9a <xTaskResumeAll+0xe0>
    2f96:	0e 94 2f 1b 	call	0x365e	; 0x365e <prvResetNextTaskUnblockTime>
    2f9a:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <uxPendedTicks>
    2f9e:	8c 83       	std	Y+4, r24	; 0x04
    2fa0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa2:	88 23       	and	r24, r24
    2fa4:	79 f0       	breq	.+30     	; 0x2fc4 <xTaskResumeAll+0x10a>
    2fa6:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <xTaskIncrementTick>
    2faa:	88 23       	and	r24, r24
    2fac:	19 f0       	breq	.+6      	; 0x2fb4 <xTaskResumeAll+0xfa>
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xYieldPending>
    2fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb6:	81 50       	subi	r24, 0x01	; 1
    2fb8:	8c 83       	std	Y+4, r24	; 0x04
    2fba:	8c 81       	ldd	r24, Y+4	; 0x04
    2fbc:	88 23       	and	r24, r24
    2fbe:	99 f7       	brne	.-26     	; 0x2fa6 <xTaskResumeAll+0xec>
    2fc0:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <uxPendedTicks>
    2fc4:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <xYieldPending>
    2fc8:	88 23       	and	r24, r24
    2fca:	21 f0       	breq	.+8      	; 0x2fd4 <xTaskResumeAll+0x11a>
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	8b 83       	std	Y+3, r24	; 0x03
    2fd0:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vPortYield>
    2fd4:	0f 90       	pop	r0
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	df 91       	pop	r29
    2fe4:	cf 91       	pop	r28
    2fe6:	08 95       	ret

00002fe8 <xTaskIncrementTick>:
    2fe8:	cf 93       	push	r28
    2fea:	df 93       	push	r29
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	29 97       	sbiw	r28, 0x09	; 9
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	f8 94       	cli
    2ff6:	de bf       	out	0x3e, r29	; 62
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	cd bf       	out	0x3d, r28	; 61
    2ffc:	19 82       	std	Y+1, r1	; 0x01
    2ffe:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    3002:	88 23       	and	r24, r24
    3004:	09 f0       	breq	.+2      	; 0x3008 <xTaskIncrementTick+0x20>
    3006:	c8 c0       	rjmp	.+400    	; 0x3198 <xTaskIncrementTick+0x1b0>
    3008:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <xTickCount>
    300c:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    3010:	01 96       	adiw	r24, 0x01	; 1
    3012:	9b 83       	std	Y+3, r25	; 0x03
    3014:	8a 83       	std	Y+2, r24	; 0x02
    3016:	8a 81       	ldd	r24, Y+2	; 0x02
    3018:	9b 81       	ldd	r25, Y+3	; 0x03
    301a:	90 93 a0 07 	sts	0x07A0, r25	; 0x8007a0 <xTickCount+0x1>
    301e:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <xTickCount>
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	9b 81       	ldd	r25, Y+3	; 0x03
    3026:	89 2b       	or	r24, r25
    3028:	d9 f4       	brne	.+54     	; 0x3060 <xTaskIncrementTick+0x78>
    302a:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    302e:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    3032:	9d 83       	std	Y+5, r25	; 0x05
    3034:	8c 83       	std	Y+4, r24	; 0x04
    3036:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <pxOverflowDelayedTaskList>
    303a:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <pxOverflowDelayedTaskList+0x1>
    303e:	90 93 88 07 	sts	0x0788, r25	; 0x800788 <pxDelayedTaskList+0x1>
    3042:	80 93 87 07 	sts	0x0787, r24	; 0x800787 <pxDelayedTaskList>
    3046:	8c 81       	ldd	r24, Y+4	; 0x04
    3048:	9d 81       	ldd	r25, Y+5	; 0x05
    304a:	90 93 8a 07 	sts	0x078A, r25	; 0x80078a <pxOverflowDelayedTaskList+0x1>
    304e:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <pxOverflowDelayedTaskList>
    3052:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <xNumOfOverflows>
    3056:	8f 5f       	subi	r24, 0xFF	; 255
    3058:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <xNumOfOverflows>
    305c:	0e 94 2f 1b 	call	0x365e	; 0x365e <prvResetNextTaskUnblockTime>
    3060:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <xNextTaskUnblockTime>
    3064:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3068:	2a 81       	ldd	r18, Y+2	; 0x02
    306a:	3b 81       	ldd	r19, Y+3	; 0x03
    306c:	28 17       	cp	r18, r24
    306e:	39 07       	cpc	r19, r25
    3070:	08 f4       	brcc	.+2      	; 0x3074 <xTaskIncrementTick+0x8c>
    3072:	78 c0       	rjmp	.+240    	; 0x3164 <xTaskIncrementTick+0x17c>
    3074:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    3078:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    307c:	fc 01       	movw	r30, r24
    307e:	80 81       	ld	r24, Z
    3080:	88 23       	and	r24, r24
    3082:	39 f4       	brne	.+14     	; 0x3092 <xTaskIncrementTick+0xaa>
    3084:	8f ef       	ldi	r24, 0xFF	; 255
    3086:	9f ef       	ldi	r25, 0xFF	; 255
    3088:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    308c:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>
    3090:	69 c0       	rjmp	.+210    	; 0x3164 <xTaskIncrementTick+0x17c>
    3092:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    3096:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    309a:	fc 01       	movw	r30, r24
    309c:	85 81       	ldd	r24, Z+5	; 0x05
    309e:	96 81       	ldd	r25, Z+6	; 0x06
    30a0:	fc 01       	movw	r30, r24
    30a2:	86 81       	ldd	r24, Z+6	; 0x06
    30a4:	97 81       	ldd	r25, Z+7	; 0x07
    30a6:	9f 83       	std	Y+7, r25	; 0x07
    30a8:	8e 83       	std	Y+6, r24	; 0x06
    30aa:	8e 81       	ldd	r24, Y+6	; 0x06
    30ac:	9f 81       	ldd	r25, Y+7	; 0x07
    30ae:	fc 01       	movw	r30, r24
    30b0:	82 81       	ldd	r24, Z+2	; 0x02
    30b2:	93 81       	ldd	r25, Z+3	; 0x03
    30b4:	99 87       	std	Y+9, r25	; 0x09
    30b6:	88 87       	std	Y+8, r24	; 0x08
    30b8:	2a 81       	ldd	r18, Y+2	; 0x02
    30ba:	3b 81       	ldd	r19, Y+3	; 0x03
    30bc:	88 85       	ldd	r24, Y+8	; 0x08
    30be:	99 85       	ldd	r25, Y+9	; 0x09
    30c0:	28 17       	cp	r18, r24
    30c2:	39 07       	cpc	r19, r25
    30c4:	38 f4       	brcc	.+14     	; 0x30d4 <xTaskIncrementTick+0xec>
    30c6:	88 85       	ldd	r24, Y+8	; 0x08
    30c8:	99 85       	ldd	r25, Y+9	; 0x09
    30ca:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    30ce:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>
    30d2:	48 c0       	rjmp	.+144    	; 0x3164 <xTaskIncrementTick+0x17c>
    30d4:	8e 81       	ldd	r24, Y+6	; 0x06
    30d6:	9f 81       	ldd	r25, Y+7	; 0x07
    30d8:	02 96       	adiw	r24, 0x02	; 2
    30da:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <uxListRemove>
    30de:	8e 81       	ldd	r24, Y+6	; 0x06
    30e0:	9f 81       	ldd	r25, Y+7	; 0x07
    30e2:	fc 01       	movw	r30, r24
    30e4:	84 89       	ldd	r24, Z+20	; 0x14
    30e6:	95 89       	ldd	r25, Z+21	; 0x15
    30e8:	89 2b       	or	r24, r25
    30ea:	29 f0       	breq	.+10     	; 0x30f6 <xTaskIncrementTick+0x10e>
    30ec:	8e 81       	ldd	r24, Y+6	; 0x06
    30ee:	9f 81       	ldd	r25, Y+7	; 0x07
    30f0:	0c 96       	adiw	r24, 0x0c	; 12
    30f2:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <uxListRemove>
    30f6:	8e 81       	ldd	r24, Y+6	; 0x06
    30f8:	9f 81       	ldd	r25, Y+7	; 0x07
    30fa:	fc 01       	movw	r30, r24
    30fc:	96 89       	ldd	r25, Z+22	; 0x16
    30fe:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    3102:	89 17       	cp	r24, r25
    3104:	30 f4       	brcc	.+12     	; 0x3112 <xTaskIncrementTick+0x12a>
    3106:	8e 81       	ldd	r24, Y+6	; 0x06
    3108:	9f 81       	ldd	r25, Y+7	; 0x07
    310a:	fc 01       	movw	r30, r24
    310c:	86 89       	ldd	r24, Z+22	; 0x16
    310e:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    3112:	8e 81       	ldd	r24, Y+6	; 0x06
    3114:	9f 81       	ldd	r25, Y+7	; 0x07
    3116:	ac 01       	movw	r20, r24
    3118:	4e 5f       	subi	r20, 0xFE	; 254
    311a:	5f 4f       	sbci	r21, 0xFF	; 255
    311c:	8e 81       	ldd	r24, Y+6	; 0x06
    311e:	9f 81       	ldd	r25, Y+7	; 0x07
    3120:	fc 01       	movw	r30, r24
    3122:	86 89       	ldd	r24, Z+22	; 0x16
    3124:	28 2f       	mov	r18, r24
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	c9 01       	movw	r24, r18
    312a:	88 0f       	add	r24, r24
    312c:	99 1f       	adc	r25, r25
    312e:	88 0f       	add	r24, r24
    3130:	99 1f       	adc	r25, r25
    3132:	88 0f       	add	r24, r24
    3134:	99 1f       	adc	r25, r25
    3136:	82 0f       	add	r24, r18
    3138:	93 1f       	adc	r25, r19
    313a:	8f 5a       	subi	r24, 0xAF	; 175
    313c:	98 4f       	sbci	r25, 0xF8	; 248
    313e:	ba 01       	movw	r22, r20
    3140:	0e 94 31 0a 	call	0x1462	; 0x1462 <vListInsertEnd>
    3144:	8e 81       	ldd	r24, Y+6	; 0x06
    3146:	9f 81       	ldd	r25, Y+7	; 0x07
    3148:	fc 01       	movw	r30, r24
    314a:	26 89       	ldd	r18, Z+22	; 0x16
    314c:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    3150:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3154:	fc 01       	movw	r30, r24
    3156:	86 89       	ldd	r24, Z+22	; 0x16
    3158:	28 17       	cp	r18, r24
    315a:	08 f4       	brcc	.+2      	; 0x315e <xTaskIncrementTick+0x176>
    315c:	8b cf       	rjmp	.-234    	; 0x3074 <xTaskIncrementTick+0x8c>
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	89 83       	std	Y+1, r24	; 0x01
    3162:	88 cf       	rjmp	.-240    	; 0x3074 <xTaskIncrementTick+0x8c>
    3164:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    3168:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    316c:	fc 01       	movw	r30, r24
    316e:	86 89       	ldd	r24, Z+22	; 0x16
    3170:	28 2f       	mov	r18, r24
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	c9 01       	movw	r24, r18
    3176:	88 0f       	add	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	88 0f       	add	r24, r24
    317c:	99 1f       	adc	r25, r25
    317e:	88 0f       	add	r24, r24
    3180:	99 1f       	adc	r25, r25
    3182:	82 0f       	add	r24, r18
    3184:	93 1f       	adc	r25, r19
    3186:	8f 5a       	subi	r24, 0xAF	; 175
    3188:	98 4f       	sbci	r25, 0xF8	; 248
    318a:	fc 01       	movw	r30, r24
    318c:	80 81       	ld	r24, Z
    318e:	82 30       	cpi	r24, 0x02	; 2
    3190:	40 f0       	brcs	.+16     	; 0x31a2 <xTaskIncrementTick+0x1ba>
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	89 83       	std	Y+1, r24	; 0x01
    3196:	05 c0       	rjmp	.+10     	; 0x31a2 <xTaskIncrementTick+0x1ba>
    3198:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <uxPendedTicks>
    319c:	8f 5f       	subi	r24, 0xFF	; 255
    319e:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <uxPendedTicks>
    31a2:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <xYieldPending>
    31a6:	88 23       	and	r24, r24
    31a8:	11 f0       	breq	.+4      	; 0x31ae <xTaskIncrementTick+0x1c6>
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	89 83       	std	Y+1, r24	; 0x01
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	29 96       	adiw	r28, 0x09	; 9
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
    31bc:	df 91       	pop	r29
    31be:	cf 91       	pop	r28
    31c0:	08 95       	ret

000031c2 <vTaskSwitchContext>:
    31c2:	cf 93       	push	r28
    31c4:	df 93       	push	r29
    31c6:	00 d0       	rcall	.+0      	; 0x31c8 <vTaskSwitchContext+0x6>
    31c8:	1f 92       	push	r1
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    31ce:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    31d2:	88 23       	and	r24, r24
    31d4:	21 f0       	breq	.+8      	; 0x31de <vTaskSwitchContext+0x1c>
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xYieldPending>
    31dc:	71 c0       	rjmp	.+226    	; 0x32c0 <vTaskSwitchContext+0xfe>
    31de:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <xYieldPending>
    31e2:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    31e6:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    31ea:	fc 01       	movw	r30, r24
    31ec:	85 a1       	ldd	r24, Z+37	; 0x25
    31ee:	96 a1       	ldd	r25, Z+38	; 0x26
    31f0:	0e 94 31 09 	call	0x1262	; 0x1262 <switch_out>
    31f4:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    31f8:	89 83       	std	Y+1, r24	; 0x01
    31fa:	03 c0       	rjmp	.+6      	; 0x3202 <vTaskSwitchContext+0x40>
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	81 50       	subi	r24, 0x01	; 1
    3200:	89 83       	std	Y+1, r24	; 0x01
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	28 2f       	mov	r18, r24
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	c9 01       	movw	r24, r18
    320a:	88 0f       	add	r24, r24
    320c:	99 1f       	adc	r25, r25
    320e:	88 0f       	add	r24, r24
    3210:	99 1f       	adc	r25, r25
    3212:	88 0f       	add	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	82 0f       	add	r24, r18
    3218:	93 1f       	adc	r25, r19
    321a:	8f 5a       	subi	r24, 0xAF	; 175
    321c:	98 4f       	sbci	r25, 0xF8	; 248
    321e:	fc 01       	movw	r30, r24
    3220:	80 81       	ld	r24, Z
    3222:	88 23       	and	r24, r24
    3224:	59 f3       	breq	.-42     	; 0x31fc <vTaskSwitchContext+0x3a>
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	28 2f       	mov	r18, r24
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	c9 01       	movw	r24, r18
    322e:	88 0f       	add	r24, r24
    3230:	99 1f       	adc	r25, r25
    3232:	88 0f       	add	r24, r24
    3234:	99 1f       	adc	r25, r25
    3236:	88 0f       	add	r24, r24
    3238:	99 1f       	adc	r25, r25
    323a:	82 0f       	add	r24, r18
    323c:	93 1f       	adc	r25, r19
    323e:	8f 5a       	subi	r24, 0xAF	; 175
    3240:	98 4f       	sbci	r25, 0xF8	; 248
    3242:	9b 83       	std	Y+3, r25	; 0x03
    3244:	8a 83       	std	Y+2, r24	; 0x02
    3246:	8a 81       	ldd	r24, Y+2	; 0x02
    3248:	9b 81       	ldd	r25, Y+3	; 0x03
    324a:	fc 01       	movw	r30, r24
    324c:	81 81       	ldd	r24, Z+1	; 0x01
    324e:	92 81       	ldd	r25, Z+2	; 0x02
    3250:	fc 01       	movw	r30, r24
    3252:	22 81       	ldd	r18, Z+2	; 0x02
    3254:	33 81       	ldd	r19, Z+3	; 0x03
    3256:	8a 81       	ldd	r24, Y+2	; 0x02
    3258:	9b 81       	ldd	r25, Y+3	; 0x03
    325a:	fc 01       	movw	r30, r24
    325c:	32 83       	std	Z+2, r19	; 0x02
    325e:	21 83       	std	Z+1, r18	; 0x01
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	9b 81       	ldd	r25, Y+3	; 0x03
    3264:	fc 01       	movw	r30, r24
    3266:	21 81       	ldd	r18, Z+1	; 0x01
    3268:	32 81       	ldd	r19, Z+2	; 0x02
    326a:	8a 81       	ldd	r24, Y+2	; 0x02
    326c:	9b 81       	ldd	r25, Y+3	; 0x03
    326e:	03 96       	adiw	r24, 0x03	; 3
    3270:	28 17       	cp	r18, r24
    3272:	39 07       	cpc	r19, r25
    3274:	69 f4       	brne	.+26     	; 0x3290 <vTaskSwitchContext+0xce>
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	9b 81       	ldd	r25, Y+3	; 0x03
    327a:	fc 01       	movw	r30, r24
    327c:	81 81       	ldd	r24, Z+1	; 0x01
    327e:	92 81       	ldd	r25, Z+2	; 0x02
    3280:	fc 01       	movw	r30, r24
    3282:	22 81       	ldd	r18, Z+2	; 0x02
    3284:	33 81       	ldd	r19, Z+3	; 0x03
    3286:	8a 81       	ldd	r24, Y+2	; 0x02
    3288:	9b 81       	ldd	r25, Y+3	; 0x03
    328a:	fc 01       	movw	r30, r24
    328c:	32 83       	std	Z+2, r19	; 0x02
    328e:	21 83       	std	Z+1, r18	; 0x01
    3290:	8a 81       	ldd	r24, Y+2	; 0x02
    3292:	9b 81       	ldd	r25, Y+3	; 0x03
    3294:	fc 01       	movw	r30, r24
    3296:	81 81       	ldd	r24, Z+1	; 0x01
    3298:	92 81       	ldd	r25, Z+2	; 0x02
    329a:	fc 01       	movw	r30, r24
    329c:	86 81       	ldd	r24, Z+6	; 0x06
    329e:	97 81       	ldd	r25, Z+7	; 0x07
    32a0:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <pxCurrentTCB+0x1>
    32a4:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <pxCurrentTCB>
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    32ae:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    32b2:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    32b6:	fc 01       	movw	r30, r24
    32b8:	85 a1       	ldd	r24, Z+37	; 0x25
    32ba:	96 a1       	ldd	r25, Z+38	; 0x26
    32bc:	0e 94 0c 09 	call	0x1218	; 0x1218 <switch_in>
    32c0:	00 00       	nop
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	df 91       	pop	r29
    32ca:	cf 91       	pop	r28
    32cc:	08 95       	ret

000032ce <vTaskPlaceOnEventList>:
    32ce:	cf 93       	push	r28
    32d0:	df 93       	push	r29
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <vTaskPlaceOnEventList+0x6>
    32d4:	00 d0       	rcall	.+0      	; 0x32d6 <vTaskPlaceOnEventList+0x8>
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	9a 83       	std	Y+2, r25	; 0x02
    32dc:	89 83       	std	Y+1, r24	; 0x01
    32de:	7c 83       	std	Y+4, r23	; 0x04
    32e0:	6b 83       	std	Y+3, r22	; 0x03
    32e2:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    32e6:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    32ea:	9c 01       	movw	r18, r24
    32ec:	24 5f       	subi	r18, 0xF4	; 244
    32ee:	3f 4f       	sbci	r19, 0xFF	; 255
    32f0:	89 81       	ldd	r24, Y+1	; 0x01
    32f2:	9a 81       	ldd	r25, Y+2	; 0x02
    32f4:	b9 01       	movw	r22, r18
    32f6:	0e 94 80 0a 	call	0x1500	; 0x1500 <vListInsert>
    32fa:	8b 81       	ldd	r24, Y+3	; 0x03
    32fc:	9c 81       	ldd	r25, Y+4	; 0x04
    32fe:	61 e0       	ldi	r22, 0x01	; 1
    3300:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <prvAddCurrentTaskToDelayedList>
    3304:	00 00       	nop
    3306:	0f 90       	pop	r0
    3308:	0f 90       	pop	r0
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	08 95       	ret

00003314 <xTaskRemoveFromEventList>:
    3314:	cf 93       	push	r28
    3316:	df 93       	push	r29
    3318:	00 d0       	rcall	.+0      	; 0x331a <xTaskRemoveFromEventList+0x6>
    331a:	00 d0       	rcall	.+0      	; 0x331c <xTaskRemoveFromEventList+0x8>
    331c:	1f 92       	push	r1
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	9d 83       	std	Y+5, r25	; 0x05
    3324:	8c 83       	std	Y+4, r24	; 0x04
    3326:	8c 81       	ldd	r24, Y+4	; 0x04
    3328:	9d 81       	ldd	r25, Y+5	; 0x05
    332a:	fc 01       	movw	r30, r24
    332c:	85 81       	ldd	r24, Z+5	; 0x05
    332e:	96 81       	ldd	r25, Z+6	; 0x06
    3330:	fc 01       	movw	r30, r24
    3332:	86 81       	ldd	r24, Z+6	; 0x06
    3334:	97 81       	ldd	r25, Z+7	; 0x07
    3336:	9b 83       	std	Y+3, r25	; 0x03
    3338:	8a 83       	std	Y+2, r24	; 0x02
    333a:	8a 81       	ldd	r24, Y+2	; 0x02
    333c:	9b 81       	ldd	r25, Y+3	; 0x03
    333e:	0c 96       	adiw	r24, 0x0c	; 12
    3340:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <uxListRemove>
    3344:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    3348:	88 23       	and	r24, r24
    334a:	69 f5       	brne	.+90     	; 0x33a6 <xTaskRemoveFromEventList+0x92>
    334c:	8a 81       	ldd	r24, Y+2	; 0x02
    334e:	9b 81       	ldd	r25, Y+3	; 0x03
    3350:	02 96       	adiw	r24, 0x02	; 2
    3352:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <uxListRemove>
    3356:	8a 81       	ldd	r24, Y+2	; 0x02
    3358:	9b 81       	ldd	r25, Y+3	; 0x03
    335a:	fc 01       	movw	r30, r24
    335c:	96 89       	ldd	r25, Z+22	; 0x16
    335e:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    3362:	89 17       	cp	r24, r25
    3364:	30 f4       	brcc	.+12     	; 0x3372 <xTaskRemoveFromEventList+0x5e>
    3366:	8a 81       	ldd	r24, Y+2	; 0x02
    3368:	9b 81       	ldd	r25, Y+3	; 0x03
    336a:	fc 01       	movw	r30, r24
    336c:	86 89       	ldd	r24, Z+22	; 0x16
    336e:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    3372:	8a 81       	ldd	r24, Y+2	; 0x02
    3374:	9b 81       	ldd	r25, Y+3	; 0x03
    3376:	ac 01       	movw	r20, r24
    3378:	4e 5f       	subi	r20, 0xFE	; 254
    337a:	5f 4f       	sbci	r21, 0xFF	; 255
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	9b 81       	ldd	r25, Y+3	; 0x03
    3380:	fc 01       	movw	r30, r24
    3382:	86 89       	ldd	r24, Z+22	; 0x16
    3384:	28 2f       	mov	r18, r24
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	c9 01       	movw	r24, r18
    338a:	88 0f       	add	r24, r24
    338c:	99 1f       	adc	r25, r25
    338e:	88 0f       	add	r24, r24
    3390:	99 1f       	adc	r25, r25
    3392:	88 0f       	add	r24, r24
    3394:	99 1f       	adc	r25, r25
    3396:	82 0f       	add	r24, r18
    3398:	93 1f       	adc	r25, r19
    339a:	8f 5a       	subi	r24, 0xAF	; 175
    339c:	98 4f       	sbci	r25, 0xF8	; 248
    339e:	ba 01       	movw	r22, r20
    33a0:	0e 94 31 0a 	call	0x1462	; 0x1462 <vListInsertEnd>
    33a4:	08 c0       	rjmp	.+16     	; 0x33b6 <xTaskRemoveFromEventList+0xa2>
    33a6:	8a 81       	ldd	r24, Y+2	; 0x02
    33a8:	9b 81       	ldd	r25, Y+3	; 0x03
    33aa:	0c 96       	adiw	r24, 0x0c	; 12
    33ac:	bc 01       	movw	r22, r24
    33ae:	8b e8       	ldi	r24, 0x8B	; 139
    33b0:	97 e0       	ldi	r25, 0x07	; 7
    33b2:	0e 94 31 0a 	call	0x1462	; 0x1462 <vListInsertEnd>
    33b6:	8a 81       	ldd	r24, Y+2	; 0x02
    33b8:	9b 81       	ldd	r25, Y+3	; 0x03
    33ba:	fc 01       	movw	r30, r24
    33bc:	26 89       	ldd	r18, Z+22	; 0x16
    33be:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    33c2:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    33c6:	fc 01       	movw	r30, r24
    33c8:	86 89       	ldd	r24, Z+22	; 0x16
    33ca:	82 17       	cp	r24, r18
    33cc:	30 f4       	brcc	.+12     	; 0x33da <xTaskRemoveFromEventList+0xc6>
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	89 83       	std	Y+1, r24	; 0x01
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xYieldPending>
    33d8:	01 c0       	rjmp	.+2      	; 0x33dc <xTaskRemoveFromEventList+0xc8>
    33da:	19 82       	std	Y+1, r1	; 0x01
    33dc:	89 81       	ldd	r24, Y+1	; 0x01
    33de:	0f 90       	pop	r0
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
    33e6:	0f 90       	pop	r0
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	08 95       	ret

000033ee <vTaskSetTimeOutState>:
    33ee:	cf 93       	push	r28
    33f0:	df 93       	push	r29
    33f2:	00 d0       	rcall	.+0      	; 0x33f4 <vTaskSetTimeOutState+0x6>
    33f4:	cd b7       	in	r28, 0x3d	; 61
    33f6:	de b7       	in	r29, 0x3e	; 62
    33f8:	9a 83       	std	Y+2, r25	; 0x02
    33fa:	89 83       	std	Y+1, r24	; 0x01
    33fc:	20 91 a5 07 	lds	r18, 0x07A5	; 0x8007a5 <xNumOfOverflows>
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	9a 81       	ldd	r25, Y+2	; 0x02
    3404:	fc 01       	movw	r30, r24
    3406:	20 83       	st	Z, r18
    3408:	20 91 9f 07 	lds	r18, 0x079F	; 0x80079f <xTickCount>
    340c:	30 91 a0 07 	lds	r19, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    3410:	89 81       	ldd	r24, Y+1	; 0x01
    3412:	9a 81       	ldd	r25, Y+2	; 0x02
    3414:	fc 01       	movw	r30, r24
    3416:	32 83       	std	Z+2, r19	; 0x02
    3418:	21 83       	std	Z+1, r18	; 0x01
    341a:	00 00       	nop
    341c:	0f 90       	pop	r0
    341e:	0f 90       	pop	r0
    3420:	df 91       	pop	r29
    3422:	cf 91       	pop	r28
    3424:	08 95       	ret

00003426 <xTaskCheckForTimeOut>:
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
    342e:	27 97       	sbiw	r28, 0x07	; 7
    3430:	0f b6       	in	r0, 0x3f	; 63
    3432:	f8 94       	cli
    3434:	de bf       	out	0x3e, r29	; 62
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	cd bf       	out	0x3d, r28	; 61
    343a:	9d 83       	std	Y+5, r25	; 0x05
    343c:	8c 83       	std	Y+4, r24	; 0x04
    343e:	7f 83       	std	Y+7, r23	; 0x07
    3440:	6e 83       	std	Y+6, r22	; 0x06
    3442:	0f b6       	in	r0, 0x3f	; 63
    3444:	f8 94       	cli
    3446:	0f 92       	push	r0
    3448:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <xTickCount>
    344c:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    3450:	9b 83       	std	Y+3, r25	; 0x03
    3452:	8a 83       	std	Y+2, r24	; 0x02
    3454:	8c 81       	ldd	r24, Y+4	; 0x04
    3456:	9d 81       	ldd	r25, Y+5	; 0x05
    3458:	fc 01       	movw	r30, r24
    345a:	90 81       	ld	r25, Z
    345c:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <xNumOfOverflows>
    3460:	98 17       	cp	r25, r24
    3462:	69 f0       	breq	.+26     	; 0x347e <xTaskCheckForTimeOut+0x58>
    3464:	8c 81       	ldd	r24, Y+4	; 0x04
    3466:	9d 81       	ldd	r25, Y+5	; 0x05
    3468:	fc 01       	movw	r30, r24
    346a:	21 81       	ldd	r18, Z+1	; 0x01
    346c:	32 81       	ldd	r19, Z+2	; 0x02
    346e:	8a 81       	ldd	r24, Y+2	; 0x02
    3470:	9b 81       	ldd	r25, Y+3	; 0x03
    3472:	82 17       	cp	r24, r18
    3474:	93 07       	cpc	r25, r19
    3476:	18 f0       	brcs	.+6      	; 0x347e <xTaskCheckForTimeOut+0x58>
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	89 83       	std	Y+1, r24	; 0x01
    347c:	30 c0       	rjmp	.+96     	; 0x34de <xTaskCheckForTimeOut+0xb8>
    347e:	8c 81       	ldd	r24, Y+4	; 0x04
    3480:	9d 81       	ldd	r25, Y+5	; 0x05
    3482:	fc 01       	movw	r30, r24
    3484:	81 81       	ldd	r24, Z+1	; 0x01
    3486:	92 81       	ldd	r25, Z+2	; 0x02
    3488:	2a 81       	ldd	r18, Y+2	; 0x02
    348a:	3b 81       	ldd	r19, Y+3	; 0x03
    348c:	28 1b       	sub	r18, r24
    348e:	39 0b       	sbc	r19, r25
    3490:	8e 81       	ldd	r24, Y+6	; 0x06
    3492:	9f 81       	ldd	r25, Y+7	; 0x07
    3494:	fc 01       	movw	r30, r24
    3496:	80 81       	ld	r24, Z
    3498:	91 81       	ldd	r25, Z+1	; 0x01
    349a:	28 17       	cp	r18, r24
    349c:	39 07       	cpc	r19, r25
    349e:	e8 f4       	brcc	.+58     	; 0x34da <xTaskCheckForTimeOut+0xb4>
    34a0:	8e 81       	ldd	r24, Y+6	; 0x06
    34a2:	9f 81       	ldd	r25, Y+7	; 0x07
    34a4:	fc 01       	movw	r30, r24
    34a6:	20 81       	ld	r18, Z
    34a8:	31 81       	ldd	r19, Z+1	; 0x01
    34aa:	8c 81       	ldd	r24, Y+4	; 0x04
    34ac:	9d 81       	ldd	r25, Y+5	; 0x05
    34ae:	fc 01       	movw	r30, r24
    34b0:	41 81       	ldd	r20, Z+1	; 0x01
    34b2:	52 81       	ldd	r21, Z+2	; 0x02
    34b4:	8a 81       	ldd	r24, Y+2	; 0x02
    34b6:	9b 81       	ldd	r25, Y+3	; 0x03
    34b8:	ba 01       	movw	r22, r20
    34ba:	68 1b       	sub	r22, r24
    34bc:	79 0b       	sbc	r23, r25
    34be:	cb 01       	movw	r24, r22
    34c0:	28 0f       	add	r18, r24
    34c2:	39 1f       	adc	r19, r25
    34c4:	8e 81       	ldd	r24, Y+6	; 0x06
    34c6:	9f 81       	ldd	r25, Y+7	; 0x07
    34c8:	fc 01       	movw	r30, r24
    34ca:	31 83       	std	Z+1, r19	; 0x01
    34cc:	20 83       	st	Z, r18
    34ce:	8c 81       	ldd	r24, Y+4	; 0x04
    34d0:	9d 81       	ldd	r25, Y+5	; 0x05
    34d2:	0e 94 f7 19 	call	0x33ee	; 0x33ee <vTaskSetTimeOutState>
    34d6:	19 82       	std	Y+1, r1	; 0x01
    34d8:	02 c0       	rjmp	.+4      	; 0x34de <xTaskCheckForTimeOut+0xb8>
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	89 83       	std	Y+1, r24	; 0x01
    34de:	0f 90       	pop	r0
    34e0:	0f be       	out	0x3f, r0	; 63
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	27 96       	adiw	r28, 0x07	; 7
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	f8 94       	cli
    34ea:	de bf       	out	0x3e, r29	; 62
    34ec:	0f be       	out	0x3f, r0	; 63
    34ee:	cd bf       	out	0x3d, r28	; 61
    34f0:	df 91       	pop	r29
    34f2:	cf 91       	pop	r28
    34f4:	08 95       	ret

000034f6 <vTaskMissedYield>:
    34f6:	cf 93       	push	r28
    34f8:	df 93       	push	r29
    34fa:	cd b7       	in	r28, 0x3d	; 61
    34fc:	de b7       	in	r29, 0x3e	; 62
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xYieldPending>
    3504:	00 00       	nop
    3506:	df 91       	pop	r29
    3508:	cf 91       	pop	r28
    350a:	08 95       	ret

0000350c <prvIdleTask>:
    350c:	cf 93       	push	r28
    350e:	df 93       	push	r29
    3510:	00 d0       	rcall	.+0      	; 0x3512 <prvIdleTask+0x6>
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
    3516:	9a 83       	std	Y+2, r25	; 0x02
    3518:	89 83       	std	Y+1, r24	; 0x01
    351a:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <prvCheckTasksWaitingTermination>
    351e:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxReadyTasksLists>
    3522:	82 30       	cpi	r24, 0x02	; 2
    3524:	10 f0       	brcs	.+4      	; 0x352a <prvIdleTask+0x1e>
    3526:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vPortYield>
    352a:	0e 94 73 07 	call	0xee6	; 0xee6 <vApplicationIdleHook>
    352e:	f5 cf       	rjmp	.-22     	; 0x351a <prvIdleTask+0xe>

00003530 <prvInitialiseTaskLists>:
    3530:	cf 93       	push	r28
    3532:	df 93       	push	r29
    3534:	1f 92       	push	r1
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
    353a:	19 82       	std	Y+1, r1	; 0x01
    353c:	13 c0       	rjmp	.+38     	; 0x3564 <prvInitialiseTaskLists+0x34>
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	28 2f       	mov	r18, r24
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	c9 01       	movw	r24, r18
    3546:	88 0f       	add	r24, r24
    3548:	99 1f       	adc	r25, r25
    354a:	88 0f       	add	r24, r24
    354c:	99 1f       	adc	r25, r25
    354e:	88 0f       	add	r24, r24
    3550:	99 1f       	adc	r25, r25
    3552:	82 0f       	add	r24, r18
    3554:	93 1f       	adc	r25, r19
    3556:	8f 5a       	subi	r24, 0xAF	; 175
    3558:	98 4f       	sbci	r25, 0xF8	; 248
    355a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <vListInitialise>
    355e:	89 81       	ldd	r24, Y+1	; 0x01
    3560:	8f 5f       	subi	r24, 0xFF	; 255
    3562:	89 83       	std	Y+1, r24	; 0x01
    3564:	89 81       	ldd	r24, Y+1	; 0x01
    3566:	84 30       	cpi	r24, 0x04	; 4
    3568:	50 f3       	brcs	.-44     	; 0x353e <prvInitialiseTaskLists+0xe>
    356a:	85 e7       	ldi	r24, 0x75	; 117
    356c:	97 e0       	ldi	r25, 0x07	; 7
    356e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <vListInitialise>
    3572:	8e e7       	ldi	r24, 0x7E	; 126
    3574:	97 e0       	ldi	r25, 0x07	; 7
    3576:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <vListInitialise>
    357a:	8b e8       	ldi	r24, 0x8B	; 139
    357c:	97 e0       	ldi	r25, 0x07	; 7
    357e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <vListInitialise>
    3582:	84 e9       	ldi	r24, 0x94	; 148
    3584:	97 e0       	ldi	r25, 0x07	; 7
    3586:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <vListInitialise>
    358a:	85 e7       	ldi	r24, 0x75	; 117
    358c:	97 e0       	ldi	r25, 0x07	; 7
    358e:	90 93 88 07 	sts	0x0788, r25	; 0x800788 <pxDelayedTaskList+0x1>
    3592:	80 93 87 07 	sts	0x0787, r24	; 0x800787 <pxDelayedTaskList>
    3596:	8e e7       	ldi	r24, 0x7E	; 126
    3598:	97 e0       	ldi	r25, 0x07	; 7
    359a:	90 93 8a 07 	sts	0x078A, r25	; 0x80078a <pxOverflowDelayedTaskList+0x1>
    359e:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <pxOverflowDelayedTaskList>
    35a2:	00 00       	nop
    35a4:	0f 90       	pop	r0
    35a6:	df 91       	pop	r29
    35a8:	cf 91       	pop	r28
    35aa:	08 95       	ret

000035ac <prvCheckTasksWaitingTermination>:
    35ac:	cf 93       	push	r28
    35ae:	df 93       	push	r29
    35b0:	00 d0       	rcall	.+0      	; 0x35b2 <prvCheckTasksWaitingTermination+0x6>
    35b2:	1f 92       	push	r1
    35b4:	cd b7       	in	r28, 0x3d	; 61
    35b6:	de b7       	in	r29, 0x3e	; 62
    35b8:	2f c0       	rjmp	.+94     	; 0x3618 <prvCheckTasksWaitingTermination+0x6c>
    35ba:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <vTaskSuspendAll>
    35be:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <xTasksWaitingTermination>
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	99 23       	and	r25, r25
    35c6:	09 f0       	breq	.+2      	; 0x35ca <prvCheckTasksWaitingTermination+0x1e>
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	89 83       	std	Y+1, r24	; 0x01
    35cc:	0e 94 5d 17 	call	0x2eba	; 0x2eba <xTaskResumeAll>
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	88 23       	and	r24, r24
    35d4:	09 f5       	brne	.+66     	; 0x3618 <prvCheckTasksWaitingTermination+0x6c>
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	0f 92       	push	r0
    35dc:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <xTasksWaitingTermination+0x5>
    35e0:	90 91 9a 07 	lds	r25, 0x079A	; 0x80079a <xTasksWaitingTermination+0x6>
    35e4:	fc 01       	movw	r30, r24
    35e6:	86 81       	ldd	r24, Z+6	; 0x06
    35e8:	97 81       	ldd	r25, Z+7	; 0x07
    35ea:	9b 83       	std	Y+3, r25	; 0x03
    35ec:	8a 83       	std	Y+2, r24	; 0x02
    35ee:	8a 81       	ldd	r24, Y+2	; 0x02
    35f0:	9b 81       	ldd	r25, Y+3	; 0x03
    35f2:	02 96       	adiw	r24, 0x02	; 2
    35f4:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <uxListRemove>
    35f8:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <uxCurrentNumberOfTasks>
    35fc:	81 50       	subi	r24, 0x01	; 1
    35fe:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <uxCurrentNumberOfTasks>
    3602:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <uxDeletedTasksWaitingCleanUp>
    3606:	81 50       	subi	r24, 0x01	; 1
    3608:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <uxDeletedTasksWaitingCleanUp>
    360c:	0f 90       	pop	r0
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	8a 81       	ldd	r24, Y+2	; 0x02
    3612:	9b 81       	ldd	r25, Y+3	; 0x03
    3614:	0e 94 17 1b 	call	0x362e	; 0x362e <prvDeleteTCB>
    3618:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <uxDeletedTasksWaitingCleanUp>
    361c:	88 23       	and	r24, r24
    361e:	69 f6       	brne	.-102    	; 0x35ba <prvCheckTasksWaitingTermination+0xe>
    3620:	00 00       	nop
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	0f 90       	pop	r0
    3628:	df 91       	pop	r29
    362a:	cf 91       	pop	r28
    362c:	08 95       	ret

0000362e <prvDeleteTCB>:
    362e:	cf 93       	push	r28
    3630:	df 93       	push	r29
    3632:	00 d0       	rcall	.+0      	; 0x3634 <prvDeleteTCB+0x6>
    3634:	cd b7       	in	r28, 0x3d	; 61
    3636:	de b7       	in	r29, 0x3e	; 62
    3638:	9a 83       	std	Y+2, r25	; 0x02
    363a:	89 83       	std	Y+1, r24	; 0x01
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	9a 81       	ldd	r25, Y+2	; 0x02
    3640:	fc 01       	movw	r30, r24
    3642:	87 89       	ldd	r24, Z+23	; 0x17
    3644:	90 8d       	ldd	r25, Z+24	; 0x18
    3646:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <vPortFree>
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	9a 81       	ldd	r25, Y+2	; 0x02
    364e:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <vPortFree>
    3652:	00 00       	nop
    3654:	0f 90       	pop	r0
    3656:	0f 90       	pop	r0
    3658:	df 91       	pop	r29
    365a:	cf 91       	pop	r28
    365c:	08 95       	ret

0000365e <prvResetNextTaskUnblockTime>:
    365e:	cf 93       	push	r28
    3660:	df 93       	push	r29
    3662:	00 d0       	rcall	.+0      	; 0x3664 <prvResetNextTaskUnblockTime+0x6>
    3664:	cd b7       	in	r28, 0x3d	; 61
    3666:	de b7       	in	r29, 0x3e	; 62
    3668:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    366c:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    3670:	fc 01       	movw	r30, r24
    3672:	80 81       	ld	r24, Z
    3674:	88 23       	and	r24, r24
    3676:	39 f4       	brne	.+14     	; 0x3686 <prvResetNextTaskUnblockTime+0x28>
    3678:	8f ef       	ldi	r24, 0xFF	; 255
    367a:	9f ef       	ldi	r25, 0xFF	; 255
    367c:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3680:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>
    3684:	15 c0       	rjmp	.+42     	; 0x36b0 <prvResetNextTaskUnblockTime+0x52>
    3686:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    368a:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    368e:	fc 01       	movw	r30, r24
    3690:	85 81       	ldd	r24, Z+5	; 0x05
    3692:	96 81       	ldd	r25, Z+6	; 0x06
    3694:	fc 01       	movw	r30, r24
    3696:	86 81       	ldd	r24, Z+6	; 0x06
    3698:	97 81       	ldd	r25, Z+7	; 0x07
    369a:	9a 83       	std	Y+2, r25	; 0x02
    369c:	89 83       	std	Y+1, r24	; 0x01
    369e:	89 81       	ldd	r24, Y+1	; 0x01
    36a0:	9a 81       	ldd	r25, Y+2	; 0x02
    36a2:	fc 01       	movw	r30, r24
    36a4:	82 81       	ldd	r24, Z+2	; 0x02
    36a6:	93 81       	ldd	r25, Z+3	; 0x03
    36a8:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    36ac:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>
    36b0:	00 00       	nop
    36b2:	0f 90       	pop	r0
    36b4:	0f 90       	pop	r0
    36b6:	df 91       	pop	r29
    36b8:	cf 91       	pop	r28
    36ba:	08 95       	ret

000036bc <xTaskPriorityDisinherit>:
    36bc:	cf 93       	push	r28
    36be:	df 93       	push	r29
    36c0:	00 d0       	rcall	.+0      	; 0x36c2 <xTaskPriorityDisinherit+0x6>
    36c2:	00 d0       	rcall	.+0      	; 0x36c4 <xTaskPriorityDisinherit+0x8>
    36c4:	1f 92       	push	r1
    36c6:	cd b7       	in	r28, 0x3d	; 61
    36c8:	de b7       	in	r29, 0x3e	; 62
    36ca:	9d 83       	std	Y+5, r25	; 0x05
    36cc:	8c 83       	std	Y+4, r24	; 0x04
    36ce:	8c 81       	ldd	r24, Y+4	; 0x04
    36d0:	9d 81       	ldd	r25, Y+5	; 0x05
    36d2:	9b 83       	std	Y+3, r25	; 0x03
    36d4:	8a 83       	std	Y+2, r24	; 0x02
    36d6:	19 82       	std	Y+1, r1	; 0x01
    36d8:	8c 81       	ldd	r24, Y+4	; 0x04
    36da:	9d 81       	ldd	r25, Y+5	; 0x05
    36dc:	89 2b       	or	r24, r25
    36de:	09 f4       	brne	.+2      	; 0x36e2 <xTaskPriorityDisinherit+0x26>
    36e0:	61 c0       	rjmp	.+194    	; 0x37a4 <xTaskPriorityDisinherit+0xe8>
    36e2:	8a 81       	ldd	r24, Y+2	; 0x02
    36e4:	9b 81       	ldd	r25, Y+3	; 0x03
    36e6:	fc 01       	movw	r30, r24
    36e8:	84 a1       	ldd	r24, Z+36	; 0x24
    36ea:	2f ef       	ldi	r18, 0xFF	; 255
    36ec:	28 0f       	add	r18, r24
    36ee:	8a 81       	ldd	r24, Y+2	; 0x02
    36f0:	9b 81       	ldd	r25, Y+3	; 0x03
    36f2:	fc 01       	movw	r30, r24
    36f4:	24 a3       	std	Z+36, r18	; 0x24
    36f6:	8a 81       	ldd	r24, Y+2	; 0x02
    36f8:	9b 81       	ldd	r25, Y+3	; 0x03
    36fa:	fc 01       	movw	r30, r24
    36fc:	26 89       	ldd	r18, Z+22	; 0x16
    36fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3700:	9b 81       	ldd	r25, Y+3	; 0x03
    3702:	fc 01       	movw	r30, r24
    3704:	83 a1       	ldd	r24, Z+35	; 0x23
    3706:	28 17       	cp	r18, r24
    3708:	09 f4       	brne	.+2      	; 0x370c <xTaskPriorityDisinherit+0x50>
    370a:	4c c0       	rjmp	.+152    	; 0x37a4 <xTaskPriorityDisinherit+0xe8>
    370c:	8a 81       	ldd	r24, Y+2	; 0x02
    370e:	9b 81       	ldd	r25, Y+3	; 0x03
    3710:	fc 01       	movw	r30, r24
    3712:	84 a1       	ldd	r24, Z+36	; 0x24
    3714:	88 23       	and	r24, r24
    3716:	09 f0       	breq	.+2      	; 0x371a <xTaskPriorityDisinherit+0x5e>
    3718:	45 c0       	rjmp	.+138    	; 0x37a4 <xTaskPriorityDisinherit+0xe8>
    371a:	8a 81       	ldd	r24, Y+2	; 0x02
    371c:	9b 81       	ldd	r25, Y+3	; 0x03
    371e:	02 96       	adiw	r24, 0x02	; 2
    3720:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <uxListRemove>
    3724:	8a 81       	ldd	r24, Y+2	; 0x02
    3726:	9b 81       	ldd	r25, Y+3	; 0x03
    3728:	fc 01       	movw	r30, r24
    372a:	23 a1       	ldd	r18, Z+35	; 0x23
    372c:	8a 81       	ldd	r24, Y+2	; 0x02
    372e:	9b 81       	ldd	r25, Y+3	; 0x03
    3730:	fc 01       	movw	r30, r24
    3732:	26 8b       	std	Z+22, r18	; 0x16
    3734:	8a 81       	ldd	r24, Y+2	; 0x02
    3736:	9b 81       	ldd	r25, Y+3	; 0x03
    3738:	fc 01       	movw	r30, r24
    373a:	86 89       	ldd	r24, Z+22	; 0x16
    373c:	88 2f       	mov	r24, r24
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	24 e0       	ldi	r18, 0x04	; 4
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	28 1b       	sub	r18, r24
    3746:	39 0b       	sbc	r19, r25
    3748:	8a 81       	ldd	r24, Y+2	; 0x02
    374a:	9b 81       	ldd	r25, Y+3	; 0x03
    374c:	fc 01       	movw	r30, r24
    374e:	35 87       	std	Z+13, r19	; 0x0d
    3750:	24 87       	std	Z+12, r18	; 0x0c
    3752:	8a 81       	ldd	r24, Y+2	; 0x02
    3754:	9b 81       	ldd	r25, Y+3	; 0x03
    3756:	fc 01       	movw	r30, r24
    3758:	96 89       	ldd	r25, Z+22	; 0x16
    375a:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    375e:	89 17       	cp	r24, r25
    3760:	30 f4       	brcc	.+12     	; 0x376e <xTaskPriorityDisinherit+0xb2>
    3762:	8a 81       	ldd	r24, Y+2	; 0x02
    3764:	9b 81       	ldd	r25, Y+3	; 0x03
    3766:	fc 01       	movw	r30, r24
    3768:	86 89       	ldd	r24, Z+22	; 0x16
    376a:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	9b 81       	ldd	r25, Y+3	; 0x03
    3772:	ac 01       	movw	r20, r24
    3774:	4e 5f       	subi	r20, 0xFE	; 254
    3776:	5f 4f       	sbci	r21, 0xFF	; 255
    3778:	8a 81       	ldd	r24, Y+2	; 0x02
    377a:	9b 81       	ldd	r25, Y+3	; 0x03
    377c:	fc 01       	movw	r30, r24
    377e:	86 89       	ldd	r24, Z+22	; 0x16
    3780:	28 2f       	mov	r18, r24
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	c9 01       	movw	r24, r18
    3786:	88 0f       	add	r24, r24
    3788:	99 1f       	adc	r25, r25
    378a:	88 0f       	add	r24, r24
    378c:	99 1f       	adc	r25, r25
    378e:	88 0f       	add	r24, r24
    3790:	99 1f       	adc	r25, r25
    3792:	82 0f       	add	r24, r18
    3794:	93 1f       	adc	r25, r19
    3796:	8f 5a       	subi	r24, 0xAF	; 175
    3798:	98 4f       	sbci	r25, 0xF8	; 248
    379a:	ba 01       	movw	r22, r20
    379c:	0e 94 31 0a 	call	0x1462	; 0x1462 <vListInsertEnd>
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	89 83       	std	Y+1, r24	; 0x01
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	0f 90       	pop	r0
    37a8:	0f 90       	pop	r0
    37aa:	0f 90       	pop	r0
    37ac:	0f 90       	pop	r0
    37ae:	0f 90       	pop	r0
    37b0:	df 91       	pop	r29
    37b2:	cf 91       	pop	r28
    37b4:	08 95       	ret

000037b6 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    37b6:	cf 93       	push	r28
    37b8:	df 93       	push	r29
    37ba:	cd b7       	in	r28, 0x3d	; 61
    37bc:	de b7       	in	r29, 0x3e	; 62
    37be:	27 97       	sbiw	r28, 0x07	; 7
    37c0:	0f b6       	in	r0, 0x3f	; 63
    37c2:	f8 94       	cli
    37c4:	de bf       	out	0x3e, r29	; 62
    37c6:	0f be       	out	0x3f, r0	; 63
    37c8:	cd bf       	out	0x3d, r28	; 61
    37ca:	9e 83       	std	Y+6, r25	; 0x06
    37cc:	8d 83       	std	Y+5, r24	; 0x05
    37ce:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    37d0:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <xTickCount>
    37d4:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    37d8:	9a 83       	std	Y+2, r25	; 0x02
    37da:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    37dc:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    37e0:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    37e4:	02 96       	adiw	r24, 0x02	; 2
    37e6:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    37ea:	29 81       	ldd	r18, Y+1	; 0x01
    37ec:	3a 81       	ldd	r19, Y+2	; 0x02
    37ee:	8d 81       	ldd	r24, Y+5	; 0x05
    37f0:	9e 81       	ldd	r25, Y+6	; 0x06
    37f2:	82 0f       	add	r24, r18
    37f4:	93 1f       	adc	r25, r19
    37f6:	9c 83       	std	Y+4, r25	; 0x04
    37f8:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    37fa:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    37fe:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3802:	2b 81       	ldd	r18, Y+3	; 0x03
    3804:	3c 81       	ldd	r19, Y+4	; 0x04
    3806:	fc 01       	movw	r30, r24
    3808:	33 83       	std	Z+3, r19	; 0x03
    380a:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    380c:	2b 81       	ldd	r18, Y+3	; 0x03
    380e:	3c 81       	ldd	r19, Y+4	; 0x04
    3810:	89 81       	ldd	r24, Y+1	; 0x01
    3812:	9a 81       	ldd	r25, Y+2	; 0x02
    3814:	28 17       	cp	r18, r24
    3816:	39 07       	cpc	r19, r25
    3818:	78 f4       	brcc	.+30     	; 0x3838 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    381a:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    381e:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3822:	9c 01       	movw	r18, r24
    3824:	2e 5f       	subi	r18, 0xFE	; 254
    3826:	3f 4f       	sbci	r19, 0xFF	; 255
    3828:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <pxOverflowDelayedTaskList>
    382c:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <pxOverflowDelayedTaskList+0x1>
    3830:	b9 01       	movw	r22, r18
    3832:	0e 94 80 0a 	call	0x1500	; 0x1500 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3836:	1d c0       	rjmp	.+58     	; 0x3872 <prvAddCurrentTaskToDelayedList+0xbc>
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3838:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    383c:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3840:	9c 01       	movw	r18, r24
    3842:	2e 5f       	subi	r18, 0xFE	; 254
    3844:	3f 4f       	sbci	r19, 0xFF	; 255
    3846:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    384a:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    384e:	b9 01       	movw	r22, r18
    3850:	0e 94 80 0a 	call	0x1500	; 0x1500 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    3854:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <xNextTaskUnblockTime>
    3858:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    385c:	2b 81       	ldd	r18, Y+3	; 0x03
    385e:	3c 81       	ldd	r19, Y+4	; 0x04
    3860:	28 17       	cp	r18, r24
    3862:	39 07       	cpc	r19, r25
    3864:	30 f4       	brcc	.+12     	; 0x3872 <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    3866:	8b 81       	ldd	r24, Y+3	; 0x03
    3868:	9c 81       	ldd	r25, Y+4	; 0x04
    386a:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    386e:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3872:	00 00       	nop
    3874:	27 96       	adiw	r28, 0x07	; 7
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	f8 94       	cli
    387a:	de bf       	out	0x3e, r29	; 62
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	cd bf       	out	0x3d, r28	; 61
    3880:	df 91       	pop	r29
    3882:	cf 91       	pop	r28
    3884:	08 95       	ret

00003886 <__subsf3>:
    3886:	50 58       	subi	r21, 0x80	; 128

00003888 <__addsf3>:
    3888:	bb 27       	eor	r27, r27
    388a:	aa 27       	eor	r26, r26
    388c:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__addsf3x>
    3890:	0c 94 3a 1d 	jmp	0x3a74	; 0x3a74 <__fp_round>
    3894:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <__fp_pscA>
    3898:	38 f0       	brcs	.+14     	; 0x38a8 <__addsf3+0x20>
    389a:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <__fp_pscB>
    389e:	20 f0       	brcs	.+8      	; 0x38a8 <__addsf3+0x20>
    38a0:	39 f4       	brne	.+14     	; 0x38b0 <__addsf3+0x28>
    38a2:	9f 3f       	cpi	r25, 0xFF	; 255
    38a4:	19 f4       	brne	.+6      	; 0x38ac <__addsf3+0x24>
    38a6:	26 f4       	brtc	.+8      	; 0x38b0 <__addsf3+0x28>
    38a8:	0c 94 29 1d 	jmp	0x3a52	; 0x3a52 <__fp_nan>
    38ac:	0e f4       	brtc	.+2      	; 0x38b0 <__addsf3+0x28>
    38ae:	e0 95       	com	r30
    38b0:	e7 fb       	bst	r30, 7
    38b2:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <__fp_inf>

000038b6 <__addsf3x>:
    38b6:	e9 2f       	mov	r30, r25
    38b8:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <__fp_split3>
    38bc:	58 f3       	brcs	.-42     	; 0x3894 <__addsf3+0xc>
    38be:	ba 17       	cp	r27, r26
    38c0:	62 07       	cpc	r22, r18
    38c2:	73 07       	cpc	r23, r19
    38c4:	84 07       	cpc	r24, r20
    38c6:	95 07       	cpc	r25, r21
    38c8:	20 f0       	brcs	.+8      	; 0x38d2 <__addsf3x+0x1c>
    38ca:	79 f4       	brne	.+30     	; 0x38ea <__addsf3x+0x34>
    38cc:	a6 f5       	brtc	.+104    	; 0x3936 <__addsf3x+0x80>
    38ce:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <__fp_zero>
    38d2:	0e f4       	brtc	.+2      	; 0x38d6 <__addsf3x+0x20>
    38d4:	e0 95       	com	r30
    38d6:	0b 2e       	mov	r0, r27
    38d8:	ba 2f       	mov	r27, r26
    38da:	a0 2d       	mov	r26, r0
    38dc:	0b 01       	movw	r0, r22
    38de:	b9 01       	movw	r22, r18
    38e0:	90 01       	movw	r18, r0
    38e2:	0c 01       	movw	r0, r24
    38e4:	ca 01       	movw	r24, r20
    38e6:	a0 01       	movw	r20, r0
    38e8:	11 24       	eor	r1, r1
    38ea:	ff 27       	eor	r31, r31
    38ec:	59 1b       	sub	r21, r25
    38ee:	99 f0       	breq	.+38     	; 0x3916 <__addsf3x+0x60>
    38f0:	59 3f       	cpi	r21, 0xF9	; 249
    38f2:	50 f4       	brcc	.+20     	; 0x3908 <__addsf3x+0x52>
    38f4:	50 3e       	cpi	r21, 0xE0	; 224
    38f6:	68 f1       	brcs	.+90     	; 0x3952 <__addsf3x+0x9c>
    38f8:	1a 16       	cp	r1, r26
    38fa:	f0 40       	sbci	r31, 0x00	; 0
    38fc:	a2 2f       	mov	r26, r18
    38fe:	23 2f       	mov	r18, r19
    3900:	34 2f       	mov	r19, r20
    3902:	44 27       	eor	r20, r20
    3904:	58 5f       	subi	r21, 0xF8	; 248
    3906:	f3 cf       	rjmp	.-26     	; 0x38ee <__addsf3x+0x38>
    3908:	46 95       	lsr	r20
    390a:	37 95       	ror	r19
    390c:	27 95       	ror	r18
    390e:	a7 95       	ror	r26
    3910:	f0 40       	sbci	r31, 0x00	; 0
    3912:	53 95       	inc	r21
    3914:	c9 f7       	brne	.-14     	; 0x3908 <__addsf3x+0x52>
    3916:	7e f4       	brtc	.+30     	; 0x3936 <__addsf3x+0x80>
    3918:	1f 16       	cp	r1, r31
    391a:	ba 0b       	sbc	r27, r26
    391c:	62 0b       	sbc	r22, r18
    391e:	73 0b       	sbc	r23, r19
    3920:	84 0b       	sbc	r24, r20
    3922:	ba f0       	brmi	.+46     	; 0x3952 <__addsf3x+0x9c>
    3924:	91 50       	subi	r25, 0x01	; 1
    3926:	a1 f0       	breq	.+40     	; 0x3950 <__addsf3x+0x9a>
    3928:	ff 0f       	add	r31, r31
    392a:	bb 1f       	adc	r27, r27
    392c:	66 1f       	adc	r22, r22
    392e:	77 1f       	adc	r23, r23
    3930:	88 1f       	adc	r24, r24
    3932:	c2 f7       	brpl	.-16     	; 0x3924 <__addsf3x+0x6e>
    3934:	0e c0       	rjmp	.+28     	; 0x3952 <__addsf3x+0x9c>
    3936:	ba 0f       	add	r27, r26
    3938:	62 1f       	adc	r22, r18
    393a:	73 1f       	adc	r23, r19
    393c:	84 1f       	adc	r24, r20
    393e:	48 f4       	brcc	.+18     	; 0x3952 <__addsf3x+0x9c>
    3940:	87 95       	ror	r24
    3942:	77 95       	ror	r23
    3944:	67 95       	ror	r22
    3946:	b7 95       	ror	r27
    3948:	f7 95       	ror	r31
    394a:	9e 3f       	cpi	r25, 0xFE	; 254
    394c:	08 f0       	brcs	.+2      	; 0x3950 <__addsf3x+0x9a>
    394e:	b0 cf       	rjmp	.-160    	; 0x38b0 <__addsf3+0x28>
    3950:	93 95       	inc	r25
    3952:	88 0f       	add	r24, r24
    3954:	08 f0       	brcs	.+2      	; 0x3958 <__addsf3x+0xa2>
    3956:	99 27       	eor	r25, r25
    3958:	ee 0f       	add	r30, r30
    395a:	97 95       	ror	r25
    395c:	87 95       	ror	r24
    395e:	08 95       	ret

00003960 <__fixsfsi>:
    3960:	0e 94 b7 1c 	call	0x396e	; 0x396e <__fixunssfsi>
    3964:	68 94       	set
    3966:	b1 11       	cpse	r27, r1
    3968:	0c 94 6e 1d 	jmp	0x3adc	; 0x3adc <__fp_szero>
    396c:	08 95       	ret

0000396e <__fixunssfsi>:
    396e:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__fp_splitA>
    3972:	88 f0       	brcs	.+34     	; 0x3996 <__fixunssfsi+0x28>
    3974:	9f 57       	subi	r25, 0x7F	; 127
    3976:	98 f0       	brcs	.+38     	; 0x399e <__fixunssfsi+0x30>
    3978:	b9 2f       	mov	r27, r25
    397a:	99 27       	eor	r25, r25
    397c:	b7 51       	subi	r27, 0x17	; 23
    397e:	b0 f0       	brcs	.+44     	; 0x39ac <__fixunssfsi+0x3e>
    3980:	e1 f0       	breq	.+56     	; 0x39ba <__fixunssfsi+0x4c>
    3982:	66 0f       	add	r22, r22
    3984:	77 1f       	adc	r23, r23
    3986:	88 1f       	adc	r24, r24
    3988:	99 1f       	adc	r25, r25
    398a:	1a f0       	brmi	.+6      	; 0x3992 <__fixunssfsi+0x24>
    398c:	ba 95       	dec	r27
    398e:	c9 f7       	brne	.-14     	; 0x3982 <__fixunssfsi+0x14>
    3990:	14 c0       	rjmp	.+40     	; 0x39ba <__fixunssfsi+0x4c>
    3992:	b1 30       	cpi	r27, 0x01	; 1
    3994:	91 f0       	breq	.+36     	; 0x39ba <__fixunssfsi+0x4c>
    3996:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fp_zero>
    399a:	b1 e0       	ldi	r27, 0x01	; 1
    399c:	08 95       	ret
    399e:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <__fp_zero>
    39a2:	67 2f       	mov	r22, r23
    39a4:	78 2f       	mov	r23, r24
    39a6:	88 27       	eor	r24, r24
    39a8:	b8 5f       	subi	r27, 0xF8	; 248
    39aa:	39 f0       	breq	.+14     	; 0x39ba <__fixunssfsi+0x4c>
    39ac:	b9 3f       	cpi	r27, 0xF9	; 249
    39ae:	cc f3       	brlt	.-14     	; 0x39a2 <__fixunssfsi+0x34>
    39b0:	86 95       	lsr	r24
    39b2:	77 95       	ror	r23
    39b4:	67 95       	ror	r22
    39b6:	b3 95       	inc	r27
    39b8:	d9 f7       	brne	.-10     	; 0x39b0 <__fixunssfsi+0x42>
    39ba:	3e f4       	brtc	.+14     	; 0x39ca <__fixunssfsi+0x5c>
    39bc:	90 95       	com	r25
    39be:	80 95       	com	r24
    39c0:	70 95       	com	r23
    39c2:	61 95       	neg	r22
    39c4:	7f 4f       	sbci	r23, 0xFF	; 255
    39c6:	8f 4f       	sbci	r24, 0xFF	; 255
    39c8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ca:	08 95       	ret

000039cc <__floatunsisf>:
    39cc:	e8 94       	clt
    39ce:	09 c0       	rjmp	.+18     	; 0x39e2 <__floatsisf+0x12>

000039d0 <__floatsisf>:
    39d0:	97 fb       	bst	r25, 7
    39d2:	3e f4       	brtc	.+14     	; 0x39e2 <__floatsisf+0x12>
    39d4:	90 95       	com	r25
    39d6:	80 95       	com	r24
    39d8:	70 95       	com	r23
    39da:	61 95       	neg	r22
    39dc:	7f 4f       	sbci	r23, 0xFF	; 255
    39de:	8f 4f       	sbci	r24, 0xFF	; 255
    39e0:	9f 4f       	sbci	r25, 0xFF	; 255
    39e2:	99 23       	and	r25, r25
    39e4:	a9 f0       	breq	.+42     	; 0x3a10 <__floatsisf+0x40>
    39e6:	f9 2f       	mov	r31, r25
    39e8:	96 e9       	ldi	r25, 0x96	; 150
    39ea:	bb 27       	eor	r27, r27
    39ec:	93 95       	inc	r25
    39ee:	f6 95       	lsr	r31
    39f0:	87 95       	ror	r24
    39f2:	77 95       	ror	r23
    39f4:	67 95       	ror	r22
    39f6:	b7 95       	ror	r27
    39f8:	f1 11       	cpse	r31, r1
    39fa:	f8 cf       	rjmp	.-16     	; 0x39ec <__floatsisf+0x1c>
    39fc:	fa f4       	brpl	.+62     	; 0x3a3c <__floatsisf+0x6c>
    39fe:	bb 0f       	add	r27, r27
    3a00:	11 f4       	brne	.+4      	; 0x3a06 <__floatsisf+0x36>
    3a02:	60 ff       	sbrs	r22, 0
    3a04:	1b c0       	rjmp	.+54     	; 0x3a3c <__floatsisf+0x6c>
    3a06:	6f 5f       	subi	r22, 0xFF	; 255
    3a08:	7f 4f       	sbci	r23, 0xFF	; 255
    3a0a:	8f 4f       	sbci	r24, 0xFF	; 255
    3a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0e:	16 c0       	rjmp	.+44     	; 0x3a3c <__floatsisf+0x6c>
    3a10:	88 23       	and	r24, r24
    3a12:	11 f0       	breq	.+4      	; 0x3a18 <__floatsisf+0x48>
    3a14:	96 e9       	ldi	r25, 0x96	; 150
    3a16:	11 c0       	rjmp	.+34     	; 0x3a3a <__floatsisf+0x6a>
    3a18:	77 23       	and	r23, r23
    3a1a:	21 f0       	breq	.+8      	; 0x3a24 <__floatsisf+0x54>
    3a1c:	9e e8       	ldi	r25, 0x8E	; 142
    3a1e:	87 2f       	mov	r24, r23
    3a20:	76 2f       	mov	r23, r22
    3a22:	05 c0       	rjmp	.+10     	; 0x3a2e <__floatsisf+0x5e>
    3a24:	66 23       	and	r22, r22
    3a26:	71 f0       	breq	.+28     	; 0x3a44 <__floatsisf+0x74>
    3a28:	96 e8       	ldi	r25, 0x86	; 134
    3a2a:	86 2f       	mov	r24, r22
    3a2c:	70 e0       	ldi	r23, 0x00	; 0
    3a2e:	60 e0       	ldi	r22, 0x00	; 0
    3a30:	2a f0       	brmi	.+10     	; 0x3a3c <__floatsisf+0x6c>
    3a32:	9a 95       	dec	r25
    3a34:	66 0f       	add	r22, r22
    3a36:	77 1f       	adc	r23, r23
    3a38:	88 1f       	adc	r24, r24
    3a3a:	da f7       	brpl	.-10     	; 0x3a32 <__floatsisf+0x62>
    3a3c:	88 0f       	add	r24, r24
    3a3e:	96 95       	lsr	r25
    3a40:	87 95       	ror	r24
    3a42:	97 f9       	bld	r25, 7
    3a44:	08 95       	ret

00003a46 <__fp_inf>:
    3a46:	97 f9       	bld	r25, 7
    3a48:	9f 67       	ori	r25, 0x7F	; 127
    3a4a:	80 e8       	ldi	r24, 0x80	; 128
    3a4c:	70 e0       	ldi	r23, 0x00	; 0
    3a4e:	60 e0       	ldi	r22, 0x00	; 0
    3a50:	08 95       	ret

00003a52 <__fp_nan>:
    3a52:	9f ef       	ldi	r25, 0xFF	; 255
    3a54:	80 ec       	ldi	r24, 0xC0	; 192
    3a56:	08 95       	ret

00003a58 <__fp_pscA>:
    3a58:	00 24       	eor	r0, r0
    3a5a:	0a 94       	dec	r0
    3a5c:	16 16       	cp	r1, r22
    3a5e:	17 06       	cpc	r1, r23
    3a60:	18 06       	cpc	r1, r24
    3a62:	09 06       	cpc	r0, r25
    3a64:	08 95       	ret

00003a66 <__fp_pscB>:
    3a66:	00 24       	eor	r0, r0
    3a68:	0a 94       	dec	r0
    3a6a:	12 16       	cp	r1, r18
    3a6c:	13 06       	cpc	r1, r19
    3a6e:	14 06       	cpc	r1, r20
    3a70:	05 06       	cpc	r0, r21
    3a72:	08 95       	ret

00003a74 <__fp_round>:
    3a74:	09 2e       	mov	r0, r25
    3a76:	03 94       	inc	r0
    3a78:	00 0c       	add	r0, r0
    3a7a:	11 f4       	brne	.+4      	; 0x3a80 <__fp_round+0xc>
    3a7c:	88 23       	and	r24, r24
    3a7e:	52 f0       	brmi	.+20     	; 0x3a94 <__fp_round+0x20>
    3a80:	bb 0f       	add	r27, r27
    3a82:	40 f4       	brcc	.+16     	; 0x3a94 <__fp_round+0x20>
    3a84:	bf 2b       	or	r27, r31
    3a86:	11 f4       	brne	.+4      	; 0x3a8c <__fp_round+0x18>
    3a88:	60 ff       	sbrs	r22, 0
    3a8a:	04 c0       	rjmp	.+8      	; 0x3a94 <__fp_round+0x20>
    3a8c:	6f 5f       	subi	r22, 0xFF	; 255
    3a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a90:	8f 4f       	sbci	r24, 0xFF	; 255
    3a92:	9f 4f       	sbci	r25, 0xFF	; 255
    3a94:	08 95       	ret

00003a96 <__fp_split3>:
    3a96:	57 fd       	sbrc	r21, 7
    3a98:	90 58       	subi	r25, 0x80	; 128
    3a9a:	44 0f       	add	r20, r20
    3a9c:	55 1f       	adc	r21, r21
    3a9e:	59 f0       	breq	.+22     	; 0x3ab6 <__fp_splitA+0x10>
    3aa0:	5f 3f       	cpi	r21, 0xFF	; 255
    3aa2:	71 f0       	breq	.+28     	; 0x3ac0 <__fp_splitA+0x1a>
    3aa4:	47 95       	ror	r20

00003aa6 <__fp_splitA>:
    3aa6:	88 0f       	add	r24, r24
    3aa8:	97 fb       	bst	r25, 7
    3aaa:	99 1f       	adc	r25, r25
    3aac:	61 f0       	breq	.+24     	; 0x3ac6 <__fp_splitA+0x20>
    3aae:	9f 3f       	cpi	r25, 0xFF	; 255
    3ab0:	79 f0       	breq	.+30     	; 0x3ad0 <__fp_splitA+0x2a>
    3ab2:	87 95       	ror	r24
    3ab4:	08 95       	ret
    3ab6:	12 16       	cp	r1, r18
    3ab8:	13 06       	cpc	r1, r19
    3aba:	14 06       	cpc	r1, r20
    3abc:	55 1f       	adc	r21, r21
    3abe:	f2 cf       	rjmp	.-28     	; 0x3aa4 <__fp_split3+0xe>
    3ac0:	46 95       	lsr	r20
    3ac2:	f1 df       	rcall	.-30     	; 0x3aa6 <__fp_splitA>
    3ac4:	08 c0       	rjmp	.+16     	; 0x3ad6 <__fp_splitA+0x30>
    3ac6:	16 16       	cp	r1, r22
    3ac8:	17 06       	cpc	r1, r23
    3aca:	18 06       	cpc	r1, r24
    3acc:	99 1f       	adc	r25, r25
    3ace:	f1 cf       	rjmp	.-30     	; 0x3ab2 <__fp_splitA+0xc>
    3ad0:	86 95       	lsr	r24
    3ad2:	71 05       	cpc	r23, r1
    3ad4:	61 05       	cpc	r22, r1
    3ad6:	08 94       	sec
    3ad8:	08 95       	ret

00003ada <__fp_zero>:
    3ada:	e8 94       	clt

00003adc <__fp_szero>:
    3adc:	bb 27       	eor	r27, r27
    3ade:	66 27       	eor	r22, r22
    3ae0:	77 27       	eor	r23, r23
    3ae2:	cb 01       	movw	r24, r22
    3ae4:	97 f9       	bld	r25, 7
    3ae6:	08 95       	ret

00003ae8 <pow>:
    3ae8:	fa 01       	movw	r30, r20
    3aea:	ee 0f       	add	r30, r30
    3aec:	ff 1f       	adc	r31, r31
    3aee:	30 96       	adiw	r30, 0x00	; 0
    3af0:	21 05       	cpc	r18, r1
    3af2:	31 05       	cpc	r19, r1
    3af4:	a1 f1       	breq	.+104    	; 0x3b5e <pow+0x76>
    3af6:	61 15       	cp	r22, r1
    3af8:	71 05       	cpc	r23, r1
    3afa:	61 f4       	brne	.+24     	; 0x3b14 <pow+0x2c>
    3afc:	80 38       	cpi	r24, 0x80	; 128
    3afe:	bf e3       	ldi	r27, 0x3F	; 63
    3b00:	9b 07       	cpc	r25, r27
    3b02:	49 f1       	breq	.+82     	; 0x3b56 <pow+0x6e>
    3b04:	68 94       	set
    3b06:	90 38       	cpi	r25, 0x80	; 128
    3b08:	81 05       	cpc	r24, r1
    3b0a:	61 f0       	breq	.+24     	; 0x3b24 <pow+0x3c>
    3b0c:	80 38       	cpi	r24, 0x80	; 128
    3b0e:	bf ef       	ldi	r27, 0xFF	; 255
    3b10:	9b 07       	cpc	r25, r27
    3b12:	41 f0       	breq	.+16     	; 0x3b24 <pow+0x3c>
    3b14:	99 23       	and	r25, r25
    3b16:	4a f5       	brpl	.+82     	; 0x3b6a <pow+0x82>
    3b18:	ff 3f       	cpi	r31, 0xFF	; 255
    3b1a:	e1 05       	cpc	r30, r1
    3b1c:	31 05       	cpc	r19, r1
    3b1e:	21 05       	cpc	r18, r1
    3b20:	19 f1       	breq	.+70     	; 0x3b68 <pow+0x80>
    3b22:	e8 94       	clt
    3b24:	08 94       	sec
    3b26:	e7 95       	ror	r30
    3b28:	d9 01       	movw	r26, r18
    3b2a:	aa 23       	and	r26, r26
    3b2c:	29 f4       	brne	.+10     	; 0x3b38 <pow+0x50>
    3b2e:	ab 2f       	mov	r26, r27
    3b30:	be 2f       	mov	r27, r30
    3b32:	f8 5f       	subi	r31, 0xF8	; 248
    3b34:	d0 f3       	brcs	.-12     	; 0x3b2a <pow+0x42>
    3b36:	10 c0       	rjmp	.+32     	; 0x3b58 <pow+0x70>
    3b38:	ff 5f       	subi	r31, 0xFF	; 255
    3b3a:	70 f4       	brcc	.+28     	; 0x3b58 <pow+0x70>
    3b3c:	a6 95       	lsr	r26
    3b3e:	e0 f7       	brcc	.-8      	; 0x3b38 <pow+0x50>
    3b40:	f7 39       	cpi	r31, 0x97	; 151
    3b42:	50 f0       	brcs	.+20     	; 0x3b58 <pow+0x70>
    3b44:	19 f0       	breq	.+6      	; 0x3b4c <pow+0x64>
    3b46:	ff 3a       	cpi	r31, 0xAF	; 175
    3b48:	38 f4       	brcc	.+14     	; 0x3b58 <pow+0x70>
    3b4a:	9f 77       	andi	r25, 0x7F	; 127
    3b4c:	9f 93       	push	r25
    3b4e:	0d d0       	rcall	.+26     	; 0x3b6a <pow+0x82>
    3b50:	0f 90       	pop	r0
    3b52:	07 fc       	sbrc	r0, 7
    3b54:	90 58       	subi	r25, 0x80	; 128
    3b56:	08 95       	ret
    3b58:	46 f0       	brts	.+16     	; 0x3b6a <pow+0x82>
    3b5a:	0c 94 29 1d 	jmp	0x3a52	; 0x3a52 <__fp_nan>
    3b5e:	60 e0       	ldi	r22, 0x00	; 0
    3b60:	70 e0       	ldi	r23, 0x00	; 0
    3b62:	80 e8       	ldi	r24, 0x80	; 128
    3b64:	9f e3       	ldi	r25, 0x3F	; 63
    3b66:	08 95       	ret
    3b68:	4f e7       	ldi	r20, 0x7F	; 127
    3b6a:	9f 77       	andi	r25, 0x7F	; 127
    3b6c:	5f 93       	push	r21
    3b6e:	4f 93       	push	r20
    3b70:	3f 93       	push	r19
    3b72:	2f 93       	push	r18
    3b74:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <log>
    3b78:	2f 91       	pop	r18
    3b7a:	3f 91       	pop	r19
    3b7c:	4f 91       	pop	r20
    3b7e:	5f 91       	pop	r21
    3b80:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <__mulsf3>
    3b84:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <exp>
    3b88:	29 f4       	brne	.+10     	; 0x3b94 <pow+0xac>
    3b8a:	16 f0       	brts	.+4      	; 0x3b90 <pow+0xa8>
    3b8c:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <__fp_inf>
    3b90:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <__fp_zero>
    3b94:	0c 94 29 1d 	jmp	0x3a52	; 0x3a52 <__fp_nan>

00003b98 <exp>:
    3b98:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__fp_splitA>
    3b9c:	a8 f3       	brcs	.-22     	; 0x3b88 <pow+0xa0>
    3b9e:	96 38       	cpi	r25, 0x86	; 134
    3ba0:	a0 f7       	brcc	.-24     	; 0x3b8a <pow+0xa2>
    3ba2:	07 f8       	bld	r0, 7
    3ba4:	0f 92       	push	r0
    3ba6:	e8 94       	clt
    3ba8:	2b e3       	ldi	r18, 0x3B	; 59
    3baa:	3a ea       	ldi	r19, 0xAA	; 170
    3bac:	48 eb       	ldi	r20, 0xB8	; 184
    3bae:	5f e7       	ldi	r21, 0x7F	; 127
    3bb0:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__mulsf3_pse>
    3bb4:	0f 92       	push	r0
    3bb6:	0f 92       	push	r0
    3bb8:	0f 92       	push	r0
    3bba:	4d b7       	in	r20, 0x3d	; 61
    3bbc:	5e b7       	in	r21, 0x3e	; 62
    3bbe:	0f 92       	push	r0
    3bc0:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <modf>
    3bc4:	ec e7       	ldi	r30, 0x7C	; 124
    3bc6:	f0 e0       	ldi	r31, 0x00	; 0
    3bc8:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__fp_powser>
    3bcc:	4f 91       	pop	r20
    3bce:	5f 91       	pop	r21
    3bd0:	ef 91       	pop	r30
    3bd2:	ff 91       	pop	r31
    3bd4:	e5 95       	asr	r30
    3bd6:	ee 1f       	adc	r30, r30
    3bd8:	ff 1f       	adc	r31, r31
    3bda:	49 f0       	breq	.+18     	; 0x3bee <exp+0x56>
    3bdc:	fe 57       	subi	r31, 0x7E	; 126
    3bde:	e0 68       	ori	r30, 0x80	; 128
    3be0:	44 27       	eor	r20, r20
    3be2:	ee 0f       	add	r30, r30
    3be4:	44 1f       	adc	r20, r20
    3be6:	fa 95       	dec	r31
    3be8:	e1 f7       	brne	.-8      	; 0x3be2 <exp+0x4a>
    3bea:	41 95       	neg	r20
    3bec:	55 0b       	sbc	r21, r21
    3bee:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <ldexp>
    3bf2:	0f 90       	pop	r0
    3bf4:	07 fe       	sbrs	r0, 7
    3bf6:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <inverse>
    3bfa:	08 95       	ret

00003bfc <__fp_powser>:
    3bfc:	df 93       	push	r29
    3bfe:	cf 93       	push	r28
    3c00:	1f 93       	push	r17
    3c02:	0f 93       	push	r16
    3c04:	ff 92       	push	r15
    3c06:	ef 92       	push	r14
    3c08:	df 92       	push	r13
    3c0a:	7b 01       	movw	r14, r22
    3c0c:	8c 01       	movw	r16, r24
    3c0e:	68 94       	set
    3c10:	06 c0       	rjmp	.+12     	; 0x3c1e <__fp_powser+0x22>
    3c12:	da 2e       	mov	r13, r26
    3c14:	ef 01       	movw	r28, r30
    3c16:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__mulsf3x>
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	e8 94       	clt
    3c1e:	a5 91       	lpm	r26, Z+
    3c20:	25 91       	lpm	r18, Z+
    3c22:	35 91       	lpm	r19, Z+
    3c24:	45 91       	lpm	r20, Z+
    3c26:	55 91       	lpm	r21, Z+
    3c28:	a6 f3       	brts	.-24     	; 0x3c12 <__fp_powser+0x16>
    3c2a:	ef 01       	movw	r28, r30
    3c2c:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__addsf3x>
    3c30:	fe 01       	movw	r30, r28
    3c32:	97 01       	movw	r18, r14
    3c34:	a8 01       	movw	r20, r16
    3c36:	da 94       	dec	r13
    3c38:	69 f7       	brne	.-38     	; 0x3c14 <__fp_powser+0x18>
    3c3a:	df 90       	pop	r13
    3c3c:	ef 90       	pop	r14
    3c3e:	ff 90       	pop	r15
    3c40:	0f 91       	pop	r16
    3c42:	1f 91       	pop	r17
    3c44:	cf 91       	pop	r28
    3c46:	df 91       	pop	r29
    3c48:	08 95       	ret

00003c4a <inverse>:
    3c4a:	9b 01       	movw	r18, r22
    3c4c:	ac 01       	movw	r20, r24
    3c4e:	60 e0       	ldi	r22, 0x00	; 0
    3c50:	70 e0       	ldi	r23, 0x00	; 0
    3c52:	80 e8       	ldi	r24, 0x80	; 128
    3c54:	9f e3       	ldi	r25, 0x3F	; 63
    3c56:	0c 94 58 1f 	jmp	0x3eb0	; 0x3eb0 <__divsf3>
    3c5a:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <__fp_inf>
    3c5e:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <__fp_mpack>

00003c62 <ldexp>:
    3c62:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__fp_splitA>
    3c66:	d8 f3       	brcs	.-10     	; 0x3c5e <inverse+0x14>
    3c68:	99 23       	and	r25, r25
    3c6a:	c9 f3       	breq	.-14     	; 0x3c5e <inverse+0x14>
    3c6c:	94 0f       	add	r25, r20
    3c6e:	51 1d       	adc	r21, r1
    3c70:	a3 f3       	brvs	.-24     	; 0x3c5a <inverse+0x10>
    3c72:	91 50       	subi	r25, 0x01	; 1
    3c74:	50 40       	sbci	r21, 0x00	; 0
    3c76:	94 f0       	brlt	.+36     	; 0x3c9c <ldexp+0x3a>
    3c78:	59 f0       	breq	.+22     	; 0x3c90 <ldexp+0x2e>
    3c7a:	88 23       	and	r24, r24
    3c7c:	32 f0       	brmi	.+12     	; 0x3c8a <ldexp+0x28>
    3c7e:	66 0f       	add	r22, r22
    3c80:	77 1f       	adc	r23, r23
    3c82:	88 1f       	adc	r24, r24
    3c84:	91 50       	subi	r25, 0x01	; 1
    3c86:	50 40       	sbci	r21, 0x00	; 0
    3c88:	c1 f7       	brne	.-16     	; 0x3c7a <ldexp+0x18>
    3c8a:	9e 3f       	cpi	r25, 0xFE	; 254
    3c8c:	51 05       	cpc	r21, r1
    3c8e:	2c f7       	brge	.-54     	; 0x3c5a <inverse+0x10>
    3c90:	88 0f       	add	r24, r24
    3c92:	91 1d       	adc	r25, r1
    3c94:	96 95       	lsr	r25
    3c96:	87 95       	ror	r24
    3c98:	97 f9       	bld	r25, 7
    3c9a:	08 95       	ret
    3c9c:	5f 3f       	cpi	r21, 0xFF	; 255
    3c9e:	ac f0       	brlt	.+42     	; 0x3cca <ldexp+0x68>
    3ca0:	98 3e       	cpi	r25, 0xE8	; 232
    3ca2:	9c f0       	brlt	.+38     	; 0x3cca <ldexp+0x68>
    3ca4:	bb 27       	eor	r27, r27
    3ca6:	86 95       	lsr	r24
    3ca8:	77 95       	ror	r23
    3caa:	67 95       	ror	r22
    3cac:	b7 95       	ror	r27
    3cae:	08 f4       	brcc	.+2      	; 0x3cb2 <ldexp+0x50>
    3cb0:	b1 60       	ori	r27, 0x01	; 1
    3cb2:	93 95       	inc	r25
    3cb4:	c1 f7       	brne	.-16     	; 0x3ca6 <ldexp+0x44>
    3cb6:	bb 0f       	add	r27, r27
    3cb8:	58 f7       	brcc	.-42     	; 0x3c90 <ldexp+0x2e>
    3cba:	11 f4       	brne	.+4      	; 0x3cc0 <ldexp+0x5e>
    3cbc:	60 ff       	sbrs	r22, 0
    3cbe:	e8 cf       	rjmp	.-48     	; 0x3c90 <ldexp+0x2e>
    3cc0:	6f 5f       	subi	r22, 0xFF	; 255
    3cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc4:	8f 4f       	sbci	r24, 0xFF	; 255
    3cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc8:	e3 cf       	rjmp	.-58     	; 0x3c90 <ldexp+0x2e>
    3cca:	0c 94 6e 1d 	jmp	0x3adc	; 0x3adc <__fp_szero>
    3cce:	16 f0       	brts	.+4      	; 0x3cd4 <ldexp+0x72>
    3cd0:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <__fp_mpack>
    3cd4:	0c 94 29 1d 	jmp	0x3a52	; 0x3a52 <__fp_nan>
    3cd8:	68 94       	set
    3cda:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <__fp_inf>

00003cde <log>:
    3cde:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__fp_splitA>
    3ce2:	a8 f3       	brcs	.-22     	; 0x3cce <ldexp+0x6c>
    3ce4:	99 23       	and	r25, r25
    3ce6:	c1 f3       	breq	.-16     	; 0x3cd8 <ldexp+0x76>
    3ce8:	ae f3       	brts	.-22     	; 0x3cd4 <ldexp+0x72>
    3cea:	df 93       	push	r29
    3cec:	cf 93       	push	r28
    3cee:	1f 93       	push	r17
    3cf0:	0f 93       	push	r16
    3cf2:	ff 92       	push	r15
    3cf4:	c9 2f       	mov	r28, r25
    3cf6:	dd 27       	eor	r29, r29
    3cf8:	88 23       	and	r24, r24
    3cfa:	2a f0       	brmi	.+10     	; 0x3d06 <log+0x28>
    3cfc:	21 97       	sbiw	r28, 0x01	; 1
    3cfe:	66 0f       	add	r22, r22
    3d00:	77 1f       	adc	r23, r23
    3d02:	88 1f       	adc	r24, r24
    3d04:	da f7       	brpl	.-10     	; 0x3cfc <log+0x1e>
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	40 e8       	ldi	r20, 0x80	; 128
    3d0c:	5f eb       	ldi	r21, 0xBF	; 191
    3d0e:	9f e3       	ldi	r25, 0x3F	; 63
    3d10:	88 39       	cpi	r24, 0x98	; 152
    3d12:	20 f0       	brcs	.+8      	; 0x3d1c <log+0x3e>
    3d14:	80 3e       	cpi	r24, 0xE0	; 224
    3d16:	38 f0       	brcs	.+14     	; 0x3d26 <log+0x48>
    3d18:	21 96       	adiw	r28, 0x01	; 1
    3d1a:	8f 77       	andi	r24, 0x7F	; 127
    3d1c:	0e 94 44 1c 	call	0x3888	; 0x3888 <__addsf3>
    3d20:	e4 ea       	ldi	r30, 0xA4	; 164
    3d22:	f0 e0       	ldi	r31, 0x00	; 0
    3d24:	04 c0       	rjmp	.+8      	; 0x3d2e <log+0x50>
    3d26:	0e 94 44 1c 	call	0x3888	; 0x3888 <__addsf3>
    3d2a:	e1 ed       	ldi	r30, 0xD1	; 209
    3d2c:	f0 e0       	ldi	r31, 0x00	; 0
    3d2e:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__fp_powser>
    3d32:	8b 01       	movw	r16, r22
    3d34:	be 01       	movw	r22, r28
    3d36:	ec 01       	movw	r28, r24
    3d38:	fb 2e       	mov	r15, r27
    3d3a:	6f 57       	subi	r22, 0x7F	; 127
    3d3c:	71 09       	sbc	r23, r1
    3d3e:	75 95       	asr	r23
    3d40:	77 1f       	adc	r23, r23
    3d42:	88 0b       	sbc	r24, r24
    3d44:	99 0b       	sbc	r25, r25
    3d46:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    3d4a:	28 e1       	ldi	r18, 0x18	; 24
    3d4c:	32 e7       	ldi	r19, 0x72	; 114
    3d4e:	41 e3       	ldi	r20, 0x31	; 49
    3d50:	5f e3       	ldi	r21, 0x3F	; 63
    3d52:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__mulsf3x>
    3d56:	af 2d       	mov	r26, r15
    3d58:	98 01       	movw	r18, r16
    3d5a:	ae 01       	movw	r20, r28
    3d5c:	ff 90       	pop	r15
    3d5e:	0f 91       	pop	r16
    3d60:	1f 91       	pop	r17
    3d62:	cf 91       	pop	r28
    3d64:	df 91       	pop	r29
    3d66:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__addsf3x>
    3d6a:	0c 94 3a 1d 	jmp	0x3a74	; 0x3a74 <__fp_round>

00003d6e <modf>:
    3d6e:	fa 01       	movw	r30, r20
    3d70:	dc 01       	movw	r26, r24
    3d72:	aa 0f       	add	r26, r26
    3d74:	bb 1f       	adc	r27, r27
    3d76:	9b 01       	movw	r18, r22
    3d78:	ac 01       	movw	r20, r24
    3d7a:	bf 57       	subi	r27, 0x7F	; 127
    3d7c:	28 f4       	brcc	.+10     	; 0x3d88 <modf+0x1a>
    3d7e:	22 27       	eor	r18, r18
    3d80:	33 27       	eor	r19, r19
    3d82:	44 27       	eor	r20, r20
    3d84:	50 78       	andi	r21, 0x80	; 128
    3d86:	20 c0       	rjmp	.+64     	; 0x3dc8 <modf+0x5a>
    3d88:	b7 51       	subi	r27, 0x17	; 23
    3d8a:	90 f4       	brcc	.+36     	; 0x3db0 <modf+0x42>
    3d8c:	ab 2f       	mov	r26, r27
    3d8e:	00 24       	eor	r0, r0
    3d90:	46 95       	lsr	r20
    3d92:	37 95       	ror	r19
    3d94:	27 95       	ror	r18
    3d96:	01 1c       	adc	r0, r1
    3d98:	a3 95       	inc	r26
    3d9a:	d2 f3       	brmi	.-12     	; 0x3d90 <modf+0x22>
    3d9c:	00 20       	and	r0, r0
    3d9e:	71 f0       	breq	.+28     	; 0x3dbc <modf+0x4e>
    3da0:	22 0f       	add	r18, r18
    3da2:	33 1f       	adc	r19, r19
    3da4:	44 1f       	adc	r20, r20
    3da6:	b3 95       	inc	r27
    3da8:	da f3       	brmi	.-10     	; 0x3da0 <modf+0x32>
    3daa:	0e d0       	rcall	.+28     	; 0x3dc8 <modf+0x5a>
    3dac:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <__subsf3>
    3db0:	61 30       	cpi	r22, 0x01	; 1
    3db2:	71 05       	cpc	r23, r1
    3db4:	a0 e8       	ldi	r26, 0x80	; 128
    3db6:	8a 07       	cpc	r24, r26
    3db8:	b9 46       	sbci	r27, 0x69	; 105
    3dba:	30 f4       	brcc	.+12     	; 0x3dc8 <modf+0x5a>
    3dbc:	9b 01       	movw	r18, r22
    3dbe:	ac 01       	movw	r20, r24
    3dc0:	66 27       	eor	r22, r22
    3dc2:	77 27       	eor	r23, r23
    3dc4:	88 27       	eor	r24, r24
    3dc6:	90 78       	andi	r25, 0x80	; 128
    3dc8:	30 96       	adiw	r30, 0x00	; 0
    3dca:	21 f0       	breq	.+8      	; 0x3dd4 <modf+0x66>
    3dcc:	20 83       	st	Z, r18
    3dce:	31 83       	std	Z+1, r19	; 0x01
    3dd0:	42 83       	std	Z+2, r20	; 0x02
    3dd2:	53 83       	std	Z+3, r21	; 0x03
    3dd4:	08 95       	ret

00003dd6 <__mulsf3>:
    3dd6:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__mulsf3x>
    3dda:	0c 94 3a 1d 	jmp	0x3a74	; 0x3a74 <__fp_round>
    3dde:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <__fp_pscA>
    3de2:	38 f0       	brcs	.+14     	; 0x3df2 <__mulsf3+0x1c>
    3de4:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <__fp_pscB>
    3de8:	20 f0       	brcs	.+8      	; 0x3df2 <__mulsf3+0x1c>
    3dea:	95 23       	and	r25, r21
    3dec:	11 f0       	breq	.+4      	; 0x3df2 <__mulsf3+0x1c>
    3dee:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <__fp_inf>
    3df2:	0c 94 29 1d 	jmp	0x3a52	; 0x3a52 <__fp_nan>
    3df6:	11 24       	eor	r1, r1
    3df8:	0c 94 6e 1d 	jmp	0x3adc	; 0x3adc <__fp_szero>

00003dfc <__mulsf3x>:
    3dfc:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <__fp_split3>
    3e00:	70 f3       	brcs	.-36     	; 0x3dde <__mulsf3+0x8>

00003e02 <__mulsf3_pse>:
    3e02:	95 9f       	mul	r25, r21
    3e04:	c1 f3       	breq	.-16     	; 0x3df6 <__mulsf3+0x20>
    3e06:	95 0f       	add	r25, r21
    3e08:	50 e0       	ldi	r21, 0x00	; 0
    3e0a:	55 1f       	adc	r21, r21
    3e0c:	62 9f       	mul	r22, r18
    3e0e:	f0 01       	movw	r30, r0
    3e10:	72 9f       	mul	r23, r18
    3e12:	bb 27       	eor	r27, r27
    3e14:	f0 0d       	add	r31, r0
    3e16:	b1 1d       	adc	r27, r1
    3e18:	63 9f       	mul	r22, r19
    3e1a:	aa 27       	eor	r26, r26
    3e1c:	f0 0d       	add	r31, r0
    3e1e:	b1 1d       	adc	r27, r1
    3e20:	aa 1f       	adc	r26, r26
    3e22:	64 9f       	mul	r22, r20
    3e24:	66 27       	eor	r22, r22
    3e26:	b0 0d       	add	r27, r0
    3e28:	a1 1d       	adc	r26, r1
    3e2a:	66 1f       	adc	r22, r22
    3e2c:	82 9f       	mul	r24, r18
    3e2e:	22 27       	eor	r18, r18
    3e30:	b0 0d       	add	r27, r0
    3e32:	a1 1d       	adc	r26, r1
    3e34:	62 1f       	adc	r22, r18
    3e36:	73 9f       	mul	r23, r19
    3e38:	b0 0d       	add	r27, r0
    3e3a:	a1 1d       	adc	r26, r1
    3e3c:	62 1f       	adc	r22, r18
    3e3e:	83 9f       	mul	r24, r19
    3e40:	a0 0d       	add	r26, r0
    3e42:	61 1d       	adc	r22, r1
    3e44:	22 1f       	adc	r18, r18
    3e46:	74 9f       	mul	r23, r20
    3e48:	33 27       	eor	r19, r19
    3e4a:	a0 0d       	add	r26, r0
    3e4c:	61 1d       	adc	r22, r1
    3e4e:	23 1f       	adc	r18, r19
    3e50:	84 9f       	mul	r24, r20
    3e52:	60 0d       	add	r22, r0
    3e54:	21 1d       	adc	r18, r1
    3e56:	82 2f       	mov	r24, r18
    3e58:	76 2f       	mov	r23, r22
    3e5a:	6a 2f       	mov	r22, r26
    3e5c:	11 24       	eor	r1, r1
    3e5e:	9f 57       	subi	r25, 0x7F	; 127
    3e60:	50 40       	sbci	r21, 0x00	; 0
    3e62:	9a f0       	brmi	.+38     	; 0x3e8a <__mulsf3_pse+0x88>
    3e64:	f1 f0       	breq	.+60     	; 0x3ea2 <__mulsf3_pse+0xa0>
    3e66:	88 23       	and	r24, r24
    3e68:	4a f0       	brmi	.+18     	; 0x3e7c <__mulsf3_pse+0x7a>
    3e6a:	ee 0f       	add	r30, r30
    3e6c:	ff 1f       	adc	r31, r31
    3e6e:	bb 1f       	adc	r27, r27
    3e70:	66 1f       	adc	r22, r22
    3e72:	77 1f       	adc	r23, r23
    3e74:	88 1f       	adc	r24, r24
    3e76:	91 50       	subi	r25, 0x01	; 1
    3e78:	50 40       	sbci	r21, 0x00	; 0
    3e7a:	a9 f7       	brne	.-22     	; 0x3e66 <__mulsf3_pse+0x64>
    3e7c:	9e 3f       	cpi	r25, 0xFE	; 254
    3e7e:	51 05       	cpc	r21, r1
    3e80:	80 f0       	brcs	.+32     	; 0x3ea2 <__mulsf3_pse+0xa0>
    3e82:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <__fp_inf>
    3e86:	0c 94 6e 1d 	jmp	0x3adc	; 0x3adc <__fp_szero>
    3e8a:	5f 3f       	cpi	r21, 0xFF	; 255
    3e8c:	e4 f3       	brlt	.-8      	; 0x3e86 <__mulsf3_pse+0x84>
    3e8e:	98 3e       	cpi	r25, 0xE8	; 232
    3e90:	d4 f3       	brlt	.-12     	; 0x3e86 <__mulsf3_pse+0x84>
    3e92:	86 95       	lsr	r24
    3e94:	77 95       	ror	r23
    3e96:	67 95       	ror	r22
    3e98:	b7 95       	ror	r27
    3e9a:	f7 95       	ror	r31
    3e9c:	e7 95       	ror	r30
    3e9e:	9f 5f       	subi	r25, 0xFF	; 255
    3ea0:	c1 f7       	brne	.-16     	; 0x3e92 <__mulsf3_pse+0x90>
    3ea2:	fe 2b       	or	r31, r30
    3ea4:	88 0f       	add	r24, r24
    3ea6:	91 1d       	adc	r25, r1
    3ea8:	96 95       	lsr	r25
    3eaa:	87 95       	ror	r24
    3eac:	97 f9       	bld	r25, 7
    3eae:	08 95       	ret

00003eb0 <__divsf3>:
    3eb0:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <__divsf3x>
    3eb4:	0c 94 3a 1d 	jmp	0x3a74	; 0x3a74 <__fp_round>
    3eb8:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <__fp_pscB>
    3ebc:	58 f0       	brcs	.+22     	; 0x3ed4 <__divsf3+0x24>
    3ebe:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <__fp_pscA>
    3ec2:	40 f0       	brcs	.+16     	; 0x3ed4 <__divsf3+0x24>
    3ec4:	29 f4       	brne	.+10     	; 0x3ed0 <__divsf3+0x20>
    3ec6:	5f 3f       	cpi	r21, 0xFF	; 255
    3ec8:	29 f0       	breq	.+10     	; 0x3ed4 <__divsf3+0x24>
    3eca:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <__fp_inf>
    3ece:	51 11       	cpse	r21, r1
    3ed0:	0c 94 6e 1d 	jmp	0x3adc	; 0x3adc <__fp_szero>
    3ed4:	0c 94 29 1d 	jmp	0x3a52	; 0x3a52 <__fp_nan>

00003ed8 <__divsf3x>:
    3ed8:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <__fp_split3>
    3edc:	68 f3       	brcs	.-38     	; 0x3eb8 <__divsf3+0x8>

00003ede <__divsf3_pse>:
    3ede:	99 23       	and	r25, r25
    3ee0:	b1 f3       	breq	.-20     	; 0x3ece <__divsf3+0x1e>
    3ee2:	55 23       	and	r21, r21
    3ee4:	91 f3       	breq	.-28     	; 0x3eca <__divsf3+0x1a>
    3ee6:	95 1b       	sub	r25, r21
    3ee8:	55 0b       	sbc	r21, r21
    3eea:	bb 27       	eor	r27, r27
    3eec:	aa 27       	eor	r26, r26
    3eee:	62 17       	cp	r22, r18
    3ef0:	73 07       	cpc	r23, r19
    3ef2:	84 07       	cpc	r24, r20
    3ef4:	38 f0       	brcs	.+14     	; 0x3f04 <__divsf3_pse+0x26>
    3ef6:	9f 5f       	subi	r25, 0xFF	; 255
    3ef8:	5f 4f       	sbci	r21, 0xFF	; 255
    3efa:	22 0f       	add	r18, r18
    3efc:	33 1f       	adc	r19, r19
    3efe:	44 1f       	adc	r20, r20
    3f00:	aa 1f       	adc	r26, r26
    3f02:	a9 f3       	breq	.-22     	; 0x3eee <__divsf3_pse+0x10>
    3f04:	35 d0       	rcall	.+106    	; 0x3f70 <__divsf3_pse+0x92>
    3f06:	0e 2e       	mov	r0, r30
    3f08:	3a f0       	brmi	.+14     	; 0x3f18 <__divsf3_pse+0x3a>
    3f0a:	e0 e8       	ldi	r30, 0x80	; 128
    3f0c:	32 d0       	rcall	.+100    	; 0x3f72 <__divsf3_pse+0x94>
    3f0e:	91 50       	subi	r25, 0x01	; 1
    3f10:	50 40       	sbci	r21, 0x00	; 0
    3f12:	e6 95       	lsr	r30
    3f14:	00 1c       	adc	r0, r0
    3f16:	ca f7       	brpl	.-14     	; 0x3f0a <__divsf3_pse+0x2c>
    3f18:	2b d0       	rcall	.+86     	; 0x3f70 <__divsf3_pse+0x92>
    3f1a:	fe 2f       	mov	r31, r30
    3f1c:	29 d0       	rcall	.+82     	; 0x3f70 <__divsf3_pse+0x92>
    3f1e:	66 0f       	add	r22, r22
    3f20:	77 1f       	adc	r23, r23
    3f22:	88 1f       	adc	r24, r24
    3f24:	bb 1f       	adc	r27, r27
    3f26:	26 17       	cp	r18, r22
    3f28:	37 07       	cpc	r19, r23
    3f2a:	48 07       	cpc	r20, r24
    3f2c:	ab 07       	cpc	r26, r27
    3f2e:	b0 e8       	ldi	r27, 0x80	; 128
    3f30:	09 f0       	breq	.+2      	; 0x3f34 <__divsf3_pse+0x56>
    3f32:	bb 0b       	sbc	r27, r27
    3f34:	80 2d       	mov	r24, r0
    3f36:	bf 01       	movw	r22, r30
    3f38:	ff 27       	eor	r31, r31
    3f3a:	93 58       	subi	r25, 0x83	; 131
    3f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f3e:	3a f0       	brmi	.+14     	; 0x3f4e <__divsf3_pse+0x70>
    3f40:	9e 3f       	cpi	r25, 0xFE	; 254
    3f42:	51 05       	cpc	r21, r1
    3f44:	78 f0       	brcs	.+30     	; 0x3f64 <__divsf3_pse+0x86>
    3f46:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <__fp_inf>
    3f4a:	0c 94 6e 1d 	jmp	0x3adc	; 0x3adc <__fp_szero>
    3f4e:	5f 3f       	cpi	r21, 0xFF	; 255
    3f50:	e4 f3       	brlt	.-8      	; 0x3f4a <__divsf3_pse+0x6c>
    3f52:	98 3e       	cpi	r25, 0xE8	; 232
    3f54:	d4 f3       	brlt	.-12     	; 0x3f4a <__divsf3_pse+0x6c>
    3f56:	86 95       	lsr	r24
    3f58:	77 95       	ror	r23
    3f5a:	67 95       	ror	r22
    3f5c:	b7 95       	ror	r27
    3f5e:	f7 95       	ror	r31
    3f60:	9f 5f       	subi	r25, 0xFF	; 255
    3f62:	c9 f7       	brne	.-14     	; 0x3f56 <__divsf3_pse+0x78>
    3f64:	88 0f       	add	r24, r24
    3f66:	91 1d       	adc	r25, r1
    3f68:	96 95       	lsr	r25
    3f6a:	87 95       	ror	r24
    3f6c:	97 f9       	bld	r25, 7
    3f6e:	08 95       	ret
    3f70:	e1 e0       	ldi	r30, 0x01	; 1
    3f72:	66 0f       	add	r22, r22
    3f74:	77 1f       	adc	r23, r23
    3f76:	88 1f       	adc	r24, r24
    3f78:	bb 1f       	adc	r27, r27
    3f7a:	62 17       	cp	r22, r18
    3f7c:	73 07       	cpc	r23, r19
    3f7e:	84 07       	cpc	r24, r20
    3f80:	ba 07       	cpc	r27, r26
    3f82:	20 f0       	brcs	.+8      	; 0x3f8c <__divsf3_pse+0xae>
    3f84:	62 1b       	sub	r22, r18
    3f86:	73 0b       	sbc	r23, r19
    3f88:	84 0b       	sbc	r24, r20
    3f8a:	ba 0b       	sbc	r27, r26
    3f8c:	ee 1f       	adc	r30, r30
    3f8e:	88 f7       	brcc	.-30     	; 0x3f72 <__divsf3_pse+0x94>
    3f90:	e0 95       	com	r30
    3f92:	08 95       	ret

00003f94 <__fp_mpack>:
    3f94:	9f 3f       	cpi	r25, 0xFF	; 255
    3f96:	31 f0       	breq	.+12     	; 0x3fa4 <__fp_mpack_finite+0xc>

00003f98 <__fp_mpack_finite>:
    3f98:	91 50       	subi	r25, 0x01	; 1
    3f9a:	20 f4       	brcc	.+8      	; 0x3fa4 <__fp_mpack_finite+0xc>
    3f9c:	87 95       	ror	r24
    3f9e:	77 95       	ror	r23
    3fa0:	67 95       	ror	r22
    3fa2:	b7 95       	ror	r27
    3fa4:	88 0f       	add	r24, r24
    3fa6:	91 1d       	adc	r25, r1
    3fa8:	96 95       	lsr	r25
    3faa:	87 95       	ror	r24
    3fac:	97 f9       	bld	r25, 7
    3fae:	08 95       	ret

00003fb0 <__udivmodsi4>:
    3fb0:	a1 e2       	ldi	r26, 0x21	; 33
    3fb2:	1a 2e       	mov	r1, r26
    3fb4:	aa 1b       	sub	r26, r26
    3fb6:	bb 1b       	sub	r27, r27
    3fb8:	fd 01       	movw	r30, r26
    3fba:	0d c0       	rjmp	.+26     	; 0x3fd6 <__udivmodsi4_ep>

00003fbc <__udivmodsi4_loop>:
    3fbc:	aa 1f       	adc	r26, r26
    3fbe:	bb 1f       	adc	r27, r27
    3fc0:	ee 1f       	adc	r30, r30
    3fc2:	ff 1f       	adc	r31, r31
    3fc4:	a2 17       	cp	r26, r18
    3fc6:	b3 07       	cpc	r27, r19
    3fc8:	e4 07       	cpc	r30, r20
    3fca:	f5 07       	cpc	r31, r21
    3fcc:	20 f0       	brcs	.+8      	; 0x3fd6 <__udivmodsi4_ep>
    3fce:	a2 1b       	sub	r26, r18
    3fd0:	b3 0b       	sbc	r27, r19
    3fd2:	e4 0b       	sbc	r30, r20
    3fd4:	f5 0b       	sbc	r31, r21

00003fd6 <__udivmodsi4_ep>:
    3fd6:	66 1f       	adc	r22, r22
    3fd8:	77 1f       	adc	r23, r23
    3fda:	88 1f       	adc	r24, r24
    3fdc:	99 1f       	adc	r25, r25
    3fde:	1a 94       	dec	r1
    3fe0:	69 f7       	brne	.-38     	; 0x3fbc <__udivmodsi4_loop>
    3fe2:	60 95       	com	r22
    3fe4:	70 95       	com	r23
    3fe6:	80 95       	com	r24
    3fe8:	90 95       	com	r25
    3fea:	9b 01       	movw	r18, r22
    3fec:	ac 01       	movw	r20, r24
    3fee:	bd 01       	movw	r22, r26
    3ff0:	cf 01       	movw	r24, r30
    3ff2:	08 95       	ret

00003ff4 <malloc>:
    3ff4:	0f 93       	push	r16
    3ff6:	1f 93       	push	r17
    3ff8:	cf 93       	push	r28
    3ffa:	df 93       	push	r29
    3ffc:	82 30       	cpi	r24, 0x02	; 2
    3ffe:	91 05       	cpc	r25, r1
    4000:	10 f4       	brcc	.+4      	; 0x4006 <malloc+0x12>
    4002:	82 e0       	ldi	r24, 0x02	; 2
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	e0 91 ae 07 	lds	r30, 0x07AE	; 0x8007ae <__flp>
    400a:	f0 91 af 07 	lds	r31, 0x07AF	; 0x8007af <__flp+0x1>
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	a0 e0       	ldi	r26, 0x00	; 0
    4014:	b0 e0       	ldi	r27, 0x00	; 0
    4016:	30 97       	sbiw	r30, 0x00	; 0
    4018:	19 f1       	breq	.+70     	; 0x4060 <malloc+0x6c>
    401a:	40 81       	ld	r20, Z
    401c:	51 81       	ldd	r21, Z+1	; 0x01
    401e:	02 81       	ldd	r16, Z+2	; 0x02
    4020:	13 81       	ldd	r17, Z+3	; 0x03
    4022:	48 17       	cp	r20, r24
    4024:	59 07       	cpc	r21, r25
    4026:	c8 f0       	brcs	.+50     	; 0x405a <malloc+0x66>
    4028:	84 17       	cp	r24, r20
    402a:	95 07       	cpc	r25, r21
    402c:	69 f4       	brne	.+26     	; 0x4048 <malloc+0x54>
    402e:	10 97       	sbiw	r26, 0x00	; 0
    4030:	31 f0       	breq	.+12     	; 0x403e <malloc+0x4a>
    4032:	12 96       	adiw	r26, 0x02	; 2
    4034:	0c 93       	st	X, r16
    4036:	12 97       	sbiw	r26, 0x02	; 2
    4038:	13 96       	adiw	r26, 0x03	; 3
    403a:	1c 93       	st	X, r17
    403c:	27 c0       	rjmp	.+78     	; 0x408c <malloc+0x98>
    403e:	00 93 ae 07 	sts	0x07AE, r16	; 0x8007ae <__flp>
    4042:	10 93 af 07 	sts	0x07AF, r17	; 0x8007af <__flp+0x1>
    4046:	22 c0       	rjmp	.+68     	; 0x408c <malloc+0x98>
    4048:	21 15       	cp	r18, r1
    404a:	31 05       	cpc	r19, r1
    404c:	19 f0       	breq	.+6      	; 0x4054 <malloc+0x60>
    404e:	42 17       	cp	r20, r18
    4050:	53 07       	cpc	r21, r19
    4052:	18 f4       	brcc	.+6      	; 0x405a <malloc+0x66>
    4054:	9a 01       	movw	r18, r20
    4056:	bd 01       	movw	r22, r26
    4058:	ef 01       	movw	r28, r30
    405a:	df 01       	movw	r26, r30
    405c:	f8 01       	movw	r30, r16
    405e:	db cf       	rjmp	.-74     	; 0x4016 <malloc+0x22>
    4060:	21 15       	cp	r18, r1
    4062:	31 05       	cpc	r19, r1
    4064:	f9 f0       	breq	.+62     	; 0x40a4 <malloc+0xb0>
    4066:	28 1b       	sub	r18, r24
    4068:	39 0b       	sbc	r19, r25
    406a:	24 30       	cpi	r18, 0x04	; 4
    406c:	31 05       	cpc	r19, r1
    406e:	80 f4       	brcc	.+32     	; 0x4090 <malloc+0x9c>
    4070:	8a 81       	ldd	r24, Y+2	; 0x02
    4072:	9b 81       	ldd	r25, Y+3	; 0x03
    4074:	61 15       	cp	r22, r1
    4076:	71 05       	cpc	r23, r1
    4078:	21 f0       	breq	.+8      	; 0x4082 <malloc+0x8e>
    407a:	fb 01       	movw	r30, r22
    407c:	93 83       	std	Z+3, r25	; 0x03
    407e:	82 83       	std	Z+2, r24	; 0x02
    4080:	04 c0       	rjmp	.+8      	; 0x408a <malloc+0x96>
    4082:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <__flp+0x1>
    4086:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <__flp>
    408a:	fe 01       	movw	r30, r28
    408c:	32 96       	adiw	r30, 0x02	; 2
    408e:	44 c0       	rjmp	.+136    	; 0x4118 <malloc+0x124>
    4090:	fe 01       	movw	r30, r28
    4092:	e2 0f       	add	r30, r18
    4094:	f3 1f       	adc	r31, r19
    4096:	81 93       	st	Z+, r24
    4098:	91 93       	st	Z+, r25
    409a:	22 50       	subi	r18, 0x02	; 2
    409c:	31 09       	sbc	r19, r1
    409e:	39 83       	std	Y+1, r19	; 0x01
    40a0:	28 83       	st	Y, r18
    40a2:	3a c0       	rjmp	.+116    	; 0x4118 <malloc+0x124>
    40a4:	20 91 ac 07 	lds	r18, 0x07AC	; 0x8007ac <__brkval>
    40a8:	30 91 ad 07 	lds	r19, 0x07AD	; 0x8007ad <__brkval+0x1>
    40ac:	23 2b       	or	r18, r19
    40ae:	41 f4       	brne	.+16     	; 0x40c0 <malloc+0xcc>
    40b0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    40b4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    40b8:	30 93 ad 07 	sts	0x07AD, r19	; 0x8007ad <__brkval+0x1>
    40bc:	20 93 ac 07 	sts	0x07AC, r18	; 0x8007ac <__brkval>
    40c0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    40c4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    40c8:	21 15       	cp	r18, r1
    40ca:	31 05       	cpc	r19, r1
    40cc:	41 f4       	brne	.+16     	; 0x40de <malloc+0xea>
    40ce:	2d b7       	in	r18, 0x3d	; 61
    40d0:	3e b7       	in	r19, 0x3e	; 62
    40d2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    40d6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    40da:	24 1b       	sub	r18, r20
    40dc:	35 0b       	sbc	r19, r21
    40de:	e0 91 ac 07 	lds	r30, 0x07AC	; 0x8007ac <__brkval>
    40e2:	f0 91 ad 07 	lds	r31, 0x07AD	; 0x8007ad <__brkval+0x1>
    40e6:	e2 17       	cp	r30, r18
    40e8:	f3 07       	cpc	r31, r19
    40ea:	a0 f4       	brcc	.+40     	; 0x4114 <malloc+0x120>
    40ec:	2e 1b       	sub	r18, r30
    40ee:	3f 0b       	sbc	r19, r31
    40f0:	28 17       	cp	r18, r24
    40f2:	39 07       	cpc	r19, r25
    40f4:	78 f0       	brcs	.+30     	; 0x4114 <malloc+0x120>
    40f6:	ac 01       	movw	r20, r24
    40f8:	4e 5f       	subi	r20, 0xFE	; 254
    40fa:	5f 4f       	sbci	r21, 0xFF	; 255
    40fc:	24 17       	cp	r18, r20
    40fe:	35 07       	cpc	r19, r21
    4100:	48 f0       	brcs	.+18     	; 0x4114 <malloc+0x120>
    4102:	4e 0f       	add	r20, r30
    4104:	5f 1f       	adc	r21, r31
    4106:	50 93 ad 07 	sts	0x07AD, r21	; 0x8007ad <__brkval+0x1>
    410a:	40 93 ac 07 	sts	0x07AC, r20	; 0x8007ac <__brkval>
    410e:	81 93       	st	Z+, r24
    4110:	91 93       	st	Z+, r25
    4112:	02 c0       	rjmp	.+4      	; 0x4118 <malloc+0x124>
    4114:	e0 e0       	ldi	r30, 0x00	; 0
    4116:	f0 e0       	ldi	r31, 0x00	; 0
    4118:	cf 01       	movw	r24, r30
    411a:	df 91       	pop	r29
    411c:	cf 91       	pop	r28
    411e:	1f 91       	pop	r17
    4120:	0f 91       	pop	r16
    4122:	08 95       	ret

00004124 <free>:
    4124:	cf 93       	push	r28
    4126:	df 93       	push	r29
    4128:	00 97       	sbiw	r24, 0x00	; 0
    412a:	09 f4       	brne	.+2      	; 0x412e <free+0xa>
    412c:	81 c0       	rjmp	.+258    	; 0x4230 <free+0x10c>
    412e:	fc 01       	movw	r30, r24
    4130:	32 97       	sbiw	r30, 0x02	; 2
    4132:	13 82       	std	Z+3, r1	; 0x03
    4134:	12 82       	std	Z+2, r1	; 0x02
    4136:	a0 91 ae 07 	lds	r26, 0x07AE	; 0x8007ae <__flp>
    413a:	b0 91 af 07 	lds	r27, 0x07AF	; 0x8007af <__flp+0x1>
    413e:	10 97       	sbiw	r26, 0x00	; 0
    4140:	81 f4       	brne	.+32     	; 0x4162 <free+0x3e>
    4142:	20 81       	ld	r18, Z
    4144:	31 81       	ldd	r19, Z+1	; 0x01
    4146:	82 0f       	add	r24, r18
    4148:	93 1f       	adc	r25, r19
    414a:	20 91 ac 07 	lds	r18, 0x07AC	; 0x8007ac <__brkval>
    414e:	30 91 ad 07 	lds	r19, 0x07AD	; 0x8007ad <__brkval+0x1>
    4152:	28 17       	cp	r18, r24
    4154:	39 07       	cpc	r19, r25
    4156:	51 f5       	brne	.+84     	; 0x41ac <free+0x88>
    4158:	f0 93 ad 07 	sts	0x07AD, r31	; 0x8007ad <__brkval+0x1>
    415c:	e0 93 ac 07 	sts	0x07AC, r30	; 0x8007ac <__brkval>
    4160:	67 c0       	rjmp	.+206    	; 0x4230 <free+0x10c>
    4162:	ed 01       	movw	r28, r26
    4164:	20 e0       	ldi	r18, 0x00	; 0
    4166:	30 e0       	ldi	r19, 0x00	; 0
    4168:	ce 17       	cp	r28, r30
    416a:	df 07       	cpc	r29, r31
    416c:	40 f4       	brcc	.+16     	; 0x417e <free+0x5a>
    416e:	4a 81       	ldd	r20, Y+2	; 0x02
    4170:	5b 81       	ldd	r21, Y+3	; 0x03
    4172:	9e 01       	movw	r18, r28
    4174:	41 15       	cp	r20, r1
    4176:	51 05       	cpc	r21, r1
    4178:	f1 f0       	breq	.+60     	; 0x41b6 <free+0x92>
    417a:	ea 01       	movw	r28, r20
    417c:	f5 cf       	rjmp	.-22     	; 0x4168 <free+0x44>
    417e:	d3 83       	std	Z+3, r29	; 0x03
    4180:	c2 83       	std	Z+2, r28	; 0x02
    4182:	40 81       	ld	r20, Z
    4184:	51 81       	ldd	r21, Z+1	; 0x01
    4186:	84 0f       	add	r24, r20
    4188:	95 1f       	adc	r25, r21
    418a:	c8 17       	cp	r28, r24
    418c:	d9 07       	cpc	r29, r25
    418e:	59 f4       	brne	.+22     	; 0x41a6 <free+0x82>
    4190:	88 81       	ld	r24, Y
    4192:	99 81       	ldd	r25, Y+1	; 0x01
    4194:	84 0f       	add	r24, r20
    4196:	95 1f       	adc	r25, r21
    4198:	02 96       	adiw	r24, 0x02	; 2
    419a:	91 83       	std	Z+1, r25	; 0x01
    419c:	80 83       	st	Z, r24
    419e:	8a 81       	ldd	r24, Y+2	; 0x02
    41a0:	9b 81       	ldd	r25, Y+3	; 0x03
    41a2:	93 83       	std	Z+3, r25	; 0x03
    41a4:	82 83       	std	Z+2, r24	; 0x02
    41a6:	21 15       	cp	r18, r1
    41a8:	31 05       	cpc	r19, r1
    41aa:	29 f4       	brne	.+10     	; 0x41b6 <free+0x92>
    41ac:	f0 93 af 07 	sts	0x07AF, r31	; 0x8007af <__flp+0x1>
    41b0:	e0 93 ae 07 	sts	0x07AE, r30	; 0x8007ae <__flp>
    41b4:	3d c0       	rjmp	.+122    	; 0x4230 <free+0x10c>
    41b6:	e9 01       	movw	r28, r18
    41b8:	fb 83       	std	Y+3, r31	; 0x03
    41ba:	ea 83       	std	Y+2, r30	; 0x02
    41bc:	49 91       	ld	r20, Y+
    41be:	59 91       	ld	r21, Y+
    41c0:	c4 0f       	add	r28, r20
    41c2:	d5 1f       	adc	r29, r21
    41c4:	ec 17       	cp	r30, r28
    41c6:	fd 07       	cpc	r31, r29
    41c8:	61 f4       	brne	.+24     	; 0x41e2 <free+0xbe>
    41ca:	80 81       	ld	r24, Z
    41cc:	91 81       	ldd	r25, Z+1	; 0x01
    41ce:	84 0f       	add	r24, r20
    41d0:	95 1f       	adc	r25, r21
    41d2:	02 96       	adiw	r24, 0x02	; 2
    41d4:	e9 01       	movw	r28, r18
    41d6:	99 83       	std	Y+1, r25	; 0x01
    41d8:	88 83       	st	Y, r24
    41da:	82 81       	ldd	r24, Z+2	; 0x02
    41dc:	93 81       	ldd	r25, Z+3	; 0x03
    41de:	9b 83       	std	Y+3, r25	; 0x03
    41e0:	8a 83       	std	Y+2, r24	; 0x02
    41e2:	e0 e0       	ldi	r30, 0x00	; 0
    41e4:	f0 e0       	ldi	r31, 0x00	; 0
    41e6:	12 96       	adiw	r26, 0x02	; 2
    41e8:	8d 91       	ld	r24, X+
    41ea:	9c 91       	ld	r25, X
    41ec:	13 97       	sbiw	r26, 0x03	; 3
    41ee:	00 97       	sbiw	r24, 0x00	; 0
    41f0:	19 f0       	breq	.+6      	; 0x41f8 <free+0xd4>
    41f2:	fd 01       	movw	r30, r26
    41f4:	dc 01       	movw	r26, r24
    41f6:	f7 cf       	rjmp	.-18     	; 0x41e6 <free+0xc2>
    41f8:	8d 91       	ld	r24, X+
    41fa:	9c 91       	ld	r25, X
    41fc:	11 97       	sbiw	r26, 0x01	; 1
    41fe:	9d 01       	movw	r18, r26
    4200:	2e 5f       	subi	r18, 0xFE	; 254
    4202:	3f 4f       	sbci	r19, 0xFF	; 255
    4204:	82 0f       	add	r24, r18
    4206:	93 1f       	adc	r25, r19
    4208:	20 91 ac 07 	lds	r18, 0x07AC	; 0x8007ac <__brkval>
    420c:	30 91 ad 07 	lds	r19, 0x07AD	; 0x8007ad <__brkval+0x1>
    4210:	28 17       	cp	r18, r24
    4212:	39 07       	cpc	r19, r25
    4214:	69 f4       	brne	.+26     	; 0x4230 <free+0x10c>
    4216:	30 97       	sbiw	r30, 0x00	; 0
    4218:	29 f4       	brne	.+10     	; 0x4224 <free+0x100>
    421a:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <__flp+0x1>
    421e:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <__flp>
    4222:	02 c0       	rjmp	.+4      	; 0x4228 <free+0x104>
    4224:	13 82       	std	Z+3, r1	; 0x03
    4226:	12 82       	std	Z+2, r1	; 0x02
    4228:	b0 93 ad 07 	sts	0x07AD, r27	; 0x8007ad <__brkval+0x1>
    422c:	a0 93 ac 07 	sts	0x07AC, r26	; 0x8007ac <__brkval>
    4230:	df 91       	pop	r29
    4232:	cf 91       	pop	r28
    4234:	08 95       	ret

00004236 <memcpy>:
    4236:	fb 01       	movw	r30, r22
    4238:	dc 01       	movw	r26, r24
    423a:	02 c0       	rjmp	.+4      	; 0x4240 <memcpy+0xa>
    423c:	01 90       	ld	r0, Z+
    423e:	0d 92       	st	X+, r0
    4240:	41 50       	subi	r20, 0x01	; 1
    4242:	50 40       	sbci	r21, 0x00	; 0
    4244:	d8 f7       	brcc	.-10     	; 0x423c <memcpy+0x6>
    4246:	08 95       	ret

00004248 <memset>:
    4248:	dc 01       	movw	r26, r24
    424a:	01 c0       	rjmp	.+2      	; 0x424e <memset+0x6>
    424c:	6d 93       	st	X+, r22
    424e:	41 50       	subi	r20, 0x01	; 1
    4250:	50 40       	sbci	r21, 0x00	; 0
    4252:	e0 f7       	brcc	.-8      	; 0x424c <memset+0x4>
    4254:	08 95       	ret

00004256 <_exit>:
    4256:	f8 94       	cli

00004258 <__stop_program>:
    4258:	ff cf       	rjmp	.-2      	; 0x4258 <__stop_program>
