
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00004536  000045ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000660  00800150  00800150  0000461a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000461a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000464c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f8  00000000  00000000  0000468c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004250  00000000  00000000  00004b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ac  00000000  00000000  00008dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003ab3  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000139c  00000000  00000000  0000db34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cc5  00000000  00000000  0000eed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029d4  00000000  00000000  00010b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000468  00000000  00000000  00013569  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__ctors_end>
       4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      34:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__vector_13>
      38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      40:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__vector_16>
      44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      50:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <__vector_20>
      54:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__vector_21>
      58:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      5c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      60:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      64:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      68:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      6c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      70:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_28>
      74:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__vector_29>
      78:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	08 00       	.word	0x0008	; ????
      a6:	00 00       	nop
      a8:	be 92       	st	-X, r11
      aa:	24 49       	sbci	r18, 0x94	; 148
      ac:	12 3e       	cpi	r17, 0xE2	; 226
      ae:	ab aa       	std	Y+51, r10	; 0x33
      b0:	aa 2a       	or	r10, r26
      b2:	be cd       	rjmp	.-1156   	; 0xfffffc30 <__eeprom_end+0xff7efc30>
      b4:	cc cc       	rjmp	.-1640   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
      b6:	4c 3e       	cpi	r20, 0xEC	; 236
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	be ab       	std	Y+54, r27	; 0x36
      be:	aa aa       	std	Y+50, r10	; 0x32
      c0:	aa 3e       	cpi	r26, 0xEA	; 234
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	bf 00       	.word	0x00bf	; ????
      c8:	00 00       	nop
      ca:	80 3f       	cpi	r24, 0xF0	; 240
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 08       	sbc	r0, r0
      d2:	41 78       	andi	r20, 0x81	; 129
      d4:	d3 bb       	out	0x13, r29	; 19
      d6:	43 87       	std	Z+11, r20	; 0x0b
      d8:	d1 13       	cpse	r29, r17
      da:	3d 19       	sub	r19, r13
      dc:	0e 3c       	cpi	r16, 0xCE	; 206
      de:	c3 bd       	out	0x23, r28	; 35
      e0:	42 82       	std	Z+2, r4	; 0x02
      e2:	ad 2b       	or	r26, r29
      e4:	3e 68       	ori	r19, 0x8E	; 142
      e6:	ec 82       	std	Y+4, r14	; 0x04
      e8:	76 be       	out	0x36, r7	; 54
      ea:	d9 8f       	std	Y+25, r29	; 0x19
      ec:	e1 a9       	ldd	r30, Z+49	; 0x31
      ee:	3e 4c       	sbci	r19, 0xCE	; 206
      f0:	80 ef       	ldi	r24, 0xF0	; 240
      f2:	ff be       	out	0x3f, r15	; 63
      f4:	01 c4       	rjmp	.+2050   	; 0x8f8 <__LOCK_REGION_LENGTH__+0x4f8>
      f6:	ff 7f       	andi	r31, 0xFF	; 255
      f8:	3f 00       	.word	0x003f	; ????
      fa:	00 00       	nop
	...

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d8 e0       	ldi	r29, 0x08	; 8
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
     10a:	11 e0       	ldi	r17, 0x01	; 1
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	e6 e3       	ldi	r30, 0x36	; 54
     112:	f5 e4       	ldi	r31, 0x45	; 69
     114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x10>
     116:	05 90       	lpm	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	a0 35       	cpi	r26, 0x50	; 80
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0xc>

00000120 <__do_clear_bss>:
     120:	27 e0       	ldi	r18, 0x07	; 7
     122:	a0 e5       	ldi	r26, 0x50	; 80
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	a0 3b       	cpi	r26, 0xB0	; 176
     12c:	b2 07       	cpc	r27, r18
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
     130:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <main>
     134:	0c 94 99 22 	jmp	0x4532	; 0x4532 <_exit>

00000138 <__bad_interrupt>:
     138:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013c <make_frame>:
	vTaskDelete(NULL);
}

/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	2a 97       	sbiw	r28, 0x0a	; 10
     14a:	0f b6       	in	r0, 0x3f	; 63
     14c:	f8 94       	cli
     14e:	de bf       	out	0x3e, r29	; 62
     150:	0f be       	out	0x3f, r0	; 63
     152:	cd bf       	out	0x3d, r28	; 61
     154:	9a 87       	std	Y+10, r25	; 0x0a
     156:	89 87       	std	Y+9, r24	; 0x09
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     158:	1a 82       	std	Y+2, r1	; 0x02
     15a:	19 82       	std	Y+1, r1	; 0x01
     15c:	1a c0       	rjmp	.+52     	; 0x192 <make_frame+0x56>
			for (int i = 0; i < 14; i++) { //For each column
     15e:	1c 82       	std	Y+4, r1	; 0x04
     160:	1b 82       	std	Y+3, r1	; 0x03
     162:	0e c0       	rjmp	.+28     	; 0x180 <make_frame+0x44>
				frame_buffer[i]	= 0;
     164:	8b 81       	ldd	r24, Y+3	; 0x03
     166:	9c 81       	ldd	r25, Y+4	; 0x04
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	80 5b       	subi	r24, 0xB0	; 176
     16e:	9e 4f       	sbci	r25, 0xFE	; 254
     170:	fc 01       	movw	r30, r24
     172:	11 82       	std	Z+1, r1	; 0x01
     174:	10 82       	st	Z, r1
/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
			for (int i = 0; i < 14; i++) { //For each column
     176:	8b 81       	ldd	r24, Y+3	; 0x03
     178:	9c 81       	ldd	r25, Y+4	; 0x04
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	9c 83       	std	Y+4, r25	; 0x04
     17e:	8b 83       	std	Y+3, r24	; 0x03
     180:	8b 81       	ldd	r24, Y+3	; 0x03
     182:	9c 81       	ldd	r25, Y+4	; 0x04
     184:	0e 97       	sbiw	r24, 0x0e	; 14
     186:	74 f3       	brlt	.-36     	; 0x164 <make_frame+0x28>

/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     188:	89 81       	ldd	r24, Y+1	; 0x01
     18a:	9a 81       	ldd	r25, Y+2	; 0x02
     18c:	01 96       	adiw	r24, 0x01	; 1
     18e:	9a 83       	std	Y+2, r25	; 0x02
     190:	89 83       	std	Y+1, r24	; 0x01
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	9a 81       	ldd	r25, Y+2	; 0x02
     196:	0a 97       	sbiw	r24, 0x0a	; 10
     198:	14 f3       	brlt	.-60     	; 0x15e <make_frame+0x22>
				frame_buffer[i]	= 0;
			}
		}

		/* Create frame from gameState */
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     19a:	1e 82       	std	Y+6, r1	; 0x06
     19c:	1d 82       	std	Y+5, r1	; 0x05
     19e:	65 c0       	rjmp	.+202    	; 0x26a <make_frame+0x12e>
			for (int i = 0; i < 14; i++) { //For each column
     1a0:	18 86       	std	Y+8, r1	; 0x08
     1a2:	1f 82       	std	Y+7, r1	; 0x07
     1a4:	58 c0       	rjmp	.+176    	; 0x256 <make_frame+0x11a>
				if (gameState[i][j] != 0) { //Add up
     1a6:	8f 81       	ldd	r24, Y+7	; 0x07
     1a8:	98 85       	ldd	r25, Y+8	; 0x08
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	9c 01       	movw	r18, r24
     1b0:	22 0f       	add	r18, r18
     1b2:	33 1f       	adc	r19, r19
     1b4:	22 0f       	add	r18, r18
     1b6:	33 1f       	adc	r19, r19
     1b8:	82 0f       	add	r24, r18
     1ba:	93 1f       	adc	r25, r19
     1bc:	2d 81       	ldd	r18, Y+5	; 0x05
     1be:	3e 81       	ldd	r19, Y+6	; 0x06
     1c0:	82 0f       	add	r24, r18
     1c2:	93 1f       	adc	r25, r19
     1c4:	88 0f       	add	r24, r24
     1c6:	99 1f       	adc	r25, r25
     1c8:	84 59       	subi	r24, 0x94	; 148
     1ca:	9e 4f       	sbci	r25, 0xFE	; 254
     1cc:	fc 01       	movw	r30, r24
     1ce:	80 81       	ld	r24, Z
     1d0:	91 81       	ldd	r25, Z+1	; 0x01
     1d2:	89 2b       	or	r24, r25
     1d4:	d9 f1       	breq	.+118    	; 0x24c <make_frame+0x110>
					frame_buffer[i]	+= (int) (pow(2,  j) + 0.5);
     1d6:	8f 81       	ldd	r24, Y+7	; 0x07
     1d8:	98 85       	ldd	r25, Y+8	; 0x08
     1da:	88 0f       	add	r24, r24
     1dc:	99 1f       	adc	r25, r25
     1de:	80 5b       	subi	r24, 0xB0	; 176
     1e0:	9e 4f       	sbci	r25, 0xFE	; 254
     1e2:	fc 01       	movw	r30, r24
     1e4:	00 81       	ld	r16, Z
     1e6:	11 81       	ldd	r17, Z+1	; 0x01
     1e8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ea:	9e 81       	ldd	r25, Y+6	; 0x06
     1ec:	09 2e       	mov	r0, r25
     1ee:	00 0c       	add	r0, r0
     1f0:	aa 0b       	sbc	r26, r26
     1f2:	bb 0b       	sbc	r27, r27
     1f4:	bc 01       	movw	r22, r24
     1f6:	cd 01       	movw	r24, r26
     1f8:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__floatsisf>
     1fc:	dc 01       	movw	r26, r24
     1fe:	cb 01       	movw	r24, r22
     200:	9c 01       	movw	r18, r24
     202:	ad 01       	movw	r20, r26
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e4       	ldi	r25, 0x40	; 64
     20c:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <pow>
     210:	dc 01       	movw	r26, r24
     212:	cb 01       	movw	r24, r22
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	5f e3       	ldi	r21, 0x3F	; 63
     21c:	bc 01       	movw	r22, r24
     21e:	cd 01       	movw	r24, r26
     220:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__addsf3>
     224:	dc 01       	movw	r26, r24
     226:	cb 01       	movw	r24, r22
     228:	bc 01       	movw	r22, r24
     22a:	cd 01       	movw	r24, r26
     22c:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <__fixsfsi>
     230:	dc 01       	movw	r26, r24
     232:	cb 01       	movw	r24, r22
     234:	98 01       	movw	r18, r16
     236:	28 0f       	add	r18, r24
     238:	39 1f       	adc	r19, r25
     23a:	8f 81       	ldd	r24, Y+7	; 0x07
     23c:	98 85       	ldd	r25, Y+8	; 0x08
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	80 5b       	subi	r24, 0xB0	; 176
     244:	9e 4f       	sbci	r25, 0xFE	; 254
     246:	fc 01       	movw	r30, r24
     248:	31 83       	std	Z+1, r19	; 0x01
     24a:	20 83       	st	Z, r18
			}
		}

		/* Create frame from gameState */
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
			for (int i = 0; i < 14; i++) { //For each column
     24c:	8f 81       	ldd	r24, Y+7	; 0x07
     24e:	98 85       	ldd	r25, Y+8	; 0x08
     250:	01 96       	adiw	r24, 0x01	; 1
     252:	98 87       	std	Y+8, r25	; 0x08
     254:	8f 83       	std	Y+7, r24	; 0x07
     256:	8f 81       	ldd	r24, Y+7	; 0x07
     258:	98 85       	ldd	r25, Y+8	; 0x08
     25a:	0e 97       	sbiw	r24, 0x0e	; 14
     25c:	0c f4       	brge	.+2      	; 0x260 <make_frame+0x124>
     25e:	a3 cf       	rjmp	.-186    	; 0x1a6 <make_frame+0x6a>
				frame_buffer[i]	= 0;
			}
		}

		/* Create frame from gameState */
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     260:	8d 81       	ldd	r24, Y+5	; 0x05
     262:	9e 81       	ldd	r25, Y+6	; 0x06
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	9e 83       	std	Y+6, r25	; 0x06
     268:	8d 83       	std	Y+5, r24	; 0x05
     26a:	8d 81       	ldd	r24, Y+5	; 0x05
     26c:	9e 81       	ldd	r25, Y+6	; 0x06
     26e:	0a 97       	sbiw	r24, 0x0a	; 10
     270:	0c f4       	brge	.+2      	; 0x274 <make_frame+0x138>
     272:	96 cf       	rjmp	.-212    	; 0x1a0 <make_frame+0x64>
					frame_buffer[i]	+= (int) (pow(2,  j) + 0.5);
				}
			}
		}

		vTaskDelay(50);
     274:	82 e3       	ldi	r24, 0x32	; 50
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 66 18 	call	0x30cc	; 0x30cc <vTaskDelay>
	}
     27c:	6d cf       	rjmp	.-294    	; 0x158 <make_frame+0x1c>

0000027e <die>:

	vTaskDelete(NULL);
}

void die()
{
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
	//TODO
	com_send_bytes("DEAD!\n", 6);
     286:	66 e0       	ldi	r22, 0x06	; 6
     288:	85 e1       	ldi	r24, 0x15	; 21
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <com_send_bytes>
}
     290:	00 00       	nop
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <move_player>:

void move_player(Player* player)
{
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	00 d0       	rcall	.+0      	; 0x29e <move_player+0x6>
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	9a 83       	std	Y+2, r25	; 0x02
     2a4:	89 83       	std	Y+1, r24	; 0x01
	switch ((*player).direction) {
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	9a 81       	ldd	r25, Y+2	; 0x02
     2aa:	fc 01       	movw	r30, r24
     2ac:	84 81       	ldd	r24, Z+4	; 0x04
     2ae:	88 2f       	mov	r24, r24
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	81 30       	cpi	r24, 0x01	; 1
     2b4:	91 05       	cpc	r25, r1
     2b6:	21 f1       	breq	.+72     	; 0x300 <move_player+0x68>
     2b8:	82 30       	cpi	r24, 0x02	; 2
     2ba:	91 05       	cpc	r25, r1
     2bc:	1c f4       	brge	.+6      	; 0x2c4 <move_player+0x2c>
     2be:	89 2b       	or	r24, r25
     2c0:	41 f0       	breq	.+16     	; 0x2d2 <move_player+0x3a>
				(*player).y++;
			break;
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     2c2:	65 c0       	rjmp	.+202    	; 0x38e <move_player+0xf6>
	com_send_bytes("DEAD!\n", 6);
}

void move_player(Player* player)
{
	switch ((*player).direction) {
     2c4:	82 30       	cpi	r24, 0x02	; 2
     2c6:	91 05       	cpc	r25, r1
     2c8:	81 f1       	breq	.+96     	; 0x32a <move_player+0x92>
     2ca:	03 97       	sbiw	r24, 0x03	; 3
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <move_player+0x38>
     2ce:	43 c0       	rjmp	.+134    	; 0x356 <move_player+0xbe>
				(*player).y++;
			break;
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     2d0:	5e c0       	rjmp	.+188    	; 0x38e <move_player+0xf6>

void move_player(Player* player)
{
	switch ((*player).direction) {
		case LEFT:
			if ((*player).x > 0)
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	9a 81       	ldd	r25, Y+2	; 0x02
     2d6:	fc 01       	movw	r30, r24
     2d8:	80 81       	ld	r24, Z
     2da:	91 81       	ldd	r25, Z+1	; 0x01
     2dc:	18 16       	cp	r1, r24
     2de:	19 06       	cpc	r1, r25
     2e0:	0c f0       	brlt	.+2      	; 0x2e4 <move_player+0x4c>
     2e2:	4e c0       	rjmp	.+156    	; 0x380 <move_player+0xe8>
				(*player).x--;
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	fc 01       	movw	r30, r24
     2ea:	80 81       	ld	r24, Z
     2ec:	91 81       	ldd	r25, Z+1	; 0x01
     2ee:	9c 01       	movw	r18, r24
     2f0:	21 50       	subi	r18, 0x01	; 1
     2f2:	31 09       	sbc	r19, r1
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	fc 01       	movw	r30, r24
     2fa:	31 83       	std	Z+1, r19	; 0x01
     2fc:	20 83       	st	Z, r18
			break;
     2fe:	40 c0       	rjmp	.+128    	; 0x380 <move_player+0xe8>
		case RIGHT:
			if ((*player).x < 14)
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	9a 81       	ldd	r25, Y+2	; 0x02
     304:	fc 01       	movw	r30, r24
     306:	80 81       	ld	r24, Z
     308:	91 81       	ldd	r25, Z+1	; 0x01
     30a:	0e 97       	sbiw	r24, 0x0e	; 14
     30c:	dc f5       	brge	.+118    	; 0x384 <move_player+0xec>
				(*player).x++;
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	9a 81       	ldd	r25, Y+2	; 0x02
     312:	fc 01       	movw	r30, r24
     314:	80 81       	ld	r24, Z
     316:	91 81       	ldd	r25, Z+1	; 0x01
     318:	9c 01       	movw	r18, r24
     31a:	2f 5f       	subi	r18, 0xFF	; 255
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	9a 81       	ldd	r25, Y+2	; 0x02
     322:	fc 01       	movw	r30, r24
     324:	31 83       	std	Z+1, r19	; 0x01
     326:	20 83       	st	Z, r18
			break;
     328:	2d c0       	rjmp	.+90     	; 0x384 <move_player+0xec>
		case UP:
			if ((*player).y > 0)
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	fc 01       	movw	r30, r24
     330:	82 81       	ldd	r24, Z+2	; 0x02
     332:	93 81       	ldd	r25, Z+3	; 0x03
     334:	18 16       	cp	r1, r24
     336:	19 06       	cpc	r1, r25
     338:	3c f5       	brge	.+78     	; 0x388 <move_player+0xf0>
				(*player).y--;
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	fc 01       	movw	r30, r24
     340:	82 81       	ldd	r24, Z+2	; 0x02
     342:	93 81       	ldd	r25, Z+3	; 0x03
     344:	9c 01       	movw	r18, r24
     346:	21 50       	subi	r18, 0x01	; 1
     348:	31 09       	sbc	r19, r1
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	9a 81       	ldd	r25, Y+2	; 0x02
     34e:	fc 01       	movw	r30, r24
     350:	33 83       	std	Z+3, r19	; 0x03
     352:	22 83       	std	Z+2, r18	; 0x02
			break;
     354:	19 c0       	rjmp	.+50     	; 0x388 <move_player+0xf0>
		case DOWN:
			if ((*player).y < 10)
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	9a 81       	ldd	r25, Y+2	; 0x02
     35a:	fc 01       	movw	r30, r24
     35c:	82 81       	ldd	r24, Z+2	; 0x02
     35e:	93 81       	ldd	r25, Z+3	; 0x03
     360:	0a 97       	sbiw	r24, 0x0a	; 10
     362:	a4 f4       	brge	.+40     	; 0x38c <move_player+0xf4>
				(*player).y++;
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	9a 81       	ldd	r25, Y+2	; 0x02
     368:	fc 01       	movw	r30, r24
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	9c 01       	movw	r18, r24
     370:	2f 5f       	subi	r18, 0xFF	; 255
     372:	3f 4f       	sbci	r19, 0xFF	; 255
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	9a 81       	ldd	r25, Y+2	; 0x02
     378:	fc 01       	movw	r30, r24
     37a:	33 83       	std	Z+3, r19	; 0x03
     37c:	22 83       	std	Z+2, r18	; 0x02
			break;
     37e:	06 c0       	rjmp	.+12     	; 0x38c <move_player+0xf4>
{
	switch ((*player).direction) {
		case LEFT:
			if ((*player).x > 0)
				(*player).x--;
			break;
     380:	00 00       	nop
     382:	05 c0       	rjmp	.+10     	; 0x38e <move_player+0xf6>
		case RIGHT:
			if ((*player).x < 14)
				(*player).x++;
			break;
     384:	00 00       	nop
     386:	03 c0       	rjmp	.+6      	; 0x38e <move_player+0xf6>
		case UP:
			if ((*player).y > 0)
				(*player).y--;
			break;
     388:	00 00       	nop
     38a:	01 c0       	rjmp	.+2      	; 0x38e <move_player+0xf6>
		case DOWN:
			if ((*player).y < 10)
				(*player).y++;
			break;
     38c:	00 00       	nop
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     38e:	00 00       	nop
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <draw_players_lines>:

/* Returns true if collision */
uint8_t draw_players_lines(Player *player, int playerId)
{
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	63 97       	sbiw	r28, 0x13	; 19
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	99 8b       	std	Y+17, r25	; 0x11
     3b0:	88 8b       	std	Y+16, r24	; 0x10
     3b2:	7b 8b       	std	Y+19, r23	; 0x13
     3b4:	6a 8b       	std	Y+18, r22	; 0x12
	uint8_t collision = false;	
     3b6:	19 82       	std	Y+1, r1	; 0x01
	int from, to;

	for (int i = 0; i < (*player).turnsCount + 1; i++) {
     3b8:	1f 82       	std	Y+7, r1	; 0x07
     3ba:	1e 82       	std	Y+6, r1	; 0x06
     3bc:	3f c3       	rjmp	.+1662   	; 0xa3c <__stack+0x13d>

		if (i < (*player).turnsCount) { //Processing every turn
     3be:	88 89       	ldd	r24, Y+16	; 0x10
     3c0:	99 89       	ldd	r25, Y+17	; 0x11
     3c2:	8f 5b       	subi	r24, 0xBF	; 191
     3c4:	9f 4f       	sbci	r25, 0xFF	; 255
     3c6:	fc 01       	movw	r30, r24
     3c8:	20 81       	ld	r18, Z
     3ca:	31 81       	ldd	r19, Z+1	; 0x01
     3cc:	8e 81       	ldd	r24, Y+6	; 0x06
     3ce:	9f 81       	ldd	r25, Y+7	; 0x07
     3d0:	82 17       	cp	r24, r18
     3d2:	93 07       	cpc	r25, r19
     3d4:	0c f0       	brlt	.+2      	; 0x3d8 <draw_players_lines+0x3e>
     3d6:	d0 c1       	rjmp	.+928    	; 0x778 <__LOCK_REGION_LENGTH__+0x378>

			if ((*player).turns[i].x == (*player).turns[i + 1].x) { //Draw vertical line
     3d8:	28 89       	ldd	r18, Y+16	; 0x10
     3da:	39 89       	ldd	r19, Y+17	; 0x11
     3dc:	8e 81       	ldd	r24, Y+6	; 0x06
     3de:	9f 81       	ldd	r25, Y+7	; 0x07
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	82 0f       	add	r24, r18
     3ea:	93 1f       	adc	r25, r19
     3ec:	05 96       	adiw	r24, 0x05	; 5
     3ee:	fc 01       	movw	r30, r24
     3f0:	20 81       	ld	r18, Z
     3f2:	31 81       	ldd	r19, Z+1	; 0x01
     3f4:	8e 81       	ldd	r24, Y+6	; 0x06
     3f6:	9f 81       	ldd	r25, Y+7	; 0x07
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	48 89       	ldd	r20, Y+16	; 0x10
     3fc:	59 89       	ldd	r21, Y+17	; 0x11
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	84 0f       	add	r24, r20
     408:	95 1f       	adc	r25, r21
     40a:	05 96       	adiw	r24, 0x05	; 5
     40c:	fc 01       	movw	r30, r24
     40e:	80 81       	ld	r24, Z
     410:	91 81       	ldd	r25, Z+1	; 0x01
     412:	28 17       	cp	r18, r24
     414:	39 07       	cpc	r19, r25
     416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     418:	c7 c0       	rjmp	.+398    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>

				from = (*player).turns[i].y;
     41a:	28 89       	ldd	r18, Y+16	; 0x10
     41c:	39 89       	ldd	r19, Y+17	; 0x11
     41e:	8e 81       	ldd	r24, Y+6	; 0x06
     420:	9f 81       	ldd	r25, Y+7	; 0x07
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	82 0f       	add	r24, r18
     42c:	93 1f       	adc	r25, r19
     42e:	07 96       	adiw	r24, 0x07	; 7
     430:	fc 01       	movw	r30, r24
     432:	80 81       	ld	r24, Z
     434:	91 81       	ldd	r25, Z+1	; 0x01
     436:	9b 83       	std	Y+3, r25	; 0x03
     438:	8a 83       	std	Y+2, r24	; 0x02
				to = (*player).turns[i + 1].y;
     43a:	8e 81       	ldd	r24, Y+6	; 0x06
     43c:	9f 81       	ldd	r25, Y+7	; 0x07
     43e:	01 96       	adiw	r24, 0x01	; 1
     440:	28 89       	ldd	r18, Y+16	; 0x10
     442:	39 89       	ldd	r19, Y+17	; 0x11
     444:	88 0f       	add	r24, r24
     446:	99 1f       	adc	r25, r25
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	82 0f       	add	r24, r18
     44e:	93 1f       	adc	r25, r19
     450:	07 96       	adiw	r24, 0x07	; 7
     452:	fc 01       	movw	r30, r24
     454:	80 81       	ld	r24, Z
     456:	91 81       	ldd	r25, Z+1	; 0x01
     458:	9d 83       	std	Y+5, r25	; 0x05
     45a:	8c 83       	std	Y+4, r24	; 0x04

				if (from > to) {
     45c:	2a 81       	ldd	r18, Y+2	; 0x02
     45e:	3b 81       	ldd	r19, Y+3	; 0x03
     460:	8c 81       	ldd	r24, Y+4	; 0x04
     462:	9d 81       	ldd	r25, Y+5	; 0x05
     464:	82 17       	cp	r24, r18
     466:	93 07       	cpc	r25, r19
     468:	ac f4       	brge	.+42     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
					to = from;
     46a:	8a 81       	ldd	r24, Y+2	; 0x02
     46c:	9b 81       	ldd	r25, Y+3	; 0x03
     46e:	9d 83       	std	Y+5, r25	; 0x05
     470:	8c 83       	std	Y+4, r24	; 0x04
					from = (*player).turns[i + 1].y;
     472:	8e 81       	ldd	r24, Y+6	; 0x06
     474:	9f 81       	ldd	r25, Y+7	; 0x07
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	28 89       	ldd	r18, Y+16	; 0x10
     47a:	39 89       	ldd	r19, Y+17	; 0x11
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	82 0f       	add	r24, r18
     486:	93 1f       	adc	r25, r19
     488:	07 96       	adiw	r24, 0x07	; 7
     48a:	fc 01       	movw	r30, r24
     48c:	80 81       	ld	r24, Z
     48e:	91 81       	ldd	r25, Z+1	; 0x01
     490:	9b 83       	std	Y+3, r25	; 0x03
     492:	8a 83       	std	Y+2, r24	; 0x02
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     494:	8a 81       	ldd	r24, Y+2	; 0x02
     496:	9b 81       	ldd	r25, Y+3	; 0x03
     498:	99 87       	std	Y+9, r25	; 0x09
     49a:	88 87       	std	Y+8, r24	; 0x08
     49c:	7c c0       	rjmp	.+248    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
					if ((playerId == 1 && gameState[(*player).turns[i].x][j] == 2)
     49e:	8a 89       	ldd	r24, Y+18	; 0x12
     4a0:	9b 89       	ldd	r25, Y+19	; 0x13
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	21 f5       	brne	.+72     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4a6:	28 89       	ldd	r18, Y+16	; 0x10
     4a8:	39 89       	ldd	r19, Y+17	; 0x11
     4aa:	8e 81       	ldd	r24, Y+6	; 0x06
     4ac:	9f 81       	ldd	r25, Y+7	; 0x07
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	82 0f       	add	r24, r18
     4b8:	93 1f       	adc	r25, r19
     4ba:	05 96       	adiw	r24, 0x05	; 5
     4bc:	fc 01       	movw	r30, r24
     4be:	80 81       	ld	r24, Z
     4c0:	91 81       	ldd	r25, Z+1	; 0x01
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	9c 01       	movw	r18, r24
     4c8:	22 0f       	add	r18, r18
     4ca:	33 1f       	adc	r19, r19
     4cc:	22 0f       	add	r18, r18
     4ce:	33 1f       	adc	r19, r19
     4d0:	82 0f       	add	r24, r18
     4d2:	93 1f       	adc	r25, r19
     4d4:	28 85       	ldd	r18, Y+8	; 0x08
     4d6:	39 85       	ldd	r19, Y+9	; 0x09
     4d8:	82 0f       	add	r24, r18
     4da:	93 1f       	adc	r25, r19
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	84 59       	subi	r24, 0x94	; 148
     4e2:	9e 4f       	sbci	r25, 0xFE	; 254
     4e4:	fc 01       	movw	r30, r24
     4e6:	80 81       	ld	r24, Z
     4e8:	91 81       	ldd	r25, Z+1	; 0x01
     4ea:	02 97       	sbiw	r24, 0x02	; 2
     4ec:	41 f1       	breq	.+80     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
							|| (playerId == 2 && gameState[(*player).turns[i].x][j] == 1)) //Collision with player 2 !
     4ee:	8a 89       	ldd	r24, Y+18	; 0x12
     4f0:	9b 89       	ldd	r25, Y+19	; 0x13
     4f2:	02 97       	sbiw	r24, 0x02	; 2
     4f4:	39 f5       	brne	.+78     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     4f6:	28 89       	ldd	r18, Y+16	; 0x10
     4f8:	39 89       	ldd	r19, Y+17	; 0x11
     4fa:	8e 81       	ldd	r24, Y+6	; 0x06
     4fc:	9f 81       	ldd	r25, Y+7	; 0x07
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	88 0f       	add	r24, r24
     504:	99 1f       	adc	r25, r25
     506:	82 0f       	add	r24, r18
     508:	93 1f       	adc	r25, r19
     50a:	05 96       	adiw	r24, 0x05	; 5
     50c:	fc 01       	movw	r30, r24
     50e:	80 81       	ld	r24, Z
     510:	91 81       	ldd	r25, Z+1	; 0x01
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	9c 01       	movw	r18, r24
     518:	22 0f       	add	r18, r18
     51a:	33 1f       	adc	r19, r19
     51c:	22 0f       	add	r18, r18
     51e:	33 1f       	adc	r19, r19
     520:	82 0f       	add	r24, r18
     522:	93 1f       	adc	r25, r19
     524:	28 85       	ldd	r18, Y+8	; 0x08
     526:	39 85       	ldd	r19, Y+9	; 0x09
     528:	82 0f       	add	r24, r18
     52a:	93 1f       	adc	r25, r19
     52c:	88 0f       	add	r24, r24
     52e:	99 1f       	adc	r25, r25
     530:	84 59       	subi	r24, 0x94	; 148
     532:	9e 4f       	sbci	r25, 0xFE	; 254
     534:	fc 01       	movw	r30, r24
     536:	80 81       	ld	r24, Z
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	19 f4       	brne	.+6      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
						collision = true;
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	89 83       	std	Y+1, r24	; 0x01
     542:	24 c0       	rjmp	.+72     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
					else
						gameState[(*player).turns[i].x][j] = 1;
     544:	28 89       	ldd	r18, Y+16	; 0x10
     546:	39 89       	ldd	r19, Y+17	; 0x11
     548:	8e 81       	ldd	r24, Y+6	; 0x06
     54a:	9f 81       	ldd	r25, Y+7	; 0x07
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	82 0f       	add	r24, r18
     556:	93 1f       	adc	r25, r19
     558:	05 96       	adiw	r24, 0x05	; 5
     55a:	fc 01       	movw	r30, r24
     55c:	80 81       	ld	r24, Z
     55e:	91 81       	ldd	r25, Z+1	; 0x01
     560:	88 0f       	add	r24, r24
     562:	99 1f       	adc	r25, r25
     564:	9c 01       	movw	r18, r24
     566:	22 0f       	add	r18, r18
     568:	33 1f       	adc	r19, r19
     56a:	22 0f       	add	r18, r18
     56c:	33 1f       	adc	r19, r19
     56e:	82 0f       	add	r24, r18
     570:	93 1f       	adc	r25, r19
     572:	28 85       	ldd	r18, Y+8	; 0x08
     574:	39 85       	ldd	r19, Y+9	; 0x09
     576:	82 0f       	add	r24, r18
     578:	93 1f       	adc	r25, r19
     57a:	88 0f       	add	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	84 59       	subi	r24, 0x94	; 148
     580:	9e 4f       	sbci	r25, 0xFE	; 254
     582:	21 e0       	ldi	r18, 0x01	; 1
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	fc 01       	movw	r30, r24
     588:	31 83       	std	Z+1, r19	; 0x01
     58a:	20 83       	st	Z, r18
					to = from;
					from = (*player).turns[i + 1].y;
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     58c:	88 85       	ldd	r24, Y+8	; 0x08
     58e:	99 85       	ldd	r25, Y+9	; 0x09
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	99 87       	std	Y+9, r25	; 0x09
     594:	88 87       	std	Y+8, r24	; 0x08
     596:	28 85       	ldd	r18, Y+8	; 0x08
     598:	39 85       	ldd	r19, Y+9	; 0x09
     59a:	8c 81       	ldd	r24, Y+4	; 0x04
     59c:	9d 81       	ldd	r25, Y+5	; 0x05
     59e:	82 17       	cp	r24, r18
     5a0:	93 07       	cpc	r25, r19
     5a2:	0c f0       	brlt	.+2      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     5a4:	7c cf       	rjmp	.-264    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     5a6:	45 c2       	rjmp	.+1162   	; 0xa32 <__stack+0x133>
						collision = true;
					else
						gameState[(*player).turns[i].x][j] = 1;
				}

			} else if ((*player).turns[i].y == (*player).turns[i + 1].y) { //Draw horizontal line
     5a8:	28 89       	ldd	r18, Y+16	; 0x10
     5aa:	39 89       	ldd	r19, Y+17	; 0x11
     5ac:	8e 81       	ldd	r24, Y+6	; 0x06
     5ae:	9f 81       	ldd	r25, Y+7	; 0x07
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	88 0f       	add	r24, r24
     5b6:	99 1f       	adc	r25, r25
     5b8:	82 0f       	add	r24, r18
     5ba:	93 1f       	adc	r25, r19
     5bc:	07 96       	adiw	r24, 0x07	; 7
     5be:	fc 01       	movw	r30, r24
     5c0:	20 81       	ld	r18, Z
     5c2:	31 81       	ldd	r19, Z+1	; 0x01
     5c4:	8e 81       	ldd	r24, Y+6	; 0x06
     5c6:	9f 81       	ldd	r25, Y+7	; 0x07
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	48 89       	ldd	r20, Y+16	; 0x10
     5cc:	59 89       	ldd	r21, Y+17	; 0x11
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	88 0f       	add	r24, r24
     5d4:	99 1f       	adc	r25, r25
     5d6:	84 0f       	add	r24, r20
     5d8:	95 1f       	adc	r25, r21
     5da:	07 96       	adiw	r24, 0x07	; 7
     5dc:	fc 01       	movw	r30, r24
     5de:	80 81       	ld	r24, Z
     5e0:	91 81       	ldd	r25, Z+1	; 0x01
     5e2:	28 17       	cp	r18, r24
     5e4:	39 07       	cpc	r19, r25
     5e6:	09 f0       	breq	.+2      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
     5e8:	24 c2       	rjmp	.+1096   	; 0xa32 <__stack+0x133>

				from = (*player).turns[i].x;
     5ea:	28 89       	ldd	r18, Y+16	; 0x10
     5ec:	39 89       	ldd	r19, Y+17	; 0x11
     5ee:	8e 81       	ldd	r24, Y+6	; 0x06
     5f0:	9f 81       	ldd	r25, Y+7	; 0x07
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	82 0f       	add	r24, r18
     5fc:	93 1f       	adc	r25, r19
     5fe:	05 96       	adiw	r24, 0x05	; 5
     600:	fc 01       	movw	r30, r24
     602:	80 81       	ld	r24, Z
     604:	91 81       	ldd	r25, Z+1	; 0x01
     606:	9b 83       	std	Y+3, r25	; 0x03
     608:	8a 83       	std	Y+2, r24	; 0x02
				to = (*player).turns[i + 1].x;
     60a:	8e 81       	ldd	r24, Y+6	; 0x06
     60c:	9f 81       	ldd	r25, Y+7	; 0x07
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	28 89       	ldd	r18, Y+16	; 0x10
     612:	39 89       	ldd	r19, Y+17	; 0x11
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	82 0f       	add	r24, r18
     61e:	93 1f       	adc	r25, r19
     620:	05 96       	adiw	r24, 0x05	; 5
     622:	fc 01       	movw	r30, r24
     624:	80 81       	ld	r24, Z
     626:	91 81       	ldd	r25, Z+1	; 0x01
     628:	9d 83       	std	Y+5, r25	; 0x05
     62a:	8c 83       	std	Y+4, r24	; 0x04

				if (from > to) {
     62c:	2a 81       	ldd	r18, Y+2	; 0x02
     62e:	3b 81       	ldd	r19, Y+3	; 0x03
     630:	8c 81       	ldd	r24, Y+4	; 0x04
     632:	9d 81       	ldd	r25, Y+5	; 0x05
     634:	82 17       	cp	r24, r18
     636:	93 07       	cpc	r25, r19
     638:	ac f4       	brge	.+42     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
					to = from;
     63a:	8a 81       	ldd	r24, Y+2	; 0x02
     63c:	9b 81       	ldd	r25, Y+3	; 0x03
     63e:	9d 83       	std	Y+5, r25	; 0x05
     640:	8c 83       	std	Y+4, r24	; 0x04
					from = (*player).turns[i + 1].x;
     642:	8e 81       	ldd	r24, Y+6	; 0x06
     644:	9f 81       	ldd	r25, Y+7	; 0x07
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	28 89       	ldd	r18, Y+16	; 0x10
     64a:	39 89       	ldd	r19, Y+17	; 0x11
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	82 0f       	add	r24, r18
     656:	93 1f       	adc	r25, r19
     658:	05 96       	adiw	r24, 0x05	; 5
     65a:	fc 01       	movw	r30, r24
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	9b 83       	std	Y+3, r25	; 0x03
     662:	8a 83       	std	Y+2, r24	; 0x02
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     664:	8a 81       	ldd	r24, Y+2	; 0x02
     666:	9b 81       	ldd	r25, Y+3	; 0x03
     668:	9b 87       	std	Y+11, r25	; 0x0b
     66a:	8a 87       	std	Y+10, r24	; 0x0a
     66c:	7c c0       	rjmp	.+248    	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
					if ((playerId == 1 && gameState[j][(*player).turns[i].y] == 2)
     66e:	8a 89       	ldd	r24, Y+18	; 0x12
     670:	9b 89       	ldd	r25, Y+19	; 0x13
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	21 f5       	brne	.+72     	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     676:	28 89       	ldd	r18, Y+16	; 0x10
     678:	39 89       	ldd	r19, Y+17	; 0x11
     67a:	8e 81       	ldd	r24, Y+6	; 0x06
     67c:	9f 81       	ldd	r25, Y+7	; 0x07
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	88 0f       	add	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	82 0f       	add	r24, r18
     688:	93 1f       	adc	r25, r19
     68a:	07 96       	adiw	r24, 0x07	; 7
     68c:	fc 01       	movw	r30, r24
     68e:	20 81       	ld	r18, Z
     690:	31 81       	ldd	r19, Z+1	; 0x01
     692:	8a 85       	ldd	r24, Y+10	; 0x0a
     694:	9b 85       	ldd	r25, Y+11	; 0x0b
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	ac 01       	movw	r20, r24
     69c:	44 0f       	add	r20, r20
     69e:	55 1f       	adc	r21, r21
     6a0:	44 0f       	add	r20, r20
     6a2:	55 1f       	adc	r21, r21
     6a4:	84 0f       	add	r24, r20
     6a6:	95 1f       	adc	r25, r21
     6a8:	82 0f       	add	r24, r18
     6aa:	93 1f       	adc	r25, r19
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	84 59       	subi	r24, 0x94	; 148
     6b2:	9e 4f       	sbci	r25, 0xFE	; 254
     6b4:	fc 01       	movw	r30, r24
     6b6:	80 81       	ld	r24, Z
     6b8:	91 81       	ldd	r25, Z+1	; 0x01
     6ba:	02 97       	sbiw	r24, 0x02	; 2
     6bc:	41 f1       	breq	.+80     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
						   || (playerId == 2 && gameState[j][(*player).turns[i].y] == 1)) //Collision with player 2 !
     6be:	8a 89       	ldd	r24, Y+18	; 0x12
     6c0:	9b 89       	ldd	r25, Y+19	; 0x13
     6c2:	02 97       	sbiw	r24, 0x02	; 2
     6c4:	39 f5       	brne	.+78     	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
     6c6:	28 89       	ldd	r18, Y+16	; 0x10
     6c8:	39 89       	ldd	r19, Y+17	; 0x11
     6ca:	8e 81       	ldd	r24, Y+6	; 0x06
     6cc:	9f 81       	ldd	r25, Y+7	; 0x07
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	82 0f       	add	r24, r18
     6d8:	93 1f       	adc	r25, r19
     6da:	07 96       	adiw	r24, 0x07	; 7
     6dc:	fc 01       	movw	r30, r24
     6de:	20 81       	ld	r18, Z
     6e0:	31 81       	ldd	r19, Z+1	; 0x01
     6e2:	8a 85       	ldd	r24, Y+10	; 0x0a
     6e4:	9b 85       	ldd	r25, Y+11	; 0x0b
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	ac 01       	movw	r20, r24
     6ec:	44 0f       	add	r20, r20
     6ee:	55 1f       	adc	r21, r21
     6f0:	44 0f       	add	r20, r20
     6f2:	55 1f       	adc	r21, r21
     6f4:	84 0f       	add	r24, r20
     6f6:	95 1f       	adc	r25, r21
     6f8:	82 0f       	add	r24, r18
     6fa:	93 1f       	adc	r25, r19
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	84 59       	subi	r24, 0x94	; 148
     702:	9e 4f       	sbci	r25, 0xFE	; 254
     704:	fc 01       	movw	r30, r24
     706:	80 81       	ld	r24, Z
     708:	91 81       	ldd	r25, Z+1	; 0x01
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	19 f4       	brne	.+6      	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
						collision = true;
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	89 83       	std	Y+1, r24	; 0x01
     712:	24 c0       	rjmp	.+72     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
					else
						gameState[j][(*player).turns[i].y] = 1;
     714:	28 89       	ldd	r18, Y+16	; 0x10
     716:	39 89       	ldd	r19, Y+17	; 0x11
     718:	8e 81       	ldd	r24, Y+6	; 0x06
     71a:	9f 81       	ldd	r25, Y+7	; 0x07
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	82 0f       	add	r24, r18
     726:	93 1f       	adc	r25, r19
     728:	07 96       	adiw	r24, 0x07	; 7
     72a:	fc 01       	movw	r30, r24
     72c:	20 81       	ld	r18, Z
     72e:	31 81       	ldd	r19, Z+1	; 0x01
     730:	8a 85       	ldd	r24, Y+10	; 0x0a
     732:	9b 85       	ldd	r25, Y+11	; 0x0b
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	ac 01       	movw	r20, r24
     73a:	44 0f       	add	r20, r20
     73c:	55 1f       	adc	r21, r21
     73e:	44 0f       	add	r20, r20
     740:	55 1f       	adc	r21, r21
     742:	84 0f       	add	r24, r20
     744:	95 1f       	adc	r25, r21
     746:	82 0f       	add	r24, r18
     748:	93 1f       	adc	r25, r19
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	84 59       	subi	r24, 0x94	; 148
     750:	9e 4f       	sbci	r25, 0xFE	; 254
     752:	21 e0       	ldi	r18, 0x01	; 1
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	fc 01       	movw	r30, r24
     758:	31 83       	std	Z+1, r19	; 0x01
     75a:	20 83       	st	Z, r18
					to = from;
					from = (*player).turns[i + 1].x;
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     75c:	8a 85       	ldd	r24, Y+10	; 0x0a
     75e:	9b 85       	ldd	r25, Y+11	; 0x0b
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	9b 87       	std	Y+11, r25	; 0x0b
     764:	8a 87       	std	Y+10, r24	; 0x0a
     766:	2a 85       	ldd	r18, Y+10	; 0x0a
     768:	3b 85       	ldd	r19, Y+11	; 0x0b
     76a:	8c 81       	ldd	r24, Y+4	; 0x04
     76c:	9d 81       	ldd	r25, Y+5	; 0x05
     76e:	82 17       	cp	r24, r18
     770:	93 07       	cpc	r25, r19
     772:	0c f0       	brlt	.+2      	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
     774:	7c cf       	rjmp	.-264    	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
     776:	5d c1       	rjmp	.+698    	; 0xa32 <__stack+0x133>

			}

		} else { //Processing the current position

			if ((*player).turns[i].x == (*player).x) { //Draw vertical line
     778:	28 89       	ldd	r18, Y+16	; 0x10
     77a:	39 89       	ldd	r19, Y+17	; 0x11
     77c:	8e 81       	ldd	r24, Y+6	; 0x06
     77e:	9f 81       	ldd	r25, Y+7	; 0x07
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	82 0f       	add	r24, r18
     78a:	93 1f       	adc	r25, r19
     78c:	05 96       	adiw	r24, 0x05	; 5
     78e:	fc 01       	movw	r30, r24
     790:	20 81       	ld	r18, Z
     792:	31 81       	ldd	r19, Z+1	; 0x01
     794:	88 89       	ldd	r24, Y+16	; 0x10
     796:	99 89       	ldd	r25, Y+17	; 0x11
     798:	fc 01       	movw	r30, r24
     79a:	80 81       	ld	r24, Z
     79c:	91 81       	ldd	r25, Z+1	; 0x01
     79e:	28 17       	cp	r18, r24
     7a0:	39 07       	cpc	r19, r25
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
     7a4:	98 c0       	rjmp	.+304    	; 0x8d6 <__LOCK_REGION_LENGTH__+0x4d6>

				from = (*player).turns[i].y;
     7a6:	28 89       	ldd	r18, Y+16	; 0x10
     7a8:	39 89       	ldd	r19, Y+17	; 0x11
     7aa:	8e 81       	ldd	r24, Y+6	; 0x06
     7ac:	9f 81       	ldd	r25, Y+7	; 0x07
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	82 0f       	add	r24, r18
     7b8:	93 1f       	adc	r25, r19
     7ba:	07 96       	adiw	r24, 0x07	; 7
     7bc:	fc 01       	movw	r30, r24
     7be:	80 81       	ld	r24, Z
     7c0:	91 81       	ldd	r25, Z+1	; 0x01
     7c2:	9b 83       	std	Y+3, r25	; 0x03
     7c4:	8a 83       	std	Y+2, r24	; 0x02
				to = (*player).y;
     7c6:	88 89       	ldd	r24, Y+16	; 0x10
     7c8:	99 89       	ldd	r25, Y+17	; 0x11
     7ca:	fc 01       	movw	r30, r24
     7cc:	82 81       	ldd	r24, Z+2	; 0x02
     7ce:	93 81       	ldd	r25, Z+3	; 0x03
     7d0:	9d 83       	std	Y+5, r25	; 0x05
     7d2:	8c 83       	std	Y+4, r24	; 0x04

				if (from > to) {
     7d4:	2a 81       	ldd	r18, Y+2	; 0x02
     7d6:	3b 81       	ldd	r19, Y+3	; 0x03
     7d8:	8c 81       	ldd	r24, Y+4	; 0x04
     7da:	9d 81       	ldd	r25, Y+5	; 0x05
     7dc:	82 17       	cp	r24, r18
     7de:	93 07       	cpc	r25, r19
     7e0:	5c f4       	brge	.+22     	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
					to = from;
     7e2:	8a 81       	ldd	r24, Y+2	; 0x02
     7e4:	9b 81       	ldd	r25, Y+3	; 0x03
     7e6:	9d 83       	std	Y+5, r25	; 0x05
     7e8:	8c 83       	std	Y+4, r24	; 0x04
					from = (*player).y;
     7ea:	88 89       	ldd	r24, Y+16	; 0x10
     7ec:	99 89       	ldd	r25, Y+17	; 0x11
     7ee:	fc 01       	movw	r30, r24
     7f0:	82 81       	ldd	r24, Z+2	; 0x02
     7f2:	93 81       	ldd	r25, Z+3	; 0x03
     7f4:	9b 83       	std	Y+3, r25	; 0x03
     7f6:	8a 83       	std	Y+2, r24	; 0x02
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	9b 81       	ldd	r25, Y+3	; 0x03
     7fc:	9d 87       	std	Y+13, r25	; 0x0d
     7fe:	8c 87       	std	Y+12, r24	; 0x0c
     800:	61 c0       	rjmp	.+194    	; 0x8c4 <__LOCK_REGION_LENGTH__+0x4c4>
					if ((playerId == 1 && gameState[(*player).x][j] == 2)
     802:	8a 89       	ldd	r24, Y+18	; 0x12
     804:	9b 89       	ldd	r25, Y+19	; 0x13
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	d9 f4       	brne	.+54     	; 0x840 <__LOCK_REGION_LENGTH__+0x440>
     80a:	88 89       	ldd	r24, Y+16	; 0x10
     80c:	99 89       	ldd	r25, Y+17	; 0x11
     80e:	fc 01       	movw	r30, r24
     810:	80 81       	ld	r24, Z
     812:	91 81       	ldd	r25, Z+1	; 0x01
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	9c 01       	movw	r18, r24
     81a:	22 0f       	add	r18, r18
     81c:	33 1f       	adc	r19, r19
     81e:	22 0f       	add	r18, r18
     820:	33 1f       	adc	r19, r19
     822:	82 0f       	add	r24, r18
     824:	93 1f       	adc	r25, r19
     826:	2c 85       	ldd	r18, Y+12	; 0x0c
     828:	3d 85       	ldd	r19, Y+13	; 0x0d
     82a:	82 0f       	add	r24, r18
     82c:	93 1f       	adc	r25, r19
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	84 59       	subi	r24, 0x94	; 148
     834:	9e 4f       	sbci	r25, 0xFE	; 254
     836:	fc 01       	movw	r30, r24
     838:	80 81       	ld	r24, Z
     83a:	91 81       	ldd	r25, Z+1	; 0x01
     83c:	02 97       	sbiw	r24, 0x02	; 2
     83e:	f9 f0       	breq	.+62     	; 0x87e <__LOCK_REGION_LENGTH__+0x47e>
						   || (playerId == 2 && gameState[(*player).x][j] == 1)) //Collision with player 2 !
     840:	8a 89       	ldd	r24, Y+18	; 0x12
     842:	9b 89       	ldd	r25, Y+19	; 0x13
     844:	02 97       	sbiw	r24, 0x02	; 2
     846:	f1 f4       	brne	.+60     	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     848:	88 89       	ldd	r24, Y+16	; 0x10
     84a:	99 89       	ldd	r25, Y+17	; 0x11
     84c:	fc 01       	movw	r30, r24
     84e:	80 81       	ld	r24, Z
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	9c 01       	movw	r18, r24
     858:	22 0f       	add	r18, r18
     85a:	33 1f       	adc	r19, r19
     85c:	22 0f       	add	r18, r18
     85e:	33 1f       	adc	r19, r19
     860:	82 0f       	add	r24, r18
     862:	93 1f       	adc	r25, r19
     864:	2c 85       	ldd	r18, Y+12	; 0x0c
     866:	3d 85       	ldd	r19, Y+13	; 0x0d
     868:	82 0f       	add	r24, r18
     86a:	93 1f       	adc	r25, r19
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	84 59       	subi	r24, 0x94	; 148
     872:	9e 4f       	sbci	r25, 0xFE	; 254
     874:	fc 01       	movw	r30, r24
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	19 f4       	brne	.+6      	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
						collision = true;
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	1b c0       	rjmp	.+54     	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
					else
						gameState[(*player).x][j] = 1;
     884:	88 89       	ldd	r24, Y+16	; 0x10
     886:	99 89       	ldd	r25, Y+17	; 0x11
     888:	fc 01       	movw	r30, r24
     88a:	80 81       	ld	r24, Z
     88c:	91 81       	ldd	r25, Z+1	; 0x01
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	9c 01       	movw	r18, r24
     894:	22 0f       	add	r18, r18
     896:	33 1f       	adc	r19, r19
     898:	22 0f       	add	r18, r18
     89a:	33 1f       	adc	r19, r19
     89c:	82 0f       	add	r24, r18
     89e:	93 1f       	adc	r25, r19
     8a0:	2c 85       	ldd	r18, Y+12	; 0x0c
     8a2:	3d 85       	ldd	r19, Y+13	; 0x0d
     8a4:	82 0f       	add	r24, r18
     8a6:	93 1f       	adc	r25, r19
     8a8:	88 0f       	add	r24, r24
     8aa:	99 1f       	adc	r25, r25
     8ac:	84 59       	subi	r24, 0x94	; 148
     8ae:	9e 4f       	sbci	r25, 0xFE	; 254
     8b0:	21 e0       	ldi	r18, 0x01	; 1
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	fc 01       	movw	r30, r24
     8b6:	31 83       	std	Z+1, r19	; 0x01
     8b8:	20 83       	st	Z, r18
					to = from;
					from = (*player).y;
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     8ba:	8c 85       	ldd	r24, Y+12	; 0x0c
     8bc:	9d 85       	ldd	r25, Y+13	; 0x0d
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	9d 87       	std	Y+13, r25	; 0x0d
     8c2:	8c 87       	std	Y+12, r24	; 0x0c
     8c4:	2c 85       	ldd	r18, Y+12	; 0x0c
     8c6:	3d 85       	ldd	r19, Y+13	; 0x0d
     8c8:	8c 81       	ldd	r24, Y+4	; 0x04
     8ca:	9d 81       	ldd	r25, Y+5	; 0x05
     8cc:	82 17       	cp	r24, r18
     8ce:	93 07       	cpc	r25, r19
     8d0:	0c f0       	brlt	.+2      	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
     8d2:	97 cf       	rjmp	.-210    	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
     8d4:	ae c0       	rjmp	.+348    	; 0xa32 <__stack+0x133>
						collision = true;
					else
						gameState[(*player).x][j] = 1;
				}

			} else if ((*player).turns[i].y == (*player).y) { //Draw horizontal line
     8d6:	28 89       	ldd	r18, Y+16	; 0x10
     8d8:	39 89       	ldd	r19, Y+17	; 0x11
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	9f 81       	ldd	r25, Y+7	; 0x07
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	82 0f       	add	r24, r18
     8e8:	93 1f       	adc	r25, r19
     8ea:	07 96       	adiw	r24, 0x07	; 7
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 81       	ld	r18, Z
     8f0:	31 81       	ldd	r19, Z+1	; 0x01
     8f2:	88 89       	ldd	r24, Y+16	; 0x10
     8f4:	99 89       	ldd	r25, Y+17	; 0x11
     8f6:	fc 01       	movw	r30, r24
     8f8:	82 81       	ldd	r24, Z+2	; 0x02
     8fa:	93 81       	ldd	r25, Z+3	; 0x03
     8fc:	28 17       	cp	r18, r24
     8fe:	39 07       	cpc	r19, r25
     900:	09 f0       	breq	.+2      	; 0x904 <__stack+0x5>
     902:	97 c0       	rjmp	.+302    	; 0xa32 <__stack+0x133>

				from = (*player).turns[i].x;
     904:	28 89       	ldd	r18, Y+16	; 0x10
     906:	39 89       	ldd	r19, Y+17	; 0x11
     908:	8e 81       	ldd	r24, Y+6	; 0x06
     90a:	9f 81       	ldd	r25, Y+7	; 0x07
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	82 0f       	add	r24, r18
     916:	93 1f       	adc	r25, r19
     918:	05 96       	adiw	r24, 0x05	; 5
     91a:	fc 01       	movw	r30, r24
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	9b 83       	std	Y+3, r25	; 0x03
     922:	8a 83       	std	Y+2, r24	; 0x02
				to = (*player).x;
     924:	88 89       	ldd	r24, Y+16	; 0x10
     926:	99 89       	ldd	r25, Y+17	; 0x11
     928:	fc 01       	movw	r30, r24
     92a:	80 81       	ld	r24, Z
     92c:	91 81       	ldd	r25, Z+1	; 0x01
     92e:	9d 83       	std	Y+5, r25	; 0x05
     930:	8c 83       	std	Y+4, r24	; 0x04

				if (from > to) {
     932:	2a 81       	ldd	r18, Y+2	; 0x02
     934:	3b 81       	ldd	r19, Y+3	; 0x03
     936:	8c 81       	ldd	r24, Y+4	; 0x04
     938:	9d 81       	ldd	r25, Y+5	; 0x05
     93a:	82 17       	cp	r24, r18
     93c:	93 07       	cpc	r25, r19
     93e:	5c f4       	brge	.+22     	; 0x956 <__stack+0x57>
					to = from;
     940:	8a 81       	ldd	r24, Y+2	; 0x02
     942:	9b 81       	ldd	r25, Y+3	; 0x03
     944:	9d 83       	std	Y+5, r25	; 0x05
     946:	8c 83       	std	Y+4, r24	; 0x04
					from = (*player).x;
     948:	88 89       	ldd	r24, Y+16	; 0x10
     94a:	99 89       	ldd	r25, Y+17	; 0x11
     94c:	fc 01       	movw	r30, r24
     94e:	80 81       	ld	r24, Z
     950:	91 81       	ldd	r25, Z+1	; 0x01
     952:	9b 83       	std	Y+3, r25	; 0x03
     954:	8a 83       	std	Y+2, r24	; 0x02
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	9b 81       	ldd	r25, Y+3	; 0x03
     95a:	9f 87       	std	Y+15, r25	; 0x0f
     95c:	8e 87       	std	Y+14, r24	; 0x0e
     95e:	61 c0       	rjmp	.+194    	; 0xa22 <__stack+0x123>
					if ((playerId == 1 && gameState[j][(*player).y] == 2) || (playerId == 2 && gameState[j][(*player).y] == 1)) //Collision with player 2 !
     960:	8a 89       	ldd	r24, Y+18	; 0x12
     962:	9b 89       	ldd	r25, Y+19	; 0x13
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	d9 f4       	brne	.+54     	; 0x99e <__stack+0x9f>
     968:	88 89       	ldd	r24, Y+16	; 0x10
     96a:	99 89       	ldd	r25, Y+17	; 0x11
     96c:	fc 01       	movw	r30, r24
     96e:	22 81       	ldd	r18, Z+2	; 0x02
     970:	33 81       	ldd	r19, Z+3	; 0x03
     972:	8e 85       	ldd	r24, Y+14	; 0x0e
     974:	9f 85       	ldd	r25, Y+15	; 0x0f
     976:	88 0f       	add	r24, r24
     978:	99 1f       	adc	r25, r25
     97a:	ac 01       	movw	r20, r24
     97c:	44 0f       	add	r20, r20
     97e:	55 1f       	adc	r21, r21
     980:	44 0f       	add	r20, r20
     982:	55 1f       	adc	r21, r21
     984:	84 0f       	add	r24, r20
     986:	95 1f       	adc	r25, r21
     988:	82 0f       	add	r24, r18
     98a:	93 1f       	adc	r25, r19
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	84 59       	subi	r24, 0x94	; 148
     992:	9e 4f       	sbci	r25, 0xFE	; 254
     994:	fc 01       	movw	r30, r24
     996:	80 81       	ld	r24, Z
     998:	91 81       	ldd	r25, Z+1	; 0x01
     99a:	02 97       	sbiw	r24, 0x02	; 2
     99c:	f9 f0       	breq	.+62     	; 0x9dc <__stack+0xdd>
     99e:	8a 89       	ldd	r24, Y+18	; 0x12
     9a0:	9b 89       	ldd	r25, Y+19	; 0x13
     9a2:	02 97       	sbiw	r24, 0x02	; 2
     9a4:	f1 f4       	brne	.+60     	; 0x9e2 <__stack+0xe3>
     9a6:	88 89       	ldd	r24, Y+16	; 0x10
     9a8:	99 89       	ldd	r25, Y+17	; 0x11
     9aa:	fc 01       	movw	r30, r24
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	33 81       	ldd	r19, Z+3	; 0x03
     9b0:	8e 85       	ldd	r24, Y+14	; 0x0e
     9b2:	9f 85       	ldd	r25, Y+15	; 0x0f
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	ac 01       	movw	r20, r24
     9ba:	44 0f       	add	r20, r20
     9bc:	55 1f       	adc	r21, r21
     9be:	44 0f       	add	r20, r20
     9c0:	55 1f       	adc	r21, r21
     9c2:	84 0f       	add	r24, r20
     9c4:	95 1f       	adc	r25, r21
     9c6:	82 0f       	add	r24, r18
     9c8:	93 1f       	adc	r25, r19
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	84 59       	subi	r24, 0x94	; 148
     9d0:	9e 4f       	sbci	r25, 0xFE	; 254
     9d2:	fc 01       	movw	r30, r24
     9d4:	80 81       	ld	r24, Z
     9d6:	91 81       	ldd	r25, Z+1	; 0x01
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	19 f4       	brne	.+6      	; 0x9e2 <__stack+0xe3>
						collision = true;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	89 83       	std	Y+1, r24	; 0x01
     9e0:	1b c0       	rjmp	.+54     	; 0xa18 <__stack+0x119>
					else
						gameState[j][(*player).y] = 1;
     9e2:	88 89       	ldd	r24, Y+16	; 0x10
     9e4:	99 89       	ldd	r25, Y+17	; 0x11
     9e6:	fc 01       	movw	r30, r24
     9e8:	22 81       	ldd	r18, Z+2	; 0x02
     9ea:	33 81       	ldd	r19, Z+3	; 0x03
     9ec:	8e 85       	ldd	r24, Y+14	; 0x0e
     9ee:	9f 85       	ldd	r25, Y+15	; 0x0f
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	ac 01       	movw	r20, r24
     9f6:	44 0f       	add	r20, r20
     9f8:	55 1f       	adc	r21, r21
     9fa:	44 0f       	add	r20, r20
     9fc:	55 1f       	adc	r21, r21
     9fe:	84 0f       	add	r24, r20
     a00:	95 1f       	adc	r25, r21
     a02:	82 0f       	add	r24, r18
     a04:	93 1f       	adc	r25, r19
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	84 59       	subi	r24, 0x94	; 148
     a0c:	9e 4f       	sbci	r25, 0xFE	; 254
     a0e:	21 e0       	ldi	r18, 0x01	; 1
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	fc 01       	movw	r30, r24
     a14:	31 83       	std	Z+1, r19	; 0x01
     a16:	20 83       	st	Z, r18
					to = from;
					from = (*player).x;
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     a18:	8e 85       	ldd	r24, Y+14	; 0x0e
     a1a:	9f 85       	ldd	r25, Y+15	; 0x0f
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	9f 87       	std	Y+15, r25	; 0x0f
     a20:	8e 87       	std	Y+14, r24	; 0x0e
     a22:	2e 85       	ldd	r18, Y+14	; 0x0e
     a24:	3f 85       	ldd	r19, Y+15	; 0x0f
     a26:	8c 81       	ldd	r24, Y+4	; 0x04
     a28:	9d 81       	ldd	r25, Y+5	; 0x05
     a2a:	82 17       	cp	r24, r18
     a2c:	93 07       	cpc	r25, r19
     a2e:	0c f0       	brlt	.+2      	; 0xa32 <__stack+0x133>
     a30:	97 cf       	rjmp	.-210    	; 0x960 <__stack+0x61>
uint8_t draw_players_lines(Player *player, int playerId)
{
	uint8_t collision = false;	
	int from, to;

	for (int i = 0; i < (*player).turnsCount + 1; i++) {
     a32:	8e 81       	ldd	r24, Y+6	; 0x06
     a34:	9f 81       	ldd	r25, Y+7	; 0x07
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	9f 83       	std	Y+7, r25	; 0x07
     a3a:	8e 83       	std	Y+6, r24	; 0x06
     a3c:	88 89       	ldd	r24, Y+16	; 0x10
     a3e:	99 89       	ldd	r25, Y+17	; 0x11
     a40:	8f 5b       	subi	r24, 0xBF	; 191
     a42:	9f 4f       	sbci	r25, 0xFF	; 255
     a44:	fc 01       	movw	r30, r24
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	9c 01       	movw	r18, r24
     a4c:	2f 5f       	subi	r18, 0xFF	; 255
     a4e:	3f 4f       	sbci	r19, 0xFF	; 255
     a50:	8e 81       	ldd	r24, Y+6	; 0x06
     a52:	9f 81       	ldd	r25, Y+7	; 0x07
     a54:	82 17       	cp	r24, r18
     a56:	93 07       	cpc	r25, r19
     a58:	0c f4       	brge	.+2      	; 0xa5c <__stack+0x15d>
     a5a:	b1 cc       	rjmp	.-1694   	; 0x3be <draw_players_lines+0x24>
			}

		}
	}

	return collision;
     a5c:	89 81       	ldd	r24, Y+1	; 0x01
}
     a5e:	63 96       	adiw	r28, 0x13	; 19
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	f8 94       	cli
     a64:	de bf       	out	0x3e, r29	; 62
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	cd bf       	out	0x3d, r28	; 61
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <game_processing>:

/* TODO: protect gameState with a mutex */
void game_processing(void *pvParameters)
{
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	cc 54       	subi	r28, 0x4C	; 76
     a7a:	d1 09       	sbc	r29, r1
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	9e 01       	movw	r18, r28
     a88:	25 5b       	subi	r18, 0xB5	; 181
     a8a:	3f 4f       	sbci	r19, 0xFF	; 255
     a8c:	f9 01       	movw	r30, r18
     a8e:	91 83       	std	Z+1, r25	; 0x01
     a90:	80 83       	st	Z, r24
	/* Populate gameState from the players' positions and tracks:
	* Start at turn[i] to compare with turn[i - 1] for each player
	*/
	Player player;
	bool collision = false;
     a92:	19 82       	std	Y+1, r1	; 0x01

	for(;;) {

		while(!collision) {
     a94:	bb c0       	rjmp	.+374    	; 0xc0c <game_processing+0x19c>
			
			for (int p = 0; p < 2; p++) {
     a96:	1b 82       	std	Y+3, r1	; 0x03
     a98:	1a 82       	std	Y+2, r1	; 0x02
     a9a:	af c0       	rjmp	.+350    	; 0xbfa <game_processing+0x18a>
				if (p == 0)
     a9c:	8a 81       	ldd	r24, Y+2	; 0x02
     a9e:	9b 81       	ldd	r25, Y+3	; 0x03
     aa0:	89 2b       	or	r24, r25
     aa2:	51 f4       	brne	.+20     	; 0xab8 <game_processing+0x48>
					player = playerOne;
     aa4:	83 e4       	ldi	r24, 0x43	; 67
     aa6:	e4 e8       	ldi	r30, 0x84	; 132
     aa8:	f2 e0       	ldi	r31, 0x02	; 2
     aaa:	de 01       	movw	r26, r28
     aac:	18 96       	adiw	r26, 0x08	; 8
     aae:	01 90       	ld	r0, Z+
     ab0:	0d 92       	st	X+, r0
     ab2:	8a 95       	dec	r24
     ab4:	e1 f7       	brne	.-8      	; 0xaae <game_processing+0x3e>
     ab6:	09 c0       	rjmp	.+18     	; 0xaca <game_processing+0x5a>
				else
					player = playerTwo;
     ab8:	83 e4       	ldi	r24, 0x43	; 67
     aba:	e7 ec       	ldi	r30, 0xC7	; 199
     abc:	f2 e0       	ldi	r31, 0x02	; 2
     abe:	de 01       	movw	r26, r28
     ac0:	18 96       	adiw	r26, 0x08	; 8
     ac2:	01 90       	ld	r0, Z+
     ac4:	0d 92       	st	X+, r0
     ac6:	8a 95       	dec	r24
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <game_processing+0x52>

				/* Erase player */
				for (int i = 0; i < 14; i++)
     aca:	1d 82       	std	Y+5, r1	; 0x05
     acc:	1c 82       	std	Y+4, r1	; 0x04
     ace:	60 c0       	rjmp	.+192    	; 0xb90 <game_processing+0x120>
					for (int j = 0; j < 10; j++)
     ad0:	1f 82       	std	Y+7, r1	; 0x07
     ad2:	1e 82       	std	Y+6, r1	; 0x06
     ad4:	53 c0       	rjmp	.+166    	; 0xb7c <game_processing+0x10c>
						if ((p == 0 && gameState[i][j] == 1)
     ad6:	8a 81       	ldd	r24, Y+2	; 0x02
     ad8:	9b 81       	ldd	r25, Y+3	; 0x03
     ada:	89 2b       	or	r24, r25
     adc:	c1 f4       	brne	.+48     	; 0xb0e <game_processing+0x9e>
     ade:	8c 81       	ldd	r24, Y+4	; 0x04
     ae0:	9d 81       	ldd	r25, Y+5	; 0x05
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	9c 01       	movw	r18, r24
     ae8:	22 0f       	add	r18, r18
     aea:	33 1f       	adc	r19, r19
     aec:	22 0f       	add	r18, r18
     aee:	33 1f       	adc	r19, r19
     af0:	82 0f       	add	r24, r18
     af2:	93 1f       	adc	r25, r19
     af4:	2e 81       	ldd	r18, Y+6	; 0x06
     af6:	3f 81       	ldd	r19, Y+7	; 0x07
     af8:	82 0f       	add	r24, r18
     afa:	93 1f       	adc	r25, r19
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	84 59       	subi	r24, 0x94	; 148
     b02:	9e 4f       	sbci	r25, 0xFE	; 254
     b04:	fc 01       	movw	r30, r24
     b06:	80 81       	ld	r24, Z
     b08:	91 81       	ldd	r25, Z+1	; 0x01
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	e1 f0       	breq	.+56     	; 0xb46 <game_processing+0xd6>
							|| (p == 1 && gameState[i][j] == 2))
     b0e:	8a 81       	ldd	r24, Y+2	; 0x02
     b10:	9b 81       	ldd	r25, Y+3	; 0x03
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	71 f5       	brne	.+92     	; 0xb72 <game_processing+0x102>
     b16:	8c 81       	ldd	r24, Y+4	; 0x04
     b18:	9d 81       	ldd	r25, Y+5	; 0x05
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	9c 01       	movw	r18, r24
     b20:	22 0f       	add	r18, r18
     b22:	33 1f       	adc	r19, r19
     b24:	22 0f       	add	r18, r18
     b26:	33 1f       	adc	r19, r19
     b28:	82 0f       	add	r24, r18
     b2a:	93 1f       	adc	r25, r19
     b2c:	2e 81       	ldd	r18, Y+6	; 0x06
     b2e:	3f 81       	ldd	r19, Y+7	; 0x07
     b30:	82 0f       	add	r24, r18
     b32:	93 1f       	adc	r25, r19
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	84 59       	subi	r24, 0x94	; 148
     b3a:	9e 4f       	sbci	r25, 0xFE	; 254
     b3c:	fc 01       	movw	r30, r24
     b3e:	80 81       	ld	r24, Z
     b40:	91 81       	ldd	r25, Z+1	; 0x01
     b42:	02 97       	sbiw	r24, 0x02	; 2
     b44:	b1 f4       	brne	.+44     	; 0xb72 <game_processing+0x102>
								gameState[i][j] = 0;
     b46:	8c 81       	ldd	r24, Y+4	; 0x04
     b48:	9d 81       	ldd	r25, Y+5	; 0x05
     b4a:	88 0f       	add	r24, r24
     b4c:	99 1f       	adc	r25, r25
     b4e:	9c 01       	movw	r18, r24
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	82 0f       	add	r24, r18
     b5a:	93 1f       	adc	r25, r19
     b5c:	2e 81       	ldd	r18, Y+6	; 0x06
     b5e:	3f 81       	ldd	r19, Y+7	; 0x07
     b60:	82 0f       	add	r24, r18
     b62:	93 1f       	adc	r25, r19
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	84 59       	subi	r24, 0x94	; 148
     b6a:	9e 4f       	sbci	r25, 0xFE	; 254
     b6c:	fc 01       	movw	r30, r24
     b6e:	11 82       	std	Z+1, r1	; 0x01
     b70:	10 82       	st	Z, r1
				else
					player = playerTwo;

				/* Erase player */
				for (int i = 0; i < 14; i++)
					for (int j = 0; j < 10; j++)
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	9f 83       	std	Y+7, r25	; 0x07
     b7a:	8e 83       	std	Y+6, r24	; 0x06
     b7c:	8e 81       	ldd	r24, Y+6	; 0x06
     b7e:	9f 81       	ldd	r25, Y+7	; 0x07
     b80:	0a 97       	sbiw	r24, 0x0a	; 10
     b82:	0c f4       	brge	.+2      	; 0xb86 <game_processing+0x116>
     b84:	a8 cf       	rjmp	.-176    	; 0xad6 <game_processing+0x66>
					player = playerOne;
				else
					player = playerTwo;

				/* Erase player */
				for (int i = 0; i < 14; i++)
     b86:	8c 81       	ldd	r24, Y+4	; 0x04
     b88:	9d 81       	ldd	r25, Y+5	; 0x05
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	9d 83       	std	Y+5, r25	; 0x05
     b8e:	8c 83       	std	Y+4, r24	; 0x04
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	0e 97       	sbiw	r24, 0x0e	; 14
     b96:	0c f4       	brge	.+2      	; 0xb9a <game_processing+0x12a>
     b98:	9b cf       	rjmp	.-202    	; 0xad0 <game_processing+0x60>
					for (int j = 0; j < 10; j++)
						if ((p == 0 && gameState[i][j] == 1)
							|| (p == 1 && gameState[i][j] == 2))
								gameState[i][j] = 0;

				collision = draw_players_lines(&player, p + 1);
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	9b 81       	ldd	r25, Y+3	; 0x03
     b9e:	9c 01       	movw	r18, r24
     ba0:	2f 5f       	subi	r18, 0xFF	; 255
     ba2:	3f 4f       	sbci	r19, 0xFF	; 255
     ba4:	ce 01       	movw	r24, r28
     ba6:	08 96       	adiw	r24, 0x08	; 8
     ba8:	b9 01       	movw	r22, r18
     baa:	0e 94 cd 01 	call	0x39a	; 0x39a <draw_players_lines>
     bae:	98 2f       	mov	r25, r24
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	99 23       	and	r25, r25
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <game_processing+0x148>
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	89 83       	std	Y+1, r24	; 0x01

				/* Move players in their current direction */
				move_player(&player);
     bba:	ce 01       	movw	r24, r28
     bbc:	08 96       	adiw	r24, 0x08	; 8
     bbe:	0e 94 4c 01 	call	0x298	; 0x298 <move_player>

				if (p == 0)
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	9b 81       	ldd	r25, Y+3	; 0x03
     bc6:	89 2b       	or	r24, r25
     bc8:	51 f4       	brne	.+20     	; 0xbde <game_processing+0x16e>
					playerOne = player;
     bca:	83 e4       	ldi	r24, 0x43	; 67
     bcc:	fe 01       	movw	r30, r28
     bce:	38 96       	adiw	r30, 0x08	; 8
     bd0:	a4 e8       	ldi	r26, 0x84	; 132
     bd2:	b2 e0       	ldi	r27, 0x02	; 2
     bd4:	01 90       	ld	r0, Z+
     bd6:	0d 92       	st	X+, r0
     bd8:	8a 95       	dec	r24
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <game_processing+0x164>
     bdc:	09 c0       	rjmp	.+18     	; 0xbf0 <game_processing+0x180>
				else
					playerTwo = player;
     bde:	83 e4       	ldi	r24, 0x43	; 67
     be0:	fe 01       	movw	r30, r28
     be2:	38 96       	adiw	r30, 0x08	; 8
     be4:	a7 ec       	ldi	r26, 0xC7	; 199
     be6:	b2 e0       	ldi	r27, 0x02	; 2
     be8:	01 90       	ld	r0, Z+
     bea:	0d 92       	st	X+, r0
     bec:	8a 95       	dec	r24
     bee:	e1 f7       	brne	.-8      	; 0xbe8 <game_processing+0x178>

	for(;;) {

		while(!collision) {
			
			for (int p = 0; p < 2; p++) {
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	9b 81       	ldd	r25, Y+3	; 0x03
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	9b 83       	std	Y+3, r25	; 0x03
     bf8:	8a 83       	std	Y+2, r24	; 0x02
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	9b 81       	ldd	r25, Y+3	; 0x03
     bfe:	02 97       	sbiw	r24, 0x02	; 2
     c00:	0c f4       	brge	.+2      	; 0xc04 <game_processing+0x194>
     c02:	4c cf       	rjmp	.-360    	; 0xa9c <game_processing+0x2c>
					playerOne = player;
				else
					playerTwo = player;
			}

			vTaskDelay(1000);
     c04:	88 ee       	ldi	r24, 0xE8	; 232
     c06:	93 e0       	ldi	r25, 0x03	; 3
     c08:	0e 94 66 18 	call	0x30cc	; 0x30cc <vTaskDelay>
	Player player;
	bool collision = false;

	for(;;) {

		while(!collision) {
     c0c:	99 81       	ldd	r25, Y+1	; 0x01
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	89 27       	eor	r24, r25
     c12:	88 23       	and	r24, r24
     c14:	09 f0       	breq	.+2      	; 0xc18 <game_processing+0x1a8>
     c16:	3f cf       	rjmp	.-386    	; 0xa96 <game_processing+0x26>
			}

			vTaskDelay(1000);
		}

		die();
     c18:	0e 94 3f 01 	call	0x27e	; 0x27e <die>
	}
     c1c:	3b cf       	rjmp	.-394    	; 0xa94 <game_processing+0x24>

00000c1e <read_joystick>:
	vTaskDelete(NULL);
}


void read_joystick(void *pvParameters)
{
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	2c 97       	sbiw	r28, 0x0c	; 12
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
     c32:	9c 87       	std	Y+12, r25	; 0x0c
     c34:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t left;
	uint8_t up;
	uint8_t down;
	uint8_t pushed;
	Direction direction;
	uint8_t debounceCounter = 0;
     c36:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t debounceThreshold = 15;
     c38:	8f e0       	ldi	r24, 0x0F	; 15
     c3a:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t turnPlayer = 0;
     c3c:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t isPressing = 0;
     c3e:	1c 82       	std	Y+4, r1	; 0x04

	for (;;) {
		/*Constantly checking joystick state*/
		right	= !(PINC >> 1 & 0x01);
     c40:	86 e2       	ldi	r24, 0x26	; 38
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	fc 01       	movw	r30, r24
     c46:	80 81       	ld	r24, Z
     c48:	86 95       	lsr	r24
     c4a:	88 2f       	mov	r24, r24
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	81 70       	andi	r24, 0x01	; 1
     c50:	99 27       	eor	r25, r25
     c52:	21 e0       	ldi	r18, 0x01	; 1
     c54:	89 2b       	or	r24, r25
     c56:	09 f0       	breq	.+2      	; 0xc5a <read_joystick+0x3c>
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	2e 83       	std	Y+6, r18	; 0x06
		left	= !(PINC >> 7 & 0x01);
     c5c:	86 e2       	ldi	r24, 0x26	; 38
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	fc 01       	movw	r30, r24
     c62:	80 81       	ld	r24, Z
     c64:	88 1f       	adc	r24, r24
     c66:	88 27       	eor	r24, r24
     c68:	88 1f       	adc	r24, r24
     c6a:	88 2f       	mov	r24, r24
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	81 70       	andi	r24, 0x01	; 1
     c70:	99 27       	eor	r25, r25
     c72:	21 e0       	ldi	r18, 0x01	; 1
     c74:	89 2b       	or	r24, r25
     c76:	09 f0       	breq	.+2      	; 0xc7a <read_joystick+0x5c>
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	2f 83       	std	Y+7, r18	; 0x07
		up		= !(PINC >> 6 & 0x01);
     c7c:	86 e2       	ldi	r24, 0x26	; 38
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	fc 01       	movw	r30, r24
     c82:	80 81       	ld	r24, Z
     c84:	82 95       	swap	r24
     c86:	86 95       	lsr	r24
     c88:	86 95       	lsr	r24
     c8a:	83 70       	andi	r24, 0x03	; 3
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	81 70       	andi	r24, 0x01	; 1
     c92:	99 27       	eor	r25, r25
     c94:	21 e0       	ldi	r18, 0x01	; 1
     c96:	89 2b       	or	r24, r25
     c98:	09 f0       	breq	.+2      	; 0xc9c <read_joystick+0x7e>
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	28 87       	std	Y+8, r18	; 0x08
		down	= !(PINC >> 0 & 0x01);
     c9e:	86 e2       	ldi	r24, 0x26	; 38
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	fc 01       	movw	r30, r24
     ca4:	80 81       	ld	r24, Z
     ca6:	88 2f       	mov	r24, r24
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	81 70       	andi	r24, 0x01	; 1
     cac:	99 27       	eor	r25, r25
     cae:	21 e0       	ldi	r18, 0x01	; 1
     cb0:	89 2b       	or	r24, r25
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <read_joystick+0x98>
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	29 87       	std	Y+9, r18	; 0x09
		pushed  = !(PIND >> 3 & 0x01);
     cb8:	89 e2       	ldi	r24, 0x29	; 41
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	fc 01       	movw	r30, r24
     cbe:	80 81       	ld	r24, Z
     cc0:	86 95       	lsr	r24
     cc2:	86 95       	lsr	r24
     cc4:	86 95       	lsr	r24
     cc6:	88 2f       	mov	r24, r24
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	81 70       	andi	r24, 0x01	; 1
     ccc:	99 27       	eor	r25, r25
     cce:	21 e0       	ldi	r18, 0x01	; 1
     cd0:	89 2b       	or	r24, r25
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <read_joystick+0xb8>
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	2a 87       	std	Y+10, r18	; 0x0a

		if (down){
     cd8:	89 85       	ldd	r24, Y+9	; 0x09
     cda:	88 23       	and	r24, r24
     cdc:	39 f0       	breq	.+14     	; 0xcec <read_joystick+0xce>
			direction = DOWN;
     cde:	83 e0       	ldi	r24, 0x03	; 3
     ce0:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	8c 83       	std	Y+4, r24	; 0x04
     cea:	23 c0       	rjmp	.+70     	; 0xd32 <read_joystick+0x114>
		} else if (right) {
     cec:	8e 81       	ldd	r24, Y+6	; 0x06
     cee:	88 23       	and	r24, r24
     cf0:	39 f0       	breq	.+14     	; 0xd00 <read_joystick+0xe2>
			direction = RIGHT;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	8c 83       	std	Y+4, r24	; 0x04
     cfe:	19 c0       	rjmp	.+50     	; 0xd32 <read_joystick+0x114>
		} else if (up) {
     d00:	88 85       	ldd	r24, Y+8	; 0x08
     d02:	88 23       	and	r24, r24
     d04:	39 f0       	breq	.+14     	; 0xd14 <read_joystick+0xf6>
			direction = UP;
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 83       	std	Y+4, r24	; 0x04
     d12:	0f c0       	rjmp	.+30     	; 0xd32 <read_joystick+0x114>
		} else if (left) {
     d14:	8f 81       	ldd	r24, Y+7	; 0x07
     d16:	88 23       	and	r24, r24
     d18:	31 f0       	breq	.+12     	; 0xd26 <read_joystick+0x108>
			direction = LEFT;
     d1a:	19 82       	std	Y+1, r1	; 0x01
			turnPlayer = 1;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	8c 83       	std	Y+4, r24	; 0x04
     d24:	06 c0       	rjmp	.+12     	; 0xd32 <read_joystick+0x114>
		} else if (pushed) {
     d26:	8a 85       	ldd	r24, Y+10	; 0x0a
     d28:	88 23       	and	r24, r24
     d2a:	11 f0       	breq	.+4      	; 0xd30 <read_joystick+0x112>
			//TODO: pause game
			debounceCounter = 0;
     d2c:	1a 82       	std	Y+2, r1	; 0x02
     d2e:	01 c0       	rjmp	.+2      	; 0xd32 <read_joystick+0x114>
		} else {
			isPressing = 0;
     d30:	1c 82       	std	Y+4, r1	; 0x04
			//debounceCounter = 0;
		}

		if (turnPlayer && !isPressing && (++debounceCounter >= debounceThreshold)) {
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	88 23       	and	r24, r24
     d36:	c9 f0       	breq	.+50     	; 0xd6a <read_joystick+0x14c>
     d38:	8c 81       	ldd	r24, Y+4	; 0x04
     d3a:	88 23       	and	r24, r24
     d3c:	b1 f4       	brne	.+44     	; 0xd6a <read_joystick+0x14c>
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	8f 5f       	subi	r24, 0xFF	; 255
     d42:	8a 83       	std	Y+2, r24	; 0x02
     d44:	9a 81       	ldd	r25, Y+2	; 0x02
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	98 17       	cp	r25, r24
     d4a:	78 f0       	brcs	.+30     	; 0xd6a <read_joystick+0x14c>
			com_send_bytes("move", 4);
     d4c:	64 e0       	ldi	r22, 0x04	; 4
     d4e:	8c e1       	ldi	r24, 0x1C	; 28
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <com_send_bytes>
			turn_player(&playerOne, direction);
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	88 2f       	mov	r24, r24
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	bc 01       	movw	r22, r24
     d5e:	84 e8       	ldi	r24, 0x84	; 132
     d60:	92 e0       	ldi	r25, 0x02	; 2
     d62:	0e 94 ba 06 	call	0xd74	; 0xd74 <turn_player>
			turnPlayer = 0;
     d66:	1b 82       	std	Y+3, r1	; 0x03
			debounceCounter = 0;
     d68:	1a 82       	std	Y+2, r1	; 0x02
		}

		vTaskDelay(20);
     d6a:	84 e1       	ldi	r24, 0x14	; 20
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 66 18 	call	0x30cc	; 0x30cc <vTaskDelay>
	}
     d72:	66 cf       	rjmp	.-308    	; 0xc40 <read_joystick+0x22>

00000d74 <turn_player>:



/* Changes the player's direction: will be applied in game_processing() */
void turn_player(Player *player, Direction direction)
{
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	00 d0       	rcall	.+0      	; 0xd7a <turn_player+0x6>
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <turn_player+0x8>
     d7c:	1f 92       	push	r1
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	9c 83       	std	Y+4, r25	; 0x04
     d84:	8b 83       	std	Y+3, r24	; 0x03
     d86:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t validTurn = false, doTurn = false;
     d88:	19 82       	std	Y+1, r1	; 0x01
     d8a:	1a 82       	std	Y+2, r1	; 0x02

	if ((*player).direction != direction)
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	9c 81       	ldd	r25, Y+4	; 0x04
     d90:	fc 01       	movw	r30, r24
     d92:	94 81       	ldd	r25, Z+4	; 0x04
     d94:	8d 81       	ldd	r24, Y+5	; 0x05
     d96:	98 17       	cp	r25, r24
     d98:	11 f0       	breq	.+4      	; 0xd9e <turn_player+0x2a>
		doTurn = true;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	8a 83       	std	Y+2, r24	; 0x02

	switch (direction) {
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	88 2f       	mov	r24, r24
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	09 f4       	brne	.+2      	; 0xdac <turn_player+0x38>
     daa:	49 c0       	rjmp	.+146    	; 0xe3e <turn_player+0xca>
     dac:	82 30       	cpi	r24, 0x02	; 2
     dae:	91 05       	cpc	r25, r1
     db0:	1c f4       	brge	.+6      	; 0xdb8 <turn_player+0x44>
     db2:	89 2b       	or	r24, r25
     db4:	81 f1       	breq	.+96     	; 0xe16 <turn_player+0xa2>
     db6:	5e c0       	rjmp	.+188    	; 0xe74 <turn_player+0x100>
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	91 05       	cpc	r25, r1
     dbc:	19 f0       	breq	.+6      	; 0xdc4 <turn_player+0x50>
     dbe:	03 97       	sbiw	r24, 0x03	; 3
     dc0:	b1 f0       	breq	.+44     	; 0xdee <turn_player+0x7a>
     dc2:	58 c0       	rjmp	.+176    	; 0xe74 <turn_player+0x100>
		case UP:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	fc 01       	movw	r30, r24
     dca:	84 81       	ldd	r24, Z+4	; 0x04
     dcc:	88 23       	and	r24, r24
     dce:	39 f0       	breq	.+14     	; 0xdde <turn_player+0x6a>
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	fc 01       	movw	r30, r24
     dd6:	84 81       	ldd	r24, Z+4	; 0x04
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	09 f0       	breq	.+2      	; 0xdde <turn_player+0x6a>
     ddc:	44 c0       	rjmp	.+136    	; 0xe66 <turn_player+0xf2>
				(*player).direction = direction;
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	9c 81       	ldd	r25, Y+4	; 0x04
     de2:	2d 81       	ldd	r18, Y+5	; 0x05
     de4:	fc 01       	movw	r30, r24
     de6:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     dec:	3c c0       	rjmp	.+120    	; 0xe66 <turn_player+0xf2>
		case DOWN:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	fc 01       	movw	r30, r24
     df4:	84 81       	ldd	r24, Z+4	; 0x04
     df6:	88 23       	and	r24, r24
     df8:	31 f0       	breq	.+12     	; 0xe06 <turn_player+0x92>
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	9c 81       	ldd	r25, Y+4	; 0x04
     dfe:	fc 01       	movw	r30, r24
     e00:	84 81       	ldd	r24, Z+4	; 0x04
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	91 f5       	brne	.+100    	; 0xe6a <turn_player+0xf6>
				(*player).direction = direction;
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	9c 81       	ldd	r25, Y+4	; 0x04
     e0a:	2d 81       	ldd	r18, Y+5	; 0x05
     e0c:	fc 01       	movw	r30, r24
     e0e:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     e14:	2a c0       	rjmp	.+84     	; 0xe6a <turn_player+0xf6>
		case LEFT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	9c 81       	ldd	r25, Y+4	; 0x04
     e1a:	fc 01       	movw	r30, r24
     e1c:	84 81       	ldd	r24, Z+4	; 0x04
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	31 f0       	breq	.+12     	; 0xe2e <turn_player+0xba>
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	9c 81       	ldd	r25, Y+4	; 0x04
     e26:	fc 01       	movw	r30, r24
     e28:	84 81       	ldd	r24, Z+4	; 0x04
     e2a:	83 30       	cpi	r24, 0x03	; 3
     e2c:	01 f5       	brne	.+64     	; 0xe6e <turn_player+0xfa>
				(*player).direction = direction;
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	2d 81       	ldd	r18, Y+5	; 0x05
     e34:	fc 01       	movw	r30, r24
     e36:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     e3c:	18 c0       	rjmp	.+48     	; 0xe6e <turn_player+0xfa>
		case RIGHT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	fc 01       	movw	r30, r24
     e44:	84 81       	ldd	r24, Z+4	; 0x04
     e46:	82 30       	cpi	r24, 0x02	; 2
     e48:	31 f0       	breq	.+12     	; 0xe56 <turn_player+0xe2>
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	fc 01       	movw	r30, r24
     e50:	84 81       	ldd	r24, Z+4	; 0x04
     e52:	83 30       	cpi	r24, 0x03	; 3
     e54:	71 f4       	brne	.+28     	; 0xe72 <turn_player+0xfe>
				(*player).direction = direction;
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	9c 81       	ldd	r25, Y+4	; 0x04
     e5a:	2d 81       	ldd	r18, Y+5	; 0x05
     e5c:	fc 01       	movw	r30, r24
     e5e:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     e64:	06 c0       	rjmp	.+12     	; 0xe72 <turn_player+0xfe>
		case UP:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
     e66:	00 00       	nop
     e68:	05 c0       	rjmp	.+10     	; 0xe74 <turn_player+0x100>
		case DOWN:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
     e6a:	00 00       	nop
     e6c:	03 c0       	rjmp	.+6      	; 0xe74 <turn_player+0x100>
		case LEFT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
     e6e:	00 00       	nop
     e70:	01 c0       	rjmp	.+2      	; 0xe74 <turn_player+0x100>
		case RIGHT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
     e72:	00 00       	nop
	}

	if (doTurn && validTurn) { //New turn !
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	88 23       	and	r24, r24
     e78:	09 f4       	brne	.+2      	; 0xe7c <turn_player+0x108>
     e7a:	68 c0       	rjmp	.+208    	; 0xf4c <turn_player+0x1d8>
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	88 23       	and	r24, r24
     e80:	09 f4       	brne	.+2      	; 0xe84 <turn_player+0x110>
     e82:	64 c0       	rjmp	.+200    	; 0xf4c <turn_player+0x1d8>
		(*player).turnsCount++;
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	9c 81       	ldd	r25, Y+4	; 0x04
     e88:	8f 5b       	subi	r24, 0xBF	; 191
     e8a:	9f 4f       	sbci	r25, 0xFF	; 255
     e8c:	fc 01       	movw	r30, r24
     e8e:	80 81       	ld	r24, Z
     e90:	91 81       	ldd	r25, Z+1	; 0x01
     e92:	9c 01       	movw	r18, r24
     e94:	2f 5f       	subi	r18, 0xFF	; 255
     e96:	3f 4f       	sbci	r19, 0xFF	; 255
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	8f 5b       	subi	r24, 0xBF	; 191
     e9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ea0:	fc 01       	movw	r30, r24
     ea2:	31 83       	std	Z+1, r19	; 0x01
     ea4:	20 83       	st	Z, r18

		if ((*player).turnsCount < MAXTURNS && (*player).turns[(*player).turnsCount].x == -1) { //Free turn slot
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	9c 81       	ldd	r25, Y+4	; 0x04
     eaa:	8f 5b       	subi	r24, 0xBF	; 191
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	fc 01       	movw	r30, r24
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	0e 97       	sbiw	r24, 0x0e	; 14
     eb6:	0c f0       	brlt	.+2      	; 0xeba <turn_player+0x146>
     eb8:	45 c0       	rjmp	.+138    	; 0xf44 <turn_player+0x1d0>
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	9c 81       	ldd	r25, Y+4	; 0x04
     ebe:	8f 5b       	subi	r24, 0xBF	; 191
     ec0:	9f 4f       	sbci	r25, 0xFF	; 255
     ec2:	fc 01       	movw	r30, r24
     ec4:	80 81       	ld	r24, Z
     ec6:	91 81       	ldd	r25, Z+1	; 0x01
     ec8:	2b 81       	ldd	r18, Y+3	; 0x03
     eca:	3c 81       	ldd	r19, Y+4	; 0x04
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	82 0f       	add	r24, r18
     ed6:	93 1f       	adc	r25, r19
     ed8:	05 96       	adiw	r24, 0x05	; 5
     eda:	fc 01       	movw	r30, r24
     edc:	80 81       	ld	r24, Z
     ede:	91 81       	ldd	r25, Z+1	; 0x01
     ee0:	01 96       	adiw	r24, 0x01	; 1
     ee2:	81 f5       	brne	.+96     	; 0xf44 <turn_player+0x1d0>
			(*player).turns[(*player).turnsCount].x = (*player).x;
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	9c 81       	ldd	r25, Y+4	; 0x04
     ee8:	8f 5b       	subi	r24, 0xBF	; 191
     eea:	9f 4f       	sbci	r25, 0xFF	; 255
     eec:	fc 01       	movw	r30, r24
     eee:	80 81       	ld	r24, Z
     ef0:	91 81       	ldd	r25, Z+1	; 0x01
     ef2:	2b 81       	ldd	r18, Y+3	; 0x03
     ef4:	3c 81       	ldd	r19, Y+4	; 0x04
     ef6:	f9 01       	movw	r30, r18
     ef8:	20 81       	ld	r18, Z
     efa:	31 81       	ldd	r19, Z+1	; 0x01
     efc:	4b 81       	ldd	r20, Y+3	; 0x03
     efe:	5c 81       	ldd	r21, Y+4	; 0x04
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	84 0f       	add	r24, r20
     f0a:	95 1f       	adc	r25, r21
     f0c:	05 96       	adiw	r24, 0x05	; 5
     f0e:	fc 01       	movw	r30, r24
     f10:	31 83       	std	Z+1, r19	; 0x01
     f12:	20 83       	st	Z, r18
			(*player).turns[(*player).turnsCount].y =  (*player).y;
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	9c 81       	ldd	r25, Y+4	; 0x04
     f18:	8f 5b       	subi	r24, 0xBF	; 191
     f1a:	9f 4f       	sbci	r25, 0xFF	; 255
     f1c:	fc 01       	movw	r30, r24
     f1e:	80 81       	ld	r24, Z
     f20:	91 81       	ldd	r25, Z+1	; 0x01
     f22:	2b 81       	ldd	r18, Y+3	; 0x03
     f24:	3c 81       	ldd	r19, Y+4	; 0x04
     f26:	f9 01       	movw	r30, r18
     f28:	22 81       	ldd	r18, Z+2	; 0x02
     f2a:	33 81       	ldd	r19, Z+3	; 0x03
     f2c:	4b 81       	ldd	r20, Y+3	; 0x03
     f2e:	5c 81       	ldd	r21, Y+4	; 0x04
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	84 0f       	add	r24, r20
     f3a:	95 1f       	adc	r25, r21
     f3c:	07 96       	adiw	r24, 0x07	; 7
     f3e:	fc 01       	movw	r30, r24
     f40:	31 83       	std	Z+1, r19	; 0x01
     f42:	20 83       	st	Z, r18
		} else {
			//TODO
		}

		move_player(player);
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	0e 94 4c 01 	call	0x298	; 0x298 <move_player>
	}
}
     f4c:	00 00       	nop
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	08 95       	ret

00000f5e <init_players>:

/* Initialize the players' positions and turns */
void init_players()
{
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	00 d0       	rcall	.+0      	; 0xf64 <init_players+0x6>
     f64:	00 d0       	rcall	.+0      	; 0xf66 <init_players+0x8>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <init_players+0xa>
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62

	for (int i = 0; i < MAXTURNS + 1; i++) { //MAXTURNS + 1 because turn[0] is the init position, not a turn
     f6c:	1a 82       	std	Y+2, r1	; 0x02
     f6e:	19 82       	std	Y+1, r1	; 0x01
     f70:	39 c0       	rjmp	.+114    	; 0xfe4 <init_players+0x86>
		playerOne.turns[i].x = -1;
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	87 57       	subi	r24, 0x77	; 119
     f80:	9d 4f       	sbci	r25, 0xFD	; 253
     f82:	2f ef       	ldi	r18, 0xFF	; 255
     f84:	3f ef       	ldi	r19, 0xFF	; 255
     f86:	fc 01       	movw	r30, r24
     f88:	31 83       	std	Z+1, r19	; 0x01
     f8a:	20 83       	st	Z, r18
		playerOne.turns[i].y = -1;
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	85 57       	subi	r24, 0x75	; 117
     f9a:	9d 4f       	sbci	r25, 0xFD	; 253
     f9c:	2f ef       	ldi	r18, 0xFF	; 255
     f9e:	3f ef       	ldi	r19, 0xFF	; 255
     fa0:	fc 01       	movw	r30, r24
     fa2:	31 83       	std	Z+1, r19	; 0x01
     fa4:	20 83       	st	Z, r18
		playerTwo.turns[i].x = -1;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	84 53       	subi	r24, 0x34	; 52
     fb4:	9d 4f       	sbci	r25, 0xFD	; 253
     fb6:	2f ef       	ldi	r18, 0xFF	; 255
     fb8:	3f ef       	ldi	r19, 0xFF	; 255
     fba:	fc 01       	movw	r30, r24
     fbc:	31 83       	std	Z+1, r19	; 0x01
     fbe:	20 83       	st	Z, r18
		playerTwo.turns[i].y = -1;
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	82 53       	subi	r24, 0x32	; 50
     fce:	9d 4f       	sbci	r25, 0xFD	; 253
     fd0:	2f ef       	ldi	r18, 0xFF	; 255
     fd2:	3f ef       	ldi	r19, 0xFF	; 255
     fd4:	fc 01       	movw	r30, r24
     fd6:	31 83       	std	Z+1, r19	; 0x01
     fd8:	20 83       	st	Z, r18

/* Initialize the players' positions and turns */
void init_players()
{

	for (int i = 0; i < MAXTURNS + 1; i++) { //MAXTURNS + 1 because turn[0] is the init position, not a turn
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	0f 97       	sbiw	r24, 0x0f	; 15
     fea:	1c f2       	brlt	.-122    	; 0xf72 <init_players+0x14>
		playerOne.turns[i].y = -1;
		playerTwo.turns[i].x = -1;
		playerTwo.turns[i].y = -1;
	}

	playerOne.turnsCount = 0;
     fec:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <playerOne+0x42>
     ff0:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <playerOne+0x41>
	playerTwo.turnsCount = 0;
     ff4:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <playerTwo+0x42>
     ff8:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <playerTwo+0x41>

	playerOne.x = 0;
     ffc:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <playerOne+0x1>
    1000:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <playerOne>
	playerOne.y = 5;
    1004:	85 e0       	ldi	r24, 0x05	; 5
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <playerOne+0x3>
    100c:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <playerOne+0x2>
	playerOne.direction = RIGHT;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <playerOne+0x4>
	Turn turn0;
	turn0.x = 0;
    1016:	1c 82       	std	Y+4, r1	; 0x04
    1018:	1b 82       	std	Y+3, r1	; 0x03
	turn0.y = 5;
    101a:	85 e0       	ldi	r24, 0x05	; 5
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	9e 83       	std	Y+6, r25	; 0x06
    1020:	8d 83       	std	Y+5, r24	; 0x05
	playerOne.turns[0] = turn0;
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	9c 81       	ldd	r25, Y+4	; 0x04
    1026:	ad 81       	ldd	r26, Y+5	; 0x05
    1028:	be 81       	ldd	r27, Y+6	; 0x06
    102a:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <playerOne+0x5>
    102e:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <playerOne+0x6>
    1032:	a0 93 8b 02 	sts	0x028B, r26	; 0x80028b <playerOne+0x7>
    1036:	b0 93 8c 02 	sts	0x028C, r27	; 0x80028c <playerOne+0x8>

	playerTwo.x = 14;
    103a:	8e e0       	ldi	r24, 0x0E	; 14
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <playerTwo+0x1>
    1042:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <playerTwo>
	playerTwo.y = 5;
    1046:	85 e0       	ldi	r24, 0x05	; 5
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <playerTwo+0x3>
    104e:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <playerTwo+0x2>
	playerTwo.direction = LEFT;
    1052:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <playerTwo+0x4>
	turn0;
	turn0.x = 14;
    1056:	8e e0       	ldi	r24, 0x0E	; 14
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	9c 83       	std	Y+4, r25	; 0x04
    105c:	8b 83       	std	Y+3, r24	; 0x03
	turn0.y = 5;
    105e:	85 e0       	ldi	r24, 0x05	; 5
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	9e 83       	std	Y+6, r25	; 0x06
    1064:	8d 83       	std	Y+5, r24	; 0x05
	playerTwo.turns[0] = turn0;
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	ad 81       	ldd	r26, Y+5	; 0x05
    106c:	be 81       	ldd	r27, Y+6	; 0x06
    106e:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <playerTwo+0x5>
    1072:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <playerTwo+0x6>
    1076:	a0 93 ce 02 	sts	0x02CE, r26	; 0x8002ce <playerTwo+0x7>
    107a:	b0 93 cf 02 	sts	0x02CF, r27	; 0x8002cf <playerTwo+0x8>
}
    107e:	00 00       	nop
    1080:	26 96       	adiw	r28, 0x06	; 6
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
	// Set SER to 1
	PORTD |= _BV(PORTD2);
    109a:	8b e2       	ldi	r24, 0x2B	; 43
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	2b e2       	ldi	r18, 0x2B	; 43
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	f9 01       	movw	r30, r18
    10a4:	20 81       	ld	r18, Z
    10a6:	24 60       	ori	r18, 0x04	; 4
    10a8:	fc 01       	movw	r30, r24
    10aa:	20 83       	st	Z, r18
}
    10ac:	00 00       	nop
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	08 95       	ret

000010b4 <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
	// one SCK pulse
	PORTD |= _BV(PORTD5);
    10bc:	8b e2       	ldi	r24, 0x2B	; 43
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	2b e2       	ldi	r18, 0x2B	; 43
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	f9 01       	movw	r30, r18
    10c6:	20 81       	ld	r18, Z
    10c8:	20 62       	ori	r18, 0x20	; 32
    10ca:	fc 01       	movw	r30, r24
    10cc:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
    10ce:	8b e2       	ldi	r24, 0x2B	; 43
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	2b e2       	ldi	r18, 0x2B	; 43
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	f9 01       	movw	r30, r18
    10d8:	20 81       	ld	r18, Z
    10da:	2f 7d       	andi	r18, 0xDF	; 223
    10dc:	fc 01       	movw	r30, r24
    10de:	20 83       	st	Z, r18
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
    10e0:	8b e2       	ldi	r24, 0x2B	; 43
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	2b e2       	ldi	r18, 0x2B	; 43
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	f9 01       	movw	r30, r18
    10ea:	20 81       	ld	r18, Z
    10ec:	20 61       	ori	r18, 0x10	; 16
    10ee:	fc 01       	movw	r30, r24
    10f0:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
    10f2:	8b e2       	ldi	r24, 0x2B	; 43
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	2b e2       	ldi	r18, 0x2B	; 43
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	f9 01       	movw	r30, r18
    10fc:	20 81       	ld	r18, Z
    10fe:	2f 7e       	andi	r18, 0xEF	; 239
    1100:	fc 01       	movw	r30, r24
    1102:	20 83       	st	Z, r18
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
    1104:	8b e2       	ldi	r24, 0x2B	; 43
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	2b e2       	ldi	r18, 0x2B	; 43
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	f9 01       	movw	r30, r18
    110e:	20 81       	ld	r18, Z
    1110:	2b 7f       	andi	r18, 0xFB	; 251
    1112:	fc 01       	movw	r30, r24
    1114:	20 83       	st	Z, r18
}
    1116:	00 00       	nop
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	08 95       	ret

0000111e <load_col_value>:

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	00 d0       	rcall	.+0      	; 0x1124 <load_col_value+0x6>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	9a 83       	std	Y+2, r25	; 0x02
    112a:	89 83       	std	Y+1, r24	; 0x01
	PORTA = ~(col_value & 0xFF);
    112c:	82 e2       	ldi	r24, 0x22	; 34
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	29 81       	ldd	r18, Y+1	; 0x01
    1132:	20 95       	com	r18
    1134:	fc 01       	movw	r30, r24
    1136:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
    1138:	85 e2       	ldi	r24, 0x25	; 37
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	25 e2       	ldi	r18, 0x25	; 37
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	f9 01       	movw	r30, r18
    1142:	20 81       	ld	r18, Z
    1144:	23 60       	ori	r18, 0x03	; 3
    1146:	fc 01       	movw	r30, r24
    1148:	20 83       	st	Z, r18
	PORTB &= ~((col_value >> 8) & 0x03);
    114a:	85 e2       	ldi	r24, 0x25	; 37
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	25 e2       	ldi	r18, 0x25	; 37
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	f9 01       	movw	r30, r18
    1154:	40 81       	ld	r20, Z
    1156:	29 81       	ldd	r18, Y+1	; 0x01
    1158:	3a 81       	ldd	r19, Y+2	; 0x02
    115a:	23 2f       	mov	r18, r19
    115c:	33 27       	eor	r19, r19
    115e:	23 70       	andi	r18, 0x03	; 3
    1160:	20 95       	com	r18
    1162:	24 23       	and	r18, r20
    1164:	fc 01       	movw	r30, r24
    1166:	20 83       	st	Z, r18
}
    1168:	00 00       	nop
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	08 95       	ret

00001174 <handle_display>:

//-----------------------------------------
void handle_display(void)
{
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
	static uint8_t col = 0;
	
	if (col == 0)
    117c:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <col.2840>
    1180:	88 23       	and	r24, r24
    1182:	11 f4       	brne	.+4      	; 0x1188 <handle_display+0x14>
		prepare_shiftregister();
    1184:	0e 94 49 08 	call	0x1092	; 0x1092 <prepare_shiftregister>
	
	load_col_value(frame_buffer[col]);
    1188:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <col.2840>
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	80 5b       	subi	r24, 0xB0	; 176
    1196:	9e 4f       	sbci	r25, 0xFE	; 254
    1198:	fc 01       	movw	r30, r24
    119a:	80 81       	ld	r24, Z
    119c:	91 81       	ldd	r25, Z+1	; 0x01
    119e:	0e 94 8f 08 	call	0x111e	; 0x111e <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
    11a2:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	if (col++ > 13)
    11a6:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <col.2840>
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	98 0f       	add	r25, r24
    11ae:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <col.2840>
    11b2:	8e 30       	cpi	r24, 0x0E	; 14
    11b4:	10 f0       	brcs	.+4      	; 0x11ba <handle_display+0x46>
		col = 0;
    11b6:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <col.2840>
}
    11ba:	00 00       	nop
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	08 95       	ret

000011c2 <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	//
}
    11ca:	00 00       	nop
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <main>:

//-----------------------------------------
int main(void)
{
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	00 d0       	rcall	.+0      	; 0x11de <main+0xc>
    11de:	1f 92       	push	r1
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
    11e4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
    11e8:	8b e2       	ldi	r24, 0x2B	; 43
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	2b e2       	ldi	r18, 0x2B	; 43
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	f9 01       	movw	r30, r18
    11f2:	20 81       	ld	r18, Z
    11f4:	2f 7b       	andi	r18, 0xBF	; 191
    11f6:	fc 01       	movw	r30, r24
    11f8:	20 83       	st	Z, r18

	/* Semaphores creation */
	xGameStateSemaphore = xSemaphoreCreateMutex();
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	0e 94 09 14 	call	0x2812	; 0x2812 <xQueueCreateMutex>
    1200:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <xGameStateSemaphore+0x1>
    1204:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <xGameStateSemaphore>
	xPlayerOneSemaphore = xSemaphoreCreateMutex();
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	0e 94 09 14 	call	0x2812	; 0x2812 <xQueueCreateMutex>
    120e:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <xPlayerOneSemaphore+0x1>
    1212:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <xPlayerOneSemaphore>
	xPlayerTwoSemaphore = xSemaphoreCreateMutex();
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	0e 94 09 14 	call	0x2812	; 0x2812 <xQueueCreateMutex>
    121c:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <xPlayerTwoSemaphore+0x1>
    1220:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <xPlayerTwoSemaphore>
	xGameOverSemaphore = xSemaphoreCreateMutex();
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	0e 94 09 14 	call	0x2812	; 0x2812 <xQueueCreateMutex>
    122a:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <xGameOverSemaphore+0x1>
    122e:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <xGameOverSemaphore>

	init_players();
    1232:	0e 94 af 07 	call	0xf5e	; 0xf5e <init_players>

	BaseType_t taskReadJoystick = xTaskCreate(read_joystick, (const char*)"Read joystick", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
    1236:	e1 2c       	mov	r14, r1
    1238:	f1 2c       	mov	r15, r1
    123a:	00 e0       	ldi	r16, 0x00	; 0
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	45 e5       	ldi	r20, 0x55	; 85
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	61 e2       	ldi	r22, 0x21	; 33
    1246:	71 e0       	ldi	r23, 0x01	; 1
    1248:	8f e0       	ldi	r24, 0x0F	; 15
    124a:	96 e0       	ldi	r25, 0x06	; 6
    124c:	0e 94 89 16 	call	0x2d12	; 0x2d12 <xTaskCreate>
    1250:	89 83       	std	Y+1, r24	; 0x01
	BaseType_t taskGameProcessing = xTaskCreate(game_processing, (const char*)"Game processing", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
    1252:	e1 2c       	mov	r14, r1
    1254:	f1 2c       	mov	r15, r1
    1256:	00 e0       	ldi	r16, 0x00	; 0
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	45 e5       	ldi	r20, 0x55	; 85
    125e:	50 e0       	ldi	r21, 0x00	; 0
    1260:	6f e2       	ldi	r22, 0x2F	; 47
    1262:	71 e0       	ldi	r23, 0x01	; 1
    1264:	88 e3       	ldi	r24, 0x38	; 56
    1266:	95 e0       	ldi	r25, 0x05	; 5
    1268:	0e 94 89 16 	call	0x2d12	; 0x2d12 <xTaskCreate>
    126c:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t taskMakeFrame = xTaskCreate(make_frame, (const char*)"Make frame", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL );
    126e:	e1 2c       	mov	r14, r1
    1270:	f1 2c       	mov	r15, r1
    1272:	00 e0       	ldi	r16, 0x00	; 0
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	45 e5       	ldi	r20, 0x55	; 85
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	6f e3       	ldi	r22, 0x3F	; 63
    127e:	71 e0       	ldi	r23, 0x01	; 1
    1280:	8e e9       	ldi	r24, 0x9E	; 158
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0e 94 89 16 	call	0x2d12	; 0x2d12 <xTaskCreate>
    1288:	8b 83       	std	Y+3, r24	; 0x03


	// Start the display handler timer
	init_display_timer(handle_display);
    128a:	8a eb       	ldi	r24, 0xBA	; 186
    128c:	98 e0       	ldi	r25, 0x08	; 8
    128e:	0e 94 77 09 	call	0x12ee	; 0x12ee <init_display_timer>
	
	sei();
    1292:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
    1294:	0e 94 89 18 	call	0x3112	; 0x3112 <vTaskStartScheduler>
	
	//Should never reach here
	while (1) {}
    1298:	ff cf       	rjmp	.-2      	; 0x1298 <main+0xc6>

0000129a <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
	_x_rx_com_queue = x_rx_queue;
}
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <_com_call_back+0x6>
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <_com_call_back+0x8>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	9b 83       	std	Y+3, r25	; 0x03
    12a8:	8a 83       	std	Y+2, r24	; 0x02
    12aa:	6c 83       	std	Y+4, r22	; 0x04
    12ac:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_x_rx_com_queue>
    12b0:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <_x_rx_com_queue+0x1>
    12b4:	89 2b       	or	r24, r25
    12b6:	99 f0       	breq	.+38     	; 0x12de <_com_call_back+0x44>
    12b8:	19 82       	std	Y+1, r1	; 0x01
    12ba:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_x_rx_com_queue>
    12be:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <_x_rx_com_queue+0x1>
    12c2:	be 01       	movw	r22, r28
    12c4:	6c 5f       	subi	r22, 0xFC	; 252
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	ae 01       	movw	r20, r28
    12cc:	4f 5f       	subi	r20, 0xFF	; 255
    12ce:	5f 4f       	sbci	r21, 0xFF	; 255
    12d0:	0e 94 da 14 	call	0x29b4	; 0x29b4 <xQueueGenericSendFromISR>
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	88 23       	and	r24, r24
    12d8:	11 f0       	breq	.+4      	; 0x12de <_com_call_back+0x44>
    12da:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <vPortYield>
    12de:	00 00       	nop
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	08 95       	ret

000012ee <init_display_timer>:

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <init_display_timer+0x6>
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	9a 83       	std	Y+2, r25	; 0x02
    12fa:	89 83       	std	Y+1, r24	; 0x01
	cb_ptr = cb;
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <cb_ptr+0x1>
    1304:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
    1308:	87 e4       	ldi	r24, 0x47	; 71
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	2a e0       	ldi	r18, 0x0A	; 10
    130e:	fc 01       	movw	r30, r24
    1310:	20 83       	st	Z, r18
	TCCR0A |= _BV(WGM01); // Mode 2
    1312:	84 e4       	ldi	r24, 0x44	; 68
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	24 e4       	ldi	r18, 0x44	; 68
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	22 60       	ori	r18, 0x02	; 2
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
    1324:	8e e6       	ldi	r24, 0x6E	; 110
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	2e e6       	ldi	r18, 0x6E	; 110
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	f9 01       	movw	r30, r18
    132e:	20 81       	ld	r18, Z
    1330:	22 60       	ori	r18, 0x02	; 2
    1332:	fc 01       	movw	r30, r24
    1334:	20 83       	st	Z, r18
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
    1336:	85 e4       	ldi	r24, 0x45	; 69
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	25 e4       	ldi	r18, 0x45	; 69
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	f9 01       	movw	r30, r18
    1340:	20 81       	ld	r18, Z
    1342:	25 60       	ori	r18, 0x05	; 5
    1344:	fc 01       	movw	r30, r24
    1346:	20 83       	st	Z, r18
}
    1348:	00 00       	nop
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	08 95       	ret

00001354 <__vector_16>:

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
    1354:	1f 92       	push	r1
    1356:	0f 92       	push	r0
    1358:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    135c:	0f 92       	push	r0
    135e:	11 24       	eor	r1, r1
    1360:	2f 93       	push	r18
    1362:	3f 93       	push	r19
    1364:	4f 93       	push	r20
    1366:	5f 93       	push	r21
    1368:	6f 93       	push	r22
    136a:	7f 93       	push	r23
    136c:	8f 93       	push	r24
    136e:	9f 93       	push	r25
    1370:	af 93       	push	r26
    1372:	bf 93       	push	r27
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	if (cb_ptr)
    1380:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <cb_ptr>
    1384:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <cb_ptr+0x1>
    1388:	89 2b       	or	r24, r25
    138a:	31 f0       	breq	.+12     	; 0x1398 <__vector_16+0x44>
	{
		cb_ptr();
    138c:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <cb_ptr>
    1390:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <cb_ptr+0x1>
    1394:	fc 01       	movw	r30, r24
    1396:	09 95       	icall
	}
}
    1398:	00 00       	nop
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	ff 91       	pop	r31
    13a0:	ef 91       	pop	r30
    13a2:	bf 91       	pop	r27
    13a4:	af 91       	pop	r26
    13a6:	9f 91       	pop	r25
    13a8:	8f 91       	pop	r24
    13aa:	7f 91       	pop	r23
    13ac:	6f 91       	pop	r22
    13ae:	5f 91       	pop	r21
    13b0:	4f 91       	pop	r20
    13b2:	3f 91       	pop	r19
    13b4:	2f 91       	pop	r18
    13b6:	0f 90       	pop	r0
    13b8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    13bc:	0f 90       	pop	r0
    13be:	1f 90       	pop	r1
    13c0:	18 95       	reti

000013c2 <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <com_send_bytes+0x6>
    13c8:	1f 92       	push	r1
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	9a 83       	std	Y+2, r25	; 0x02
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	6b 83       	std	Y+3, r22	; 0x03
	serial_send_bytes(_com_serial_instance, bytes, len);
    13d4:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_com_serial_instance>
    13d8:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <_com_serial_instance+0x1>
    13dc:	29 81       	ldd	r18, Y+1	; 0x01
    13de:	3a 81       	ldd	r19, Y+2	; 0x02
    13e0:	4b 81       	ldd	r20, Y+3	; 0x03
    13e2:	b9 01       	movw	r22, r18
    13e4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <serial_send_bytes>
}
    13e8:	00 00       	nop
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

000013f6 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
    13f6:	8f 92       	push	r8
    13f8:	9f 92       	push	r9
    13fa:	af 92       	push	r10
    13fc:	bf 92       	push	r11
    13fe:	cf 92       	push	r12
    1400:	df 92       	push	r13
    1402:	ef 92       	push	r14
    1404:	0f 93       	push	r16
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
    140e:	89 e1       	ldi	r24, 0x19	; 25
    1410:	93 e0       	ldi	r25, 0x03	; 3
    1412:	0e 94 b3 0a 	call	0x1566	; 0x1566 <buffer_init>
	buffer_init(&_com_tx_buffer);
    1416:	8c e3       	ldi	r24, 0x3C	; 60
    1418:	93 e0       	ldi	r25, 0x03	; 3
    141a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
    141e:	0f 2e       	mov	r0, r31
    1420:	fd e4       	ldi	r31, 0x4D	; 77
    1422:	8f 2e       	mov	r8, r31
    1424:	f9 e0       	ldi	r31, 0x09	; 9
    1426:	9f 2e       	mov	r9, r31
    1428:	f0 2d       	mov	r31, r0
    142a:	0f 2e       	mov	r0, r31
    142c:	fc e3       	ldi	r31, 0x3C	; 60
    142e:	af 2e       	mov	r10, r31
    1430:	f3 e0       	ldi	r31, 0x03	; 3
    1432:	bf 2e       	mov	r11, r31
    1434:	f0 2d       	mov	r31, r0
    1436:	0f 2e       	mov	r0, r31
    1438:	f9 e1       	ldi	r31, 0x19	; 25
    143a:	cf 2e       	mov	r12, r31
    143c:	f3 e0       	ldi	r31, 0x03	; 3
    143e:	df 2e       	mov	r13, r31
    1440:	f0 2d       	mov	r31, r0
    1442:	e1 2c       	mov	r14, r1
    1444:	00 e0       	ldi	r16, 0x00	; 0
    1446:	23 e0       	ldi	r18, 0x03	; 3
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	52 ec       	ldi	r21, 0xC2	; 194
    144c:	61 e0       	ldi	r22, 0x01	; 1
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	0e 94 34 10 	call	0x2068	; 0x2068 <serial_new_instance>
    1456:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <_com_serial_instance+0x1>
    145a:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
    145e:	88 e2       	ldi	r24, 0x28	; 40
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	28 e2       	ldi	r18, 0x28	; 40
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	f9 01       	movw	r30, r18
    1468:	20 81       	ld	r18, Z
    146a:	23 6c       	ori	r18, 0xC3	; 195
    146c:	fc 01       	movw	r30, r24
    146e:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
    1470:	8b e2       	ldi	r24, 0x2B	; 43
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	2b e2       	ldi	r18, 0x2B	; 43
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	f9 01       	movw	r30, r18
    147a:	20 81       	ld	r18, Z
    147c:	28 60       	ori	r18, 0x08	; 8
    147e:	fc 01       	movw	r30, r24
    1480:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
    1482:	8a e2       	ldi	r24, 0x2A	; 42
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	2a e2       	ldi	r18, 0x2A	; 42
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	f9 01       	movw	r30, r18
    148c:	20 81       	ld	r18, Z
    148e:	24 67       	ori	r18, 0x74	; 116
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
    1494:	8b e2       	ldi	r24, 0x2B	; 43
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	2b e2       	ldi	r18, 0x2B	; 43
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	f9 01       	movw	r30, r18
    149e:	20 81       	ld	r18, Z
    14a0:	20 64       	ori	r18, 0x40	; 64
    14a2:	fc 01       	movw	r30, r24
    14a4:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
    14a6:	81 e2       	ldi	r24, 0x21	; 33
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	fc 01       	movw	r30, r24
    14ac:	80 81       	ld	r24, Z
    14ae:	81 e2       	ldi	r24, 0x21	; 33
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	2f ef       	ldi	r18, 0xFF	; 255
    14b4:	fc 01       	movw	r30, r24
    14b6:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
    14b8:	84 e2       	ldi	r24, 0x24	; 36
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	24 e2       	ldi	r18, 0x24	; 36
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	f9 01       	movw	r30, r18
    14c2:	20 81       	ld	r18, Z
    14c4:	23 60       	ori	r18, 0x03	; 3
    14c6:	fc 01       	movw	r30, r24
    14c8:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
    14ca:	84 e2       	ldi	r24, 0x24	; 36
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	24 e2       	ldi	r18, 0x24	; 36
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	f9 01       	movw	r30, r18
    14d4:	20 81       	ld	r18, Z
    14d6:	2c 63       	ori	r18, 0x3C	; 60
    14d8:	fc 01       	movw	r30, r24
    14da:	20 83       	st	Z, r18
}
    14dc:	00 00       	nop
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	0f 91       	pop	r16
    14e4:	ef 90       	pop	r14
    14e6:	df 90       	pop	r13
    14e8:	cf 90       	pop	r12
    14ea:	bf 90       	pop	r11
    14ec:	af 90       	pop	r10
    14ee:	9f 90       	pop	r9
    14f0:	8f 90       	pop	r8
    14f2:	08 95       	ret

000014f4 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	1f 92       	push	r1
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
    1500:	85 e2       	ldi	r24, 0x25	; 37
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	25 e2       	ldi	r18, 0x25	; 37
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	f9 01       	movw	r30, r18
    150a:	20 81       	ld	r18, Z
    150c:	23 7c       	andi	r18, 0xC3	; 195
    150e:	fc 01       	movw	r30, r24
    1510:	20 83       	st	Z, r18
		PORTB |= task_no << 2;
    1512:	85 e2       	ldi	r24, 0x25	; 37
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	25 e2       	ldi	r18, 0x25	; 37
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	f9 01       	movw	r30, r18
    151c:	20 81       	ld	r18, Z
    151e:	42 2f       	mov	r20, r18
    1520:	29 81       	ldd	r18, Y+1	; 0x01
    1522:	22 2f       	mov	r18, r18
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	22 0f       	add	r18, r18
    1528:	33 1f       	adc	r19, r19
    152a:	22 0f       	add	r18, r18
    152c:	33 1f       	adc	r19, r19
    152e:	24 2b       	or	r18, r20
    1530:	fc 01       	movw	r30, r24
    1532:	20 83       	st	Z, r18
	}
    1534:	00 00       	nop
    1536:	0f 90       	pop	r0
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret

0000153e <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	1f 92       	push	r1
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
    154a:	85 e2       	ldi	r24, 0x25	; 37
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	25 e2       	ldi	r18, 0x25	; 37
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	f9 01       	movw	r30, r18
    1554:	20 81       	ld	r18, Z
    1556:	23 7c       	andi	r18, 0xC3	; 195
    1558:	fc 01       	movw	r30, r24
    155a:	20 83       	st	Z, r18
	}
    155c:	00 00       	nop
    155e:	0f 90       	pop	r0
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	08 95       	ret

00001566 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	00 d0       	rcall	.+0      	; 0x156c <buffer_init+0x6>
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	fc 01       	movw	r30, r24
    157a:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	fc 01       	movw	r30, r24
    1582:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	fc 01       	movw	r30, r24
    158a:	12 a2       	std	Z+34, r1	; 0x22
}
    158c:	00 00       	nop
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	00 d0       	rcall	.+0      	; 0x159e <buffer_get_item+0x6>
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <buffer_get_item+0x8>
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	9a 83       	std	Y+2, r25	; 0x02
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	7c 83       	std	Y+4, r23	; 0x04
    15aa:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	fc 01       	movw	r30, r24
    15b2:	82 a1       	ldd	r24, Z+34	; 0x22
    15b4:	88 23       	and	r24, r24
    15b6:	81 f1       	breq	.+96     	; 0x1618 <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	fc 01       	movw	r30, r24
    15be:	81 a1       	ldd	r24, Z+33	; 0x21
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	29 81       	ldd	r18, Y+1	; 0x01
    15c6:	3a 81       	ldd	r19, Y+2	; 0x02
    15c8:	82 0f       	add	r24, r18
    15ca:	93 1f       	adc	r25, r19
    15cc:	fc 01       	movw	r30, r24
    15ce:	20 81       	ld	r18, Z
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	fc 01       	movw	r30, r24
    15d6:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	9a 81       	ldd	r25, Y+2	; 0x02
    15dc:	fc 01       	movw	r30, r24
    15de:	81 a1       	ldd	r24, Z+33	; 0x21
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	01 96       	adiw	r24, 0x01	; 1
    15e6:	8f 71       	andi	r24, 0x1F	; 31
    15e8:	90 78       	andi	r25, 0x80	; 128
    15ea:	99 23       	and	r25, r25
    15ec:	24 f4       	brge	.+8      	; 0x15f6 <buffer_get_item+0x5e>
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	80 6e       	ori	r24, 0xE0	; 224
    15f2:	9f 6f       	ori	r25, 0xFF	; 255
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	28 2f       	mov	r18, r24
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	9a 81       	ldd	r25, Y+2	; 0x02
    15fc:	fc 01       	movw	r30, r24
    15fe:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	fc 01       	movw	r30, r24
    1606:	82 a1       	ldd	r24, Z+34	; 0x22
    1608:	2f ef       	ldi	r18, 0xFF	; 255
    160a:	28 0f       	add	r18, r24
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	9a 81       	ldd	r25, Y+2	; 0x02
    1610:	fc 01       	movw	r30, r24
    1612:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	01 c0       	rjmp	.+2      	; 0x161a <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
    1618:	81 e0       	ldi	r24, 0x01	; 1
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	00 d0       	rcall	.+0      	; 0x162e <buffer_put_item+0x6>
    162e:	1f 92       	push	r1
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	9a 83       	std	Y+2, r25	; 0x02
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	fc 01       	movw	r30, r24
    1640:	82 a1       	ldd	r24, Z+34	; 0x22
    1642:	80 32       	cpi	r24, 0x20	; 32
    1644:	68 f5       	brcc	.+90     	; 0x16a0 <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	fc 01       	movw	r30, r24
    164c:	80 a1       	ldd	r24, Z+32	; 0x20
    164e:	88 2f       	mov	r24, r24
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	29 81       	ldd	r18, Y+1	; 0x01
    1654:	3a 81       	ldd	r19, Y+2	; 0x02
    1656:	82 0f       	add	r24, r18
    1658:	93 1f       	adc	r25, r19
    165a:	2b 81       	ldd	r18, Y+3	; 0x03
    165c:	fc 01       	movw	r30, r24
    165e:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	9a 81       	ldd	r25, Y+2	; 0x02
    1664:	fc 01       	movw	r30, r24
    1666:	80 a1       	ldd	r24, Z+32	; 0x20
    1668:	88 2f       	mov	r24, r24
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	8f 71       	andi	r24, 0x1F	; 31
    1670:	90 78       	andi	r25, 0x80	; 128
    1672:	99 23       	and	r25, r25
    1674:	24 f4       	brge	.+8      	; 0x167e <buffer_put_item+0x56>
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	80 6e       	ori	r24, 0xE0	; 224
    167a:	9f 6f       	ori	r25, 0xFF	; 255
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	28 2f       	mov	r18, r24
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
    1684:	fc 01       	movw	r30, r24
    1686:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	9a 81       	ldd	r25, Y+2	; 0x02
    168c:	fc 01       	movw	r30, r24
    168e:	82 a1       	ldd	r24, Z+34	; 0x22
    1690:	21 e0       	ldi	r18, 0x01	; 1
    1692:	28 0f       	add	r18, r24
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	fc 01       	movw	r30, r24
    169a:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	01 c0       	rjmp	.+2      	; 0x16a2 <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
    16a0:	82 e0       	ldi	r24, 0x02	; 2
}
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	08 95       	ret

000016ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <vListInitialise+0x6>
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	9a 83       	std	Y+2, r25	; 0x02
    16ba:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	9c 01       	movw	r18, r24
    16c2:	2d 5f       	subi	r18, 0xFD	; 253
    16c4:	3f 4f       	sbci	r19, 0xFF	; 255
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	fc 01       	movw	r30, r24
    16cc:	32 83       	std	Z+2, r19	; 0x02
    16ce:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	2f ef       	ldi	r18, 0xFF	; 255
    16d6:	3f ef       	ldi	r19, 0xFF	; 255
    16d8:	fc 01       	movw	r30, r24
    16da:	34 83       	std	Z+4, r19	; 0x04
    16dc:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	9c 01       	movw	r18, r24
    16e4:	2d 5f       	subi	r18, 0xFD	; 253
    16e6:	3f 4f       	sbci	r19, 0xFF	; 255
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
    16ec:	fc 01       	movw	r30, r24
    16ee:	36 83       	std	Z+6, r19	; 0x06
    16f0:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	9a 81       	ldd	r25, Y+2	; 0x02
    16f6:	9c 01       	movw	r18, r24
    16f8:	2d 5f       	subi	r18, 0xFD	; 253
    16fa:	3f 4f       	sbci	r19, 0xFF	; 255
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1700:	fc 01       	movw	r30, r24
    1702:	30 87       	std	Z+8, r19	; 0x08
    1704:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	9a 81       	ldd	r25, Y+2	; 0x02
    170a:	fc 01       	movw	r30, r24
    170c:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    170e:	00 00       	nop
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	08 95       	ret

0000171a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	00 d0       	rcall	.+0      	; 0x1720 <vListInitialiseItem+0x6>
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	9a 83       	std	Y+2, r25	; 0x02
    1726:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	9a 81       	ldd	r25, Y+2	; 0x02
    172c:	fc 01       	movw	r30, r24
    172e:	11 86       	std	Z+9, r1	; 0x09
    1730:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1732:	00 00       	nop
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	08 95       	ret

0000173e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	00 d0       	rcall	.+0      	; 0x1744 <vListInsertEnd+0x6>
    1744:	00 d0       	rcall	.+0      	; 0x1746 <vListInsertEnd+0x8>
    1746:	00 d0       	rcall	.+0      	; 0x1748 <vListInsertEnd+0xa>
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	9c 83       	std	Y+4, r25	; 0x04
    174e:	8b 83       	std	Y+3, r24	; 0x03
    1750:	7e 83       	std	Y+6, r23	; 0x06
    1752:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	9c 81       	ldd	r25, Y+4	; 0x04
    1758:	fc 01       	movw	r30, r24
    175a:	81 81       	ldd	r24, Z+1	; 0x01
    175c:	92 81       	ldd	r25, Z+2	; 0x02
    175e:	9a 83       	std	Y+2, r25	; 0x02
    1760:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	29 81       	ldd	r18, Y+1	; 0x01
    1768:	3a 81       	ldd	r19, Y+2	; 0x02
    176a:	fc 01       	movw	r30, r24
    176c:	33 83       	std	Z+3, r19	; 0x03
    176e:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	fc 01       	movw	r30, r24
    1776:	24 81       	ldd	r18, Z+4	; 0x04
    1778:	35 81       	ldd	r19, Z+5	; 0x05
    177a:	8d 81       	ldd	r24, Y+5	; 0x05
    177c:	9e 81       	ldd	r25, Y+6	; 0x06
    177e:	fc 01       	movw	r30, r24
    1780:	35 83       	std	Z+5, r19	; 0x05
    1782:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	fc 01       	movw	r30, r24
    178a:	84 81       	ldd	r24, Z+4	; 0x04
    178c:	95 81       	ldd	r25, Z+5	; 0x05
    178e:	2d 81       	ldd	r18, Y+5	; 0x05
    1790:	3e 81       	ldd	r19, Y+6	; 0x06
    1792:	fc 01       	movw	r30, r24
    1794:	33 83       	std	Z+3, r19	; 0x03
    1796:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	2d 81       	ldd	r18, Y+5	; 0x05
    179e:	3e 81       	ldd	r19, Y+6	; 0x06
    17a0:	fc 01       	movw	r30, r24
    17a2:	35 83       	std	Z+5, r19	; 0x05
    17a4:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	2b 81       	ldd	r18, Y+3	; 0x03
    17ac:	3c 81       	ldd	r19, Y+4	; 0x04
    17ae:	fc 01       	movw	r30, r24
    17b0:	31 87       	std	Z+9, r19	; 0x09
    17b2:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	fc 01       	movw	r30, r24
    17ba:	80 81       	ld	r24, Z
    17bc:	21 e0       	ldi	r18, 0x01	; 1
    17be:	28 0f       	add	r18, r24
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	fc 01       	movw	r30, r24
    17c6:	20 83       	st	Z, r18
}
    17c8:	00 00       	nop
    17ca:	26 96       	adiw	r28, 0x06	; 6
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	08 95       	ret

000017dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	28 97       	sbiw	r28, 0x08	; 8
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	78 87       	std	Y+8, r23	; 0x08
    17f6:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    17f8:	8f 81       	ldd	r24, Y+7	; 0x07
    17fa:	98 85       	ldd	r25, Y+8	; 0x08
    17fc:	fc 01       	movw	r30, r24
    17fe:	80 81       	ld	r24, Z
    1800:	91 81       	ldd	r25, Z+1	; 0x01
    1802:	9c 83       	std	Y+4, r25	; 0x04
    1804:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	9c 81       	ldd	r25, Y+4	; 0x04
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	41 f4       	brne	.+16     	; 0x181e <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	9e 81       	ldd	r25, Y+6	; 0x06
    1812:	fc 01       	movw	r30, r24
    1814:	87 81       	ldd	r24, Z+7	; 0x07
    1816:	90 85       	ldd	r25, Z+8	; 0x08
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	1a c0       	rjmp	.+52     	; 0x1852 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	9e 81       	ldd	r25, Y+6	; 0x06
    1822:	03 96       	adiw	r24, 0x03	; 3
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	07 c0       	rjmp	.+14     	; 0x1838 <vListInsert+0x5c>
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	fc 01       	movw	r30, r24
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	93 81       	ldd	r25, Z+3	; 0x03
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	89 83       	std	Y+1, r24	; 0x01
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	fc 01       	movw	r30, r24
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	fc 01       	movw	r30, r24
    1844:	20 81       	ld	r18, Z
    1846:	31 81       	ldd	r19, Z+1	; 0x01
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	82 17       	cp	r24, r18
    184e:	93 07       	cpc	r25, r19
    1850:	60 f7       	brcc	.-40     	; 0x182a <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	fc 01       	movw	r30, r24
    1858:	22 81       	ldd	r18, Z+2	; 0x02
    185a:	33 81       	ldd	r19, Z+3	; 0x03
    185c:	8f 81       	ldd	r24, Y+7	; 0x07
    185e:	98 85       	ldd	r25, Y+8	; 0x08
    1860:	fc 01       	movw	r30, r24
    1862:	33 83       	std	Z+3, r19	; 0x03
    1864:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1866:	8f 81       	ldd	r24, Y+7	; 0x07
    1868:	98 85       	ldd	r25, Y+8	; 0x08
    186a:	fc 01       	movw	r30, r24
    186c:	82 81       	ldd	r24, Z+2	; 0x02
    186e:	93 81       	ldd	r25, Z+3	; 0x03
    1870:	2f 81       	ldd	r18, Y+7	; 0x07
    1872:	38 85       	ldd	r19, Y+8	; 0x08
    1874:	fc 01       	movw	r30, r24
    1876:	35 83       	std	Z+5, r19	; 0x05
    1878:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    187a:	8f 81       	ldd	r24, Y+7	; 0x07
    187c:	98 85       	ldd	r25, Y+8	; 0x08
    187e:	29 81       	ldd	r18, Y+1	; 0x01
    1880:	3a 81       	ldd	r19, Y+2	; 0x02
    1882:	fc 01       	movw	r30, r24
    1884:	35 83       	std	Z+5, r19	; 0x05
    1886:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	9a 81       	ldd	r25, Y+2	; 0x02
    188c:	2f 81       	ldd	r18, Y+7	; 0x07
    188e:	38 85       	ldd	r19, Y+8	; 0x08
    1890:	fc 01       	movw	r30, r24
    1892:	33 83       	std	Z+3, r19	; 0x03
    1894:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1896:	8f 81       	ldd	r24, Y+7	; 0x07
    1898:	98 85       	ldd	r25, Y+8	; 0x08
    189a:	2d 81       	ldd	r18, Y+5	; 0x05
    189c:	3e 81       	ldd	r19, Y+6	; 0x06
    189e:	fc 01       	movw	r30, r24
    18a0:	31 87       	std	Z+9, r19	; 0x09
    18a2:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    18a4:	8d 81       	ldd	r24, Y+5	; 0x05
    18a6:	9e 81       	ldd	r25, Y+6	; 0x06
    18a8:	fc 01       	movw	r30, r24
    18aa:	80 81       	ld	r24, Z
    18ac:	21 e0       	ldi	r18, 0x01	; 1
    18ae:	28 0f       	add	r18, r24
    18b0:	8d 81       	ldd	r24, Y+5	; 0x05
    18b2:	9e 81       	ldd	r25, Y+6	; 0x06
    18b4:	fc 01       	movw	r30, r24
    18b6:	20 83       	st	Z, r18
}
    18b8:	00 00       	nop
    18ba:	28 96       	adiw	r28, 0x08	; 8
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	08 95       	ret

000018cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <uxListRemove+0x6>
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <uxListRemove+0x8>
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	9c 83       	std	Y+4, r25	; 0x04
    18da:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	fc 01       	movw	r30, r24
    18e2:	80 85       	ldd	r24, Z+8	; 0x08
    18e4:	91 85       	ldd	r25, Z+9	; 0x09
    18e6:	9a 83       	std	Y+2, r25	; 0x02
    18e8:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	fc 01       	movw	r30, r24
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	2b 81       	ldd	r18, Y+3	; 0x03
    18f6:	3c 81       	ldd	r19, Y+4	; 0x04
    18f8:	f9 01       	movw	r30, r18
    18fa:	24 81       	ldd	r18, Z+4	; 0x04
    18fc:	35 81       	ldd	r19, Z+5	; 0x05
    18fe:	fc 01       	movw	r30, r24
    1900:	35 83       	std	Z+5, r19	; 0x05
    1902:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	fc 01       	movw	r30, r24
    190a:	84 81       	ldd	r24, Z+4	; 0x04
    190c:	95 81       	ldd	r25, Z+5	; 0x05
    190e:	2b 81       	ldd	r18, Y+3	; 0x03
    1910:	3c 81       	ldd	r19, Y+4	; 0x04
    1912:	f9 01       	movw	r30, r18
    1914:	22 81       	ldd	r18, Z+2	; 0x02
    1916:	33 81       	ldd	r19, Z+3	; 0x03
    1918:	fc 01       	movw	r30, r24
    191a:	33 83       	std	Z+3, r19	; 0x03
    191c:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	9a 81       	ldd	r25, Y+2	; 0x02
    1922:	fc 01       	movw	r30, r24
    1924:	21 81       	ldd	r18, Z+1	; 0x01
    1926:	32 81       	ldd	r19, Z+2	; 0x02
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	9c 81       	ldd	r25, Y+4	; 0x04
    192c:	28 17       	cp	r18, r24
    192e:	39 07       	cpc	r19, r25
    1930:	51 f4       	brne	.+20     	; 0x1946 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	9c 81       	ldd	r25, Y+4	; 0x04
    1936:	fc 01       	movw	r30, r24
    1938:	24 81       	ldd	r18, Z+4	; 0x04
    193a:	35 81       	ldd	r19, Z+5	; 0x05
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	fc 01       	movw	r30, r24
    1942:	32 83       	std	Z+2, r19	; 0x02
    1944:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	fc 01       	movw	r30, r24
    194c:	11 86       	std	Z+9, r1	; 0x09
    194e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	9a 81       	ldd	r25, Y+2	; 0x02
    1954:	fc 01       	movw	r30, r24
    1956:	80 81       	ld	r24, Z
    1958:	2f ef       	ldi	r18, 0xFF	; 255
    195a:	28 0f       	add	r18, r24
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	9a 81       	ldd	r25, Y+2	; 0x02
    1960:	fc 01       	movw	r30, r24
    1962:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	9a 81       	ldd	r25, Y+2	; 0x02
    1968:	fc 01       	movw	r30, r24
    196a:	80 81       	ld	r24, Z
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    1982:	28 97       	sbiw	r28, 0x08	; 8
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	9c 83       	std	Y+4, r25	; 0x04
    1990:	8b 83       	std	Y+3, r24	; 0x03
    1992:	7e 83       	std	Y+6, r23	; 0x06
    1994:	6d 83       	std	Y+5, r22	; 0x05
    1996:	58 87       	std	Y+8, r21	; 0x08
    1998:	4f 83       	std	Y+7, r20	; 0x07
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	21 e1       	ldi	r18, 0x11	; 17
    19a0:	fc 01       	movw	r30, r24
    19a2:	20 83       	st	Z, r18
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	9c 83       	std	Y+4, r25	; 0x04
    19ac:	8b 83       	std	Y+3, r24	; 0x03
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	9c 81       	ldd	r25, Y+4	; 0x04
    19b2:	22 e2       	ldi	r18, 0x22	; 34
    19b4:	fc 01       	movw	r30, r24
    19b6:	20 83       	st	Z, r18
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	9c 81       	ldd	r25, Y+4	; 0x04
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	9c 83       	std	Y+4, r25	; 0x04
    19c0:	8b 83       	std	Y+3, r24	; 0x03
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	23 e3       	ldi	r18, 0x33	; 51
    19c8:	fc 01       	movw	r30, r24
    19ca:	20 83       	st	Z, r18
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	9c 83       	std	Y+4, r25	; 0x04
    19d4:	8b 83       	std	Y+3, r24	; 0x03
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	9a 83       	std	Y+2, r25	; 0x02
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	29 81       	ldd	r18, Y+1	; 0x01
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	fc 01       	movw	r30, r24
    19e6:	20 83       	st	Z, r18
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	9c 83       	std	Y+4, r25	; 0x04
    19f0:	8b 83       	std	Y+3, r24	; 0x03
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	9a 81       	ldd	r25, Y+2	; 0x02
    19f6:	89 2f       	mov	r24, r25
    19f8:	99 27       	eor	r25, r25
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	29 81       	ldd	r18, Y+1	; 0x01
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	fc 01       	movw	r30, r24
    1a06:	20 83       	st	Z, r18
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	9c 83       	std	Y+4, r25	; 0x04
    1a10:	8b 83       	std	Y+3, r24	; 0x03
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	fc 01       	movw	r30, r24
    1a18:	10 82       	st	Z, r1
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	9c 83       	std	Y+4, r25	; 0x04
    1a22:	8b 83       	std	Y+3, r24	; 0x03
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	20 e8       	ldi	r18, 0x80	; 128
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	20 83       	st	Z, r18
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	9c 83       	std	Y+4, r25	; 0x04
    1a36:	8b 83       	std	Y+3, r24	; 0x03
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	10 82       	st	Z, r1
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	9c 83       	std	Y+4, r25	; 0x04
    1a48:	8b 83       	std	Y+3, r24	; 0x03
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4e:	22 e0       	ldi	r18, 0x02	; 2
    1a50:	fc 01       	movw	r30, r24
    1a52:	20 83       	st	Z, r18
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	9c 81       	ldd	r25, Y+4	; 0x04
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	9c 83       	std	Y+4, r25	; 0x04
    1a5c:	8b 83       	std	Y+3, r24	; 0x03
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	23 e0       	ldi	r18, 0x03	; 3
    1a64:	fc 01       	movw	r30, r24
    1a66:	20 83       	st	Z, r18
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	9c 83       	std	Y+4, r25	; 0x04
    1a70:	8b 83       	std	Y+3, r24	; 0x03
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	9c 81       	ldd	r25, Y+4	; 0x04
    1a76:	24 e0       	ldi	r18, 0x04	; 4
    1a78:	fc 01       	movw	r30, r24
    1a7a:	20 83       	st	Z, r18
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	9c 83       	std	Y+4, r25	; 0x04
    1a84:	8b 83       	std	Y+3, r24	; 0x03
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	25 e0       	ldi	r18, 0x05	; 5
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	20 83       	st	Z, r18
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	9c 83       	std	Y+4, r25	; 0x04
    1a98:	8b 83       	std	Y+3, r24	; 0x03
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9e:	26 e0       	ldi	r18, 0x06	; 6
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	20 83       	st	Z, r18
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	9c 83       	std	Y+4, r25	; 0x04
    1aac:	8b 83       	std	Y+3, r24	; 0x03
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab2:	27 e0       	ldi	r18, 0x07	; 7
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	20 83       	st	Z, r18
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	9c 83       	std	Y+4, r25	; 0x04
    1ac0:	8b 83       	std	Y+3, r24	; 0x03
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	28 e0       	ldi	r18, 0x08	; 8
    1ac8:	fc 01       	movw	r30, r24
    1aca:	20 83       	st	Z, r18
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	9c 83       	std	Y+4, r25	; 0x04
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	29 e0       	ldi	r18, 0x09	; 9
    1adc:	fc 01       	movw	r30, r24
    1ade:	20 83       	st	Z, r18
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	9c 83       	std	Y+4, r25	; 0x04
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	9c 81       	ldd	r25, Y+4	; 0x04
    1aee:	20 e1       	ldi	r18, 0x10	; 16
    1af0:	fc 01       	movw	r30, r24
    1af2:	20 83       	st	Z, r18
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	9c 83       	std	Y+4, r25	; 0x04
    1afc:	8b 83       	std	Y+3, r24	; 0x03
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	21 e1       	ldi	r18, 0x11	; 17
    1b04:	fc 01       	movw	r30, r24
    1b06:	20 83       	st	Z, r18
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	9c 83       	std	Y+4, r25	; 0x04
    1b10:	8b 83       	std	Y+3, r24	; 0x03
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	22 e1       	ldi	r18, 0x12	; 18
    1b18:	fc 01       	movw	r30, r24
    1b1a:	20 83       	st	Z, r18
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	9c 83       	std	Y+4, r25	; 0x04
    1b24:	8b 83       	std	Y+3, r24	; 0x03
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	23 e1       	ldi	r18, 0x13	; 19
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	20 83       	st	Z, r18
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	9c 83       	std	Y+4, r25	; 0x04
    1b38:	8b 83       	std	Y+3, r24	; 0x03
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	24 e1       	ldi	r18, 0x14	; 20
    1b40:	fc 01       	movw	r30, r24
    1b42:	20 83       	st	Z, r18
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	9c 83       	std	Y+4, r25	; 0x04
    1b4c:	8b 83       	std	Y+3, r24	; 0x03
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	9c 81       	ldd	r25, Y+4	; 0x04
    1b52:	25 e1       	ldi	r18, 0x15	; 21
    1b54:	fc 01       	movw	r30, r24
    1b56:	20 83       	st	Z, r18
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	9c 83       	std	Y+4, r25	; 0x04
    1b60:	8b 83       	std	Y+3, r24	; 0x03
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	9c 81       	ldd	r25, Y+4	; 0x04
    1b66:	26 e1       	ldi	r18, 0x16	; 22
    1b68:	fc 01       	movw	r30, r24
    1b6a:	20 83       	st	Z, r18
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	9c 83       	std	Y+4, r25	; 0x04
    1b74:	8b 83       	std	Y+3, r24	; 0x03
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7a:	27 e1       	ldi	r18, 0x17	; 23
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	20 83       	st	Z, r18
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	9c 83       	std	Y+4, r25	; 0x04
    1b88:	8b 83       	std	Y+3, r24	; 0x03
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8e:	28 e1       	ldi	r18, 0x18	; 24
    1b90:	fc 01       	movw	r30, r24
    1b92:	20 83       	st	Z, r18
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	9c 83       	std	Y+4, r25	; 0x04
    1b9c:	8b 83       	std	Y+3, r24	; 0x03
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	29 e1       	ldi	r18, 0x19	; 25
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	20 83       	st	Z, r18
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	9c 83       	std	Y+4, r25	; 0x04
    1bb0:	8b 83       	std	Y+3, r24	; 0x03
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	20 e2       	ldi	r18, 0x20	; 32
    1bb8:	fc 01       	movw	r30, r24
    1bba:	20 83       	st	Z, r18
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	9c 83       	std	Y+4, r25	; 0x04
    1bc4:	8b 83       	std	Y+3, r24	; 0x03
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	21 e2       	ldi	r18, 0x21	; 33
    1bcc:	fc 01       	movw	r30, r24
    1bce:	20 83       	st	Z, r18
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	9c 83       	std	Y+4, r25	; 0x04
    1bd8:	8b 83       	std	Y+3, r24	; 0x03
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	22 e2       	ldi	r18, 0x22	; 34
    1be0:	fc 01       	movw	r30, r24
    1be2:	20 83       	st	Z, r18
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	9c 83       	std	Y+4, r25	; 0x04
    1bec:	8b 83       	std	Y+3, r24	; 0x03
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	23 e2       	ldi	r18, 0x23	; 35
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	20 83       	st	Z, r18
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	9c 83       	std	Y+4, r25	; 0x04
    1c00:	8b 83       	std	Y+3, r24	; 0x03
    1c02:	8f 81       	ldd	r24, Y+7	; 0x07
    1c04:	98 85       	ldd	r25, Y+8	; 0x08
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	29 81       	ldd	r18, Y+1	; 0x01
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	fc 01       	movw	r30, r24
    1c12:	20 83       	st	Z, r18
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	9c 81       	ldd	r25, Y+4	; 0x04
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	9c 83       	std	Y+4, r25	; 0x04
    1c1c:	8b 83       	std	Y+3, r24	; 0x03
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	9a 81       	ldd	r25, Y+2	; 0x02
    1c22:	89 2f       	mov	r24, r25
    1c24:	99 27       	eor	r25, r25
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	29 81       	ldd	r18, Y+1	; 0x01
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	fc 01       	movw	r30, r24
    1c32:	20 83       	st	Z, r18
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	9c 83       	std	Y+4, r25	; 0x04
    1c3c:	8b 83       	std	Y+3, r24	; 0x03
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	9c 81       	ldd	r25, Y+4	; 0x04
    1c42:	26 e2       	ldi	r18, 0x26	; 38
    1c44:	fc 01       	movw	r30, r24
    1c46:	20 83       	st	Z, r18
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	9c 83       	std	Y+4, r25	; 0x04
    1c50:	8b 83       	std	Y+3, r24	; 0x03
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	9c 81       	ldd	r25, Y+4	; 0x04
    1c56:	27 e2       	ldi	r18, 0x27	; 39
    1c58:	fc 01       	movw	r30, r24
    1c5a:	20 83       	st	Z, r18
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	9c 83       	std	Y+4, r25	; 0x04
    1c64:	8b 83       	std	Y+3, r24	; 0x03
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	28 e2       	ldi	r18, 0x28	; 40
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	20 83       	st	Z, r18
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	9c 81       	ldd	r25, Y+4	; 0x04
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	9c 83       	std	Y+4, r25	; 0x04
    1c78:	8b 83       	std	Y+3, r24	; 0x03
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	29 e2       	ldi	r18, 0x29	; 41
    1c80:	fc 01       	movw	r30, r24
    1c82:	20 83       	st	Z, r18
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	9c 81       	ldd	r25, Y+4	; 0x04
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	9c 83       	std	Y+4, r25	; 0x04
    1c8c:	8b 83       	std	Y+3, r24	; 0x03
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	20 e3       	ldi	r18, 0x30	; 48
    1c94:	fc 01       	movw	r30, r24
    1c96:	20 83       	st	Z, r18
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	9c 83       	std	Y+4, r25	; 0x04
    1ca0:	8b 83       	std	Y+3, r24	; 0x03
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca6:	21 e3       	ldi	r18, 0x31	; 49
    1ca8:	fc 01       	movw	r30, r24
    1caa:	20 83       	st	Z, r18
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	9c 83       	std	Y+4, r25	; 0x04
    1cb4:	8b 83       	std	Y+3, r24	; 0x03
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cba:	28 96       	adiw	r28, 0x08	; 8
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	08 95       	ret

00001ccc <xPortStartScheduler>:
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <prvSetupTimerInterrupt>
    1cd8:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
    1cdc:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    1ce0:	cd 91       	ld	r28, X+
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	dd 91       	ld	r29, X+
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	ff 91       	pop	r31
    1cea:	ef 91       	pop	r30
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	bf 91       	pop	r27
    1cf2:	af 91       	pop	r26
    1cf4:	9f 91       	pop	r25
    1cf6:	8f 91       	pop	r24
    1cf8:	7f 91       	pop	r23
    1cfa:	6f 91       	pop	r22
    1cfc:	5f 91       	pop	r21
    1cfe:	4f 91       	pop	r20
    1d00:	3f 91       	pop	r19
    1d02:	2f 91       	pop	r18
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	df 90       	pop	r13
    1d0e:	cf 90       	pop	r12
    1d10:	bf 90       	pop	r11
    1d12:	af 90       	pop	r10
    1d14:	9f 90       	pop	r9
    1d16:	8f 90       	pop	r8
    1d18:	7f 90       	pop	r7
    1d1a:	6f 90       	pop	r6
    1d1c:	5f 90       	pop	r5
    1d1e:	4f 90       	pop	r4
    1d20:	3f 90       	pop	r3
    1d22:	2f 90       	pop	r2
    1d24:	1f 90       	pop	r1
    1d26:	0f 90       	pop	r0
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	0f 90       	pop	r0
    1d2c:	08 95       	ret
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	08 95       	ret

00001d36 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1d36:	0f 92       	push	r0
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	0f 92       	push	r0
    1d3e:	1f 92       	push	r1
    1d40:	11 24       	eor	r1, r1
    1d42:	2f 92       	push	r2
    1d44:	3f 92       	push	r3
    1d46:	4f 92       	push	r4
    1d48:	5f 92       	push	r5
    1d4a:	6f 92       	push	r6
    1d4c:	7f 92       	push	r7
    1d4e:	8f 92       	push	r8
    1d50:	9f 92       	push	r9
    1d52:	af 92       	push	r10
    1d54:	bf 92       	push	r11
    1d56:	cf 92       	push	r12
    1d58:	df 92       	push	r13
    1d5a:	ef 92       	push	r14
    1d5c:	ff 92       	push	r15
    1d5e:	0f 93       	push	r16
    1d60:	1f 93       	push	r17
    1d62:	2f 93       	push	r18
    1d64:	3f 93       	push	r19
    1d66:	4f 93       	push	r20
    1d68:	5f 93       	push	r21
    1d6a:	6f 93       	push	r22
    1d6c:	7f 93       	push	r23
    1d6e:	8f 93       	push	r24
    1d70:	9f 93       	push	r25
    1d72:	af 93       	push	r26
    1d74:	bf 93       	push	r27
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	ef 93       	push	r30
    1d7c:	ff 93       	push	r31
    1d7e:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
    1d82:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    1d86:	0d b6       	in	r0, 0x3d	; 61
    1d88:	0d 92       	st	X+, r0
    1d8a:	0e b6       	in	r0, 0x3e	; 62
    1d8c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1d8e:	0e 94 4f 1a 	call	0x349e	; 0x349e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1d92:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
    1d96:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    1d9a:	cd 91       	ld	r28, X+
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	dd 91       	ld	r29, X+
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	ff 91       	pop	r31
    1da4:	ef 91       	pop	r30
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	bf 91       	pop	r27
    1dac:	af 91       	pop	r26
    1dae:	9f 91       	pop	r25
    1db0:	8f 91       	pop	r24
    1db2:	7f 91       	pop	r23
    1db4:	6f 91       	pop	r22
    1db6:	5f 91       	pop	r21
    1db8:	4f 91       	pop	r20
    1dba:	3f 91       	pop	r19
    1dbc:	2f 91       	pop	r18
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	df 90       	pop	r13
    1dc8:	cf 90       	pop	r12
    1dca:	bf 90       	pop	r11
    1dcc:	af 90       	pop	r10
    1dce:	9f 90       	pop	r9
    1dd0:	8f 90       	pop	r8
    1dd2:	7f 90       	pop	r7
    1dd4:	6f 90       	pop	r6
    1dd6:	5f 90       	pop	r5
    1dd8:	4f 90       	pop	r4
    1dda:	3f 90       	pop	r3
    1ddc:	2f 90       	pop	r2
    1dde:	1f 90       	pop	r1
    1de0:	0f 90       	pop	r0
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1de6:	08 95       	ret
	...

00001dea <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1dea:	0f 92       	push	r0
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	0f 92       	push	r0
    1df2:	1f 92       	push	r1
    1df4:	11 24       	eor	r1, r1
    1df6:	2f 92       	push	r2
    1df8:	3f 92       	push	r3
    1dfa:	4f 92       	push	r4
    1dfc:	5f 92       	push	r5
    1dfe:	6f 92       	push	r6
    1e00:	7f 92       	push	r7
    1e02:	8f 92       	push	r8
    1e04:	9f 92       	push	r9
    1e06:	af 92       	push	r10
    1e08:	bf 92       	push	r11
    1e0a:	cf 92       	push	r12
    1e0c:	df 92       	push	r13
    1e0e:	ef 92       	push	r14
    1e10:	ff 92       	push	r15
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	2f 93       	push	r18
    1e18:	3f 93       	push	r19
    1e1a:	4f 93       	push	r20
    1e1c:	5f 93       	push	r21
    1e1e:	6f 93       	push	r22
    1e20:	7f 93       	push	r23
    1e22:	8f 93       	push	r24
    1e24:	9f 93       	push	r25
    1e26:	af 93       	push	r26
    1e28:	bf 93       	push	r27
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	ef 93       	push	r30
    1e30:	ff 93       	push	r31
    1e32:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
    1e36:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    1e3a:	0d b6       	in	r0, 0x3d	; 61
    1e3c:	0d 92       	st	X+, r0
    1e3e:	0e b6       	in	r0, 0x3e	; 62
    1e40:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1e42:	0e 94 62 19 	call	0x32c4	; 0x32c4 <xTaskIncrementTick>
    1e46:	88 23       	and	r24, r24
    1e48:	11 f0       	breq	.+4      	; 0x1e4e <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    1e4a:	0e 94 4f 1a 	call	0x349e	; 0x349e <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1e4e:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
    1e52:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    1e56:	cd 91       	ld	r28, X+
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	dd 91       	ld	r29, X+
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	ff 91       	pop	r31
    1e60:	ef 91       	pop	r30
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	bf 91       	pop	r27
    1e68:	af 91       	pop	r26
    1e6a:	9f 91       	pop	r25
    1e6c:	8f 91       	pop	r24
    1e6e:	7f 91       	pop	r23
    1e70:	6f 91       	pop	r22
    1e72:	5f 91       	pop	r21
    1e74:	4f 91       	pop	r20
    1e76:	3f 91       	pop	r19
    1e78:	2f 91       	pop	r18
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	ff 90       	pop	r15
    1e80:	ef 90       	pop	r14
    1e82:	df 90       	pop	r13
    1e84:	cf 90       	pop	r12
    1e86:	bf 90       	pop	r11
    1e88:	af 90       	pop	r10
    1e8a:	9f 90       	pop	r9
    1e8c:	8f 90       	pop	r8
    1e8e:	7f 90       	pop	r7
    1e90:	6f 90       	pop	r6
    1e92:	5f 90       	pop	r5
    1e94:	4f 90       	pop	r4
    1e96:	3f 90       	pop	r3
    1e98:	2f 90       	pop	r2
    1e9a:	1f 90       	pop	r1
    1e9c:	0f 90       	pop	r0
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1ea2:	08 95       	ret
	...

00001ea6 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <prvSetupTimerInterrupt+0x6>
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <prvSetupTimerInterrupt+0x8>
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <prvSetupTimerInterrupt+0xa>
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1eb4:	89 e9       	ldi	r24, 0x99	; 153
    1eb6:	99 e3       	ldi	r25, 0x39	; 57
    1eb8:	a0 e0       	ldi	r26, 0x00	; 0
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	9a 83       	std	Y+2, r25	; 0x02
    1ec0:	ab 83       	std	Y+3, r26	; 0x03
    1ec2:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec8:	ab 81       	ldd	r26, Y+3	; 0x03
    1eca:	bc 81       	ldd	r27, Y+4	; 0x04
    1ecc:	68 94       	set
    1ece:	15 f8       	bld	r1, 5
    1ed0:	b6 95       	lsr	r27
    1ed2:	a7 95       	ror	r26
    1ed4:	97 95       	ror	r25
    1ed6:	87 95       	ror	r24
    1ed8:	16 94       	lsr	r1
    1eda:	d1 f7       	brne	.-12     	; 0x1ed0 <prvSetupTimerInterrupt+0x2a>
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	9a 83       	std	Y+2, r25	; 0x02
    1ee0:	ab 83       	std	Y+3, r26	; 0x03
    1ee2:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee8:	ab 81       	ldd	r26, Y+3	; 0x03
    1eea:	bc 81       	ldd	r27, Y+4	; 0x04
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	a1 09       	sbc	r26, r1
    1ef0:	b1 09       	sbc	r27, r1
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	9a 83       	std	Y+2, r25	; 0x02
    1ef6:	ab 83       	std	Y+3, r26	; 0x03
    1ef8:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	ab 81       	ldd	r26, Y+3	; 0x03
    1f04:	bc 81       	ldd	r27, Y+4	; 0x04
    1f06:	89 2f       	mov	r24, r25
    1f08:	9a 2f       	mov	r25, r26
    1f0a:	ab 2f       	mov	r26, r27
    1f0c:	bb 27       	eor	r27, r27
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	9a 83       	std	Y+2, r25	; 0x02
    1f12:	ab 83       	std	Y+3, r26	; 0x03
    1f14:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    1f1a:	89 e8       	ldi	r24, 0x89	; 137
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f20:	fc 01       	movw	r30, r24
    1f22:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    1f24:	88 e8       	ldi	r24, 0x88	; 136
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	2d 81       	ldd	r18, Y+5	; 0x05
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1f2e:	8b e0       	ldi	r24, 0x0B	; 11
    1f30:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    1f32:	81 e8       	ldi	r24, 0x81	; 129
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	2d 81       	ldd	r18, Y+5	; 0x05
    1f38:	fc 01       	movw	r30, r24
    1f3a:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    1f3c:	8f e6       	ldi	r24, 0x6F	; 111
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	fc 01       	movw	r30, r24
    1f42:	80 81       	ld	r24, Z
    1f44:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	82 60       	ori	r24, 0x02	; 2
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    1f4c:	8f e6       	ldi	r24, 0x6F	; 111
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	2d 81       	ldd	r18, Y+5	; 0x05
    1f52:	fc 01       	movw	r30, r24
    1f54:	20 83       	st	Z, r18
}
    1f56:	00 00       	nop
    1f58:	26 96       	adiw	r28, 0x06	; 6
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	08 95       	ret

00001f6a <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    1f6a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <vPortYieldFromTick>
		asm volatile ( "reti" );
    1f6e:	18 95       	reti
	...

00001f72 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <pvPortMalloc+0x6>
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <pvPortMalloc+0x8>
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	9c 83       	std	Y+4, r25	; 0x04
    1f80:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    1f82:	1a 82       	std	Y+2, r1	; 0x02
    1f84:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    1f86:	0e 94 be 18 	call	0x317c	; 0x317c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1f8a:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <pucAlignedHeap.2084>
    1f8e:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <pucAlignedHeap.2084+0x1>
    1f92:	89 2b       	or	r24, r25
    1f94:	31 f4       	brne	.+12     	; 0x1fa2 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1f96:	80 e6       	ldi	r24, 0x60	; 96
    1f98:	93 e0       	ldi	r25, 0x03	; 3
    1f9a:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <pucAlignedHeap.2084+0x1>
    1f9e:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <pucAlignedHeap.2084>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1fa2:	20 91 47 07 	lds	r18, 0x0747	; 0x800747 <xNextFreeByte>
    1fa6:	30 91 48 07 	lds	r19, 0x0748	; 0x800748 <xNextFreeByte+0x1>
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	82 0f       	add	r24, r18
    1fb0:	93 1f       	adc	r25, r19
    1fb2:	87 3e       	cpi	r24, 0xE7	; 231
    1fb4:	93 40       	sbci	r25, 0x03	; 3
    1fb6:	38 f5       	brcc	.+78     	; 0x2006 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    1fb8:	20 91 47 07 	lds	r18, 0x0747	; 0x800747 <xNextFreeByte>
    1fbc:	30 91 48 07 	lds	r19, 0x0748	; 0x800748 <xNextFreeByte+0x1>
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	28 0f       	add	r18, r24
    1fc6:	39 1f       	adc	r19, r25
    1fc8:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <xNextFreeByte>
    1fcc:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1fd0:	82 17       	cp	r24, r18
    1fd2:	93 07       	cpc	r25, r19
    1fd4:	c0 f4       	brcc	.+48     	; 0x2006 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1fd6:	20 91 49 07 	lds	r18, 0x0749	; 0x800749 <pucAlignedHeap.2084>
    1fda:	30 91 4a 07 	lds	r19, 0x074A	; 0x80074a <pucAlignedHeap.2084+0x1>
    1fde:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <xNextFreeByte>
    1fe2:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <xNextFreeByte+0x1>
    1fe6:	82 0f       	add	r24, r18
    1fe8:	93 1f       	adc	r25, r19
    1fea:	9a 83       	std	Y+2, r25	; 0x02
    1fec:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    1fee:	20 91 47 07 	lds	r18, 0x0747	; 0x800747 <xNextFreeByte>
    1ff2:	30 91 48 07 	lds	r19, 0x0748	; 0x800748 <xNextFreeByte+0x1>
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	82 0f       	add	r24, r18
    1ffc:	93 1f       	adc	r25, r19
    1ffe:	90 93 48 07 	sts	0x0748, r25	; 0x800748 <xNextFreeByte+0x1>
    2002:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    2006:	0e 94 cb 18 	call	0x3196	; 0x3196 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	df 91       	pop	r29
    2018:	cf 91       	pop	r28
    201a:	08 95       	ret

0000201c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
    2020:	00 d0       	rcall	.+0      	; 0x2022 <vPortFree+0x6>
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	9a 83       	std	Y+2, r25	; 0x02
    2028:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    202a:	00 00       	nop
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	08 95       	ret

00002036 <_serial_tx_int_on>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	00 d0       	rcall	.+0      	; 0x203c <_serial_tx_int_on+0x6>
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	05 97       	sbiw	r24, 0x05	; 5
    204a:	29 81       	ldd	r18, Y+1	; 0x01
    204c:	3a 81       	ldd	r19, Y+2	; 0x02
    204e:	25 50       	subi	r18, 0x05	; 5
    2050:	31 09       	sbc	r19, r1
    2052:	f9 01       	movw	r30, r18
    2054:	20 81       	ld	r18, Z
    2056:	20 62       	ori	r18, 0x20	; 32
    2058:	fc 01       	movw	r30, r24
    205a:	20 83       	st	Z, r18
    205c:	00 00       	nop
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	df 91       	pop	r29
    2064:	cf 91       	pop	r28
    2066:	08 95       	ret

00002068 <serial_new_instance>:
    2068:	8f 92       	push	r8
    206a:	9f 92       	push	r9
    206c:	af 92       	push	r10
    206e:	bf 92       	push	r11
    2070:	cf 92       	push	r12
    2072:	df 92       	push	r13
    2074:	ef 92       	push	r14
    2076:	0f 93       	push	r16
    2078:	1f 93       	push	r17
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	61 97       	sbiw	r28, 0x11	; 17
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	8c 83       	std	Y+4, r24	; 0x04
    2090:	4d 83       	std	Y+5, r20	; 0x05
    2092:	5e 83       	std	Y+6, r21	; 0x06
    2094:	6f 83       	std	Y+7, r22	; 0x07
    2096:	78 87       	std	Y+8, r23	; 0x08
    2098:	29 87       	std	Y+9, r18	; 0x09
    209a:	0a 87       	std	Y+10, r16	; 0x0a
    209c:	eb 86       	std	Y+11, r14	; 0x0b
    209e:	dd 86       	std	Y+13, r13	; 0x0d
    20a0:	cc 86       	std	Y+12, r12	; 0x0c
    20a2:	bf 86       	std	Y+15, r11	; 0x0f
    20a4:	ae 86       	std	Y+14, r10	; 0x0e
    20a6:	99 8a       	std	Y+17, r9	; 0x11
    20a8:	88 8a       	std	Y+16, r8	; 0x10
    20aa:	88 e0       	ldi	r24, 0x08	; 8
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0e 94 68 21 	call	0x42d0	; 0x42d0 <malloc>
    20b2:	9a 83       	std	Y+2, r25	; 0x02
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	8c 81       	ldd	r24, Y+4	; 0x04
    20b8:	88 2f       	mov	r24, r24
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	88 0f       	add	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	85 5b       	subi	r24, 0xB5	; 181
    20c2:	98 4f       	sbci	r25, 0xF8	; 248
    20c4:	29 81       	ldd	r18, Y+1	; 0x01
    20c6:	3a 81       	ldd	r19, Y+2	; 0x02
    20c8:	fc 01       	movw	r30, r24
    20ca:	31 83       	std	Z+1, r19	; 0x01
    20cc:	20 83       	st	Z, r18
    20ce:	8c 81       	ldd	r24, Y+4	; 0x04
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	8a 5f       	subi	r24, 0xFA	; 250
    20da:	9e 4f       	sbci	r25, 0xFE	; 254
    20dc:	fc 01       	movw	r30, r24
    20de:	20 81       	ld	r18, Z
    20e0:	31 81       	ldd	r19, Z+1	; 0x01
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	fc 01       	movw	r30, r24
    20e8:	31 83       	std	Z+1, r19	; 0x01
    20ea:	20 83       	st	Z, r18
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	9a 81       	ldd	r25, Y+2	; 0x02
    20f0:	2e 85       	ldd	r18, Y+14	; 0x0e
    20f2:	3f 85       	ldd	r19, Y+15	; 0x0f
    20f4:	fc 01       	movw	r30, r24
    20f6:	33 83       	std	Z+3, r19	; 0x03
    20f8:	22 83       	std	Z+2, r18	; 0x02
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	9a 81       	ldd	r25, Y+2	; 0x02
    20fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    2100:	3d 85       	ldd	r19, Y+13	; 0x0d
    2102:	fc 01       	movw	r30, r24
    2104:	35 83       	std	Z+5, r19	; 0x05
    2106:	24 83       	std	Z+4, r18	; 0x04
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	28 89       	ldd	r18, Y+16	; 0x10
    210e:	39 89       	ldd	r19, Y+17	; 0x11
    2110:	fc 01       	movw	r30, r24
    2112:	37 83       	std	Z+7, r19	; 0x07
    2114:	26 83       	std	Z+6, r18	; 0x06
    2116:	8f e5       	ldi	r24, 0x5F	; 95
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	fc 01       	movw	r30, r24
    211c:	80 81       	ld	r24, Z
    211e:	8b 83       	std	Y+3, r24	; 0x03
    2120:	f8 94       	cli
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	9a 81       	ldd	r25, Y+2	; 0x02
    2126:	fc 01       	movw	r30, r24
    2128:	80 81       	ld	r24, Z
    212a:	91 81       	ldd	r25, Z+1	; 0x01
    212c:	06 97       	sbiw	r24, 0x06	; 6
    212e:	29 81       	ldd	r18, Y+1	; 0x01
    2130:	3a 81       	ldd	r19, Y+2	; 0x02
    2132:	f9 01       	movw	r30, r18
    2134:	20 81       	ld	r18, Z
    2136:	31 81       	ldd	r19, Z+1	; 0x01
    2138:	26 50       	subi	r18, 0x06	; 6
    213a:	31 09       	sbc	r19, r1
    213c:	f9 01       	movw	r30, r18
    213e:	20 81       	ld	r18, Z
    2140:	22 60       	ori	r18, 0x02	; 2
    2142:	fc 01       	movw	r30, r24
    2144:	20 83       	st	Z, r18
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	9a 81       	ldd	r25, Y+2	; 0x02
    214a:	fc 01       	movw	r30, r24
    214c:	80 81       	ld	r24, Z
    214e:	91 81       	ldd	r25, Z+1	; 0x01
    2150:	8c 01       	movw	r16, r24
    2152:	02 50       	subi	r16, 0x02	; 2
    2154:	11 09       	sbc	r17, r1
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	af 81       	ldd	r26, Y+7	; 0x07
    215c:	b8 85       	ldd	r27, Y+8	; 0x08
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	aa 1f       	adc	r26, r26
    2164:	bb 1f       	adc	r27, r27
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	aa 1f       	adc	r26, r26
    216c:	bb 1f       	adc	r27, r27
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	aa 1f       	adc	r26, r26
    2174:	bb 1f       	adc	r27, r27
    2176:	9c 01       	movw	r18, r24
    2178:	ad 01       	movw	r20, r26
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	a1 ee       	ldi	r26, 0xE1	; 225
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	bc 01       	movw	r22, r24
    2184:	cd 01       	movw	r24, r26
    2186:	0e 94 46 21 	call	0x428c	; 0x428c <__udivmodsi4>
    218a:	da 01       	movw	r26, r20
    218c:	c9 01       	movw	r24, r18
    218e:	81 50       	subi	r24, 0x01	; 1
    2190:	f8 01       	movw	r30, r16
    2192:	80 83       	st	Z, r24
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	fc 01       	movw	r30, r24
    219a:	80 81       	ld	r24, Z
    219c:	91 81       	ldd	r25, Z+1	; 0x01
    219e:	05 97       	sbiw	r24, 0x05	; 5
    21a0:	28 e9       	ldi	r18, 0x98	; 152
    21a2:	fc 01       	movw	r30, r24
    21a4:	20 83       	st	Z, r18
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	9a 81       	ldd	r25, Y+2	; 0x02
    21aa:	fc 01       	movw	r30, r24
    21ac:	80 81       	ld	r24, Z
    21ae:	91 81       	ldd	r25, Z+1	; 0x01
    21b0:	04 97       	sbiw	r24, 0x04	; 4
    21b2:	26 e0       	ldi	r18, 0x06	; 6
    21b4:	fc 01       	movw	r30, r24
    21b6:	20 83       	st	Z, r18
    21b8:	8f e5       	ldi	r24, 0x5F	; 95
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	2b 81       	ldd	r18, Y+3	; 0x03
    21be:	fc 01       	movw	r30, r24
    21c0:	20 83       	st	Z, r18
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	61 96       	adiw	r28, 0x11	; 17
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	1f 91       	pop	r17
    21d8:	0f 91       	pop	r16
    21da:	ef 90       	pop	r14
    21dc:	df 90       	pop	r13
    21de:	cf 90       	pop	r12
    21e0:	bf 90       	pop	r11
    21e2:	af 90       	pop	r10
    21e4:	9f 90       	pop	r9
    21e6:	8f 90       	pop	r8
    21e8:	08 95       	ret

000021ea <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <serial_send_bytes+0x6>
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <serial_send_bytes+0x8>
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <serial_send_bytes+0xa>
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	9b 83       	std	Y+3, r25	; 0x03
    21fa:	8a 83       	std	Y+2, r24	; 0x02
    21fc:	7d 83       	std	Y+5, r23	; 0x05
    21fe:	6c 83       	std	Y+4, r22	; 0x04
    2200:	4e 83       	std	Y+6, r20	; 0x06
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	9b 81       	ldd	r25, Y+3	; 0x03
    2206:	fc 01       	movw	r30, r24
    2208:	82 81       	ldd	r24, Z+2	; 0x02
    220a:	93 81       	ldd	r25, Z+3	; 0x03
    220c:	89 2b       	or	r24, r25
    220e:	a9 f0       	breq	.+42     	; 0x223a <serial_send_bytes+0x50>
    2210:	8e 81       	ldd	r24, Y+6	; 0x06
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	9b 81       	ldd	r25, Y+3	; 0x03
    221a:	fc 01       	movw	r30, r24
    221c:	82 81       	ldd	r24, Z+2	; 0x02
    221e:	93 81       	ldd	r25, Z+3	; 0x03
    2220:	fc 01       	movw	r30, r24
    2222:	82 a1       	ldd	r24, Z+34	; 0x22
    2224:	88 2f       	mov	r24, r24
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	40 e2       	ldi	r20, 0x20	; 32
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	ba 01       	movw	r22, r20
    222e:	68 1b       	sub	r22, r24
    2230:	79 0b       	sbc	r23, r25
    2232:	cb 01       	movw	r24, r22
    2234:	82 17       	cp	r24, r18
    2236:	93 07       	cpc	r25, r19
    2238:	54 f0       	brlt	.+20     	; 0x224e <serial_send_bytes+0x64>
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	9b 81       	ldd	r25, Y+3	; 0x03
    223e:	fc 01       	movw	r30, r24
    2240:	82 81       	ldd	r24, Z+2	; 0x02
    2242:	93 81       	ldd	r25, Z+3	; 0x03
    2244:	89 2b       	or	r24, r25
    2246:	29 f4       	brne	.+10     	; 0x2252 <serial_send_bytes+0x68>
    2248:	8e 81       	ldd	r24, Y+6	; 0x06
    224a:	82 30       	cpi	r24, 0x02	; 2
    224c:	10 f0       	brcs	.+4      	; 0x2252 <serial_send_bytes+0x68>
		return BUFFER_FULL;
    224e:	82 e0       	ldi	r24, 0x02	; 2
    2250:	22 c0       	rjmp	.+68     	; 0x2296 <serial_send_bytes+0xac>
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    2252:	19 82       	std	Y+1, r1	; 0x01
    2254:	14 c0       	rjmp	.+40     	; 0x227e <serial_send_bytes+0x94>
		buffer_put_item(handle->_tx_buf, buf[i]);
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	88 2f       	mov	r24, r24
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	2c 81       	ldd	r18, Y+4	; 0x04
    225e:	3d 81       	ldd	r19, Y+5	; 0x05
    2260:	82 0f       	add	r24, r18
    2262:	93 1f       	adc	r25, r19
    2264:	fc 01       	movw	r30, r24
    2266:	20 81       	ld	r18, Z
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	9b 81       	ldd	r25, Y+3	; 0x03
    226c:	fc 01       	movw	r30, r24
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	62 2f       	mov	r22, r18
    2274:	0e 94 14 0b 	call	0x1628	; 0x1628 <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	8f 5f       	subi	r24, 0xFF	; 255
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	99 81       	ldd	r25, Y+1	; 0x01
    2280:	8e 81       	ldd	r24, Y+6	; 0x06
    2282:	98 17       	cp	r25, r24
    2284:	40 f3       	brcs	.-48     	; 0x2256 <serial_send_bytes+0x6c>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	9b 81       	ldd	r25, Y+3	; 0x03
    228a:	fc 01       	movw	r30, r24
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	0e 94 1b 10 	call	0x2036	; 0x2036 <_serial_tx_int_on>
	return BUFFER_OK;
    2294:	80 e0       	ldi	r24, 0x00	; 0
}
    2296:	26 96       	adiw	r28, 0x06	; 6
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	08 95       	ret

000022a8 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    22a8:	1f 92       	push	r1
    22aa:	0f 92       	push	r0
    22ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    22b0:	0f 92       	push	r0
    22b2:	11 24       	eor	r1, r1
    22b4:	2f 93       	push	r18
    22b6:	3f 93       	push	r19
    22b8:	4f 93       	push	r20
    22ba:	5f 93       	push	r21
    22bc:	6f 93       	push	r22
    22be:	7f 93       	push	r23
    22c0:	8f 93       	push	r24
    22c2:	9f 93       	push	r25
    22c4:	af 93       	push	r26
    22c6:	bf 93       	push	r27
    22c8:	ef 93       	push	r30
    22ca:	ff 93       	push	r31
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	1f 92       	push	r1
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    22d6:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    22da:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    22de:	89 2b       	or	r24, r25
    22e0:	31 f1       	breq	.+76     	; 0x232e <__vector_20+0x86>
		item = UDR0;
    22e2:	86 ec       	ldi	r24, 0xC6	; 198
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	fc 01       	movw	r30, r24
    22e8:	80 81       	ld	r24, Z
    22ea:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    22ec:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    22f0:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    22f4:	fc 01       	movw	r30, r24
    22f6:	84 81       	ldd	r24, Z+4	; 0x04
    22f8:	95 81       	ldd	r25, Z+5	; 0x05
    22fa:	69 81       	ldd	r22, Y+1	; 0x01
    22fc:	0e 94 14 0b 	call	0x1628	; 0x1628 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    2300:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    2304:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    2308:	fc 01       	movw	r30, r24
    230a:	86 81       	ldd	r24, Z+6	; 0x06
    230c:	97 81       	ldd	r25, Z+7	; 0x07
    230e:	89 2b       	or	r24, r25
    2310:	71 f0       	breq	.+28     	; 0x232e <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    2312:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    2316:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    231a:	fc 01       	movw	r30, r24
    231c:	26 81       	ldd	r18, Z+6	; 0x06
    231e:	37 81       	ldd	r19, Z+7	; 0x07
    2320:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    2324:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    2328:	69 81       	ldd	r22, Y+1	; 0x01
    232a:	f9 01       	movw	r30, r18
    232c:	09 95       	icall
		}
	}
}
    232e:	00 00       	nop
    2330:	0f 90       	pop	r0
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	ff 91       	pop	r31
    2338:	ef 91       	pop	r30
    233a:	bf 91       	pop	r27
    233c:	af 91       	pop	r26
    233e:	9f 91       	pop	r25
    2340:	8f 91       	pop	r24
    2342:	7f 91       	pop	r23
    2344:	6f 91       	pop	r22
    2346:	5f 91       	pop	r21
    2348:	4f 91       	pop	r20
    234a:	3f 91       	pop	r19
    234c:	2f 91       	pop	r18
    234e:	0f 90       	pop	r0
    2350:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2354:	0f 90       	pop	r0
    2356:	1f 90       	pop	r1
    2358:	18 95       	reti

0000235a <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    235a:	1f 92       	push	r1
    235c:	0f 92       	push	r0
    235e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2362:	0f 92       	push	r0
    2364:	11 24       	eor	r1, r1
    2366:	2f 93       	push	r18
    2368:	3f 93       	push	r19
    236a:	4f 93       	push	r20
    236c:	5f 93       	push	r21
    236e:	6f 93       	push	r22
    2370:	7f 93       	push	r23
    2372:	8f 93       	push	r24
    2374:	9f 93       	push	r25
    2376:	af 93       	push	r26
    2378:	bf 93       	push	r27
    237a:	ef 93       	push	r30
    237c:	ff 93       	push	r31
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	1f 92       	push	r1
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    2388:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    238c:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    2390:	89 2b       	or	r24, r25
    2392:	f9 f0       	breq	.+62     	; 0x23d2 <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    2394:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    2398:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    239c:	fc 01       	movw	r30, r24
    239e:	82 81       	ldd	r24, Z+2	; 0x02
    23a0:	93 81       	ldd	r25, Z+3	; 0x03
    23a2:	9e 01       	movw	r18, r28
    23a4:	2f 5f       	subi	r18, 0xFF	; 255
    23a6:	3f 4f       	sbci	r19, 0xFF	; 255
    23a8:	b9 01       	movw	r22, r18
    23aa:	0e 94 cc 0a 	call	0x1598	; 0x1598 <buffer_get_item>
    23ae:	88 23       	and	r24, r24
    23b0:	31 f4       	brne	.+12     	; 0x23be <__vector_21+0x64>
			UDR0 = item;
    23b2:	86 ec       	ldi	r24, 0xC6	; 198
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	29 81       	ldd	r18, Y+1	; 0x01
    23b8:	fc 01       	movw	r30, r24
    23ba:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    23bc:	13 c0       	rjmp	.+38     	; 0x23e4 <__vector_21+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
			UDR0 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    23be:	81 ec       	ldi	r24, 0xC1	; 193
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	21 ec       	ldi	r18, 0xC1	; 193
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	f9 01       	movw	r30, r18
    23c8:	20 81       	ld	r18, Z
    23ca:	2f 7d       	andi	r18, 0xDF	; 223
    23cc:	fc 01       	movw	r30, r24
    23ce:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    23d0:	09 c0       	rjmp	.+18     	; 0x23e4 <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    23d2:	81 ec       	ldi	r24, 0xC1	; 193
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	21 ec       	ldi	r18, 0xC1	; 193
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	f9 01       	movw	r30, r18
    23dc:	20 81       	ld	r18, Z
    23de:	2f 7d       	andi	r18, 0xDF	; 223
    23e0:	fc 01       	movw	r30, r24
    23e2:	20 83       	st	Z, r18
	}
}
    23e4:	00 00       	nop
    23e6:	0f 90       	pop	r0
    23e8:	df 91       	pop	r29
    23ea:	cf 91       	pop	r28
    23ec:	ff 91       	pop	r31
    23ee:	ef 91       	pop	r30
    23f0:	bf 91       	pop	r27
    23f2:	af 91       	pop	r26
    23f4:	9f 91       	pop	r25
    23f6:	8f 91       	pop	r24
    23f8:	7f 91       	pop	r23
    23fa:	6f 91       	pop	r22
    23fc:	5f 91       	pop	r21
    23fe:	4f 91       	pop	r20
    2400:	3f 91       	pop	r19
    2402:	2f 91       	pop	r18
    2404:	0f 90       	pop	r0
    2406:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    240a:	0f 90       	pop	r0
    240c:	1f 90       	pop	r1
    240e:	18 95       	reti

00002410 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2418:	0f 92       	push	r0
    241a:	11 24       	eor	r1, r1
    241c:	2f 93       	push	r18
    241e:	3f 93       	push	r19
    2420:	4f 93       	push	r20
    2422:	5f 93       	push	r21
    2424:	6f 93       	push	r22
    2426:	7f 93       	push	r23
    2428:	8f 93       	push	r24
    242a:	9f 93       	push	r25
    242c:	af 93       	push	r26
    242e:	bf 93       	push	r27
    2430:	ef 93       	push	r30
    2432:	ff 93       	push	r31
    2434:	cf 93       	push	r28
    2436:	df 93       	push	r29
    2438:	1f 92       	push	r1
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    243e:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    2442:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    2446:	89 2b       	or	r24, r25
    2448:	31 f1       	breq	.+76     	; 0x2496 <__vector_28+0x86>
		item = UDR1;
    244a:	8e ec       	ldi	r24, 0xCE	; 206
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	fc 01       	movw	r30, r24
    2450:	80 81       	ld	r24, Z
    2452:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    2454:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    2458:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    245c:	fc 01       	movw	r30, r24
    245e:	84 81       	ldd	r24, Z+4	; 0x04
    2460:	95 81       	ldd	r25, Z+5	; 0x05
    2462:	69 81       	ldd	r22, Y+1	; 0x01
    2464:	0e 94 14 0b 	call	0x1628	; 0x1628 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    2468:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    246c:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    2470:	fc 01       	movw	r30, r24
    2472:	86 81       	ldd	r24, Z+6	; 0x06
    2474:	97 81       	ldd	r25, Z+7	; 0x07
    2476:	89 2b       	or	r24, r25
    2478:	71 f0       	breq	.+28     	; 0x2496 <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    247a:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    247e:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    2482:	fc 01       	movw	r30, r24
    2484:	26 81       	ldd	r18, Z+6	; 0x06
    2486:	37 81       	ldd	r19, Z+7	; 0x07
    2488:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    248c:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    2490:	69 81       	ldd	r22, Y+1	; 0x01
    2492:	f9 01       	movw	r30, r18
    2494:	09 95       	icall
		}
	}
}
    2496:	00 00       	nop
    2498:	0f 90       	pop	r0
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	ff 91       	pop	r31
    24a0:	ef 91       	pop	r30
    24a2:	bf 91       	pop	r27
    24a4:	af 91       	pop	r26
    24a6:	9f 91       	pop	r25
    24a8:	8f 91       	pop	r24
    24aa:	7f 91       	pop	r23
    24ac:	6f 91       	pop	r22
    24ae:	5f 91       	pop	r21
    24b0:	4f 91       	pop	r20
    24b2:	3f 91       	pop	r19
    24b4:	2f 91       	pop	r18
    24b6:	0f 90       	pop	r0
    24b8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    24bc:	0f 90       	pop	r0
    24be:	1f 90       	pop	r1
    24c0:	18 95       	reti

000024c2 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    24c2:	1f 92       	push	r1
    24c4:	0f 92       	push	r0
    24c6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    24ca:	0f 92       	push	r0
    24cc:	11 24       	eor	r1, r1
    24ce:	2f 93       	push	r18
    24d0:	3f 93       	push	r19
    24d2:	4f 93       	push	r20
    24d4:	5f 93       	push	r21
    24d6:	6f 93       	push	r22
    24d8:	7f 93       	push	r23
    24da:	8f 93       	push	r24
    24dc:	9f 93       	push	r25
    24de:	af 93       	push	r26
    24e0:	bf 93       	push	r27
    24e2:	ef 93       	push	r30
    24e4:	ff 93       	push	r31
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	1f 92       	push	r1
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    24f0:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    24f4:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    24f8:	89 2b       	or	r24, r25
    24fa:	f9 f0       	breq	.+62     	; 0x253a <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    24fc:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    2500:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    2504:	fc 01       	movw	r30, r24
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	9e 01       	movw	r18, r28
    250c:	2f 5f       	subi	r18, 0xFF	; 255
    250e:	3f 4f       	sbci	r19, 0xFF	; 255
    2510:	b9 01       	movw	r22, r18
    2512:	0e 94 cc 0a 	call	0x1598	; 0x1598 <buffer_get_item>
    2516:	88 23       	and	r24, r24
    2518:	31 f4       	brne	.+12     	; 0x2526 <__vector_29+0x64>
			UDR1 = item;
    251a:	8e ec       	ldi	r24, 0xCE	; 206
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	29 81       	ldd	r18, Y+1	; 0x01
    2520:	fc 01       	movw	r30, r24
    2522:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    2524:	13 c0       	rjmp	.+38     	; 0x254c <__vector_29+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
			UDR1 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    2526:	89 ec       	ldi	r24, 0xC9	; 201
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	29 ec       	ldi	r18, 0xC9	; 201
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	f9 01       	movw	r30, r18
    2530:	20 81       	ld	r18, Z
    2532:	2f 7d       	andi	r18, 0xDF	; 223
    2534:	fc 01       	movw	r30, r24
    2536:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    2538:	09 c0       	rjmp	.+18     	; 0x254c <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    253a:	89 ec       	ldi	r24, 0xC9	; 201
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	29 ec       	ldi	r18, 0xC9	; 201
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	f9 01       	movw	r30, r18
    2544:	20 81       	ld	r18, Z
    2546:	2f 7d       	andi	r18, 0xDF	; 223
    2548:	fc 01       	movw	r30, r24
    254a:	20 83       	st	Z, r18
	}
}
    254c:	00 00       	nop
    254e:	0f 90       	pop	r0
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	ff 91       	pop	r31
    2556:	ef 91       	pop	r30
    2558:	bf 91       	pop	r27
    255a:	af 91       	pop	r26
    255c:	9f 91       	pop	r25
    255e:	8f 91       	pop	r24
    2560:	7f 91       	pop	r23
    2562:	6f 91       	pop	r22
    2564:	5f 91       	pop	r21
    2566:	4f 91       	pop	r20
    2568:	3f 91       	pop	r19
    256a:	2f 91       	pop	r18
    256c:	0f 90       	pop	r0
    256e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2572:	0f 90       	pop	r0
    2574:	1f 90       	pop	r1
    2576:	18 95       	reti

00002578 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	00 d0       	rcall	.+0      	; 0x257e <xQueueGenericReset+0x6>
    257e:	00 d0       	rcall	.+0      	; 0x2580 <xQueueGenericReset+0x8>
    2580:	1f 92       	push	r1
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	9c 83       	std	Y+4, r25	; 0x04
    2588:	8b 83       	std	Y+3, r24	; 0x03
    258a:	6d 83       	std	Y+5, r22	; 0x05
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	9c 81       	ldd	r25, Y+4	; 0x04
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	89 83       	std	Y+1, r24	; 0x01
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	0f 92       	push	r0
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	9a 81       	ldd	r25, Y+2	; 0x02
    259e:	fc 01       	movw	r30, r24
    25a0:	80 81       	ld	r24, Z
    25a2:	91 81       	ldd	r25, Z+1	; 0x01
    25a4:	29 81       	ldd	r18, Y+1	; 0x01
    25a6:	3a 81       	ldd	r19, Y+2	; 0x02
    25a8:	f9 01       	movw	r30, r18
    25aa:	23 8d       	ldd	r18, Z+27	; 0x1b
    25ac:	42 2f       	mov	r20, r18
    25ae:	50 e0       	ldi	r21, 0x00	; 0
    25b0:	29 81       	ldd	r18, Y+1	; 0x01
    25b2:	3a 81       	ldd	r19, Y+2	; 0x02
    25b4:	f9 01       	movw	r30, r18
    25b6:	24 8d       	ldd	r18, Z+28	; 0x1c
    25b8:	22 2f       	mov	r18, r18
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	42 9f       	mul	r20, r18
    25be:	b0 01       	movw	r22, r0
    25c0:	43 9f       	mul	r20, r19
    25c2:	70 0d       	add	r23, r0
    25c4:	52 9f       	mul	r21, r18
    25c6:	70 0d       	add	r23, r0
    25c8:	11 24       	eor	r1, r1
    25ca:	9b 01       	movw	r18, r22
    25cc:	28 0f       	add	r18, r24
    25ce:	39 1f       	adc	r19, r25
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	9a 81       	ldd	r25, Y+2	; 0x02
    25d4:	fc 01       	movw	r30, r24
    25d6:	33 83       	std	Z+3, r19	; 0x03
    25d8:	22 83       	std	Z+2, r18	; 0x02
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	fc 01       	movw	r30, r24
    25e0:	12 8e       	std	Z+26, r1	; 0x1a
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	9a 81       	ldd	r25, Y+2	; 0x02
    25e6:	fc 01       	movw	r30, r24
    25e8:	20 81       	ld	r18, Z
    25ea:	31 81       	ldd	r19, Z+1	; 0x01
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	9a 81       	ldd	r25, Y+2	; 0x02
    25f0:	fc 01       	movw	r30, r24
    25f2:	35 83       	std	Z+5, r19	; 0x05
    25f4:	24 83       	std	Z+4, r18	; 0x04
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	9a 81       	ldd	r25, Y+2	; 0x02
    25fa:	fc 01       	movw	r30, r24
    25fc:	80 81       	ld	r24, Z
    25fe:	91 81       	ldd	r25, Z+1	; 0x01
    2600:	29 81       	ldd	r18, Y+1	; 0x01
    2602:	3a 81       	ldd	r19, Y+2	; 0x02
    2604:	f9 01       	movw	r30, r18
    2606:	23 8d       	ldd	r18, Z+27	; 0x1b
    2608:	22 2f       	mov	r18, r18
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	a9 01       	movw	r20, r18
    260e:	41 50       	subi	r20, 0x01	; 1
    2610:	51 09       	sbc	r21, r1
    2612:	29 81       	ldd	r18, Y+1	; 0x01
    2614:	3a 81       	ldd	r19, Y+2	; 0x02
    2616:	f9 01       	movw	r30, r18
    2618:	24 8d       	ldd	r18, Z+28	; 0x1c
    261a:	22 2f       	mov	r18, r18
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	42 9f       	mul	r20, r18
    2620:	b0 01       	movw	r22, r0
    2622:	43 9f       	mul	r20, r19
    2624:	70 0d       	add	r23, r0
    2626:	52 9f       	mul	r21, r18
    2628:	70 0d       	add	r23, r0
    262a:	11 24       	eor	r1, r1
    262c:	9b 01       	movw	r18, r22
    262e:	28 0f       	add	r18, r24
    2630:	39 1f       	adc	r19, r25
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	9a 81       	ldd	r25, Y+2	; 0x02
    2636:	fc 01       	movw	r30, r24
    2638:	37 83       	std	Z+7, r19	; 0x07
    263a:	26 83       	std	Z+6, r18	; 0x06
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	9a 81       	ldd	r25, Y+2	; 0x02
    2640:	2f ef       	ldi	r18, 0xFF	; 255
    2642:	fc 01       	movw	r30, r24
    2644:	25 8f       	std	Z+29, r18	; 0x1d
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	9a 81       	ldd	r25, Y+2	; 0x02
    264a:	2f ef       	ldi	r18, 0xFF	; 255
    264c:	fc 01       	movw	r30, r24
    264e:	26 8f       	std	Z+30, r18	; 0x1e
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	88 23       	and	r24, r24
    2654:	81 f4       	brne	.+32     	; 0x2676 <xQueueGenericReset+0xfe>
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
    265a:	fc 01       	movw	r30, r24
    265c:	80 85       	ldd	r24, Z+8	; 0x08
    265e:	88 23       	and	r24, r24
    2660:	a1 f0       	breq	.+40     	; 0x268a <xQueueGenericReset+0x112>
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	08 96       	adiw	r24, 0x08	; 8
    2668:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <xTaskRemoveFromEventList>
    266c:	88 23       	and	r24, r24
    266e:	69 f0       	breq	.+26     	; 0x268a <xQueueGenericReset+0x112>
    2670:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <vPortYield>
    2674:	0a c0       	rjmp	.+20     	; 0x268a <xQueueGenericReset+0x112>
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	9a 81       	ldd	r25, Y+2	; 0x02
    267a:	08 96       	adiw	r24, 0x08	; 8
    267c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <vListInitialise>
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	9a 81       	ldd	r25, Y+2	; 0x02
    2684:	41 96       	adiw	r24, 0x11	; 17
    2686:	0e 94 57 0b 	call	0x16ae	; 0x16ae <vListInitialise>
    268a:	0f 90       	pop	r0
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	08 95       	ret

000026a0 <xQueueGenericCreate>:
    26a0:	0f 93       	push	r16
    26a2:	1f 93       	push	r17
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	29 97       	sbiw	r28, 0x09	; 9
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	8f 83       	std	Y+7, r24	; 0x07
    26ba:	68 87       	std	Y+8, r22	; 0x08
    26bc:	49 87       	std	Y+9, r20	; 0x09
    26be:	88 85       	ldd	r24, Y+8	; 0x08
    26c0:	88 23       	and	r24, r24
    26c2:	19 f4       	brne	.+6      	; 0x26ca <xQueueGenericCreate+0x2a>
    26c4:	1a 82       	std	Y+2, r1	; 0x02
    26c6:	19 82       	std	Y+1, r1	; 0x01
    26c8:	0f c0       	rjmp	.+30     	; 0x26e8 <xQueueGenericCreate+0x48>
    26ca:	8f 81       	ldd	r24, Y+7	; 0x07
    26cc:	48 2f       	mov	r20, r24
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	88 85       	ldd	r24, Y+8	; 0x08
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	42 9f       	mul	r20, r18
    26d8:	c0 01       	movw	r24, r0
    26da:	43 9f       	mul	r20, r19
    26dc:	90 0d       	add	r25, r0
    26de:	52 9f       	mul	r21, r18
    26e0:	90 0d       	add	r25, r0
    26e2:	11 24       	eor	r1, r1
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	81 96       	adiw	r24, 0x21	; 33
    26ee:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <pvPortMalloc>
    26f2:	9c 83       	std	Y+4, r25	; 0x04
    26f4:	8b 83       	std	Y+3, r24	; 0x03
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	9c 81       	ldd	r25, Y+4	; 0x04
    26fa:	89 2b       	or	r24, r25
    26fc:	81 f0       	breq	.+32     	; 0x271e <xQueueGenericCreate+0x7e>
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	9c 81       	ldd	r25, Y+4	; 0x04
    2702:	81 96       	adiw	r24, 0x21	; 33
    2704:	9e 83       	std	Y+6, r25	; 0x06
    2706:	8d 83       	std	Y+5, r24	; 0x05
    2708:	2b 81       	ldd	r18, Y+3	; 0x03
    270a:	3c 81       	ldd	r19, Y+4	; 0x04
    270c:	8d 81       	ldd	r24, Y+5	; 0x05
    270e:	9e 81       	ldd	r25, Y+6	; 0x06
    2710:	89 01       	movw	r16, r18
    2712:	29 85       	ldd	r18, Y+9	; 0x09
    2714:	ac 01       	movw	r20, r24
    2716:	68 85       	ldd	r22, Y+8	; 0x08
    2718:	8f 81       	ldd	r24, Y+7	; 0x07
    271a:	0e 94 9c 13 	call	0x2738	; 0x2738 <prvInitialiseNewQueue>
    271e:	8b 81       	ldd	r24, Y+3	; 0x03
    2720:	9c 81       	ldd	r25, Y+4	; 0x04
    2722:	29 96       	adiw	r28, 0x09	; 9
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	1f 91       	pop	r17
    2734:	0f 91       	pop	r16
    2736:	08 95       	ret

00002738 <prvInitialiseNewQueue>:
    2738:	0f 93       	push	r16
    273a:	1f 93       	push	r17
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	27 97       	sbiw	r28, 0x07	; 7
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	6a 83       	std	Y+2, r22	; 0x02
    2754:	5c 83       	std	Y+4, r21	; 0x04
    2756:	4b 83       	std	Y+3, r20	; 0x03
    2758:	2d 83       	std	Y+5, r18	; 0x05
    275a:	1f 83       	std	Y+7, r17	; 0x07
    275c:	0e 83       	std	Y+6, r16	; 0x06
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	88 23       	and	r24, r24
    2762:	41 f4       	brne	.+16     	; 0x2774 <prvInitialiseNewQueue+0x3c>
    2764:	8e 81       	ldd	r24, Y+6	; 0x06
    2766:	9f 81       	ldd	r25, Y+7	; 0x07
    2768:	2e 81       	ldd	r18, Y+6	; 0x06
    276a:	3f 81       	ldd	r19, Y+7	; 0x07
    276c:	fc 01       	movw	r30, r24
    276e:	31 83       	std	Z+1, r19	; 0x01
    2770:	20 83       	st	Z, r18
    2772:	07 c0       	rjmp	.+14     	; 0x2782 <prvInitialiseNewQueue+0x4a>
    2774:	8e 81       	ldd	r24, Y+6	; 0x06
    2776:	9f 81       	ldd	r25, Y+7	; 0x07
    2778:	2b 81       	ldd	r18, Y+3	; 0x03
    277a:	3c 81       	ldd	r19, Y+4	; 0x04
    277c:	fc 01       	movw	r30, r24
    277e:	31 83       	std	Z+1, r19	; 0x01
    2780:	20 83       	st	Z, r18
    2782:	8e 81       	ldd	r24, Y+6	; 0x06
    2784:	9f 81       	ldd	r25, Y+7	; 0x07
    2786:	29 81       	ldd	r18, Y+1	; 0x01
    2788:	fc 01       	movw	r30, r24
    278a:	23 8f       	std	Z+27, r18	; 0x1b
    278c:	8e 81       	ldd	r24, Y+6	; 0x06
    278e:	9f 81       	ldd	r25, Y+7	; 0x07
    2790:	2a 81       	ldd	r18, Y+2	; 0x02
    2792:	fc 01       	movw	r30, r24
    2794:	24 8f       	std	Z+28, r18	; 0x1c
    2796:	8e 81       	ldd	r24, Y+6	; 0x06
    2798:	9f 81       	ldd	r25, Y+7	; 0x07
    279a:	61 e0       	ldi	r22, 0x01	; 1
    279c:	0e 94 bc 12 	call	0x2578	; 0x2578 <xQueueGenericReset>
    27a0:	8e 81       	ldd	r24, Y+6	; 0x06
    27a2:	9f 81       	ldd	r25, Y+7	; 0x07
    27a4:	2d 81       	ldd	r18, Y+5	; 0x05
    27a6:	fc 01       	movw	r30, r24
    27a8:	20 a3       	std	Z+32, r18	; 0x20
    27aa:	00 00       	nop
    27ac:	27 96       	adiw	r28, 0x07	; 7
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	08 95       	ret

000027c2 <prvInitialiseMutex>:
    27c2:	cf 93       	push	r28
    27c4:	df 93       	push	r29
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <prvInitialiseMutex+0x6>
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	9a 83       	std	Y+2, r25	; 0x02
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	9a 81       	ldd	r25, Y+2	; 0x02
    27d4:	89 2b       	or	r24, r25
    27d6:	b9 f0       	breq	.+46     	; 0x2806 <prvInitialiseMutex+0x44>
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	9a 81       	ldd	r25, Y+2	; 0x02
    27dc:	fc 01       	movw	r30, r24
    27de:	13 82       	std	Z+3, r1	; 0x03
    27e0:	12 82       	std	Z+2, r1	; 0x02
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	9a 81       	ldd	r25, Y+2	; 0x02
    27e6:	fc 01       	movw	r30, r24
    27e8:	11 82       	std	Z+1, r1	; 0x01
    27ea:	10 82       	st	Z, r1
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	9a 81       	ldd	r25, Y+2	; 0x02
    27f0:	fc 01       	movw	r30, r24
    27f2:	16 82       	std	Z+6, r1	; 0x06
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	9a 81       	ldd	r25, Y+2	; 0x02
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	40 e0       	ldi	r20, 0x00	; 0
    27fc:	50 e0       	ldi	r21, 0x00	; 0
    27fe:	60 e0       	ldi	r22, 0x00	; 0
    2800:	70 e0       	ldi	r23, 0x00	; 0
    2802:	0e 94 29 14 	call	0x2852	; 0x2852 <xQueueGenericSend>
    2806:	00 00       	nop
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	08 95       	ret

00002812 <xQueueCreateMutex>:
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	00 d0       	rcall	.+0      	; 0x2818 <xQueueCreateMutex+0x6>
    2818:	00 d0       	rcall	.+0      	; 0x281a <xQueueCreateMutex+0x8>
    281a:	1f 92       	push	r1
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	8d 83       	std	Y+5, r24	; 0x05
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	89 83       	std	Y+1, r24	; 0x01
    2826:	1a 82       	std	Y+2, r1	; 0x02
    2828:	4d 81       	ldd	r20, Y+5	; 0x05
    282a:	6a 81       	ldd	r22, Y+2	; 0x02
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	0e 94 50 13 	call	0x26a0	; 0x26a0 <xQueueGenericCreate>
    2832:	9c 83       	std	Y+4, r25	; 0x04
    2834:	8b 83       	std	Y+3, r24	; 0x03
    2836:	8b 81       	ldd	r24, Y+3	; 0x03
    2838:	9c 81       	ldd	r25, Y+4	; 0x04
    283a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <prvInitialiseMutex>
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	9c 81       	ldd	r25, Y+4	; 0x04
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	df 91       	pop	r29
    284e:	cf 91       	pop	r28
    2850:	08 95       	ret

00002852 <xQueueGenericSend>:
    2852:	cf 93       	push	r28
    2854:	df 93       	push	r29
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	2e 97       	sbiw	r28, 0x0e	; 14
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	99 87       	std	Y+9, r25	; 0x09
    2868:	88 87       	std	Y+8, r24	; 0x08
    286a:	7b 87       	std	Y+11, r23	; 0x0b
    286c:	6a 87       	std	Y+10, r22	; 0x0a
    286e:	5d 87       	std	Y+13, r21	; 0x0d
    2870:	4c 87       	std	Y+12, r20	; 0x0c
    2872:	2e 87       	std	Y+14, r18	; 0x0e
    2874:	19 82       	std	Y+1, r1	; 0x01
    2876:	88 85       	ldd	r24, Y+8	; 0x08
    2878:	99 85       	ldd	r25, Y+9	; 0x09
    287a:	9b 83       	std	Y+3, r25	; 0x03
    287c:	8a 83       	std	Y+2, r24	; 0x02
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	0f 92       	push	r0
    2884:	8a 81       	ldd	r24, Y+2	; 0x02
    2886:	9b 81       	ldd	r25, Y+3	; 0x03
    2888:	fc 01       	movw	r30, r24
    288a:	22 8d       	ldd	r18, Z+26	; 0x1a
    288c:	8a 81       	ldd	r24, Y+2	; 0x02
    288e:	9b 81       	ldd	r25, Y+3	; 0x03
    2890:	fc 01       	movw	r30, r24
    2892:	83 8d       	ldd	r24, Z+27	; 0x1b
    2894:	28 17       	cp	r18, r24
    2896:	18 f0       	brcs	.+6      	; 0x289e <xQueueGenericSend+0x4c>
    2898:	8e 85       	ldd	r24, Y+14	; 0x0e
    289a:	82 30       	cpi	r24, 0x02	; 2
    289c:	11 f5       	brne	.+68     	; 0x28e2 <xQueueGenericSend+0x90>
    289e:	2a 85       	ldd	r18, Y+10	; 0x0a
    28a0:	3b 85       	ldd	r19, Y+11	; 0x0b
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	9b 81       	ldd	r25, Y+3	; 0x03
    28a6:	4e 85       	ldd	r20, Y+14	; 0x0e
    28a8:	b9 01       	movw	r22, r18
    28aa:	0e 94 39 15 	call	0x2a72	; 0x2a72 <prvCopyDataToQueue>
    28ae:	8c 83       	std	Y+4, r24	; 0x04
    28b0:	8a 81       	ldd	r24, Y+2	; 0x02
    28b2:	9b 81       	ldd	r25, Y+3	; 0x03
    28b4:	fc 01       	movw	r30, r24
    28b6:	81 89       	ldd	r24, Z+17	; 0x11
    28b8:	88 23       	and	r24, r24
    28ba:	51 f0       	breq	.+20     	; 0x28d0 <xQueueGenericSend+0x7e>
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	9b 81       	ldd	r25, Y+3	; 0x03
    28c0:	41 96       	adiw	r24, 0x11	; 17
    28c2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <xTaskRemoveFromEventList>
    28c6:	88 23       	and	r24, r24
    28c8:	41 f0       	breq	.+16     	; 0x28da <xQueueGenericSend+0x88>
    28ca:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <vPortYield>
    28ce:	05 c0       	rjmp	.+10     	; 0x28da <xQueueGenericSend+0x88>
    28d0:	8c 81       	ldd	r24, Y+4	; 0x04
    28d2:	88 23       	and	r24, r24
    28d4:	11 f0       	breq	.+4      	; 0x28da <xQueueGenericSend+0x88>
    28d6:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <vPortYield>
    28da:	0f 90       	pop	r0
    28dc:	0f be       	out	0x3f, r0	; 63
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	60 c0       	rjmp	.+192    	; 0x29a2 <xQueueGenericSend+0x150>
    28e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    28e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    28e6:	89 2b       	or	r24, r25
    28e8:	21 f4       	brne	.+8      	; 0x28f2 <xQueueGenericSend+0xa0>
    28ea:	0f 90       	pop	r0
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	58 c0       	rjmp	.+176    	; 0x29a2 <xQueueGenericSend+0x150>
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	88 23       	and	r24, r24
    28f6:	31 f4       	brne	.+12     	; 0x2904 <xQueueGenericSend+0xb2>
    28f8:	ce 01       	movw	r24, r28
    28fa:	05 96       	adiw	r24, 0x05	; 5
    28fc:	0e 94 65 1b 	call	0x36ca	; 0x36ca <vTaskSetTimeOutState>
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	89 83       	std	Y+1, r24	; 0x01
    2904:	0f 90       	pop	r0
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	0e 94 be 18 	call	0x317c	; 0x317c <vTaskSuspendAll>
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	0f 92       	push	r0
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	9b 81       	ldd	r25, Y+3	; 0x03
    2916:	fc 01       	movw	r30, r24
    2918:	85 8d       	ldd	r24, Z+29	; 0x1d
    291a:	8f 3f       	cpi	r24, 0xFF	; 255
    291c:	21 f4       	brne	.+8      	; 0x2926 <xQueueGenericSend+0xd4>
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	9b 81       	ldd	r25, Y+3	; 0x03
    2922:	fc 01       	movw	r30, r24
    2924:	15 8e       	std	Z+29, r1	; 0x1d
    2926:	8a 81       	ldd	r24, Y+2	; 0x02
    2928:	9b 81       	ldd	r25, Y+3	; 0x03
    292a:	fc 01       	movw	r30, r24
    292c:	86 8d       	ldd	r24, Z+30	; 0x1e
    292e:	8f 3f       	cpi	r24, 0xFF	; 255
    2930:	21 f4       	brne	.+8      	; 0x293a <xQueueGenericSend+0xe8>
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	9b 81       	ldd	r25, Y+3	; 0x03
    2936:	fc 01       	movw	r30, r24
    2938:	16 8e       	std	Z+30, r1	; 0x1e
    293a:	0f 90       	pop	r0
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	9e 01       	movw	r18, r28
    2940:	24 5f       	subi	r18, 0xF4	; 244
    2942:	3f 4f       	sbci	r19, 0xFF	; 255
    2944:	ce 01       	movw	r24, r28
    2946:	05 96       	adiw	r24, 0x05	; 5
    2948:	b9 01       	movw	r22, r18
    294a:	0e 94 81 1b 	call	0x3702	; 0x3702 <xTaskCheckForTimeOut>
    294e:	88 23       	and	r24, r24
    2950:	09 f5       	brne	.+66     	; 0x2994 <xQueueGenericSend+0x142>
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	9b 81       	ldd	r25, Y+3	; 0x03
    2956:	0e 94 67 16 	call	0x2cce	; 0x2cce <prvIsQueueFull>
    295a:	88 23       	and	r24, r24
    295c:	a1 f0       	breq	.+40     	; 0x2986 <xQueueGenericSend+0x134>
    295e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2960:	3d 85       	ldd	r19, Y+13	; 0x0d
    2962:	8a 81       	ldd	r24, Y+2	; 0x02
    2964:	9b 81       	ldd	r25, Y+3	; 0x03
    2966:	08 96       	adiw	r24, 0x08	; 8
    2968:	b9 01       	movw	r22, r18
    296a:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <vTaskPlaceOnEventList>
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	9b 81       	ldd	r25, Y+3	; 0x03
    2972:	0e 94 09 16 	call	0x2c12	; 0x2c12 <prvUnlockQueue>
    2976:	0e 94 cb 18 	call	0x3196	; 0x3196 <xTaskResumeAll>
    297a:	88 23       	and	r24, r24
    297c:	09 f0       	breq	.+2      	; 0x2980 <xQueueGenericSend+0x12e>
    297e:	7f cf       	rjmp	.-258    	; 0x287e <xQueueGenericSend+0x2c>
    2980:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <vPortYield>
    2984:	7c cf       	rjmp	.-264    	; 0x287e <xQueueGenericSend+0x2c>
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	9b 81       	ldd	r25, Y+3	; 0x03
    298a:	0e 94 09 16 	call	0x2c12	; 0x2c12 <prvUnlockQueue>
    298e:	0e 94 cb 18 	call	0x3196	; 0x3196 <xTaskResumeAll>
    2992:	75 cf       	rjmp	.-278    	; 0x287e <xQueueGenericSend+0x2c>
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	9b 81       	ldd	r25, Y+3	; 0x03
    2998:	0e 94 09 16 	call	0x2c12	; 0x2c12 <prvUnlockQueue>
    299c:	0e 94 cb 18 	call	0x3196	; 0x3196 <xTaskResumeAll>
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	2e 96       	adiw	r28, 0x0e	; 14
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	08 95       	ret

000029b4 <xQueueGenericSendFromISR>:
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	2c 97       	sbiw	r28, 0x0c	; 12
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	9f 83       	std	Y+7, r25	; 0x07
    29ca:	8e 83       	std	Y+6, r24	; 0x06
    29cc:	79 87       	std	Y+9, r23	; 0x09
    29ce:	68 87       	std	Y+8, r22	; 0x08
    29d0:	5b 87       	std	Y+11, r21	; 0x0b
    29d2:	4a 87       	std	Y+10, r20	; 0x0a
    29d4:	2c 87       	std	Y+12, r18	; 0x0c
    29d6:	8e 81       	ldd	r24, Y+6	; 0x06
    29d8:	9f 81       	ldd	r25, Y+7	; 0x07
    29da:	9b 83       	std	Y+3, r25	; 0x03
    29dc:	8a 83       	std	Y+2, r24	; 0x02
    29de:	1c 82       	std	Y+4, r1	; 0x04
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	9b 81       	ldd	r25, Y+3	; 0x03
    29e4:	fc 01       	movw	r30, r24
    29e6:	22 8d       	ldd	r18, Z+26	; 0x1a
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	9b 81       	ldd	r25, Y+3	; 0x03
    29ec:	fc 01       	movw	r30, r24
    29ee:	83 8d       	ldd	r24, Z+27	; 0x1b
    29f0:	28 17       	cp	r18, r24
    29f2:	18 f0       	brcs	.+6      	; 0x29fa <xQueueGenericSendFromISR+0x46>
    29f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    29f6:	82 30       	cpi	r24, 0x02	; 2
    29f8:	89 f5       	brne	.+98     	; 0x2a5c <xQueueGenericSendFromISR+0xa8>
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	9b 81       	ldd	r25, Y+3	; 0x03
    29fe:	fc 01       	movw	r30, r24
    2a00:	86 8d       	ldd	r24, Z+30	; 0x1e
    2a02:	8d 83       	std	Y+5, r24	; 0x05
    2a04:	28 85       	ldd	r18, Y+8	; 0x08
    2a06:	39 85       	ldd	r19, Y+9	; 0x09
    2a08:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a0c:	4c 85       	ldd	r20, Y+12	; 0x0c
    2a0e:	b9 01       	movw	r22, r18
    2a10:	0e 94 39 15 	call	0x2a72	; 0x2a72 <prvCopyDataToQueue>
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	8f 3f       	cpi	r24, 0xFF	; 255
    2a18:	b9 f4       	brne	.+46     	; 0x2a48 <xQueueGenericSendFromISR+0x94>
    2a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1e:	fc 01       	movw	r30, r24
    2a20:	81 89       	ldd	r24, Z+17	; 0x11
    2a22:	88 23       	and	r24, r24
    2a24:	c1 f0       	breq	.+48     	; 0x2a56 <xQueueGenericSendFromISR+0xa2>
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2a:	41 96       	adiw	r24, 0x11	; 17
    2a2c:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <xTaskRemoveFromEventList>
    2a30:	88 23       	and	r24, r24
    2a32:	89 f0       	breq	.+34     	; 0x2a56 <xQueueGenericSendFromISR+0xa2>
    2a34:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a36:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a38:	89 2b       	or	r24, r25
    2a3a:	69 f0       	breq	.+26     	; 0x2a56 <xQueueGenericSendFromISR+0xa2>
    2a3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a40:	21 e0       	ldi	r18, 0x01	; 1
    2a42:	fc 01       	movw	r30, r24
    2a44:	20 83       	st	Z, r18
    2a46:	07 c0       	rjmp	.+14     	; 0x2a56 <xQueueGenericSendFromISR+0xa2>
    2a48:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4a:	8f 5f       	subi	r24, 0xFF	; 255
    2a4c:	28 2f       	mov	r18, r24
    2a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a50:	9b 81       	ldd	r25, Y+3	; 0x03
    2a52:	fc 01       	movw	r30, r24
    2a54:	26 8f       	std	Z+30, r18	; 0x1e
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	89 83       	std	Y+1, r24	; 0x01
    2a5a:	01 c0       	rjmp	.+2      	; 0x2a5e <xQueueGenericSendFromISR+0xaa>
    2a5c:	19 82       	std	Y+1, r1	; 0x01
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	2c 96       	adiw	r28, 0x0c	; 12
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61
    2a6c:	df 91       	pop	r29
    2a6e:	cf 91       	pop	r28
    2a70:	08 95       	ret

00002a72 <prvCopyDataToQueue>:
    2a72:	cf 93       	push	r28
    2a74:	df 93       	push	r29
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	27 97       	sbiw	r28, 0x07	; 7
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	9c 83       	std	Y+4, r25	; 0x04
    2a88:	8b 83       	std	Y+3, r24	; 0x03
    2a8a:	7e 83       	std	Y+6, r23	; 0x06
    2a8c:	6d 83       	std	Y+5, r22	; 0x05
    2a8e:	4f 83       	std	Y+7, r20	; 0x07
    2a90:	19 82       	std	Y+1, r1	; 0x01
    2a92:	8b 81       	ldd	r24, Y+3	; 0x03
    2a94:	9c 81       	ldd	r25, Y+4	; 0x04
    2a96:	fc 01       	movw	r30, r24
    2a98:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a9a:	8a 83       	std	Y+2, r24	; 0x02
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	84 8d       	ldd	r24, Z+28	; 0x1c
    2aa4:	88 23       	and	r24, r24
    2aa6:	b1 f4       	brne	.+44     	; 0x2ad4 <prvCopyDataToQueue+0x62>
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2aac:	fc 01       	movw	r30, r24
    2aae:	80 81       	ld	r24, Z
    2ab0:	91 81       	ldd	r25, Z+1	; 0x01
    2ab2:	89 2b       	or	r24, r25
    2ab4:	09 f0       	breq	.+2      	; 0x2ab8 <prvCopyDataToQueue+0x46>
    2ab6:	9c c0       	rjmp	.+312    	; 0x2bf0 <prvCopyDataToQueue+0x17e>
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aba:	9c 81       	ldd	r25, Y+4	; 0x04
    2abc:	fc 01       	movw	r30, r24
    2abe:	82 81       	ldd	r24, Z+2	; 0x02
    2ac0:	93 81       	ldd	r25, Z+3	; 0x03
    2ac2:	0e 94 cc 1c 	call	0x3998	; 0x3998 <xTaskPriorityDisinherit>
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	9c 81       	ldd	r25, Y+4	; 0x04
    2acc:	fc 01       	movw	r30, r24
    2ace:	13 82       	std	Z+3, r1	; 0x03
    2ad0:	12 82       	std	Z+2, r1	; 0x02
    2ad2:	8e c0       	rjmp	.+284    	; 0x2bf0 <prvCopyDataToQueue+0x17e>
    2ad4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ad6:	88 23       	and	r24, r24
    2ad8:	d9 f5       	brne	.+118    	; 0x2b50 <prvCopyDataToQueue+0xde>
    2ada:	8b 81       	ldd	r24, Y+3	; 0x03
    2adc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ade:	fc 01       	movw	r30, r24
    2ae0:	84 8d       	ldd	r24, Z+28	; 0x1c
    2ae2:	48 2f       	mov	r20, r24
    2ae4:	50 e0       	ldi	r21, 0x00	; 0
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	fc 01       	movw	r30, r24
    2aec:	84 81       	ldd	r24, Z+4	; 0x04
    2aee:	95 81       	ldd	r25, Z+5	; 0x05
    2af0:	2d 81       	ldd	r18, Y+5	; 0x05
    2af2:	3e 81       	ldd	r19, Y+6	; 0x06
    2af4:	b9 01       	movw	r22, r18
    2af6:	0e 94 89 22 	call	0x4512	; 0x4512 <memcpy>
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	9c 81       	ldd	r25, Y+4	; 0x04
    2afe:	fc 01       	movw	r30, r24
    2b00:	24 81       	ldd	r18, Z+4	; 0x04
    2b02:	35 81       	ldd	r19, Z+5	; 0x05
    2b04:	8b 81       	ldd	r24, Y+3	; 0x03
    2b06:	9c 81       	ldd	r25, Y+4	; 0x04
    2b08:	fc 01       	movw	r30, r24
    2b0a:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b0c:	88 2f       	mov	r24, r24
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	28 0f       	add	r18, r24
    2b12:	39 1f       	adc	r19, r25
    2b14:	8b 81       	ldd	r24, Y+3	; 0x03
    2b16:	9c 81       	ldd	r25, Y+4	; 0x04
    2b18:	fc 01       	movw	r30, r24
    2b1a:	35 83       	std	Z+5, r19	; 0x05
    2b1c:	24 83       	std	Z+4, r18	; 0x04
    2b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b20:	9c 81       	ldd	r25, Y+4	; 0x04
    2b22:	fc 01       	movw	r30, r24
    2b24:	24 81       	ldd	r18, Z+4	; 0x04
    2b26:	35 81       	ldd	r19, Z+5	; 0x05
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	82 81       	ldd	r24, Z+2	; 0x02
    2b30:	93 81       	ldd	r25, Z+3	; 0x03
    2b32:	28 17       	cp	r18, r24
    2b34:	39 07       	cpc	r19, r25
    2b36:	08 f4       	brcc	.+2      	; 0x2b3a <prvCopyDataToQueue+0xc8>
    2b38:	5b c0       	rjmp	.+182    	; 0x2bf0 <prvCopyDataToQueue+0x17e>
    2b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3e:	fc 01       	movw	r30, r24
    2b40:	20 81       	ld	r18, Z
    2b42:	31 81       	ldd	r19, Z+1	; 0x01
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	9c 81       	ldd	r25, Y+4	; 0x04
    2b48:	fc 01       	movw	r30, r24
    2b4a:	35 83       	std	Z+5, r19	; 0x05
    2b4c:	24 83       	std	Z+4, r18	; 0x04
    2b4e:	50 c0       	rjmp	.+160    	; 0x2bf0 <prvCopyDataToQueue+0x17e>
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	9c 81       	ldd	r25, Y+4	; 0x04
    2b54:	fc 01       	movw	r30, r24
    2b56:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b58:	48 2f       	mov	r20, r24
    2b5a:	50 e0       	ldi	r21, 0x00	; 0
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b60:	fc 01       	movw	r30, r24
    2b62:	86 81       	ldd	r24, Z+6	; 0x06
    2b64:	97 81       	ldd	r25, Z+7	; 0x07
    2b66:	2d 81       	ldd	r18, Y+5	; 0x05
    2b68:	3e 81       	ldd	r19, Y+6	; 0x06
    2b6a:	b9 01       	movw	r22, r18
    2b6c:	0e 94 89 22 	call	0x4512	; 0x4512 <memcpy>
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
    2b72:	9c 81       	ldd	r25, Y+4	; 0x04
    2b74:	fc 01       	movw	r30, r24
    2b76:	26 81       	ldd	r18, Z+6	; 0x06
    2b78:	37 81       	ldd	r19, Z+7	; 0x07
    2b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7e:	fc 01       	movw	r30, r24
    2b80:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b82:	88 2f       	mov	r24, r24
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	91 95       	neg	r25
    2b88:	81 95       	neg	r24
    2b8a:	91 09       	sbc	r25, r1
    2b8c:	28 0f       	add	r18, r24
    2b8e:	39 1f       	adc	r19, r25
    2b90:	8b 81       	ldd	r24, Y+3	; 0x03
    2b92:	9c 81       	ldd	r25, Y+4	; 0x04
    2b94:	fc 01       	movw	r30, r24
    2b96:	37 83       	std	Z+7, r19	; 0x07
    2b98:	26 83       	std	Z+6, r18	; 0x06
    2b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	26 81       	ldd	r18, Z+6	; 0x06
    2ba2:	37 81       	ldd	r19, Z+7	; 0x07
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba8:	fc 01       	movw	r30, r24
    2baa:	80 81       	ld	r24, Z
    2bac:	91 81       	ldd	r25, Z+1	; 0x01
    2bae:	28 17       	cp	r18, r24
    2bb0:	39 07       	cpc	r19, r25
    2bb2:	a8 f4       	brcc	.+42     	; 0x2bde <prvCopyDataToQueue+0x16c>
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb8:	fc 01       	movw	r30, r24
    2bba:	22 81       	ldd	r18, Z+2	; 0x02
    2bbc:	33 81       	ldd	r19, Z+3	; 0x03
    2bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	84 8d       	ldd	r24, Z+28	; 0x1c
    2bc6:	88 2f       	mov	r24, r24
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	91 95       	neg	r25
    2bcc:	81 95       	neg	r24
    2bce:	91 09       	sbc	r25, r1
    2bd0:	28 0f       	add	r18, r24
    2bd2:	39 1f       	adc	r19, r25
    2bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd8:	fc 01       	movw	r30, r24
    2bda:	37 83       	std	Z+7, r19	; 0x07
    2bdc:	26 83       	std	Z+6, r18	; 0x06
    2bde:	8f 81       	ldd	r24, Y+7	; 0x07
    2be0:	82 30       	cpi	r24, 0x02	; 2
    2be2:	31 f4       	brne	.+12     	; 0x2bf0 <prvCopyDataToQueue+0x17e>
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	88 23       	and	r24, r24
    2be8:	19 f0       	breq	.+6      	; 0x2bf0 <prvCopyDataToQueue+0x17e>
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	81 50       	subi	r24, 0x01	; 1
    2bee:	8a 83       	std	Y+2, r24	; 0x02
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	21 e0       	ldi	r18, 0x01	; 1
    2bf4:	28 0f       	add	r18, r24
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	22 8f       	std	Z+26, r18	; 0x1a
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	27 96       	adiw	r28, 0x07	; 7
    2c02:	0f b6       	in	r0, 0x3f	; 63
    2c04:	f8 94       	cli
    2c06:	de bf       	out	0x3e, r29	; 62
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	cd bf       	out	0x3d, r28	; 61
    2c0c:	df 91       	pop	r29
    2c0e:	cf 91       	pop	r28
    2c10:	08 95       	ret

00002c12 <prvUnlockQueue>:
    2c12:	cf 93       	push	r28
    2c14:	df 93       	push	r29
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <prvUnlockQueue+0x6>
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <prvUnlockQueue+0x8>
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	9c 83       	std	Y+4, r25	; 0x04
    2c20:	8b 83       	std	Y+3, r24	; 0x03
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	0f 92       	push	r0
    2c28:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2c30:	89 83       	std	Y+1, r24	; 0x01
    2c32:	12 c0       	rjmp	.+36     	; 0x2c58 <prvUnlockQueue+0x46>
    2c34:	8b 81       	ldd	r24, Y+3	; 0x03
    2c36:	9c 81       	ldd	r25, Y+4	; 0x04
    2c38:	fc 01       	movw	r30, r24
    2c3a:	81 89       	ldd	r24, Z+17	; 0x11
    2c3c:	88 23       	and	r24, r24
    2c3e:	81 f0       	breq	.+32     	; 0x2c60 <prvUnlockQueue+0x4e>
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	9c 81       	ldd	r25, Y+4	; 0x04
    2c44:	41 96       	adiw	r24, 0x11	; 17
    2c46:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <xTaskRemoveFromEventList>
    2c4a:	88 23       	and	r24, r24
    2c4c:	11 f0       	breq	.+4      	; 0x2c52 <prvUnlockQueue+0x40>
    2c4e:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <vTaskMissedYield>
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	81 50       	subi	r24, 0x01	; 1
    2c56:	89 83       	std	Y+1, r24	; 0x01
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	18 16       	cp	r1, r24
    2c5c:	5c f3       	brlt	.-42     	; 0x2c34 <prvUnlockQueue+0x22>
    2c5e:	01 c0       	rjmp	.+2      	; 0x2c62 <prvUnlockQueue+0x50>
    2c60:	00 00       	nop
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	9c 81       	ldd	r25, Y+4	; 0x04
    2c66:	2f ef       	ldi	r18, 0xFF	; 255
    2c68:	fc 01       	movw	r30, r24
    2c6a:	26 8f       	std	Z+30, r18	; 0x1e
    2c6c:	0f 90       	pop	r0
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	f8 94       	cli
    2c74:	0f 92       	push	r0
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c7e:	8a 83       	std	Y+2, r24	; 0x02
    2c80:	12 c0       	rjmp	.+36     	; 0x2ca6 <prvUnlockQueue+0x94>
    2c82:	8b 81       	ldd	r24, Y+3	; 0x03
    2c84:	9c 81       	ldd	r25, Y+4	; 0x04
    2c86:	fc 01       	movw	r30, r24
    2c88:	80 85       	ldd	r24, Z+8	; 0x08
    2c8a:	88 23       	and	r24, r24
    2c8c:	81 f0       	breq	.+32     	; 0x2cae <prvUnlockQueue+0x9c>
    2c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c90:	9c 81       	ldd	r25, Y+4	; 0x04
    2c92:	08 96       	adiw	r24, 0x08	; 8
    2c94:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <xTaskRemoveFromEventList>
    2c98:	88 23       	and	r24, r24
    2c9a:	11 f0       	breq	.+4      	; 0x2ca0 <prvUnlockQueue+0x8e>
    2c9c:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <vTaskMissedYield>
    2ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca2:	81 50       	subi	r24, 0x01	; 1
    2ca4:	8a 83       	std	Y+2, r24	; 0x02
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	18 16       	cp	r1, r24
    2caa:	5c f3       	brlt	.-42     	; 0x2c82 <prvUnlockQueue+0x70>
    2cac:	01 c0       	rjmp	.+2      	; 0x2cb0 <prvUnlockQueue+0x9e>
    2cae:	00 00       	nop
    2cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb4:	2f ef       	ldi	r18, 0xFF	; 255
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	25 8f       	std	Z+29, r18	; 0x1d
    2cba:	0f 90       	pop	r0
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	00 00       	nop
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	08 95       	ret

00002cce <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2cce:	cf 93       	push	r28
    2cd0:	df 93       	push	r29
    2cd2:	00 d0       	rcall	.+0      	; 0x2cd4 <prvIsQueueFull+0x6>
    2cd4:	1f 92       	push	r1
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	9b 83       	std	Y+3, r25	; 0x03
    2cdc:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce8:	fc 01       	movw	r30, r24
    2cea:	22 8d       	ldd	r18, Z+26	; 0x1a
    2cec:	8a 81       	ldd	r24, Y+2	; 0x02
    2cee:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	83 8d       	ldd	r24, Z+27	; 0x1b
    2cf4:	28 17       	cp	r18, r24
    2cf6:	19 f4       	brne	.+6      	; 0x2cfe <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	89 83       	std	Y+1, r24	; 0x01
    2cfc:	01 c0       	rjmp	.+2      	; 0x2d00 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    2cfe:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2d00:	0f 90       	pop	r0
    2d02:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	df 91       	pop	r29
    2d0e:	cf 91       	pop	r28
    2d10:	08 95       	ret

00002d12 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    2d12:	8f 92       	push	r8
    2d14:	9f 92       	push	r9
    2d16:	af 92       	push	r10
    2d18:	bf 92       	push	r11
    2d1a:	cf 92       	push	r12
    2d1c:	df 92       	push	r13
    2d1e:	ef 92       	push	r14
    2d20:	ff 92       	push	r15
    2d22:	0f 93       	push	r16
    2d24:	1f 93       	push	r17
    2d26:	cf 93       	push	r28
    2d28:	df 93       	push	r29
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
    2d2e:	60 97       	sbiw	r28, 0x10	; 16
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	de bf       	out	0x3e, r29	; 62
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	cd bf       	out	0x3d, r28	; 61
    2d3a:	9f 83       	std	Y+7, r25	; 0x07
    2d3c:	8e 83       	std	Y+6, r24	; 0x06
    2d3e:	79 87       	std	Y+9, r23	; 0x09
    2d40:	68 87       	std	Y+8, r22	; 0x08
    2d42:	5b 87       	std	Y+11, r21	; 0x0b
    2d44:	4a 87       	std	Y+10, r20	; 0x0a
    2d46:	3d 87       	std	Y+13, r19	; 0x0d
    2d48:	2c 87       	std	Y+12, r18	; 0x0c
    2d4a:	0e 87       	std	Y+14, r16	; 0x0e
    2d4c:	f8 8a       	std	Y+16, r15	; 0x10
    2d4e:	ef 86       	std	Y+15, r14	; 0x0f
    2d50:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d52:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d54:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <pvPortMalloc>
    2d58:	9d 83       	std	Y+5, r25	; 0x05
    2d5a:	8c 83       	std	Y+4, r24	; 0x04
    2d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d60:	89 2b       	or	r24, r25
    2d62:	b9 f0       	breq	.+46     	; 0x2d92 <xTaskCreate+0x80>
    2d64:	8c e2       	ldi	r24, 0x2C	; 44
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <pvPortMalloc>
    2d6c:	9a 83       	std	Y+2, r25	; 0x02
    2d6e:	89 83       	std	Y+1, r24	; 0x01
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	9a 81       	ldd	r25, Y+2	; 0x02
    2d74:	89 2b       	or	r24, r25
    2d76:	41 f0       	breq	.+16     	; 0x2d88 <xTaskCreate+0x76>
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7c:	2c 81       	ldd	r18, Y+4	; 0x04
    2d7e:	3d 81       	ldd	r19, Y+5	; 0x05
    2d80:	fc 01       	movw	r30, r24
    2d82:	30 8f       	std	Z+24, r19	; 0x18
    2d84:	27 8b       	std	Z+23, r18	; 0x17
    2d86:	07 c0       	rjmp	.+14     	; 0x2d96 <xTaskCreate+0x84>
    2d88:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d8c:	0e 94 0e 10 	call	0x201c	; 0x201c <vPortFree>
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <xTaskCreate+0x84>
    2d92:	1a 82       	std	Y+2, r1	; 0x02
    2d94:	19 82       	std	Y+1, r1	; 0x01
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9a:	89 2b       	or	r24, r25
    2d9c:	09 f1       	breq	.+66     	; 0x2de0 <xTaskCreate+0xce>
    2d9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2da0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2da2:	cc 01       	movw	r24, r24
    2da4:	a0 e0       	ldi	r26, 0x00	; 0
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	09 81       	ldd	r16, Y+1	; 0x01
    2daa:	1a 81       	ldd	r17, Y+2	; 0x02
    2dac:	4f 85       	ldd	r20, Y+15	; 0x0f
    2dae:	58 89       	ldd	r21, Y+16	; 0x10
    2db0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2db2:	3d 85       	ldd	r19, Y+13	; 0x0d
    2db4:	68 85       	ldd	r22, Y+8	; 0x08
    2db6:	79 85       	ldd	r23, Y+9	; 0x09
    2db8:	ee 81       	ldd	r30, Y+6	; 0x06
    2dba:	ff 81       	ldd	r31, Y+7	; 0x07
    2dbc:	81 2c       	mov	r8, r1
    2dbe:	91 2c       	mov	r9, r1
    2dc0:	58 01       	movw	r10, r16
    2dc2:	6a 01       	movw	r12, r20
    2dc4:	ee 84       	ldd	r14, Y+14	; 0x0e
    2dc6:	89 01       	movw	r16, r18
    2dc8:	9c 01       	movw	r18, r24
    2dca:	ad 01       	movw	r20, r26
    2dcc:	cf 01       	movw	r24, r30
    2dce:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <prvInitialiseNewTask>
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd6:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <prvAddNewTaskToReadyList>
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	8b 83       	std	Y+3, r24	; 0x03
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <xTaskCreate+0xd2>
    2de0:	8f ef       	ldi	r24, 0xFF	; 255
    2de2:	8b 83       	std	Y+3, r24	; 0x03
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	60 96       	adiw	r28, 0x10	; 16
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	1f 91       	pop	r17
    2df8:	0f 91       	pop	r16
    2dfa:	ff 90       	pop	r15
    2dfc:	ef 90       	pop	r14
    2dfe:	df 90       	pop	r13
    2e00:	cf 90       	pop	r12
    2e02:	bf 90       	pop	r11
    2e04:	af 90       	pop	r10
    2e06:	9f 90       	pop	r9
    2e08:	8f 90       	pop	r8
    2e0a:	08 95       	ret

00002e0c <prvInitialiseNewTask>:
    2e0c:	8f 92       	push	r8
    2e0e:	9f 92       	push	r9
    2e10:	af 92       	push	r10
    2e12:	bf 92       	push	r11
    2e14:	cf 92       	push	r12
    2e16:	df 92       	push	r13
    2e18:	ef 92       	push	r14
    2e1a:	0f 93       	push	r16
    2e1c:	1f 93       	push	r17
    2e1e:	cf 93       	push	r28
    2e20:	df 93       	push	r29
    2e22:	cd b7       	in	r28, 0x3d	; 61
    2e24:	de b7       	in	r29, 0x3e	; 62
    2e26:	64 97       	sbiw	r28, 0x14	; 20
    2e28:	0f b6       	in	r0, 0x3f	; 63
    2e2a:	f8 94       	cli
    2e2c:	de bf       	out	0x3e, r29	; 62
    2e2e:	0f be       	out	0x3f, r0	; 63
    2e30:	cd bf       	out	0x3d, r28	; 61
    2e32:	9d 83       	std	Y+5, r25	; 0x05
    2e34:	8c 83       	std	Y+4, r24	; 0x04
    2e36:	7f 83       	std	Y+7, r23	; 0x07
    2e38:	6e 83       	std	Y+6, r22	; 0x06
    2e3a:	28 87       	std	Y+8, r18	; 0x08
    2e3c:	39 87       	std	Y+9, r19	; 0x09
    2e3e:	4a 87       	std	Y+10, r20	; 0x0a
    2e40:	5b 87       	std	Y+11, r21	; 0x0b
    2e42:	1d 87       	std	Y+13, r17	; 0x0d
    2e44:	0c 87       	std	Y+12, r16	; 0x0c
    2e46:	ee 86       	std	Y+14, r14	; 0x0e
    2e48:	d8 8a       	std	Y+16, r13	; 0x10
    2e4a:	cf 86       	std	Y+15, r12	; 0x0f
    2e4c:	ba 8a       	std	Y+18, r11	; 0x12
    2e4e:	a9 8a       	std	Y+17, r10	; 0x11
    2e50:	9c 8a       	std	Y+20, r9	; 0x14
    2e52:	8b 8a       	std	Y+19, r8	; 0x13
    2e54:	28 85       	ldd	r18, Y+8	; 0x08
    2e56:	39 85       	ldd	r19, Y+9	; 0x09
    2e58:	89 89       	ldd	r24, Y+17	; 0x11
    2e5a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	87 89       	ldd	r24, Z+23	; 0x17
    2e60:	90 8d       	ldd	r25, Z+24	; 0x18
    2e62:	a9 01       	movw	r20, r18
    2e64:	65 ea       	ldi	r22, 0xA5	; 165
    2e66:	70 e0       	ldi	r23, 0x00	; 0
    2e68:	0e 94 92 22 	call	0x4524	; 0x4524 <memset>
    2e6c:	89 89       	ldd	r24, Y+17	; 0x11
    2e6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2e70:	fc 01       	movw	r30, r24
    2e72:	27 89       	ldd	r18, Z+23	; 0x17
    2e74:	30 8d       	ldd	r19, Z+24	; 0x18
    2e76:	88 85       	ldd	r24, Y+8	; 0x08
    2e78:	99 85       	ldd	r25, Y+9	; 0x09
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	82 0f       	add	r24, r18
    2e7e:	93 1f       	adc	r25, r19
    2e80:	9b 83       	std	Y+3, r25	; 0x03
    2e82:	8a 83       	std	Y+2, r24	; 0x02
    2e84:	19 82       	std	Y+1, r1	; 0x01
    2e86:	21 c0       	rjmp	.+66     	; 0x2eca <prvInitialiseNewTask+0xbe>
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
    2e8a:	88 2f       	mov	r24, r24
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	29 81       	ldd	r18, Y+1	; 0x01
    2e90:	22 2f       	mov	r18, r18
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	4e 81       	ldd	r20, Y+6	; 0x06
    2e96:	5f 81       	ldd	r21, Y+7	; 0x07
    2e98:	24 0f       	add	r18, r20
    2e9a:	35 1f       	adc	r19, r21
    2e9c:	f9 01       	movw	r30, r18
    2e9e:	40 81       	ld	r20, Z
    2ea0:	29 89       	ldd	r18, Y+17	; 0x11
    2ea2:	3a 89       	ldd	r19, Y+18	; 0x12
    2ea4:	82 0f       	add	r24, r18
    2ea6:	93 1f       	adc	r25, r19
    2ea8:	49 96       	adiw	r24, 0x19	; 25
    2eaa:	fc 01       	movw	r30, r24
    2eac:	40 83       	st	Z, r20
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	88 2f       	mov	r24, r24
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	2e 81       	ldd	r18, Y+6	; 0x06
    2eb6:	3f 81       	ldd	r19, Y+7	; 0x07
    2eb8:	82 0f       	add	r24, r18
    2eba:	93 1f       	adc	r25, r19
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	80 81       	ld	r24, Z
    2ec0:	88 23       	and	r24, r24
    2ec2:	39 f0       	breq	.+14     	; 0x2ed2 <prvInitialiseNewTask+0xc6>
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	8f 5f       	subi	r24, 0xFF	; 255
    2ec8:	89 83       	std	Y+1, r24	; 0x01
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	88 30       	cpi	r24, 0x08	; 8
    2ece:	e0 f2       	brcs	.-72     	; 0x2e88 <prvInitialiseNewTask+0x7c>
    2ed0:	01 c0       	rjmp	.+2      	; 0x2ed4 <prvInitialiseNewTask+0xc8>
    2ed2:	00 00       	nop
    2ed4:	89 89       	ldd	r24, Y+17	; 0x11
    2ed6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ed8:	fc 01       	movw	r30, r24
    2eda:	10 a2       	std	Z+32, r1	; 0x20
    2edc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ede:	84 30       	cpi	r24, 0x04	; 4
    2ee0:	10 f0       	brcs	.+4      	; 0x2ee6 <prvInitialiseNewTask+0xda>
    2ee2:	83 e0       	ldi	r24, 0x03	; 3
    2ee4:	8e 87       	std	Y+14, r24	; 0x0e
    2ee6:	89 89       	ldd	r24, Y+17	; 0x11
    2ee8:	9a 89       	ldd	r25, Y+18	; 0x12
    2eea:	2e 85       	ldd	r18, Y+14	; 0x0e
    2eec:	fc 01       	movw	r30, r24
    2eee:	26 8b       	std	Z+22, r18	; 0x16
    2ef0:	89 89       	ldd	r24, Y+17	; 0x11
    2ef2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ef4:	2e 85       	ldd	r18, Y+14	; 0x0e
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	23 a3       	std	Z+35, r18	; 0x23
    2efa:	89 89       	ldd	r24, Y+17	; 0x11
    2efc:	9a 89       	ldd	r25, Y+18	; 0x12
    2efe:	fc 01       	movw	r30, r24
    2f00:	14 a2       	std	Z+36, r1	; 0x24
    2f02:	89 89       	ldd	r24, Y+17	; 0x11
    2f04:	9a 89       	ldd	r25, Y+18	; 0x12
    2f06:	02 96       	adiw	r24, 0x02	; 2
    2f08:	0e 94 8d 0b 	call	0x171a	; 0x171a <vListInitialiseItem>
    2f0c:	89 89       	ldd	r24, Y+17	; 0x11
    2f0e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f10:	0c 96       	adiw	r24, 0x0c	; 12
    2f12:	0e 94 8d 0b 	call	0x171a	; 0x171a <vListInitialiseItem>
    2f16:	89 89       	ldd	r24, Y+17	; 0x11
    2f18:	9a 89       	ldd	r25, Y+18	; 0x12
    2f1a:	29 89       	ldd	r18, Y+17	; 0x11
    2f1c:	3a 89       	ldd	r19, Y+18	; 0x12
    2f1e:	fc 01       	movw	r30, r24
    2f20:	31 87       	std	Z+9, r19	; 0x09
    2f22:	20 87       	std	Z+8, r18	; 0x08
    2f24:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f26:	88 2f       	mov	r24, r24
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	24 e0       	ldi	r18, 0x04	; 4
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	28 1b       	sub	r18, r24
    2f30:	39 0b       	sbc	r19, r25
    2f32:	89 89       	ldd	r24, Y+17	; 0x11
    2f34:	9a 89       	ldd	r25, Y+18	; 0x12
    2f36:	fc 01       	movw	r30, r24
    2f38:	35 87       	std	Z+13, r19	; 0x0d
    2f3a:	24 87       	std	Z+12, r18	; 0x0c
    2f3c:	89 89       	ldd	r24, Y+17	; 0x11
    2f3e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f40:	29 89       	ldd	r18, Y+17	; 0x11
    2f42:	3a 89       	ldd	r19, Y+18	; 0x12
    2f44:	fc 01       	movw	r30, r24
    2f46:	33 8b       	std	Z+19, r19	; 0x13
    2f48:	22 8b       	std	Z+18, r18	; 0x12
    2f4a:	89 89       	ldd	r24, Y+17	; 0x11
    2f4c:	9a 89       	ldd	r25, Y+18	; 0x12
    2f4e:	fc 01       	movw	r30, r24
    2f50:	16 a2       	std	Z+38, r1	; 0x26
    2f52:	15 a2       	std	Z+37, r1	; 0x25
    2f54:	89 89       	ldd	r24, Y+17	; 0x11
    2f56:	9a 89       	ldd	r25, Y+18	; 0x12
    2f58:	fc 01       	movw	r30, r24
    2f5a:	17 a2       	std	Z+39, r1	; 0x27
    2f5c:	10 a6       	std	Z+40, r1	; 0x28
    2f5e:	11 a6       	std	Z+41, r1	; 0x29
    2f60:	12 a6       	std	Z+42, r1	; 0x2a
    2f62:	89 89       	ldd	r24, Y+17	; 0x11
    2f64:	9a 89       	ldd	r25, Y+18	; 0x12
    2f66:	fc 01       	movw	r30, r24
    2f68:	13 a6       	std	Z+43, r1	; 0x2b
    2f6a:	4c 85       	ldd	r20, Y+12	; 0x0c
    2f6c:	5d 85       	ldd	r21, Y+13	; 0x0d
    2f6e:	2c 81       	ldd	r18, Y+4	; 0x04
    2f70:	3d 81       	ldd	r19, Y+5	; 0x05
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	9b 81       	ldd	r25, Y+3	; 0x03
    2f76:	b9 01       	movw	r22, r18
    2f78:	0e 94 bd 0c 	call	0x197a	; 0x197a <pxPortInitialiseStack>
    2f7c:	9c 01       	movw	r18, r24
    2f7e:	89 89       	ldd	r24, Y+17	; 0x11
    2f80:	9a 89       	ldd	r25, Y+18	; 0x12
    2f82:	fc 01       	movw	r30, r24
    2f84:	31 83       	std	Z+1, r19	; 0x01
    2f86:	20 83       	st	Z, r18
    2f88:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f8a:	98 89       	ldd	r25, Y+16	; 0x10
    2f8c:	89 2b       	or	r24, r25
    2f8e:	39 f0       	breq	.+14     	; 0x2f9e <prvInitialiseNewTask+0x192>
    2f90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f92:	98 89       	ldd	r25, Y+16	; 0x10
    2f94:	29 89       	ldd	r18, Y+17	; 0x11
    2f96:	3a 89       	ldd	r19, Y+18	; 0x12
    2f98:	fc 01       	movw	r30, r24
    2f9a:	31 83       	std	Z+1, r19	; 0x01
    2f9c:	20 83       	st	Z, r18
    2f9e:	00 00       	nop
    2fa0:	64 96       	adiw	r28, 0x14	; 20
    2fa2:	0f b6       	in	r0, 0x3f	; 63
    2fa4:	f8 94       	cli
    2fa6:	de bf       	out	0x3e, r29	; 62
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	cd bf       	out	0x3d, r28	; 61
    2fac:	df 91       	pop	r29
    2fae:	cf 91       	pop	r28
    2fb0:	1f 91       	pop	r17
    2fb2:	0f 91       	pop	r16
    2fb4:	ef 90       	pop	r14
    2fb6:	df 90       	pop	r13
    2fb8:	cf 90       	pop	r12
    2fba:	bf 90       	pop	r11
    2fbc:	af 90       	pop	r10
    2fbe:	9f 90       	pop	r9
    2fc0:	8f 90       	pop	r8
    2fc2:	08 95       	ret

00002fc4 <prvAddNewTaskToReadyList>:
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <prvAddNewTaskToReadyList+0x6>
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	9a 83       	std	Y+2, r25	; 0x02
    2fd0:	89 83       	std	Y+1, r24	; 0x01
    2fd2:	0f b6       	in	r0, 0x3f	; 63
    2fd4:	f8 94       	cli
    2fd6:	0f 92       	push	r0
    2fd8:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <uxCurrentNumberOfTasks>
    2fdc:	8f 5f       	subi	r24, 0xFF	; 255
    2fde:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <uxCurrentNumberOfTasks>
    2fe2:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    2fe6:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    2fea:	89 2b       	or	r24, r25
    2fec:	69 f4       	brne	.+26     	; 0x3008 <prvAddNewTaskToReadyList+0x44>
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff2:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <pxCurrentTCB+0x1>
    2ff6:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <pxCurrentTCB>
    2ffa:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <uxCurrentNumberOfTasks>
    2ffe:	81 30       	cpi	r24, 0x01	; 1
    3000:	c9 f4       	brne	.+50     	; 0x3034 <prvAddNewTaskToReadyList+0x70>
    3002:	0e 94 06 1c 	call	0x380c	; 0x380c <prvInitialiseTaskLists>
    3006:	16 c0       	rjmp	.+44     	; 0x3034 <prvAddNewTaskToReadyList+0x70>
    3008:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <xSchedulerRunning>
    300c:	88 23       	and	r24, r24
    300e:	91 f4       	brne	.+36     	; 0x3034 <prvAddNewTaskToReadyList+0x70>
    3010:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    3014:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3018:	fc 01       	movw	r30, r24
    301a:	26 89       	ldd	r18, Z+22	; 0x16
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	9a 81       	ldd	r25, Y+2	; 0x02
    3020:	fc 01       	movw	r30, r24
    3022:	86 89       	ldd	r24, Z+22	; 0x16
    3024:	82 17       	cp	r24, r18
    3026:	30 f0       	brcs	.+12     	; 0x3034 <prvAddNewTaskToReadyList+0x70>
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	9a 81       	ldd	r25, Y+2	; 0x02
    302c:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <pxCurrentTCB+0x1>
    3030:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <pxCurrentTCB>
    3034:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <uxTaskNumber>
    3038:	8f 5f       	subi	r24, 0xFF	; 255
    303a:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <uxTaskNumber>
    303e:	20 91 a6 07 	lds	r18, 0x07A6	; 0x8007a6 <uxTaskNumber>
    3042:	89 81       	ldd	r24, Y+1	; 0x01
    3044:	9a 81       	ldd	r25, Y+2	; 0x02
    3046:	fc 01       	movw	r30, r24
    3048:	21 a3       	std	Z+33, r18	; 0x21
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	9a 81       	ldd	r25, Y+2	; 0x02
    304e:	fc 01       	movw	r30, r24
    3050:	96 89       	ldd	r25, Z+22	; 0x16
    3052:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    3056:	89 17       	cp	r24, r25
    3058:	30 f4       	brcc	.+12     	; 0x3066 <prvAddNewTaskToReadyList+0xa2>
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	9a 81       	ldd	r25, Y+2	; 0x02
    305e:	fc 01       	movw	r30, r24
    3060:	86 89       	ldd	r24, Z+22	; 0x16
    3062:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    3066:	89 81       	ldd	r24, Y+1	; 0x01
    3068:	9a 81       	ldd	r25, Y+2	; 0x02
    306a:	ac 01       	movw	r20, r24
    306c:	4e 5f       	subi	r20, 0xFE	; 254
    306e:	5f 4f       	sbci	r21, 0xFF	; 255
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	9a 81       	ldd	r25, Y+2	; 0x02
    3074:	fc 01       	movw	r30, r24
    3076:	86 89       	ldd	r24, Z+22	; 0x16
    3078:	28 2f       	mov	r18, r24
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	c9 01       	movw	r24, r18
    307e:	88 0f       	add	r24, r24
    3080:	99 1f       	adc	r25, r25
    3082:	88 0f       	add	r24, r24
    3084:	99 1f       	adc	r25, r25
    3086:	88 0f       	add	r24, r24
    3088:	99 1f       	adc	r25, r25
    308a:	82 0f       	add	r24, r18
    308c:	93 1f       	adc	r25, r19
    308e:	8f 5a       	subi	r24, 0xAF	; 175
    3090:	98 4f       	sbci	r25, 0xF8	; 248
    3092:	ba 01       	movw	r22, r20
    3094:	0e 94 9f 0b 	call	0x173e	; 0x173e <vListInsertEnd>
    3098:	0f 90       	pop	r0
    309a:	0f be       	out	0x3f, r0	; 63
    309c:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <xSchedulerRunning>
    30a0:	88 23       	and	r24, r24
    30a2:	71 f0       	breq	.+28     	; 0x30c0 <prvAddNewTaskToReadyList+0xfc>
    30a4:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    30a8:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    30ac:	fc 01       	movw	r30, r24
    30ae:	26 89       	ldd	r18, Z+22	; 0x16
    30b0:	89 81       	ldd	r24, Y+1	; 0x01
    30b2:	9a 81       	ldd	r25, Y+2	; 0x02
    30b4:	fc 01       	movw	r30, r24
    30b6:	86 89       	ldd	r24, Z+22	; 0x16
    30b8:	28 17       	cp	r18, r24
    30ba:	10 f4       	brcc	.+4      	; 0x30c0 <prvAddNewTaskToReadyList+0xfc>
    30bc:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <vPortYield>
    30c0:	00 00       	nop
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	df 91       	pop	r29
    30c8:	cf 91       	pop	r28
    30ca:	08 95       	ret

000030cc <vTaskDelay>:
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	00 d0       	rcall	.+0      	; 0x30d2 <vTaskDelay+0x6>
    30d2:	1f 92       	push	r1
    30d4:	cd b7       	in	r28, 0x3d	; 61
    30d6:	de b7       	in	r29, 0x3e	; 62
    30d8:	9b 83       	std	Y+3, r25	; 0x03
    30da:	8a 83       	std	Y+2, r24	; 0x02
    30dc:	19 82       	std	Y+1, r1	; 0x01
    30de:	8a 81       	ldd	r24, Y+2	; 0x02
    30e0:	9b 81       	ldd	r25, Y+3	; 0x03
    30e2:	89 2b       	or	r24, r25
    30e4:	51 f0       	breq	.+20     	; 0x30fa <vTaskDelay+0x2e>
    30e6:	0e 94 be 18 	call	0x317c	; 0x317c <vTaskSuspendAll>
    30ea:	8a 81       	ldd	r24, Y+2	; 0x02
    30ec:	9b 81       	ldd	r25, Y+3	; 0x03
    30ee:	60 e0       	ldi	r22, 0x00	; 0
    30f0:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <prvAddCurrentTaskToDelayedList>
    30f4:	0e 94 cb 18 	call	0x3196	; 0x3196 <xTaskResumeAll>
    30f8:	89 83       	std	Y+1, r24	; 0x01
    30fa:	89 81       	ldd	r24, Y+1	; 0x01
    30fc:	88 23       	and	r24, r24
    30fe:	11 f4       	brne	.+4      	; 0x3104 <vTaskDelay+0x38>
    3100:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <vPortYield>
    3104:	00 00       	nop
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	df 91       	pop	r29
    310e:	cf 91       	pop	r28
    3110:	08 95       	ret

00003112 <vTaskStartScheduler>:
    3112:	ef 92       	push	r14
    3114:	ff 92       	push	r15
    3116:	0f 93       	push	r16
    3118:	cf 93       	push	r28
    311a:	df 93       	push	r29
    311c:	1f 92       	push	r1
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62
    3122:	0f 2e       	mov	r0, r31
    3124:	f9 ea       	ldi	r31, 0xA9	; 169
    3126:	ef 2e       	mov	r14, r31
    3128:	f7 e0       	ldi	r31, 0x07	; 7
    312a:	ff 2e       	mov	r15, r31
    312c:	f0 2d       	mov	r31, r0
    312e:	00 e0       	ldi	r16, 0x00	; 0
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	45 e5       	ldi	r20, 0x55	; 85
    3136:	50 e0       	ldi	r21, 0x00	; 0
    3138:	6a e4       	ldi	r22, 0x4A	; 74
    313a:	71 e0       	ldi	r23, 0x01	; 1
    313c:	84 ef       	ldi	r24, 0xF4	; 244
    313e:	9b e1       	ldi	r25, 0x1B	; 27
    3140:	0e 94 89 16 	call	0x2d12	; 0x2d12 <xTaskCreate>
    3144:	89 83       	std	Y+1, r24	; 0x01
    3146:	89 81       	ldd	r24, Y+1	; 0x01
    3148:	81 30       	cpi	r24, 0x01	; 1
    314a:	81 f4       	brne	.+32     	; 0x316c <vTaskStartScheduler+0x5a>
    314c:	f8 94       	cli
    314e:	8f ef       	ldi	r24, 0xFF	; 255
    3150:	9f ef       	ldi	r25, 0xFF	; 255
    3152:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3156:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xSchedulerRunning>
    3160:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <xTickCount+0x1>
    3164:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <xTickCount>
    3168:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <xPortStartScheduler>
    316c:	00 00       	nop
    316e:	0f 90       	pop	r0
    3170:	df 91       	pop	r29
    3172:	cf 91       	pop	r28
    3174:	0f 91       	pop	r16
    3176:	ff 90       	pop	r15
    3178:	ef 90       	pop	r14
    317a:	08 95       	ret

0000317c <vTaskSuspendAll>:
    317c:	cf 93       	push	r28
    317e:	df 93       	push	r29
    3180:	cd b7       	in	r28, 0x3d	; 61
    3182:	de b7       	in	r29, 0x3e	; 62
    3184:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    3188:	8f 5f       	subi	r24, 0xFF	; 255
    318a:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <uxSchedulerSuspended>
    318e:	00 00       	nop
    3190:	df 91       	pop	r29
    3192:	cf 91       	pop	r28
    3194:	08 95       	ret

00003196 <xTaskResumeAll>:
    3196:	cf 93       	push	r28
    3198:	df 93       	push	r29
    319a:	00 d0       	rcall	.+0      	; 0x319c <xTaskResumeAll+0x6>
    319c:	00 d0       	rcall	.+0      	; 0x319e <xTaskResumeAll+0x8>
    319e:	cd b7       	in	r28, 0x3d	; 61
    31a0:	de b7       	in	r29, 0x3e	; 62
    31a2:	1a 82       	std	Y+2, r1	; 0x02
    31a4:	19 82       	std	Y+1, r1	; 0x01
    31a6:	1b 82       	std	Y+3, r1	; 0x03
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	0f 92       	push	r0
    31ae:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    31b2:	81 50       	subi	r24, 0x01	; 1
    31b4:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <uxSchedulerSuspended>
    31b8:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    31bc:	88 23       	and	r24, r24
    31be:	09 f0       	breq	.+2      	; 0x31c2 <xTaskResumeAll+0x2c>
    31c0:	77 c0       	rjmp	.+238    	; 0x32b0 <xTaskResumeAll+0x11a>
    31c2:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <uxCurrentNumberOfTasks>
    31c6:	88 23       	and	r24, r24
    31c8:	09 f4       	brne	.+2      	; 0x31cc <xTaskResumeAll+0x36>
    31ca:	72 c0       	rjmp	.+228    	; 0x32b0 <xTaskResumeAll+0x11a>
    31cc:	49 c0       	rjmp	.+146    	; 0x3260 <xTaskResumeAll+0xca>
    31ce:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <xPendingReadyList+0x5>
    31d2:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <xPendingReadyList+0x6>
    31d6:	fc 01       	movw	r30, r24
    31d8:	86 81       	ldd	r24, Z+6	; 0x06
    31da:	97 81       	ldd	r25, Z+7	; 0x07
    31dc:	9a 83       	std	Y+2, r25	; 0x02
    31de:	89 83       	std	Y+1, r24	; 0x01
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	9a 81       	ldd	r25, Y+2	; 0x02
    31e4:	0c 96       	adiw	r24, 0x0c	; 12
    31e6:	0e 94 66 0c 	call	0x18cc	; 0x18cc <uxListRemove>
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	9a 81       	ldd	r25, Y+2	; 0x02
    31ee:	02 96       	adiw	r24, 0x02	; 2
    31f0:	0e 94 66 0c 	call	0x18cc	; 0x18cc <uxListRemove>
    31f4:	89 81       	ldd	r24, Y+1	; 0x01
    31f6:	9a 81       	ldd	r25, Y+2	; 0x02
    31f8:	fc 01       	movw	r30, r24
    31fa:	96 89       	ldd	r25, Z+22	; 0x16
    31fc:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    3200:	89 17       	cp	r24, r25
    3202:	30 f4       	brcc	.+12     	; 0x3210 <xTaskResumeAll+0x7a>
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	9a 81       	ldd	r25, Y+2	; 0x02
    3208:	fc 01       	movw	r30, r24
    320a:	86 89       	ldd	r24, Z+22	; 0x16
    320c:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	9a 81       	ldd	r25, Y+2	; 0x02
    3214:	ac 01       	movw	r20, r24
    3216:	4e 5f       	subi	r20, 0xFE	; 254
    3218:	5f 4f       	sbci	r21, 0xFF	; 255
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	9a 81       	ldd	r25, Y+2	; 0x02
    321e:	fc 01       	movw	r30, r24
    3220:	86 89       	ldd	r24, Z+22	; 0x16
    3222:	28 2f       	mov	r18, r24
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	c9 01       	movw	r24, r18
    3228:	88 0f       	add	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	88 0f       	add	r24, r24
    322e:	99 1f       	adc	r25, r25
    3230:	88 0f       	add	r24, r24
    3232:	99 1f       	adc	r25, r25
    3234:	82 0f       	add	r24, r18
    3236:	93 1f       	adc	r25, r19
    3238:	8f 5a       	subi	r24, 0xAF	; 175
    323a:	98 4f       	sbci	r25, 0xF8	; 248
    323c:	ba 01       	movw	r22, r20
    323e:	0e 94 9f 0b 	call	0x173e	; 0x173e <vListInsertEnd>
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	9a 81       	ldd	r25, Y+2	; 0x02
    3246:	fc 01       	movw	r30, r24
    3248:	26 89       	ldd	r18, Z+22	; 0x16
    324a:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    324e:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3252:	fc 01       	movw	r30, r24
    3254:	86 89       	ldd	r24, Z+22	; 0x16
    3256:	28 17       	cp	r18, r24
    3258:	18 f0       	brcs	.+6      	; 0x3260 <xTaskResumeAll+0xca>
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xYieldPending>
    3260:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xPendingReadyList>
    3264:	88 23       	and	r24, r24
    3266:	09 f0       	breq	.+2      	; 0x326a <xTaskResumeAll+0xd4>
    3268:	b2 cf       	rjmp	.-156    	; 0x31ce <xTaskResumeAll+0x38>
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	9a 81       	ldd	r25, Y+2	; 0x02
    326e:	89 2b       	or	r24, r25
    3270:	11 f0       	breq	.+4      	; 0x3276 <xTaskResumeAll+0xe0>
    3272:	0e 94 9d 1c 	call	0x393a	; 0x393a <prvResetNextTaskUnblockTime>
    3276:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <uxPendedTicks>
    327a:	8c 83       	std	Y+4, r24	; 0x04
    327c:	8c 81       	ldd	r24, Y+4	; 0x04
    327e:	88 23       	and	r24, r24
    3280:	79 f0       	breq	.+30     	; 0x32a0 <xTaskResumeAll+0x10a>
    3282:	0e 94 62 19 	call	0x32c4	; 0x32c4 <xTaskIncrementTick>
    3286:	88 23       	and	r24, r24
    3288:	19 f0       	breq	.+6      	; 0x3290 <xTaskResumeAll+0xfa>
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xYieldPending>
    3290:	8c 81       	ldd	r24, Y+4	; 0x04
    3292:	81 50       	subi	r24, 0x01	; 1
    3294:	8c 83       	std	Y+4, r24	; 0x04
    3296:	8c 81       	ldd	r24, Y+4	; 0x04
    3298:	88 23       	and	r24, r24
    329a:	99 f7       	brne	.-26     	; 0x3282 <xTaskResumeAll+0xec>
    329c:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <uxPendedTicks>
    32a0:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <xYieldPending>
    32a4:	88 23       	and	r24, r24
    32a6:	21 f0       	breq	.+8      	; 0x32b0 <xTaskResumeAll+0x11a>
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	8b 83       	std	Y+3, r24	; 0x03
    32ac:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <vPortYield>
    32b0:	0f 90       	pop	r0
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	8b 81       	ldd	r24, Y+3	; 0x03
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	df 91       	pop	r29
    32c0:	cf 91       	pop	r28
    32c2:	08 95       	ret

000032c4 <xTaskIncrementTick>:
    32c4:	cf 93       	push	r28
    32c6:	df 93       	push	r29
    32c8:	cd b7       	in	r28, 0x3d	; 61
    32ca:	de b7       	in	r29, 0x3e	; 62
    32cc:	29 97       	sbiw	r28, 0x09	; 9
    32ce:	0f b6       	in	r0, 0x3f	; 63
    32d0:	f8 94       	cli
    32d2:	de bf       	out	0x3e, r29	; 62
    32d4:	0f be       	out	0x3f, r0	; 63
    32d6:	cd bf       	out	0x3d, r28	; 61
    32d8:	19 82       	std	Y+1, r1	; 0x01
    32da:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    32de:	88 23       	and	r24, r24
    32e0:	09 f0       	breq	.+2      	; 0x32e4 <xTaskIncrementTick+0x20>
    32e2:	c8 c0       	rjmp	.+400    	; 0x3474 <xTaskIncrementTick+0x1b0>
    32e4:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <xTickCount>
    32e8:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    32ec:	01 96       	adiw	r24, 0x01	; 1
    32ee:	9b 83       	std	Y+3, r25	; 0x03
    32f0:	8a 83       	std	Y+2, r24	; 0x02
    32f2:	8a 81       	ldd	r24, Y+2	; 0x02
    32f4:	9b 81       	ldd	r25, Y+3	; 0x03
    32f6:	90 93 a0 07 	sts	0x07A0, r25	; 0x8007a0 <xTickCount+0x1>
    32fa:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <xTickCount>
    32fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3300:	9b 81       	ldd	r25, Y+3	; 0x03
    3302:	89 2b       	or	r24, r25
    3304:	d9 f4       	brne	.+54     	; 0x333c <xTaskIncrementTick+0x78>
    3306:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    330a:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    330e:	9d 83       	std	Y+5, r25	; 0x05
    3310:	8c 83       	std	Y+4, r24	; 0x04
    3312:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <pxOverflowDelayedTaskList>
    3316:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <pxOverflowDelayedTaskList+0x1>
    331a:	90 93 88 07 	sts	0x0788, r25	; 0x800788 <pxDelayedTaskList+0x1>
    331e:	80 93 87 07 	sts	0x0787, r24	; 0x800787 <pxDelayedTaskList>
    3322:	8c 81       	ldd	r24, Y+4	; 0x04
    3324:	9d 81       	ldd	r25, Y+5	; 0x05
    3326:	90 93 8a 07 	sts	0x078A, r25	; 0x80078a <pxOverflowDelayedTaskList+0x1>
    332a:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <pxOverflowDelayedTaskList>
    332e:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <xNumOfOverflows>
    3332:	8f 5f       	subi	r24, 0xFF	; 255
    3334:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <xNumOfOverflows>
    3338:	0e 94 9d 1c 	call	0x393a	; 0x393a <prvResetNextTaskUnblockTime>
    333c:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <xNextTaskUnblockTime>
    3340:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3344:	2a 81       	ldd	r18, Y+2	; 0x02
    3346:	3b 81       	ldd	r19, Y+3	; 0x03
    3348:	28 17       	cp	r18, r24
    334a:	39 07       	cpc	r19, r25
    334c:	08 f4       	brcc	.+2      	; 0x3350 <xTaskIncrementTick+0x8c>
    334e:	78 c0       	rjmp	.+240    	; 0x3440 <xTaskIncrementTick+0x17c>
    3350:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    3354:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    3358:	fc 01       	movw	r30, r24
    335a:	80 81       	ld	r24, Z
    335c:	88 23       	and	r24, r24
    335e:	39 f4       	brne	.+14     	; 0x336e <xTaskIncrementTick+0xaa>
    3360:	8f ef       	ldi	r24, 0xFF	; 255
    3362:	9f ef       	ldi	r25, 0xFF	; 255
    3364:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3368:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>
    336c:	69 c0       	rjmp	.+210    	; 0x3440 <xTaskIncrementTick+0x17c>
    336e:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    3372:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    3376:	fc 01       	movw	r30, r24
    3378:	85 81       	ldd	r24, Z+5	; 0x05
    337a:	96 81       	ldd	r25, Z+6	; 0x06
    337c:	fc 01       	movw	r30, r24
    337e:	86 81       	ldd	r24, Z+6	; 0x06
    3380:	97 81       	ldd	r25, Z+7	; 0x07
    3382:	9f 83       	std	Y+7, r25	; 0x07
    3384:	8e 83       	std	Y+6, r24	; 0x06
    3386:	8e 81       	ldd	r24, Y+6	; 0x06
    3388:	9f 81       	ldd	r25, Y+7	; 0x07
    338a:	fc 01       	movw	r30, r24
    338c:	82 81       	ldd	r24, Z+2	; 0x02
    338e:	93 81       	ldd	r25, Z+3	; 0x03
    3390:	99 87       	std	Y+9, r25	; 0x09
    3392:	88 87       	std	Y+8, r24	; 0x08
    3394:	2a 81       	ldd	r18, Y+2	; 0x02
    3396:	3b 81       	ldd	r19, Y+3	; 0x03
    3398:	88 85       	ldd	r24, Y+8	; 0x08
    339a:	99 85       	ldd	r25, Y+9	; 0x09
    339c:	28 17       	cp	r18, r24
    339e:	39 07       	cpc	r19, r25
    33a0:	38 f4       	brcc	.+14     	; 0x33b0 <xTaskIncrementTick+0xec>
    33a2:	88 85       	ldd	r24, Y+8	; 0x08
    33a4:	99 85       	ldd	r25, Y+9	; 0x09
    33a6:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    33aa:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>
    33ae:	48 c0       	rjmp	.+144    	; 0x3440 <xTaskIncrementTick+0x17c>
    33b0:	8e 81       	ldd	r24, Y+6	; 0x06
    33b2:	9f 81       	ldd	r25, Y+7	; 0x07
    33b4:	02 96       	adiw	r24, 0x02	; 2
    33b6:	0e 94 66 0c 	call	0x18cc	; 0x18cc <uxListRemove>
    33ba:	8e 81       	ldd	r24, Y+6	; 0x06
    33bc:	9f 81       	ldd	r25, Y+7	; 0x07
    33be:	fc 01       	movw	r30, r24
    33c0:	84 89       	ldd	r24, Z+20	; 0x14
    33c2:	95 89       	ldd	r25, Z+21	; 0x15
    33c4:	89 2b       	or	r24, r25
    33c6:	29 f0       	breq	.+10     	; 0x33d2 <xTaskIncrementTick+0x10e>
    33c8:	8e 81       	ldd	r24, Y+6	; 0x06
    33ca:	9f 81       	ldd	r25, Y+7	; 0x07
    33cc:	0c 96       	adiw	r24, 0x0c	; 12
    33ce:	0e 94 66 0c 	call	0x18cc	; 0x18cc <uxListRemove>
    33d2:	8e 81       	ldd	r24, Y+6	; 0x06
    33d4:	9f 81       	ldd	r25, Y+7	; 0x07
    33d6:	fc 01       	movw	r30, r24
    33d8:	96 89       	ldd	r25, Z+22	; 0x16
    33da:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    33de:	89 17       	cp	r24, r25
    33e0:	30 f4       	brcc	.+12     	; 0x33ee <xTaskIncrementTick+0x12a>
    33e2:	8e 81       	ldd	r24, Y+6	; 0x06
    33e4:	9f 81       	ldd	r25, Y+7	; 0x07
    33e6:	fc 01       	movw	r30, r24
    33e8:	86 89       	ldd	r24, Z+22	; 0x16
    33ea:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    33ee:	8e 81       	ldd	r24, Y+6	; 0x06
    33f0:	9f 81       	ldd	r25, Y+7	; 0x07
    33f2:	ac 01       	movw	r20, r24
    33f4:	4e 5f       	subi	r20, 0xFE	; 254
    33f6:	5f 4f       	sbci	r21, 0xFF	; 255
    33f8:	8e 81       	ldd	r24, Y+6	; 0x06
    33fa:	9f 81       	ldd	r25, Y+7	; 0x07
    33fc:	fc 01       	movw	r30, r24
    33fe:	86 89       	ldd	r24, Z+22	; 0x16
    3400:	28 2f       	mov	r18, r24
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	c9 01       	movw	r24, r18
    3406:	88 0f       	add	r24, r24
    3408:	99 1f       	adc	r25, r25
    340a:	88 0f       	add	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	88 0f       	add	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	82 0f       	add	r24, r18
    3414:	93 1f       	adc	r25, r19
    3416:	8f 5a       	subi	r24, 0xAF	; 175
    3418:	98 4f       	sbci	r25, 0xF8	; 248
    341a:	ba 01       	movw	r22, r20
    341c:	0e 94 9f 0b 	call	0x173e	; 0x173e <vListInsertEnd>
    3420:	8e 81       	ldd	r24, Y+6	; 0x06
    3422:	9f 81       	ldd	r25, Y+7	; 0x07
    3424:	fc 01       	movw	r30, r24
    3426:	26 89       	ldd	r18, Z+22	; 0x16
    3428:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    342c:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3430:	fc 01       	movw	r30, r24
    3432:	86 89       	ldd	r24, Z+22	; 0x16
    3434:	28 17       	cp	r18, r24
    3436:	08 f4       	brcc	.+2      	; 0x343a <xTaskIncrementTick+0x176>
    3438:	8b cf       	rjmp	.-234    	; 0x3350 <xTaskIncrementTick+0x8c>
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	89 83       	std	Y+1, r24	; 0x01
    343e:	88 cf       	rjmp	.-240    	; 0x3350 <xTaskIncrementTick+0x8c>
    3440:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    3444:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3448:	fc 01       	movw	r30, r24
    344a:	86 89       	ldd	r24, Z+22	; 0x16
    344c:	28 2f       	mov	r18, r24
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	c9 01       	movw	r24, r18
    3452:	88 0f       	add	r24, r24
    3454:	99 1f       	adc	r25, r25
    3456:	88 0f       	add	r24, r24
    3458:	99 1f       	adc	r25, r25
    345a:	88 0f       	add	r24, r24
    345c:	99 1f       	adc	r25, r25
    345e:	82 0f       	add	r24, r18
    3460:	93 1f       	adc	r25, r19
    3462:	8f 5a       	subi	r24, 0xAF	; 175
    3464:	98 4f       	sbci	r25, 0xF8	; 248
    3466:	fc 01       	movw	r30, r24
    3468:	80 81       	ld	r24, Z
    346a:	82 30       	cpi	r24, 0x02	; 2
    346c:	40 f0       	brcs	.+16     	; 0x347e <xTaskIncrementTick+0x1ba>
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	89 83       	std	Y+1, r24	; 0x01
    3472:	05 c0       	rjmp	.+10     	; 0x347e <xTaskIncrementTick+0x1ba>
    3474:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <uxPendedTicks>
    3478:	8f 5f       	subi	r24, 0xFF	; 255
    347a:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <uxPendedTicks>
    347e:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <xYieldPending>
    3482:	88 23       	and	r24, r24
    3484:	11 f0       	breq	.+4      	; 0x348a <xTaskIncrementTick+0x1c6>
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	89 83       	std	Y+1, r24	; 0x01
    348a:	89 81       	ldd	r24, Y+1	; 0x01
    348c:	29 96       	adiw	r28, 0x09	; 9
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	f8 94       	cli
    3492:	de bf       	out	0x3e, r29	; 62
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	cd bf       	out	0x3d, r28	; 61
    3498:	df 91       	pop	r29
    349a:	cf 91       	pop	r28
    349c:	08 95       	ret

0000349e <vTaskSwitchContext>:
    349e:	cf 93       	push	r28
    34a0:	df 93       	push	r29
    34a2:	00 d0       	rcall	.+0      	; 0x34a4 <vTaskSwitchContext+0x6>
    34a4:	1f 92       	push	r1
    34a6:	cd b7       	in	r28, 0x3d	; 61
    34a8:	de b7       	in	r29, 0x3e	; 62
    34aa:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    34ae:	88 23       	and	r24, r24
    34b0:	21 f0       	breq	.+8      	; 0x34ba <vTaskSwitchContext+0x1c>
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xYieldPending>
    34b8:	71 c0       	rjmp	.+226    	; 0x359c <vTaskSwitchContext+0xfe>
    34ba:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <xYieldPending>
    34be:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    34c2:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    34c6:	fc 01       	movw	r30, r24
    34c8:	85 a1       	ldd	r24, Z+37	; 0x25
    34ca:	96 a1       	ldd	r25, Z+38	; 0x26
    34cc:	0e 94 9f 0a 	call	0x153e	; 0x153e <switch_out>
    34d0:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    34d4:	89 83       	std	Y+1, r24	; 0x01
    34d6:	03 c0       	rjmp	.+6      	; 0x34de <vTaskSwitchContext+0x40>
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	81 50       	subi	r24, 0x01	; 1
    34dc:	89 83       	std	Y+1, r24	; 0x01
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	28 2f       	mov	r18, r24
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	c9 01       	movw	r24, r18
    34e6:	88 0f       	add	r24, r24
    34e8:	99 1f       	adc	r25, r25
    34ea:	88 0f       	add	r24, r24
    34ec:	99 1f       	adc	r25, r25
    34ee:	88 0f       	add	r24, r24
    34f0:	99 1f       	adc	r25, r25
    34f2:	82 0f       	add	r24, r18
    34f4:	93 1f       	adc	r25, r19
    34f6:	8f 5a       	subi	r24, 0xAF	; 175
    34f8:	98 4f       	sbci	r25, 0xF8	; 248
    34fa:	fc 01       	movw	r30, r24
    34fc:	80 81       	ld	r24, Z
    34fe:	88 23       	and	r24, r24
    3500:	59 f3       	breq	.-42     	; 0x34d8 <vTaskSwitchContext+0x3a>
    3502:	89 81       	ldd	r24, Y+1	; 0x01
    3504:	28 2f       	mov	r18, r24
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	c9 01       	movw	r24, r18
    350a:	88 0f       	add	r24, r24
    350c:	99 1f       	adc	r25, r25
    350e:	88 0f       	add	r24, r24
    3510:	99 1f       	adc	r25, r25
    3512:	88 0f       	add	r24, r24
    3514:	99 1f       	adc	r25, r25
    3516:	82 0f       	add	r24, r18
    3518:	93 1f       	adc	r25, r19
    351a:	8f 5a       	subi	r24, 0xAF	; 175
    351c:	98 4f       	sbci	r25, 0xF8	; 248
    351e:	9b 83       	std	Y+3, r25	; 0x03
    3520:	8a 83       	std	Y+2, r24	; 0x02
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	9b 81       	ldd	r25, Y+3	; 0x03
    3526:	fc 01       	movw	r30, r24
    3528:	81 81       	ldd	r24, Z+1	; 0x01
    352a:	92 81       	ldd	r25, Z+2	; 0x02
    352c:	fc 01       	movw	r30, r24
    352e:	22 81       	ldd	r18, Z+2	; 0x02
    3530:	33 81       	ldd	r19, Z+3	; 0x03
    3532:	8a 81       	ldd	r24, Y+2	; 0x02
    3534:	9b 81       	ldd	r25, Y+3	; 0x03
    3536:	fc 01       	movw	r30, r24
    3538:	32 83       	std	Z+2, r19	; 0x02
    353a:	21 83       	std	Z+1, r18	; 0x01
    353c:	8a 81       	ldd	r24, Y+2	; 0x02
    353e:	9b 81       	ldd	r25, Y+3	; 0x03
    3540:	fc 01       	movw	r30, r24
    3542:	21 81       	ldd	r18, Z+1	; 0x01
    3544:	32 81       	ldd	r19, Z+2	; 0x02
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	9b 81       	ldd	r25, Y+3	; 0x03
    354a:	03 96       	adiw	r24, 0x03	; 3
    354c:	28 17       	cp	r18, r24
    354e:	39 07       	cpc	r19, r25
    3550:	69 f4       	brne	.+26     	; 0x356c <vTaskSwitchContext+0xce>
    3552:	8a 81       	ldd	r24, Y+2	; 0x02
    3554:	9b 81       	ldd	r25, Y+3	; 0x03
    3556:	fc 01       	movw	r30, r24
    3558:	81 81       	ldd	r24, Z+1	; 0x01
    355a:	92 81       	ldd	r25, Z+2	; 0x02
    355c:	fc 01       	movw	r30, r24
    355e:	22 81       	ldd	r18, Z+2	; 0x02
    3560:	33 81       	ldd	r19, Z+3	; 0x03
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	9b 81       	ldd	r25, Y+3	; 0x03
    3566:	fc 01       	movw	r30, r24
    3568:	32 83       	std	Z+2, r19	; 0x02
    356a:	21 83       	std	Z+1, r18	; 0x01
    356c:	8a 81       	ldd	r24, Y+2	; 0x02
    356e:	9b 81       	ldd	r25, Y+3	; 0x03
    3570:	fc 01       	movw	r30, r24
    3572:	81 81       	ldd	r24, Z+1	; 0x01
    3574:	92 81       	ldd	r25, Z+2	; 0x02
    3576:	fc 01       	movw	r30, r24
    3578:	86 81       	ldd	r24, Z+6	; 0x06
    357a:	97 81       	ldd	r25, Z+7	; 0x07
    357c:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <pxCurrentTCB+0x1>
    3580:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <pxCurrentTCB>
    3584:	89 81       	ldd	r24, Y+1	; 0x01
    3586:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    358a:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    358e:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3592:	fc 01       	movw	r30, r24
    3594:	85 a1       	ldd	r24, Z+37	; 0x25
    3596:	96 a1       	ldd	r25, Z+38	; 0x26
    3598:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <switch_in>
    359c:	00 00       	nop
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	df 91       	pop	r29
    35a6:	cf 91       	pop	r28
    35a8:	08 95       	ret

000035aa <vTaskPlaceOnEventList>:
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	00 d0       	rcall	.+0      	; 0x35b0 <vTaskPlaceOnEventList+0x6>
    35b0:	00 d0       	rcall	.+0      	; 0x35b2 <vTaskPlaceOnEventList+0x8>
    35b2:	cd b7       	in	r28, 0x3d	; 61
    35b4:	de b7       	in	r29, 0x3e	; 62
    35b6:	9a 83       	std	Y+2, r25	; 0x02
    35b8:	89 83       	std	Y+1, r24	; 0x01
    35ba:	7c 83       	std	Y+4, r23	; 0x04
    35bc:	6b 83       	std	Y+3, r22	; 0x03
    35be:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    35c2:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    35c6:	9c 01       	movw	r18, r24
    35c8:	24 5f       	subi	r18, 0xF4	; 244
    35ca:	3f 4f       	sbci	r19, 0xFF	; 255
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	9a 81       	ldd	r25, Y+2	; 0x02
    35d0:	b9 01       	movw	r22, r18
    35d2:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <vListInsert>
    35d6:	8b 81       	ldd	r24, Y+3	; 0x03
    35d8:	9c 81       	ldd	r25, Y+4	; 0x04
    35da:	61 e0       	ldi	r22, 0x01	; 1
    35dc:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <prvAddCurrentTaskToDelayedList>
    35e0:	00 00       	nop
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	df 91       	pop	r29
    35ec:	cf 91       	pop	r28
    35ee:	08 95       	ret

000035f0 <xTaskRemoveFromEventList>:
    35f0:	cf 93       	push	r28
    35f2:	df 93       	push	r29
    35f4:	00 d0       	rcall	.+0      	; 0x35f6 <xTaskRemoveFromEventList+0x6>
    35f6:	00 d0       	rcall	.+0      	; 0x35f8 <xTaskRemoveFromEventList+0x8>
    35f8:	1f 92       	push	r1
    35fa:	cd b7       	in	r28, 0x3d	; 61
    35fc:	de b7       	in	r29, 0x3e	; 62
    35fe:	9d 83       	std	Y+5, r25	; 0x05
    3600:	8c 83       	std	Y+4, r24	; 0x04
    3602:	8c 81       	ldd	r24, Y+4	; 0x04
    3604:	9d 81       	ldd	r25, Y+5	; 0x05
    3606:	fc 01       	movw	r30, r24
    3608:	85 81       	ldd	r24, Z+5	; 0x05
    360a:	96 81       	ldd	r25, Z+6	; 0x06
    360c:	fc 01       	movw	r30, r24
    360e:	86 81       	ldd	r24, Z+6	; 0x06
    3610:	97 81       	ldd	r25, Z+7	; 0x07
    3612:	9b 83       	std	Y+3, r25	; 0x03
    3614:	8a 83       	std	Y+2, r24	; 0x02
    3616:	8a 81       	ldd	r24, Y+2	; 0x02
    3618:	9b 81       	ldd	r25, Y+3	; 0x03
    361a:	0c 96       	adiw	r24, 0x0c	; 12
    361c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <uxListRemove>
    3620:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    3624:	88 23       	and	r24, r24
    3626:	69 f5       	brne	.+90     	; 0x3682 <xTaskRemoveFromEventList+0x92>
    3628:	8a 81       	ldd	r24, Y+2	; 0x02
    362a:	9b 81       	ldd	r25, Y+3	; 0x03
    362c:	02 96       	adiw	r24, 0x02	; 2
    362e:	0e 94 66 0c 	call	0x18cc	; 0x18cc <uxListRemove>
    3632:	8a 81       	ldd	r24, Y+2	; 0x02
    3634:	9b 81       	ldd	r25, Y+3	; 0x03
    3636:	fc 01       	movw	r30, r24
    3638:	96 89       	ldd	r25, Z+22	; 0x16
    363a:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    363e:	89 17       	cp	r24, r25
    3640:	30 f4       	brcc	.+12     	; 0x364e <xTaskRemoveFromEventList+0x5e>
    3642:	8a 81       	ldd	r24, Y+2	; 0x02
    3644:	9b 81       	ldd	r25, Y+3	; 0x03
    3646:	fc 01       	movw	r30, r24
    3648:	86 89       	ldd	r24, Z+22	; 0x16
    364a:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    364e:	8a 81       	ldd	r24, Y+2	; 0x02
    3650:	9b 81       	ldd	r25, Y+3	; 0x03
    3652:	ac 01       	movw	r20, r24
    3654:	4e 5f       	subi	r20, 0xFE	; 254
    3656:	5f 4f       	sbci	r21, 0xFF	; 255
    3658:	8a 81       	ldd	r24, Y+2	; 0x02
    365a:	9b 81       	ldd	r25, Y+3	; 0x03
    365c:	fc 01       	movw	r30, r24
    365e:	86 89       	ldd	r24, Z+22	; 0x16
    3660:	28 2f       	mov	r18, r24
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	c9 01       	movw	r24, r18
    3666:	88 0f       	add	r24, r24
    3668:	99 1f       	adc	r25, r25
    366a:	88 0f       	add	r24, r24
    366c:	99 1f       	adc	r25, r25
    366e:	88 0f       	add	r24, r24
    3670:	99 1f       	adc	r25, r25
    3672:	82 0f       	add	r24, r18
    3674:	93 1f       	adc	r25, r19
    3676:	8f 5a       	subi	r24, 0xAF	; 175
    3678:	98 4f       	sbci	r25, 0xF8	; 248
    367a:	ba 01       	movw	r22, r20
    367c:	0e 94 9f 0b 	call	0x173e	; 0x173e <vListInsertEnd>
    3680:	08 c0       	rjmp	.+16     	; 0x3692 <xTaskRemoveFromEventList+0xa2>
    3682:	8a 81       	ldd	r24, Y+2	; 0x02
    3684:	9b 81       	ldd	r25, Y+3	; 0x03
    3686:	0c 96       	adiw	r24, 0x0c	; 12
    3688:	bc 01       	movw	r22, r24
    368a:	8b e8       	ldi	r24, 0x8B	; 139
    368c:	97 e0       	ldi	r25, 0x07	; 7
    368e:	0e 94 9f 0b 	call	0x173e	; 0x173e <vListInsertEnd>
    3692:	8a 81       	ldd	r24, Y+2	; 0x02
    3694:	9b 81       	ldd	r25, Y+3	; 0x03
    3696:	fc 01       	movw	r30, r24
    3698:	26 89       	ldd	r18, Z+22	; 0x16
    369a:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    369e:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    36a2:	fc 01       	movw	r30, r24
    36a4:	86 89       	ldd	r24, Z+22	; 0x16
    36a6:	82 17       	cp	r24, r18
    36a8:	30 f4       	brcc	.+12     	; 0x36b6 <xTaskRemoveFromEventList+0xc6>
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	89 83       	std	Y+1, r24	; 0x01
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xYieldPending>
    36b4:	01 c0       	rjmp	.+2      	; 0x36b8 <xTaskRemoveFromEventList+0xc8>
    36b6:	19 82       	std	Y+1, r1	; 0x01
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	0f 90       	pop	r0
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	df 91       	pop	r29
    36c6:	cf 91       	pop	r28
    36c8:	08 95       	ret

000036ca <vTaskSetTimeOutState>:
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	00 d0       	rcall	.+0      	; 0x36d0 <vTaskSetTimeOutState+0x6>
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	9a 83       	std	Y+2, r25	; 0x02
    36d6:	89 83       	std	Y+1, r24	; 0x01
    36d8:	20 91 a5 07 	lds	r18, 0x07A5	; 0x8007a5 <xNumOfOverflows>
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	9a 81       	ldd	r25, Y+2	; 0x02
    36e0:	fc 01       	movw	r30, r24
    36e2:	20 83       	st	Z, r18
    36e4:	20 91 9f 07 	lds	r18, 0x079F	; 0x80079f <xTickCount>
    36e8:	30 91 a0 07 	lds	r19, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	9a 81       	ldd	r25, Y+2	; 0x02
    36f0:	fc 01       	movw	r30, r24
    36f2:	32 83       	std	Z+2, r19	; 0x02
    36f4:	21 83       	std	Z+1, r18	; 0x01
    36f6:	00 00       	nop
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	df 91       	pop	r29
    36fe:	cf 91       	pop	r28
    3700:	08 95       	ret

00003702 <xTaskCheckForTimeOut>:
    3702:	cf 93       	push	r28
    3704:	df 93       	push	r29
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	27 97       	sbiw	r28, 0x07	; 7
    370c:	0f b6       	in	r0, 0x3f	; 63
    370e:	f8 94       	cli
    3710:	de bf       	out	0x3e, r29	; 62
    3712:	0f be       	out	0x3f, r0	; 63
    3714:	cd bf       	out	0x3d, r28	; 61
    3716:	9d 83       	std	Y+5, r25	; 0x05
    3718:	8c 83       	std	Y+4, r24	; 0x04
    371a:	7f 83       	std	Y+7, r23	; 0x07
    371c:	6e 83       	std	Y+6, r22	; 0x06
    371e:	0f b6       	in	r0, 0x3f	; 63
    3720:	f8 94       	cli
    3722:	0f 92       	push	r0
    3724:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <xTickCount>
    3728:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    372c:	9b 83       	std	Y+3, r25	; 0x03
    372e:	8a 83       	std	Y+2, r24	; 0x02
    3730:	8c 81       	ldd	r24, Y+4	; 0x04
    3732:	9d 81       	ldd	r25, Y+5	; 0x05
    3734:	fc 01       	movw	r30, r24
    3736:	90 81       	ld	r25, Z
    3738:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <xNumOfOverflows>
    373c:	98 17       	cp	r25, r24
    373e:	69 f0       	breq	.+26     	; 0x375a <xTaskCheckForTimeOut+0x58>
    3740:	8c 81       	ldd	r24, Y+4	; 0x04
    3742:	9d 81       	ldd	r25, Y+5	; 0x05
    3744:	fc 01       	movw	r30, r24
    3746:	21 81       	ldd	r18, Z+1	; 0x01
    3748:	32 81       	ldd	r19, Z+2	; 0x02
    374a:	8a 81       	ldd	r24, Y+2	; 0x02
    374c:	9b 81       	ldd	r25, Y+3	; 0x03
    374e:	82 17       	cp	r24, r18
    3750:	93 07       	cpc	r25, r19
    3752:	18 f0       	brcs	.+6      	; 0x375a <xTaskCheckForTimeOut+0x58>
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	89 83       	std	Y+1, r24	; 0x01
    3758:	30 c0       	rjmp	.+96     	; 0x37ba <xTaskCheckForTimeOut+0xb8>
    375a:	8c 81       	ldd	r24, Y+4	; 0x04
    375c:	9d 81       	ldd	r25, Y+5	; 0x05
    375e:	fc 01       	movw	r30, r24
    3760:	81 81       	ldd	r24, Z+1	; 0x01
    3762:	92 81       	ldd	r25, Z+2	; 0x02
    3764:	2a 81       	ldd	r18, Y+2	; 0x02
    3766:	3b 81       	ldd	r19, Y+3	; 0x03
    3768:	28 1b       	sub	r18, r24
    376a:	39 0b       	sbc	r19, r25
    376c:	8e 81       	ldd	r24, Y+6	; 0x06
    376e:	9f 81       	ldd	r25, Y+7	; 0x07
    3770:	fc 01       	movw	r30, r24
    3772:	80 81       	ld	r24, Z
    3774:	91 81       	ldd	r25, Z+1	; 0x01
    3776:	28 17       	cp	r18, r24
    3778:	39 07       	cpc	r19, r25
    377a:	e8 f4       	brcc	.+58     	; 0x37b6 <xTaskCheckForTimeOut+0xb4>
    377c:	8e 81       	ldd	r24, Y+6	; 0x06
    377e:	9f 81       	ldd	r25, Y+7	; 0x07
    3780:	fc 01       	movw	r30, r24
    3782:	20 81       	ld	r18, Z
    3784:	31 81       	ldd	r19, Z+1	; 0x01
    3786:	8c 81       	ldd	r24, Y+4	; 0x04
    3788:	9d 81       	ldd	r25, Y+5	; 0x05
    378a:	fc 01       	movw	r30, r24
    378c:	41 81       	ldd	r20, Z+1	; 0x01
    378e:	52 81       	ldd	r21, Z+2	; 0x02
    3790:	8a 81       	ldd	r24, Y+2	; 0x02
    3792:	9b 81       	ldd	r25, Y+3	; 0x03
    3794:	ba 01       	movw	r22, r20
    3796:	68 1b       	sub	r22, r24
    3798:	79 0b       	sbc	r23, r25
    379a:	cb 01       	movw	r24, r22
    379c:	28 0f       	add	r18, r24
    379e:	39 1f       	adc	r19, r25
    37a0:	8e 81       	ldd	r24, Y+6	; 0x06
    37a2:	9f 81       	ldd	r25, Y+7	; 0x07
    37a4:	fc 01       	movw	r30, r24
    37a6:	31 83       	std	Z+1, r19	; 0x01
    37a8:	20 83       	st	Z, r18
    37aa:	8c 81       	ldd	r24, Y+4	; 0x04
    37ac:	9d 81       	ldd	r25, Y+5	; 0x05
    37ae:	0e 94 65 1b 	call	0x36ca	; 0x36ca <vTaskSetTimeOutState>
    37b2:	19 82       	std	Y+1, r1	; 0x01
    37b4:	02 c0       	rjmp	.+4      	; 0x37ba <xTaskCheckForTimeOut+0xb8>
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	89 83       	std	Y+1, r24	; 0x01
    37ba:	0f 90       	pop	r0
    37bc:	0f be       	out	0x3f, r0	; 63
    37be:	89 81       	ldd	r24, Y+1	; 0x01
    37c0:	27 96       	adiw	r28, 0x07	; 7
    37c2:	0f b6       	in	r0, 0x3f	; 63
    37c4:	f8 94       	cli
    37c6:	de bf       	out	0x3e, r29	; 62
    37c8:	0f be       	out	0x3f, r0	; 63
    37ca:	cd bf       	out	0x3d, r28	; 61
    37cc:	df 91       	pop	r29
    37ce:	cf 91       	pop	r28
    37d0:	08 95       	ret

000037d2 <vTaskMissedYield>:
    37d2:	cf 93       	push	r28
    37d4:	df 93       	push	r29
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xYieldPending>
    37e0:	00 00       	nop
    37e2:	df 91       	pop	r29
    37e4:	cf 91       	pop	r28
    37e6:	08 95       	ret

000037e8 <prvIdleTask>:
    37e8:	cf 93       	push	r28
    37ea:	df 93       	push	r29
    37ec:	00 d0       	rcall	.+0      	; 0x37ee <prvIdleTask+0x6>
    37ee:	cd b7       	in	r28, 0x3d	; 61
    37f0:	de b7       	in	r29, 0x3e	; 62
    37f2:	9a 83       	std	Y+2, r25	; 0x02
    37f4:	89 83       	std	Y+1, r24	; 0x01
    37f6:	0e 94 44 1c 	call	0x3888	; 0x3888 <prvCheckTasksWaitingTermination>
    37fa:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxReadyTasksLists>
    37fe:	82 30       	cpi	r24, 0x02	; 2
    3800:	10 f0       	brcs	.+4      	; 0x3806 <prvIdleTask+0x1e>
    3802:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <vPortYield>
    3806:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <vApplicationIdleHook>
    380a:	f5 cf       	rjmp	.-22     	; 0x37f6 <prvIdleTask+0xe>

0000380c <prvInitialiseTaskLists>:
    380c:	cf 93       	push	r28
    380e:	df 93       	push	r29
    3810:	1f 92       	push	r1
    3812:	cd b7       	in	r28, 0x3d	; 61
    3814:	de b7       	in	r29, 0x3e	; 62
    3816:	19 82       	std	Y+1, r1	; 0x01
    3818:	13 c0       	rjmp	.+38     	; 0x3840 <prvInitialiseTaskLists+0x34>
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	28 2f       	mov	r18, r24
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	c9 01       	movw	r24, r18
    3822:	88 0f       	add	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	88 0f       	add	r24, r24
    3828:	99 1f       	adc	r25, r25
    382a:	88 0f       	add	r24, r24
    382c:	99 1f       	adc	r25, r25
    382e:	82 0f       	add	r24, r18
    3830:	93 1f       	adc	r25, r19
    3832:	8f 5a       	subi	r24, 0xAF	; 175
    3834:	98 4f       	sbci	r25, 0xF8	; 248
    3836:	0e 94 57 0b 	call	0x16ae	; 0x16ae <vListInitialise>
    383a:	89 81       	ldd	r24, Y+1	; 0x01
    383c:	8f 5f       	subi	r24, 0xFF	; 255
    383e:	89 83       	std	Y+1, r24	; 0x01
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	84 30       	cpi	r24, 0x04	; 4
    3844:	50 f3       	brcs	.-44     	; 0x381a <prvInitialiseTaskLists+0xe>
    3846:	85 e7       	ldi	r24, 0x75	; 117
    3848:	97 e0       	ldi	r25, 0x07	; 7
    384a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <vListInitialise>
    384e:	8e e7       	ldi	r24, 0x7E	; 126
    3850:	97 e0       	ldi	r25, 0x07	; 7
    3852:	0e 94 57 0b 	call	0x16ae	; 0x16ae <vListInitialise>
    3856:	8b e8       	ldi	r24, 0x8B	; 139
    3858:	97 e0       	ldi	r25, 0x07	; 7
    385a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <vListInitialise>
    385e:	84 e9       	ldi	r24, 0x94	; 148
    3860:	97 e0       	ldi	r25, 0x07	; 7
    3862:	0e 94 57 0b 	call	0x16ae	; 0x16ae <vListInitialise>
    3866:	85 e7       	ldi	r24, 0x75	; 117
    3868:	97 e0       	ldi	r25, 0x07	; 7
    386a:	90 93 88 07 	sts	0x0788, r25	; 0x800788 <pxDelayedTaskList+0x1>
    386e:	80 93 87 07 	sts	0x0787, r24	; 0x800787 <pxDelayedTaskList>
    3872:	8e e7       	ldi	r24, 0x7E	; 126
    3874:	97 e0       	ldi	r25, 0x07	; 7
    3876:	90 93 8a 07 	sts	0x078A, r25	; 0x80078a <pxOverflowDelayedTaskList+0x1>
    387a:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <pxOverflowDelayedTaskList>
    387e:	00 00       	nop
    3880:	0f 90       	pop	r0
    3882:	df 91       	pop	r29
    3884:	cf 91       	pop	r28
    3886:	08 95       	ret

00003888 <prvCheckTasksWaitingTermination>:
    3888:	cf 93       	push	r28
    388a:	df 93       	push	r29
    388c:	00 d0       	rcall	.+0      	; 0x388e <prvCheckTasksWaitingTermination+0x6>
    388e:	1f 92       	push	r1
    3890:	cd b7       	in	r28, 0x3d	; 61
    3892:	de b7       	in	r29, 0x3e	; 62
    3894:	2f c0       	rjmp	.+94     	; 0x38f4 <prvCheckTasksWaitingTermination+0x6c>
    3896:	0e 94 be 18 	call	0x317c	; 0x317c <vTaskSuspendAll>
    389a:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <xTasksWaitingTermination>
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	99 23       	and	r25, r25
    38a2:	09 f0       	breq	.+2      	; 0x38a6 <prvCheckTasksWaitingTermination+0x1e>
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	89 83       	std	Y+1, r24	; 0x01
    38a8:	0e 94 cb 18 	call	0x3196	; 0x3196 <xTaskResumeAll>
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	88 23       	and	r24, r24
    38b0:	09 f5       	brne	.+66     	; 0x38f4 <prvCheckTasksWaitingTermination+0x6c>
    38b2:	0f b6       	in	r0, 0x3f	; 63
    38b4:	f8 94       	cli
    38b6:	0f 92       	push	r0
    38b8:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <xTasksWaitingTermination+0x5>
    38bc:	90 91 9a 07 	lds	r25, 0x079A	; 0x80079a <xTasksWaitingTermination+0x6>
    38c0:	fc 01       	movw	r30, r24
    38c2:	86 81       	ldd	r24, Z+6	; 0x06
    38c4:	97 81       	ldd	r25, Z+7	; 0x07
    38c6:	9b 83       	std	Y+3, r25	; 0x03
    38c8:	8a 83       	std	Y+2, r24	; 0x02
    38ca:	8a 81       	ldd	r24, Y+2	; 0x02
    38cc:	9b 81       	ldd	r25, Y+3	; 0x03
    38ce:	02 96       	adiw	r24, 0x02	; 2
    38d0:	0e 94 66 0c 	call	0x18cc	; 0x18cc <uxListRemove>
    38d4:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <uxCurrentNumberOfTasks>
    38d8:	81 50       	subi	r24, 0x01	; 1
    38da:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <uxCurrentNumberOfTasks>
    38de:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <uxDeletedTasksWaitingCleanUp>
    38e2:	81 50       	subi	r24, 0x01	; 1
    38e4:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <uxDeletedTasksWaitingCleanUp>
    38e8:	0f 90       	pop	r0
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	8a 81       	ldd	r24, Y+2	; 0x02
    38ee:	9b 81       	ldd	r25, Y+3	; 0x03
    38f0:	0e 94 85 1c 	call	0x390a	; 0x390a <prvDeleteTCB>
    38f4:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <uxDeletedTasksWaitingCleanUp>
    38f8:	88 23       	and	r24, r24
    38fa:	69 f6       	brne	.-102    	; 0x3896 <prvCheckTasksWaitingTermination+0xe>
    38fc:	00 00       	nop
    38fe:	0f 90       	pop	r0
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	df 91       	pop	r29
    3906:	cf 91       	pop	r28
    3908:	08 95       	ret

0000390a <prvDeleteTCB>:
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	00 d0       	rcall	.+0      	; 0x3910 <prvDeleteTCB+0x6>
    3910:	cd b7       	in	r28, 0x3d	; 61
    3912:	de b7       	in	r29, 0x3e	; 62
    3914:	9a 83       	std	Y+2, r25	; 0x02
    3916:	89 83       	std	Y+1, r24	; 0x01
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	9a 81       	ldd	r25, Y+2	; 0x02
    391c:	fc 01       	movw	r30, r24
    391e:	87 89       	ldd	r24, Z+23	; 0x17
    3920:	90 8d       	ldd	r25, Z+24	; 0x18
    3922:	0e 94 0e 10 	call	0x201c	; 0x201c <vPortFree>
    3926:	89 81       	ldd	r24, Y+1	; 0x01
    3928:	9a 81       	ldd	r25, Y+2	; 0x02
    392a:	0e 94 0e 10 	call	0x201c	; 0x201c <vPortFree>
    392e:	00 00       	nop
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	df 91       	pop	r29
    3936:	cf 91       	pop	r28
    3938:	08 95       	ret

0000393a <prvResetNextTaskUnblockTime>:
    393a:	cf 93       	push	r28
    393c:	df 93       	push	r29
    393e:	00 d0       	rcall	.+0      	; 0x3940 <prvResetNextTaskUnblockTime+0x6>
    3940:	cd b7       	in	r28, 0x3d	; 61
    3942:	de b7       	in	r29, 0x3e	; 62
    3944:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    3948:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    394c:	fc 01       	movw	r30, r24
    394e:	80 81       	ld	r24, Z
    3950:	88 23       	and	r24, r24
    3952:	39 f4       	brne	.+14     	; 0x3962 <prvResetNextTaskUnblockTime+0x28>
    3954:	8f ef       	ldi	r24, 0xFF	; 255
    3956:	9f ef       	ldi	r25, 0xFF	; 255
    3958:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    395c:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>
    3960:	15 c0       	rjmp	.+42     	; 0x398c <prvResetNextTaskUnblockTime+0x52>
    3962:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    3966:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    396a:	fc 01       	movw	r30, r24
    396c:	85 81       	ldd	r24, Z+5	; 0x05
    396e:	96 81       	ldd	r25, Z+6	; 0x06
    3970:	fc 01       	movw	r30, r24
    3972:	86 81       	ldd	r24, Z+6	; 0x06
    3974:	97 81       	ldd	r25, Z+7	; 0x07
    3976:	9a 83       	std	Y+2, r25	; 0x02
    3978:	89 83       	std	Y+1, r24	; 0x01
    397a:	89 81       	ldd	r24, Y+1	; 0x01
    397c:	9a 81       	ldd	r25, Y+2	; 0x02
    397e:	fc 01       	movw	r30, r24
    3980:	82 81       	ldd	r24, Z+2	; 0x02
    3982:	93 81       	ldd	r25, Z+3	; 0x03
    3984:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3988:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>
    398c:	00 00       	nop
    398e:	0f 90       	pop	r0
    3990:	0f 90       	pop	r0
    3992:	df 91       	pop	r29
    3994:	cf 91       	pop	r28
    3996:	08 95       	ret

00003998 <xTaskPriorityDisinherit>:
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	00 d0       	rcall	.+0      	; 0x399e <xTaskPriorityDisinherit+0x6>
    399e:	00 d0       	rcall	.+0      	; 0x39a0 <xTaskPriorityDisinherit+0x8>
    39a0:	1f 92       	push	r1
    39a2:	cd b7       	in	r28, 0x3d	; 61
    39a4:	de b7       	in	r29, 0x3e	; 62
    39a6:	9d 83       	std	Y+5, r25	; 0x05
    39a8:	8c 83       	std	Y+4, r24	; 0x04
    39aa:	8c 81       	ldd	r24, Y+4	; 0x04
    39ac:	9d 81       	ldd	r25, Y+5	; 0x05
    39ae:	9b 83       	std	Y+3, r25	; 0x03
    39b0:	8a 83       	std	Y+2, r24	; 0x02
    39b2:	19 82       	std	Y+1, r1	; 0x01
    39b4:	8c 81       	ldd	r24, Y+4	; 0x04
    39b6:	9d 81       	ldd	r25, Y+5	; 0x05
    39b8:	89 2b       	or	r24, r25
    39ba:	09 f4       	brne	.+2      	; 0x39be <xTaskPriorityDisinherit+0x26>
    39bc:	61 c0       	rjmp	.+194    	; 0x3a80 <xTaskPriorityDisinherit+0xe8>
    39be:	8a 81       	ldd	r24, Y+2	; 0x02
    39c0:	9b 81       	ldd	r25, Y+3	; 0x03
    39c2:	fc 01       	movw	r30, r24
    39c4:	84 a1       	ldd	r24, Z+36	; 0x24
    39c6:	2f ef       	ldi	r18, 0xFF	; 255
    39c8:	28 0f       	add	r18, r24
    39ca:	8a 81       	ldd	r24, Y+2	; 0x02
    39cc:	9b 81       	ldd	r25, Y+3	; 0x03
    39ce:	fc 01       	movw	r30, r24
    39d0:	24 a3       	std	Z+36, r18	; 0x24
    39d2:	8a 81       	ldd	r24, Y+2	; 0x02
    39d4:	9b 81       	ldd	r25, Y+3	; 0x03
    39d6:	fc 01       	movw	r30, r24
    39d8:	26 89       	ldd	r18, Z+22	; 0x16
    39da:	8a 81       	ldd	r24, Y+2	; 0x02
    39dc:	9b 81       	ldd	r25, Y+3	; 0x03
    39de:	fc 01       	movw	r30, r24
    39e0:	83 a1       	ldd	r24, Z+35	; 0x23
    39e2:	28 17       	cp	r18, r24
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <xTaskPriorityDisinherit+0x50>
    39e6:	4c c0       	rjmp	.+152    	; 0x3a80 <xTaskPriorityDisinherit+0xe8>
    39e8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ea:	9b 81       	ldd	r25, Y+3	; 0x03
    39ec:	fc 01       	movw	r30, r24
    39ee:	84 a1       	ldd	r24, Z+36	; 0x24
    39f0:	88 23       	and	r24, r24
    39f2:	09 f0       	breq	.+2      	; 0x39f6 <xTaskPriorityDisinherit+0x5e>
    39f4:	45 c0       	rjmp	.+138    	; 0x3a80 <xTaskPriorityDisinherit+0xe8>
    39f6:	8a 81       	ldd	r24, Y+2	; 0x02
    39f8:	9b 81       	ldd	r25, Y+3	; 0x03
    39fa:	02 96       	adiw	r24, 0x02	; 2
    39fc:	0e 94 66 0c 	call	0x18cc	; 0x18cc <uxListRemove>
    3a00:	8a 81       	ldd	r24, Y+2	; 0x02
    3a02:	9b 81       	ldd	r25, Y+3	; 0x03
    3a04:	fc 01       	movw	r30, r24
    3a06:	23 a1       	ldd	r18, Z+35	; 0x23
    3a08:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a0c:	fc 01       	movw	r30, r24
    3a0e:	26 8b       	std	Z+22, r18	; 0x16
    3a10:	8a 81       	ldd	r24, Y+2	; 0x02
    3a12:	9b 81       	ldd	r25, Y+3	; 0x03
    3a14:	fc 01       	movw	r30, r24
    3a16:	86 89       	ldd	r24, Z+22	; 0x16
    3a18:	88 2f       	mov	r24, r24
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	24 e0       	ldi	r18, 0x04	; 4
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	28 1b       	sub	r18, r24
    3a22:	39 0b       	sbc	r19, r25
    3a24:	8a 81       	ldd	r24, Y+2	; 0x02
    3a26:	9b 81       	ldd	r25, Y+3	; 0x03
    3a28:	fc 01       	movw	r30, r24
    3a2a:	35 87       	std	Z+13, r19	; 0x0d
    3a2c:	24 87       	std	Z+12, r18	; 0x0c
    3a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a30:	9b 81       	ldd	r25, Y+3	; 0x03
    3a32:	fc 01       	movw	r30, r24
    3a34:	96 89       	ldd	r25, Z+22	; 0x16
    3a36:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    3a3a:	89 17       	cp	r24, r25
    3a3c:	30 f4       	brcc	.+12     	; 0x3a4a <xTaskPriorityDisinherit+0xb2>
    3a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a40:	9b 81       	ldd	r25, Y+3	; 0x03
    3a42:	fc 01       	movw	r30, r24
    3a44:	86 89       	ldd	r24, Z+22	; 0x16
    3a46:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    3a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a4e:	ac 01       	movw	r20, r24
    3a50:	4e 5f       	subi	r20, 0xFE	; 254
    3a52:	5f 4f       	sbci	r21, 0xFF	; 255
    3a54:	8a 81       	ldd	r24, Y+2	; 0x02
    3a56:	9b 81       	ldd	r25, Y+3	; 0x03
    3a58:	fc 01       	movw	r30, r24
    3a5a:	86 89       	ldd	r24, Z+22	; 0x16
    3a5c:	28 2f       	mov	r18, r24
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	c9 01       	movw	r24, r18
    3a62:	88 0f       	add	r24, r24
    3a64:	99 1f       	adc	r25, r25
    3a66:	88 0f       	add	r24, r24
    3a68:	99 1f       	adc	r25, r25
    3a6a:	88 0f       	add	r24, r24
    3a6c:	99 1f       	adc	r25, r25
    3a6e:	82 0f       	add	r24, r18
    3a70:	93 1f       	adc	r25, r19
    3a72:	8f 5a       	subi	r24, 0xAF	; 175
    3a74:	98 4f       	sbci	r25, 0xF8	; 248
    3a76:	ba 01       	movw	r22, r20
    3a78:	0e 94 9f 0b 	call	0x173e	; 0x173e <vListInsertEnd>
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	89 83       	std	Y+1, r24	; 0x01
    3a80:	89 81       	ldd	r24, Y+1	; 0x01
    3a82:	0f 90       	pop	r0
    3a84:	0f 90       	pop	r0
    3a86:	0f 90       	pop	r0
    3a88:	0f 90       	pop	r0
    3a8a:	0f 90       	pop	r0
    3a8c:	df 91       	pop	r29
    3a8e:	cf 91       	pop	r28
    3a90:	08 95       	ret

00003a92 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3a92:	cf 93       	push	r28
    3a94:	df 93       	push	r29
    3a96:	cd b7       	in	r28, 0x3d	; 61
    3a98:	de b7       	in	r29, 0x3e	; 62
    3a9a:	27 97       	sbiw	r28, 0x07	; 7
    3a9c:	0f b6       	in	r0, 0x3f	; 63
    3a9e:	f8 94       	cli
    3aa0:	de bf       	out	0x3e, r29	; 62
    3aa2:	0f be       	out	0x3f, r0	; 63
    3aa4:	cd bf       	out	0x3d, r28	; 61
    3aa6:	9e 83       	std	Y+6, r25	; 0x06
    3aa8:	8d 83       	std	Y+5, r24	; 0x05
    3aaa:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3aac:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <xTickCount>
    3ab0:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    3ab4:	9a 83       	std	Y+2, r25	; 0x02
    3ab6:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3ab8:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    3abc:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3ac0:	02 96       	adiw	r24, 0x02	; 2
    3ac2:	0e 94 66 0c 	call	0x18cc	; 0x18cc <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    3ac6:	29 81       	ldd	r18, Y+1	; 0x01
    3ac8:	3a 81       	ldd	r19, Y+2	; 0x02
    3aca:	8d 81       	ldd	r24, Y+5	; 0x05
    3acc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ace:	82 0f       	add	r24, r18
    3ad0:	93 1f       	adc	r25, r19
    3ad2:	9c 83       	std	Y+4, r25	; 0x04
    3ad4:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3ad6:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    3ada:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3ade:	2b 81       	ldd	r18, Y+3	; 0x03
    3ae0:	3c 81       	ldd	r19, Y+4	; 0x04
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	33 83       	std	Z+3, r19	; 0x03
    3ae6:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    3ae8:	2b 81       	ldd	r18, Y+3	; 0x03
    3aea:	3c 81       	ldd	r19, Y+4	; 0x04
    3aec:	89 81       	ldd	r24, Y+1	; 0x01
    3aee:	9a 81       	ldd	r25, Y+2	; 0x02
    3af0:	28 17       	cp	r18, r24
    3af2:	39 07       	cpc	r19, r25
    3af4:	78 f4       	brcc	.+30     	; 0x3b14 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3af6:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    3afa:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3afe:	9c 01       	movw	r18, r24
    3b00:	2e 5f       	subi	r18, 0xFE	; 254
    3b02:	3f 4f       	sbci	r19, 0xFF	; 255
    3b04:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <pxOverflowDelayedTaskList>
    3b08:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <pxOverflowDelayedTaskList+0x1>
    3b0c:	b9 01       	movw	r22, r18
    3b0e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3b12:	1d c0       	rjmp	.+58     	; 0x3b4e <prvAddCurrentTaskToDelayedList+0xbc>
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3b14:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    3b18:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3b1c:	9c 01       	movw	r18, r24
    3b1e:	2e 5f       	subi	r18, 0xFE	; 254
    3b20:	3f 4f       	sbci	r19, 0xFF	; 255
    3b22:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    3b26:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    3b2a:	b9 01       	movw	r22, r18
    3b2c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    3b30:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <xNextTaskUnblockTime>
    3b34:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3b38:	2b 81       	ldd	r18, Y+3	; 0x03
    3b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    3b3c:	28 17       	cp	r18, r24
    3b3e:	39 07       	cpc	r19, r25
    3b40:	30 f4       	brcc	.+12     	; 0x3b4e <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    3b42:	8b 81       	ldd	r24, Y+3	; 0x03
    3b44:	9c 81       	ldd	r25, Y+4	; 0x04
    3b46:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3b4a:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3b4e:	00 00       	nop
    3b50:	27 96       	adiw	r28, 0x07	; 7
    3b52:	0f b6       	in	r0, 0x3f	; 63
    3b54:	f8 94       	cli
    3b56:	de bf       	out	0x3e, r29	; 62
    3b58:	0f be       	out	0x3f, r0	; 63
    3b5a:	cd bf       	out	0x3d, r28	; 61
    3b5c:	df 91       	pop	r29
    3b5e:	cf 91       	pop	r28
    3b60:	08 95       	ret

00003b62 <__subsf3>:
    3b62:	50 58       	subi	r21, 0x80	; 128

00003b64 <__addsf3>:
    3b64:	bb 27       	eor	r27, r27
    3b66:	aa 27       	eor	r26, r26
    3b68:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__addsf3x>
    3b6c:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__fp_round>
    3b70:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__fp_pscA>
    3b74:	38 f0       	brcs	.+14     	; 0x3b84 <__addsf3+0x20>
    3b76:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__fp_pscB>
    3b7a:	20 f0       	brcs	.+8      	; 0x3b84 <__addsf3+0x20>
    3b7c:	39 f4       	brne	.+14     	; 0x3b8c <__addsf3+0x28>
    3b7e:	9f 3f       	cpi	r25, 0xFF	; 255
    3b80:	19 f4       	brne	.+6      	; 0x3b88 <__addsf3+0x24>
    3b82:	26 f4       	brtc	.+8      	; 0x3b8c <__addsf3+0x28>
    3b84:	0c 94 97 1e 	jmp	0x3d2e	; 0x3d2e <__fp_nan>
    3b88:	0e f4       	brtc	.+2      	; 0x3b8c <__addsf3+0x28>
    3b8a:	e0 95       	com	r30
    3b8c:	e7 fb       	bst	r30, 7
    3b8e:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__fp_inf>

00003b92 <__addsf3x>:
    3b92:	e9 2f       	mov	r30, r25
    3b94:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__fp_split3>
    3b98:	58 f3       	brcs	.-42     	; 0x3b70 <__addsf3+0xc>
    3b9a:	ba 17       	cp	r27, r26
    3b9c:	62 07       	cpc	r22, r18
    3b9e:	73 07       	cpc	r23, r19
    3ba0:	84 07       	cpc	r24, r20
    3ba2:	95 07       	cpc	r25, r21
    3ba4:	20 f0       	brcs	.+8      	; 0x3bae <__addsf3x+0x1c>
    3ba6:	79 f4       	brne	.+30     	; 0x3bc6 <__addsf3x+0x34>
    3ba8:	a6 f5       	brtc	.+104    	; 0x3c12 <__addsf3x+0x80>
    3baa:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__fp_zero>
    3bae:	0e f4       	brtc	.+2      	; 0x3bb2 <__addsf3x+0x20>
    3bb0:	e0 95       	com	r30
    3bb2:	0b 2e       	mov	r0, r27
    3bb4:	ba 2f       	mov	r27, r26
    3bb6:	a0 2d       	mov	r26, r0
    3bb8:	0b 01       	movw	r0, r22
    3bba:	b9 01       	movw	r22, r18
    3bbc:	90 01       	movw	r18, r0
    3bbe:	0c 01       	movw	r0, r24
    3bc0:	ca 01       	movw	r24, r20
    3bc2:	a0 01       	movw	r20, r0
    3bc4:	11 24       	eor	r1, r1
    3bc6:	ff 27       	eor	r31, r31
    3bc8:	59 1b       	sub	r21, r25
    3bca:	99 f0       	breq	.+38     	; 0x3bf2 <__addsf3x+0x60>
    3bcc:	59 3f       	cpi	r21, 0xF9	; 249
    3bce:	50 f4       	brcc	.+20     	; 0x3be4 <__addsf3x+0x52>
    3bd0:	50 3e       	cpi	r21, 0xE0	; 224
    3bd2:	68 f1       	brcs	.+90     	; 0x3c2e <__addsf3x+0x9c>
    3bd4:	1a 16       	cp	r1, r26
    3bd6:	f0 40       	sbci	r31, 0x00	; 0
    3bd8:	a2 2f       	mov	r26, r18
    3bda:	23 2f       	mov	r18, r19
    3bdc:	34 2f       	mov	r19, r20
    3bde:	44 27       	eor	r20, r20
    3be0:	58 5f       	subi	r21, 0xF8	; 248
    3be2:	f3 cf       	rjmp	.-26     	; 0x3bca <__addsf3x+0x38>
    3be4:	46 95       	lsr	r20
    3be6:	37 95       	ror	r19
    3be8:	27 95       	ror	r18
    3bea:	a7 95       	ror	r26
    3bec:	f0 40       	sbci	r31, 0x00	; 0
    3bee:	53 95       	inc	r21
    3bf0:	c9 f7       	brne	.-14     	; 0x3be4 <__addsf3x+0x52>
    3bf2:	7e f4       	brtc	.+30     	; 0x3c12 <__addsf3x+0x80>
    3bf4:	1f 16       	cp	r1, r31
    3bf6:	ba 0b       	sbc	r27, r26
    3bf8:	62 0b       	sbc	r22, r18
    3bfa:	73 0b       	sbc	r23, r19
    3bfc:	84 0b       	sbc	r24, r20
    3bfe:	ba f0       	brmi	.+46     	; 0x3c2e <__addsf3x+0x9c>
    3c00:	91 50       	subi	r25, 0x01	; 1
    3c02:	a1 f0       	breq	.+40     	; 0x3c2c <__addsf3x+0x9a>
    3c04:	ff 0f       	add	r31, r31
    3c06:	bb 1f       	adc	r27, r27
    3c08:	66 1f       	adc	r22, r22
    3c0a:	77 1f       	adc	r23, r23
    3c0c:	88 1f       	adc	r24, r24
    3c0e:	c2 f7       	brpl	.-16     	; 0x3c00 <__addsf3x+0x6e>
    3c10:	0e c0       	rjmp	.+28     	; 0x3c2e <__addsf3x+0x9c>
    3c12:	ba 0f       	add	r27, r26
    3c14:	62 1f       	adc	r22, r18
    3c16:	73 1f       	adc	r23, r19
    3c18:	84 1f       	adc	r24, r20
    3c1a:	48 f4       	brcc	.+18     	; 0x3c2e <__addsf3x+0x9c>
    3c1c:	87 95       	ror	r24
    3c1e:	77 95       	ror	r23
    3c20:	67 95       	ror	r22
    3c22:	b7 95       	ror	r27
    3c24:	f7 95       	ror	r31
    3c26:	9e 3f       	cpi	r25, 0xFE	; 254
    3c28:	08 f0       	brcs	.+2      	; 0x3c2c <__addsf3x+0x9a>
    3c2a:	b0 cf       	rjmp	.-160    	; 0x3b8c <__addsf3+0x28>
    3c2c:	93 95       	inc	r25
    3c2e:	88 0f       	add	r24, r24
    3c30:	08 f0       	brcs	.+2      	; 0x3c34 <__addsf3x+0xa2>
    3c32:	99 27       	eor	r25, r25
    3c34:	ee 0f       	add	r30, r30
    3c36:	97 95       	ror	r25
    3c38:	87 95       	ror	r24
    3c3a:	08 95       	ret

00003c3c <__fixsfsi>:
    3c3c:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__fixunssfsi>
    3c40:	68 94       	set
    3c42:	b1 11       	cpse	r27, r1
    3c44:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__fp_szero>
    3c48:	08 95       	ret

00003c4a <__fixunssfsi>:
    3c4a:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <__fp_splitA>
    3c4e:	88 f0       	brcs	.+34     	; 0x3c72 <__fixunssfsi+0x28>
    3c50:	9f 57       	subi	r25, 0x7F	; 127
    3c52:	98 f0       	brcs	.+38     	; 0x3c7a <__fixunssfsi+0x30>
    3c54:	b9 2f       	mov	r27, r25
    3c56:	99 27       	eor	r25, r25
    3c58:	b7 51       	subi	r27, 0x17	; 23
    3c5a:	b0 f0       	brcs	.+44     	; 0x3c88 <__fixunssfsi+0x3e>
    3c5c:	e1 f0       	breq	.+56     	; 0x3c96 <__fixunssfsi+0x4c>
    3c5e:	66 0f       	add	r22, r22
    3c60:	77 1f       	adc	r23, r23
    3c62:	88 1f       	adc	r24, r24
    3c64:	99 1f       	adc	r25, r25
    3c66:	1a f0       	brmi	.+6      	; 0x3c6e <__fixunssfsi+0x24>
    3c68:	ba 95       	dec	r27
    3c6a:	c9 f7       	brne	.-14     	; 0x3c5e <__fixunssfsi+0x14>
    3c6c:	14 c0       	rjmp	.+40     	; 0x3c96 <__fixunssfsi+0x4c>
    3c6e:	b1 30       	cpi	r27, 0x01	; 1
    3c70:	91 f0       	breq	.+36     	; 0x3c96 <__fixunssfsi+0x4c>
    3c72:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <__fp_zero>
    3c76:	b1 e0       	ldi	r27, 0x01	; 1
    3c78:	08 95       	ret
    3c7a:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__fp_zero>
    3c7e:	67 2f       	mov	r22, r23
    3c80:	78 2f       	mov	r23, r24
    3c82:	88 27       	eor	r24, r24
    3c84:	b8 5f       	subi	r27, 0xF8	; 248
    3c86:	39 f0       	breq	.+14     	; 0x3c96 <__fixunssfsi+0x4c>
    3c88:	b9 3f       	cpi	r27, 0xF9	; 249
    3c8a:	cc f3       	brlt	.-14     	; 0x3c7e <__fixunssfsi+0x34>
    3c8c:	86 95       	lsr	r24
    3c8e:	77 95       	ror	r23
    3c90:	67 95       	ror	r22
    3c92:	b3 95       	inc	r27
    3c94:	d9 f7       	brne	.-10     	; 0x3c8c <__fixunssfsi+0x42>
    3c96:	3e f4       	brtc	.+14     	; 0x3ca6 <__fixunssfsi+0x5c>
    3c98:	90 95       	com	r25
    3c9a:	80 95       	com	r24
    3c9c:	70 95       	com	r23
    3c9e:	61 95       	neg	r22
    3ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca6:	08 95       	ret

00003ca8 <__floatunsisf>:
    3ca8:	e8 94       	clt
    3caa:	09 c0       	rjmp	.+18     	; 0x3cbe <__floatsisf+0x12>

00003cac <__floatsisf>:
    3cac:	97 fb       	bst	r25, 7
    3cae:	3e f4       	brtc	.+14     	; 0x3cbe <__floatsisf+0x12>
    3cb0:	90 95       	com	r25
    3cb2:	80 95       	com	r24
    3cb4:	70 95       	com	r23
    3cb6:	61 95       	neg	r22
    3cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cba:	8f 4f       	sbci	r24, 0xFF	; 255
    3cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3cbe:	99 23       	and	r25, r25
    3cc0:	a9 f0       	breq	.+42     	; 0x3cec <__floatsisf+0x40>
    3cc2:	f9 2f       	mov	r31, r25
    3cc4:	96 e9       	ldi	r25, 0x96	; 150
    3cc6:	bb 27       	eor	r27, r27
    3cc8:	93 95       	inc	r25
    3cca:	f6 95       	lsr	r31
    3ccc:	87 95       	ror	r24
    3cce:	77 95       	ror	r23
    3cd0:	67 95       	ror	r22
    3cd2:	b7 95       	ror	r27
    3cd4:	f1 11       	cpse	r31, r1
    3cd6:	f8 cf       	rjmp	.-16     	; 0x3cc8 <__floatsisf+0x1c>
    3cd8:	fa f4       	brpl	.+62     	; 0x3d18 <__floatsisf+0x6c>
    3cda:	bb 0f       	add	r27, r27
    3cdc:	11 f4       	brne	.+4      	; 0x3ce2 <__floatsisf+0x36>
    3cde:	60 ff       	sbrs	r22, 0
    3ce0:	1b c0       	rjmp	.+54     	; 0x3d18 <__floatsisf+0x6c>
    3ce2:	6f 5f       	subi	r22, 0xFF	; 255
    3ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cea:	16 c0       	rjmp	.+44     	; 0x3d18 <__floatsisf+0x6c>
    3cec:	88 23       	and	r24, r24
    3cee:	11 f0       	breq	.+4      	; 0x3cf4 <__floatsisf+0x48>
    3cf0:	96 e9       	ldi	r25, 0x96	; 150
    3cf2:	11 c0       	rjmp	.+34     	; 0x3d16 <__floatsisf+0x6a>
    3cf4:	77 23       	and	r23, r23
    3cf6:	21 f0       	breq	.+8      	; 0x3d00 <__floatsisf+0x54>
    3cf8:	9e e8       	ldi	r25, 0x8E	; 142
    3cfa:	87 2f       	mov	r24, r23
    3cfc:	76 2f       	mov	r23, r22
    3cfe:	05 c0       	rjmp	.+10     	; 0x3d0a <__floatsisf+0x5e>
    3d00:	66 23       	and	r22, r22
    3d02:	71 f0       	breq	.+28     	; 0x3d20 <__floatsisf+0x74>
    3d04:	96 e8       	ldi	r25, 0x86	; 134
    3d06:	86 2f       	mov	r24, r22
    3d08:	70 e0       	ldi	r23, 0x00	; 0
    3d0a:	60 e0       	ldi	r22, 0x00	; 0
    3d0c:	2a f0       	brmi	.+10     	; 0x3d18 <__floatsisf+0x6c>
    3d0e:	9a 95       	dec	r25
    3d10:	66 0f       	add	r22, r22
    3d12:	77 1f       	adc	r23, r23
    3d14:	88 1f       	adc	r24, r24
    3d16:	da f7       	brpl	.-10     	; 0x3d0e <__floatsisf+0x62>
    3d18:	88 0f       	add	r24, r24
    3d1a:	96 95       	lsr	r25
    3d1c:	87 95       	ror	r24
    3d1e:	97 f9       	bld	r25, 7
    3d20:	08 95       	ret

00003d22 <__fp_inf>:
    3d22:	97 f9       	bld	r25, 7
    3d24:	9f 67       	ori	r25, 0x7F	; 127
    3d26:	80 e8       	ldi	r24, 0x80	; 128
    3d28:	70 e0       	ldi	r23, 0x00	; 0
    3d2a:	60 e0       	ldi	r22, 0x00	; 0
    3d2c:	08 95       	ret

00003d2e <__fp_nan>:
    3d2e:	9f ef       	ldi	r25, 0xFF	; 255
    3d30:	80 ec       	ldi	r24, 0xC0	; 192
    3d32:	08 95       	ret

00003d34 <__fp_pscA>:
    3d34:	00 24       	eor	r0, r0
    3d36:	0a 94       	dec	r0
    3d38:	16 16       	cp	r1, r22
    3d3a:	17 06       	cpc	r1, r23
    3d3c:	18 06       	cpc	r1, r24
    3d3e:	09 06       	cpc	r0, r25
    3d40:	08 95       	ret

00003d42 <__fp_pscB>:
    3d42:	00 24       	eor	r0, r0
    3d44:	0a 94       	dec	r0
    3d46:	12 16       	cp	r1, r18
    3d48:	13 06       	cpc	r1, r19
    3d4a:	14 06       	cpc	r1, r20
    3d4c:	05 06       	cpc	r0, r21
    3d4e:	08 95       	ret

00003d50 <__fp_round>:
    3d50:	09 2e       	mov	r0, r25
    3d52:	03 94       	inc	r0
    3d54:	00 0c       	add	r0, r0
    3d56:	11 f4       	brne	.+4      	; 0x3d5c <__fp_round+0xc>
    3d58:	88 23       	and	r24, r24
    3d5a:	52 f0       	brmi	.+20     	; 0x3d70 <__fp_round+0x20>
    3d5c:	bb 0f       	add	r27, r27
    3d5e:	40 f4       	brcc	.+16     	; 0x3d70 <__fp_round+0x20>
    3d60:	bf 2b       	or	r27, r31
    3d62:	11 f4       	brne	.+4      	; 0x3d68 <__fp_round+0x18>
    3d64:	60 ff       	sbrs	r22, 0
    3d66:	04 c0       	rjmp	.+8      	; 0x3d70 <__fp_round+0x20>
    3d68:	6f 5f       	subi	r22, 0xFF	; 255
    3d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d70:	08 95       	ret

00003d72 <__fp_split3>:
    3d72:	57 fd       	sbrc	r21, 7
    3d74:	90 58       	subi	r25, 0x80	; 128
    3d76:	44 0f       	add	r20, r20
    3d78:	55 1f       	adc	r21, r21
    3d7a:	59 f0       	breq	.+22     	; 0x3d92 <__fp_splitA+0x10>
    3d7c:	5f 3f       	cpi	r21, 0xFF	; 255
    3d7e:	71 f0       	breq	.+28     	; 0x3d9c <__fp_splitA+0x1a>
    3d80:	47 95       	ror	r20

00003d82 <__fp_splitA>:
    3d82:	88 0f       	add	r24, r24
    3d84:	97 fb       	bst	r25, 7
    3d86:	99 1f       	adc	r25, r25
    3d88:	61 f0       	breq	.+24     	; 0x3da2 <__fp_splitA+0x20>
    3d8a:	9f 3f       	cpi	r25, 0xFF	; 255
    3d8c:	79 f0       	breq	.+30     	; 0x3dac <__fp_splitA+0x2a>
    3d8e:	87 95       	ror	r24
    3d90:	08 95       	ret
    3d92:	12 16       	cp	r1, r18
    3d94:	13 06       	cpc	r1, r19
    3d96:	14 06       	cpc	r1, r20
    3d98:	55 1f       	adc	r21, r21
    3d9a:	f2 cf       	rjmp	.-28     	; 0x3d80 <__fp_split3+0xe>
    3d9c:	46 95       	lsr	r20
    3d9e:	f1 df       	rcall	.-30     	; 0x3d82 <__fp_splitA>
    3da0:	08 c0       	rjmp	.+16     	; 0x3db2 <__fp_splitA+0x30>
    3da2:	16 16       	cp	r1, r22
    3da4:	17 06       	cpc	r1, r23
    3da6:	18 06       	cpc	r1, r24
    3da8:	99 1f       	adc	r25, r25
    3daa:	f1 cf       	rjmp	.-30     	; 0x3d8e <__fp_splitA+0xc>
    3dac:	86 95       	lsr	r24
    3dae:	71 05       	cpc	r23, r1
    3db0:	61 05       	cpc	r22, r1
    3db2:	08 94       	sec
    3db4:	08 95       	ret

00003db6 <__fp_zero>:
    3db6:	e8 94       	clt

00003db8 <__fp_szero>:
    3db8:	bb 27       	eor	r27, r27
    3dba:	66 27       	eor	r22, r22
    3dbc:	77 27       	eor	r23, r23
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	97 f9       	bld	r25, 7
    3dc2:	08 95       	ret

00003dc4 <pow>:
    3dc4:	fa 01       	movw	r30, r20
    3dc6:	ee 0f       	add	r30, r30
    3dc8:	ff 1f       	adc	r31, r31
    3dca:	30 96       	adiw	r30, 0x00	; 0
    3dcc:	21 05       	cpc	r18, r1
    3dce:	31 05       	cpc	r19, r1
    3dd0:	a1 f1       	breq	.+104    	; 0x3e3a <pow+0x76>
    3dd2:	61 15       	cp	r22, r1
    3dd4:	71 05       	cpc	r23, r1
    3dd6:	61 f4       	brne	.+24     	; 0x3df0 <pow+0x2c>
    3dd8:	80 38       	cpi	r24, 0x80	; 128
    3dda:	bf e3       	ldi	r27, 0x3F	; 63
    3ddc:	9b 07       	cpc	r25, r27
    3dde:	49 f1       	breq	.+82     	; 0x3e32 <pow+0x6e>
    3de0:	68 94       	set
    3de2:	90 38       	cpi	r25, 0x80	; 128
    3de4:	81 05       	cpc	r24, r1
    3de6:	61 f0       	breq	.+24     	; 0x3e00 <pow+0x3c>
    3de8:	80 38       	cpi	r24, 0x80	; 128
    3dea:	bf ef       	ldi	r27, 0xFF	; 255
    3dec:	9b 07       	cpc	r25, r27
    3dee:	41 f0       	breq	.+16     	; 0x3e00 <pow+0x3c>
    3df0:	99 23       	and	r25, r25
    3df2:	4a f5       	brpl	.+82     	; 0x3e46 <pow+0x82>
    3df4:	ff 3f       	cpi	r31, 0xFF	; 255
    3df6:	e1 05       	cpc	r30, r1
    3df8:	31 05       	cpc	r19, r1
    3dfa:	21 05       	cpc	r18, r1
    3dfc:	19 f1       	breq	.+70     	; 0x3e44 <pow+0x80>
    3dfe:	e8 94       	clt
    3e00:	08 94       	sec
    3e02:	e7 95       	ror	r30
    3e04:	d9 01       	movw	r26, r18
    3e06:	aa 23       	and	r26, r26
    3e08:	29 f4       	brne	.+10     	; 0x3e14 <pow+0x50>
    3e0a:	ab 2f       	mov	r26, r27
    3e0c:	be 2f       	mov	r27, r30
    3e0e:	f8 5f       	subi	r31, 0xF8	; 248
    3e10:	d0 f3       	brcs	.-12     	; 0x3e06 <pow+0x42>
    3e12:	10 c0       	rjmp	.+32     	; 0x3e34 <pow+0x70>
    3e14:	ff 5f       	subi	r31, 0xFF	; 255
    3e16:	70 f4       	brcc	.+28     	; 0x3e34 <pow+0x70>
    3e18:	a6 95       	lsr	r26
    3e1a:	e0 f7       	brcc	.-8      	; 0x3e14 <pow+0x50>
    3e1c:	f7 39       	cpi	r31, 0x97	; 151
    3e1e:	50 f0       	brcs	.+20     	; 0x3e34 <pow+0x70>
    3e20:	19 f0       	breq	.+6      	; 0x3e28 <pow+0x64>
    3e22:	ff 3a       	cpi	r31, 0xAF	; 175
    3e24:	38 f4       	brcc	.+14     	; 0x3e34 <pow+0x70>
    3e26:	9f 77       	andi	r25, 0x7F	; 127
    3e28:	9f 93       	push	r25
    3e2a:	0d d0       	rcall	.+26     	; 0x3e46 <pow+0x82>
    3e2c:	0f 90       	pop	r0
    3e2e:	07 fc       	sbrc	r0, 7
    3e30:	90 58       	subi	r25, 0x80	; 128
    3e32:	08 95       	ret
    3e34:	46 f0       	brts	.+16     	; 0x3e46 <pow+0x82>
    3e36:	0c 94 97 1e 	jmp	0x3d2e	; 0x3d2e <__fp_nan>
    3e3a:	60 e0       	ldi	r22, 0x00	; 0
    3e3c:	70 e0       	ldi	r23, 0x00	; 0
    3e3e:	80 e8       	ldi	r24, 0x80	; 128
    3e40:	9f e3       	ldi	r25, 0x3F	; 63
    3e42:	08 95       	ret
    3e44:	4f e7       	ldi	r20, 0x7F	; 127
    3e46:	9f 77       	andi	r25, 0x7F	; 127
    3e48:	5f 93       	push	r21
    3e4a:	4f 93       	push	r20
    3e4c:	3f 93       	push	r19
    3e4e:	2f 93       	push	r18
    3e50:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <log>
    3e54:	2f 91       	pop	r18
    3e56:	3f 91       	pop	r19
    3e58:	4f 91       	pop	r20
    3e5a:	5f 91       	pop	r21
    3e5c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <__mulsf3>
    3e60:	0c 94 3a 1f 	jmp	0x3e74	; 0x3e74 <exp>
    3e64:	29 f4       	brne	.+10     	; 0x3e70 <pow+0xac>
    3e66:	16 f0       	brts	.+4      	; 0x3e6c <pow+0xa8>
    3e68:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__fp_inf>
    3e6c:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__fp_zero>
    3e70:	0c 94 97 1e 	jmp	0x3d2e	; 0x3d2e <__fp_nan>

00003e74 <exp>:
    3e74:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <__fp_splitA>
    3e78:	a8 f3       	brcs	.-22     	; 0x3e64 <pow+0xa0>
    3e7a:	96 38       	cpi	r25, 0x86	; 134
    3e7c:	a0 f7       	brcc	.-24     	; 0x3e66 <pow+0xa2>
    3e7e:	07 f8       	bld	r0, 7
    3e80:	0f 92       	push	r0
    3e82:	e8 94       	clt
    3e84:	2b e3       	ldi	r18, 0x3B	; 59
    3e86:	3a ea       	ldi	r19, 0xAA	; 170
    3e88:	48 eb       	ldi	r20, 0xB8	; 184
    3e8a:	5f e7       	ldi	r21, 0x7F	; 127
    3e8c:	0e 94 6f 20 	call	0x40de	; 0x40de <__mulsf3_pse>
    3e90:	0f 92       	push	r0
    3e92:	0f 92       	push	r0
    3e94:	0f 92       	push	r0
    3e96:	4d b7       	in	r20, 0x3d	; 61
    3e98:	5e b7       	in	r21, 0x3e	; 62
    3e9a:	0f 92       	push	r0
    3e9c:	0e 94 25 20 	call	0x404a	; 0x404a <modf>
    3ea0:	ec e7       	ldi	r30, 0x7C	; 124
    3ea2:	f0 e0       	ldi	r31, 0x00	; 0
    3ea4:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <__fp_powser>
    3ea8:	4f 91       	pop	r20
    3eaa:	5f 91       	pop	r21
    3eac:	ef 91       	pop	r30
    3eae:	ff 91       	pop	r31
    3eb0:	e5 95       	asr	r30
    3eb2:	ee 1f       	adc	r30, r30
    3eb4:	ff 1f       	adc	r31, r31
    3eb6:	49 f0       	breq	.+18     	; 0x3eca <exp+0x56>
    3eb8:	fe 57       	subi	r31, 0x7E	; 126
    3eba:	e0 68       	ori	r30, 0x80	; 128
    3ebc:	44 27       	eor	r20, r20
    3ebe:	ee 0f       	add	r30, r30
    3ec0:	44 1f       	adc	r20, r20
    3ec2:	fa 95       	dec	r31
    3ec4:	e1 f7       	brne	.-8      	; 0x3ebe <exp+0x4a>
    3ec6:	41 95       	neg	r20
    3ec8:	55 0b       	sbc	r21, r21
    3eca:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <ldexp>
    3ece:	0f 90       	pop	r0
    3ed0:	07 fe       	sbrs	r0, 7
    3ed2:	0c 94 93 1f 	jmp	0x3f26	; 0x3f26 <inverse>
    3ed6:	08 95       	ret

00003ed8 <__fp_powser>:
    3ed8:	df 93       	push	r29
    3eda:	cf 93       	push	r28
    3edc:	1f 93       	push	r17
    3ede:	0f 93       	push	r16
    3ee0:	ff 92       	push	r15
    3ee2:	ef 92       	push	r14
    3ee4:	df 92       	push	r13
    3ee6:	7b 01       	movw	r14, r22
    3ee8:	8c 01       	movw	r16, r24
    3eea:	68 94       	set
    3eec:	06 c0       	rjmp	.+12     	; 0x3efa <__fp_powser+0x22>
    3eee:	da 2e       	mov	r13, r26
    3ef0:	ef 01       	movw	r28, r30
    3ef2:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__mulsf3x>
    3ef6:	fe 01       	movw	r30, r28
    3ef8:	e8 94       	clt
    3efa:	a5 91       	lpm	r26, Z+
    3efc:	25 91       	lpm	r18, Z+
    3efe:	35 91       	lpm	r19, Z+
    3f00:	45 91       	lpm	r20, Z+
    3f02:	55 91       	lpm	r21, Z+
    3f04:	a6 f3       	brts	.-24     	; 0x3eee <__fp_powser+0x16>
    3f06:	ef 01       	movw	r28, r30
    3f08:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__addsf3x>
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	97 01       	movw	r18, r14
    3f10:	a8 01       	movw	r20, r16
    3f12:	da 94       	dec	r13
    3f14:	69 f7       	brne	.-38     	; 0x3ef0 <__fp_powser+0x18>
    3f16:	df 90       	pop	r13
    3f18:	ef 90       	pop	r14
    3f1a:	ff 90       	pop	r15
    3f1c:	0f 91       	pop	r16
    3f1e:	1f 91       	pop	r17
    3f20:	cf 91       	pop	r28
    3f22:	df 91       	pop	r29
    3f24:	08 95       	ret

00003f26 <inverse>:
    3f26:	9b 01       	movw	r18, r22
    3f28:	ac 01       	movw	r20, r24
    3f2a:	60 e0       	ldi	r22, 0x00	; 0
    3f2c:	70 e0       	ldi	r23, 0x00	; 0
    3f2e:	80 e8       	ldi	r24, 0x80	; 128
    3f30:	9f e3       	ldi	r25, 0x3F	; 63
    3f32:	0c 94 c6 20 	jmp	0x418c	; 0x418c <__divsf3>
    3f36:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__fp_inf>
    3f3a:	0c 94 38 21 	jmp	0x4270	; 0x4270 <__fp_mpack>

00003f3e <ldexp>:
    3f3e:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <__fp_splitA>
    3f42:	d8 f3       	brcs	.-10     	; 0x3f3a <inverse+0x14>
    3f44:	99 23       	and	r25, r25
    3f46:	c9 f3       	breq	.-14     	; 0x3f3a <inverse+0x14>
    3f48:	94 0f       	add	r25, r20
    3f4a:	51 1d       	adc	r21, r1
    3f4c:	a3 f3       	brvs	.-24     	; 0x3f36 <inverse+0x10>
    3f4e:	91 50       	subi	r25, 0x01	; 1
    3f50:	50 40       	sbci	r21, 0x00	; 0
    3f52:	94 f0       	brlt	.+36     	; 0x3f78 <ldexp+0x3a>
    3f54:	59 f0       	breq	.+22     	; 0x3f6c <ldexp+0x2e>
    3f56:	88 23       	and	r24, r24
    3f58:	32 f0       	brmi	.+12     	; 0x3f66 <ldexp+0x28>
    3f5a:	66 0f       	add	r22, r22
    3f5c:	77 1f       	adc	r23, r23
    3f5e:	88 1f       	adc	r24, r24
    3f60:	91 50       	subi	r25, 0x01	; 1
    3f62:	50 40       	sbci	r21, 0x00	; 0
    3f64:	c1 f7       	brne	.-16     	; 0x3f56 <ldexp+0x18>
    3f66:	9e 3f       	cpi	r25, 0xFE	; 254
    3f68:	51 05       	cpc	r21, r1
    3f6a:	2c f7       	brge	.-54     	; 0x3f36 <inverse+0x10>
    3f6c:	88 0f       	add	r24, r24
    3f6e:	91 1d       	adc	r25, r1
    3f70:	96 95       	lsr	r25
    3f72:	87 95       	ror	r24
    3f74:	97 f9       	bld	r25, 7
    3f76:	08 95       	ret
    3f78:	5f 3f       	cpi	r21, 0xFF	; 255
    3f7a:	ac f0       	brlt	.+42     	; 0x3fa6 <ldexp+0x68>
    3f7c:	98 3e       	cpi	r25, 0xE8	; 232
    3f7e:	9c f0       	brlt	.+38     	; 0x3fa6 <ldexp+0x68>
    3f80:	bb 27       	eor	r27, r27
    3f82:	86 95       	lsr	r24
    3f84:	77 95       	ror	r23
    3f86:	67 95       	ror	r22
    3f88:	b7 95       	ror	r27
    3f8a:	08 f4       	brcc	.+2      	; 0x3f8e <ldexp+0x50>
    3f8c:	b1 60       	ori	r27, 0x01	; 1
    3f8e:	93 95       	inc	r25
    3f90:	c1 f7       	brne	.-16     	; 0x3f82 <ldexp+0x44>
    3f92:	bb 0f       	add	r27, r27
    3f94:	58 f7       	brcc	.-42     	; 0x3f6c <ldexp+0x2e>
    3f96:	11 f4       	brne	.+4      	; 0x3f9c <ldexp+0x5e>
    3f98:	60 ff       	sbrs	r22, 0
    3f9a:	e8 cf       	rjmp	.-48     	; 0x3f6c <ldexp+0x2e>
    3f9c:	6f 5f       	subi	r22, 0xFF	; 255
    3f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3fa0:	8f 4f       	sbci	r24, 0xFF	; 255
    3fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    3fa4:	e3 cf       	rjmp	.-58     	; 0x3f6c <ldexp+0x2e>
    3fa6:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__fp_szero>
    3faa:	16 f0       	brts	.+4      	; 0x3fb0 <ldexp+0x72>
    3fac:	0c 94 38 21 	jmp	0x4270	; 0x4270 <__fp_mpack>
    3fb0:	0c 94 97 1e 	jmp	0x3d2e	; 0x3d2e <__fp_nan>
    3fb4:	68 94       	set
    3fb6:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__fp_inf>

00003fba <log>:
    3fba:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <__fp_splitA>
    3fbe:	a8 f3       	brcs	.-22     	; 0x3faa <ldexp+0x6c>
    3fc0:	99 23       	and	r25, r25
    3fc2:	c1 f3       	breq	.-16     	; 0x3fb4 <ldexp+0x76>
    3fc4:	ae f3       	brts	.-22     	; 0x3fb0 <ldexp+0x72>
    3fc6:	df 93       	push	r29
    3fc8:	cf 93       	push	r28
    3fca:	1f 93       	push	r17
    3fcc:	0f 93       	push	r16
    3fce:	ff 92       	push	r15
    3fd0:	c9 2f       	mov	r28, r25
    3fd2:	dd 27       	eor	r29, r29
    3fd4:	88 23       	and	r24, r24
    3fd6:	2a f0       	brmi	.+10     	; 0x3fe2 <log+0x28>
    3fd8:	21 97       	sbiw	r28, 0x01	; 1
    3fda:	66 0f       	add	r22, r22
    3fdc:	77 1f       	adc	r23, r23
    3fde:	88 1f       	adc	r24, r24
    3fe0:	da f7       	brpl	.-10     	; 0x3fd8 <log+0x1e>
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	40 e8       	ldi	r20, 0x80	; 128
    3fe8:	5f eb       	ldi	r21, 0xBF	; 191
    3fea:	9f e3       	ldi	r25, 0x3F	; 63
    3fec:	88 39       	cpi	r24, 0x98	; 152
    3fee:	20 f0       	brcs	.+8      	; 0x3ff8 <log+0x3e>
    3ff0:	80 3e       	cpi	r24, 0xE0	; 224
    3ff2:	38 f0       	brcs	.+14     	; 0x4002 <log+0x48>
    3ff4:	21 96       	adiw	r28, 0x01	; 1
    3ff6:	8f 77       	andi	r24, 0x7F	; 127
    3ff8:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__addsf3>
    3ffc:	e4 ea       	ldi	r30, 0xA4	; 164
    3ffe:	f0 e0       	ldi	r31, 0x00	; 0
    4000:	04 c0       	rjmp	.+8      	; 0x400a <log+0x50>
    4002:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__addsf3>
    4006:	e1 ed       	ldi	r30, 0xD1	; 209
    4008:	f0 e0       	ldi	r31, 0x00	; 0
    400a:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <__fp_powser>
    400e:	8b 01       	movw	r16, r22
    4010:	be 01       	movw	r22, r28
    4012:	ec 01       	movw	r28, r24
    4014:	fb 2e       	mov	r15, r27
    4016:	6f 57       	subi	r22, 0x7F	; 127
    4018:	71 09       	sbc	r23, r1
    401a:	75 95       	asr	r23
    401c:	77 1f       	adc	r23, r23
    401e:	88 0b       	sbc	r24, r24
    4020:	99 0b       	sbc	r25, r25
    4022:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__floatsisf>
    4026:	28 e1       	ldi	r18, 0x18	; 24
    4028:	32 e7       	ldi	r19, 0x72	; 114
    402a:	41 e3       	ldi	r20, 0x31	; 49
    402c:	5f e3       	ldi	r21, 0x3F	; 63
    402e:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__mulsf3x>
    4032:	af 2d       	mov	r26, r15
    4034:	98 01       	movw	r18, r16
    4036:	ae 01       	movw	r20, r28
    4038:	ff 90       	pop	r15
    403a:	0f 91       	pop	r16
    403c:	1f 91       	pop	r17
    403e:	cf 91       	pop	r28
    4040:	df 91       	pop	r29
    4042:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__addsf3x>
    4046:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__fp_round>

0000404a <modf>:
    404a:	fa 01       	movw	r30, r20
    404c:	dc 01       	movw	r26, r24
    404e:	aa 0f       	add	r26, r26
    4050:	bb 1f       	adc	r27, r27
    4052:	9b 01       	movw	r18, r22
    4054:	ac 01       	movw	r20, r24
    4056:	bf 57       	subi	r27, 0x7F	; 127
    4058:	28 f4       	brcc	.+10     	; 0x4064 <modf+0x1a>
    405a:	22 27       	eor	r18, r18
    405c:	33 27       	eor	r19, r19
    405e:	44 27       	eor	r20, r20
    4060:	50 78       	andi	r21, 0x80	; 128
    4062:	20 c0       	rjmp	.+64     	; 0x40a4 <modf+0x5a>
    4064:	b7 51       	subi	r27, 0x17	; 23
    4066:	90 f4       	brcc	.+36     	; 0x408c <modf+0x42>
    4068:	ab 2f       	mov	r26, r27
    406a:	00 24       	eor	r0, r0
    406c:	46 95       	lsr	r20
    406e:	37 95       	ror	r19
    4070:	27 95       	ror	r18
    4072:	01 1c       	adc	r0, r1
    4074:	a3 95       	inc	r26
    4076:	d2 f3       	brmi	.-12     	; 0x406c <modf+0x22>
    4078:	00 20       	and	r0, r0
    407a:	71 f0       	breq	.+28     	; 0x4098 <modf+0x4e>
    407c:	22 0f       	add	r18, r18
    407e:	33 1f       	adc	r19, r19
    4080:	44 1f       	adc	r20, r20
    4082:	b3 95       	inc	r27
    4084:	da f3       	brmi	.-10     	; 0x407c <modf+0x32>
    4086:	0e d0       	rcall	.+28     	; 0x40a4 <modf+0x5a>
    4088:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <__subsf3>
    408c:	61 30       	cpi	r22, 0x01	; 1
    408e:	71 05       	cpc	r23, r1
    4090:	a0 e8       	ldi	r26, 0x80	; 128
    4092:	8a 07       	cpc	r24, r26
    4094:	b9 46       	sbci	r27, 0x69	; 105
    4096:	30 f4       	brcc	.+12     	; 0x40a4 <modf+0x5a>
    4098:	9b 01       	movw	r18, r22
    409a:	ac 01       	movw	r20, r24
    409c:	66 27       	eor	r22, r22
    409e:	77 27       	eor	r23, r23
    40a0:	88 27       	eor	r24, r24
    40a2:	90 78       	andi	r25, 0x80	; 128
    40a4:	30 96       	adiw	r30, 0x00	; 0
    40a6:	21 f0       	breq	.+8      	; 0x40b0 <modf+0x66>
    40a8:	20 83       	st	Z, r18
    40aa:	31 83       	std	Z+1, r19	; 0x01
    40ac:	42 83       	std	Z+2, r20	; 0x02
    40ae:	53 83       	std	Z+3, r21	; 0x03
    40b0:	08 95       	ret

000040b2 <__mulsf3>:
    40b2:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__mulsf3x>
    40b6:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__fp_round>
    40ba:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__fp_pscA>
    40be:	38 f0       	brcs	.+14     	; 0x40ce <__mulsf3+0x1c>
    40c0:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__fp_pscB>
    40c4:	20 f0       	brcs	.+8      	; 0x40ce <__mulsf3+0x1c>
    40c6:	95 23       	and	r25, r21
    40c8:	11 f0       	breq	.+4      	; 0x40ce <__mulsf3+0x1c>
    40ca:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__fp_inf>
    40ce:	0c 94 97 1e 	jmp	0x3d2e	; 0x3d2e <__fp_nan>
    40d2:	11 24       	eor	r1, r1
    40d4:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__fp_szero>

000040d8 <__mulsf3x>:
    40d8:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__fp_split3>
    40dc:	70 f3       	brcs	.-36     	; 0x40ba <__mulsf3+0x8>

000040de <__mulsf3_pse>:
    40de:	95 9f       	mul	r25, r21
    40e0:	c1 f3       	breq	.-16     	; 0x40d2 <__mulsf3+0x20>
    40e2:	95 0f       	add	r25, r21
    40e4:	50 e0       	ldi	r21, 0x00	; 0
    40e6:	55 1f       	adc	r21, r21
    40e8:	62 9f       	mul	r22, r18
    40ea:	f0 01       	movw	r30, r0
    40ec:	72 9f       	mul	r23, r18
    40ee:	bb 27       	eor	r27, r27
    40f0:	f0 0d       	add	r31, r0
    40f2:	b1 1d       	adc	r27, r1
    40f4:	63 9f       	mul	r22, r19
    40f6:	aa 27       	eor	r26, r26
    40f8:	f0 0d       	add	r31, r0
    40fa:	b1 1d       	adc	r27, r1
    40fc:	aa 1f       	adc	r26, r26
    40fe:	64 9f       	mul	r22, r20
    4100:	66 27       	eor	r22, r22
    4102:	b0 0d       	add	r27, r0
    4104:	a1 1d       	adc	r26, r1
    4106:	66 1f       	adc	r22, r22
    4108:	82 9f       	mul	r24, r18
    410a:	22 27       	eor	r18, r18
    410c:	b0 0d       	add	r27, r0
    410e:	a1 1d       	adc	r26, r1
    4110:	62 1f       	adc	r22, r18
    4112:	73 9f       	mul	r23, r19
    4114:	b0 0d       	add	r27, r0
    4116:	a1 1d       	adc	r26, r1
    4118:	62 1f       	adc	r22, r18
    411a:	83 9f       	mul	r24, r19
    411c:	a0 0d       	add	r26, r0
    411e:	61 1d       	adc	r22, r1
    4120:	22 1f       	adc	r18, r18
    4122:	74 9f       	mul	r23, r20
    4124:	33 27       	eor	r19, r19
    4126:	a0 0d       	add	r26, r0
    4128:	61 1d       	adc	r22, r1
    412a:	23 1f       	adc	r18, r19
    412c:	84 9f       	mul	r24, r20
    412e:	60 0d       	add	r22, r0
    4130:	21 1d       	adc	r18, r1
    4132:	82 2f       	mov	r24, r18
    4134:	76 2f       	mov	r23, r22
    4136:	6a 2f       	mov	r22, r26
    4138:	11 24       	eor	r1, r1
    413a:	9f 57       	subi	r25, 0x7F	; 127
    413c:	50 40       	sbci	r21, 0x00	; 0
    413e:	9a f0       	brmi	.+38     	; 0x4166 <__mulsf3_pse+0x88>
    4140:	f1 f0       	breq	.+60     	; 0x417e <__mulsf3_pse+0xa0>
    4142:	88 23       	and	r24, r24
    4144:	4a f0       	brmi	.+18     	; 0x4158 <__mulsf3_pse+0x7a>
    4146:	ee 0f       	add	r30, r30
    4148:	ff 1f       	adc	r31, r31
    414a:	bb 1f       	adc	r27, r27
    414c:	66 1f       	adc	r22, r22
    414e:	77 1f       	adc	r23, r23
    4150:	88 1f       	adc	r24, r24
    4152:	91 50       	subi	r25, 0x01	; 1
    4154:	50 40       	sbci	r21, 0x00	; 0
    4156:	a9 f7       	brne	.-22     	; 0x4142 <__mulsf3_pse+0x64>
    4158:	9e 3f       	cpi	r25, 0xFE	; 254
    415a:	51 05       	cpc	r21, r1
    415c:	80 f0       	brcs	.+32     	; 0x417e <__mulsf3_pse+0xa0>
    415e:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__fp_inf>
    4162:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__fp_szero>
    4166:	5f 3f       	cpi	r21, 0xFF	; 255
    4168:	e4 f3       	brlt	.-8      	; 0x4162 <__mulsf3_pse+0x84>
    416a:	98 3e       	cpi	r25, 0xE8	; 232
    416c:	d4 f3       	brlt	.-12     	; 0x4162 <__mulsf3_pse+0x84>
    416e:	86 95       	lsr	r24
    4170:	77 95       	ror	r23
    4172:	67 95       	ror	r22
    4174:	b7 95       	ror	r27
    4176:	f7 95       	ror	r31
    4178:	e7 95       	ror	r30
    417a:	9f 5f       	subi	r25, 0xFF	; 255
    417c:	c1 f7       	brne	.-16     	; 0x416e <__mulsf3_pse+0x90>
    417e:	fe 2b       	or	r31, r30
    4180:	88 0f       	add	r24, r24
    4182:	91 1d       	adc	r25, r1
    4184:	96 95       	lsr	r25
    4186:	87 95       	ror	r24
    4188:	97 f9       	bld	r25, 7
    418a:	08 95       	ret

0000418c <__divsf3>:
    418c:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__divsf3x>
    4190:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__fp_round>
    4194:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__fp_pscB>
    4198:	58 f0       	brcs	.+22     	; 0x41b0 <__divsf3+0x24>
    419a:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__fp_pscA>
    419e:	40 f0       	brcs	.+16     	; 0x41b0 <__divsf3+0x24>
    41a0:	29 f4       	brne	.+10     	; 0x41ac <__divsf3+0x20>
    41a2:	5f 3f       	cpi	r21, 0xFF	; 255
    41a4:	29 f0       	breq	.+10     	; 0x41b0 <__divsf3+0x24>
    41a6:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__fp_inf>
    41aa:	51 11       	cpse	r21, r1
    41ac:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__fp_szero>
    41b0:	0c 94 97 1e 	jmp	0x3d2e	; 0x3d2e <__fp_nan>

000041b4 <__divsf3x>:
    41b4:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__fp_split3>
    41b8:	68 f3       	brcs	.-38     	; 0x4194 <__divsf3+0x8>

000041ba <__divsf3_pse>:
    41ba:	99 23       	and	r25, r25
    41bc:	b1 f3       	breq	.-20     	; 0x41aa <__divsf3+0x1e>
    41be:	55 23       	and	r21, r21
    41c0:	91 f3       	breq	.-28     	; 0x41a6 <__divsf3+0x1a>
    41c2:	95 1b       	sub	r25, r21
    41c4:	55 0b       	sbc	r21, r21
    41c6:	bb 27       	eor	r27, r27
    41c8:	aa 27       	eor	r26, r26
    41ca:	62 17       	cp	r22, r18
    41cc:	73 07       	cpc	r23, r19
    41ce:	84 07       	cpc	r24, r20
    41d0:	38 f0       	brcs	.+14     	; 0x41e0 <__divsf3_pse+0x26>
    41d2:	9f 5f       	subi	r25, 0xFF	; 255
    41d4:	5f 4f       	sbci	r21, 0xFF	; 255
    41d6:	22 0f       	add	r18, r18
    41d8:	33 1f       	adc	r19, r19
    41da:	44 1f       	adc	r20, r20
    41dc:	aa 1f       	adc	r26, r26
    41de:	a9 f3       	breq	.-22     	; 0x41ca <__divsf3_pse+0x10>
    41e0:	35 d0       	rcall	.+106    	; 0x424c <__divsf3_pse+0x92>
    41e2:	0e 2e       	mov	r0, r30
    41e4:	3a f0       	brmi	.+14     	; 0x41f4 <__divsf3_pse+0x3a>
    41e6:	e0 e8       	ldi	r30, 0x80	; 128
    41e8:	32 d0       	rcall	.+100    	; 0x424e <__divsf3_pse+0x94>
    41ea:	91 50       	subi	r25, 0x01	; 1
    41ec:	50 40       	sbci	r21, 0x00	; 0
    41ee:	e6 95       	lsr	r30
    41f0:	00 1c       	adc	r0, r0
    41f2:	ca f7       	brpl	.-14     	; 0x41e6 <__divsf3_pse+0x2c>
    41f4:	2b d0       	rcall	.+86     	; 0x424c <__divsf3_pse+0x92>
    41f6:	fe 2f       	mov	r31, r30
    41f8:	29 d0       	rcall	.+82     	; 0x424c <__divsf3_pse+0x92>
    41fa:	66 0f       	add	r22, r22
    41fc:	77 1f       	adc	r23, r23
    41fe:	88 1f       	adc	r24, r24
    4200:	bb 1f       	adc	r27, r27
    4202:	26 17       	cp	r18, r22
    4204:	37 07       	cpc	r19, r23
    4206:	48 07       	cpc	r20, r24
    4208:	ab 07       	cpc	r26, r27
    420a:	b0 e8       	ldi	r27, 0x80	; 128
    420c:	09 f0       	breq	.+2      	; 0x4210 <__divsf3_pse+0x56>
    420e:	bb 0b       	sbc	r27, r27
    4210:	80 2d       	mov	r24, r0
    4212:	bf 01       	movw	r22, r30
    4214:	ff 27       	eor	r31, r31
    4216:	93 58       	subi	r25, 0x83	; 131
    4218:	5f 4f       	sbci	r21, 0xFF	; 255
    421a:	3a f0       	brmi	.+14     	; 0x422a <__divsf3_pse+0x70>
    421c:	9e 3f       	cpi	r25, 0xFE	; 254
    421e:	51 05       	cpc	r21, r1
    4220:	78 f0       	brcs	.+30     	; 0x4240 <__divsf3_pse+0x86>
    4222:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__fp_inf>
    4226:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__fp_szero>
    422a:	5f 3f       	cpi	r21, 0xFF	; 255
    422c:	e4 f3       	brlt	.-8      	; 0x4226 <__divsf3_pse+0x6c>
    422e:	98 3e       	cpi	r25, 0xE8	; 232
    4230:	d4 f3       	brlt	.-12     	; 0x4226 <__divsf3_pse+0x6c>
    4232:	86 95       	lsr	r24
    4234:	77 95       	ror	r23
    4236:	67 95       	ror	r22
    4238:	b7 95       	ror	r27
    423a:	f7 95       	ror	r31
    423c:	9f 5f       	subi	r25, 0xFF	; 255
    423e:	c9 f7       	brne	.-14     	; 0x4232 <__divsf3_pse+0x78>
    4240:	88 0f       	add	r24, r24
    4242:	91 1d       	adc	r25, r1
    4244:	96 95       	lsr	r25
    4246:	87 95       	ror	r24
    4248:	97 f9       	bld	r25, 7
    424a:	08 95       	ret
    424c:	e1 e0       	ldi	r30, 0x01	; 1
    424e:	66 0f       	add	r22, r22
    4250:	77 1f       	adc	r23, r23
    4252:	88 1f       	adc	r24, r24
    4254:	bb 1f       	adc	r27, r27
    4256:	62 17       	cp	r22, r18
    4258:	73 07       	cpc	r23, r19
    425a:	84 07       	cpc	r24, r20
    425c:	ba 07       	cpc	r27, r26
    425e:	20 f0       	brcs	.+8      	; 0x4268 <__divsf3_pse+0xae>
    4260:	62 1b       	sub	r22, r18
    4262:	73 0b       	sbc	r23, r19
    4264:	84 0b       	sbc	r24, r20
    4266:	ba 0b       	sbc	r27, r26
    4268:	ee 1f       	adc	r30, r30
    426a:	88 f7       	brcc	.-30     	; 0x424e <__divsf3_pse+0x94>
    426c:	e0 95       	com	r30
    426e:	08 95       	ret

00004270 <__fp_mpack>:
    4270:	9f 3f       	cpi	r25, 0xFF	; 255
    4272:	31 f0       	breq	.+12     	; 0x4280 <__fp_mpack_finite+0xc>

00004274 <__fp_mpack_finite>:
    4274:	91 50       	subi	r25, 0x01	; 1
    4276:	20 f4       	brcc	.+8      	; 0x4280 <__fp_mpack_finite+0xc>
    4278:	87 95       	ror	r24
    427a:	77 95       	ror	r23
    427c:	67 95       	ror	r22
    427e:	b7 95       	ror	r27
    4280:	88 0f       	add	r24, r24
    4282:	91 1d       	adc	r25, r1
    4284:	96 95       	lsr	r25
    4286:	87 95       	ror	r24
    4288:	97 f9       	bld	r25, 7
    428a:	08 95       	ret

0000428c <__udivmodsi4>:
    428c:	a1 e2       	ldi	r26, 0x21	; 33
    428e:	1a 2e       	mov	r1, r26
    4290:	aa 1b       	sub	r26, r26
    4292:	bb 1b       	sub	r27, r27
    4294:	fd 01       	movw	r30, r26
    4296:	0d c0       	rjmp	.+26     	; 0x42b2 <__udivmodsi4_ep>

00004298 <__udivmodsi4_loop>:
    4298:	aa 1f       	adc	r26, r26
    429a:	bb 1f       	adc	r27, r27
    429c:	ee 1f       	adc	r30, r30
    429e:	ff 1f       	adc	r31, r31
    42a0:	a2 17       	cp	r26, r18
    42a2:	b3 07       	cpc	r27, r19
    42a4:	e4 07       	cpc	r30, r20
    42a6:	f5 07       	cpc	r31, r21
    42a8:	20 f0       	brcs	.+8      	; 0x42b2 <__udivmodsi4_ep>
    42aa:	a2 1b       	sub	r26, r18
    42ac:	b3 0b       	sbc	r27, r19
    42ae:	e4 0b       	sbc	r30, r20
    42b0:	f5 0b       	sbc	r31, r21

000042b2 <__udivmodsi4_ep>:
    42b2:	66 1f       	adc	r22, r22
    42b4:	77 1f       	adc	r23, r23
    42b6:	88 1f       	adc	r24, r24
    42b8:	99 1f       	adc	r25, r25
    42ba:	1a 94       	dec	r1
    42bc:	69 f7       	brne	.-38     	; 0x4298 <__udivmodsi4_loop>
    42be:	60 95       	com	r22
    42c0:	70 95       	com	r23
    42c2:	80 95       	com	r24
    42c4:	90 95       	com	r25
    42c6:	9b 01       	movw	r18, r22
    42c8:	ac 01       	movw	r20, r24
    42ca:	bd 01       	movw	r22, r26
    42cc:	cf 01       	movw	r24, r30
    42ce:	08 95       	ret

000042d0 <malloc>:
    42d0:	0f 93       	push	r16
    42d2:	1f 93       	push	r17
    42d4:	cf 93       	push	r28
    42d6:	df 93       	push	r29
    42d8:	82 30       	cpi	r24, 0x02	; 2
    42da:	91 05       	cpc	r25, r1
    42dc:	10 f4       	brcc	.+4      	; 0x42e2 <malloc+0x12>
    42de:	82 e0       	ldi	r24, 0x02	; 2
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	e0 91 ae 07 	lds	r30, 0x07AE	; 0x8007ae <__flp>
    42e6:	f0 91 af 07 	lds	r31, 0x07AF	; 0x8007af <__flp+0x1>
    42ea:	20 e0       	ldi	r18, 0x00	; 0
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	a0 e0       	ldi	r26, 0x00	; 0
    42f0:	b0 e0       	ldi	r27, 0x00	; 0
    42f2:	30 97       	sbiw	r30, 0x00	; 0
    42f4:	19 f1       	breq	.+70     	; 0x433c <malloc+0x6c>
    42f6:	40 81       	ld	r20, Z
    42f8:	51 81       	ldd	r21, Z+1	; 0x01
    42fa:	02 81       	ldd	r16, Z+2	; 0x02
    42fc:	13 81       	ldd	r17, Z+3	; 0x03
    42fe:	48 17       	cp	r20, r24
    4300:	59 07       	cpc	r21, r25
    4302:	c8 f0       	brcs	.+50     	; 0x4336 <malloc+0x66>
    4304:	84 17       	cp	r24, r20
    4306:	95 07       	cpc	r25, r21
    4308:	69 f4       	brne	.+26     	; 0x4324 <malloc+0x54>
    430a:	10 97       	sbiw	r26, 0x00	; 0
    430c:	31 f0       	breq	.+12     	; 0x431a <malloc+0x4a>
    430e:	12 96       	adiw	r26, 0x02	; 2
    4310:	0c 93       	st	X, r16
    4312:	12 97       	sbiw	r26, 0x02	; 2
    4314:	13 96       	adiw	r26, 0x03	; 3
    4316:	1c 93       	st	X, r17
    4318:	27 c0       	rjmp	.+78     	; 0x4368 <malloc+0x98>
    431a:	00 93 ae 07 	sts	0x07AE, r16	; 0x8007ae <__flp>
    431e:	10 93 af 07 	sts	0x07AF, r17	; 0x8007af <__flp+0x1>
    4322:	22 c0       	rjmp	.+68     	; 0x4368 <malloc+0x98>
    4324:	21 15       	cp	r18, r1
    4326:	31 05       	cpc	r19, r1
    4328:	19 f0       	breq	.+6      	; 0x4330 <malloc+0x60>
    432a:	42 17       	cp	r20, r18
    432c:	53 07       	cpc	r21, r19
    432e:	18 f4       	brcc	.+6      	; 0x4336 <malloc+0x66>
    4330:	9a 01       	movw	r18, r20
    4332:	bd 01       	movw	r22, r26
    4334:	ef 01       	movw	r28, r30
    4336:	df 01       	movw	r26, r30
    4338:	f8 01       	movw	r30, r16
    433a:	db cf       	rjmp	.-74     	; 0x42f2 <malloc+0x22>
    433c:	21 15       	cp	r18, r1
    433e:	31 05       	cpc	r19, r1
    4340:	f9 f0       	breq	.+62     	; 0x4380 <malloc+0xb0>
    4342:	28 1b       	sub	r18, r24
    4344:	39 0b       	sbc	r19, r25
    4346:	24 30       	cpi	r18, 0x04	; 4
    4348:	31 05       	cpc	r19, r1
    434a:	80 f4       	brcc	.+32     	; 0x436c <malloc+0x9c>
    434c:	8a 81       	ldd	r24, Y+2	; 0x02
    434e:	9b 81       	ldd	r25, Y+3	; 0x03
    4350:	61 15       	cp	r22, r1
    4352:	71 05       	cpc	r23, r1
    4354:	21 f0       	breq	.+8      	; 0x435e <malloc+0x8e>
    4356:	fb 01       	movw	r30, r22
    4358:	93 83       	std	Z+3, r25	; 0x03
    435a:	82 83       	std	Z+2, r24	; 0x02
    435c:	04 c0       	rjmp	.+8      	; 0x4366 <malloc+0x96>
    435e:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <__flp+0x1>
    4362:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <__flp>
    4366:	fe 01       	movw	r30, r28
    4368:	32 96       	adiw	r30, 0x02	; 2
    436a:	44 c0       	rjmp	.+136    	; 0x43f4 <malloc+0x124>
    436c:	fe 01       	movw	r30, r28
    436e:	e2 0f       	add	r30, r18
    4370:	f3 1f       	adc	r31, r19
    4372:	81 93       	st	Z+, r24
    4374:	91 93       	st	Z+, r25
    4376:	22 50       	subi	r18, 0x02	; 2
    4378:	31 09       	sbc	r19, r1
    437a:	39 83       	std	Y+1, r19	; 0x01
    437c:	28 83       	st	Y, r18
    437e:	3a c0       	rjmp	.+116    	; 0x43f4 <malloc+0x124>
    4380:	20 91 ac 07 	lds	r18, 0x07AC	; 0x8007ac <__brkval>
    4384:	30 91 ad 07 	lds	r19, 0x07AD	; 0x8007ad <__brkval+0x1>
    4388:	23 2b       	or	r18, r19
    438a:	41 f4       	brne	.+16     	; 0x439c <malloc+0xcc>
    438c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4390:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4394:	30 93 ad 07 	sts	0x07AD, r19	; 0x8007ad <__brkval+0x1>
    4398:	20 93 ac 07 	sts	0x07AC, r18	; 0x8007ac <__brkval>
    439c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    43a0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    43a4:	21 15       	cp	r18, r1
    43a6:	31 05       	cpc	r19, r1
    43a8:	41 f4       	brne	.+16     	; 0x43ba <malloc+0xea>
    43aa:	2d b7       	in	r18, 0x3d	; 61
    43ac:	3e b7       	in	r19, 0x3e	; 62
    43ae:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    43b2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    43b6:	24 1b       	sub	r18, r20
    43b8:	35 0b       	sbc	r19, r21
    43ba:	e0 91 ac 07 	lds	r30, 0x07AC	; 0x8007ac <__brkval>
    43be:	f0 91 ad 07 	lds	r31, 0x07AD	; 0x8007ad <__brkval+0x1>
    43c2:	e2 17       	cp	r30, r18
    43c4:	f3 07       	cpc	r31, r19
    43c6:	a0 f4       	brcc	.+40     	; 0x43f0 <malloc+0x120>
    43c8:	2e 1b       	sub	r18, r30
    43ca:	3f 0b       	sbc	r19, r31
    43cc:	28 17       	cp	r18, r24
    43ce:	39 07       	cpc	r19, r25
    43d0:	78 f0       	brcs	.+30     	; 0x43f0 <malloc+0x120>
    43d2:	ac 01       	movw	r20, r24
    43d4:	4e 5f       	subi	r20, 0xFE	; 254
    43d6:	5f 4f       	sbci	r21, 0xFF	; 255
    43d8:	24 17       	cp	r18, r20
    43da:	35 07       	cpc	r19, r21
    43dc:	48 f0       	brcs	.+18     	; 0x43f0 <malloc+0x120>
    43de:	4e 0f       	add	r20, r30
    43e0:	5f 1f       	adc	r21, r31
    43e2:	50 93 ad 07 	sts	0x07AD, r21	; 0x8007ad <__brkval+0x1>
    43e6:	40 93 ac 07 	sts	0x07AC, r20	; 0x8007ac <__brkval>
    43ea:	81 93       	st	Z+, r24
    43ec:	91 93       	st	Z+, r25
    43ee:	02 c0       	rjmp	.+4      	; 0x43f4 <malloc+0x124>
    43f0:	e0 e0       	ldi	r30, 0x00	; 0
    43f2:	f0 e0       	ldi	r31, 0x00	; 0
    43f4:	cf 01       	movw	r24, r30
    43f6:	df 91       	pop	r29
    43f8:	cf 91       	pop	r28
    43fa:	1f 91       	pop	r17
    43fc:	0f 91       	pop	r16
    43fe:	08 95       	ret

00004400 <free>:
    4400:	cf 93       	push	r28
    4402:	df 93       	push	r29
    4404:	00 97       	sbiw	r24, 0x00	; 0
    4406:	09 f4       	brne	.+2      	; 0x440a <free+0xa>
    4408:	81 c0       	rjmp	.+258    	; 0x450c <free+0x10c>
    440a:	fc 01       	movw	r30, r24
    440c:	32 97       	sbiw	r30, 0x02	; 2
    440e:	13 82       	std	Z+3, r1	; 0x03
    4410:	12 82       	std	Z+2, r1	; 0x02
    4412:	a0 91 ae 07 	lds	r26, 0x07AE	; 0x8007ae <__flp>
    4416:	b0 91 af 07 	lds	r27, 0x07AF	; 0x8007af <__flp+0x1>
    441a:	10 97       	sbiw	r26, 0x00	; 0
    441c:	81 f4       	brne	.+32     	; 0x443e <free+0x3e>
    441e:	20 81       	ld	r18, Z
    4420:	31 81       	ldd	r19, Z+1	; 0x01
    4422:	82 0f       	add	r24, r18
    4424:	93 1f       	adc	r25, r19
    4426:	20 91 ac 07 	lds	r18, 0x07AC	; 0x8007ac <__brkval>
    442a:	30 91 ad 07 	lds	r19, 0x07AD	; 0x8007ad <__brkval+0x1>
    442e:	28 17       	cp	r18, r24
    4430:	39 07       	cpc	r19, r25
    4432:	51 f5       	brne	.+84     	; 0x4488 <free+0x88>
    4434:	f0 93 ad 07 	sts	0x07AD, r31	; 0x8007ad <__brkval+0x1>
    4438:	e0 93 ac 07 	sts	0x07AC, r30	; 0x8007ac <__brkval>
    443c:	67 c0       	rjmp	.+206    	; 0x450c <free+0x10c>
    443e:	ed 01       	movw	r28, r26
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	ce 17       	cp	r28, r30
    4446:	df 07       	cpc	r29, r31
    4448:	40 f4       	brcc	.+16     	; 0x445a <free+0x5a>
    444a:	4a 81       	ldd	r20, Y+2	; 0x02
    444c:	5b 81       	ldd	r21, Y+3	; 0x03
    444e:	9e 01       	movw	r18, r28
    4450:	41 15       	cp	r20, r1
    4452:	51 05       	cpc	r21, r1
    4454:	f1 f0       	breq	.+60     	; 0x4492 <free+0x92>
    4456:	ea 01       	movw	r28, r20
    4458:	f5 cf       	rjmp	.-22     	; 0x4444 <free+0x44>
    445a:	d3 83       	std	Z+3, r29	; 0x03
    445c:	c2 83       	std	Z+2, r28	; 0x02
    445e:	40 81       	ld	r20, Z
    4460:	51 81       	ldd	r21, Z+1	; 0x01
    4462:	84 0f       	add	r24, r20
    4464:	95 1f       	adc	r25, r21
    4466:	c8 17       	cp	r28, r24
    4468:	d9 07       	cpc	r29, r25
    446a:	59 f4       	brne	.+22     	; 0x4482 <free+0x82>
    446c:	88 81       	ld	r24, Y
    446e:	99 81       	ldd	r25, Y+1	; 0x01
    4470:	84 0f       	add	r24, r20
    4472:	95 1f       	adc	r25, r21
    4474:	02 96       	adiw	r24, 0x02	; 2
    4476:	91 83       	std	Z+1, r25	; 0x01
    4478:	80 83       	st	Z, r24
    447a:	8a 81       	ldd	r24, Y+2	; 0x02
    447c:	9b 81       	ldd	r25, Y+3	; 0x03
    447e:	93 83       	std	Z+3, r25	; 0x03
    4480:	82 83       	std	Z+2, r24	; 0x02
    4482:	21 15       	cp	r18, r1
    4484:	31 05       	cpc	r19, r1
    4486:	29 f4       	brne	.+10     	; 0x4492 <free+0x92>
    4488:	f0 93 af 07 	sts	0x07AF, r31	; 0x8007af <__flp+0x1>
    448c:	e0 93 ae 07 	sts	0x07AE, r30	; 0x8007ae <__flp>
    4490:	3d c0       	rjmp	.+122    	; 0x450c <free+0x10c>
    4492:	e9 01       	movw	r28, r18
    4494:	fb 83       	std	Y+3, r31	; 0x03
    4496:	ea 83       	std	Y+2, r30	; 0x02
    4498:	49 91       	ld	r20, Y+
    449a:	59 91       	ld	r21, Y+
    449c:	c4 0f       	add	r28, r20
    449e:	d5 1f       	adc	r29, r21
    44a0:	ec 17       	cp	r30, r28
    44a2:	fd 07       	cpc	r31, r29
    44a4:	61 f4       	brne	.+24     	; 0x44be <free+0xbe>
    44a6:	80 81       	ld	r24, Z
    44a8:	91 81       	ldd	r25, Z+1	; 0x01
    44aa:	84 0f       	add	r24, r20
    44ac:	95 1f       	adc	r25, r21
    44ae:	02 96       	adiw	r24, 0x02	; 2
    44b0:	e9 01       	movw	r28, r18
    44b2:	99 83       	std	Y+1, r25	; 0x01
    44b4:	88 83       	st	Y, r24
    44b6:	82 81       	ldd	r24, Z+2	; 0x02
    44b8:	93 81       	ldd	r25, Z+3	; 0x03
    44ba:	9b 83       	std	Y+3, r25	; 0x03
    44bc:	8a 83       	std	Y+2, r24	; 0x02
    44be:	e0 e0       	ldi	r30, 0x00	; 0
    44c0:	f0 e0       	ldi	r31, 0x00	; 0
    44c2:	12 96       	adiw	r26, 0x02	; 2
    44c4:	8d 91       	ld	r24, X+
    44c6:	9c 91       	ld	r25, X
    44c8:	13 97       	sbiw	r26, 0x03	; 3
    44ca:	00 97       	sbiw	r24, 0x00	; 0
    44cc:	19 f0       	breq	.+6      	; 0x44d4 <free+0xd4>
    44ce:	fd 01       	movw	r30, r26
    44d0:	dc 01       	movw	r26, r24
    44d2:	f7 cf       	rjmp	.-18     	; 0x44c2 <free+0xc2>
    44d4:	8d 91       	ld	r24, X+
    44d6:	9c 91       	ld	r25, X
    44d8:	11 97       	sbiw	r26, 0x01	; 1
    44da:	9d 01       	movw	r18, r26
    44dc:	2e 5f       	subi	r18, 0xFE	; 254
    44de:	3f 4f       	sbci	r19, 0xFF	; 255
    44e0:	82 0f       	add	r24, r18
    44e2:	93 1f       	adc	r25, r19
    44e4:	20 91 ac 07 	lds	r18, 0x07AC	; 0x8007ac <__brkval>
    44e8:	30 91 ad 07 	lds	r19, 0x07AD	; 0x8007ad <__brkval+0x1>
    44ec:	28 17       	cp	r18, r24
    44ee:	39 07       	cpc	r19, r25
    44f0:	69 f4       	brne	.+26     	; 0x450c <free+0x10c>
    44f2:	30 97       	sbiw	r30, 0x00	; 0
    44f4:	29 f4       	brne	.+10     	; 0x4500 <free+0x100>
    44f6:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <__flp+0x1>
    44fa:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <__flp>
    44fe:	02 c0       	rjmp	.+4      	; 0x4504 <free+0x104>
    4500:	13 82       	std	Z+3, r1	; 0x03
    4502:	12 82       	std	Z+2, r1	; 0x02
    4504:	b0 93 ad 07 	sts	0x07AD, r27	; 0x8007ad <__brkval+0x1>
    4508:	a0 93 ac 07 	sts	0x07AC, r26	; 0x8007ac <__brkval>
    450c:	df 91       	pop	r29
    450e:	cf 91       	pop	r28
    4510:	08 95       	ret

00004512 <memcpy>:
    4512:	fb 01       	movw	r30, r22
    4514:	dc 01       	movw	r26, r24
    4516:	02 c0       	rjmp	.+4      	; 0x451c <memcpy+0xa>
    4518:	01 90       	ld	r0, Z+
    451a:	0d 92       	st	X+, r0
    451c:	41 50       	subi	r20, 0x01	; 1
    451e:	50 40       	sbci	r21, 0x00	; 0
    4520:	d8 f7       	brcc	.-10     	; 0x4518 <memcpy+0x6>
    4522:	08 95       	ret

00004524 <memset>:
    4524:	dc 01       	movw	r26, r24
    4526:	01 c0       	rjmp	.+2      	; 0x452a <memset+0x6>
    4528:	6d 93       	st	X+, r22
    452a:	41 50       	subi	r20, 0x01	; 1
    452c:	50 40       	sbci	r21, 0x00	; 0
    452e:	e0 f7       	brcc	.-8      	; 0x4528 <memset+0x4>
    4530:	08 95       	ret

00004532 <_exit>:
    4532:	f8 94       	cli

00004534 <__stop_program>:
    4534:	ff cf       	rjmp	.-2      	; 0x4534 <__stop_program>
