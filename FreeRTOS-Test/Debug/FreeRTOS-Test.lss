
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00004502  00004596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004502  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000660  00800150  00800150  000045e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000045e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004618  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f8  00000000  00000000  00004658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004240  00000000  00000000  00004b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ac  00000000  00000000  00008d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003aa7  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000139c  00000000  00000000  0000dae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cc5  00000000  00000000  0000ee80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029d3  00000000  00000000  00010b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000468  00000000  00000000  00013518  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__ctors_end>
       4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      34:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__vector_13>
      38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      40:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__vector_16>
      44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      50:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__vector_20>
      54:	0c 94 93 11 	jmp	0x2326	; 0x2326 <__vector_21>
      58:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      5c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      60:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      64:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      68:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      6c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      70:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__vector_28>
      74:	0c 94 47 12 	jmp	0x248e	; 0x248e <__vector_29>
      78:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	08 00       	.word	0x0008	; ????
      a6:	00 00       	nop
      a8:	be 92       	st	-X, r11
      aa:	24 49       	sbci	r18, 0x94	; 148
      ac:	12 3e       	cpi	r17, 0xE2	; 226
      ae:	ab aa       	std	Y+51, r10	; 0x33
      b0:	aa 2a       	or	r10, r26
      b2:	be cd       	rjmp	.-1156   	; 0xfffffc30 <__eeprom_end+0xff7efc30>
      b4:	cc cc       	rjmp	.-1640   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
      b6:	4c 3e       	cpi	r20, 0xEC	; 236
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	be ab       	std	Y+54, r27	; 0x36
      be:	aa aa       	std	Y+50, r10	; 0x32
      c0:	aa 3e       	cpi	r26, 0xEA	; 234
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	bf 00       	.word	0x00bf	; ????
      c8:	00 00       	nop
      ca:	80 3f       	cpi	r24, 0xF0	; 240
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 08       	sbc	r0, r0
      d2:	41 78       	andi	r20, 0x81	; 129
      d4:	d3 bb       	out	0x13, r29	; 19
      d6:	43 87       	std	Z+11, r20	; 0x0b
      d8:	d1 13       	cpse	r29, r17
      da:	3d 19       	sub	r19, r13
      dc:	0e 3c       	cpi	r16, 0xCE	; 206
      de:	c3 bd       	out	0x23, r28	; 35
      e0:	42 82       	std	Z+2, r4	; 0x02
      e2:	ad 2b       	or	r26, r29
      e4:	3e 68       	ori	r19, 0x8E	; 142
      e6:	ec 82       	std	Y+4, r14	; 0x04
      e8:	76 be       	out	0x36, r7	; 54
      ea:	d9 8f       	std	Y+25, r29	; 0x19
      ec:	e1 a9       	ldd	r30, Z+49	; 0x31
      ee:	3e 4c       	sbci	r19, 0xCE	; 206
      f0:	80 ef       	ldi	r24, 0xF0	; 240
      f2:	ff be       	out	0x3f, r15	; 63
      f4:	01 c4       	rjmp	.+2050   	; 0x8f8 <__LOCK_REGION_LENGTH__+0x4f8>
      f6:	ff 7f       	andi	r31, 0xFF	; 255
      f8:	3f 00       	.word	0x003f	; ????
      fa:	00 00       	nop
	...

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d8 e0       	ldi	r29, 0x08	; 8
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
     10a:	11 e0       	ldi	r17, 0x01	; 1
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	e2 e0       	ldi	r30, 0x02	; 2
     112:	f5 e4       	ldi	r31, 0x45	; 69
     114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x10>
     116:	05 90       	lpm	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	a0 35       	cpi	r26, 0x50	; 80
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0xc>

00000120 <__do_clear_bss>:
     120:	27 e0       	ldi	r18, 0x07	; 7
     122:	a0 e5       	ldi	r26, 0x50	; 80
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	a0 3b       	cpi	r26, 0xB0	; 176
     12c:	b2 07       	cpc	r27, r18
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
     130:	0e 94 cf 08 	call	0x119e	; 0x119e <main>
     134:	0c 94 7f 22 	jmp	0x44fe	; 0x44fe <_exit>

00000138 <__bad_interrupt>:
     138:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013c <make_frame>:
	vTaskDelete(NULL);
}

/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	2a 97       	sbiw	r28, 0x0a	; 10
     14a:	0f b6       	in	r0, 0x3f	; 63
     14c:	f8 94       	cli
     14e:	de bf       	out	0x3e, r29	; 62
     150:	0f be       	out	0x3f, r0	; 63
     152:	cd bf       	out	0x3d, r28	; 61
     154:	9a 87       	std	Y+10, r25	; 0x0a
     156:	89 87       	std	Y+9, r24	; 0x09
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     158:	1a 82       	std	Y+2, r1	; 0x02
     15a:	19 82       	std	Y+1, r1	; 0x01
     15c:	1a c0       	rjmp	.+52     	; 0x192 <make_frame+0x56>
			for (int i = 0; i < 14; i++) { //For each column
     15e:	1c 82       	std	Y+4, r1	; 0x04
     160:	1b 82       	std	Y+3, r1	; 0x03
     162:	0e c0       	rjmp	.+28     	; 0x180 <make_frame+0x44>
				frame_buffer[i]	= 0;
     164:	8b 81       	ldd	r24, Y+3	; 0x03
     166:	9c 81       	ldd	r25, Y+4	; 0x04
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	80 5b       	subi	r24, 0xB0	; 176
     16e:	9e 4f       	sbci	r25, 0xFE	; 254
     170:	fc 01       	movw	r30, r24
     172:	11 82       	std	Z+1, r1	; 0x01
     174:	10 82       	st	Z, r1
/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
			for (int i = 0; i < 14; i++) { //For each column
     176:	8b 81       	ldd	r24, Y+3	; 0x03
     178:	9c 81       	ldd	r25, Y+4	; 0x04
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	9c 83       	std	Y+4, r25	; 0x04
     17e:	8b 83       	std	Y+3, r24	; 0x03
     180:	8b 81       	ldd	r24, Y+3	; 0x03
     182:	9c 81       	ldd	r25, Y+4	; 0x04
     184:	0e 97       	sbiw	r24, 0x0e	; 14
     186:	74 f3       	brlt	.-36     	; 0x164 <make_frame+0x28>

/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     188:	89 81       	ldd	r24, Y+1	; 0x01
     18a:	9a 81       	ldd	r25, Y+2	; 0x02
     18c:	01 96       	adiw	r24, 0x01	; 1
     18e:	9a 83       	std	Y+2, r25	; 0x02
     190:	89 83       	std	Y+1, r24	; 0x01
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	9a 81       	ldd	r25, Y+2	; 0x02
     196:	0a 97       	sbiw	r24, 0x0a	; 10
     198:	14 f3       	brlt	.-60     	; 0x15e <make_frame+0x22>
				frame_buffer[i]	= 0;
			}
		}

		/* Create frame from gameState */
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     19a:	1e 82       	std	Y+6, r1	; 0x06
     19c:	1d 82       	std	Y+5, r1	; 0x05
     19e:	65 c0       	rjmp	.+202    	; 0x26a <make_frame+0x12e>
			for (int i = 0; i < 14; i++) { //For each column
     1a0:	18 86       	std	Y+8, r1	; 0x08
     1a2:	1f 82       	std	Y+7, r1	; 0x07
     1a4:	58 c0       	rjmp	.+176    	; 0x256 <make_frame+0x11a>
				if (gameState[i][j] != 0) { //Add up
     1a6:	8f 81       	ldd	r24, Y+7	; 0x07
     1a8:	98 85       	ldd	r25, Y+8	; 0x08
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	9c 01       	movw	r18, r24
     1b0:	22 0f       	add	r18, r18
     1b2:	33 1f       	adc	r19, r19
     1b4:	22 0f       	add	r18, r18
     1b6:	33 1f       	adc	r19, r19
     1b8:	82 0f       	add	r24, r18
     1ba:	93 1f       	adc	r25, r19
     1bc:	2d 81       	ldd	r18, Y+5	; 0x05
     1be:	3e 81       	ldd	r19, Y+6	; 0x06
     1c0:	82 0f       	add	r24, r18
     1c2:	93 1f       	adc	r25, r19
     1c4:	88 0f       	add	r24, r24
     1c6:	99 1f       	adc	r25, r25
     1c8:	84 59       	subi	r24, 0x94	; 148
     1ca:	9e 4f       	sbci	r25, 0xFE	; 254
     1cc:	fc 01       	movw	r30, r24
     1ce:	80 81       	ld	r24, Z
     1d0:	91 81       	ldd	r25, Z+1	; 0x01
     1d2:	89 2b       	or	r24, r25
     1d4:	d9 f1       	breq	.+118    	; 0x24c <make_frame+0x110>
					frame_buffer[i]	+= (int) (pow(2,  j) + 0.5);
     1d6:	8f 81       	ldd	r24, Y+7	; 0x07
     1d8:	98 85       	ldd	r25, Y+8	; 0x08
     1da:	88 0f       	add	r24, r24
     1dc:	99 1f       	adc	r25, r25
     1de:	80 5b       	subi	r24, 0xB0	; 176
     1e0:	9e 4f       	sbci	r25, 0xFE	; 254
     1e2:	fc 01       	movw	r30, r24
     1e4:	00 81       	ld	r16, Z
     1e6:	11 81       	ldd	r17, Z+1	; 0x01
     1e8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ea:	9e 81       	ldd	r25, Y+6	; 0x06
     1ec:	09 2e       	mov	r0, r25
     1ee:	00 0c       	add	r0, r0
     1f0:	aa 0b       	sbc	r26, r26
     1f2:	bb 0b       	sbc	r27, r27
     1f4:	bc 01       	movw	r22, r24
     1f6:	cd 01       	movw	r24, r26
     1f8:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <__floatsisf>
     1fc:	dc 01       	movw	r26, r24
     1fe:	cb 01       	movw	r24, r22
     200:	9c 01       	movw	r18, r24
     202:	ad 01       	movw	r20, r26
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e4       	ldi	r25, 0x40	; 64
     20c:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <pow>
     210:	dc 01       	movw	r26, r24
     212:	cb 01       	movw	r24, r22
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	5f e3       	ldi	r21, 0x3F	; 63
     21c:	bc 01       	movw	r22, r24
     21e:	cd 01       	movw	r24, r26
     220:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__addsf3>
     224:	dc 01       	movw	r26, r24
     226:	cb 01       	movw	r24, r22
     228:	bc 01       	movw	r22, r24
     22a:	cd 01       	movw	r24, r26
     22c:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <__fixsfsi>
     230:	dc 01       	movw	r26, r24
     232:	cb 01       	movw	r24, r22
     234:	98 01       	movw	r18, r16
     236:	28 0f       	add	r18, r24
     238:	39 1f       	adc	r19, r25
     23a:	8f 81       	ldd	r24, Y+7	; 0x07
     23c:	98 85       	ldd	r25, Y+8	; 0x08
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	80 5b       	subi	r24, 0xB0	; 176
     244:	9e 4f       	sbci	r25, 0xFE	; 254
     246:	fc 01       	movw	r30, r24
     248:	31 83       	std	Z+1, r19	; 0x01
     24a:	20 83       	st	Z, r18
			}
		}

		/* Create frame from gameState */
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
			for (int i = 0; i < 14; i++) { //For each column
     24c:	8f 81       	ldd	r24, Y+7	; 0x07
     24e:	98 85       	ldd	r25, Y+8	; 0x08
     250:	01 96       	adiw	r24, 0x01	; 1
     252:	98 87       	std	Y+8, r25	; 0x08
     254:	8f 83       	std	Y+7, r24	; 0x07
     256:	8f 81       	ldd	r24, Y+7	; 0x07
     258:	98 85       	ldd	r25, Y+8	; 0x08
     25a:	0e 97       	sbiw	r24, 0x0e	; 14
     25c:	0c f4       	brge	.+2      	; 0x260 <make_frame+0x124>
     25e:	a3 cf       	rjmp	.-186    	; 0x1a6 <make_frame+0x6a>
				frame_buffer[i]	= 0;
			}
		}

		/* Create frame from gameState */
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     260:	8d 81       	ldd	r24, Y+5	; 0x05
     262:	9e 81       	ldd	r25, Y+6	; 0x06
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	9e 83       	std	Y+6, r25	; 0x06
     268:	8d 83       	std	Y+5, r24	; 0x05
     26a:	8d 81       	ldd	r24, Y+5	; 0x05
     26c:	9e 81       	ldd	r25, Y+6	; 0x06
     26e:	0a 97       	sbiw	r24, 0x0a	; 10
     270:	0c f4       	brge	.+2      	; 0x274 <make_frame+0x138>
     272:	96 cf       	rjmp	.-212    	; 0x1a0 <make_frame+0x64>
					frame_buffer[i]	+= (int) (pow(2,  j) + 0.5);
				}
			}
		}

		vTaskDelay(50);
     274:	82 e3       	ldi	r24, 0x32	; 50
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 4c 18 	call	0x3098	; 0x3098 <vTaskDelay>
	}
     27c:	6d cf       	rjmp	.-294    	; 0x158 <make_frame+0x1c>

0000027e <die>:

	vTaskDelete(NULL);
}

void die()
{
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
	//TODO
	com_send_bytes("DEAD!\n", 6);
     286:	66 e0       	ldi	r22, 0x06	; 6
     288:	85 e1       	ldi	r24, 0x15	; 21
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 c7 09 	call	0x138e	; 0x138e <com_send_bytes>
}
     290:	00 00       	nop
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <move_player>:

void move_player(Player* player)
{
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	00 d0       	rcall	.+0      	; 0x29e <move_player+0x6>
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	9a 83       	std	Y+2, r25	; 0x02
     2a4:	89 83       	std	Y+1, r24	; 0x01
	switch ((*player).direction) {
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	9a 81       	ldd	r25, Y+2	; 0x02
     2aa:	fc 01       	movw	r30, r24
     2ac:	84 81       	ldd	r24, Z+4	; 0x04
     2ae:	88 2f       	mov	r24, r24
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	81 30       	cpi	r24, 0x01	; 1
     2b4:	91 05       	cpc	r25, r1
     2b6:	21 f1       	breq	.+72     	; 0x300 <move_player+0x68>
     2b8:	82 30       	cpi	r24, 0x02	; 2
     2ba:	91 05       	cpc	r25, r1
     2bc:	1c f4       	brge	.+6      	; 0x2c4 <move_player+0x2c>
     2be:	89 2b       	or	r24, r25
     2c0:	41 f0       	breq	.+16     	; 0x2d2 <move_player+0x3a>
				(*player).y++;
			break;
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     2c2:	65 c0       	rjmp	.+202    	; 0x38e <move_player+0xf6>
	com_send_bytes("DEAD!\n", 6);
}

void move_player(Player* player)
{
	switch ((*player).direction) {
     2c4:	82 30       	cpi	r24, 0x02	; 2
     2c6:	91 05       	cpc	r25, r1
     2c8:	81 f1       	breq	.+96     	; 0x32a <move_player+0x92>
     2ca:	03 97       	sbiw	r24, 0x03	; 3
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <move_player+0x38>
     2ce:	43 c0       	rjmp	.+134    	; 0x356 <move_player+0xbe>
				(*player).y++;
			break;
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     2d0:	5e c0       	rjmp	.+188    	; 0x38e <move_player+0xf6>

void move_player(Player* player)
{
	switch ((*player).direction) {
		case LEFT:
			if ((*player).x > 0)
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	9a 81       	ldd	r25, Y+2	; 0x02
     2d6:	fc 01       	movw	r30, r24
     2d8:	80 81       	ld	r24, Z
     2da:	91 81       	ldd	r25, Z+1	; 0x01
     2dc:	18 16       	cp	r1, r24
     2de:	19 06       	cpc	r1, r25
     2e0:	0c f0       	brlt	.+2      	; 0x2e4 <move_player+0x4c>
     2e2:	4e c0       	rjmp	.+156    	; 0x380 <move_player+0xe8>
				(*player).x--;
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	fc 01       	movw	r30, r24
     2ea:	80 81       	ld	r24, Z
     2ec:	91 81       	ldd	r25, Z+1	; 0x01
     2ee:	9c 01       	movw	r18, r24
     2f0:	21 50       	subi	r18, 0x01	; 1
     2f2:	31 09       	sbc	r19, r1
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	fc 01       	movw	r30, r24
     2fa:	31 83       	std	Z+1, r19	; 0x01
     2fc:	20 83       	st	Z, r18
			break;
     2fe:	40 c0       	rjmp	.+128    	; 0x380 <move_player+0xe8>
		case RIGHT:
			if ((*player).x < 14)
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	9a 81       	ldd	r25, Y+2	; 0x02
     304:	fc 01       	movw	r30, r24
     306:	80 81       	ld	r24, Z
     308:	91 81       	ldd	r25, Z+1	; 0x01
     30a:	0e 97       	sbiw	r24, 0x0e	; 14
     30c:	dc f5       	brge	.+118    	; 0x384 <move_player+0xec>
				(*player).x++;
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	9a 81       	ldd	r25, Y+2	; 0x02
     312:	fc 01       	movw	r30, r24
     314:	80 81       	ld	r24, Z
     316:	91 81       	ldd	r25, Z+1	; 0x01
     318:	9c 01       	movw	r18, r24
     31a:	2f 5f       	subi	r18, 0xFF	; 255
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	9a 81       	ldd	r25, Y+2	; 0x02
     322:	fc 01       	movw	r30, r24
     324:	31 83       	std	Z+1, r19	; 0x01
     326:	20 83       	st	Z, r18
			break;
     328:	2d c0       	rjmp	.+90     	; 0x384 <move_player+0xec>
		case UP:
			if ((*player).y > 0)
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	fc 01       	movw	r30, r24
     330:	82 81       	ldd	r24, Z+2	; 0x02
     332:	93 81       	ldd	r25, Z+3	; 0x03
     334:	18 16       	cp	r1, r24
     336:	19 06       	cpc	r1, r25
     338:	3c f5       	brge	.+78     	; 0x388 <move_player+0xf0>
				(*player).y--;
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	fc 01       	movw	r30, r24
     340:	82 81       	ldd	r24, Z+2	; 0x02
     342:	93 81       	ldd	r25, Z+3	; 0x03
     344:	9c 01       	movw	r18, r24
     346:	21 50       	subi	r18, 0x01	; 1
     348:	31 09       	sbc	r19, r1
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	9a 81       	ldd	r25, Y+2	; 0x02
     34e:	fc 01       	movw	r30, r24
     350:	33 83       	std	Z+3, r19	; 0x03
     352:	22 83       	std	Z+2, r18	; 0x02
			break;
     354:	19 c0       	rjmp	.+50     	; 0x388 <move_player+0xf0>
		case DOWN:
			if ((*player).y < 10)
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	9a 81       	ldd	r25, Y+2	; 0x02
     35a:	fc 01       	movw	r30, r24
     35c:	82 81       	ldd	r24, Z+2	; 0x02
     35e:	93 81       	ldd	r25, Z+3	; 0x03
     360:	0a 97       	sbiw	r24, 0x0a	; 10
     362:	a4 f4       	brge	.+40     	; 0x38c <move_player+0xf4>
				(*player).y++;
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	9a 81       	ldd	r25, Y+2	; 0x02
     368:	fc 01       	movw	r30, r24
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	9c 01       	movw	r18, r24
     370:	2f 5f       	subi	r18, 0xFF	; 255
     372:	3f 4f       	sbci	r19, 0xFF	; 255
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	9a 81       	ldd	r25, Y+2	; 0x02
     378:	fc 01       	movw	r30, r24
     37a:	33 83       	std	Z+3, r19	; 0x03
     37c:	22 83       	std	Z+2, r18	; 0x02
			break;
     37e:	06 c0       	rjmp	.+12     	; 0x38c <move_player+0xf4>
{
	switch ((*player).direction) {
		case LEFT:
			if ((*player).x > 0)
				(*player).x--;
			break;
     380:	00 00       	nop
     382:	05 c0       	rjmp	.+10     	; 0x38e <move_player+0xf6>
		case RIGHT:
			if ((*player).x < 14)
				(*player).x++;
			break;
     384:	00 00       	nop
     386:	03 c0       	rjmp	.+6      	; 0x38e <move_player+0xf6>
		case UP:
			if ((*player).y > 0)
				(*player).y--;
			break;
     388:	00 00       	nop
     38a:	01 c0       	rjmp	.+2      	; 0x38e <move_player+0xf6>
		case DOWN:
			if ((*player).y < 10)
				(*player).y++;
			break;
     38c:	00 00       	nop
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     38e:	00 00       	nop
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <draw_players_lines>:

/* Returns true if collision */
uint8_t draw_players_lines(Player *player, int playerId)
  {
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	63 97       	sbiw	r28, 0x13	; 19
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	99 8b       	std	Y+17, r25	; 0x11
     3b0:	88 8b       	std	Y+16, r24	; 0x10
     3b2:	7b 8b       	std	Y+19, r23	; 0x13
     3b4:	6a 8b       	std	Y+18, r22	; 0x12
	uint8_t collision = false;	
     3b6:	19 82       	std	Y+1, r1	; 0x01
	int from, to;

	for (int i = 0; i < (*player).turnsCount + 1; i++) {
     3b8:	1f 82       	std	Y+7, r1	; 0x07
     3ba:	1e 82       	std	Y+6, r1	; 0x06
     3bc:	3f c3       	rjmp	.+1662   	; 0xa3c <__stack+0x13d>

		if (i < (*player).turnsCount) { //Processing every turn
     3be:	88 89       	ldd	r24, Y+16	; 0x10
     3c0:	99 89       	ldd	r25, Y+17	; 0x11
     3c2:	8f 5b       	subi	r24, 0xBF	; 191
     3c4:	9f 4f       	sbci	r25, 0xFF	; 255
     3c6:	fc 01       	movw	r30, r24
     3c8:	20 81       	ld	r18, Z
     3ca:	31 81       	ldd	r19, Z+1	; 0x01
     3cc:	8e 81       	ldd	r24, Y+6	; 0x06
     3ce:	9f 81       	ldd	r25, Y+7	; 0x07
     3d0:	82 17       	cp	r24, r18
     3d2:	93 07       	cpc	r25, r19
     3d4:	0c f0       	brlt	.+2      	; 0x3d8 <draw_players_lines+0x3e>
     3d6:	d0 c1       	rjmp	.+928    	; 0x778 <__LOCK_REGION_LENGTH__+0x378>

			if ((*player).turns[i].x == (*player).turns[i + 1].x) { //Draw vertical line
     3d8:	28 89       	ldd	r18, Y+16	; 0x10
     3da:	39 89       	ldd	r19, Y+17	; 0x11
     3dc:	8e 81       	ldd	r24, Y+6	; 0x06
     3de:	9f 81       	ldd	r25, Y+7	; 0x07
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	82 0f       	add	r24, r18
     3ea:	93 1f       	adc	r25, r19
     3ec:	05 96       	adiw	r24, 0x05	; 5
     3ee:	fc 01       	movw	r30, r24
     3f0:	20 81       	ld	r18, Z
     3f2:	31 81       	ldd	r19, Z+1	; 0x01
     3f4:	8e 81       	ldd	r24, Y+6	; 0x06
     3f6:	9f 81       	ldd	r25, Y+7	; 0x07
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	48 89       	ldd	r20, Y+16	; 0x10
     3fc:	59 89       	ldd	r21, Y+17	; 0x11
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	84 0f       	add	r24, r20
     408:	95 1f       	adc	r25, r21
     40a:	05 96       	adiw	r24, 0x05	; 5
     40c:	fc 01       	movw	r30, r24
     40e:	80 81       	ld	r24, Z
     410:	91 81       	ldd	r25, Z+1	; 0x01
     412:	28 17       	cp	r18, r24
     414:	39 07       	cpc	r19, r25
     416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     418:	c7 c0       	rjmp	.+398    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>

				from = (*player).turns[i].y;
     41a:	28 89       	ldd	r18, Y+16	; 0x10
     41c:	39 89       	ldd	r19, Y+17	; 0x11
     41e:	8e 81       	ldd	r24, Y+6	; 0x06
     420:	9f 81       	ldd	r25, Y+7	; 0x07
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	82 0f       	add	r24, r18
     42c:	93 1f       	adc	r25, r19
     42e:	07 96       	adiw	r24, 0x07	; 7
     430:	fc 01       	movw	r30, r24
     432:	80 81       	ld	r24, Z
     434:	91 81       	ldd	r25, Z+1	; 0x01
     436:	9b 83       	std	Y+3, r25	; 0x03
     438:	8a 83       	std	Y+2, r24	; 0x02
				to = (*player).turns[i + 1].y;
     43a:	8e 81       	ldd	r24, Y+6	; 0x06
     43c:	9f 81       	ldd	r25, Y+7	; 0x07
     43e:	01 96       	adiw	r24, 0x01	; 1
     440:	28 89       	ldd	r18, Y+16	; 0x10
     442:	39 89       	ldd	r19, Y+17	; 0x11
     444:	88 0f       	add	r24, r24
     446:	99 1f       	adc	r25, r25
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	82 0f       	add	r24, r18
     44e:	93 1f       	adc	r25, r19
     450:	07 96       	adiw	r24, 0x07	; 7
     452:	fc 01       	movw	r30, r24
     454:	80 81       	ld	r24, Z
     456:	91 81       	ldd	r25, Z+1	; 0x01
     458:	9d 83       	std	Y+5, r25	; 0x05
     45a:	8c 83       	std	Y+4, r24	; 0x04

				if (from > to) {
     45c:	2a 81       	ldd	r18, Y+2	; 0x02
     45e:	3b 81       	ldd	r19, Y+3	; 0x03
     460:	8c 81       	ldd	r24, Y+4	; 0x04
     462:	9d 81       	ldd	r25, Y+5	; 0x05
     464:	82 17       	cp	r24, r18
     466:	93 07       	cpc	r25, r19
     468:	ac f4       	brge	.+42     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
					to = from;
     46a:	8a 81       	ldd	r24, Y+2	; 0x02
     46c:	9b 81       	ldd	r25, Y+3	; 0x03
     46e:	9d 83       	std	Y+5, r25	; 0x05
     470:	8c 83       	std	Y+4, r24	; 0x04
					from = (*player).turns[i + 1].y;
     472:	8e 81       	ldd	r24, Y+6	; 0x06
     474:	9f 81       	ldd	r25, Y+7	; 0x07
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	28 89       	ldd	r18, Y+16	; 0x10
     47a:	39 89       	ldd	r19, Y+17	; 0x11
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	82 0f       	add	r24, r18
     486:	93 1f       	adc	r25, r19
     488:	07 96       	adiw	r24, 0x07	; 7
     48a:	fc 01       	movw	r30, r24
     48c:	80 81       	ld	r24, Z
     48e:	91 81       	ldd	r25, Z+1	; 0x01
     490:	9b 83       	std	Y+3, r25	; 0x03
     492:	8a 83       	std	Y+2, r24	; 0x02
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     494:	8a 81       	ldd	r24, Y+2	; 0x02
     496:	9b 81       	ldd	r25, Y+3	; 0x03
     498:	99 87       	std	Y+9, r25	; 0x09
     49a:	88 87       	std	Y+8, r24	; 0x08
     49c:	7c c0       	rjmp	.+248    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
					if ((playerId == 1 && gameState[(*player).turns[i].x][j] == 2)
     49e:	8a 89       	ldd	r24, Y+18	; 0x12
     4a0:	9b 89       	ldd	r25, Y+19	; 0x13
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	21 f5       	brne	.+72     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4a6:	28 89       	ldd	r18, Y+16	; 0x10
     4a8:	39 89       	ldd	r19, Y+17	; 0x11
     4aa:	8e 81       	ldd	r24, Y+6	; 0x06
     4ac:	9f 81       	ldd	r25, Y+7	; 0x07
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	82 0f       	add	r24, r18
     4b8:	93 1f       	adc	r25, r19
     4ba:	05 96       	adiw	r24, 0x05	; 5
     4bc:	fc 01       	movw	r30, r24
     4be:	80 81       	ld	r24, Z
     4c0:	91 81       	ldd	r25, Z+1	; 0x01
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	9c 01       	movw	r18, r24
     4c8:	22 0f       	add	r18, r18
     4ca:	33 1f       	adc	r19, r19
     4cc:	22 0f       	add	r18, r18
     4ce:	33 1f       	adc	r19, r19
     4d0:	82 0f       	add	r24, r18
     4d2:	93 1f       	adc	r25, r19
     4d4:	28 85       	ldd	r18, Y+8	; 0x08
     4d6:	39 85       	ldd	r19, Y+9	; 0x09
     4d8:	82 0f       	add	r24, r18
     4da:	93 1f       	adc	r25, r19
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	84 59       	subi	r24, 0x94	; 148
     4e2:	9e 4f       	sbci	r25, 0xFE	; 254
     4e4:	fc 01       	movw	r30, r24
     4e6:	80 81       	ld	r24, Z
     4e8:	91 81       	ldd	r25, Z+1	; 0x01
     4ea:	02 97       	sbiw	r24, 0x02	; 2
     4ec:	41 f1       	breq	.+80     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
							|| (playerId == 2 && gameState[(*player).turns[i].x][j] == 1)) //Collision !
     4ee:	8a 89       	ldd	r24, Y+18	; 0x12
     4f0:	9b 89       	ldd	r25, Y+19	; 0x13
     4f2:	02 97       	sbiw	r24, 0x02	; 2
     4f4:	39 f5       	brne	.+78     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     4f6:	28 89       	ldd	r18, Y+16	; 0x10
     4f8:	39 89       	ldd	r19, Y+17	; 0x11
     4fa:	8e 81       	ldd	r24, Y+6	; 0x06
     4fc:	9f 81       	ldd	r25, Y+7	; 0x07
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	88 0f       	add	r24, r24
     504:	99 1f       	adc	r25, r25
     506:	82 0f       	add	r24, r18
     508:	93 1f       	adc	r25, r19
     50a:	05 96       	adiw	r24, 0x05	; 5
     50c:	fc 01       	movw	r30, r24
     50e:	80 81       	ld	r24, Z
     510:	91 81       	ldd	r25, Z+1	; 0x01
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	9c 01       	movw	r18, r24
     518:	22 0f       	add	r18, r18
     51a:	33 1f       	adc	r19, r19
     51c:	22 0f       	add	r18, r18
     51e:	33 1f       	adc	r19, r19
     520:	82 0f       	add	r24, r18
     522:	93 1f       	adc	r25, r19
     524:	28 85       	ldd	r18, Y+8	; 0x08
     526:	39 85       	ldd	r19, Y+9	; 0x09
     528:	82 0f       	add	r24, r18
     52a:	93 1f       	adc	r25, r19
     52c:	88 0f       	add	r24, r24
     52e:	99 1f       	adc	r25, r25
     530:	84 59       	subi	r24, 0x94	; 148
     532:	9e 4f       	sbci	r25, 0xFE	; 254
     534:	fc 01       	movw	r30, r24
     536:	80 81       	ld	r24, Z
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	19 f4       	brne	.+6      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
						collision = true;
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	89 83       	std	Y+1, r24	; 0x01
     542:	24 c0       	rjmp	.+72     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
					else
						gameState[(*player).turns[i].x][j] = playerId;
     544:	28 89       	ldd	r18, Y+16	; 0x10
     546:	39 89       	ldd	r19, Y+17	; 0x11
     548:	8e 81       	ldd	r24, Y+6	; 0x06
     54a:	9f 81       	ldd	r25, Y+7	; 0x07
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	82 0f       	add	r24, r18
     556:	93 1f       	adc	r25, r19
     558:	05 96       	adiw	r24, 0x05	; 5
     55a:	fc 01       	movw	r30, r24
     55c:	80 81       	ld	r24, Z
     55e:	91 81       	ldd	r25, Z+1	; 0x01
     560:	88 0f       	add	r24, r24
     562:	99 1f       	adc	r25, r25
     564:	9c 01       	movw	r18, r24
     566:	22 0f       	add	r18, r18
     568:	33 1f       	adc	r19, r19
     56a:	22 0f       	add	r18, r18
     56c:	33 1f       	adc	r19, r19
     56e:	82 0f       	add	r24, r18
     570:	93 1f       	adc	r25, r19
     572:	28 85       	ldd	r18, Y+8	; 0x08
     574:	39 85       	ldd	r19, Y+9	; 0x09
     576:	82 0f       	add	r24, r18
     578:	93 1f       	adc	r25, r19
     57a:	88 0f       	add	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	84 59       	subi	r24, 0x94	; 148
     580:	9e 4f       	sbci	r25, 0xFE	; 254
     582:	2a 89       	ldd	r18, Y+18	; 0x12
     584:	3b 89       	ldd	r19, Y+19	; 0x13
     586:	fc 01       	movw	r30, r24
     588:	31 83       	std	Z+1, r19	; 0x01
     58a:	20 83       	st	Z, r18
					to = from;
					from = (*player).turns[i + 1].y;
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     58c:	88 85       	ldd	r24, Y+8	; 0x08
     58e:	99 85       	ldd	r25, Y+9	; 0x09
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	99 87       	std	Y+9, r25	; 0x09
     594:	88 87       	std	Y+8, r24	; 0x08
     596:	28 85       	ldd	r18, Y+8	; 0x08
     598:	39 85       	ldd	r19, Y+9	; 0x09
     59a:	8c 81       	ldd	r24, Y+4	; 0x04
     59c:	9d 81       	ldd	r25, Y+5	; 0x05
     59e:	82 17       	cp	r24, r18
     5a0:	93 07       	cpc	r25, r19
     5a2:	0c f0       	brlt	.+2      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     5a4:	7c cf       	rjmp	.-264    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     5a6:	45 c2       	rjmp	.+1162   	; 0xa32 <__stack+0x133>
						collision = true;
					else
						gameState[(*player).turns[i].x][j] = playerId;
				}

			} else if ((*player).turns[i].y == (*player).turns[i + 1].y) { //Draw horizontal line
     5a8:	28 89       	ldd	r18, Y+16	; 0x10
     5aa:	39 89       	ldd	r19, Y+17	; 0x11
     5ac:	8e 81       	ldd	r24, Y+6	; 0x06
     5ae:	9f 81       	ldd	r25, Y+7	; 0x07
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	88 0f       	add	r24, r24
     5b6:	99 1f       	adc	r25, r25
     5b8:	82 0f       	add	r24, r18
     5ba:	93 1f       	adc	r25, r19
     5bc:	07 96       	adiw	r24, 0x07	; 7
     5be:	fc 01       	movw	r30, r24
     5c0:	20 81       	ld	r18, Z
     5c2:	31 81       	ldd	r19, Z+1	; 0x01
     5c4:	8e 81       	ldd	r24, Y+6	; 0x06
     5c6:	9f 81       	ldd	r25, Y+7	; 0x07
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	48 89       	ldd	r20, Y+16	; 0x10
     5cc:	59 89       	ldd	r21, Y+17	; 0x11
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	88 0f       	add	r24, r24
     5d4:	99 1f       	adc	r25, r25
     5d6:	84 0f       	add	r24, r20
     5d8:	95 1f       	adc	r25, r21
     5da:	07 96       	adiw	r24, 0x07	; 7
     5dc:	fc 01       	movw	r30, r24
     5de:	80 81       	ld	r24, Z
     5e0:	91 81       	ldd	r25, Z+1	; 0x01
     5e2:	28 17       	cp	r18, r24
     5e4:	39 07       	cpc	r19, r25
     5e6:	09 f0       	breq	.+2      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
     5e8:	24 c2       	rjmp	.+1096   	; 0xa32 <__stack+0x133>

				from = (*player).turns[i].x;
     5ea:	28 89       	ldd	r18, Y+16	; 0x10
     5ec:	39 89       	ldd	r19, Y+17	; 0x11
     5ee:	8e 81       	ldd	r24, Y+6	; 0x06
     5f0:	9f 81       	ldd	r25, Y+7	; 0x07
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	82 0f       	add	r24, r18
     5fc:	93 1f       	adc	r25, r19
     5fe:	05 96       	adiw	r24, 0x05	; 5
     600:	fc 01       	movw	r30, r24
     602:	80 81       	ld	r24, Z
     604:	91 81       	ldd	r25, Z+1	; 0x01
     606:	9b 83       	std	Y+3, r25	; 0x03
     608:	8a 83       	std	Y+2, r24	; 0x02
				to = (*player).turns[i + 1].x;
     60a:	8e 81       	ldd	r24, Y+6	; 0x06
     60c:	9f 81       	ldd	r25, Y+7	; 0x07
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	28 89       	ldd	r18, Y+16	; 0x10
     612:	39 89       	ldd	r19, Y+17	; 0x11
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	82 0f       	add	r24, r18
     61e:	93 1f       	adc	r25, r19
     620:	05 96       	adiw	r24, 0x05	; 5
     622:	fc 01       	movw	r30, r24
     624:	80 81       	ld	r24, Z
     626:	91 81       	ldd	r25, Z+1	; 0x01
     628:	9d 83       	std	Y+5, r25	; 0x05
     62a:	8c 83       	std	Y+4, r24	; 0x04

				if (from > to) {
     62c:	2a 81       	ldd	r18, Y+2	; 0x02
     62e:	3b 81       	ldd	r19, Y+3	; 0x03
     630:	8c 81       	ldd	r24, Y+4	; 0x04
     632:	9d 81       	ldd	r25, Y+5	; 0x05
     634:	82 17       	cp	r24, r18
     636:	93 07       	cpc	r25, r19
     638:	ac f4       	brge	.+42     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
					to = from;
     63a:	8a 81       	ldd	r24, Y+2	; 0x02
     63c:	9b 81       	ldd	r25, Y+3	; 0x03
     63e:	9d 83       	std	Y+5, r25	; 0x05
     640:	8c 83       	std	Y+4, r24	; 0x04
					from = (*player).turns[i + 1].x;
     642:	8e 81       	ldd	r24, Y+6	; 0x06
     644:	9f 81       	ldd	r25, Y+7	; 0x07
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	28 89       	ldd	r18, Y+16	; 0x10
     64a:	39 89       	ldd	r19, Y+17	; 0x11
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	82 0f       	add	r24, r18
     656:	93 1f       	adc	r25, r19
     658:	05 96       	adiw	r24, 0x05	; 5
     65a:	fc 01       	movw	r30, r24
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	9b 83       	std	Y+3, r25	; 0x03
     662:	8a 83       	std	Y+2, r24	; 0x02
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     664:	8a 81       	ldd	r24, Y+2	; 0x02
     666:	9b 81       	ldd	r25, Y+3	; 0x03
     668:	9b 87       	std	Y+11, r25	; 0x0b
     66a:	8a 87       	std	Y+10, r24	; 0x0a
     66c:	7c c0       	rjmp	.+248    	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
					if ((playerId == 1 && gameState[j][(*player).turns[i].y] == 2)
     66e:	8a 89       	ldd	r24, Y+18	; 0x12
     670:	9b 89       	ldd	r25, Y+19	; 0x13
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	21 f5       	brne	.+72     	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     676:	28 89       	ldd	r18, Y+16	; 0x10
     678:	39 89       	ldd	r19, Y+17	; 0x11
     67a:	8e 81       	ldd	r24, Y+6	; 0x06
     67c:	9f 81       	ldd	r25, Y+7	; 0x07
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	88 0f       	add	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	82 0f       	add	r24, r18
     688:	93 1f       	adc	r25, r19
     68a:	07 96       	adiw	r24, 0x07	; 7
     68c:	fc 01       	movw	r30, r24
     68e:	20 81       	ld	r18, Z
     690:	31 81       	ldd	r19, Z+1	; 0x01
     692:	8a 85       	ldd	r24, Y+10	; 0x0a
     694:	9b 85       	ldd	r25, Y+11	; 0x0b
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	ac 01       	movw	r20, r24
     69c:	44 0f       	add	r20, r20
     69e:	55 1f       	adc	r21, r21
     6a0:	44 0f       	add	r20, r20
     6a2:	55 1f       	adc	r21, r21
     6a4:	84 0f       	add	r24, r20
     6a6:	95 1f       	adc	r25, r21
     6a8:	82 0f       	add	r24, r18
     6aa:	93 1f       	adc	r25, r19
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	84 59       	subi	r24, 0x94	; 148
     6b2:	9e 4f       	sbci	r25, 0xFE	; 254
     6b4:	fc 01       	movw	r30, r24
     6b6:	80 81       	ld	r24, Z
     6b8:	91 81       	ldd	r25, Z+1	; 0x01
     6ba:	02 97       	sbiw	r24, 0x02	; 2
     6bc:	41 f1       	breq	.+80     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
						   || (playerId == 2 && gameState[j][(*player).turns[i].y] == 1)) //Collision !
     6be:	8a 89       	ldd	r24, Y+18	; 0x12
     6c0:	9b 89       	ldd	r25, Y+19	; 0x13
     6c2:	02 97       	sbiw	r24, 0x02	; 2
     6c4:	39 f5       	brne	.+78     	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
     6c6:	28 89       	ldd	r18, Y+16	; 0x10
     6c8:	39 89       	ldd	r19, Y+17	; 0x11
     6ca:	8e 81       	ldd	r24, Y+6	; 0x06
     6cc:	9f 81       	ldd	r25, Y+7	; 0x07
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	82 0f       	add	r24, r18
     6d8:	93 1f       	adc	r25, r19
     6da:	07 96       	adiw	r24, 0x07	; 7
     6dc:	fc 01       	movw	r30, r24
     6de:	20 81       	ld	r18, Z
     6e0:	31 81       	ldd	r19, Z+1	; 0x01
     6e2:	8a 85       	ldd	r24, Y+10	; 0x0a
     6e4:	9b 85       	ldd	r25, Y+11	; 0x0b
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	ac 01       	movw	r20, r24
     6ec:	44 0f       	add	r20, r20
     6ee:	55 1f       	adc	r21, r21
     6f0:	44 0f       	add	r20, r20
     6f2:	55 1f       	adc	r21, r21
     6f4:	84 0f       	add	r24, r20
     6f6:	95 1f       	adc	r25, r21
     6f8:	82 0f       	add	r24, r18
     6fa:	93 1f       	adc	r25, r19
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	84 59       	subi	r24, 0x94	; 148
     702:	9e 4f       	sbci	r25, 0xFE	; 254
     704:	fc 01       	movw	r30, r24
     706:	80 81       	ld	r24, Z
     708:	91 81       	ldd	r25, Z+1	; 0x01
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	19 f4       	brne	.+6      	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
						collision = true;
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	89 83       	std	Y+1, r24	; 0x01
     712:	24 c0       	rjmp	.+72     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
					else
						gameState[j][(*player).turns[i].y] = playerId;
     714:	28 89       	ldd	r18, Y+16	; 0x10
     716:	39 89       	ldd	r19, Y+17	; 0x11
     718:	8e 81       	ldd	r24, Y+6	; 0x06
     71a:	9f 81       	ldd	r25, Y+7	; 0x07
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	82 0f       	add	r24, r18
     726:	93 1f       	adc	r25, r19
     728:	07 96       	adiw	r24, 0x07	; 7
     72a:	fc 01       	movw	r30, r24
     72c:	20 81       	ld	r18, Z
     72e:	31 81       	ldd	r19, Z+1	; 0x01
     730:	8a 85       	ldd	r24, Y+10	; 0x0a
     732:	9b 85       	ldd	r25, Y+11	; 0x0b
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	ac 01       	movw	r20, r24
     73a:	44 0f       	add	r20, r20
     73c:	55 1f       	adc	r21, r21
     73e:	44 0f       	add	r20, r20
     740:	55 1f       	adc	r21, r21
     742:	84 0f       	add	r24, r20
     744:	95 1f       	adc	r25, r21
     746:	82 0f       	add	r24, r18
     748:	93 1f       	adc	r25, r19
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	84 59       	subi	r24, 0x94	; 148
     750:	9e 4f       	sbci	r25, 0xFE	; 254
     752:	2a 89       	ldd	r18, Y+18	; 0x12
     754:	3b 89       	ldd	r19, Y+19	; 0x13
     756:	fc 01       	movw	r30, r24
     758:	31 83       	std	Z+1, r19	; 0x01
     75a:	20 83       	st	Z, r18
					to = from;
					from = (*player).turns[i + 1].x;
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     75c:	8a 85       	ldd	r24, Y+10	; 0x0a
     75e:	9b 85       	ldd	r25, Y+11	; 0x0b
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	9b 87       	std	Y+11, r25	; 0x0b
     764:	8a 87       	std	Y+10, r24	; 0x0a
     766:	2a 85       	ldd	r18, Y+10	; 0x0a
     768:	3b 85       	ldd	r19, Y+11	; 0x0b
     76a:	8c 81       	ldd	r24, Y+4	; 0x04
     76c:	9d 81       	ldd	r25, Y+5	; 0x05
     76e:	82 17       	cp	r24, r18
     770:	93 07       	cpc	r25, r19
     772:	0c f0       	brlt	.+2      	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
     774:	7c cf       	rjmp	.-264    	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
     776:	5d c1       	rjmp	.+698    	; 0xa32 <__stack+0x133>

			}

		} else { //Processing the current position

			if ((*player).turns[i].x == (*player).x) { //Draw vertical line
     778:	28 89       	ldd	r18, Y+16	; 0x10
     77a:	39 89       	ldd	r19, Y+17	; 0x11
     77c:	8e 81       	ldd	r24, Y+6	; 0x06
     77e:	9f 81       	ldd	r25, Y+7	; 0x07
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	82 0f       	add	r24, r18
     78a:	93 1f       	adc	r25, r19
     78c:	05 96       	adiw	r24, 0x05	; 5
     78e:	fc 01       	movw	r30, r24
     790:	20 81       	ld	r18, Z
     792:	31 81       	ldd	r19, Z+1	; 0x01
     794:	88 89       	ldd	r24, Y+16	; 0x10
     796:	99 89       	ldd	r25, Y+17	; 0x11
     798:	fc 01       	movw	r30, r24
     79a:	80 81       	ld	r24, Z
     79c:	91 81       	ldd	r25, Z+1	; 0x01
     79e:	28 17       	cp	r18, r24
     7a0:	39 07       	cpc	r19, r25
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
     7a4:	98 c0       	rjmp	.+304    	; 0x8d6 <__LOCK_REGION_LENGTH__+0x4d6>

				from = (*player).turns[i].y;
     7a6:	28 89       	ldd	r18, Y+16	; 0x10
     7a8:	39 89       	ldd	r19, Y+17	; 0x11
     7aa:	8e 81       	ldd	r24, Y+6	; 0x06
     7ac:	9f 81       	ldd	r25, Y+7	; 0x07
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	82 0f       	add	r24, r18
     7b8:	93 1f       	adc	r25, r19
     7ba:	07 96       	adiw	r24, 0x07	; 7
     7bc:	fc 01       	movw	r30, r24
     7be:	80 81       	ld	r24, Z
     7c0:	91 81       	ldd	r25, Z+1	; 0x01
     7c2:	9b 83       	std	Y+3, r25	; 0x03
     7c4:	8a 83       	std	Y+2, r24	; 0x02
				to = (*player).y;
     7c6:	88 89       	ldd	r24, Y+16	; 0x10
     7c8:	99 89       	ldd	r25, Y+17	; 0x11
     7ca:	fc 01       	movw	r30, r24
     7cc:	82 81       	ldd	r24, Z+2	; 0x02
     7ce:	93 81       	ldd	r25, Z+3	; 0x03
     7d0:	9d 83       	std	Y+5, r25	; 0x05
     7d2:	8c 83       	std	Y+4, r24	; 0x04

				if (from > to) {
     7d4:	2a 81       	ldd	r18, Y+2	; 0x02
     7d6:	3b 81       	ldd	r19, Y+3	; 0x03
     7d8:	8c 81       	ldd	r24, Y+4	; 0x04
     7da:	9d 81       	ldd	r25, Y+5	; 0x05
     7dc:	82 17       	cp	r24, r18
     7de:	93 07       	cpc	r25, r19
     7e0:	5c f4       	brge	.+22     	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
					to = from;
     7e2:	8a 81       	ldd	r24, Y+2	; 0x02
     7e4:	9b 81       	ldd	r25, Y+3	; 0x03
     7e6:	9d 83       	std	Y+5, r25	; 0x05
     7e8:	8c 83       	std	Y+4, r24	; 0x04
					from = (*player).y;
     7ea:	88 89       	ldd	r24, Y+16	; 0x10
     7ec:	99 89       	ldd	r25, Y+17	; 0x11
     7ee:	fc 01       	movw	r30, r24
     7f0:	82 81       	ldd	r24, Z+2	; 0x02
     7f2:	93 81       	ldd	r25, Z+3	; 0x03
     7f4:	9b 83       	std	Y+3, r25	; 0x03
     7f6:	8a 83       	std	Y+2, r24	; 0x02
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	9b 81       	ldd	r25, Y+3	; 0x03
     7fc:	9d 87       	std	Y+13, r25	; 0x0d
     7fe:	8c 87       	std	Y+12, r24	; 0x0c
     800:	61 c0       	rjmp	.+194    	; 0x8c4 <__LOCK_REGION_LENGTH__+0x4c4>
					if ((playerId == 1 && gameState[(*player).x][j] == 2)
     802:	8a 89       	ldd	r24, Y+18	; 0x12
     804:	9b 89       	ldd	r25, Y+19	; 0x13
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	d9 f4       	brne	.+54     	; 0x840 <__LOCK_REGION_LENGTH__+0x440>
     80a:	88 89       	ldd	r24, Y+16	; 0x10
     80c:	99 89       	ldd	r25, Y+17	; 0x11
     80e:	fc 01       	movw	r30, r24
     810:	80 81       	ld	r24, Z
     812:	91 81       	ldd	r25, Z+1	; 0x01
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	9c 01       	movw	r18, r24
     81a:	22 0f       	add	r18, r18
     81c:	33 1f       	adc	r19, r19
     81e:	22 0f       	add	r18, r18
     820:	33 1f       	adc	r19, r19
     822:	82 0f       	add	r24, r18
     824:	93 1f       	adc	r25, r19
     826:	2c 85       	ldd	r18, Y+12	; 0x0c
     828:	3d 85       	ldd	r19, Y+13	; 0x0d
     82a:	82 0f       	add	r24, r18
     82c:	93 1f       	adc	r25, r19
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	84 59       	subi	r24, 0x94	; 148
     834:	9e 4f       	sbci	r25, 0xFE	; 254
     836:	fc 01       	movw	r30, r24
     838:	80 81       	ld	r24, Z
     83a:	91 81       	ldd	r25, Z+1	; 0x01
     83c:	02 97       	sbiw	r24, 0x02	; 2
     83e:	f9 f0       	breq	.+62     	; 0x87e <__LOCK_REGION_LENGTH__+0x47e>
						   || (playerId == 2 && gameState[(*player).x][j] == 1)) //Collision !
     840:	8a 89       	ldd	r24, Y+18	; 0x12
     842:	9b 89       	ldd	r25, Y+19	; 0x13
     844:	02 97       	sbiw	r24, 0x02	; 2
     846:	f1 f4       	brne	.+60     	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     848:	88 89       	ldd	r24, Y+16	; 0x10
     84a:	99 89       	ldd	r25, Y+17	; 0x11
     84c:	fc 01       	movw	r30, r24
     84e:	80 81       	ld	r24, Z
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	9c 01       	movw	r18, r24
     858:	22 0f       	add	r18, r18
     85a:	33 1f       	adc	r19, r19
     85c:	22 0f       	add	r18, r18
     85e:	33 1f       	adc	r19, r19
     860:	82 0f       	add	r24, r18
     862:	93 1f       	adc	r25, r19
     864:	2c 85       	ldd	r18, Y+12	; 0x0c
     866:	3d 85       	ldd	r19, Y+13	; 0x0d
     868:	82 0f       	add	r24, r18
     86a:	93 1f       	adc	r25, r19
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	84 59       	subi	r24, 0x94	; 148
     872:	9e 4f       	sbci	r25, 0xFE	; 254
     874:	fc 01       	movw	r30, r24
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	19 f4       	brne	.+6      	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
						collision = true;
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	1b c0       	rjmp	.+54     	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
					else
						gameState[(*player).x][j] = playerId;
     884:	88 89       	ldd	r24, Y+16	; 0x10
     886:	99 89       	ldd	r25, Y+17	; 0x11
     888:	fc 01       	movw	r30, r24
     88a:	80 81       	ld	r24, Z
     88c:	91 81       	ldd	r25, Z+1	; 0x01
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	9c 01       	movw	r18, r24
     894:	22 0f       	add	r18, r18
     896:	33 1f       	adc	r19, r19
     898:	22 0f       	add	r18, r18
     89a:	33 1f       	adc	r19, r19
     89c:	82 0f       	add	r24, r18
     89e:	93 1f       	adc	r25, r19
     8a0:	2c 85       	ldd	r18, Y+12	; 0x0c
     8a2:	3d 85       	ldd	r19, Y+13	; 0x0d
     8a4:	82 0f       	add	r24, r18
     8a6:	93 1f       	adc	r25, r19
     8a8:	88 0f       	add	r24, r24
     8aa:	99 1f       	adc	r25, r25
     8ac:	84 59       	subi	r24, 0x94	; 148
     8ae:	9e 4f       	sbci	r25, 0xFE	; 254
     8b0:	2a 89       	ldd	r18, Y+18	; 0x12
     8b2:	3b 89       	ldd	r19, Y+19	; 0x13
     8b4:	fc 01       	movw	r30, r24
     8b6:	31 83       	std	Z+1, r19	; 0x01
     8b8:	20 83       	st	Z, r18
					to = from;
					from = (*player).y;
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     8ba:	8c 85       	ldd	r24, Y+12	; 0x0c
     8bc:	9d 85       	ldd	r25, Y+13	; 0x0d
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	9d 87       	std	Y+13, r25	; 0x0d
     8c2:	8c 87       	std	Y+12, r24	; 0x0c
     8c4:	2c 85       	ldd	r18, Y+12	; 0x0c
     8c6:	3d 85       	ldd	r19, Y+13	; 0x0d
     8c8:	8c 81       	ldd	r24, Y+4	; 0x04
     8ca:	9d 81       	ldd	r25, Y+5	; 0x05
     8cc:	82 17       	cp	r24, r18
     8ce:	93 07       	cpc	r25, r19
     8d0:	0c f0       	brlt	.+2      	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
     8d2:	97 cf       	rjmp	.-210    	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
     8d4:	ae c0       	rjmp	.+348    	; 0xa32 <__stack+0x133>
						collision = true;
					else
						gameState[(*player).x][j] = playerId;
				}

			} else if ((*player).turns[i].y == (*player).y) { //Draw horizontal line
     8d6:	28 89       	ldd	r18, Y+16	; 0x10
     8d8:	39 89       	ldd	r19, Y+17	; 0x11
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	9f 81       	ldd	r25, Y+7	; 0x07
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	82 0f       	add	r24, r18
     8e8:	93 1f       	adc	r25, r19
     8ea:	07 96       	adiw	r24, 0x07	; 7
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 81       	ld	r18, Z
     8f0:	31 81       	ldd	r19, Z+1	; 0x01
     8f2:	88 89       	ldd	r24, Y+16	; 0x10
     8f4:	99 89       	ldd	r25, Y+17	; 0x11
     8f6:	fc 01       	movw	r30, r24
     8f8:	82 81       	ldd	r24, Z+2	; 0x02
     8fa:	93 81       	ldd	r25, Z+3	; 0x03
     8fc:	28 17       	cp	r18, r24
     8fe:	39 07       	cpc	r19, r25
     900:	09 f0       	breq	.+2      	; 0x904 <__stack+0x5>
     902:	97 c0       	rjmp	.+302    	; 0xa32 <__stack+0x133>

				from = (*player).turns[i].x;
     904:	28 89       	ldd	r18, Y+16	; 0x10
     906:	39 89       	ldd	r19, Y+17	; 0x11
     908:	8e 81       	ldd	r24, Y+6	; 0x06
     90a:	9f 81       	ldd	r25, Y+7	; 0x07
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	82 0f       	add	r24, r18
     916:	93 1f       	adc	r25, r19
     918:	05 96       	adiw	r24, 0x05	; 5
     91a:	fc 01       	movw	r30, r24
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	9b 83       	std	Y+3, r25	; 0x03
     922:	8a 83       	std	Y+2, r24	; 0x02
				to = (*player).x;
     924:	88 89       	ldd	r24, Y+16	; 0x10
     926:	99 89       	ldd	r25, Y+17	; 0x11
     928:	fc 01       	movw	r30, r24
     92a:	80 81       	ld	r24, Z
     92c:	91 81       	ldd	r25, Z+1	; 0x01
     92e:	9d 83       	std	Y+5, r25	; 0x05
     930:	8c 83       	std	Y+4, r24	; 0x04

				if (from > to) {
     932:	2a 81       	ldd	r18, Y+2	; 0x02
     934:	3b 81       	ldd	r19, Y+3	; 0x03
     936:	8c 81       	ldd	r24, Y+4	; 0x04
     938:	9d 81       	ldd	r25, Y+5	; 0x05
     93a:	82 17       	cp	r24, r18
     93c:	93 07       	cpc	r25, r19
     93e:	5c f4       	brge	.+22     	; 0x956 <__stack+0x57>
					to = from;
     940:	8a 81       	ldd	r24, Y+2	; 0x02
     942:	9b 81       	ldd	r25, Y+3	; 0x03
     944:	9d 83       	std	Y+5, r25	; 0x05
     946:	8c 83       	std	Y+4, r24	; 0x04
					from = (*player).x;
     948:	88 89       	ldd	r24, Y+16	; 0x10
     94a:	99 89       	ldd	r25, Y+17	; 0x11
     94c:	fc 01       	movw	r30, r24
     94e:	80 81       	ld	r24, Z
     950:	91 81       	ldd	r25, Z+1	; 0x01
     952:	9b 83       	std	Y+3, r25	; 0x03
     954:	8a 83       	std	Y+2, r24	; 0x02
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	9b 81       	ldd	r25, Y+3	; 0x03
     95a:	9f 87       	std	Y+15, r25	; 0x0f
     95c:	8e 87       	std	Y+14, r24	; 0x0e
     95e:	61 c0       	rjmp	.+194    	; 0xa22 <__stack+0x123>
					if ((playerId == 1 && gameState[j][(*player).y] == 2) || (playerId == 2 && gameState[j][(*player).y] == 1)) //Collision !
     960:	8a 89       	ldd	r24, Y+18	; 0x12
     962:	9b 89       	ldd	r25, Y+19	; 0x13
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	d9 f4       	brne	.+54     	; 0x99e <__stack+0x9f>
     968:	88 89       	ldd	r24, Y+16	; 0x10
     96a:	99 89       	ldd	r25, Y+17	; 0x11
     96c:	fc 01       	movw	r30, r24
     96e:	22 81       	ldd	r18, Z+2	; 0x02
     970:	33 81       	ldd	r19, Z+3	; 0x03
     972:	8e 85       	ldd	r24, Y+14	; 0x0e
     974:	9f 85       	ldd	r25, Y+15	; 0x0f
     976:	88 0f       	add	r24, r24
     978:	99 1f       	adc	r25, r25
     97a:	ac 01       	movw	r20, r24
     97c:	44 0f       	add	r20, r20
     97e:	55 1f       	adc	r21, r21
     980:	44 0f       	add	r20, r20
     982:	55 1f       	adc	r21, r21
     984:	84 0f       	add	r24, r20
     986:	95 1f       	adc	r25, r21
     988:	82 0f       	add	r24, r18
     98a:	93 1f       	adc	r25, r19
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	84 59       	subi	r24, 0x94	; 148
     992:	9e 4f       	sbci	r25, 0xFE	; 254
     994:	fc 01       	movw	r30, r24
     996:	80 81       	ld	r24, Z
     998:	91 81       	ldd	r25, Z+1	; 0x01
     99a:	02 97       	sbiw	r24, 0x02	; 2
     99c:	f9 f0       	breq	.+62     	; 0x9dc <__stack+0xdd>
     99e:	8a 89       	ldd	r24, Y+18	; 0x12
     9a0:	9b 89       	ldd	r25, Y+19	; 0x13
     9a2:	02 97       	sbiw	r24, 0x02	; 2
     9a4:	f1 f4       	brne	.+60     	; 0x9e2 <__stack+0xe3>
     9a6:	88 89       	ldd	r24, Y+16	; 0x10
     9a8:	99 89       	ldd	r25, Y+17	; 0x11
     9aa:	fc 01       	movw	r30, r24
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	33 81       	ldd	r19, Z+3	; 0x03
     9b0:	8e 85       	ldd	r24, Y+14	; 0x0e
     9b2:	9f 85       	ldd	r25, Y+15	; 0x0f
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	ac 01       	movw	r20, r24
     9ba:	44 0f       	add	r20, r20
     9bc:	55 1f       	adc	r21, r21
     9be:	44 0f       	add	r20, r20
     9c0:	55 1f       	adc	r21, r21
     9c2:	84 0f       	add	r24, r20
     9c4:	95 1f       	adc	r25, r21
     9c6:	82 0f       	add	r24, r18
     9c8:	93 1f       	adc	r25, r19
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	84 59       	subi	r24, 0x94	; 148
     9d0:	9e 4f       	sbci	r25, 0xFE	; 254
     9d2:	fc 01       	movw	r30, r24
     9d4:	80 81       	ld	r24, Z
     9d6:	91 81       	ldd	r25, Z+1	; 0x01
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	19 f4       	brne	.+6      	; 0x9e2 <__stack+0xe3>
						collision = true;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	89 83       	std	Y+1, r24	; 0x01
     9e0:	1b c0       	rjmp	.+54     	; 0xa18 <__stack+0x119>
					else
						gameState[j][(*player).y] = playerId;
     9e2:	88 89       	ldd	r24, Y+16	; 0x10
     9e4:	99 89       	ldd	r25, Y+17	; 0x11
     9e6:	fc 01       	movw	r30, r24
     9e8:	22 81       	ldd	r18, Z+2	; 0x02
     9ea:	33 81       	ldd	r19, Z+3	; 0x03
     9ec:	8e 85       	ldd	r24, Y+14	; 0x0e
     9ee:	9f 85       	ldd	r25, Y+15	; 0x0f
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	ac 01       	movw	r20, r24
     9f6:	44 0f       	add	r20, r20
     9f8:	55 1f       	adc	r21, r21
     9fa:	44 0f       	add	r20, r20
     9fc:	55 1f       	adc	r21, r21
     9fe:	84 0f       	add	r24, r20
     a00:	95 1f       	adc	r25, r21
     a02:	82 0f       	add	r24, r18
     a04:	93 1f       	adc	r25, r19
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	84 59       	subi	r24, 0x94	; 148
     a0c:	9e 4f       	sbci	r25, 0xFE	; 254
     a0e:	2a 89       	ldd	r18, Y+18	; 0x12
     a10:	3b 89       	ldd	r19, Y+19	; 0x13
     a12:	fc 01       	movw	r30, r24
     a14:	31 83       	std	Z+1, r19	; 0x01
     a16:	20 83       	st	Z, r18
					to = from;
					from = (*player).x;
				}

				//Draw line in gameState
				for (int j = from; j <= to; j++) {
     a18:	8e 85       	ldd	r24, Y+14	; 0x0e
     a1a:	9f 85       	ldd	r25, Y+15	; 0x0f
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	9f 87       	std	Y+15, r25	; 0x0f
     a20:	8e 87       	std	Y+14, r24	; 0x0e
     a22:	2e 85       	ldd	r18, Y+14	; 0x0e
     a24:	3f 85       	ldd	r19, Y+15	; 0x0f
     a26:	8c 81       	ldd	r24, Y+4	; 0x04
     a28:	9d 81       	ldd	r25, Y+5	; 0x05
     a2a:	82 17       	cp	r24, r18
     a2c:	93 07       	cpc	r25, r19
     a2e:	0c f0       	brlt	.+2      	; 0xa32 <__stack+0x133>
     a30:	97 cf       	rjmp	.-210    	; 0x960 <__stack+0x61>
uint8_t draw_players_lines(Player *player, int playerId)
  {
	uint8_t collision = false;	
	int from, to;

	for (int i = 0; i < (*player).turnsCount + 1; i++) {
     a32:	8e 81       	ldd	r24, Y+6	; 0x06
     a34:	9f 81       	ldd	r25, Y+7	; 0x07
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	9f 83       	std	Y+7, r25	; 0x07
     a3a:	8e 83       	std	Y+6, r24	; 0x06
     a3c:	88 89       	ldd	r24, Y+16	; 0x10
     a3e:	99 89       	ldd	r25, Y+17	; 0x11
     a40:	8f 5b       	subi	r24, 0xBF	; 191
     a42:	9f 4f       	sbci	r25, 0xFF	; 255
     a44:	fc 01       	movw	r30, r24
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	9c 01       	movw	r18, r24
     a4c:	2f 5f       	subi	r18, 0xFF	; 255
     a4e:	3f 4f       	sbci	r19, 0xFF	; 255
     a50:	8e 81       	ldd	r24, Y+6	; 0x06
     a52:	9f 81       	ldd	r25, Y+7	; 0x07
     a54:	82 17       	cp	r24, r18
     a56:	93 07       	cpc	r25, r19
     a58:	0c f4       	brge	.+2      	; 0xa5c <__stack+0x15d>
     a5a:	b1 cc       	rjmp	.-1694   	; 0x3be <draw_players_lines+0x24>
			}

		}
	}

	return collision;
     a5c:	89 81       	ldd	r24, Y+1	; 0x01
}
     a5e:	63 96       	adiw	r28, 0x13	; 19
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	f8 94       	cli
     a64:	de bf       	out	0x3e, r29	; 62
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	cd bf       	out	0x3d, r28	; 61
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <game_processing>:

/* TODO: protect gameState with a mutex */
void game_processing(void *pvParameters)
{
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	29 97       	sbiw	r28, 0x09	; 9
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	99 87       	std	Y+9, r25	; 0x09
     a86:	88 87       	std	Y+8, r24	; 0x08
	/* Populate gameState from the players' positions and tracks:
	* Start at turn[i] to compare with turn[i - 1] for each player
	*/

	bool collision = false;
     a88:	19 82       	std	Y+1, r1	; 0x01

	for(;;) {

		while(!collision) {
     a8a:	a6 c0       	rjmp	.+332    	; 0xbd8 <game_processing+0x168>
			
			for (int p = 1; p <= 2; p++) {
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	9b 83       	std	Y+3, r25	; 0x03
     a92:	8a 83       	std	Y+2, r24	; 0x02
     a94:	98 c0       	rjmp	.+304    	; 0xbc6 <game_processing+0x156>
				/* Erase player */
				for (int i = 0; i < 14; i++)
     a96:	1d 82       	std	Y+5, r1	; 0x05
     a98:	1c 82       	std	Y+4, r1	; 0x04
     a9a:	60 c0       	rjmp	.+192    	; 0xb5c <game_processing+0xec>
					for (int j = 0; j < 10; j++)
     a9c:	1f 82       	std	Y+7, r1	; 0x07
     a9e:	1e 82       	std	Y+6, r1	; 0x06
     aa0:	53 c0       	rjmp	.+166    	; 0xb48 <game_processing+0xd8>
						if ((p == 0 && gameState[i][j] == 1)
     aa2:	8a 81       	ldd	r24, Y+2	; 0x02
     aa4:	9b 81       	ldd	r25, Y+3	; 0x03
     aa6:	89 2b       	or	r24, r25
     aa8:	c1 f4       	brne	.+48     	; 0xada <game_processing+0x6a>
     aaa:	8c 81       	ldd	r24, Y+4	; 0x04
     aac:	9d 81       	ldd	r25, Y+5	; 0x05
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	9c 01       	movw	r18, r24
     ab4:	22 0f       	add	r18, r18
     ab6:	33 1f       	adc	r19, r19
     ab8:	22 0f       	add	r18, r18
     aba:	33 1f       	adc	r19, r19
     abc:	82 0f       	add	r24, r18
     abe:	93 1f       	adc	r25, r19
     ac0:	2e 81       	ldd	r18, Y+6	; 0x06
     ac2:	3f 81       	ldd	r19, Y+7	; 0x07
     ac4:	82 0f       	add	r24, r18
     ac6:	93 1f       	adc	r25, r19
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	84 59       	subi	r24, 0x94	; 148
     ace:	9e 4f       	sbci	r25, 0xFE	; 254
     ad0:	fc 01       	movw	r30, r24
     ad2:	80 81       	ld	r24, Z
     ad4:	91 81       	ldd	r25, Z+1	; 0x01
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	e1 f0       	breq	.+56     	; 0xb12 <game_processing+0xa2>
							|| (p == 1 && gameState[i][j] == 2))
     ada:	8a 81       	ldd	r24, Y+2	; 0x02
     adc:	9b 81       	ldd	r25, Y+3	; 0x03
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	71 f5       	brne	.+92     	; 0xb3e <game_processing+0xce>
     ae2:	8c 81       	ldd	r24, Y+4	; 0x04
     ae4:	9d 81       	ldd	r25, Y+5	; 0x05
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	9c 01       	movw	r18, r24
     aec:	22 0f       	add	r18, r18
     aee:	33 1f       	adc	r19, r19
     af0:	22 0f       	add	r18, r18
     af2:	33 1f       	adc	r19, r19
     af4:	82 0f       	add	r24, r18
     af6:	93 1f       	adc	r25, r19
     af8:	2e 81       	ldd	r18, Y+6	; 0x06
     afa:	3f 81       	ldd	r19, Y+7	; 0x07
     afc:	82 0f       	add	r24, r18
     afe:	93 1f       	adc	r25, r19
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	84 59       	subi	r24, 0x94	; 148
     b06:	9e 4f       	sbci	r25, 0xFE	; 254
     b08:	fc 01       	movw	r30, r24
     b0a:	80 81       	ld	r24, Z
     b0c:	91 81       	ldd	r25, Z+1	; 0x01
     b0e:	02 97       	sbiw	r24, 0x02	; 2
     b10:	b1 f4       	brne	.+44     	; 0xb3e <game_processing+0xce>
								gameState[i][j] = 0;
     b12:	8c 81       	ldd	r24, Y+4	; 0x04
     b14:	9d 81       	ldd	r25, Y+5	; 0x05
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	9c 01       	movw	r18, r24
     b1c:	22 0f       	add	r18, r18
     b1e:	33 1f       	adc	r19, r19
     b20:	22 0f       	add	r18, r18
     b22:	33 1f       	adc	r19, r19
     b24:	82 0f       	add	r24, r18
     b26:	93 1f       	adc	r25, r19
     b28:	2e 81       	ldd	r18, Y+6	; 0x06
     b2a:	3f 81       	ldd	r19, Y+7	; 0x07
     b2c:	82 0f       	add	r24, r18
     b2e:	93 1f       	adc	r25, r19
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	84 59       	subi	r24, 0x94	; 148
     b36:	9e 4f       	sbci	r25, 0xFE	; 254
     b38:	fc 01       	movw	r30, r24
     b3a:	11 82       	std	Z+1, r1	; 0x01
     b3c:	10 82       	st	Z, r1
		while(!collision) {
			
			for (int p = 1; p <= 2; p++) {
				/* Erase player */
				for (int i = 0; i < 14; i++)
					for (int j = 0; j < 10; j++)
     b3e:	8e 81       	ldd	r24, Y+6	; 0x06
     b40:	9f 81       	ldd	r25, Y+7	; 0x07
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	9f 83       	std	Y+7, r25	; 0x07
     b46:	8e 83       	std	Y+6, r24	; 0x06
     b48:	8e 81       	ldd	r24, Y+6	; 0x06
     b4a:	9f 81       	ldd	r25, Y+7	; 0x07
     b4c:	0a 97       	sbiw	r24, 0x0a	; 10
     b4e:	0c f4       	brge	.+2      	; 0xb52 <game_processing+0xe2>
     b50:	a8 cf       	rjmp	.-176    	; 0xaa2 <game_processing+0x32>

		while(!collision) {
			
			for (int p = 1; p <= 2; p++) {
				/* Erase player */
				for (int i = 0; i < 14; i++)
     b52:	8c 81       	ldd	r24, Y+4	; 0x04
     b54:	9d 81       	ldd	r25, Y+5	; 0x05
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	9d 83       	std	Y+5, r25	; 0x05
     b5a:	8c 83       	std	Y+4, r24	; 0x04
     b5c:	8c 81       	ldd	r24, Y+4	; 0x04
     b5e:	9d 81       	ldd	r25, Y+5	; 0x05
     b60:	0e 97       	sbiw	r24, 0x0e	; 14
     b62:	0c f4       	brge	.+2      	; 0xb66 <game_processing+0xf6>
     b64:	9b cf       	rjmp	.-202    	; 0xa9c <game_processing+0x2c>
							|| (p == 1 && gameState[i][j] == 2))
								gameState[i][j] = 0;


				/* Move players in their current direction */
				if (p == 1) {
     b66:	8a 81       	ldd	r24, Y+2	; 0x02
     b68:	9b 81       	ldd	r25, Y+3	; 0x03
     b6a:	01 97       	sbiw	r24, 0x01	; 1
     b6c:	91 f4       	brne	.+36     	; 0xb92 <game_processing+0x122>
					collision = draw_players_lines(&playerOne, p);
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	9b 81       	ldd	r25, Y+3	; 0x03
     b72:	bc 01       	movw	r22, r24
     b74:	84 e8       	ldi	r24, 0x84	; 132
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	0e 94 cd 01 	call	0x39a	; 0x39a <draw_players_lines>
     b7c:	98 2f       	mov	r25, r24
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	99 23       	and	r25, r25
     b82:	09 f4       	brne	.+2      	; 0xb86 <game_processing+0x116>
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	89 83       	std	Y+1, r24	; 0x01
					move_player(&playerOne);
     b88:	84 e8       	ldi	r24, 0x84	; 132
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	0e 94 4c 01 	call	0x298	; 0x298 <move_player>
     b90:	15 c0       	rjmp	.+42     	; 0xbbc <game_processing+0x14c>
				} else if (p == 2) {
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	9b 81       	ldd	r25, Y+3	; 0x03
     b96:	02 97       	sbiw	r24, 0x02	; 2
     b98:	89 f4       	brne	.+34     	; 0xbbc <game_processing+0x14c>
					collision = draw_players_lines(&playerTwo, p);
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	9b 81       	ldd	r25, Y+3	; 0x03
     b9e:	bc 01       	movw	r22, r24
     ba0:	87 ec       	ldi	r24, 0xC7	; 199
     ba2:	92 e0       	ldi	r25, 0x02	; 2
     ba4:	0e 94 cd 01 	call	0x39a	; 0x39a <draw_players_lines>
     ba8:	98 2f       	mov	r25, r24
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	99 23       	and	r25, r25
     bae:	09 f4       	brne	.+2      	; 0xbb2 <game_processing+0x142>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	89 83       	std	Y+1, r24	; 0x01
					move_player(&playerTwo);
     bb4:	87 ec       	ldi	r24, 0xC7	; 199
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	0e 94 4c 01 	call	0x298	; 0x298 <move_player>

	for(;;) {

		while(!collision) {
			
			for (int p = 1; p <= 2; p++) {
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	9b 81       	ldd	r25, Y+3	; 0x03
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	9b 83       	std	Y+3, r25	; 0x03
     bc4:	8a 83       	std	Y+2, r24	; 0x02
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	9b 81       	ldd	r25, Y+3	; 0x03
     bca:	03 97       	sbiw	r24, 0x03	; 3
     bcc:	0c f4       	brge	.+2      	; 0xbd0 <game_processing+0x160>
     bce:	63 cf       	rjmp	.-314    	; 0xa96 <game_processing+0x26>
					collision = draw_players_lines(&playerTwo, p);
					move_player(&playerTwo);
				}
			}

			vTaskDelay(1000);
     bd0:	88 ee       	ldi	r24, 0xE8	; 232
     bd2:	93 e0       	ldi	r25, 0x03	; 3
     bd4:	0e 94 4c 18 	call	0x3098	; 0x3098 <vTaskDelay>

	bool collision = false;

	for(;;) {

		while(!collision) {
     bd8:	99 81       	ldd	r25, Y+1	; 0x01
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	89 27       	eor	r24, r25
     bde:	88 23       	and	r24, r24
     be0:	09 f0       	breq	.+2      	; 0xbe4 <game_processing+0x174>
     be2:	54 cf       	rjmp	.-344    	; 0xa8c <game_processing+0x1c>
			}

			vTaskDelay(1000);
		}

		die();
     be4:	0e 94 3f 01 	call	0x27e	; 0x27e <die>
	}
     be8:	50 cf       	rjmp	.-352    	; 0xa8a <game_processing+0x1a>

00000bea <read_joystick>:
	vTaskDelete(NULL);
}


void read_joystick(void *pvParameters)
{
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	2c 97       	sbiw	r28, 0x0c	; 12
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	cd bf       	out	0x3d, r28	; 61
     bfe:	9c 87       	std	Y+12, r25	; 0x0c
     c00:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t left;
	uint8_t up;
	uint8_t down;
	uint8_t pushed;
	Direction direction;
	uint8_t debounceCounter = 0;
     c02:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t debounceThreshold = 15;
     c04:	8f e0       	ldi	r24, 0x0F	; 15
     c06:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t turnPlayer = 0;
     c08:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t isPressing = 0;
     c0a:	1c 82       	std	Y+4, r1	; 0x04

	for (;;) {
		/*Constantly checking joystick state*/
		right	= !(PINC >> 1 & 0x01);
     c0c:	86 e2       	ldi	r24, 0x26	; 38
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	fc 01       	movw	r30, r24
     c12:	80 81       	ld	r24, Z
     c14:	86 95       	lsr	r24
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	81 70       	andi	r24, 0x01	; 1
     c1c:	99 27       	eor	r25, r25
     c1e:	21 e0       	ldi	r18, 0x01	; 1
     c20:	89 2b       	or	r24, r25
     c22:	09 f0       	breq	.+2      	; 0xc26 <read_joystick+0x3c>
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	2e 83       	std	Y+6, r18	; 0x06
		left	= !(PINC >> 7 & 0x01);
     c28:	86 e2       	ldi	r24, 0x26	; 38
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	fc 01       	movw	r30, r24
     c2e:	80 81       	ld	r24, Z
     c30:	88 1f       	adc	r24, r24
     c32:	88 27       	eor	r24, r24
     c34:	88 1f       	adc	r24, r24
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	81 70       	andi	r24, 0x01	; 1
     c3c:	99 27       	eor	r25, r25
     c3e:	21 e0       	ldi	r18, 0x01	; 1
     c40:	89 2b       	or	r24, r25
     c42:	09 f0       	breq	.+2      	; 0xc46 <read_joystick+0x5c>
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	2f 83       	std	Y+7, r18	; 0x07
		up		= !(PINC >> 6 & 0x01);
     c48:	86 e2       	ldi	r24, 0x26	; 38
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	fc 01       	movw	r30, r24
     c4e:	80 81       	ld	r24, Z
     c50:	82 95       	swap	r24
     c52:	86 95       	lsr	r24
     c54:	86 95       	lsr	r24
     c56:	83 70       	andi	r24, 0x03	; 3
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	81 70       	andi	r24, 0x01	; 1
     c5e:	99 27       	eor	r25, r25
     c60:	21 e0       	ldi	r18, 0x01	; 1
     c62:	89 2b       	or	r24, r25
     c64:	09 f0       	breq	.+2      	; 0xc68 <read_joystick+0x7e>
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	28 87       	std	Y+8, r18	; 0x08
		down	= !(PINC >> 0 & 0x01);
     c6a:	86 e2       	ldi	r24, 0x26	; 38
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	fc 01       	movw	r30, r24
     c70:	80 81       	ld	r24, Z
     c72:	88 2f       	mov	r24, r24
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	81 70       	andi	r24, 0x01	; 1
     c78:	99 27       	eor	r25, r25
     c7a:	21 e0       	ldi	r18, 0x01	; 1
     c7c:	89 2b       	or	r24, r25
     c7e:	09 f0       	breq	.+2      	; 0xc82 <read_joystick+0x98>
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	29 87       	std	Y+9, r18	; 0x09
		pushed  = !(PIND >> 3 & 0x01);
     c84:	89 e2       	ldi	r24, 0x29	; 41
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	fc 01       	movw	r30, r24
     c8a:	80 81       	ld	r24, Z
     c8c:	86 95       	lsr	r24
     c8e:	86 95       	lsr	r24
     c90:	86 95       	lsr	r24
     c92:	88 2f       	mov	r24, r24
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	81 70       	andi	r24, 0x01	; 1
     c98:	99 27       	eor	r25, r25
     c9a:	21 e0       	ldi	r18, 0x01	; 1
     c9c:	89 2b       	or	r24, r25
     c9e:	09 f0       	breq	.+2      	; 0xca2 <read_joystick+0xb8>
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	2a 87       	std	Y+10, r18	; 0x0a

		if (down){
     ca4:	89 85       	ldd	r24, Y+9	; 0x09
     ca6:	88 23       	and	r24, r24
     ca8:	39 f0       	breq	.+14     	; 0xcb8 <read_joystick+0xce>
			direction = DOWN;
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	8c 83       	std	Y+4, r24	; 0x04
     cb6:	23 c0       	rjmp	.+70     	; 0xcfe <read_joystick+0x114>
		} else if (right) {
     cb8:	8e 81       	ldd	r24, Y+6	; 0x06
     cba:	88 23       	and	r24, r24
     cbc:	39 f0       	breq	.+14     	; 0xccc <read_joystick+0xe2>
			direction = RIGHT;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	8c 83       	std	Y+4, r24	; 0x04
     cca:	19 c0       	rjmp	.+50     	; 0xcfe <read_joystick+0x114>
		} else if (up) {
     ccc:	88 85       	ldd	r24, Y+8	; 0x08
     cce:	88 23       	and	r24, r24
     cd0:	39 f0       	breq	.+14     	; 0xce0 <read_joystick+0xf6>
			direction = UP;
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	8c 83       	std	Y+4, r24	; 0x04
     cde:	0f c0       	rjmp	.+30     	; 0xcfe <read_joystick+0x114>
		} else if (left) {
     ce0:	8f 81       	ldd	r24, Y+7	; 0x07
     ce2:	88 23       	and	r24, r24
     ce4:	31 f0       	breq	.+12     	; 0xcf2 <read_joystick+0x108>
			direction = LEFT;
     ce6:	19 82       	std	Y+1, r1	; 0x01
			turnPlayer = 1;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	8c 83       	std	Y+4, r24	; 0x04
     cf0:	06 c0       	rjmp	.+12     	; 0xcfe <read_joystick+0x114>
		} else if (pushed) {
     cf2:	8a 85       	ldd	r24, Y+10	; 0x0a
     cf4:	88 23       	and	r24, r24
     cf6:	11 f0       	breq	.+4      	; 0xcfc <read_joystick+0x112>
			//TODO: pause game
			debounceCounter = 0;
     cf8:	1a 82       	std	Y+2, r1	; 0x02
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <read_joystick+0x114>
		} else {
			isPressing = 0;
     cfc:	1c 82       	std	Y+4, r1	; 0x04
			//debounceCounter = 0;
		}

		if (turnPlayer && !isPressing && (++debounceCounter >= debounceThreshold)) {
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	88 23       	and	r24, r24
     d02:	c9 f0       	breq	.+50     	; 0xd36 <read_joystick+0x14c>
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	88 23       	and	r24, r24
     d08:	b1 f4       	brne	.+44     	; 0xd36 <read_joystick+0x14c>
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	8f 5f       	subi	r24, 0xFF	; 255
     d0e:	8a 83       	std	Y+2, r24	; 0x02
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	8d 81       	ldd	r24, Y+5	; 0x05
     d14:	98 17       	cp	r25, r24
     d16:	78 f0       	brcs	.+30     	; 0xd36 <read_joystick+0x14c>
			com_send_bytes("move", 4);
     d18:	64 e0       	ldi	r22, 0x04	; 4
     d1a:	8c e1       	ldi	r24, 0x1C	; 28
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	0e 94 c7 09 	call	0x138e	; 0x138e <com_send_bytes>
			turn_player(&playerOne, direction);
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	bc 01       	movw	r22, r24
     d2a:	84 e8       	ldi	r24, 0x84	; 132
     d2c:	92 e0       	ldi	r25, 0x02	; 2
     d2e:	0e 94 a0 06 	call	0xd40	; 0xd40 <turn_player>
			turnPlayer = 0;
     d32:	1b 82       	std	Y+3, r1	; 0x03
			debounceCounter = 0;
     d34:	1a 82       	std	Y+2, r1	; 0x02
		}

		vTaskDelay(20);
     d36:	84 e1       	ldi	r24, 0x14	; 20
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 4c 18 	call	0x3098	; 0x3098 <vTaskDelay>
	}
     d3e:	66 cf       	rjmp	.-308    	; 0xc0c <read_joystick+0x22>

00000d40 <turn_player>:



/* Changes the player's direction: will be applied in game_processing() */
void turn_player(Player *player, Direction direction)
{
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	00 d0       	rcall	.+0      	; 0xd46 <turn_player+0x6>
     d46:	00 d0       	rcall	.+0      	; 0xd48 <turn_player+0x8>
     d48:	1f 92       	push	r1
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	9c 83       	std	Y+4, r25	; 0x04
     d50:	8b 83       	std	Y+3, r24	; 0x03
     d52:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t validTurn = false, doTurn = false;
     d54:	19 82       	std	Y+1, r1	; 0x01
     d56:	1a 82       	std	Y+2, r1	; 0x02

	if ((*player).direction != direction)
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	9c 81       	ldd	r25, Y+4	; 0x04
     d5c:	fc 01       	movw	r30, r24
     d5e:	94 81       	ldd	r25, Z+4	; 0x04
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	98 17       	cp	r25, r24
     d64:	11 f0       	breq	.+4      	; 0xd6a <turn_player+0x2a>
		doTurn = true;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	8a 83       	std	Y+2, r24	; 0x02

	switch (direction) {
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	91 05       	cpc	r25, r1
     d74:	09 f4       	brne	.+2      	; 0xd78 <turn_player+0x38>
     d76:	49 c0       	rjmp	.+146    	; 0xe0a <turn_player+0xca>
     d78:	82 30       	cpi	r24, 0x02	; 2
     d7a:	91 05       	cpc	r25, r1
     d7c:	1c f4       	brge	.+6      	; 0xd84 <turn_player+0x44>
     d7e:	89 2b       	or	r24, r25
     d80:	81 f1       	breq	.+96     	; 0xde2 <turn_player+0xa2>
     d82:	5e c0       	rjmp	.+188    	; 0xe40 <turn_player+0x100>
     d84:	82 30       	cpi	r24, 0x02	; 2
     d86:	91 05       	cpc	r25, r1
     d88:	19 f0       	breq	.+6      	; 0xd90 <turn_player+0x50>
     d8a:	03 97       	sbiw	r24, 0x03	; 3
     d8c:	b1 f0       	breq	.+44     	; 0xdba <turn_player+0x7a>
     d8e:	58 c0       	rjmp	.+176    	; 0xe40 <turn_player+0x100>
		case UP:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	9c 81       	ldd	r25, Y+4	; 0x04
     d94:	fc 01       	movw	r30, r24
     d96:	84 81       	ldd	r24, Z+4	; 0x04
     d98:	88 23       	and	r24, r24
     d9a:	39 f0       	breq	.+14     	; 0xdaa <turn_player+0x6a>
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	9c 81       	ldd	r25, Y+4	; 0x04
     da0:	fc 01       	movw	r30, r24
     da2:	84 81       	ldd	r24, Z+4	; 0x04
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	09 f0       	breq	.+2      	; 0xdaa <turn_player+0x6a>
     da8:	44 c0       	rjmp	.+136    	; 0xe32 <turn_player+0xf2>
				(*player).direction = direction;
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	2d 81       	ldd	r18, Y+5	; 0x05
     db0:	fc 01       	movw	r30, r24
     db2:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     db8:	3c c0       	rjmp	.+120    	; 0xe32 <turn_player+0xf2>
		case DOWN:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	9c 81       	ldd	r25, Y+4	; 0x04
     dbe:	fc 01       	movw	r30, r24
     dc0:	84 81       	ldd	r24, Z+4	; 0x04
     dc2:	88 23       	and	r24, r24
     dc4:	31 f0       	breq	.+12     	; 0xdd2 <turn_player+0x92>
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
     dca:	fc 01       	movw	r30, r24
     dcc:	84 81       	ldd	r24, Z+4	; 0x04
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	91 f5       	brne	.+100    	; 0xe36 <turn_player+0xf6>
				(*player).direction = direction;
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	9c 81       	ldd	r25, Y+4	; 0x04
     dd6:	2d 81       	ldd	r18, Y+5	; 0x05
     dd8:	fc 01       	movw	r30, r24
     dda:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     de0:	2a c0       	rjmp	.+84     	; 0xe36 <turn_player+0xf6>
		case LEFT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	9c 81       	ldd	r25, Y+4	; 0x04
     de6:	fc 01       	movw	r30, r24
     de8:	84 81       	ldd	r24, Z+4	; 0x04
     dea:	82 30       	cpi	r24, 0x02	; 2
     dec:	31 f0       	breq	.+12     	; 0xdfa <turn_player+0xba>
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	fc 01       	movw	r30, r24
     df4:	84 81       	ldd	r24, Z+4	; 0x04
     df6:	83 30       	cpi	r24, 0x03	; 3
     df8:	01 f5       	brne	.+64     	; 0xe3a <turn_player+0xfa>
				(*player).direction = direction;
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	9c 81       	ldd	r25, Y+4	; 0x04
     dfe:	2d 81       	ldd	r18, Y+5	; 0x05
     e00:	fc 01       	movw	r30, r24
     e02:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     e08:	18 c0       	rjmp	.+48     	; 0xe3a <turn_player+0xfa>
		case RIGHT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	9c 81       	ldd	r25, Y+4	; 0x04
     e0e:	fc 01       	movw	r30, r24
     e10:	84 81       	ldd	r24, Z+4	; 0x04
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	31 f0       	breq	.+12     	; 0xe22 <turn_player+0xe2>
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	9c 81       	ldd	r25, Y+4	; 0x04
     e1a:	fc 01       	movw	r30, r24
     e1c:	84 81       	ldd	r24, Z+4	; 0x04
     e1e:	83 30       	cpi	r24, 0x03	; 3
     e20:	71 f4       	brne	.+28     	; 0xe3e <turn_player+0xfe>
				(*player).direction = direction;
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	9c 81       	ldd	r25, Y+4	; 0x04
     e26:	2d 81       	ldd	r18, Y+5	; 0x05
     e28:	fc 01       	movw	r30, r24
     e2a:	24 83       	std	Z+4, r18	; 0x04
				validTurn = true;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
     e30:	06 c0       	rjmp	.+12     	; 0xe3e <turn_player+0xfe>
		case UP:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
     e32:	00 00       	nop
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <turn_player+0x100>
		case DOWN:
			if ((*player).direction == LEFT || (*player).direction == RIGHT) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
     e36:	00 00       	nop
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <turn_player+0x100>
		case LEFT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
     e3a:	00 00       	nop
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <turn_player+0x100>
		case RIGHT:
			if ((*player).direction == UP || (*player).direction == DOWN) {
				(*player).direction = direction;
				validTurn = true;
			}
			break;
     e3e:	00 00       	nop
	}

	if (doTurn && validTurn) { //New turn !
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	88 23       	and	r24, r24
     e44:	09 f4       	brne	.+2      	; 0xe48 <turn_player+0x108>
     e46:	68 c0       	rjmp	.+208    	; 0xf18 <turn_player+0x1d8>
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	88 23       	and	r24, r24
     e4c:	09 f4       	brne	.+2      	; 0xe50 <turn_player+0x110>
     e4e:	64 c0       	rjmp	.+200    	; 0xf18 <turn_player+0x1d8>
		(*player).turnsCount++;
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	9c 81       	ldd	r25, Y+4	; 0x04
     e54:	8f 5b       	subi	r24, 0xBF	; 191
     e56:	9f 4f       	sbci	r25, 0xFF	; 255
     e58:	fc 01       	movw	r30, r24
     e5a:	80 81       	ld	r24, Z
     e5c:	91 81       	ldd	r25, Z+1	; 0x01
     e5e:	9c 01       	movw	r18, r24
     e60:	2f 5f       	subi	r18, 0xFF	; 255
     e62:	3f 4f       	sbci	r19, 0xFF	; 255
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	9c 81       	ldd	r25, Y+4	; 0x04
     e68:	8f 5b       	subi	r24, 0xBF	; 191
     e6a:	9f 4f       	sbci	r25, 0xFF	; 255
     e6c:	fc 01       	movw	r30, r24
     e6e:	31 83       	std	Z+1, r19	; 0x01
     e70:	20 83       	st	Z, r18

		if ((*player).turnsCount < MAXTURNS && (*player).turns[(*player).turnsCount].x == -1) { //Free turn slot
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	9c 81       	ldd	r25, Y+4	; 0x04
     e76:	8f 5b       	subi	r24, 0xBF	; 191
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	fc 01       	movw	r30, r24
     e7c:	80 81       	ld	r24, Z
     e7e:	91 81       	ldd	r25, Z+1	; 0x01
     e80:	0e 97       	sbiw	r24, 0x0e	; 14
     e82:	0c f0       	brlt	.+2      	; 0xe86 <turn_player+0x146>
     e84:	45 c0       	rjmp	.+138    	; 0xf10 <turn_player+0x1d0>
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	9c 81       	ldd	r25, Y+4	; 0x04
     e8a:	8f 5b       	subi	r24, 0xBF	; 191
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	fc 01       	movw	r30, r24
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	2b 81       	ldd	r18, Y+3	; 0x03
     e96:	3c 81       	ldd	r19, Y+4	; 0x04
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	82 0f       	add	r24, r18
     ea2:	93 1f       	adc	r25, r19
     ea4:	05 96       	adiw	r24, 0x05	; 5
     ea6:	fc 01       	movw	r30, r24
     ea8:	80 81       	ld	r24, Z
     eaa:	91 81       	ldd	r25, Z+1	; 0x01
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	81 f5       	brne	.+96     	; 0xf10 <turn_player+0x1d0>
			(*player).turns[(*player).turnsCount].x = (*player).x;
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	9c 81       	ldd	r25, Y+4	; 0x04
     eb4:	8f 5b       	subi	r24, 0xBF	; 191
     eb6:	9f 4f       	sbci	r25, 0xFF	; 255
     eb8:	fc 01       	movw	r30, r24
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	2b 81       	ldd	r18, Y+3	; 0x03
     ec0:	3c 81       	ldd	r19, Y+4	; 0x04
     ec2:	f9 01       	movw	r30, r18
     ec4:	20 81       	ld	r18, Z
     ec6:	31 81       	ldd	r19, Z+1	; 0x01
     ec8:	4b 81       	ldd	r20, Y+3	; 0x03
     eca:	5c 81       	ldd	r21, Y+4	; 0x04
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	84 0f       	add	r24, r20
     ed6:	95 1f       	adc	r25, r21
     ed8:	05 96       	adiw	r24, 0x05	; 5
     eda:	fc 01       	movw	r30, r24
     edc:	31 83       	std	Z+1, r19	; 0x01
     ede:	20 83       	st	Z, r18
			(*player).turns[(*player).turnsCount].y =  (*player).y;
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	8f 5b       	subi	r24, 0xBF	; 191
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	fc 01       	movw	r30, r24
     eea:	80 81       	ld	r24, Z
     eec:	91 81       	ldd	r25, Z+1	; 0x01
     eee:	2b 81       	ldd	r18, Y+3	; 0x03
     ef0:	3c 81       	ldd	r19, Y+4	; 0x04
     ef2:	f9 01       	movw	r30, r18
     ef4:	22 81       	ldd	r18, Z+2	; 0x02
     ef6:	33 81       	ldd	r19, Z+3	; 0x03
     ef8:	4b 81       	ldd	r20, Y+3	; 0x03
     efa:	5c 81       	ldd	r21, Y+4	; 0x04
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	84 0f       	add	r24, r20
     f06:	95 1f       	adc	r25, r21
     f08:	07 96       	adiw	r24, 0x07	; 7
     f0a:	fc 01       	movw	r30, r24
     f0c:	31 83       	std	Z+1, r19	; 0x01
     f0e:	20 83       	st	Z, r18
		} else {
			//TODO
		}

		move_player(player);
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	0e 94 4c 01 	call	0x298	; 0x298 <move_player>
	}
}
     f18:	00 00       	nop
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	08 95       	ret

00000f2a <init_players>:

/* Initialize the players' positions and turns */
void init_players()
{
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <init_players+0x6>
     f30:	00 d0       	rcall	.+0      	; 0xf32 <init_players+0x8>
     f32:	00 d0       	rcall	.+0      	; 0xf34 <init_players+0xa>
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62

	for (int i = 0; i < MAXTURNS + 1; i++) { //MAXTURNS + 1 because turn[0] is the init position, not a turn
     f38:	1a 82       	std	Y+2, r1	; 0x02
     f3a:	19 82       	std	Y+1, r1	; 0x01
     f3c:	39 c0       	rjmp	.+114    	; 0xfb0 <init_players+0x86>
		playerOne.turns[i].x = -1;
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	87 57       	subi	r24, 0x77	; 119
     f4c:	9d 4f       	sbci	r25, 0xFD	; 253
     f4e:	2f ef       	ldi	r18, 0xFF	; 255
     f50:	3f ef       	ldi	r19, 0xFF	; 255
     f52:	fc 01       	movw	r30, r24
     f54:	31 83       	std	Z+1, r19	; 0x01
     f56:	20 83       	st	Z, r18
		playerOne.turns[i].y = -1;
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	85 57       	subi	r24, 0x75	; 117
     f66:	9d 4f       	sbci	r25, 0xFD	; 253
     f68:	2f ef       	ldi	r18, 0xFF	; 255
     f6a:	3f ef       	ldi	r19, 0xFF	; 255
     f6c:	fc 01       	movw	r30, r24
     f6e:	31 83       	std	Z+1, r19	; 0x01
     f70:	20 83       	st	Z, r18
		playerTwo.turns[i].x = -1;
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	84 53       	subi	r24, 0x34	; 52
     f80:	9d 4f       	sbci	r25, 0xFD	; 253
     f82:	2f ef       	ldi	r18, 0xFF	; 255
     f84:	3f ef       	ldi	r19, 0xFF	; 255
     f86:	fc 01       	movw	r30, r24
     f88:	31 83       	std	Z+1, r19	; 0x01
     f8a:	20 83       	st	Z, r18
		playerTwo.turns[i].y = -1;
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	82 53       	subi	r24, 0x32	; 50
     f9a:	9d 4f       	sbci	r25, 0xFD	; 253
     f9c:	2f ef       	ldi	r18, 0xFF	; 255
     f9e:	3f ef       	ldi	r19, 0xFF	; 255
     fa0:	fc 01       	movw	r30, r24
     fa2:	31 83       	std	Z+1, r19	; 0x01
     fa4:	20 83       	st	Z, r18

/* Initialize the players' positions and turns */
void init_players()
{

	for (int i = 0; i < MAXTURNS + 1; i++) { //MAXTURNS + 1 because turn[0] is the init position, not a turn
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	9a 83       	std	Y+2, r25	; 0x02
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	0f 97       	sbiw	r24, 0x0f	; 15
     fb6:	1c f2       	brlt	.-122    	; 0xf3e <init_players+0x14>
		playerOne.turns[i].y = -1;
		playerTwo.turns[i].x = -1;
		playerTwo.turns[i].y = -1;
	}

	playerOne.turnsCount = 0;
     fb8:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <playerOne+0x42>
     fbc:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <playerOne+0x41>
	playerTwo.turnsCount = 0;
     fc0:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <playerTwo+0x42>
     fc4:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <playerTwo+0x41>

	playerOne.x = 0;
     fc8:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <playerOne+0x1>
     fcc:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <playerOne>
	playerOne.y = 5;
     fd0:	85 e0       	ldi	r24, 0x05	; 5
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <playerOne+0x3>
     fd8:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <playerOne+0x2>
	playerOne.direction = RIGHT;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <playerOne+0x4>
	Turn turn0;
	turn0.x = 0;
     fe2:	1c 82       	std	Y+4, r1	; 0x04
     fe4:	1b 82       	std	Y+3, r1	; 0x03
	turn0.y = 5;
     fe6:	85 e0       	ldi	r24, 0x05	; 5
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	9e 83       	std	Y+6, r25	; 0x06
     fec:	8d 83       	std	Y+5, r24	; 0x05
	playerOne.turns[0] = turn0;
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	9c 81       	ldd	r25, Y+4	; 0x04
     ff2:	ad 81       	ldd	r26, Y+5	; 0x05
     ff4:	be 81       	ldd	r27, Y+6	; 0x06
     ff6:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <playerOne+0x5>
     ffa:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <playerOne+0x6>
     ffe:	a0 93 8b 02 	sts	0x028B, r26	; 0x80028b <playerOne+0x7>
    1002:	b0 93 8c 02 	sts	0x028C, r27	; 0x80028c <playerOne+0x8>

	playerTwo.x = 13;
    1006:	8d e0       	ldi	r24, 0x0D	; 13
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <playerTwo+0x1>
    100e:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <playerTwo>
	playerTwo.y = 5;
    1012:	85 e0       	ldi	r24, 0x05	; 5
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <playerTwo+0x3>
    101a:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <playerTwo+0x2>
	playerTwo.direction = LEFT;
    101e:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <playerTwo+0x4>
	turn0;
	turn0.x = 13;
    1022:	8d e0       	ldi	r24, 0x0D	; 13
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9c 83       	std	Y+4, r25	; 0x04
    1028:	8b 83       	std	Y+3, r24	; 0x03
	turn0.y = 5;
    102a:	85 e0       	ldi	r24, 0x05	; 5
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	8d 83       	std	Y+5, r24	; 0x05
	playerTwo.turns[0] = turn0;
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	ad 81       	ldd	r26, Y+5	; 0x05
    1038:	be 81       	ldd	r27, Y+6	; 0x06
    103a:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <playerTwo+0x5>
    103e:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <playerTwo+0x6>
    1042:	a0 93 ce 02 	sts	0x02CE, r26	; 0x8002ce <playerTwo+0x7>
    1046:	b0 93 cf 02 	sts	0x02CF, r27	; 0x8002cf <playerTwo+0x8>
}
    104a:	00 00       	nop
    104c:	26 96       	adiw	r28, 0x06	; 6
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	08 95       	ret

0000105e <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
	// Set SER to 1
	PORTD |= _BV(PORTD2);
    1066:	8b e2       	ldi	r24, 0x2B	; 43
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	2b e2       	ldi	r18, 0x2B	; 43
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	f9 01       	movw	r30, r18
    1070:	20 81       	ld	r18, Z
    1072:	24 60       	ori	r18, 0x04	; 4
    1074:	fc 01       	movw	r30, r24
    1076:	20 83       	st	Z, r18
}
    1078:	00 00       	nop
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
	// one SCK pulse
	PORTD |= _BV(PORTD5);
    1088:	8b e2       	ldi	r24, 0x2B	; 43
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	2b e2       	ldi	r18, 0x2B	; 43
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	f9 01       	movw	r30, r18
    1092:	20 81       	ld	r18, Z
    1094:	20 62       	ori	r18, 0x20	; 32
    1096:	fc 01       	movw	r30, r24
    1098:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
    109a:	8b e2       	ldi	r24, 0x2B	; 43
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	2b e2       	ldi	r18, 0x2B	; 43
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	f9 01       	movw	r30, r18
    10a4:	20 81       	ld	r18, Z
    10a6:	2f 7d       	andi	r18, 0xDF	; 223
    10a8:	fc 01       	movw	r30, r24
    10aa:	20 83       	st	Z, r18
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
    10ac:	8b e2       	ldi	r24, 0x2B	; 43
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	2b e2       	ldi	r18, 0x2B	; 43
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	f9 01       	movw	r30, r18
    10b6:	20 81       	ld	r18, Z
    10b8:	20 61       	ori	r18, 0x10	; 16
    10ba:	fc 01       	movw	r30, r24
    10bc:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
    10be:	8b e2       	ldi	r24, 0x2B	; 43
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	2b e2       	ldi	r18, 0x2B	; 43
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	f9 01       	movw	r30, r18
    10c8:	20 81       	ld	r18, Z
    10ca:	2f 7e       	andi	r18, 0xEF	; 239
    10cc:	fc 01       	movw	r30, r24
    10ce:	20 83       	st	Z, r18
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
    10d0:	8b e2       	ldi	r24, 0x2B	; 43
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	2b e2       	ldi	r18, 0x2B	; 43
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	f9 01       	movw	r30, r18
    10da:	20 81       	ld	r18, Z
    10dc:	2b 7f       	andi	r18, 0xFB	; 251
    10de:	fc 01       	movw	r30, r24
    10e0:	20 83       	st	Z, r18
}
    10e2:	00 00       	nop
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	08 95       	ret

000010ea <load_col_value>:

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <load_col_value+0x6>
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	9a 83       	std	Y+2, r25	; 0x02
    10f6:	89 83       	std	Y+1, r24	; 0x01
	PORTA = ~(col_value & 0xFF);
    10f8:	82 e2       	ldi	r24, 0x22	; 34
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	29 81       	ldd	r18, Y+1	; 0x01
    10fe:	20 95       	com	r18
    1100:	fc 01       	movw	r30, r24
    1102:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
    1104:	85 e2       	ldi	r24, 0x25	; 37
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	25 e2       	ldi	r18, 0x25	; 37
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	f9 01       	movw	r30, r18
    110e:	20 81       	ld	r18, Z
    1110:	23 60       	ori	r18, 0x03	; 3
    1112:	fc 01       	movw	r30, r24
    1114:	20 83       	st	Z, r18
	PORTB &= ~((col_value >> 8) & 0x03);
    1116:	85 e2       	ldi	r24, 0x25	; 37
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	25 e2       	ldi	r18, 0x25	; 37
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	f9 01       	movw	r30, r18
    1120:	40 81       	ld	r20, Z
    1122:	29 81       	ldd	r18, Y+1	; 0x01
    1124:	3a 81       	ldd	r19, Y+2	; 0x02
    1126:	23 2f       	mov	r18, r19
    1128:	33 27       	eor	r19, r19
    112a:	23 70       	andi	r18, 0x03	; 3
    112c:	20 95       	com	r18
    112e:	24 23       	and	r18, r20
    1130:	fc 01       	movw	r30, r24
    1132:	20 83       	st	Z, r18
}
    1134:	00 00       	nop
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	08 95       	ret

00001140 <handle_display>:

//-----------------------------------------
void handle_display(void)
{
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
	static uint8_t col = 0;
	
	if (col == 0)
    1148:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <col.2839>
    114c:	88 23       	and	r24, r24
    114e:	11 f4       	brne	.+4      	; 0x1154 <handle_display+0x14>
		prepare_shiftregister();
    1150:	0e 94 2f 08 	call	0x105e	; 0x105e <prepare_shiftregister>
	
	load_col_value(frame_buffer[col]);
    1154:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <col.2839>
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	80 5b       	subi	r24, 0xB0	; 176
    1162:	9e 4f       	sbci	r25, 0xFE	; 254
    1164:	fc 01       	movw	r30, r24
    1166:	80 81       	ld	r24, Z
    1168:	91 81       	ldd	r25, Z+1	; 0x01
    116a:	0e 94 75 08 	call	0x10ea	; 0x10ea <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
    116e:	0e 94 40 08 	call	0x1080	; 0x1080 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	if (col++ > 13)
    1172:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <col.2839>
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	98 0f       	add	r25, r24
    117a:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <col.2839>
    117e:	8e 30       	cpi	r24, 0x0E	; 14
    1180:	10 f0       	brcs	.+4      	; 0x1186 <handle_display+0x46>
		col = 0;
    1182:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <col.2839>
}
    1186:	00 00       	nop
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
	//
}
    1196:	00 00       	nop
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <main>:

//-----------------------------------------
int main(void)
{
    119e:	ef 92       	push	r14
    11a0:	ff 92       	push	r15
    11a2:	0f 93       	push	r16
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <main+0xc>
    11aa:	1f 92       	push	r1
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
    11b0:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
    11b4:	8b e2       	ldi	r24, 0x2B	; 43
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	2b e2       	ldi	r18, 0x2B	; 43
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	f9 01       	movw	r30, r18
    11be:	20 81       	ld	r18, Z
    11c0:	2f 7b       	andi	r18, 0xBF	; 191
    11c2:	fc 01       	movw	r30, r24
    11c4:	20 83       	st	Z, r18

	/* Semaphores creation */
	xGameStateSemaphore = xSemaphoreCreateMutex();
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	0e 94 ef 13 	call	0x27de	; 0x27de <xQueueCreateMutex>
    11cc:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <xGameStateSemaphore+0x1>
    11d0:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <xGameStateSemaphore>
	xPlayerOneSemaphore = xSemaphoreCreateMutex();
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	0e 94 ef 13 	call	0x27de	; 0x27de <xQueueCreateMutex>
    11da:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <xPlayerOneSemaphore+0x1>
    11de:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <xPlayerOneSemaphore>
	xPlayerTwoSemaphore = xSemaphoreCreateMutex();
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	0e 94 ef 13 	call	0x27de	; 0x27de <xQueueCreateMutex>
    11e8:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <xPlayerTwoSemaphore+0x1>
    11ec:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <xPlayerTwoSemaphore>
	xGameOverSemaphore = xSemaphoreCreateMutex();
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	0e 94 ef 13 	call	0x27de	; 0x27de <xQueueCreateMutex>
    11f6:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <xGameOverSemaphore+0x1>
    11fa:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <xGameOverSemaphore>

	init_players();
    11fe:	0e 94 95 07 	call	0xf2a	; 0xf2a <init_players>

	BaseType_t taskReadJoystick = xTaskCreate(read_joystick, (const char*)"Read joystick", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
    1202:	e1 2c       	mov	r14, r1
    1204:	f1 2c       	mov	r15, r1
    1206:	00 e0       	ldi	r16, 0x00	; 0
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	45 e5       	ldi	r20, 0x55	; 85
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	61 e2       	ldi	r22, 0x21	; 33
    1212:	71 e0       	ldi	r23, 0x01	; 1
    1214:	85 ef       	ldi	r24, 0xF5	; 245
    1216:	95 e0       	ldi	r25, 0x05	; 5
    1218:	0e 94 6f 16 	call	0x2cde	; 0x2cde <xTaskCreate>
    121c:	89 83       	std	Y+1, r24	; 0x01
	BaseType_t taskGameProcessing = xTaskCreate(game_processing, (const char*)"Game processing", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
    121e:	e1 2c       	mov	r14, r1
    1220:	f1 2c       	mov	r15, r1
    1222:	00 e0       	ldi	r16, 0x00	; 0
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	45 e5       	ldi	r20, 0x55	; 85
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	6f e2       	ldi	r22, 0x2F	; 47
    122e:	71 e0       	ldi	r23, 0x01	; 1
    1230:	88 e3       	ldi	r24, 0x38	; 56
    1232:	95 e0       	ldi	r25, 0x05	; 5
    1234:	0e 94 6f 16 	call	0x2cde	; 0x2cde <xTaskCreate>
    1238:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t taskMakeFrame = xTaskCreate(make_frame, (const char*)"Make frame", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL );
    123a:	e1 2c       	mov	r14, r1
    123c:	f1 2c       	mov	r15, r1
    123e:	00 e0       	ldi	r16, 0x00	; 0
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	45 e5       	ldi	r20, 0x55	; 85
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	6f e3       	ldi	r22, 0x3F	; 63
    124a:	71 e0       	ldi	r23, 0x01	; 1
    124c:	8e e9       	ldi	r24, 0x9E	; 158
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 6f 16 	call	0x2cde	; 0x2cde <xTaskCreate>
    1254:	8b 83       	std	Y+3, r24	; 0x03


	// Start the display handler timer
	init_display_timer(handle_display);
    1256:	80 ea       	ldi	r24, 0xA0	; 160
    1258:	98 e0       	ldi	r25, 0x08	; 8
    125a:	0e 94 5d 09 	call	0x12ba	; 0x12ba <init_display_timer>
	
	sei();
    125e:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
    1260:	0e 94 6f 18 	call	0x30de	; 0x30de <vTaskStartScheduler>
	
	//Should never reach here
	while (1) {}
    1264:	ff cf       	rjmp	.-2      	; 0x1264 <main+0xc6>

00001266 <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
	_x_rx_com_queue = x_rx_queue;
}
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	00 d0       	rcall	.+0      	; 0x126c <_com_call_back+0x6>
    126c:	00 d0       	rcall	.+0      	; 0x126e <_com_call_back+0x8>
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	9b 83       	std	Y+3, r25	; 0x03
    1274:	8a 83       	std	Y+2, r24	; 0x02
    1276:	6c 83       	std	Y+4, r22	; 0x04
    1278:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_x_rx_com_queue>
    127c:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <_x_rx_com_queue+0x1>
    1280:	89 2b       	or	r24, r25
    1282:	99 f0       	breq	.+38     	; 0x12aa <_com_call_back+0x44>
    1284:	19 82       	std	Y+1, r1	; 0x01
    1286:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_x_rx_com_queue>
    128a:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <_x_rx_com_queue+0x1>
    128e:	be 01       	movw	r22, r28
    1290:	6c 5f       	subi	r22, 0xFC	; 252
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	ae 01       	movw	r20, r28
    1298:	4f 5f       	subi	r20, 0xFF	; 255
    129a:	5f 4f       	sbci	r21, 0xFF	; 255
    129c:	0e 94 c0 14 	call	0x2980	; 0x2980 <xQueueGenericSendFromISR>
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	88 23       	and	r24, r24
    12a4:	11 f0       	breq	.+4      	; 0x12aa <_com_call_back+0x44>
    12a6:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vPortYield>
    12aa:	00 00       	nop
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <init_display_timer>:

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <init_display_timer+0x6>
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	9a 83       	std	Y+2, r25	; 0x02
    12c6:	89 83       	std	Y+1, r24	; 0x01
	cb_ptr = cb;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	9a 81       	ldd	r25, Y+2	; 0x02
    12cc:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <cb_ptr+0x1>
    12d0:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
    12d4:	87 e4       	ldi	r24, 0x47	; 71
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	2a e0       	ldi	r18, 0x0A	; 10
    12da:	fc 01       	movw	r30, r24
    12dc:	20 83       	st	Z, r18
	TCCR0A |= _BV(WGM01); // Mode 2
    12de:	84 e4       	ldi	r24, 0x44	; 68
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	24 e4       	ldi	r18, 0x44	; 68
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	f9 01       	movw	r30, r18
    12e8:	20 81       	ld	r18, Z
    12ea:	22 60       	ori	r18, 0x02	; 2
    12ec:	fc 01       	movw	r30, r24
    12ee:	20 83       	st	Z, r18
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
    12f0:	8e e6       	ldi	r24, 0x6E	; 110
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	2e e6       	ldi	r18, 0x6E	; 110
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	f9 01       	movw	r30, r18
    12fa:	20 81       	ld	r18, Z
    12fc:	22 60       	ori	r18, 0x02	; 2
    12fe:	fc 01       	movw	r30, r24
    1300:	20 83       	st	Z, r18
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
    1302:	85 e4       	ldi	r24, 0x45	; 69
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	25 e4       	ldi	r18, 0x45	; 69
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	f9 01       	movw	r30, r18
    130c:	20 81       	ld	r18, Z
    130e:	25 60       	ori	r18, 0x05	; 5
    1310:	fc 01       	movw	r30, r24
    1312:	20 83       	st	Z, r18
}
    1314:	00 00       	nop
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	08 95       	ret

00001320 <__vector_16>:

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
    1320:	1f 92       	push	r1
    1322:	0f 92       	push	r0
    1324:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1328:	0f 92       	push	r0
    132a:	11 24       	eor	r1, r1
    132c:	2f 93       	push	r18
    132e:	3f 93       	push	r19
    1330:	4f 93       	push	r20
    1332:	5f 93       	push	r21
    1334:	6f 93       	push	r22
    1336:	7f 93       	push	r23
    1338:	8f 93       	push	r24
    133a:	9f 93       	push	r25
    133c:	af 93       	push	r26
    133e:	bf 93       	push	r27
    1340:	ef 93       	push	r30
    1342:	ff 93       	push	r31
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
	if (cb_ptr)
    134c:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <cb_ptr>
    1350:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <cb_ptr+0x1>
    1354:	89 2b       	or	r24, r25
    1356:	31 f0       	breq	.+12     	; 0x1364 <__vector_16+0x44>
	{
		cb_ptr();
    1358:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <cb_ptr>
    135c:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <cb_ptr+0x1>
    1360:	fc 01       	movw	r30, r24
    1362:	09 95       	icall
	}
}
    1364:	00 00       	nop
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	ff 91       	pop	r31
    136c:	ef 91       	pop	r30
    136e:	bf 91       	pop	r27
    1370:	af 91       	pop	r26
    1372:	9f 91       	pop	r25
    1374:	8f 91       	pop	r24
    1376:	7f 91       	pop	r23
    1378:	6f 91       	pop	r22
    137a:	5f 91       	pop	r21
    137c:	4f 91       	pop	r20
    137e:	3f 91       	pop	r19
    1380:	2f 91       	pop	r18
    1382:	0f 90       	pop	r0
    1384:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1388:	0f 90       	pop	r0
    138a:	1f 90       	pop	r1
    138c:	18 95       	reti

0000138e <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	00 d0       	rcall	.+0      	; 0x1394 <com_send_bytes+0x6>
    1394:	1f 92       	push	r1
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	9a 83       	std	Y+2, r25	; 0x02
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	6b 83       	std	Y+3, r22	; 0x03
	serial_send_bytes(_com_serial_instance, bytes, len);
    13a0:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_com_serial_instance>
    13a4:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <_com_serial_instance+0x1>
    13a8:	29 81       	ldd	r18, Y+1	; 0x01
    13aa:	3a 81       	ldd	r19, Y+2	; 0x02
    13ac:	4b 81       	ldd	r20, Y+3	; 0x03
    13ae:	b9 01       	movw	r22, r18
    13b0:	0e 94 db 10 	call	0x21b6	; 0x21b6 <serial_send_bytes>
}
    13b4:	00 00       	nop
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
    13c2:	8f 92       	push	r8
    13c4:	9f 92       	push	r9
    13c6:	af 92       	push	r10
    13c8:	bf 92       	push	r11
    13ca:	cf 92       	push	r12
    13cc:	df 92       	push	r13
    13ce:	ef 92       	push	r14
    13d0:	0f 93       	push	r16
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
    13da:	89 e1       	ldi	r24, 0x19	; 25
    13dc:	93 e0       	ldi	r25, 0x03	; 3
    13de:	0e 94 99 0a 	call	0x1532	; 0x1532 <buffer_init>
	buffer_init(&_com_tx_buffer);
    13e2:	8c e3       	ldi	r24, 0x3C	; 60
    13e4:	93 e0       	ldi	r25, 0x03	; 3
    13e6:	0e 94 99 0a 	call	0x1532	; 0x1532 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
    13ea:	0f 2e       	mov	r0, r31
    13ec:	f3 e3       	ldi	r31, 0x33	; 51
    13ee:	8f 2e       	mov	r8, r31
    13f0:	f9 e0       	ldi	r31, 0x09	; 9
    13f2:	9f 2e       	mov	r9, r31
    13f4:	f0 2d       	mov	r31, r0
    13f6:	0f 2e       	mov	r0, r31
    13f8:	fc e3       	ldi	r31, 0x3C	; 60
    13fa:	af 2e       	mov	r10, r31
    13fc:	f3 e0       	ldi	r31, 0x03	; 3
    13fe:	bf 2e       	mov	r11, r31
    1400:	f0 2d       	mov	r31, r0
    1402:	0f 2e       	mov	r0, r31
    1404:	f9 e1       	ldi	r31, 0x19	; 25
    1406:	cf 2e       	mov	r12, r31
    1408:	f3 e0       	ldi	r31, 0x03	; 3
    140a:	df 2e       	mov	r13, r31
    140c:	f0 2d       	mov	r31, r0
    140e:	e1 2c       	mov	r14, r1
    1410:	00 e0       	ldi	r16, 0x00	; 0
    1412:	23 e0       	ldi	r18, 0x03	; 3
    1414:	40 e0       	ldi	r20, 0x00	; 0
    1416:	52 ec       	ldi	r21, 0xC2	; 194
    1418:	61 e0       	ldi	r22, 0x01	; 1
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	0e 94 1a 10 	call	0x2034	; 0x2034 <serial_new_instance>
    1422:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <_com_serial_instance+0x1>
    1426:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
    142a:	88 e2       	ldi	r24, 0x28	; 40
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	28 e2       	ldi	r18, 0x28	; 40
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	f9 01       	movw	r30, r18
    1434:	20 81       	ld	r18, Z
    1436:	23 6c       	ori	r18, 0xC3	; 195
    1438:	fc 01       	movw	r30, r24
    143a:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
    143c:	8b e2       	ldi	r24, 0x2B	; 43
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	2b e2       	ldi	r18, 0x2B	; 43
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	f9 01       	movw	r30, r18
    1446:	20 81       	ld	r18, Z
    1448:	28 60       	ori	r18, 0x08	; 8
    144a:	fc 01       	movw	r30, r24
    144c:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
    144e:	8a e2       	ldi	r24, 0x2A	; 42
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	2a e2       	ldi	r18, 0x2A	; 42
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	f9 01       	movw	r30, r18
    1458:	20 81       	ld	r18, Z
    145a:	24 67       	ori	r18, 0x74	; 116
    145c:	fc 01       	movw	r30, r24
    145e:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
    1460:	8b e2       	ldi	r24, 0x2B	; 43
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	2b e2       	ldi	r18, 0x2B	; 43
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	f9 01       	movw	r30, r18
    146a:	20 81       	ld	r18, Z
    146c:	20 64       	ori	r18, 0x40	; 64
    146e:	fc 01       	movw	r30, r24
    1470:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
    1472:	81 e2       	ldi	r24, 0x21	; 33
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	fc 01       	movw	r30, r24
    1478:	80 81       	ld	r24, Z
    147a:	81 e2       	ldi	r24, 0x21	; 33
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	2f ef       	ldi	r18, 0xFF	; 255
    1480:	fc 01       	movw	r30, r24
    1482:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
    1484:	84 e2       	ldi	r24, 0x24	; 36
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	24 e2       	ldi	r18, 0x24	; 36
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	f9 01       	movw	r30, r18
    148e:	20 81       	ld	r18, Z
    1490:	23 60       	ori	r18, 0x03	; 3
    1492:	fc 01       	movw	r30, r24
    1494:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
    1496:	84 e2       	ldi	r24, 0x24	; 36
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	24 e2       	ldi	r18, 0x24	; 36
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	f9 01       	movw	r30, r18
    14a0:	20 81       	ld	r18, Z
    14a2:	2c 63       	ori	r18, 0x3C	; 60
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 83       	st	Z, r18
}
    14a8:	00 00       	nop
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	0f 91       	pop	r16
    14b0:	ef 90       	pop	r14
    14b2:	df 90       	pop	r13
    14b4:	cf 90       	pop	r12
    14b6:	bf 90       	pop	r11
    14b8:	af 90       	pop	r10
    14ba:	9f 90       	pop	r9
    14bc:	8f 90       	pop	r8
    14be:	08 95       	ret

000014c0 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	1f 92       	push	r1
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
    14cc:	85 e2       	ldi	r24, 0x25	; 37
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	25 e2       	ldi	r18, 0x25	; 37
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	f9 01       	movw	r30, r18
    14d6:	20 81       	ld	r18, Z
    14d8:	23 7c       	andi	r18, 0xC3	; 195
    14da:	fc 01       	movw	r30, r24
    14dc:	20 83       	st	Z, r18
		PORTB |= task_no << 2;
    14de:	85 e2       	ldi	r24, 0x25	; 37
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	25 e2       	ldi	r18, 0x25	; 37
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	f9 01       	movw	r30, r18
    14e8:	20 81       	ld	r18, Z
    14ea:	42 2f       	mov	r20, r18
    14ec:	29 81       	ldd	r18, Y+1	; 0x01
    14ee:	22 2f       	mov	r18, r18
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	22 0f       	add	r18, r18
    14f4:	33 1f       	adc	r19, r19
    14f6:	22 0f       	add	r18, r18
    14f8:	33 1f       	adc	r19, r19
    14fa:	24 2b       	or	r18, r20
    14fc:	fc 01       	movw	r30, r24
    14fe:	20 83       	st	Z, r18
	}
    1500:	00 00       	nop
    1502:	0f 90       	pop	r0
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	1f 92       	push	r1
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
    1516:	85 e2       	ldi	r24, 0x25	; 37
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	25 e2       	ldi	r18, 0x25	; 37
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	f9 01       	movw	r30, r18
    1520:	20 81       	ld	r18, Z
    1522:	23 7c       	andi	r18, 0xC3	; 195
    1524:	fc 01       	movw	r30, r24
    1526:	20 83       	st	Z, r18
	}
    1528:	00 00       	nop
    152a:	0f 90       	pop	r0
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	08 95       	ret

00001532 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	00 d0       	rcall	.+0      	; 0x1538 <buffer_init+0x6>
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	9a 83       	std	Y+2, r25	; 0x02
    153e:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	9a 81       	ldd	r25, Y+2	; 0x02
    1544:	fc 01       	movw	r30, r24
    1546:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	fc 01       	movw	r30, r24
    154e:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	9a 81       	ldd	r25, Y+2	; 0x02
    1554:	fc 01       	movw	r30, r24
    1556:	12 a2       	std	Z+34, r1	; 0x22
}
    1558:	00 00       	nop
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

00001564 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	00 d0       	rcall	.+0      	; 0x156a <buffer_get_item+0x6>
    156a:	00 d0       	rcall	.+0      	; 0x156c <buffer_get_item+0x8>
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	7c 83       	std	Y+4, r23	; 0x04
    1576:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	9a 81       	ldd	r25, Y+2	; 0x02
    157c:	fc 01       	movw	r30, r24
    157e:	82 a1       	ldd	r24, Z+34	; 0x22
    1580:	88 23       	and	r24, r24
    1582:	81 f1       	breq	.+96     	; 0x15e4 <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	fc 01       	movw	r30, r24
    158a:	81 a1       	ldd	r24, Z+33	; 0x21
    158c:	88 2f       	mov	r24, r24
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	29 81       	ldd	r18, Y+1	; 0x01
    1592:	3a 81       	ldd	r19, Y+2	; 0x02
    1594:	82 0f       	add	r24, r18
    1596:	93 1f       	adc	r25, r19
    1598:	fc 01       	movw	r30, r24
    159a:	20 81       	ld	r18, Z
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	fc 01       	movw	r30, r24
    15a2:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	9a 81       	ldd	r25, Y+2	; 0x02
    15a8:	fc 01       	movw	r30, r24
    15aa:	81 a1       	ldd	r24, Z+33	; 0x21
    15ac:	88 2f       	mov	r24, r24
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	01 96       	adiw	r24, 0x01	; 1
    15b2:	8f 71       	andi	r24, 0x1F	; 31
    15b4:	90 78       	andi	r25, 0x80	; 128
    15b6:	99 23       	and	r25, r25
    15b8:	24 f4       	brge	.+8      	; 0x15c2 <buffer_get_item+0x5e>
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	80 6e       	ori	r24, 0xE0	; 224
    15be:	9f 6f       	ori	r25, 0xFF	; 255
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	28 2f       	mov	r18, r24
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	fc 01       	movw	r30, r24
    15ca:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	fc 01       	movw	r30, r24
    15d2:	82 a1       	ldd	r24, Z+34	; 0x22
    15d4:	2f ef       	ldi	r18, 0xFF	; 255
    15d6:	28 0f       	add	r18, r24
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	9a 81       	ldd	r25, Y+2	; 0x02
    15dc:	fc 01       	movw	r30, r24
    15de:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
}
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	08 95       	ret

000015f4 <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <buffer_put_item+0x6>
    15fa:	1f 92       	push	r1
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	9a 83       	std	Y+2, r25	; 0x02
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	9a 81       	ldd	r25, Y+2	; 0x02
    160a:	fc 01       	movw	r30, r24
    160c:	82 a1       	ldd	r24, Z+34	; 0x22
    160e:	80 32       	cpi	r24, 0x20	; 32
    1610:	68 f5       	brcc	.+90     	; 0x166c <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	fc 01       	movw	r30, r24
    1618:	80 a1       	ldd	r24, Z+32	; 0x20
    161a:	88 2f       	mov	r24, r24
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	29 81       	ldd	r18, Y+1	; 0x01
    1620:	3a 81       	ldd	r19, Y+2	; 0x02
    1622:	82 0f       	add	r24, r18
    1624:	93 1f       	adc	r25, r19
    1626:	2b 81       	ldd	r18, Y+3	; 0x03
    1628:	fc 01       	movw	r30, r24
    162a:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	9a 81       	ldd	r25, Y+2	; 0x02
    1630:	fc 01       	movw	r30, r24
    1632:	80 a1       	ldd	r24, Z+32	; 0x20
    1634:	88 2f       	mov	r24, r24
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	8f 71       	andi	r24, 0x1F	; 31
    163c:	90 78       	andi	r25, 0x80	; 128
    163e:	99 23       	and	r25, r25
    1640:	24 f4       	brge	.+8      	; 0x164a <buffer_put_item+0x56>
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	80 6e       	ori	r24, 0xE0	; 224
    1646:	9f 6f       	ori	r25, 0xFF	; 255
    1648:	01 96       	adiw	r24, 0x01	; 1
    164a:	28 2f       	mov	r18, r24
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	9a 81       	ldd	r25, Y+2	; 0x02
    1650:	fc 01       	movw	r30, r24
    1652:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	9a 81       	ldd	r25, Y+2	; 0x02
    1658:	fc 01       	movw	r30, r24
    165a:	82 a1       	ldd	r24, Z+34	; 0x22
    165c:	21 e0       	ldi	r18, 0x01	; 1
    165e:	28 0f       	add	r18, r24
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	9a 81       	ldd	r25, Y+2	; 0x02
    1664:	fc 01       	movw	r30, r24
    1666:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	01 c0       	rjmp	.+2      	; 0x166e <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
    166c:	82 e0       	ldi	r24, 0x02	; 2
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	08 95       	ret

0000167a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	00 d0       	rcall	.+0      	; 0x1680 <vListInitialise+0x6>
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	9a 83       	std	Y+2, r25	; 0x02
    1686:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	9a 81       	ldd	r25, Y+2	; 0x02
    168c:	9c 01       	movw	r18, r24
    168e:	2d 5f       	subi	r18, 0xFD	; 253
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	fc 01       	movw	r30, r24
    1698:	32 83       	std	Z+2, r19	; 0x02
    169a:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	9a 81       	ldd	r25, Y+2	; 0x02
    16a0:	2f ef       	ldi	r18, 0xFF	; 255
    16a2:	3f ef       	ldi	r19, 0xFF	; 255
    16a4:	fc 01       	movw	r30, r24
    16a6:	34 83       	std	Z+4, r19	; 0x04
    16a8:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	9a 81       	ldd	r25, Y+2	; 0x02
    16ae:	9c 01       	movw	r18, r24
    16b0:	2d 5f       	subi	r18, 0xFD	; 253
    16b2:	3f 4f       	sbci	r19, 0xFF	; 255
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	9a 81       	ldd	r25, Y+2	; 0x02
    16b8:	fc 01       	movw	r30, r24
    16ba:	36 83       	std	Z+6, r19	; 0x06
    16bc:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	9a 81       	ldd	r25, Y+2	; 0x02
    16c2:	9c 01       	movw	r18, r24
    16c4:	2d 5f       	subi	r18, 0xFD	; 253
    16c6:	3f 4f       	sbci	r19, 0xFF	; 255
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	9a 81       	ldd	r25, Y+2	; 0x02
    16cc:	fc 01       	movw	r30, r24
    16ce:	30 87       	std	Z+8, r19	; 0x08
    16d0:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	9a 81       	ldd	r25, Y+2	; 0x02
    16d6:	fc 01       	movw	r30, r24
    16d8:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    16da:	00 00       	nop
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <vListInitialiseItem+0x6>
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	9a 81       	ldd	r25, Y+2	; 0x02
    16f8:	fc 01       	movw	r30, r24
    16fa:	11 86       	std	Z+9, r1	; 0x09
    16fc:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    16fe:	00 00       	nop
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	08 95       	ret

0000170a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	00 d0       	rcall	.+0      	; 0x1710 <vListInsertEnd+0x6>
    1710:	00 d0       	rcall	.+0      	; 0x1712 <vListInsertEnd+0x8>
    1712:	00 d0       	rcall	.+0      	; 0x1714 <vListInsertEnd+0xa>
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	9c 83       	std	Y+4, r25	; 0x04
    171a:	8b 83       	std	Y+3, r24	; 0x03
    171c:	7e 83       	std	Y+6, r23	; 0x06
    171e:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	fc 01       	movw	r30, r24
    1726:	81 81       	ldd	r24, Z+1	; 0x01
    1728:	92 81       	ldd	r25, Z+2	; 0x02
    172a:	9a 83       	std	Y+2, r25	; 0x02
    172c:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    172e:	8d 81       	ldd	r24, Y+5	; 0x05
    1730:	9e 81       	ldd	r25, Y+6	; 0x06
    1732:	29 81       	ldd	r18, Y+1	; 0x01
    1734:	3a 81       	ldd	r19, Y+2	; 0x02
    1736:	fc 01       	movw	r30, r24
    1738:	33 83       	std	Z+3, r19	; 0x03
    173a:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	9a 81       	ldd	r25, Y+2	; 0x02
    1740:	fc 01       	movw	r30, r24
    1742:	24 81       	ldd	r18, Z+4	; 0x04
    1744:	35 81       	ldd	r19, Z+5	; 0x05
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	fc 01       	movw	r30, r24
    174c:	35 83       	std	Z+5, r19	; 0x05
    174e:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	fc 01       	movw	r30, r24
    1756:	84 81       	ldd	r24, Z+4	; 0x04
    1758:	95 81       	ldd	r25, Z+5	; 0x05
    175a:	2d 81       	ldd	r18, Y+5	; 0x05
    175c:	3e 81       	ldd	r19, Y+6	; 0x06
    175e:	fc 01       	movw	r30, r24
    1760:	33 83       	std	Z+3, r19	; 0x03
    1762:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	9a 81       	ldd	r25, Y+2	; 0x02
    1768:	2d 81       	ldd	r18, Y+5	; 0x05
    176a:	3e 81       	ldd	r19, Y+6	; 0x06
    176c:	fc 01       	movw	r30, r24
    176e:	35 83       	std	Z+5, r19	; 0x05
    1770:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	2b 81       	ldd	r18, Y+3	; 0x03
    1778:	3c 81       	ldd	r19, Y+4	; 0x04
    177a:	fc 01       	movw	r30, r24
    177c:	31 87       	std	Z+9, r19	; 0x09
    177e:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	fc 01       	movw	r30, r24
    1786:	80 81       	ld	r24, Z
    1788:	21 e0       	ldi	r18, 0x01	; 1
    178a:	28 0f       	add	r18, r24
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	fc 01       	movw	r30, r24
    1792:	20 83       	st	Z, r18
}
    1794:	00 00       	nop
    1796:	26 96       	adiw	r28, 0x06	; 6
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	de bf       	out	0x3e, r29	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	08 95       	ret

000017a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	28 97       	sbiw	r28, 0x08	; 8
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	9e 83       	std	Y+6, r25	; 0x06
    17be:	8d 83       	std	Y+5, r24	; 0x05
    17c0:	78 87       	std	Y+8, r23	; 0x08
    17c2:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    17c4:	8f 81       	ldd	r24, Y+7	; 0x07
    17c6:	98 85       	ldd	r25, Y+8	; 0x08
    17c8:	fc 01       	movw	r30, r24
    17ca:	80 81       	ld	r24, Z
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
    17ce:	9c 83       	std	Y+4, r25	; 0x04
    17d0:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	41 f4       	brne	.+16     	; 0x17ea <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
    17dc:	9e 81       	ldd	r25, Y+6	; 0x06
    17de:	fc 01       	movw	r30, r24
    17e0:	87 81       	ldd	r24, Z+7	; 0x07
    17e2:	90 85       	ldd	r25, Z+8	; 0x08
    17e4:	9a 83       	std	Y+2, r25	; 0x02
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	1a c0       	rjmp	.+52     	; 0x181e <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	9e 81       	ldd	r25, Y+6	; 0x06
    17ee:	03 96       	adiw	r24, 0x03	; 3
    17f0:	9a 83       	std	Y+2, r25	; 0x02
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	07 c0       	rjmp	.+14     	; 0x1804 <vListInsert+0x5c>
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	9a 81       	ldd	r25, Y+2	; 0x02
    17fa:	fc 01       	movw	r30, r24
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	93 81       	ldd	r25, Z+3	; 0x03
    1800:	9a 83       	std	Y+2, r25	; 0x02
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	9a 81       	ldd	r25, Y+2	; 0x02
    1808:	fc 01       	movw	r30, r24
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	93 81       	ldd	r25, Z+3	; 0x03
    180e:	fc 01       	movw	r30, r24
    1810:	20 81       	ld	r18, Z
    1812:	31 81       	ldd	r19, Z+1	; 0x01
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	82 17       	cp	r24, r18
    181a:	93 07       	cpc	r25, r19
    181c:	60 f7       	brcc	.-40     	; 0x17f6 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	fc 01       	movw	r30, r24
    1824:	22 81       	ldd	r18, Z+2	; 0x02
    1826:	33 81       	ldd	r19, Z+3	; 0x03
    1828:	8f 81       	ldd	r24, Y+7	; 0x07
    182a:	98 85       	ldd	r25, Y+8	; 0x08
    182c:	fc 01       	movw	r30, r24
    182e:	33 83       	std	Z+3, r19	; 0x03
    1830:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1832:	8f 81       	ldd	r24, Y+7	; 0x07
    1834:	98 85       	ldd	r25, Y+8	; 0x08
    1836:	fc 01       	movw	r30, r24
    1838:	82 81       	ldd	r24, Z+2	; 0x02
    183a:	93 81       	ldd	r25, Z+3	; 0x03
    183c:	2f 81       	ldd	r18, Y+7	; 0x07
    183e:	38 85       	ldd	r19, Y+8	; 0x08
    1840:	fc 01       	movw	r30, r24
    1842:	35 83       	std	Z+5, r19	; 0x05
    1844:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1846:	8f 81       	ldd	r24, Y+7	; 0x07
    1848:	98 85       	ldd	r25, Y+8	; 0x08
    184a:	29 81       	ldd	r18, Y+1	; 0x01
    184c:	3a 81       	ldd	r19, Y+2	; 0x02
    184e:	fc 01       	movw	r30, r24
    1850:	35 83       	std	Z+5, r19	; 0x05
    1852:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	9a 81       	ldd	r25, Y+2	; 0x02
    1858:	2f 81       	ldd	r18, Y+7	; 0x07
    185a:	38 85       	ldd	r19, Y+8	; 0x08
    185c:	fc 01       	movw	r30, r24
    185e:	33 83       	std	Z+3, r19	; 0x03
    1860:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1862:	8f 81       	ldd	r24, Y+7	; 0x07
    1864:	98 85       	ldd	r25, Y+8	; 0x08
    1866:	2d 81       	ldd	r18, Y+5	; 0x05
    1868:	3e 81       	ldd	r19, Y+6	; 0x06
    186a:	fc 01       	movw	r30, r24
    186c:	31 87       	std	Z+9, r19	; 0x09
    186e:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	9e 81       	ldd	r25, Y+6	; 0x06
    1874:	fc 01       	movw	r30, r24
    1876:	80 81       	ld	r24, Z
    1878:	21 e0       	ldi	r18, 0x01	; 1
    187a:	28 0f       	add	r18, r24
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	fc 01       	movw	r30, r24
    1882:	20 83       	st	Z, r18
}
    1884:	00 00       	nop
    1886:	28 96       	adiw	r28, 0x08	; 8
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	08 95       	ret

00001898 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	00 d0       	rcall	.+0      	; 0x189e <uxListRemove+0x6>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <uxListRemove+0x8>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	9c 83       	std	Y+4, r25	; 0x04
    18a6:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	fc 01       	movw	r30, r24
    18ae:	80 85       	ldd	r24, Z+8	; 0x08
    18b0:	91 85       	ldd	r25, Z+9	; 0x09
    18b2:	9a 83       	std	Y+2, r25	; 0x02
    18b4:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	fc 01       	movw	r30, r24
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	2b 81       	ldd	r18, Y+3	; 0x03
    18c2:	3c 81       	ldd	r19, Y+4	; 0x04
    18c4:	f9 01       	movw	r30, r18
    18c6:	24 81       	ldd	r18, Z+4	; 0x04
    18c8:	35 81       	ldd	r19, Z+5	; 0x05
    18ca:	fc 01       	movw	r30, r24
    18cc:	35 83       	std	Z+5, r19	; 0x05
    18ce:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	fc 01       	movw	r30, r24
    18d6:	84 81       	ldd	r24, Z+4	; 0x04
    18d8:	95 81       	ldd	r25, Z+5	; 0x05
    18da:	2b 81       	ldd	r18, Y+3	; 0x03
    18dc:	3c 81       	ldd	r19, Y+4	; 0x04
    18de:	f9 01       	movw	r30, r18
    18e0:	22 81       	ldd	r18, Z+2	; 0x02
    18e2:	33 81       	ldd	r19, Z+3	; 0x03
    18e4:	fc 01       	movw	r30, r24
    18e6:	33 83       	std	Z+3, r19	; 0x03
    18e8:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	9a 81       	ldd	r25, Y+2	; 0x02
    18ee:	fc 01       	movw	r30, r24
    18f0:	21 81       	ldd	r18, Z+1	; 0x01
    18f2:	32 81       	ldd	r19, Z+2	; 0x02
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	28 17       	cp	r18, r24
    18fa:	39 07       	cpc	r19, r25
    18fc:	51 f4       	brne	.+20     	; 0x1912 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	9c 81       	ldd	r25, Y+4	; 0x04
    1902:	fc 01       	movw	r30, r24
    1904:	24 81       	ldd	r18, Z+4	; 0x04
    1906:	35 81       	ldd	r19, Z+5	; 0x05
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	fc 01       	movw	r30, r24
    190e:	32 83       	std	Z+2, r19	; 0x02
    1910:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	fc 01       	movw	r30, r24
    1918:	11 86       	std	Z+9, r1	; 0x09
    191a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	fc 01       	movw	r30, r24
    1922:	80 81       	ld	r24, Z
    1924:	2f ef       	ldi	r18, 0xFF	; 255
    1926:	28 0f       	add	r18, r24
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	fc 01       	movw	r30, r24
    192e:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	fc 01       	movw	r30, r24
    1936:	80 81       	ld	r24, Z
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	08 95       	ret

00001946 <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	28 97       	sbiw	r28, 0x08	; 8
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	9c 83       	std	Y+4, r25	; 0x04
    195c:	8b 83       	std	Y+3, r24	; 0x03
    195e:	7e 83       	std	Y+6, r23	; 0x06
    1960:	6d 83       	std	Y+5, r22	; 0x05
    1962:	58 87       	std	Y+8, r21	; 0x08
    1964:	4f 83       	std	Y+7, r20	; 0x07
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	21 e1       	ldi	r18, 0x11	; 17
    196c:	fc 01       	movw	r30, r24
    196e:	20 83       	st	Z, r18
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	9c 83       	std	Y+4, r25	; 0x04
    1978:	8b 83       	std	Y+3, r24	; 0x03
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	9c 81       	ldd	r25, Y+4	; 0x04
    197e:	22 e2       	ldi	r18, 0x22	; 34
    1980:	fc 01       	movw	r30, r24
    1982:	20 83       	st	Z, r18
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	9c 83       	std	Y+4, r25	; 0x04
    198c:	8b 83       	std	Y+3, r24	; 0x03
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	23 e3       	ldi	r18, 0x33	; 51
    1994:	fc 01       	movw	r30, r24
    1996:	20 83       	st	Z, r18
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	9c 83       	std	Y+4, r25	; 0x04
    19a0:	8b 83       	std	Y+3, r24	; 0x03
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	9e 81       	ldd	r25, Y+6	; 0x06
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	29 81       	ldd	r18, Y+1	; 0x01
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	9c 81       	ldd	r25, Y+4	; 0x04
    19b0:	fc 01       	movw	r30, r24
    19b2:	20 83       	st	Z, r18
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	9c 83       	std	Y+4, r25	; 0x04
    19bc:	8b 83       	std	Y+3, r24	; 0x03
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	9a 81       	ldd	r25, Y+2	; 0x02
    19c2:	89 2f       	mov	r24, r25
    19c4:	99 27       	eor	r25, r25
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	29 81       	ldd	r18, Y+1	; 0x01
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	fc 01       	movw	r30, r24
    19d2:	20 83       	st	Z, r18
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	9c 83       	std	Y+4, r25	; 0x04
    19dc:	8b 83       	std	Y+3, r24	; 0x03
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	fc 01       	movw	r30, r24
    19e4:	10 82       	st	Z, r1
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	9c 83       	std	Y+4, r25	; 0x04
    19ee:	8b 83       	std	Y+3, r24	; 0x03
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	9c 81       	ldd	r25, Y+4	; 0x04
    19f4:	20 e8       	ldi	r18, 0x80	; 128
    19f6:	fc 01       	movw	r30, r24
    19f8:	20 83       	st	Z, r18
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	9c 81       	ldd	r25, Y+4	; 0x04
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	9c 83       	std	Y+4, r25	; 0x04
    1a02:	8b 83       	std	Y+3, r24	; 0x03
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	9c 81       	ldd	r25, Y+4	; 0x04
    1a08:	fc 01       	movw	r30, r24
    1a0a:	10 82       	st	Z, r1
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	9c 83       	std	Y+4, r25	; 0x04
    1a14:	8b 83       	std	Y+3, r24	; 0x03
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	22 e0       	ldi	r18, 0x02	; 2
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	20 83       	st	Z, r18
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	9c 81       	ldd	r25, Y+4	; 0x04
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	9c 83       	std	Y+4, r25	; 0x04
    1a28:	8b 83       	std	Y+3, r24	; 0x03
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2e:	23 e0       	ldi	r18, 0x03	; 3
    1a30:	fc 01       	movw	r30, r24
    1a32:	20 83       	st	Z, r18
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	9c 83       	std	Y+4, r25	; 0x04
    1a3c:	8b 83       	std	Y+3, r24	; 0x03
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	9c 81       	ldd	r25, Y+4	; 0x04
    1a42:	24 e0       	ldi	r18, 0x04	; 4
    1a44:	fc 01       	movw	r30, r24
    1a46:	20 83       	st	Z, r18
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	9c 83       	std	Y+4, r25	; 0x04
    1a50:	8b 83       	std	Y+3, r24	; 0x03
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	25 e0       	ldi	r18, 0x05	; 5
    1a58:	fc 01       	movw	r30, r24
    1a5a:	20 83       	st	Z, r18
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	9c 83       	std	Y+4, r25	; 0x04
    1a64:	8b 83       	std	Y+3, r24	; 0x03
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	26 e0       	ldi	r18, 0x06	; 6
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	20 83       	st	Z, r18
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	9c 81       	ldd	r25, Y+4	; 0x04
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	9c 83       	std	Y+4, r25	; 0x04
    1a78:	8b 83       	std	Y+3, r24	; 0x03
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	27 e0       	ldi	r18, 0x07	; 7
    1a80:	fc 01       	movw	r30, r24
    1a82:	20 83       	st	Z, r18
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	9c 83       	std	Y+4, r25	; 0x04
    1a8c:	8b 83       	std	Y+3, r24	; 0x03
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	9c 81       	ldd	r25, Y+4	; 0x04
    1a92:	28 e0       	ldi	r18, 0x08	; 8
    1a94:	fc 01       	movw	r30, r24
    1a96:	20 83       	st	Z, r18
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	9c 83       	std	Y+4, r25	; 0x04
    1aa0:	8b 83       	std	Y+3, r24	; 0x03
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	29 e0       	ldi	r18, 0x09	; 9
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	20 83       	st	Z, r18
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	9c 83       	std	Y+4, r25	; 0x04
    1ab4:	8b 83       	std	Y+3, r24	; 0x03
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	20 e1       	ldi	r18, 0x10	; 16
    1abc:	fc 01       	movw	r30, r24
    1abe:	20 83       	st	Z, r18
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	9c 83       	std	Y+4, r25	; 0x04
    1ac8:	8b 83       	std	Y+3, r24	; 0x03
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	21 e1       	ldi	r18, 0x11	; 17
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	20 83       	st	Z, r18
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	9c 83       	std	Y+4, r25	; 0x04
    1adc:	8b 83       	std	Y+3, r24	; 0x03
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	22 e1       	ldi	r18, 0x12	; 18
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	20 83       	st	Z, r18
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	9c 83       	std	Y+4, r25	; 0x04
    1af0:	8b 83       	std	Y+3, r24	; 0x03
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	9c 81       	ldd	r25, Y+4	; 0x04
    1af6:	23 e1       	ldi	r18, 0x13	; 19
    1af8:	fc 01       	movw	r30, r24
    1afa:	20 83       	st	Z, r18
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	9c 83       	std	Y+4, r25	; 0x04
    1b04:	8b 83       	std	Y+3, r24	; 0x03
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	24 e1       	ldi	r18, 0x14	; 20
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	20 83       	st	Z, r18
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	9c 83       	std	Y+4, r25	; 0x04
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1e:	25 e1       	ldi	r18, 0x15	; 21
    1b20:	fc 01       	movw	r30, r24
    1b22:	20 83       	st	Z, r18
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	9c 83       	std	Y+4, r25	; 0x04
    1b2c:	8b 83       	std	Y+3, r24	; 0x03
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	26 e1       	ldi	r18, 0x16	; 22
    1b34:	fc 01       	movw	r30, r24
    1b36:	20 83       	st	Z, r18
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	8b 83       	std	Y+3, r24	; 0x03
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	27 e1       	ldi	r18, 0x17	; 23
    1b48:	fc 01       	movw	r30, r24
    1b4a:	20 83       	st	Z, r18
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	9c 83       	std	Y+4, r25	; 0x04
    1b54:	8b 83       	std	Y+3, r24	; 0x03
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5a:	28 e1       	ldi	r18, 0x18	; 24
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	20 83       	st	Z, r18
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	9c 83       	std	Y+4, r25	; 0x04
    1b68:	8b 83       	std	Y+3, r24	; 0x03
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6e:	29 e1       	ldi	r18, 0x19	; 25
    1b70:	fc 01       	movw	r30, r24
    1b72:	20 83       	st	Z, r18
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	9c 81       	ldd	r25, Y+4	; 0x04
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	9c 83       	std	Y+4, r25	; 0x04
    1b7c:	8b 83       	std	Y+3, r24	; 0x03
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	20 e2       	ldi	r18, 0x20	; 32
    1b84:	fc 01       	movw	r30, r24
    1b86:	20 83       	st	Z, r18
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	9c 83       	std	Y+4, r25	; 0x04
    1b90:	8b 83       	std	Y+3, r24	; 0x03
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	21 e2       	ldi	r18, 0x21	; 33
    1b98:	fc 01       	movw	r30, r24
    1b9a:	20 83       	st	Z, r18
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	9c 83       	std	Y+4, r25	; 0x04
    1ba4:	8b 83       	std	Y+3, r24	; 0x03
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    1baa:	22 e2       	ldi	r18, 0x22	; 34
    1bac:	fc 01       	movw	r30, r24
    1bae:	20 83       	st	Z, r18
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	9c 83       	std	Y+4, r25	; 0x04
    1bb8:	8b 83       	std	Y+3, r24	; 0x03
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	23 e2       	ldi	r18, 0x23	; 35
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	20 83       	st	Z, r18
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	9c 83       	std	Y+4, r25	; 0x04
    1bcc:	8b 83       	std	Y+3, r24	; 0x03
    1bce:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd0:	98 85       	ldd	r25, Y+8	; 0x08
    1bd2:	9a 83       	std	Y+2, r25	; 0x02
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	29 81       	ldd	r18, Y+1	; 0x01
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	9c 81       	ldd	r25, Y+4	; 0x04
    1bdc:	fc 01       	movw	r30, r24
    1bde:	20 83       	st	Z, r18
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	9c 81       	ldd	r25, Y+4	; 0x04
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	9c 83       	std	Y+4, r25	; 0x04
    1be8:	8b 83       	std	Y+3, r24	; 0x03
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	9a 81       	ldd	r25, Y+2	; 0x02
    1bee:	89 2f       	mov	r24, r25
    1bf0:	99 27       	eor	r25, r25
    1bf2:	9a 83       	std	Y+2, r25	; 0x02
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	29 81       	ldd	r18, Y+1	; 0x01
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	20 83       	st	Z, r18
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	9c 81       	ldd	r25, Y+4	; 0x04
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	9c 83       	std	Y+4, r25	; 0x04
    1c08:	8b 83       	std	Y+3, r24	; 0x03
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	26 e2       	ldi	r18, 0x26	; 38
    1c10:	fc 01       	movw	r30, r24
    1c12:	20 83       	st	Z, r18
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	9c 81       	ldd	r25, Y+4	; 0x04
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	9c 83       	std	Y+4, r25	; 0x04
    1c1c:	8b 83       	std	Y+3, r24	; 0x03
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	27 e2       	ldi	r18, 0x27	; 39
    1c24:	fc 01       	movw	r30, r24
    1c26:	20 83       	st	Z, r18
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	9c 83       	std	Y+4, r25	; 0x04
    1c30:	8b 83       	std	Y+3, r24	; 0x03
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	28 e2       	ldi	r18, 0x28	; 40
    1c38:	fc 01       	movw	r30, r24
    1c3a:	20 83       	st	Z, r18
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	9c 83       	std	Y+4, r25	; 0x04
    1c44:	8b 83       	std	Y+3, r24	; 0x03
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4a:	29 e2       	ldi	r18, 0x29	; 41
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	20 83       	st	Z, r18
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	9c 83       	std	Y+4, r25	; 0x04
    1c58:	8b 83       	std	Y+3, r24	; 0x03
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	20 e3       	ldi	r18, 0x30	; 48
    1c60:	fc 01       	movw	r30, r24
    1c62:	20 83       	st	Z, r18
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	9c 81       	ldd	r25, Y+4	; 0x04
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	9c 83       	std	Y+4, r25	; 0x04
    1c6c:	8b 83       	std	Y+3, r24	; 0x03
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	21 e3       	ldi	r18, 0x31	; 49
    1c74:	fc 01       	movw	r30, r24
    1c76:	20 83       	st	Z, r18
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	28 96       	adiw	r28, 0x08	; 8
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	08 95       	ret

00001c98 <xPortStartScheduler>:
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <prvSetupTimerInterrupt>
    1ca4:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
    1ca8:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    1cac:	cd 91       	ld	r28, X+
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	dd 91       	ld	r29, X+
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	ff 91       	pop	r31
    1cb6:	ef 91       	pop	r30
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	bf 91       	pop	r27
    1cbe:	af 91       	pop	r26
    1cc0:	9f 91       	pop	r25
    1cc2:	8f 91       	pop	r24
    1cc4:	7f 91       	pop	r23
    1cc6:	6f 91       	pop	r22
    1cc8:	5f 91       	pop	r21
    1cca:	4f 91       	pop	r20
    1ccc:	3f 91       	pop	r19
    1cce:	2f 91       	pop	r18
    1cd0:	1f 91       	pop	r17
    1cd2:	0f 91       	pop	r16
    1cd4:	ff 90       	pop	r15
    1cd6:	ef 90       	pop	r14
    1cd8:	df 90       	pop	r13
    1cda:	cf 90       	pop	r12
    1cdc:	bf 90       	pop	r11
    1cde:	af 90       	pop	r10
    1ce0:	9f 90       	pop	r9
    1ce2:	8f 90       	pop	r8
    1ce4:	7f 90       	pop	r7
    1ce6:	6f 90       	pop	r6
    1ce8:	5f 90       	pop	r5
    1cea:	4f 90       	pop	r4
    1cec:	3f 90       	pop	r3
    1cee:	2f 90       	pop	r2
    1cf0:	1f 90       	pop	r1
    1cf2:	0f 90       	pop	r0
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	0f 90       	pop	r0
    1cf8:	08 95       	ret
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	08 95       	ret

00001d02 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1d02:	0f 92       	push	r0
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	0f 92       	push	r0
    1d0a:	1f 92       	push	r1
    1d0c:	11 24       	eor	r1, r1
    1d0e:	2f 92       	push	r2
    1d10:	3f 92       	push	r3
    1d12:	4f 92       	push	r4
    1d14:	5f 92       	push	r5
    1d16:	6f 92       	push	r6
    1d18:	7f 92       	push	r7
    1d1a:	8f 92       	push	r8
    1d1c:	9f 92       	push	r9
    1d1e:	af 92       	push	r10
    1d20:	bf 92       	push	r11
    1d22:	cf 92       	push	r12
    1d24:	df 92       	push	r13
    1d26:	ef 92       	push	r14
    1d28:	ff 92       	push	r15
    1d2a:	0f 93       	push	r16
    1d2c:	1f 93       	push	r17
    1d2e:	2f 93       	push	r18
    1d30:	3f 93       	push	r19
    1d32:	4f 93       	push	r20
    1d34:	5f 93       	push	r21
    1d36:	6f 93       	push	r22
    1d38:	7f 93       	push	r23
    1d3a:	8f 93       	push	r24
    1d3c:	9f 93       	push	r25
    1d3e:	af 93       	push	r26
    1d40:	bf 93       	push	r27
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	ef 93       	push	r30
    1d48:	ff 93       	push	r31
    1d4a:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
    1d4e:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    1d52:	0d b6       	in	r0, 0x3d	; 61
    1d54:	0d 92       	st	X+, r0
    1d56:	0e b6       	in	r0, 0x3e	; 62
    1d58:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1d5a:	0e 94 35 1a 	call	0x346a	; 0x346a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1d5e:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
    1d62:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    1d66:	cd 91       	ld	r28, X+
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	dd 91       	ld	r29, X+
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	ff 91       	pop	r31
    1d70:	ef 91       	pop	r30
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	bf 91       	pop	r27
    1d78:	af 91       	pop	r26
    1d7a:	9f 91       	pop	r25
    1d7c:	8f 91       	pop	r24
    1d7e:	7f 91       	pop	r23
    1d80:	6f 91       	pop	r22
    1d82:	5f 91       	pop	r21
    1d84:	4f 91       	pop	r20
    1d86:	3f 91       	pop	r19
    1d88:	2f 91       	pop	r18
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	df 90       	pop	r13
    1d94:	cf 90       	pop	r12
    1d96:	bf 90       	pop	r11
    1d98:	af 90       	pop	r10
    1d9a:	9f 90       	pop	r9
    1d9c:	8f 90       	pop	r8
    1d9e:	7f 90       	pop	r7
    1da0:	6f 90       	pop	r6
    1da2:	5f 90       	pop	r5
    1da4:	4f 90       	pop	r4
    1da6:	3f 90       	pop	r3
    1da8:	2f 90       	pop	r2
    1daa:	1f 90       	pop	r1
    1dac:	0f 90       	pop	r0
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1db2:	08 95       	ret
	...

00001db6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1db6:	0f 92       	push	r0
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	0f 92       	push	r0
    1dbe:	1f 92       	push	r1
    1dc0:	11 24       	eor	r1, r1
    1dc2:	2f 92       	push	r2
    1dc4:	3f 92       	push	r3
    1dc6:	4f 92       	push	r4
    1dc8:	5f 92       	push	r5
    1dca:	6f 92       	push	r6
    1dcc:	7f 92       	push	r7
    1dce:	8f 92       	push	r8
    1dd0:	9f 92       	push	r9
    1dd2:	af 92       	push	r10
    1dd4:	bf 92       	push	r11
    1dd6:	cf 92       	push	r12
    1dd8:	df 92       	push	r13
    1dda:	ef 92       	push	r14
    1ddc:	ff 92       	push	r15
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17
    1de2:	2f 93       	push	r18
    1de4:	3f 93       	push	r19
    1de6:	4f 93       	push	r20
    1de8:	5f 93       	push	r21
    1dea:	6f 93       	push	r22
    1dec:	7f 93       	push	r23
    1dee:	8f 93       	push	r24
    1df0:	9f 93       	push	r25
    1df2:	af 93       	push	r26
    1df4:	bf 93       	push	r27
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	ef 93       	push	r30
    1dfc:	ff 93       	push	r31
    1dfe:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
    1e02:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    1e06:	0d b6       	in	r0, 0x3d	; 61
    1e08:	0d 92       	st	X+, r0
    1e0a:	0e b6       	in	r0, 0x3e	; 62
    1e0c:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1e0e:	0e 94 48 19 	call	0x3290	; 0x3290 <xTaskIncrementTick>
    1e12:	88 23       	and	r24, r24
    1e14:	11 f0       	breq	.+4      	; 0x1e1a <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    1e16:	0e 94 35 1a 	call	0x346a	; 0x346a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1e1a:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
    1e1e:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    1e22:	cd 91       	ld	r28, X+
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	dd 91       	ld	r29, X+
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	ff 91       	pop	r31
    1e2c:	ef 91       	pop	r30
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	bf 91       	pop	r27
    1e34:	af 91       	pop	r26
    1e36:	9f 91       	pop	r25
    1e38:	8f 91       	pop	r24
    1e3a:	7f 91       	pop	r23
    1e3c:	6f 91       	pop	r22
    1e3e:	5f 91       	pop	r21
    1e40:	4f 91       	pop	r20
    1e42:	3f 91       	pop	r19
    1e44:	2f 91       	pop	r18
    1e46:	1f 91       	pop	r17
    1e48:	0f 91       	pop	r16
    1e4a:	ff 90       	pop	r15
    1e4c:	ef 90       	pop	r14
    1e4e:	df 90       	pop	r13
    1e50:	cf 90       	pop	r12
    1e52:	bf 90       	pop	r11
    1e54:	af 90       	pop	r10
    1e56:	9f 90       	pop	r9
    1e58:	8f 90       	pop	r8
    1e5a:	7f 90       	pop	r7
    1e5c:	6f 90       	pop	r6
    1e5e:	5f 90       	pop	r5
    1e60:	4f 90       	pop	r4
    1e62:	3f 90       	pop	r3
    1e64:	2f 90       	pop	r2
    1e66:	1f 90       	pop	r1
    1e68:	0f 90       	pop	r0
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1e6e:	08 95       	ret
	...

00001e72 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <prvSetupTimerInterrupt+0x6>
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <prvSetupTimerInterrupt+0x8>
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <prvSetupTimerInterrupt+0xa>
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1e80:	89 e9       	ldi	r24, 0x99	; 153
    1e82:	99 e3       	ldi	r25, 0x39	; 57
    1e84:	a0 e0       	ldi	r26, 0x00	; 0
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	ab 83       	std	Y+3, r26	; 0x03
    1e8e:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	ab 81       	ldd	r26, Y+3	; 0x03
    1e96:	bc 81       	ldd	r27, Y+4	; 0x04
    1e98:	68 94       	set
    1e9a:	15 f8       	bld	r1, 5
    1e9c:	b6 95       	lsr	r27
    1e9e:	a7 95       	ror	r26
    1ea0:	97 95       	ror	r25
    1ea2:	87 95       	ror	r24
    1ea4:	16 94       	lsr	r1
    1ea6:	d1 f7       	brne	.-12     	; 0x1e9c <prvSetupTimerInterrupt+0x2a>
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	9a 83       	std	Y+2, r25	; 0x02
    1eac:	ab 83       	std	Y+3, r26	; 0x03
    1eae:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	ab 81       	ldd	r26, Y+3	; 0x03
    1eb6:	bc 81       	ldd	r27, Y+4	; 0x04
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	a1 09       	sbc	r26, r1
    1ebc:	b1 09       	sbc	r27, r1
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	ab 83       	std	Y+3, r26	; 0x03
    1ec4:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ece:	ab 81       	ldd	r26, Y+3	; 0x03
    1ed0:	bc 81       	ldd	r27, Y+4	; 0x04
    1ed2:	89 2f       	mov	r24, r25
    1ed4:	9a 2f       	mov	r25, r26
    1ed6:	ab 2f       	mov	r26, r27
    1ed8:	bb 27       	eor	r27, r27
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	9a 83       	std	Y+2, r25	; 0x02
    1ede:	ab 83       	std	Y+3, r26	; 0x03
    1ee0:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    1ee6:	89 e8       	ldi	r24, 0x89	; 137
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	2e 81       	ldd	r18, Y+6	; 0x06
    1eec:	fc 01       	movw	r30, r24
    1eee:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    1ef0:	88 e8       	ldi	r24, 0x88	; 136
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1efa:	8b e0       	ldi	r24, 0x0B	; 11
    1efc:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    1efe:	81 e8       	ldi	r24, 0x81	; 129
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	2d 81       	ldd	r18, Y+5	; 0x05
    1f04:	fc 01       	movw	r30, r24
    1f06:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    1f08:	8f e6       	ldi	r24, 0x6F	; 111
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	80 81       	ld	r24, Z
    1f10:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1f12:	8d 81       	ldd	r24, Y+5	; 0x05
    1f14:	82 60       	ori	r24, 0x02	; 2
    1f16:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    1f18:	8f e6       	ldi	r24, 0x6F	; 111
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1f1e:	fc 01       	movw	r30, r24
    1f20:	20 83       	st	Z, r18
}
    1f22:	00 00       	nop
    1f24:	26 96       	adiw	r28, 0x06	; 6
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	08 95       	ret

00001f36 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    1f36:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1f3a:	18 95       	reti
	...

00001f3e <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <pvPortMalloc+0x6>
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <pvPortMalloc+0x8>
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	9c 83       	std	Y+4, r25	; 0x04
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    1f4e:	1a 82       	std	Y+2, r1	; 0x02
    1f50:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    1f52:	0e 94 a4 18 	call	0x3148	; 0x3148 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1f56:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <pucAlignedHeap.2084>
    1f5a:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <pucAlignedHeap.2084+0x1>
    1f5e:	89 2b       	or	r24, r25
    1f60:	31 f4       	brne	.+12     	; 0x1f6e <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1f62:	80 e6       	ldi	r24, 0x60	; 96
    1f64:	93 e0       	ldi	r25, 0x03	; 3
    1f66:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <pucAlignedHeap.2084+0x1>
    1f6a:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <pucAlignedHeap.2084>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1f6e:	20 91 47 07 	lds	r18, 0x0747	; 0x800747 <xNextFreeByte>
    1f72:	30 91 48 07 	lds	r19, 0x0748	; 0x800748 <xNextFreeByte+0x1>
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7a:	82 0f       	add	r24, r18
    1f7c:	93 1f       	adc	r25, r19
    1f7e:	87 3e       	cpi	r24, 0xE7	; 231
    1f80:	93 40       	sbci	r25, 0x03	; 3
    1f82:	38 f5       	brcc	.+78     	; 0x1fd2 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    1f84:	20 91 47 07 	lds	r18, 0x0747	; 0x800747 <xNextFreeByte>
    1f88:	30 91 48 07 	lds	r19, 0x0748	; 0x800748 <xNextFreeByte+0x1>
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f90:	28 0f       	add	r18, r24
    1f92:	39 1f       	adc	r19, r25
    1f94:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <xNextFreeByte>
    1f98:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1f9c:	82 17       	cp	r24, r18
    1f9e:	93 07       	cpc	r25, r19
    1fa0:	c0 f4       	brcc	.+48     	; 0x1fd2 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1fa2:	20 91 49 07 	lds	r18, 0x0749	; 0x800749 <pucAlignedHeap.2084>
    1fa6:	30 91 4a 07 	lds	r19, 0x074A	; 0x80074a <pucAlignedHeap.2084+0x1>
    1faa:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <xNextFreeByte>
    1fae:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <xNextFreeByte+0x1>
    1fb2:	82 0f       	add	r24, r18
    1fb4:	93 1f       	adc	r25, r19
    1fb6:	9a 83       	std	Y+2, r25	; 0x02
    1fb8:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    1fba:	20 91 47 07 	lds	r18, 0x0747	; 0x800747 <xNextFreeByte>
    1fbe:	30 91 48 07 	lds	r19, 0x0748	; 0x800748 <xNextFreeByte+0x1>
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc6:	82 0f       	add	r24, r18
    1fc8:	93 1f       	adc	r25, r19
    1fca:	90 93 48 07 	sts	0x0748, r25	; 0x800748 <xNextFreeByte+0x1>
    1fce:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1fd2:	0e 94 b1 18 	call	0x3162	; 0x3162 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	08 95       	ret

00001fe8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <vPortFree+0x6>
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	9a 83       	std	Y+2, r25	; 0x02
    1ff4:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1ff6:	00 00       	nop
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	df 91       	pop	r29
    1ffe:	cf 91       	pop	r28
    2000:	08 95       	ret

00002002 <_serial_tx_int_on>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	00 d0       	rcall	.+0      	; 0x2008 <_serial_tx_int_on+0x6>
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	9a 83       	std	Y+2, r25	; 0x02
    200e:	89 83       	std	Y+1, r24	; 0x01
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	9a 81       	ldd	r25, Y+2	; 0x02
    2014:	05 97       	sbiw	r24, 0x05	; 5
    2016:	29 81       	ldd	r18, Y+1	; 0x01
    2018:	3a 81       	ldd	r19, Y+2	; 0x02
    201a:	25 50       	subi	r18, 0x05	; 5
    201c:	31 09       	sbc	r19, r1
    201e:	f9 01       	movw	r30, r18
    2020:	20 81       	ld	r18, Z
    2022:	20 62       	ori	r18, 0x20	; 32
    2024:	fc 01       	movw	r30, r24
    2026:	20 83       	st	Z, r18
    2028:	00 00       	nop
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	08 95       	ret

00002034 <serial_new_instance>:
    2034:	8f 92       	push	r8
    2036:	9f 92       	push	r9
    2038:	af 92       	push	r10
    203a:	bf 92       	push	r11
    203c:	cf 92       	push	r12
    203e:	df 92       	push	r13
    2040:	ef 92       	push	r14
    2042:	0f 93       	push	r16
    2044:	1f 93       	push	r17
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	61 97       	sbiw	r28, 0x11	; 17
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	8c 83       	std	Y+4, r24	; 0x04
    205c:	4d 83       	std	Y+5, r20	; 0x05
    205e:	5e 83       	std	Y+6, r21	; 0x06
    2060:	6f 83       	std	Y+7, r22	; 0x07
    2062:	78 87       	std	Y+8, r23	; 0x08
    2064:	29 87       	std	Y+9, r18	; 0x09
    2066:	0a 87       	std	Y+10, r16	; 0x0a
    2068:	eb 86       	std	Y+11, r14	; 0x0b
    206a:	dd 86       	std	Y+13, r13	; 0x0d
    206c:	cc 86       	std	Y+12, r12	; 0x0c
    206e:	bf 86       	std	Y+15, r11	; 0x0f
    2070:	ae 86       	std	Y+14, r10	; 0x0e
    2072:	99 8a       	std	Y+17, r9	; 0x11
    2074:	88 8a       	std	Y+16, r8	; 0x10
    2076:	88 e0       	ldi	r24, 0x08	; 8
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	0e 94 4e 21 	call	0x429c	; 0x429c <malloc>
    207e:	9a 83       	std	Y+2, r25	; 0x02
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	8c 81       	ldd	r24, Y+4	; 0x04
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	85 5b       	subi	r24, 0xB5	; 181
    208e:	98 4f       	sbci	r25, 0xF8	; 248
    2090:	29 81       	ldd	r18, Y+1	; 0x01
    2092:	3a 81       	ldd	r19, Y+2	; 0x02
    2094:	fc 01       	movw	r30, r24
    2096:	31 83       	std	Z+1, r19	; 0x01
    2098:	20 83       	st	Z, r18
    209a:	8c 81       	ldd	r24, Y+4	; 0x04
    209c:	88 2f       	mov	r24, r24
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	8a 5f       	subi	r24, 0xFA	; 250
    20a6:	9e 4f       	sbci	r25, 0xFE	; 254
    20a8:	fc 01       	movw	r30, r24
    20aa:	20 81       	ld	r18, Z
    20ac:	31 81       	ldd	r19, Z+1	; 0x01
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	9a 81       	ldd	r25, Y+2	; 0x02
    20b2:	fc 01       	movw	r30, r24
    20b4:	31 83       	std	Z+1, r19	; 0x01
    20b6:	20 83       	st	Z, r18
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	9a 81       	ldd	r25, Y+2	; 0x02
    20bc:	2e 85       	ldd	r18, Y+14	; 0x0e
    20be:	3f 85       	ldd	r19, Y+15	; 0x0f
    20c0:	fc 01       	movw	r30, r24
    20c2:	33 83       	std	Z+3, r19	; 0x03
    20c4:	22 83       	std	Z+2, r18	; 0x02
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    20cc:	3d 85       	ldd	r19, Y+13	; 0x0d
    20ce:	fc 01       	movw	r30, r24
    20d0:	35 83       	std	Z+5, r19	; 0x05
    20d2:	24 83       	std	Z+4, r18	; 0x04
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	28 89       	ldd	r18, Y+16	; 0x10
    20da:	39 89       	ldd	r19, Y+17	; 0x11
    20dc:	fc 01       	movw	r30, r24
    20de:	37 83       	std	Z+7, r19	; 0x07
    20e0:	26 83       	std	Z+6, r18	; 0x06
    20e2:	8f e5       	ldi	r24, 0x5F	; 95
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	fc 01       	movw	r30, r24
    20e8:	80 81       	ld	r24, Z
    20ea:	8b 83       	std	Y+3, r24	; 0x03
    20ec:	f8 94       	cli
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9a 81       	ldd	r25, Y+2	; 0x02
    20f2:	fc 01       	movw	r30, r24
    20f4:	80 81       	ld	r24, Z
    20f6:	91 81       	ldd	r25, Z+1	; 0x01
    20f8:	06 97       	sbiw	r24, 0x06	; 6
    20fa:	29 81       	ldd	r18, Y+1	; 0x01
    20fc:	3a 81       	ldd	r19, Y+2	; 0x02
    20fe:	f9 01       	movw	r30, r18
    2100:	20 81       	ld	r18, Z
    2102:	31 81       	ldd	r19, Z+1	; 0x01
    2104:	26 50       	subi	r18, 0x06	; 6
    2106:	31 09       	sbc	r19, r1
    2108:	f9 01       	movw	r30, r18
    210a:	20 81       	ld	r18, Z
    210c:	22 60       	ori	r18, 0x02	; 2
    210e:	fc 01       	movw	r30, r24
    2110:	20 83       	st	Z, r18
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	9a 81       	ldd	r25, Y+2	; 0x02
    2116:	fc 01       	movw	r30, r24
    2118:	80 81       	ld	r24, Z
    211a:	91 81       	ldd	r25, Z+1	; 0x01
    211c:	8c 01       	movw	r16, r24
    211e:	02 50       	subi	r16, 0x02	; 2
    2120:	11 09       	sbc	r17, r1
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	af 81       	ldd	r26, Y+7	; 0x07
    2128:	b8 85       	ldd	r27, Y+8	; 0x08
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	aa 1f       	adc	r26, r26
    2130:	bb 1f       	adc	r27, r27
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	aa 1f       	adc	r26, r26
    2138:	bb 1f       	adc	r27, r27
    213a:	88 0f       	add	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	aa 1f       	adc	r26, r26
    2140:	bb 1f       	adc	r27, r27
    2142:	9c 01       	movw	r18, r24
    2144:	ad 01       	movw	r20, r26
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	a1 ee       	ldi	r26, 0xE1	; 225
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	bc 01       	movw	r22, r24
    2150:	cd 01       	movw	r24, r26
    2152:	0e 94 2c 21 	call	0x4258	; 0x4258 <__udivmodsi4>
    2156:	da 01       	movw	r26, r20
    2158:	c9 01       	movw	r24, r18
    215a:	81 50       	subi	r24, 0x01	; 1
    215c:	f8 01       	movw	r30, r16
    215e:	80 83       	st	Z, r24
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	9a 81       	ldd	r25, Y+2	; 0x02
    2164:	fc 01       	movw	r30, r24
    2166:	80 81       	ld	r24, Z
    2168:	91 81       	ldd	r25, Z+1	; 0x01
    216a:	05 97       	sbiw	r24, 0x05	; 5
    216c:	28 e9       	ldi	r18, 0x98	; 152
    216e:	fc 01       	movw	r30, r24
    2170:	20 83       	st	Z, r18
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	fc 01       	movw	r30, r24
    2178:	80 81       	ld	r24, Z
    217a:	91 81       	ldd	r25, Z+1	; 0x01
    217c:	04 97       	sbiw	r24, 0x04	; 4
    217e:	26 e0       	ldi	r18, 0x06	; 6
    2180:	fc 01       	movw	r30, r24
    2182:	20 83       	st	Z, r18
    2184:	8f e5       	ldi	r24, 0x5F	; 95
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	2b 81       	ldd	r18, Y+3	; 0x03
    218a:	fc 01       	movw	r30, r24
    218c:	20 83       	st	Z, r18
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	61 96       	adiw	r28, 0x11	; 17
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	ef 90       	pop	r14
    21a8:	df 90       	pop	r13
    21aa:	cf 90       	pop	r12
    21ac:	bf 90       	pop	r11
    21ae:	af 90       	pop	r10
    21b0:	9f 90       	pop	r9
    21b2:	8f 90       	pop	r8
    21b4:	08 95       	ret

000021b6 <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <serial_send_bytes+0x6>
    21bc:	00 d0       	rcall	.+0      	; 0x21be <serial_send_bytes+0x8>
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <serial_send_bytes+0xa>
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	9b 83       	std	Y+3, r25	; 0x03
    21c6:	8a 83       	std	Y+2, r24	; 0x02
    21c8:	7d 83       	std	Y+5, r23	; 0x05
    21ca:	6c 83       	std	Y+4, r22	; 0x04
    21cc:	4e 83       	std	Y+6, r20	; 0x06
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	9b 81       	ldd	r25, Y+3	; 0x03
    21d2:	fc 01       	movw	r30, r24
    21d4:	82 81       	ldd	r24, Z+2	; 0x02
    21d6:	93 81       	ldd	r25, Z+3	; 0x03
    21d8:	89 2b       	or	r24, r25
    21da:	a9 f0       	breq	.+42     	; 0x2206 <serial_send_bytes+0x50>
    21dc:	8e 81       	ldd	r24, Y+6	; 0x06
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	9b 81       	ldd	r25, Y+3	; 0x03
    21e6:	fc 01       	movw	r30, r24
    21e8:	82 81       	ldd	r24, Z+2	; 0x02
    21ea:	93 81       	ldd	r25, Z+3	; 0x03
    21ec:	fc 01       	movw	r30, r24
    21ee:	82 a1       	ldd	r24, Z+34	; 0x22
    21f0:	88 2f       	mov	r24, r24
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	40 e2       	ldi	r20, 0x20	; 32
    21f6:	50 e0       	ldi	r21, 0x00	; 0
    21f8:	ba 01       	movw	r22, r20
    21fa:	68 1b       	sub	r22, r24
    21fc:	79 0b       	sbc	r23, r25
    21fe:	cb 01       	movw	r24, r22
    2200:	82 17       	cp	r24, r18
    2202:	93 07       	cpc	r25, r19
    2204:	54 f0       	brlt	.+20     	; 0x221a <serial_send_bytes+0x64>
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	9b 81       	ldd	r25, Y+3	; 0x03
    220a:	fc 01       	movw	r30, r24
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	93 81       	ldd	r25, Z+3	; 0x03
    2210:	89 2b       	or	r24, r25
    2212:	29 f4       	brne	.+10     	; 0x221e <serial_send_bytes+0x68>
    2214:	8e 81       	ldd	r24, Y+6	; 0x06
    2216:	82 30       	cpi	r24, 0x02	; 2
    2218:	10 f0       	brcs	.+4      	; 0x221e <serial_send_bytes+0x68>
		return BUFFER_FULL;
    221a:	82 e0       	ldi	r24, 0x02	; 2
    221c:	22 c0       	rjmp	.+68     	; 0x2262 <serial_send_bytes+0xac>
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    221e:	19 82       	std	Y+1, r1	; 0x01
    2220:	14 c0       	rjmp	.+40     	; 0x224a <serial_send_bytes+0x94>
		buffer_put_item(handle->_tx_buf, buf[i]);
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	88 2f       	mov	r24, r24
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	2c 81       	ldd	r18, Y+4	; 0x04
    222a:	3d 81       	ldd	r19, Y+5	; 0x05
    222c:	82 0f       	add	r24, r18
    222e:	93 1f       	adc	r25, r19
    2230:	fc 01       	movw	r30, r24
    2232:	20 81       	ld	r18, Z
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	9b 81       	ldd	r25, Y+3	; 0x03
    2238:	fc 01       	movw	r30, r24
    223a:	82 81       	ldd	r24, Z+2	; 0x02
    223c:	93 81       	ldd	r25, Z+3	; 0x03
    223e:	62 2f       	mov	r22, r18
    2240:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	8f 5f       	subi	r24, 0xFF	; 255
    2248:	89 83       	std	Y+1, r24	; 0x01
    224a:	99 81       	ldd	r25, Y+1	; 0x01
    224c:	8e 81       	ldd	r24, Y+6	; 0x06
    224e:	98 17       	cp	r25, r24
    2250:	40 f3       	brcs	.-48     	; 0x2222 <serial_send_bytes+0x6c>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	9b 81       	ldd	r25, Y+3	; 0x03
    2256:	fc 01       	movw	r30, r24
    2258:	80 81       	ld	r24, Z
    225a:	91 81       	ldd	r25, Z+1	; 0x01
    225c:	0e 94 01 10 	call	0x2002	; 0x2002 <_serial_tx_int_on>
	return BUFFER_OK;
    2260:	80 e0       	ldi	r24, 0x00	; 0
}
    2262:	26 96       	adiw	r28, 0x06	; 6
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	cd bf       	out	0x3d, r28	; 61
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	08 95       	ret

00002274 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    2274:	1f 92       	push	r1
    2276:	0f 92       	push	r0
    2278:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    227c:	0f 92       	push	r0
    227e:	11 24       	eor	r1, r1
    2280:	2f 93       	push	r18
    2282:	3f 93       	push	r19
    2284:	4f 93       	push	r20
    2286:	5f 93       	push	r21
    2288:	6f 93       	push	r22
    228a:	7f 93       	push	r23
    228c:	8f 93       	push	r24
    228e:	9f 93       	push	r25
    2290:	af 93       	push	r26
    2292:	bf 93       	push	r27
    2294:	ef 93       	push	r30
    2296:	ff 93       	push	r31
    2298:	cf 93       	push	r28
    229a:	df 93       	push	r29
    229c:	1f 92       	push	r1
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    22a2:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    22a6:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    22aa:	89 2b       	or	r24, r25
    22ac:	31 f1       	breq	.+76     	; 0x22fa <__vector_20+0x86>
		item = UDR0;
    22ae:	86 ec       	ldi	r24, 0xC6	; 198
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	fc 01       	movw	r30, r24
    22b4:	80 81       	ld	r24, Z
    22b6:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    22b8:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    22bc:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    22c0:	fc 01       	movw	r30, r24
    22c2:	84 81       	ldd	r24, Z+4	; 0x04
    22c4:	95 81       	ldd	r25, Z+5	; 0x05
    22c6:	69 81       	ldd	r22, Y+1	; 0x01
    22c8:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    22cc:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    22d0:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    22d4:	fc 01       	movw	r30, r24
    22d6:	86 81       	ldd	r24, Z+6	; 0x06
    22d8:	97 81       	ldd	r25, Z+7	; 0x07
    22da:	89 2b       	or	r24, r25
    22dc:	71 f0       	breq	.+28     	; 0x22fa <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    22de:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    22e2:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    22e6:	fc 01       	movw	r30, r24
    22e8:	26 81       	ldd	r18, Z+6	; 0x06
    22ea:	37 81       	ldd	r19, Z+7	; 0x07
    22ec:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    22f0:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    22f4:	69 81       	ldd	r22, Y+1	; 0x01
    22f6:	f9 01       	movw	r30, r18
    22f8:	09 95       	icall
		}
	}
}
    22fa:	00 00       	nop
    22fc:	0f 90       	pop	r0
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	ff 91       	pop	r31
    2304:	ef 91       	pop	r30
    2306:	bf 91       	pop	r27
    2308:	af 91       	pop	r26
    230a:	9f 91       	pop	r25
    230c:	8f 91       	pop	r24
    230e:	7f 91       	pop	r23
    2310:	6f 91       	pop	r22
    2312:	5f 91       	pop	r21
    2314:	4f 91       	pop	r20
    2316:	3f 91       	pop	r19
    2318:	2f 91       	pop	r18
    231a:	0f 90       	pop	r0
    231c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2320:	0f 90       	pop	r0
    2322:	1f 90       	pop	r1
    2324:	18 95       	reti

00002326 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    2326:	1f 92       	push	r1
    2328:	0f 92       	push	r0
    232a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    232e:	0f 92       	push	r0
    2330:	11 24       	eor	r1, r1
    2332:	2f 93       	push	r18
    2334:	3f 93       	push	r19
    2336:	4f 93       	push	r20
    2338:	5f 93       	push	r21
    233a:	6f 93       	push	r22
    233c:	7f 93       	push	r23
    233e:	8f 93       	push	r24
    2340:	9f 93       	push	r25
    2342:	af 93       	push	r26
    2344:	bf 93       	push	r27
    2346:	ef 93       	push	r30
    2348:	ff 93       	push	r31
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	1f 92       	push	r1
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    2354:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    2358:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    235c:	89 2b       	or	r24, r25
    235e:	f9 f0       	breq	.+62     	; 0x239e <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    2360:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ser_handle>
    2364:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ser_handle+0x1>
    2368:	fc 01       	movw	r30, r24
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	93 81       	ldd	r25, Z+3	; 0x03
    236e:	9e 01       	movw	r18, r28
    2370:	2f 5f       	subi	r18, 0xFF	; 255
    2372:	3f 4f       	sbci	r19, 0xFF	; 255
    2374:	b9 01       	movw	r22, r18
    2376:	0e 94 b2 0a 	call	0x1564	; 0x1564 <buffer_get_item>
    237a:	88 23       	and	r24, r24
    237c:	31 f4       	brne	.+12     	; 0x238a <__vector_21+0x64>
			UDR0 = item;
    237e:	86 ec       	ldi	r24, 0xC6	; 198
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	29 81       	ldd	r18, Y+1	; 0x01
    2384:	fc 01       	movw	r30, r24
    2386:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    2388:	13 c0       	rjmp	.+38     	; 0x23b0 <__vector_21+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
			UDR0 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    238a:	81 ec       	ldi	r24, 0xC1	; 193
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	21 ec       	ldi	r18, 0xC1	; 193
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	f9 01       	movw	r30, r18
    2394:	20 81       	ld	r18, Z
    2396:	2f 7d       	andi	r18, 0xDF	; 223
    2398:	fc 01       	movw	r30, r24
    239a:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    239c:	09 c0       	rjmp	.+18     	; 0x23b0 <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    239e:	81 ec       	ldi	r24, 0xC1	; 193
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	21 ec       	ldi	r18, 0xC1	; 193
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	f9 01       	movw	r30, r18
    23a8:	20 81       	ld	r18, Z
    23aa:	2f 7d       	andi	r18, 0xDF	; 223
    23ac:	fc 01       	movw	r30, r24
    23ae:	20 83       	st	Z, r18
	}
}
    23b0:	00 00       	nop
    23b2:	0f 90       	pop	r0
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	ff 91       	pop	r31
    23ba:	ef 91       	pop	r30
    23bc:	bf 91       	pop	r27
    23be:	af 91       	pop	r26
    23c0:	9f 91       	pop	r25
    23c2:	8f 91       	pop	r24
    23c4:	7f 91       	pop	r23
    23c6:	6f 91       	pop	r22
    23c8:	5f 91       	pop	r21
    23ca:	4f 91       	pop	r20
    23cc:	3f 91       	pop	r19
    23ce:	2f 91       	pop	r18
    23d0:	0f 90       	pop	r0
    23d2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    23d6:	0f 90       	pop	r0
    23d8:	1f 90       	pop	r1
    23da:	18 95       	reti

000023dc <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    23dc:	1f 92       	push	r1
    23de:	0f 92       	push	r0
    23e0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    23e4:	0f 92       	push	r0
    23e6:	11 24       	eor	r1, r1
    23e8:	2f 93       	push	r18
    23ea:	3f 93       	push	r19
    23ec:	4f 93       	push	r20
    23ee:	5f 93       	push	r21
    23f0:	6f 93       	push	r22
    23f2:	7f 93       	push	r23
    23f4:	8f 93       	push	r24
    23f6:	9f 93       	push	r25
    23f8:	af 93       	push	r26
    23fa:	bf 93       	push	r27
    23fc:	ef 93       	push	r30
    23fe:	ff 93       	push	r31
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	1f 92       	push	r1
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    240a:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    240e:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    2412:	89 2b       	or	r24, r25
    2414:	31 f1       	breq	.+76     	; 0x2462 <__vector_28+0x86>
		item = UDR1;
    2416:	8e ec       	ldi	r24, 0xCE	; 206
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	fc 01       	movw	r30, r24
    241c:	80 81       	ld	r24, Z
    241e:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    2420:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    2424:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    2428:	fc 01       	movw	r30, r24
    242a:	84 81       	ldd	r24, Z+4	; 0x04
    242c:	95 81       	ldd	r25, Z+5	; 0x05
    242e:	69 81       	ldd	r22, Y+1	; 0x01
    2430:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    2434:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    2438:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    243c:	fc 01       	movw	r30, r24
    243e:	86 81       	ldd	r24, Z+6	; 0x06
    2440:	97 81       	ldd	r25, Z+7	; 0x07
    2442:	89 2b       	or	r24, r25
    2444:	71 f0       	breq	.+28     	; 0x2462 <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    2446:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    244a:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    244e:	fc 01       	movw	r30, r24
    2450:	26 81       	ldd	r18, Z+6	; 0x06
    2452:	37 81       	ldd	r19, Z+7	; 0x07
    2454:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    2458:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    245c:	69 81       	ldd	r22, Y+1	; 0x01
    245e:	f9 01       	movw	r30, r18
    2460:	09 95       	icall
		}
	}
}
    2462:	00 00       	nop
    2464:	0f 90       	pop	r0
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	ff 91       	pop	r31
    246c:	ef 91       	pop	r30
    246e:	bf 91       	pop	r27
    2470:	af 91       	pop	r26
    2472:	9f 91       	pop	r25
    2474:	8f 91       	pop	r24
    2476:	7f 91       	pop	r23
    2478:	6f 91       	pop	r22
    247a:	5f 91       	pop	r21
    247c:	4f 91       	pop	r20
    247e:	3f 91       	pop	r19
    2480:	2f 91       	pop	r18
    2482:	0f 90       	pop	r0
    2484:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2488:	0f 90       	pop	r0
    248a:	1f 90       	pop	r1
    248c:	18 95       	reti

0000248e <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    248e:	1f 92       	push	r1
    2490:	0f 92       	push	r0
    2492:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2496:	0f 92       	push	r0
    2498:	11 24       	eor	r1, r1
    249a:	2f 93       	push	r18
    249c:	3f 93       	push	r19
    249e:	4f 93       	push	r20
    24a0:	5f 93       	push	r21
    24a2:	6f 93       	push	r22
    24a4:	7f 93       	push	r23
    24a6:	8f 93       	push	r24
    24a8:	9f 93       	push	r25
    24aa:	af 93       	push	r26
    24ac:	bf 93       	push	r27
    24ae:	ef 93       	push	r30
    24b0:	ff 93       	push	r31
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	1f 92       	push	r1
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    24bc:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    24c0:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    24c4:	89 2b       	or	r24, r25
    24c6:	f9 f0       	breq	.+62     	; 0x2506 <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    24c8:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ser_handle+0x2>
    24cc:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <_ser_handle+0x3>
    24d0:	fc 01       	movw	r30, r24
    24d2:	82 81       	ldd	r24, Z+2	; 0x02
    24d4:	93 81       	ldd	r25, Z+3	; 0x03
    24d6:	9e 01       	movw	r18, r28
    24d8:	2f 5f       	subi	r18, 0xFF	; 255
    24da:	3f 4f       	sbci	r19, 0xFF	; 255
    24dc:	b9 01       	movw	r22, r18
    24de:	0e 94 b2 0a 	call	0x1564	; 0x1564 <buffer_get_item>
    24e2:	88 23       	and	r24, r24
    24e4:	31 f4       	brne	.+12     	; 0x24f2 <__vector_29+0x64>
			UDR1 = item;
    24e6:	8e ec       	ldi	r24, 0xCE	; 206
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	29 81       	ldd	r18, Y+1	; 0x01
    24ec:	fc 01       	movw	r30, r24
    24ee:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    24f0:	13 c0       	rjmp	.+38     	; 0x2518 <__vector_29+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
			UDR1 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    24f2:	89 ec       	ldi	r24, 0xC9	; 201
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	29 ec       	ldi	r18, 0xC9	; 201
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	f9 01       	movw	r30, r18
    24fc:	20 81       	ld	r18, Z
    24fe:	2f 7d       	andi	r18, 0xDF	; 223
    2500:	fc 01       	movw	r30, r24
    2502:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    2504:	09 c0       	rjmp	.+18     	; 0x2518 <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    2506:	89 ec       	ldi	r24, 0xC9	; 201
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	29 ec       	ldi	r18, 0xC9	; 201
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	f9 01       	movw	r30, r18
    2510:	20 81       	ld	r18, Z
    2512:	2f 7d       	andi	r18, 0xDF	; 223
    2514:	fc 01       	movw	r30, r24
    2516:	20 83       	st	Z, r18
	}
}
    2518:	00 00       	nop
    251a:	0f 90       	pop	r0
    251c:	df 91       	pop	r29
    251e:	cf 91       	pop	r28
    2520:	ff 91       	pop	r31
    2522:	ef 91       	pop	r30
    2524:	bf 91       	pop	r27
    2526:	af 91       	pop	r26
    2528:	9f 91       	pop	r25
    252a:	8f 91       	pop	r24
    252c:	7f 91       	pop	r23
    252e:	6f 91       	pop	r22
    2530:	5f 91       	pop	r21
    2532:	4f 91       	pop	r20
    2534:	3f 91       	pop	r19
    2536:	2f 91       	pop	r18
    2538:	0f 90       	pop	r0
    253a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    253e:	0f 90       	pop	r0
    2540:	1f 90       	pop	r1
    2542:	18 95       	reti

00002544 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2544:	cf 93       	push	r28
    2546:	df 93       	push	r29
    2548:	00 d0       	rcall	.+0      	; 0x254a <xQueueGenericReset+0x6>
    254a:	00 d0       	rcall	.+0      	; 0x254c <xQueueGenericReset+0x8>
    254c:	1f 92       	push	r1
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	9c 83       	std	Y+4, r25	; 0x04
    2554:	8b 83       	std	Y+3, r24	; 0x03
    2556:	6d 83       	std	Y+5, r22	; 0x05
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	9c 81       	ldd	r25, Y+4	; 0x04
    255c:	9a 83       	std	Y+2, r25	; 0x02
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	0f 92       	push	r0
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	9a 81       	ldd	r25, Y+2	; 0x02
    256a:	fc 01       	movw	r30, r24
    256c:	80 81       	ld	r24, Z
    256e:	91 81       	ldd	r25, Z+1	; 0x01
    2570:	29 81       	ldd	r18, Y+1	; 0x01
    2572:	3a 81       	ldd	r19, Y+2	; 0x02
    2574:	f9 01       	movw	r30, r18
    2576:	23 8d       	ldd	r18, Z+27	; 0x1b
    2578:	42 2f       	mov	r20, r18
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	29 81       	ldd	r18, Y+1	; 0x01
    257e:	3a 81       	ldd	r19, Y+2	; 0x02
    2580:	f9 01       	movw	r30, r18
    2582:	24 8d       	ldd	r18, Z+28	; 0x1c
    2584:	22 2f       	mov	r18, r18
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	42 9f       	mul	r20, r18
    258a:	b0 01       	movw	r22, r0
    258c:	43 9f       	mul	r20, r19
    258e:	70 0d       	add	r23, r0
    2590:	52 9f       	mul	r21, r18
    2592:	70 0d       	add	r23, r0
    2594:	11 24       	eor	r1, r1
    2596:	9b 01       	movw	r18, r22
    2598:	28 0f       	add	r18, r24
    259a:	39 1f       	adc	r19, r25
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02
    25a0:	fc 01       	movw	r30, r24
    25a2:	33 83       	std	Z+3, r19	; 0x03
    25a4:	22 83       	std	Z+2, r18	; 0x02
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	fc 01       	movw	r30, r24
    25ac:	12 8e       	std	Z+26, r1	; 0x1a
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	9a 81       	ldd	r25, Y+2	; 0x02
    25b2:	fc 01       	movw	r30, r24
    25b4:	20 81       	ld	r18, Z
    25b6:	31 81       	ldd	r19, Z+1	; 0x01
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	fc 01       	movw	r30, r24
    25be:	35 83       	std	Z+5, r19	; 0x05
    25c0:	24 83       	std	Z+4, r18	; 0x04
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	9a 81       	ldd	r25, Y+2	; 0x02
    25c6:	fc 01       	movw	r30, r24
    25c8:	80 81       	ld	r24, Z
    25ca:	91 81       	ldd	r25, Z+1	; 0x01
    25cc:	29 81       	ldd	r18, Y+1	; 0x01
    25ce:	3a 81       	ldd	r19, Y+2	; 0x02
    25d0:	f9 01       	movw	r30, r18
    25d2:	23 8d       	ldd	r18, Z+27	; 0x1b
    25d4:	22 2f       	mov	r18, r18
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	a9 01       	movw	r20, r18
    25da:	41 50       	subi	r20, 0x01	; 1
    25dc:	51 09       	sbc	r21, r1
    25de:	29 81       	ldd	r18, Y+1	; 0x01
    25e0:	3a 81       	ldd	r19, Y+2	; 0x02
    25e2:	f9 01       	movw	r30, r18
    25e4:	24 8d       	ldd	r18, Z+28	; 0x1c
    25e6:	22 2f       	mov	r18, r18
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	42 9f       	mul	r20, r18
    25ec:	b0 01       	movw	r22, r0
    25ee:	43 9f       	mul	r20, r19
    25f0:	70 0d       	add	r23, r0
    25f2:	52 9f       	mul	r21, r18
    25f4:	70 0d       	add	r23, r0
    25f6:	11 24       	eor	r1, r1
    25f8:	9b 01       	movw	r18, r22
    25fa:	28 0f       	add	r18, r24
    25fc:	39 1f       	adc	r19, r25
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	9a 81       	ldd	r25, Y+2	; 0x02
    2602:	fc 01       	movw	r30, r24
    2604:	37 83       	std	Z+7, r19	; 0x07
    2606:	26 83       	std	Z+6, r18	; 0x06
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	2f ef       	ldi	r18, 0xFF	; 255
    260e:	fc 01       	movw	r30, r24
    2610:	25 8f       	std	Z+29, r18	; 0x1d
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	9a 81       	ldd	r25, Y+2	; 0x02
    2616:	2f ef       	ldi	r18, 0xFF	; 255
    2618:	fc 01       	movw	r30, r24
    261a:	26 8f       	std	Z+30, r18	; 0x1e
    261c:	8d 81       	ldd	r24, Y+5	; 0x05
    261e:	88 23       	and	r24, r24
    2620:	81 f4       	brne	.+32     	; 0x2642 <xQueueGenericReset+0xfe>
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	9a 81       	ldd	r25, Y+2	; 0x02
    2626:	fc 01       	movw	r30, r24
    2628:	80 85       	ldd	r24, Z+8	; 0x08
    262a:	88 23       	and	r24, r24
    262c:	a1 f0       	breq	.+40     	; 0x2656 <xQueueGenericReset+0x112>
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	9a 81       	ldd	r25, Y+2	; 0x02
    2632:	08 96       	adiw	r24, 0x08	; 8
    2634:	0e 94 de 1a 	call	0x35bc	; 0x35bc <xTaskRemoveFromEventList>
    2638:	88 23       	and	r24, r24
    263a:	69 f0       	breq	.+26     	; 0x2656 <xQueueGenericReset+0x112>
    263c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vPortYield>
    2640:	0a c0       	rjmp	.+20     	; 0x2656 <xQueueGenericReset+0x112>
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	9a 81       	ldd	r25, Y+2	; 0x02
    2646:	08 96       	adiw	r24, 0x08	; 8
    2648:	0e 94 3d 0b 	call	0x167a	; 0x167a <vListInitialise>
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	41 96       	adiw	r24, 0x11	; 17
    2652:	0e 94 3d 0b 	call	0x167a	; 0x167a <vListInitialise>
    2656:	0f 90       	pop	r0
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	08 95       	ret

0000266c <xQueueGenericCreate>:
    266c:	0f 93       	push	r16
    266e:	1f 93       	push	r17
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	29 97       	sbiw	r28, 0x09	; 9
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	8f 83       	std	Y+7, r24	; 0x07
    2686:	68 87       	std	Y+8, r22	; 0x08
    2688:	49 87       	std	Y+9, r20	; 0x09
    268a:	88 85       	ldd	r24, Y+8	; 0x08
    268c:	88 23       	and	r24, r24
    268e:	19 f4       	brne	.+6      	; 0x2696 <xQueueGenericCreate+0x2a>
    2690:	1a 82       	std	Y+2, r1	; 0x02
    2692:	19 82       	std	Y+1, r1	; 0x01
    2694:	0f c0       	rjmp	.+30     	; 0x26b4 <xQueueGenericCreate+0x48>
    2696:	8f 81       	ldd	r24, Y+7	; 0x07
    2698:	48 2f       	mov	r20, r24
    269a:	50 e0       	ldi	r21, 0x00	; 0
    269c:	88 85       	ldd	r24, Y+8	; 0x08
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	42 9f       	mul	r20, r18
    26a4:	c0 01       	movw	r24, r0
    26a6:	43 9f       	mul	r20, r19
    26a8:	90 0d       	add	r25, r0
    26aa:	52 9f       	mul	r21, r18
    26ac:	90 0d       	add	r25, r0
    26ae:	11 24       	eor	r1, r1
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	81 96       	adiw	r24, 0x21	; 33
    26ba:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <pvPortMalloc>
    26be:	9c 83       	std	Y+4, r25	; 0x04
    26c0:	8b 83       	std	Y+3, r24	; 0x03
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	9c 81       	ldd	r25, Y+4	; 0x04
    26c6:	89 2b       	or	r24, r25
    26c8:	81 f0       	breq	.+32     	; 0x26ea <xQueueGenericCreate+0x7e>
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	9c 81       	ldd	r25, Y+4	; 0x04
    26ce:	81 96       	adiw	r24, 0x21	; 33
    26d0:	9e 83       	std	Y+6, r25	; 0x06
    26d2:	8d 83       	std	Y+5, r24	; 0x05
    26d4:	2b 81       	ldd	r18, Y+3	; 0x03
    26d6:	3c 81       	ldd	r19, Y+4	; 0x04
    26d8:	8d 81       	ldd	r24, Y+5	; 0x05
    26da:	9e 81       	ldd	r25, Y+6	; 0x06
    26dc:	89 01       	movw	r16, r18
    26de:	29 85       	ldd	r18, Y+9	; 0x09
    26e0:	ac 01       	movw	r20, r24
    26e2:	68 85       	ldd	r22, Y+8	; 0x08
    26e4:	8f 81       	ldd	r24, Y+7	; 0x07
    26e6:	0e 94 82 13 	call	0x2704	; 0x2704 <prvInitialiseNewQueue>
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	29 96       	adiw	r28, 0x09	; 9
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	08 95       	ret

00002704 <prvInitialiseNewQueue>:
    2704:	0f 93       	push	r16
    2706:	1f 93       	push	r17
    2708:	cf 93       	push	r28
    270a:	df 93       	push	r29
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	27 97       	sbiw	r28, 0x07	; 7
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	6a 83       	std	Y+2, r22	; 0x02
    2720:	5c 83       	std	Y+4, r21	; 0x04
    2722:	4b 83       	std	Y+3, r20	; 0x03
    2724:	2d 83       	std	Y+5, r18	; 0x05
    2726:	1f 83       	std	Y+7, r17	; 0x07
    2728:	0e 83       	std	Y+6, r16	; 0x06
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	88 23       	and	r24, r24
    272e:	41 f4       	brne	.+16     	; 0x2740 <prvInitialiseNewQueue+0x3c>
    2730:	8e 81       	ldd	r24, Y+6	; 0x06
    2732:	9f 81       	ldd	r25, Y+7	; 0x07
    2734:	2e 81       	ldd	r18, Y+6	; 0x06
    2736:	3f 81       	ldd	r19, Y+7	; 0x07
    2738:	fc 01       	movw	r30, r24
    273a:	31 83       	std	Z+1, r19	; 0x01
    273c:	20 83       	st	Z, r18
    273e:	07 c0       	rjmp	.+14     	; 0x274e <prvInitialiseNewQueue+0x4a>
    2740:	8e 81       	ldd	r24, Y+6	; 0x06
    2742:	9f 81       	ldd	r25, Y+7	; 0x07
    2744:	2b 81       	ldd	r18, Y+3	; 0x03
    2746:	3c 81       	ldd	r19, Y+4	; 0x04
    2748:	fc 01       	movw	r30, r24
    274a:	31 83       	std	Z+1, r19	; 0x01
    274c:	20 83       	st	Z, r18
    274e:	8e 81       	ldd	r24, Y+6	; 0x06
    2750:	9f 81       	ldd	r25, Y+7	; 0x07
    2752:	29 81       	ldd	r18, Y+1	; 0x01
    2754:	fc 01       	movw	r30, r24
    2756:	23 8f       	std	Z+27, r18	; 0x1b
    2758:	8e 81       	ldd	r24, Y+6	; 0x06
    275a:	9f 81       	ldd	r25, Y+7	; 0x07
    275c:	2a 81       	ldd	r18, Y+2	; 0x02
    275e:	fc 01       	movw	r30, r24
    2760:	24 8f       	std	Z+28, r18	; 0x1c
    2762:	8e 81       	ldd	r24, Y+6	; 0x06
    2764:	9f 81       	ldd	r25, Y+7	; 0x07
    2766:	61 e0       	ldi	r22, 0x01	; 1
    2768:	0e 94 a2 12 	call	0x2544	; 0x2544 <xQueueGenericReset>
    276c:	8e 81       	ldd	r24, Y+6	; 0x06
    276e:	9f 81       	ldd	r25, Y+7	; 0x07
    2770:	2d 81       	ldd	r18, Y+5	; 0x05
    2772:	fc 01       	movw	r30, r24
    2774:	20 a3       	std	Z+32, r18	; 0x20
    2776:	00 00       	nop
    2778:	27 96       	adiw	r28, 0x07	; 7
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	1f 91       	pop	r17
    278a:	0f 91       	pop	r16
    278c:	08 95       	ret

0000278e <prvInitialiseMutex>:
    278e:	cf 93       	push	r28
    2790:	df 93       	push	r29
    2792:	00 d0       	rcall	.+0      	; 0x2794 <prvInitialiseMutex+0x6>
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	9a 83       	std	Y+2, r25	; 0x02
    279a:	89 83       	std	Y+1, r24	; 0x01
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02
    27a0:	89 2b       	or	r24, r25
    27a2:	b9 f0       	breq	.+46     	; 0x27d2 <prvInitialiseMutex+0x44>
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	9a 81       	ldd	r25, Y+2	; 0x02
    27a8:	fc 01       	movw	r30, r24
    27aa:	13 82       	std	Z+3, r1	; 0x03
    27ac:	12 82       	std	Z+2, r1	; 0x02
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	9a 81       	ldd	r25, Y+2	; 0x02
    27b2:	fc 01       	movw	r30, r24
    27b4:	11 82       	std	Z+1, r1	; 0x01
    27b6:	10 82       	st	Z, r1
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	9a 81       	ldd	r25, Y+2	; 0x02
    27bc:	fc 01       	movw	r30, r24
    27be:	16 82       	std	Z+6, r1	; 0x06
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	9a 81       	ldd	r25, Y+2	; 0x02
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    27ca:	60 e0       	ldi	r22, 0x00	; 0
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	0e 94 0f 14 	call	0x281e	; 0x281e <xQueueGenericSend>
    27d2:	00 00       	nop
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	08 95       	ret

000027de <xQueueCreateMutex>:
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <xQueueCreateMutex+0x6>
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <xQueueCreateMutex+0x8>
    27e6:	1f 92       	push	r1
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	8d 83       	std	Y+5, r24	; 0x05
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	89 83       	std	Y+1, r24	; 0x01
    27f2:	1a 82       	std	Y+2, r1	; 0x02
    27f4:	4d 81       	ldd	r20, Y+5	; 0x05
    27f6:	6a 81       	ldd	r22, Y+2	; 0x02
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	0e 94 36 13 	call	0x266c	; 0x266c <xQueueGenericCreate>
    27fe:	9c 83       	std	Y+4, r25	; 0x04
    2800:	8b 83       	std	Y+3, r24	; 0x03
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	0e 94 c7 13 	call	0x278e	; 0x278e <prvInitialiseMutex>
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	9c 81       	ldd	r25, Y+4	; 0x04
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	08 95       	ret

0000281e <xQueueGenericSend>:
    281e:	cf 93       	push	r28
    2820:	df 93       	push	r29
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	2e 97       	sbiw	r28, 0x0e	; 14
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	99 87       	std	Y+9, r25	; 0x09
    2834:	88 87       	std	Y+8, r24	; 0x08
    2836:	7b 87       	std	Y+11, r23	; 0x0b
    2838:	6a 87       	std	Y+10, r22	; 0x0a
    283a:	5d 87       	std	Y+13, r21	; 0x0d
    283c:	4c 87       	std	Y+12, r20	; 0x0c
    283e:	2e 87       	std	Y+14, r18	; 0x0e
    2840:	19 82       	std	Y+1, r1	; 0x01
    2842:	88 85       	ldd	r24, Y+8	; 0x08
    2844:	99 85       	ldd	r25, Y+9	; 0x09
    2846:	9b 83       	std	Y+3, r25	; 0x03
    2848:	8a 83       	std	Y+2, r24	; 0x02
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	0f 92       	push	r0
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
    2852:	9b 81       	ldd	r25, Y+3	; 0x03
    2854:	fc 01       	movw	r30, r24
    2856:	22 8d       	ldd	r18, Z+26	; 0x1a
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	9b 81       	ldd	r25, Y+3	; 0x03
    285c:	fc 01       	movw	r30, r24
    285e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2860:	28 17       	cp	r18, r24
    2862:	18 f0       	brcs	.+6      	; 0x286a <xQueueGenericSend+0x4c>
    2864:	8e 85       	ldd	r24, Y+14	; 0x0e
    2866:	82 30       	cpi	r24, 0x02	; 2
    2868:	11 f5       	brne	.+68     	; 0x28ae <xQueueGenericSend+0x90>
    286a:	2a 85       	ldd	r18, Y+10	; 0x0a
    286c:	3b 85       	ldd	r19, Y+11	; 0x0b
    286e:	8a 81       	ldd	r24, Y+2	; 0x02
    2870:	9b 81       	ldd	r25, Y+3	; 0x03
    2872:	4e 85       	ldd	r20, Y+14	; 0x0e
    2874:	b9 01       	movw	r22, r18
    2876:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <prvCopyDataToQueue>
    287a:	8c 83       	std	Y+4, r24	; 0x04
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	9b 81       	ldd	r25, Y+3	; 0x03
    2880:	fc 01       	movw	r30, r24
    2882:	81 89       	ldd	r24, Z+17	; 0x11
    2884:	88 23       	and	r24, r24
    2886:	51 f0       	breq	.+20     	; 0x289c <xQueueGenericSend+0x7e>
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	9b 81       	ldd	r25, Y+3	; 0x03
    288c:	41 96       	adiw	r24, 0x11	; 17
    288e:	0e 94 de 1a 	call	0x35bc	; 0x35bc <xTaskRemoveFromEventList>
    2892:	88 23       	and	r24, r24
    2894:	41 f0       	breq	.+16     	; 0x28a6 <xQueueGenericSend+0x88>
    2896:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vPortYield>
    289a:	05 c0       	rjmp	.+10     	; 0x28a6 <xQueueGenericSend+0x88>
    289c:	8c 81       	ldd	r24, Y+4	; 0x04
    289e:	88 23       	and	r24, r24
    28a0:	11 f0       	breq	.+4      	; 0x28a6 <xQueueGenericSend+0x88>
    28a2:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vPortYield>
    28a6:	0f 90       	pop	r0
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	60 c0       	rjmp	.+192    	; 0x296e <xQueueGenericSend+0x150>
    28ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    28b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    28b2:	89 2b       	or	r24, r25
    28b4:	21 f4       	brne	.+8      	; 0x28be <xQueueGenericSend+0xa0>
    28b6:	0f 90       	pop	r0
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	58 c0       	rjmp	.+176    	; 0x296e <xQueueGenericSend+0x150>
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	88 23       	and	r24, r24
    28c2:	31 f4       	brne	.+12     	; 0x28d0 <xQueueGenericSend+0xb2>
    28c4:	ce 01       	movw	r24, r28
    28c6:	05 96       	adiw	r24, 0x05	; 5
    28c8:	0e 94 4b 1b 	call	0x3696	; 0x3696 <vTaskSetTimeOutState>
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	0f 90       	pop	r0
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	0e 94 a4 18 	call	0x3148	; 0x3148 <vTaskSuspendAll>
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	0f 92       	push	r0
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	fc 01       	movw	r30, r24
    28e4:	85 8d       	ldd	r24, Z+29	; 0x1d
    28e6:	8f 3f       	cpi	r24, 0xFF	; 255
    28e8:	21 f4       	brne	.+8      	; 0x28f2 <xQueueGenericSend+0xd4>
    28ea:	8a 81       	ldd	r24, Y+2	; 0x02
    28ec:	9b 81       	ldd	r25, Y+3	; 0x03
    28ee:	fc 01       	movw	r30, r24
    28f0:	15 8e       	std	Z+29, r1	; 0x1d
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	9b 81       	ldd	r25, Y+3	; 0x03
    28f6:	fc 01       	movw	r30, r24
    28f8:	86 8d       	ldd	r24, Z+30	; 0x1e
    28fa:	8f 3f       	cpi	r24, 0xFF	; 255
    28fc:	21 f4       	brne	.+8      	; 0x2906 <xQueueGenericSend+0xe8>
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	9b 81       	ldd	r25, Y+3	; 0x03
    2902:	fc 01       	movw	r30, r24
    2904:	16 8e       	std	Z+30, r1	; 0x1e
    2906:	0f 90       	pop	r0
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	9e 01       	movw	r18, r28
    290c:	24 5f       	subi	r18, 0xF4	; 244
    290e:	3f 4f       	sbci	r19, 0xFF	; 255
    2910:	ce 01       	movw	r24, r28
    2912:	05 96       	adiw	r24, 0x05	; 5
    2914:	b9 01       	movw	r22, r18
    2916:	0e 94 67 1b 	call	0x36ce	; 0x36ce <xTaskCheckForTimeOut>
    291a:	88 23       	and	r24, r24
    291c:	09 f5       	brne	.+66     	; 0x2960 <xQueueGenericSend+0x142>
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	9b 81       	ldd	r25, Y+3	; 0x03
    2922:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <prvIsQueueFull>
    2926:	88 23       	and	r24, r24
    2928:	a1 f0       	breq	.+40     	; 0x2952 <xQueueGenericSend+0x134>
    292a:	2c 85       	ldd	r18, Y+12	; 0x0c
    292c:	3d 85       	ldd	r19, Y+13	; 0x0d
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	9b 81       	ldd	r25, Y+3	; 0x03
    2932:	08 96       	adiw	r24, 0x08	; 8
    2934:	b9 01       	movw	r22, r18
    2936:	0e 94 bb 1a 	call	0x3576	; 0x3576 <vTaskPlaceOnEventList>
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	9b 81       	ldd	r25, Y+3	; 0x03
    293e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <prvUnlockQueue>
    2942:	0e 94 b1 18 	call	0x3162	; 0x3162 <xTaskResumeAll>
    2946:	88 23       	and	r24, r24
    2948:	09 f0       	breq	.+2      	; 0x294c <xQueueGenericSend+0x12e>
    294a:	7f cf       	rjmp	.-258    	; 0x284a <xQueueGenericSend+0x2c>
    294c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vPortYield>
    2950:	7c cf       	rjmp	.-264    	; 0x284a <xQueueGenericSend+0x2c>
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	9b 81       	ldd	r25, Y+3	; 0x03
    2956:	0e 94 ef 15 	call	0x2bde	; 0x2bde <prvUnlockQueue>
    295a:	0e 94 b1 18 	call	0x3162	; 0x3162 <xTaskResumeAll>
    295e:	75 cf       	rjmp	.-278    	; 0x284a <xQueueGenericSend+0x2c>
    2960:	8a 81       	ldd	r24, Y+2	; 0x02
    2962:	9b 81       	ldd	r25, Y+3	; 0x03
    2964:	0e 94 ef 15 	call	0x2bde	; 0x2bde <prvUnlockQueue>
    2968:	0e 94 b1 18 	call	0x3162	; 0x3162 <xTaskResumeAll>
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	2e 96       	adiw	r28, 0x0e	; 14
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	f8 94       	cli
    2974:	de bf       	out	0x3e, r29	; 62
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	cd bf       	out	0x3d, r28	; 61
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	08 95       	ret

00002980 <xQueueGenericSendFromISR>:
    2980:	cf 93       	push	r28
    2982:	df 93       	push	r29
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	2c 97       	sbiw	r28, 0x0c	; 12
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61
    2994:	9f 83       	std	Y+7, r25	; 0x07
    2996:	8e 83       	std	Y+6, r24	; 0x06
    2998:	79 87       	std	Y+9, r23	; 0x09
    299a:	68 87       	std	Y+8, r22	; 0x08
    299c:	5b 87       	std	Y+11, r21	; 0x0b
    299e:	4a 87       	std	Y+10, r20	; 0x0a
    29a0:	2c 87       	std	Y+12, r18	; 0x0c
    29a2:	8e 81       	ldd	r24, Y+6	; 0x06
    29a4:	9f 81       	ldd	r25, Y+7	; 0x07
    29a6:	9b 83       	std	Y+3, r25	; 0x03
    29a8:	8a 83       	std	Y+2, r24	; 0x02
    29aa:	1c 82       	std	Y+4, r1	; 0x04
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	9b 81       	ldd	r25, Y+3	; 0x03
    29b0:	fc 01       	movw	r30, r24
    29b2:	22 8d       	ldd	r18, Z+26	; 0x1a
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	9b 81       	ldd	r25, Y+3	; 0x03
    29b8:	fc 01       	movw	r30, r24
    29ba:	83 8d       	ldd	r24, Z+27	; 0x1b
    29bc:	28 17       	cp	r18, r24
    29be:	18 f0       	brcs	.+6      	; 0x29c6 <xQueueGenericSendFromISR+0x46>
    29c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    29c2:	82 30       	cpi	r24, 0x02	; 2
    29c4:	89 f5       	brne	.+98     	; 0x2a28 <xQueueGenericSendFromISR+0xa8>
    29c6:	8a 81       	ldd	r24, Y+2	; 0x02
    29c8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ca:	fc 01       	movw	r30, r24
    29cc:	86 8d       	ldd	r24, Z+30	; 0x1e
    29ce:	8d 83       	std	Y+5, r24	; 0x05
    29d0:	28 85       	ldd	r18, Y+8	; 0x08
    29d2:	39 85       	ldd	r19, Y+9	; 0x09
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	9b 81       	ldd	r25, Y+3	; 0x03
    29d8:	4c 85       	ldd	r20, Y+12	; 0x0c
    29da:	b9 01       	movw	r22, r18
    29dc:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <prvCopyDataToQueue>
    29e0:	8d 81       	ldd	r24, Y+5	; 0x05
    29e2:	8f 3f       	cpi	r24, 0xFF	; 255
    29e4:	b9 f4       	brne	.+46     	; 0x2a14 <xQueueGenericSendFromISR+0x94>
    29e6:	8a 81       	ldd	r24, Y+2	; 0x02
    29e8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ea:	fc 01       	movw	r30, r24
    29ec:	81 89       	ldd	r24, Z+17	; 0x11
    29ee:	88 23       	and	r24, r24
    29f0:	c1 f0       	breq	.+48     	; 0x2a22 <xQueueGenericSendFromISR+0xa2>
    29f2:	8a 81       	ldd	r24, Y+2	; 0x02
    29f4:	9b 81       	ldd	r25, Y+3	; 0x03
    29f6:	41 96       	adiw	r24, 0x11	; 17
    29f8:	0e 94 de 1a 	call	0x35bc	; 0x35bc <xTaskRemoveFromEventList>
    29fc:	88 23       	and	r24, r24
    29fe:	89 f0       	breq	.+34     	; 0x2a22 <xQueueGenericSendFromISR+0xa2>
    2a00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a02:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a04:	89 2b       	or	r24, r25
    2a06:	69 f0       	breq	.+26     	; 0x2a22 <xQueueGenericSendFromISR+0xa2>
    2a08:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a0c:	21 e0       	ldi	r18, 0x01	; 1
    2a0e:	fc 01       	movw	r30, r24
    2a10:	20 83       	st	Z, r18
    2a12:	07 c0       	rjmp	.+14     	; 0x2a22 <xQueueGenericSendFromISR+0xa2>
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	8f 5f       	subi	r24, 0xFF	; 255
    2a18:	28 2f       	mov	r18, r24
    2a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1e:	fc 01       	movw	r30, r24
    2a20:	26 8f       	std	Z+30, r18	; 0x1e
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	89 83       	std	Y+1, r24	; 0x01
    2a26:	01 c0       	rjmp	.+2      	; 0x2a2a <xQueueGenericSendFromISR+0xaa>
    2a28:	19 82       	std	Y+1, r1	; 0x01
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	2c 96       	adiw	r28, 0x0c	; 12
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	08 95       	ret

00002a3e <prvCopyDataToQueue>:
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	27 97       	sbiw	r28, 0x07	; 7
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	de bf       	out	0x3e, r29	; 62
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	cd bf       	out	0x3d, r28	; 61
    2a52:	9c 83       	std	Y+4, r25	; 0x04
    2a54:	8b 83       	std	Y+3, r24	; 0x03
    2a56:	7e 83       	std	Y+6, r23	; 0x06
    2a58:	6d 83       	std	Y+5, r22	; 0x05
    2a5a:	4f 83       	std	Y+7, r20	; 0x07
    2a5c:	19 82       	std	Y+1, r1	; 0x01
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	9c 81       	ldd	r25, Y+4	; 0x04
    2a62:	fc 01       	movw	r30, r24
    2a64:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a66:	8a 83       	std	Y+2, r24	; 0x02
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a70:	88 23       	and	r24, r24
    2a72:	b1 f4       	brne	.+44     	; 0x2aa0 <prvCopyDataToQueue+0x62>
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03
    2a76:	9c 81       	ldd	r25, Y+4	; 0x04
    2a78:	fc 01       	movw	r30, r24
    2a7a:	80 81       	ld	r24, Z
    2a7c:	91 81       	ldd	r25, Z+1	; 0x01
    2a7e:	89 2b       	or	r24, r25
    2a80:	09 f0       	breq	.+2      	; 0x2a84 <prvCopyDataToQueue+0x46>
    2a82:	9c c0       	rjmp	.+312    	; 0x2bbc <prvCopyDataToQueue+0x17e>
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	9c 81       	ldd	r25, Y+4	; 0x04
    2a88:	fc 01       	movw	r30, r24
    2a8a:	82 81       	ldd	r24, Z+2	; 0x02
    2a8c:	93 81       	ldd	r25, Z+3	; 0x03
    2a8e:	0e 94 b2 1c 	call	0x3964	; 0x3964 <xTaskPriorityDisinherit>
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	8b 81       	ldd	r24, Y+3	; 0x03
    2a96:	9c 81       	ldd	r25, Y+4	; 0x04
    2a98:	fc 01       	movw	r30, r24
    2a9a:	13 82       	std	Z+3, r1	; 0x03
    2a9c:	12 82       	std	Z+2, r1	; 0x02
    2a9e:	8e c0       	rjmp	.+284    	; 0x2bbc <prvCopyDataToQueue+0x17e>
    2aa0:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa2:	88 23       	and	r24, r24
    2aa4:	d9 f5       	brne	.+118    	; 0x2b1c <prvCopyDataToQueue+0xde>
    2aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aaa:	fc 01       	movw	r30, r24
    2aac:	84 8d       	ldd	r24, Z+28	; 0x1c
    2aae:	48 2f       	mov	r20, r24
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	84 81       	ldd	r24, Z+4	; 0x04
    2aba:	95 81       	ldd	r25, Z+5	; 0x05
    2abc:	2d 81       	ldd	r18, Y+5	; 0x05
    2abe:	3e 81       	ldd	r19, Y+6	; 0x06
    2ac0:	b9 01       	movw	r22, r18
    2ac2:	0e 94 6f 22 	call	0x44de	; 0x44de <memcpy>
    2ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aca:	fc 01       	movw	r30, r24
    2acc:	24 81       	ldd	r18, Z+4	; 0x04
    2ace:	35 81       	ldd	r19, Z+5	; 0x05
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	84 8d       	ldd	r24, Z+28	; 0x1c
    2ad8:	88 2f       	mov	r24, r24
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	28 0f       	add	r18, r24
    2ade:	39 1f       	adc	r19, r25
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae4:	fc 01       	movw	r30, r24
    2ae6:	35 83       	std	Z+5, r19	; 0x05
    2ae8:	24 83       	std	Z+4, r18	; 0x04
    2aea:	8b 81       	ldd	r24, Y+3	; 0x03
    2aec:	9c 81       	ldd	r25, Y+4	; 0x04
    2aee:	fc 01       	movw	r30, r24
    2af0:	24 81       	ldd	r18, Z+4	; 0x04
    2af2:	35 81       	ldd	r19, Z+5	; 0x05
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	9c 81       	ldd	r25, Y+4	; 0x04
    2af8:	fc 01       	movw	r30, r24
    2afa:	82 81       	ldd	r24, Z+2	; 0x02
    2afc:	93 81       	ldd	r25, Z+3	; 0x03
    2afe:	28 17       	cp	r18, r24
    2b00:	39 07       	cpc	r19, r25
    2b02:	08 f4       	brcc	.+2      	; 0x2b06 <prvCopyDataToQueue+0xc8>
    2b04:	5b c0       	rjmp	.+182    	; 0x2bbc <prvCopyDataToQueue+0x17e>
    2b06:	8b 81       	ldd	r24, Y+3	; 0x03
    2b08:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	20 81       	ld	r18, Z
    2b0e:	31 81       	ldd	r19, Z+1	; 0x01
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	9c 81       	ldd	r25, Y+4	; 0x04
    2b14:	fc 01       	movw	r30, r24
    2b16:	35 83       	std	Z+5, r19	; 0x05
    2b18:	24 83       	std	Z+4, r18	; 0x04
    2b1a:	50 c0       	rjmp	.+160    	; 0x2bbc <prvCopyDataToQueue+0x17e>
    2b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b20:	fc 01       	movw	r30, r24
    2b22:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b24:	48 2f       	mov	r20, r24
    2b26:	50 e0       	ldi	r21, 0x00	; 0
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	86 81       	ldd	r24, Z+6	; 0x06
    2b30:	97 81       	ldd	r25, Z+7	; 0x07
    2b32:	2d 81       	ldd	r18, Y+5	; 0x05
    2b34:	3e 81       	ldd	r19, Y+6	; 0x06
    2b36:	b9 01       	movw	r22, r18
    2b38:	0e 94 6f 22 	call	0x44de	; 0x44de <memcpy>
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	fc 01       	movw	r30, r24
    2b42:	26 81       	ldd	r18, Z+6	; 0x06
    2b44:	37 81       	ldd	r19, Z+7	; 0x07
    2b46:	8b 81       	ldd	r24, Y+3	; 0x03
    2b48:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b4e:	88 2f       	mov	r24, r24
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	91 95       	neg	r25
    2b54:	81 95       	neg	r24
    2b56:	91 09       	sbc	r25, r1
    2b58:	28 0f       	add	r18, r24
    2b5a:	39 1f       	adc	r19, r25
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b60:	fc 01       	movw	r30, r24
    2b62:	37 83       	std	Z+7, r19	; 0x07
    2b64:	26 83       	std	Z+6, r18	; 0x06
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	26 81       	ldd	r18, Z+6	; 0x06
    2b6e:	37 81       	ldd	r19, Z+7	; 0x07
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
    2b72:	9c 81       	ldd	r25, Y+4	; 0x04
    2b74:	fc 01       	movw	r30, r24
    2b76:	80 81       	ld	r24, Z
    2b78:	91 81       	ldd	r25, Z+1	; 0x01
    2b7a:	28 17       	cp	r18, r24
    2b7c:	39 07       	cpc	r19, r25
    2b7e:	a8 f4       	brcc	.+42     	; 0x2baa <prvCopyDataToQueue+0x16c>
    2b80:	8b 81       	ldd	r24, Y+3	; 0x03
    2b82:	9c 81       	ldd	r25, Y+4	; 0x04
    2b84:	fc 01       	movw	r30, r24
    2b86:	22 81       	ldd	r18, Z+2	; 0x02
    2b88:	33 81       	ldd	r19, Z+3	; 0x03
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8e:	fc 01       	movw	r30, r24
    2b90:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b92:	88 2f       	mov	r24, r24
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	91 95       	neg	r25
    2b98:	81 95       	neg	r24
    2b9a:	91 09       	sbc	r25, r1
    2b9c:	28 0f       	add	r18, r24
    2b9e:	39 1f       	adc	r19, r25
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	37 83       	std	Z+7, r19	; 0x07
    2ba8:	26 83       	std	Z+6, r18	; 0x06
    2baa:	8f 81       	ldd	r24, Y+7	; 0x07
    2bac:	82 30       	cpi	r24, 0x02	; 2
    2bae:	31 f4       	brne	.+12     	; 0x2bbc <prvCopyDataToQueue+0x17e>
    2bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb2:	88 23       	and	r24, r24
    2bb4:	19 f0       	breq	.+6      	; 0x2bbc <prvCopyDataToQueue+0x17e>
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	81 50       	subi	r24, 0x01	; 1
    2bba:	8a 83       	std	Y+2, r24	; 0x02
    2bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbe:	21 e0       	ldi	r18, 0x01	; 1
    2bc0:	28 0f       	add	r18, r24
    2bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	22 8f       	std	Z+26, r18	; 0x1a
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	27 96       	adiw	r28, 0x07	; 7
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	f8 94       	cli
    2bd2:	de bf       	out	0x3e, r29	; 62
    2bd4:	0f be       	out	0x3f, r0	; 63
    2bd6:	cd bf       	out	0x3d, r28	; 61
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	08 95       	ret

00002bde <prvUnlockQueue>:
    2bde:	cf 93       	push	r28
    2be0:	df 93       	push	r29
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <prvUnlockQueue+0x6>
    2be4:	00 d0       	rcall	.+0      	; 0x2be6 <prvUnlockQueue+0x8>
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	9c 83       	std	Y+4, r25	; 0x04
    2bec:	8b 83       	std	Y+3, r24	; 0x03
    2bee:	0f b6       	in	r0, 0x3f	; 63
    2bf0:	f8 94       	cli
    2bf2:	0f 92       	push	r0
    2bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	86 8d       	ldd	r24, Z+30	; 0x1e
    2bfc:	89 83       	std	Y+1, r24	; 0x01
    2bfe:	12 c0       	rjmp	.+36     	; 0x2c24 <prvUnlockQueue+0x46>
    2c00:	8b 81       	ldd	r24, Y+3	; 0x03
    2c02:	9c 81       	ldd	r25, Y+4	; 0x04
    2c04:	fc 01       	movw	r30, r24
    2c06:	81 89       	ldd	r24, Z+17	; 0x11
    2c08:	88 23       	and	r24, r24
    2c0a:	81 f0       	breq	.+32     	; 0x2c2c <prvUnlockQueue+0x4e>
    2c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c10:	41 96       	adiw	r24, 0x11	; 17
    2c12:	0e 94 de 1a 	call	0x35bc	; 0x35bc <xTaskRemoveFromEventList>
    2c16:	88 23       	and	r24, r24
    2c18:	11 f0       	breq	.+4      	; 0x2c1e <prvUnlockQueue+0x40>
    2c1a:	0e 94 cf 1b 	call	0x379e	; 0x379e <vTaskMissedYield>
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	81 50       	subi	r24, 0x01	; 1
    2c22:	89 83       	std	Y+1, r24	; 0x01
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	18 16       	cp	r1, r24
    2c28:	5c f3       	brlt	.-42     	; 0x2c00 <prvUnlockQueue+0x22>
    2c2a:	01 c0       	rjmp	.+2      	; 0x2c2e <prvUnlockQueue+0x50>
    2c2c:	00 00       	nop
    2c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c30:	9c 81       	ldd	r25, Y+4	; 0x04
    2c32:	2f ef       	ldi	r18, 0xFF	; 255
    2c34:	fc 01       	movw	r30, r24
    2c36:	26 8f       	std	Z+30, r18	; 0x1e
    2c38:	0f 90       	pop	r0
    2c3a:	0f be       	out	0x3f, r0	; 63
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	0f 92       	push	r0
    2c42:	8b 81       	ldd	r24, Y+3	; 0x03
    2c44:	9c 81       	ldd	r25, Y+4	; 0x04
    2c46:	fc 01       	movw	r30, r24
    2c48:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c4a:	8a 83       	std	Y+2, r24	; 0x02
    2c4c:	12 c0       	rjmp	.+36     	; 0x2c72 <prvUnlockQueue+0x94>
    2c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c50:	9c 81       	ldd	r25, Y+4	; 0x04
    2c52:	fc 01       	movw	r30, r24
    2c54:	80 85       	ldd	r24, Z+8	; 0x08
    2c56:	88 23       	and	r24, r24
    2c58:	81 f0       	breq	.+32     	; 0x2c7a <prvUnlockQueue+0x9c>
    2c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5e:	08 96       	adiw	r24, 0x08	; 8
    2c60:	0e 94 de 1a 	call	0x35bc	; 0x35bc <xTaskRemoveFromEventList>
    2c64:	88 23       	and	r24, r24
    2c66:	11 f0       	breq	.+4      	; 0x2c6c <prvUnlockQueue+0x8e>
    2c68:	0e 94 cf 1b 	call	0x379e	; 0x379e <vTaskMissedYield>
    2c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6e:	81 50       	subi	r24, 0x01	; 1
    2c70:	8a 83       	std	Y+2, r24	; 0x02
    2c72:	8a 81       	ldd	r24, Y+2	; 0x02
    2c74:	18 16       	cp	r1, r24
    2c76:	5c f3       	brlt	.-42     	; 0x2c4e <prvUnlockQueue+0x70>
    2c78:	01 c0       	rjmp	.+2      	; 0x2c7c <prvUnlockQueue+0x9e>
    2c7a:	00 00       	nop
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c80:	2f ef       	ldi	r18, 0xFF	; 255
    2c82:	fc 01       	movw	r30, r24
    2c84:	25 8f       	std	Z+29, r18	; 0x1d
    2c86:	0f 90       	pop	r0
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	00 00       	nop
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	df 91       	pop	r29
    2c96:	cf 91       	pop	r28
    2c98:	08 95       	ret

00002c9a <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2c9a:	cf 93       	push	r28
    2c9c:	df 93       	push	r29
    2c9e:	00 d0       	rcall	.+0      	; 0x2ca0 <prvIsQueueFull+0x6>
    2ca0:	1f 92       	push	r1
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	9b 83       	std	Y+3, r25	; 0x03
    2ca8:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	22 8d       	ldd	r18, Z+26	; 0x1a
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	83 8d       	ldd	r24, Z+27	; 0x1b
    2cc0:	28 17       	cp	r18, r24
    2cc2:	19 f4       	brne	.+6      	; 0x2cca <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	89 83       	std	Y+1, r24	; 0x01
    2cc8:	01 c0       	rjmp	.+2      	; 0x2ccc <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    2cca:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2ccc:	0f 90       	pop	r0
    2cce:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	08 95       	ret

00002cde <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    2cde:	8f 92       	push	r8
    2ce0:	9f 92       	push	r9
    2ce2:	af 92       	push	r10
    2ce4:	bf 92       	push	r11
    2ce6:	cf 92       	push	r12
    2ce8:	df 92       	push	r13
    2cea:	ef 92       	push	r14
    2cec:	ff 92       	push	r15
    2cee:	0f 93       	push	r16
    2cf0:	1f 93       	push	r17
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	60 97       	sbiw	r28, 0x10	; 16
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
    2d06:	9f 83       	std	Y+7, r25	; 0x07
    2d08:	8e 83       	std	Y+6, r24	; 0x06
    2d0a:	79 87       	std	Y+9, r23	; 0x09
    2d0c:	68 87       	std	Y+8, r22	; 0x08
    2d0e:	5b 87       	std	Y+11, r21	; 0x0b
    2d10:	4a 87       	std	Y+10, r20	; 0x0a
    2d12:	3d 87       	std	Y+13, r19	; 0x0d
    2d14:	2c 87       	std	Y+12, r18	; 0x0c
    2d16:	0e 87       	std	Y+14, r16	; 0x0e
    2d18:	f8 8a       	std	Y+16, r15	; 0x10
    2d1a:	ef 86       	std	Y+15, r14	; 0x0f
    2d1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d20:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <pvPortMalloc>
    2d24:	9d 83       	std	Y+5, r25	; 0x05
    2d26:	8c 83       	std	Y+4, r24	; 0x04
    2d28:	8c 81       	ldd	r24, Y+4	; 0x04
    2d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d2c:	89 2b       	or	r24, r25
    2d2e:	b9 f0       	breq	.+46     	; 0x2d5e <xTaskCreate+0x80>
    2d30:	8c e2       	ldi	r24, 0x2C	; 44
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <pvPortMalloc>
    2d38:	9a 83       	std	Y+2, r25	; 0x02
    2d3a:	89 83       	std	Y+1, r24	; 0x01
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d40:	89 2b       	or	r24, r25
    2d42:	41 f0       	breq	.+16     	; 0x2d54 <xTaskCreate+0x76>
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	9a 81       	ldd	r25, Y+2	; 0x02
    2d48:	2c 81       	ldd	r18, Y+4	; 0x04
    2d4a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	30 8f       	std	Z+24, r19	; 0x18
    2d50:	27 8b       	std	Z+23, r18	; 0x17
    2d52:	07 c0       	rjmp	.+14     	; 0x2d62 <xTaskCreate+0x84>
    2d54:	8c 81       	ldd	r24, Y+4	; 0x04
    2d56:	9d 81       	ldd	r25, Y+5	; 0x05
    2d58:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <vPortFree>
    2d5c:	02 c0       	rjmp	.+4      	; 0x2d62 <xTaskCreate+0x84>
    2d5e:	1a 82       	std	Y+2, r1	; 0x02
    2d60:	19 82       	std	Y+1, r1	; 0x01
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	9a 81       	ldd	r25, Y+2	; 0x02
    2d66:	89 2b       	or	r24, r25
    2d68:	09 f1       	breq	.+66     	; 0x2dac <xTaskCreate+0xce>
    2d6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d6e:	cc 01       	movw	r24, r24
    2d70:	a0 e0       	ldi	r26, 0x00	; 0
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	09 81       	ldd	r16, Y+1	; 0x01
    2d76:	1a 81       	ldd	r17, Y+2	; 0x02
    2d78:	4f 85       	ldd	r20, Y+15	; 0x0f
    2d7a:	58 89       	ldd	r21, Y+16	; 0x10
    2d7c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d7e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d80:	68 85       	ldd	r22, Y+8	; 0x08
    2d82:	79 85       	ldd	r23, Y+9	; 0x09
    2d84:	ee 81       	ldd	r30, Y+6	; 0x06
    2d86:	ff 81       	ldd	r31, Y+7	; 0x07
    2d88:	81 2c       	mov	r8, r1
    2d8a:	91 2c       	mov	r9, r1
    2d8c:	58 01       	movw	r10, r16
    2d8e:	6a 01       	movw	r12, r20
    2d90:	ee 84       	ldd	r14, Y+14	; 0x0e
    2d92:	89 01       	movw	r16, r18
    2d94:	9c 01       	movw	r18, r24
    2d96:	ad 01       	movw	r20, r26
    2d98:	cf 01       	movw	r24, r30
    2d9a:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <prvInitialiseNewTask>
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	9a 81       	ldd	r25, Y+2	; 0x02
    2da2:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <prvAddNewTaskToReadyList>
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	8b 83       	std	Y+3, r24	; 0x03
    2daa:	02 c0       	rjmp	.+4      	; 0x2db0 <xTaskCreate+0xd2>
    2dac:	8f ef       	ldi	r24, 0xFF	; 255
    2dae:	8b 83       	std	Y+3, r24	; 0x03
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	60 96       	adiw	r28, 0x10	; 16
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	f8 94       	cli
    2db8:	de bf       	out	0x3e, r29	; 62
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	cd bf       	out	0x3d, r28	; 61
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	1f 91       	pop	r17
    2dc4:	0f 91       	pop	r16
    2dc6:	ff 90       	pop	r15
    2dc8:	ef 90       	pop	r14
    2dca:	df 90       	pop	r13
    2dcc:	cf 90       	pop	r12
    2dce:	bf 90       	pop	r11
    2dd0:	af 90       	pop	r10
    2dd2:	9f 90       	pop	r9
    2dd4:	8f 90       	pop	r8
    2dd6:	08 95       	ret

00002dd8 <prvInitialiseNewTask>:
    2dd8:	8f 92       	push	r8
    2dda:	9f 92       	push	r9
    2ddc:	af 92       	push	r10
    2dde:	bf 92       	push	r11
    2de0:	cf 92       	push	r12
    2de2:	df 92       	push	r13
    2de4:	ef 92       	push	r14
    2de6:	0f 93       	push	r16
    2de8:	1f 93       	push	r17
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	64 97       	sbiw	r28, 0x14	; 20
    2df4:	0f b6       	in	r0, 0x3f	; 63
    2df6:	f8 94       	cli
    2df8:	de bf       	out	0x3e, r29	; 62
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	cd bf       	out	0x3d, r28	; 61
    2dfe:	9d 83       	std	Y+5, r25	; 0x05
    2e00:	8c 83       	std	Y+4, r24	; 0x04
    2e02:	7f 83       	std	Y+7, r23	; 0x07
    2e04:	6e 83       	std	Y+6, r22	; 0x06
    2e06:	28 87       	std	Y+8, r18	; 0x08
    2e08:	39 87       	std	Y+9, r19	; 0x09
    2e0a:	4a 87       	std	Y+10, r20	; 0x0a
    2e0c:	5b 87       	std	Y+11, r21	; 0x0b
    2e0e:	1d 87       	std	Y+13, r17	; 0x0d
    2e10:	0c 87       	std	Y+12, r16	; 0x0c
    2e12:	ee 86       	std	Y+14, r14	; 0x0e
    2e14:	d8 8a       	std	Y+16, r13	; 0x10
    2e16:	cf 86       	std	Y+15, r12	; 0x0f
    2e18:	ba 8a       	std	Y+18, r11	; 0x12
    2e1a:	a9 8a       	std	Y+17, r10	; 0x11
    2e1c:	9c 8a       	std	Y+20, r9	; 0x14
    2e1e:	8b 8a       	std	Y+19, r8	; 0x13
    2e20:	28 85       	ldd	r18, Y+8	; 0x08
    2e22:	39 85       	ldd	r19, Y+9	; 0x09
    2e24:	89 89       	ldd	r24, Y+17	; 0x11
    2e26:	9a 89       	ldd	r25, Y+18	; 0x12
    2e28:	fc 01       	movw	r30, r24
    2e2a:	87 89       	ldd	r24, Z+23	; 0x17
    2e2c:	90 8d       	ldd	r25, Z+24	; 0x18
    2e2e:	a9 01       	movw	r20, r18
    2e30:	65 ea       	ldi	r22, 0xA5	; 165
    2e32:	70 e0       	ldi	r23, 0x00	; 0
    2e34:	0e 94 78 22 	call	0x44f0	; 0x44f0 <memset>
    2e38:	89 89       	ldd	r24, Y+17	; 0x11
    2e3a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	27 89       	ldd	r18, Z+23	; 0x17
    2e40:	30 8d       	ldd	r19, Z+24	; 0x18
    2e42:	88 85       	ldd	r24, Y+8	; 0x08
    2e44:	99 85       	ldd	r25, Y+9	; 0x09
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	82 0f       	add	r24, r18
    2e4a:	93 1f       	adc	r25, r19
    2e4c:	9b 83       	std	Y+3, r25	; 0x03
    2e4e:	8a 83       	std	Y+2, r24	; 0x02
    2e50:	19 82       	std	Y+1, r1	; 0x01
    2e52:	21 c0       	rjmp	.+66     	; 0x2e96 <prvInitialiseNewTask+0xbe>
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	88 2f       	mov	r24, r24
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	29 81       	ldd	r18, Y+1	; 0x01
    2e5c:	22 2f       	mov	r18, r18
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	4e 81       	ldd	r20, Y+6	; 0x06
    2e62:	5f 81       	ldd	r21, Y+7	; 0x07
    2e64:	24 0f       	add	r18, r20
    2e66:	35 1f       	adc	r19, r21
    2e68:	f9 01       	movw	r30, r18
    2e6a:	40 81       	ld	r20, Z
    2e6c:	29 89       	ldd	r18, Y+17	; 0x11
    2e6e:	3a 89       	ldd	r19, Y+18	; 0x12
    2e70:	82 0f       	add	r24, r18
    2e72:	93 1f       	adc	r25, r19
    2e74:	49 96       	adiw	r24, 0x19	; 25
    2e76:	fc 01       	movw	r30, r24
    2e78:	40 83       	st	Z, r20
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	88 2f       	mov	r24, r24
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	2e 81       	ldd	r18, Y+6	; 0x06
    2e82:	3f 81       	ldd	r19, Y+7	; 0x07
    2e84:	82 0f       	add	r24, r18
    2e86:	93 1f       	adc	r25, r19
    2e88:	fc 01       	movw	r30, r24
    2e8a:	80 81       	ld	r24, Z
    2e8c:	88 23       	and	r24, r24
    2e8e:	39 f0       	breq	.+14     	; 0x2e9e <prvInitialiseNewTask+0xc6>
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	8f 5f       	subi	r24, 0xFF	; 255
    2e94:	89 83       	std	Y+1, r24	; 0x01
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	88 30       	cpi	r24, 0x08	; 8
    2e9a:	e0 f2       	brcs	.-72     	; 0x2e54 <prvInitialiseNewTask+0x7c>
    2e9c:	01 c0       	rjmp	.+2      	; 0x2ea0 <prvInitialiseNewTask+0xc8>
    2e9e:	00 00       	nop
    2ea0:	89 89       	ldd	r24, Y+17	; 0x11
    2ea2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	10 a2       	std	Z+32, r1	; 0x20
    2ea8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eaa:	84 30       	cpi	r24, 0x04	; 4
    2eac:	10 f0       	brcs	.+4      	; 0x2eb2 <prvInitialiseNewTask+0xda>
    2eae:	83 e0       	ldi	r24, 0x03	; 3
    2eb0:	8e 87       	std	Y+14, r24	; 0x0e
    2eb2:	89 89       	ldd	r24, Y+17	; 0x11
    2eb4:	9a 89       	ldd	r25, Y+18	; 0x12
    2eb6:	2e 85       	ldd	r18, Y+14	; 0x0e
    2eb8:	fc 01       	movw	r30, r24
    2eba:	26 8b       	std	Z+22, r18	; 0x16
    2ebc:	89 89       	ldd	r24, Y+17	; 0x11
    2ebe:	9a 89       	ldd	r25, Y+18	; 0x12
    2ec0:	2e 85       	ldd	r18, Y+14	; 0x0e
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	23 a3       	std	Z+35, r18	; 0x23
    2ec6:	89 89       	ldd	r24, Y+17	; 0x11
    2ec8:	9a 89       	ldd	r25, Y+18	; 0x12
    2eca:	fc 01       	movw	r30, r24
    2ecc:	14 a2       	std	Z+36, r1	; 0x24
    2ece:	89 89       	ldd	r24, Y+17	; 0x11
    2ed0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ed2:	02 96       	adiw	r24, 0x02	; 2
    2ed4:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <vListInitialiseItem>
    2ed8:	89 89       	ldd	r24, Y+17	; 0x11
    2eda:	9a 89       	ldd	r25, Y+18	; 0x12
    2edc:	0c 96       	adiw	r24, 0x0c	; 12
    2ede:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <vListInitialiseItem>
    2ee2:	89 89       	ldd	r24, Y+17	; 0x11
    2ee4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ee6:	29 89       	ldd	r18, Y+17	; 0x11
    2ee8:	3a 89       	ldd	r19, Y+18	; 0x12
    2eea:	fc 01       	movw	r30, r24
    2eec:	31 87       	std	Z+9, r19	; 0x09
    2eee:	20 87       	std	Z+8, r18	; 0x08
    2ef0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ef2:	88 2f       	mov	r24, r24
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	24 e0       	ldi	r18, 0x04	; 4
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	28 1b       	sub	r18, r24
    2efc:	39 0b       	sbc	r19, r25
    2efe:	89 89       	ldd	r24, Y+17	; 0x11
    2f00:	9a 89       	ldd	r25, Y+18	; 0x12
    2f02:	fc 01       	movw	r30, r24
    2f04:	35 87       	std	Z+13, r19	; 0x0d
    2f06:	24 87       	std	Z+12, r18	; 0x0c
    2f08:	89 89       	ldd	r24, Y+17	; 0x11
    2f0a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f0c:	29 89       	ldd	r18, Y+17	; 0x11
    2f0e:	3a 89       	ldd	r19, Y+18	; 0x12
    2f10:	fc 01       	movw	r30, r24
    2f12:	33 8b       	std	Z+19, r19	; 0x13
    2f14:	22 8b       	std	Z+18, r18	; 0x12
    2f16:	89 89       	ldd	r24, Y+17	; 0x11
    2f18:	9a 89       	ldd	r25, Y+18	; 0x12
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	16 a2       	std	Z+38, r1	; 0x26
    2f1e:	15 a2       	std	Z+37, r1	; 0x25
    2f20:	89 89       	ldd	r24, Y+17	; 0x11
    2f22:	9a 89       	ldd	r25, Y+18	; 0x12
    2f24:	fc 01       	movw	r30, r24
    2f26:	17 a2       	std	Z+39, r1	; 0x27
    2f28:	10 a6       	std	Z+40, r1	; 0x28
    2f2a:	11 a6       	std	Z+41, r1	; 0x29
    2f2c:	12 a6       	std	Z+42, r1	; 0x2a
    2f2e:	89 89       	ldd	r24, Y+17	; 0x11
    2f30:	9a 89       	ldd	r25, Y+18	; 0x12
    2f32:	fc 01       	movw	r30, r24
    2f34:	13 a6       	std	Z+43, r1	; 0x2b
    2f36:	4c 85       	ldd	r20, Y+12	; 0x0c
    2f38:	5d 85       	ldd	r21, Y+13	; 0x0d
    2f3a:	2c 81       	ldd	r18, Y+4	; 0x04
    2f3c:	3d 81       	ldd	r19, Y+5	; 0x05
    2f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f40:	9b 81       	ldd	r25, Y+3	; 0x03
    2f42:	b9 01       	movw	r22, r18
    2f44:	0e 94 a3 0c 	call	0x1946	; 0x1946 <pxPortInitialiseStack>
    2f48:	9c 01       	movw	r18, r24
    2f4a:	89 89       	ldd	r24, Y+17	; 0x11
    2f4c:	9a 89       	ldd	r25, Y+18	; 0x12
    2f4e:	fc 01       	movw	r30, r24
    2f50:	31 83       	std	Z+1, r19	; 0x01
    2f52:	20 83       	st	Z, r18
    2f54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f56:	98 89       	ldd	r25, Y+16	; 0x10
    2f58:	89 2b       	or	r24, r25
    2f5a:	39 f0       	breq	.+14     	; 0x2f6a <prvInitialiseNewTask+0x192>
    2f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f5e:	98 89       	ldd	r25, Y+16	; 0x10
    2f60:	29 89       	ldd	r18, Y+17	; 0x11
    2f62:	3a 89       	ldd	r19, Y+18	; 0x12
    2f64:	fc 01       	movw	r30, r24
    2f66:	31 83       	std	Z+1, r19	; 0x01
    2f68:	20 83       	st	Z, r18
    2f6a:	00 00       	nop
    2f6c:	64 96       	adiw	r28, 0x14	; 20
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	f8 94       	cli
    2f72:	de bf       	out	0x3e, r29	; 62
    2f74:	0f be       	out	0x3f, r0	; 63
    2f76:	cd bf       	out	0x3d, r28	; 61
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
    2f80:	ef 90       	pop	r14
    2f82:	df 90       	pop	r13
    2f84:	cf 90       	pop	r12
    2f86:	bf 90       	pop	r11
    2f88:	af 90       	pop	r10
    2f8a:	9f 90       	pop	r9
    2f8c:	8f 90       	pop	r8
    2f8e:	08 95       	ret

00002f90 <prvAddNewTaskToReadyList>:
    2f90:	cf 93       	push	r28
    2f92:	df 93       	push	r29
    2f94:	00 d0       	rcall	.+0      	; 0x2f96 <prvAddNewTaskToReadyList+0x6>
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	f8 94       	cli
    2fa2:	0f 92       	push	r0
    2fa4:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <uxCurrentNumberOfTasks>
    2fa8:	8f 5f       	subi	r24, 0xFF	; 255
    2faa:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <uxCurrentNumberOfTasks>
    2fae:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    2fb2:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    2fb6:	89 2b       	or	r24, r25
    2fb8:	69 f4       	brne	.+26     	; 0x2fd4 <prvAddNewTaskToReadyList+0x44>
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbe:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <pxCurrentTCB+0x1>
    2fc2:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <pxCurrentTCB>
    2fc6:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <uxCurrentNumberOfTasks>
    2fca:	81 30       	cpi	r24, 0x01	; 1
    2fcc:	c9 f4       	brne	.+50     	; 0x3000 <prvAddNewTaskToReadyList+0x70>
    2fce:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <prvInitialiseTaskLists>
    2fd2:	16 c0       	rjmp	.+44     	; 0x3000 <prvAddNewTaskToReadyList+0x70>
    2fd4:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <xSchedulerRunning>
    2fd8:	88 23       	and	r24, r24
    2fda:	91 f4       	brne	.+36     	; 0x3000 <prvAddNewTaskToReadyList+0x70>
    2fdc:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    2fe0:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	26 89       	ldd	r18, Z+22	; 0x16
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	9a 81       	ldd	r25, Y+2	; 0x02
    2fec:	fc 01       	movw	r30, r24
    2fee:	86 89       	ldd	r24, Z+22	; 0x16
    2ff0:	82 17       	cp	r24, r18
    2ff2:	30 f0       	brcs	.+12     	; 0x3000 <prvAddNewTaskToReadyList+0x70>
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff8:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <pxCurrentTCB+0x1>
    2ffc:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <pxCurrentTCB>
    3000:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <uxTaskNumber>
    3004:	8f 5f       	subi	r24, 0xFF	; 255
    3006:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <uxTaskNumber>
    300a:	20 91 a6 07 	lds	r18, 0x07A6	; 0x8007a6 <uxTaskNumber>
    300e:	89 81       	ldd	r24, Y+1	; 0x01
    3010:	9a 81       	ldd	r25, Y+2	; 0x02
    3012:	fc 01       	movw	r30, r24
    3014:	21 a3       	std	Z+33, r18	; 0x21
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	9a 81       	ldd	r25, Y+2	; 0x02
    301a:	fc 01       	movw	r30, r24
    301c:	96 89       	ldd	r25, Z+22	; 0x16
    301e:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    3022:	89 17       	cp	r24, r25
    3024:	30 f4       	brcc	.+12     	; 0x3032 <prvAddNewTaskToReadyList+0xa2>
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	9a 81       	ldd	r25, Y+2	; 0x02
    302a:	fc 01       	movw	r30, r24
    302c:	86 89       	ldd	r24, Z+22	; 0x16
    302e:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	9a 81       	ldd	r25, Y+2	; 0x02
    3036:	ac 01       	movw	r20, r24
    3038:	4e 5f       	subi	r20, 0xFE	; 254
    303a:	5f 4f       	sbci	r21, 0xFF	; 255
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	9a 81       	ldd	r25, Y+2	; 0x02
    3040:	fc 01       	movw	r30, r24
    3042:	86 89       	ldd	r24, Z+22	; 0x16
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	c9 01       	movw	r24, r18
    304a:	88 0f       	add	r24, r24
    304c:	99 1f       	adc	r25, r25
    304e:	88 0f       	add	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	88 0f       	add	r24, r24
    3054:	99 1f       	adc	r25, r25
    3056:	82 0f       	add	r24, r18
    3058:	93 1f       	adc	r25, r19
    305a:	8f 5a       	subi	r24, 0xAF	; 175
    305c:	98 4f       	sbci	r25, 0xF8	; 248
    305e:	ba 01       	movw	r22, r20
    3060:	0e 94 85 0b 	call	0x170a	; 0x170a <vListInsertEnd>
    3064:	0f 90       	pop	r0
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <xSchedulerRunning>
    306c:	88 23       	and	r24, r24
    306e:	71 f0       	breq	.+28     	; 0x308c <prvAddNewTaskToReadyList+0xfc>
    3070:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    3074:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3078:	fc 01       	movw	r30, r24
    307a:	26 89       	ldd	r18, Z+22	; 0x16
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	9a 81       	ldd	r25, Y+2	; 0x02
    3080:	fc 01       	movw	r30, r24
    3082:	86 89       	ldd	r24, Z+22	; 0x16
    3084:	28 17       	cp	r18, r24
    3086:	10 f4       	brcc	.+4      	; 0x308c <prvAddNewTaskToReadyList+0xfc>
    3088:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vPortYield>
    308c:	00 00       	nop
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	df 91       	pop	r29
    3094:	cf 91       	pop	r28
    3096:	08 95       	ret

00003098 <vTaskDelay>:
    3098:	cf 93       	push	r28
    309a:	df 93       	push	r29
    309c:	00 d0       	rcall	.+0      	; 0x309e <vTaskDelay+0x6>
    309e:	1f 92       	push	r1
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62
    30a4:	9b 83       	std	Y+3, r25	; 0x03
    30a6:	8a 83       	std	Y+2, r24	; 0x02
    30a8:	19 82       	std	Y+1, r1	; 0x01
    30aa:	8a 81       	ldd	r24, Y+2	; 0x02
    30ac:	9b 81       	ldd	r25, Y+3	; 0x03
    30ae:	89 2b       	or	r24, r25
    30b0:	51 f0       	breq	.+20     	; 0x30c6 <vTaskDelay+0x2e>
    30b2:	0e 94 a4 18 	call	0x3148	; 0x3148 <vTaskSuspendAll>
    30b6:	8a 81       	ldd	r24, Y+2	; 0x02
    30b8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ba:	60 e0       	ldi	r22, 0x00	; 0
    30bc:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <prvAddCurrentTaskToDelayedList>
    30c0:	0e 94 b1 18 	call	0x3162	; 0x3162 <xTaskResumeAll>
    30c4:	89 83       	std	Y+1, r24	; 0x01
    30c6:	89 81       	ldd	r24, Y+1	; 0x01
    30c8:	88 23       	and	r24, r24
    30ca:	11 f4       	brne	.+4      	; 0x30d0 <vTaskDelay+0x38>
    30cc:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vPortYield>
    30d0:	00 00       	nop
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	df 91       	pop	r29
    30da:	cf 91       	pop	r28
    30dc:	08 95       	ret

000030de <vTaskStartScheduler>:
    30de:	ef 92       	push	r14
    30e0:	ff 92       	push	r15
    30e2:	0f 93       	push	r16
    30e4:	cf 93       	push	r28
    30e6:	df 93       	push	r29
    30e8:	1f 92       	push	r1
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	0f 2e       	mov	r0, r31
    30f0:	f9 ea       	ldi	r31, 0xA9	; 169
    30f2:	ef 2e       	mov	r14, r31
    30f4:	f7 e0       	ldi	r31, 0x07	; 7
    30f6:	ff 2e       	mov	r15, r31
    30f8:	f0 2d       	mov	r31, r0
    30fa:	00 e0       	ldi	r16, 0x00	; 0
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	45 e5       	ldi	r20, 0x55	; 85
    3102:	50 e0       	ldi	r21, 0x00	; 0
    3104:	6a e4       	ldi	r22, 0x4A	; 74
    3106:	71 e0       	ldi	r23, 0x01	; 1
    3108:	8a ed       	ldi	r24, 0xDA	; 218
    310a:	9b e1       	ldi	r25, 0x1B	; 27
    310c:	0e 94 6f 16 	call	0x2cde	; 0x2cde <xTaskCreate>
    3110:	89 83       	std	Y+1, r24	; 0x01
    3112:	89 81       	ldd	r24, Y+1	; 0x01
    3114:	81 30       	cpi	r24, 0x01	; 1
    3116:	81 f4       	brne	.+32     	; 0x3138 <vTaskStartScheduler+0x5a>
    3118:	f8 94       	cli
    311a:	8f ef       	ldi	r24, 0xFF	; 255
    311c:	9f ef       	ldi	r25, 0xFF	; 255
    311e:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3122:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xSchedulerRunning>
    312c:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <xTickCount+0x1>
    3130:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <xTickCount>
    3134:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <xPortStartScheduler>
    3138:	00 00       	nop
    313a:	0f 90       	pop	r0
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	0f 91       	pop	r16
    3142:	ff 90       	pop	r15
    3144:	ef 90       	pop	r14
    3146:	08 95       	ret

00003148 <vTaskSuspendAll>:
    3148:	cf 93       	push	r28
    314a:	df 93       	push	r29
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
    3150:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    3154:	8f 5f       	subi	r24, 0xFF	; 255
    3156:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <uxSchedulerSuspended>
    315a:	00 00       	nop
    315c:	df 91       	pop	r29
    315e:	cf 91       	pop	r28
    3160:	08 95       	ret

00003162 <xTaskResumeAll>:
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	00 d0       	rcall	.+0      	; 0x3168 <xTaskResumeAll+0x6>
    3168:	00 d0       	rcall	.+0      	; 0x316a <xTaskResumeAll+0x8>
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
    316e:	1a 82       	std	Y+2, r1	; 0x02
    3170:	19 82       	std	Y+1, r1	; 0x01
    3172:	1b 82       	std	Y+3, r1	; 0x03
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	f8 94       	cli
    3178:	0f 92       	push	r0
    317a:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    317e:	81 50       	subi	r24, 0x01	; 1
    3180:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <uxSchedulerSuspended>
    3184:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    3188:	88 23       	and	r24, r24
    318a:	09 f0       	breq	.+2      	; 0x318e <xTaskResumeAll+0x2c>
    318c:	77 c0       	rjmp	.+238    	; 0x327c <xTaskResumeAll+0x11a>
    318e:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <uxCurrentNumberOfTasks>
    3192:	88 23       	and	r24, r24
    3194:	09 f4       	brne	.+2      	; 0x3198 <xTaskResumeAll+0x36>
    3196:	72 c0       	rjmp	.+228    	; 0x327c <xTaskResumeAll+0x11a>
    3198:	49 c0       	rjmp	.+146    	; 0x322c <xTaskResumeAll+0xca>
    319a:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <xPendingReadyList+0x5>
    319e:	90 91 91 07 	lds	r25, 0x0791	; 0x800791 <xPendingReadyList+0x6>
    31a2:	fc 01       	movw	r30, r24
    31a4:	86 81       	ldd	r24, Z+6	; 0x06
    31a6:	97 81       	ldd	r25, Z+7	; 0x07
    31a8:	9a 83       	std	Y+2, r25	; 0x02
    31aa:	89 83       	std	Y+1, r24	; 0x01
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	9a 81       	ldd	r25, Y+2	; 0x02
    31b0:	0c 96       	adiw	r24, 0x0c	; 12
    31b2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <uxListRemove>
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ba:	02 96       	adiw	r24, 0x02	; 2
    31bc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <uxListRemove>
    31c0:	89 81       	ldd	r24, Y+1	; 0x01
    31c2:	9a 81       	ldd	r25, Y+2	; 0x02
    31c4:	fc 01       	movw	r30, r24
    31c6:	96 89       	ldd	r25, Z+22	; 0x16
    31c8:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    31cc:	89 17       	cp	r24, r25
    31ce:	30 f4       	brcc	.+12     	; 0x31dc <xTaskResumeAll+0x7a>
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	9a 81       	ldd	r25, Y+2	; 0x02
    31d4:	fc 01       	movw	r30, r24
    31d6:	86 89       	ldd	r24, Z+22	; 0x16
    31d8:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    31dc:	89 81       	ldd	r24, Y+1	; 0x01
    31de:	9a 81       	ldd	r25, Y+2	; 0x02
    31e0:	ac 01       	movw	r20, r24
    31e2:	4e 5f       	subi	r20, 0xFE	; 254
    31e4:	5f 4f       	sbci	r21, 0xFF	; 255
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ea:	fc 01       	movw	r30, r24
    31ec:	86 89       	ldd	r24, Z+22	; 0x16
    31ee:	28 2f       	mov	r18, r24
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	c9 01       	movw	r24, r18
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	82 0f       	add	r24, r18
    3202:	93 1f       	adc	r25, r19
    3204:	8f 5a       	subi	r24, 0xAF	; 175
    3206:	98 4f       	sbci	r25, 0xF8	; 248
    3208:	ba 01       	movw	r22, r20
    320a:	0e 94 85 0b 	call	0x170a	; 0x170a <vListInsertEnd>
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	9a 81       	ldd	r25, Y+2	; 0x02
    3212:	fc 01       	movw	r30, r24
    3214:	26 89       	ldd	r18, Z+22	; 0x16
    3216:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    321a:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    321e:	fc 01       	movw	r30, r24
    3220:	86 89       	ldd	r24, Z+22	; 0x16
    3222:	28 17       	cp	r18, r24
    3224:	18 f0       	brcs	.+6      	; 0x322c <xTaskResumeAll+0xca>
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xYieldPending>
    322c:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xPendingReadyList>
    3230:	88 23       	and	r24, r24
    3232:	09 f0       	breq	.+2      	; 0x3236 <xTaskResumeAll+0xd4>
    3234:	b2 cf       	rjmp	.-156    	; 0x319a <xTaskResumeAll+0x38>
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	9a 81       	ldd	r25, Y+2	; 0x02
    323a:	89 2b       	or	r24, r25
    323c:	11 f0       	breq	.+4      	; 0x3242 <xTaskResumeAll+0xe0>
    323e:	0e 94 83 1c 	call	0x3906	; 0x3906 <prvResetNextTaskUnblockTime>
    3242:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <uxPendedTicks>
    3246:	8c 83       	std	Y+4, r24	; 0x04
    3248:	8c 81       	ldd	r24, Y+4	; 0x04
    324a:	88 23       	and	r24, r24
    324c:	79 f0       	breq	.+30     	; 0x326c <xTaskResumeAll+0x10a>
    324e:	0e 94 48 19 	call	0x3290	; 0x3290 <xTaskIncrementTick>
    3252:	88 23       	and	r24, r24
    3254:	19 f0       	breq	.+6      	; 0x325c <xTaskResumeAll+0xfa>
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xYieldPending>
    325c:	8c 81       	ldd	r24, Y+4	; 0x04
    325e:	81 50       	subi	r24, 0x01	; 1
    3260:	8c 83       	std	Y+4, r24	; 0x04
    3262:	8c 81       	ldd	r24, Y+4	; 0x04
    3264:	88 23       	and	r24, r24
    3266:	99 f7       	brne	.-26     	; 0x324e <xTaskResumeAll+0xec>
    3268:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <uxPendedTicks>
    326c:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <xYieldPending>
    3270:	88 23       	and	r24, r24
    3272:	21 f0       	breq	.+8      	; 0x327c <xTaskResumeAll+0x11a>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	8b 83       	std	Y+3, r24	; 0x03
    3278:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vPortYield>
    327c:	0f 90       	pop	r0
    327e:	0f be       	out	0x3f, r0	; 63
    3280:	8b 81       	ldd	r24, Y+3	; 0x03
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	0f 90       	pop	r0
    3288:	0f 90       	pop	r0
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	08 95       	ret

00003290 <xTaskIncrementTick>:
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
    3294:	cd b7       	in	r28, 0x3d	; 61
    3296:	de b7       	in	r29, 0x3e	; 62
    3298:	29 97       	sbiw	r28, 0x09	; 9
    329a:	0f b6       	in	r0, 0x3f	; 63
    329c:	f8 94       	cli
    329e:	de bf       	out	0x3e, r29	; 62
    32a0:	0f be       	out	0x3f, r0	; 63
    32a2:	cd bf       	out	0x3d, r28	; 61
    32a4:	19 82       	std	Y+1, r1	; 0x01
    32a6:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    32aa:	88 23       	and	r24, r24
    32ac:	09 f0       	breq	.+2      	; 0x32b0 <xTaskIncrementTick+0x20>
    32ae:	c8 c0       	rjmp	.+400    	; 0x3440 <xTaskIncrementTick+0x1b0>
    32b0:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <xTickCount>
    32b4:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    32b8:	01 96       	adiw	r24, 0x01	; 1
    32ba:	9b 83       	std	Y+3, r25	; 0x03
    32bc:	8a 83       	std	Y+2, r24	; 0x02
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	9b 81       	ldd	r25, Y+3	; 0x03
    32c2:	90 93 a0 07 	sts	0x07A0, r25	; 0x8007a0 <xTickCount+0x1>
    32c6:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <xTickCount>
    32ca:	8a 81       	ldd	r24, Y+2	; 0x02
    32cc:	9b 81       	ldd	r25, Y+3	; 0x03
    32ce:	89 2b       	or	r24, r25
    32d0:	d9 f4       	brne	.+54     	; 0x3308 <xTaskIncrementTick+0x78>
    32d2:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    32d6:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    32da:	9d 83       	std	Y+5, r25	; 0x05
    32dc:	8c 83       	std	Y+4, r24	; 0x04
    32de:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <pxOverflowDelayedTaskList>
    32e2:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <pxOverflowDelayedTaskList+0x1>
    32e6:	90 93 88 07 	sts	0x0788, r25	; 0x800788 <pxDelayedTaskList+0x1>
    32ea:	80 93 87 07 	sts	0x0787, r24	; 0x800787 <pxDelayedTaskList>
    32ee:	8c 81       	ldd	r24, Y+4	; 0x04
    32f0:	9d 81       	ldd	r25, Y+5	; 0x05
    32f2:	90 93 8a 07 	sts	0x078A, r25	; 0x80078a <pxOverflowDelayedTaskList+0x1>
    32f6:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <pxOverflowDelayedTaskList>
    32fa:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <xNumOfOverflows>
    32fe:	8f 5f       	subi	r24, 0xFF	; 255
    3300:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <xNumOfOverflows>
    3304:	0e 94 83 1c 	call	0x3906	; 0x3906 <prvResetNextTaskUnblockTime>
    3308:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <xNextTaskUnblockTime>
    330c:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3310:	2a 81       	ldd	r18, Y+2	; 0x02
    3312:	3b 81       	ldd	r19, Y+3	; 0x03
    3314:	28 17       	cp	r18, r24
    3316:	39 07       	cpc	r19, r25
    3318:	08 f4       	brcc	.+2      	; 0x331c <xTaskIncrementTick+0x8c>
    331a:	78 c0       	rjmp	.+240    	; 0x340c <xTaskIncrementTick+0x17c>
    331c:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    3320:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    3324:	fc 01       	movw	r30, r24
    3326:	80 81       	ld	r24, Z
    3328:	88 23       	and	r24, r24
    332a:	39 f4       	brne	.+14     	; 0x333a <xTaskIncrementTick+0xaa>
    332c:	8f ef       	ldi	r24, 0xFF	; 255
    332e:	9f ef       	ldi	r25, 0xFF	; 255
    3330:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3334:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>
    3338:	69 c0       	rjmp	.+210    	; 0x340c <xTaskIncrementTick+0x17c>
    333a:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    333e:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    3342:	fc 01       	movw	r30, r24
    3344:	85 81       	ldd	r24, Z+5	; 0x05
    3346:	96 81       	ldd	r25, Z+6	; 0x06
    3348:	fc 01       	movw	r30, r24
    334a:	86 81       	ldd	r24, Z+6	; 0x06
    334c:	97 81       	ldd	r25, Z+7	; 0x07
    334e:	9f 83       	std	Y+7, r25	; 0x07
    3350:	8e 83       	std	Y+6, r24	; 0x06
    3352:	8e 81       	ldd	r24, Y+6	; 0x06
    3354:	9f 81       	ldd	r25, Y+7	; 0x07
    3356:	fc 01       	movw	r30, r24
    3358:	82 81       	ldd	r24, Z+2	; 0x02
    335a:	93 81       	ldd	r25, Z+3	; 0x03
    335c:	99 87       	std	Y+9, r25	; 0x09
    335e:	88 87       	std	Y+8, r24	; 0x08
    3360:	2a 81       	ldd	r18, Y+2	; 0x02
    3362:	3b 81       	ldd	r19, Y+3	; 0x03
    3364:	88 85       	ldd	r24, Y+8	; 0x08
    3366:	99 85       	ldd	r25, Y+9	; 0x09
    3368:	28 17       	cp	r18, r24
    336a:	39 07       	cpc	r19, r25
    336c:	38 f4       	brcc	.+14     	; 0x337c <xTaskIncrementTick+0xec>
    336e:	88 85       	ldd	r24, Y+8	; 0x08
    3370:	99 85       	ldd	r25, Y+9	; 0x09
    3372:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3376:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>
    337a:	48 c0       	rjmp	.+144    	; 0x340c <xTaskIncrementTick+0x17c>
    337c:	8e 81       	ldd	r24, Y+6	; 0x06
    337e:	9f 81       	ldd	r25, Y+7	; 0x07
    3380:	02 96       	adiw	r24, 0x02	; 2
    3382:	0e 94 4c 0c 	call	0x1898	; 0x1898 <uxListRemove>
    3386:	8e 81       	ldd	r24, Y+6	; 0x06
    3388:	9f 81       	ldd	r25, Y+7	; 0x07
    338a:	fc 01       	movw	r30, r24
    338c:	84 89       	ldd	r24, Z+20	; 0x14
    338e:	95 89       	ldd	r25, Z+21	; 0x15
    3390:	89 2b       	or	r24, r25
    3392:	29 f0       	breq	.+10     	; 0x339e <xTaskIncrementTick+0x10e>
    3394:	8e 81       	ldd	r24, Y+6	; 0x06
    3396:	9f 81       	ldd	r25, Y+7	; 0x07
    3398:	0c 96       	adiw	r24, 0x0c	; 12
    339a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <uxListRemove>
    339e:	8e 81       	ldd	r24, Y+6	; 0x06
    33a0:	9f 81       	ldd	r25, Y+7	; 0x07
    33a2:	fc 01       	movw	r30, r24
    33a4:	96 89       	ldd	r25, Z+22	; 0x16
    33a6:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    33aa:	89 17       	cp	r24, r25
    33ac:	30 f4       	brcc	.+12     	; 0x33ba <xTaskIncrementTick+0x12a>
    33ae:	8e 81       	ldd	r24, Y+6	; 0x06
    33b0:	9f 81       	ldd	r25, Y+7	; 0x07
    33b2:	fc 01       	movw	r30, r24
    33b4:	86 89       	ldd	r24, Z+22	; 0x16
    33b6:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    33ba:	8e 81       	ldd	r24, Y+6	; 0x06
    33bc:	9f 81       	ldd	r25, Y+7	; 0x07
    33be:	ac 01       	movw	r20, r24
    33c0:	4e 5f       	subi	r20, 0xFE	; 254
    33c2:	5f 4f       	sbci	r21, 0xFF	; 255
    33c4:	8e 81       	ldd	r24, Y+6	; 0x06
    33c6:	9f 81       	ldd	r25, Y+7	; 0x07
    33c8:	fc 01       	movw	r30, r24
    33ca:	86 89       	ldd	r24, Z+22	; 0x16
    33cc:	28 2f       	mov	r18, r24
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	c9 01       	movw	r24, r18
    33d2:	88 0f       	add	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	88 0f       	add	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	88 0f       	add	r24, r24
    33dc:	99 1f       	adc	r25, r25
    33de:	82 0f       	add	r24, r18
    33e0:	93 1f       	adc	r25, r19
    33e2:	8f 5a       	subi	r24, 0xAF	; 175
    33e4:	98 4f       	sbci	r25, 0xF8	; 248
    33e6:	ba 01       	movw	r22, r20
    33e8:	0e 94 85 0b 	call	0x170a	; 0x170a <vListInsertEnd>
    33ec:	8e 81       	ldd	r24, Y+6	; 0x06
    33ee:	9f 81       	ldd	r25, Y+7	; 0x07
    33f0:	fc 01       	movw	r30, r24
    33f2:	26 89       	ldd	r18, Z+22	; 0x16
    33f4:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    33f8:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    33fc:	fc 01       	movw	r30, r24
    33fe:	86 89       	ldd	r24, Z+22	; 0x16
    3400:	28 17       	cp	r18, r24
    3402:	08 f4       	brcc	.+2      	; 0x3406 <xTaskIncrementTick+0x176>
    3404:	8b cf       	rjmp	.-234    	; 0x331c <xTaskIncrementTick+0x8c>
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	89 83       	std	Y+1, r24	; 0x01
    340a:	88 cf       	rjmp	.-240    	; 0x331c <xTaskIncrementTick+0x8c>
    340c:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    3410:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3414:	fc 01       	movw	r30, r24
    3416:	86 89       	ldd	r24, Z+22	; 0x16
    3418:	28 2f       	mov	r18, r24
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	c9 01       	movw	r24, r18
    341e:	88 0f       	add	r24, r24
    3420:	99 1f       	adc	r25, r25
    3422:	88 0f       	add	r24, r24
    3424:	99 1f       	adc	r25, r25
    3426:	88 0f       	add	r24, r24
    3428:	99 1f       	adc	r25, r25
    342a:	82 0f       	add	r24, r18
    342c:	93 1f       	adc	r25, r19
    342e:	8f 5a       	subi	r24, 0xAF	; 175
    3430:	98 4f       	sbci	r25, 0xF8	; 248
    3432:	fc 01       	movw	r30, r24
    3434:	80 81       	ld	r24, Z
    3436:	82 30       	cpi	r24, 0x02	; 2
    3438:	40 f0       	brcs	.+16     	; 0x344a <xTaskIncrementTick+0x1ba>
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	89 83       	std	Y+1, r24	; 0x01
    343e:	05 c0       	rjmp	.+10     	; 0x344a <xTaskIncrementTick+0x1ba>
    3440:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <uxPendedTicks>
    3444:	8f 5f       	subi	r24, 0xFF	; 255
    3446:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <uxPendedTicks>
    344a:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <xYieldPending>
    344e:	88 23       	and	r24, r24
    3450:	11 f0       	breq	.+4      	; 0x3456 <xTaskIncrementTick+0x1c6>
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	89 83       	std	Y+1, r24	; 0x01
    3456:	89 81       	ldd	r24, Y+1	; 0x01
    3458:	29 96       	adiw	r28, 0x09	; 9
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
    3464:	df 91       	pop	r29
    3466:	cf 91       	pop	r28
    3468:	08 95       	ret

0000346a <vTaskSwitchContext>:
    346a:	cf 93       	push	r28
    346c:	df 93       	push	r29
    346e:	00 d0       	rcall	.+0      	; 0x3470 <vTaskSwitchContext+0x6>
    3470:	1f 92       	push	r1
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62
    3476:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    347a:	88 23       	and	r24, r24
    347c:	21 f0       	breq	.+8      	; 0x3486 <vTaskSwitchContext+0x1c>
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xYieldPending>
    3484:	71 c0       	rjmp	.+226    	; 0x3568 <vTaskSwitchContext+0xfe>
    3486:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <xYieldPending>
    348a:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    348e:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3492:	fc 01       	movw	r30, r24
    3494:	85 a1       	ldd	r24, Z+37	; 0x25
    3496:	96 a1       	ldd	r25, Z+38	; 0x26
    3498:	0e 94 85 0a 	call	0x150a	; 0x150a <switch_out>
    349c:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    34a0:	89 83       	std	Y+1, r24	; 0x01
    34a2:	03 c0       	rjmp	.+6      	; 0x34aa <vTaskSwitchContext+0x40>
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
    34a6:	81 50       	subi	r24, 0x01	; 1
    34a8:	89 83       	std	Y+1, r24	; 0x01
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	28 2f       	mov	r18, r24
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	c9 01       	movw	r24, r18
    34b2:	88 0f       	add	r24, r24
    34b4:	99 1f       	adc	r25, r25
    34b6:	88 0f       	add	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	88 0f       	add	r24, r24
    34bc:	99 1f       	adc	r25, r25
    34be:	82 0f       	add	r24, r18
    34c0:	93 1f       	adc	r25, r19
    34c2:	8f 5a       	subi	r24, 0xAF	; 175
    34c4:	98 4f       	sbci	r25, 0xF8	; 248
    34c6:	fc 01       	movw	r30, r24
    34c8:	80 81       	ld	r24, Z
    34ca:	88 23       	and	r24, r24
    34cc:	59 f3       	breq	.-42     	; 0x34a4 <vTaskSwitchContext+0x3a>
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	28 2f       	mov	r18, r24
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	c9 01       	movw	r24, r18
    34d6:	88 0f       	add	r24, r24
    34d8:	99 1f       	adc	r25, r25
    34da:	88 0f       	add	r24, r24
    34dc:	99 1f       	adc	r25, r25
    34de:	88 0f       	add	r24, r24
    34e0:	99 1f       	adc	r25, r25
    34e2:	82 0f       	add	r24, r18
    34e4:	93 1f       	adc	r25, r19
    34e6:	8f 5a       	subi	r24, 0xAF	; 175
    34e8:	98 4f       	sbci	r25, 0xF8	; 248
    34ea:	9b 83       	std	Y+3, r25	; 0x03
    34ec:	8a 83       	std	Y+2, r24	; 0x02
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	9b 81       	ldd	r25, Y+3	; 0x03
    34f2:	fc 01       	movw	r30, r24
    34f4:	81 81       	ldd	r24, Z+1	; 0x01
    34f6:	92 81       	ldd	r25, Z+2	; 0x02
    34f8:	fc 01       	movw	r30, r24
    34fa:	22 81       	ldd	r18, Z+2	; 0x02
    34fc:	33 81       	ldd	r19, Z+3	; 0x03
    34fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3500:	9b 81       	ldd	r25, Y+3	; 0x03
    3502:	fc 01       	movw	r30, r24
    3504:	32 83       	std	Z+2, r19	; 0x02
    3506:	21 83       	std	Z+1, r18	; 0x01
    3508:	8a 81       	ldd	r24, Y+2	; 0x02
    350a:	9b 81       	ldd	r25, Y+3	; 0x03
    350c:	fc 01       	movw	r30, r24
    350e:	21 81       	ldd	r18, Z+1	; 0x01
    3510:	32 81       	ldd	r19, Z+2	; 0x02
    3512:	8a 81       	ldd	r24, Y+2	; 0x02
    3514:	9b 81       	ldd	r25, Y+3	; 0x03
    3516:	03 96       	adiw	r24, 0x03	; 3
    3518:	28 17       	cp	r18, r24
    351a:	39 07       	cpc	r19, r25
    351c:	69 f4       	brne	.+26     	; 0x3538 <vTaskSwitchContext+0xce>
    351e:	8a 81       	ldd	r24, Y+2	; 0x02
    3520:	9b 81       	ldd	r25, Y+3	; 0x03
    3522:	fc 01       	movw	r30, r24
    3524:	81 81       	ldd	r24, Z+1	; 0x01
    3526:	92 81       	ldd	r25, Z+2	; 0x02
    3528:	fc 01       	movw	r30, r24
    352a:	22 81       	ldd	r18, Z+2	; 0x02
    352c:	33 81       	ldd	r19, Z+3	; 0x03
    352e:	8a 81       	ldd	r24, Y+2	; 0x02
    3530:	9b 81       	ldd	r25, Y+3	; 0x03
    3532:	fc 01       	movw	r30, r24
    3534:	32 83       	std	Z+2, r19	; 0x02
    3536:	21 83       	std	Z+1, r18	; 0x01
    3538:	8a 81       	ldd	r24, Y+2	; 0x02
    353a:	9b 81       	ldd	r25, Y+3	; 0x03
    353c:	fc 01       	movw	r30, r24
    353e:	81 81       	ldd	r24, Z+1	; 0x01
    3540:	92 81       	ldd	r25, Z+2	; 0x02
    3542:	fc 01       	movw	r30, r24
    3544:	86 81       	ldd	r24, Z+6	; 0x06
    3546:	97 81       	ldd	r25, Z+7	; 0x07
    3548:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <pxCurrentTCB+0x1>
    354c:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <pxCurrentTCB>
    3550:	89 81       	ldd	r24, Y+1	; 0x01
    3552:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    3556:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    355a:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    355e:	fc 01       	movw	r30, r24
    3560:	85 a1       	ldd	r24, Z+37	; 0x25
    3562:	96 a1       	ldd	r25, Z+38	; 0x26
    3564:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <switch_in>
    3568:	00 00       	nop
    356a:	0f 90       	pop	r0
    356c:	0f 90       	pop	r0
    356e:	0f 90       	pop	r0
    3570:	df 91       	pop	r29
    3572:	cf 91       	pop	r28
    3574:	08 95       	ret

00003576 <vTaskPlaceOnEventList>:
    3576:	cf 93       	push	r28
    3578:	df 93       	push	r29
    357a:	00 d0       	rcall	.+0      	; 0x357c <vTaskPlaceOnEventList+0x6>
    357c:	00 d0       	rcall	.+0      	; 0x357e <vTaskPlaceOnEventList+0x8>
    357e:	cd b7       	in	r28, 0x3d	; 61
    3580:	de b7       	in	r29, 0x3e	; 62
    3582:	9a 83       	std	Y+2, r25	; 0x02
    3584:	89 83       	std	Y+1, r24	; 0x01
    3586:	7c 83       	std	Y+4, r23	; 0x04
    3588:	6b 83       	std	Y+3, r22	; 0x03
    358a:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    358e:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3592:	9c 01       	movw	r18, r24
    3594:	24 5f       	subi	r18, 0xF4	; 244
    3596:	3f 4f       	sbci	r19, 0xFF	; 255
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	9a 81       	ldd	r25, Y+2	; 0x02
    359c:	b9 01       	movw	r22, r18
    359e:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <vListInsert>
    35a2:	8b 81       	ldd	r24, Y+3	; 0x03
    35a4:	9c 81       	ldd	r25, Y+4	; 0x04
    35a6:	61 e0       	ldi	r22, 0x01	; 1
    35a8:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <prvAddCurrentTaskToDelayedList>
    35ac:	00 00       	nop
    35ae:	0f 90       	pop	r0
    35b0:	0f 90       	pop	r0
    35b2:	0f 90       	pop	r0
    35b4:	0f 90       	pop	r0
    35b6:	df 91       	pop	r29
    35b8:	cf 91       	pop	r28
    35ba:	08 95       	ret

000035bc <xTaskRemoveFromEventList>:
    35bc:	cf 93       	push	r28
    35be:	df 93       	push	r29
    35c0:	00 d0       	rcall	.+0      	; 0x35c2 <xTaskRemoveFromEventList+0x6>
    35c2:	00 d0       	rcall	.+0      	; 0x35c4 <xTaskRemoveFromEventList+0x8>
    35c4:	1f 92       	push	r1
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
    35ca:	9d 83       	std	Y+5, r25	; 0x05
    35cc:	8c 83       	std	Y+4, r24	; 0x04
    35ce:	8c 81       	ldd	r24, Y+4	; 0x04
    35d0:	9d 81       	ldd	r25, Y+5	; 0x05
    35d2:	fc 01       	movw	r30, r24
    35d4:	85 81       	ldd	r24, Z+5	; 0x05
    35d6:	96 81       	ldd	r25, Z+6	; 0x06
    35d8:	fc 01       	movw	r30, r24
    35da:	86 81       	ldd	r24, Z+6	; 0x06
    35dc:	97 81       	ldd	r25, Z+7	; 0x07
    35de:	9b 83       	std	Y+3, r25	; 0x03
    35e0:	8a 83       	std	Y+2, r24	; 0x02
    35e2:	8a 81       	ldd	r24, Y+2	; 0x02
    35e4:	9b 81       	ldd	r25, Y+3	; 0x03
    35e6:	0c 96       	adiw	r24, 0x0c	; 12
    35e8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <uxListRemove>
    35ec:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxSchedulerSuspended>
    35f0:	88 23       	and	r24, r24
    35f2:	69 f5       	brne	.+90     	; 0x364e <xTaskRemoveFromEventList+0x92>
    35f4:	8a 81       	ldd	r24, Y+2	; 0x02
    35f6:	9b 81       	ldd	r25, Y+3	; 0x03
    35f8:	02 96       	adiw	r24, 0x02	; 2
    35fa:	0e 94 4c 0c 	call	0x1898	; 0x1898 <uxListRemove>
    35fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3600:	9b 81       	ldd	r25, Y+3	; 0x03
    3602:	fc 01       	movw	r30, r24
    3604:	96 89       	ldd	r25, Z+22	; 0x16
    3606:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    360a:	89 17       	cp	r24, r25
    360c:	30 f4       	brcc	.+12     	; 0x361a <xTaskRemoveFromEventList+0x5e>
    360e:	8a 81       	ldd	r24, Y+2	; 0x02
    3610:	9b 81       	ldd	r25, Y+3	; 0x03
    3612:	fc 01       	movw	r30, r24
    3614:	86 89       	ldd	r24, Z+22	; 0x16
    3616:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    361a:	8a 81       	ldd	r24, Y+2	; 0x02
    361c:	9b 81       	ldd	r25, Y+3	; 0x03
    361e:	ac 01       	movw	r20, r24
    3620:	4e 5f       	subi	r20, 0xFE	; 254
    3622:	5f 4f       	sbci	r21, 0xFF	; 255
    3624:	8a 81       	ldd	r24, Y+2	; 0x02
    3626:	9b 81       	ldd	r25, Y+3	; 0x03
    3628:	fc 01       	movw	r30, r24
    362a:	86 89       	ldd	r24, Z+22	; 0x16
    362c:	28 2f       	mov	r18, r24
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	c9 01       	movw	r24, r18
    3632:	88 0f       	add	r24, r24
    3634:	99 1f       	adc	r25, r25
    3636:	88 0f       	add	r24, r24
    3638:	99 1f       	adc	r25, r25
    363a:	88 0f       	add	r24, r24
    363c:	99 1f       	adc	r25, r25
    363e:	82 0f       	add	r24, r18
    3640:	93 1f       	adc	r25, r19
    3642:	8f 5a       	subi	r24, 0xAF	; 175
    3644:	98 4f       	sbci	r25, 0xF8	; 248
    3646:	ba 01       	movw	r22, r20
    3648:	0e 94 85 0b 	call	0x170a	; 0x170a <vListInsertEnd>
    364c:	08 c0       	rjmp	.+16     	; 0x365e <xTaskRemoveFromEventList+0xa2>
    364e:	8a 81       	ldd	r24, Y+2	; 0x02
    3650:	9b 81       	ldd	r25, Y+3	; 0x03
    3652:	0c 96       	adiw	r24, 0x0c	; 12
    3654:	bc 01       	movw	r22, r24
    3656:	8b e8       	ldi	r24, 0x8B	; 139
    3658:	97 e0       	ldi	r25, 0x07	; 7
    365a:	0e 94 85 0b 	call	0x170a	; 0x170a <vListInsertEnd>
    365e:	8a 81       	ldd	r24, Y+2	; 0x02
    3660:	9b 81       	ldd	r25, Y+3	; 0x03
    3662:	fc 01       	movw	r30, r24
    3664:	26 89       	ldd	r18, Z+22	; 0x16
    3666:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    366a:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    366e:	fc 01       	movw	r30, r24
    3670:	86 89       	ldd	r24, Z+22	; 0x16
    3672:	82 17       	cp	r24, r18
    3674:	30 f4       	brcc	.+12     	; 0x3682 <xTaskRemoveFromEventList+0xc6>
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	89 83       	std	Y+1, r24	; 0x01
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xYieldPending>
    3680:	01 c0       	rjmp	.+2      	; 0x3684 <xTaskRemoveFromEventList+0xc8>
    3682:	19 82       	std	Y+1, r1	; 0x01
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	0f 90       	pop	r0
    3690:	df 91       	pop	r29
    3692:	cf 91       	pop	r28
    3694:	08 95       	ret

00003696 <vTaskSetTimeOutState>:
    3696:	cf 93       	push	r28
    3698:	df 93       	push	r29
    369a:	00 d0       	rcall	.+0      	; 0x369c <vTaskSetTimeOutState+0x6>
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	9a 83       	std	Y+2, r25	; 0x02
    36a2:	89 83       	std	Y+1, r24	; 0x01
    36a4:	20 91 a5 07 	lds	r18, 0x07A5	; 0x8007a5 <xNumOfOverflows>
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	9a 81       	ldd	r25, Y+2	; 0x02
    36ac:	fc 01       	movw	r30, r24
    36ae:	20 83       	st	Z, r18
    36b0:	20 91 9f 07 	lds	r18, 0x079F	; 0x80079f <xTickCount>
    36b4:	30 91 a0 07 	lds	r19, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	9a 81       	ldd	r25, Y+2	; 0x02
    36bc:	fc 01       	movw	r30, r24
    36be:	32 83       	std	Z+2, r19	; 0x02
    36c0:	21 83       	std	Z+1, r18	; 0x01
    36c2:	00 00       	nop
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	df 91       	pop	r29
    36ca:	cf 91       	pop	r28
    36cc:	08 95       	ret

000036ce <xTaskCheckForTimeOut>:
    36ce:	cf 93       	push	r28
    36d0:	df 93       	push	r29
    36d2:	cd b7       	in	r28, 0x3d	; 61
    36d4:	de b7       	in	r29, 0x3e	; 62
    36d6:	27 97       	sbiw	r28, 0x07	; 7
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	f8 94       	cli
    36dc:	de bf       	out	0x3e, r29	; 62
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	cd bf       	out	0x3d, r28	; 61
    36e2:	9d 83       	std	Y+5, r25	; 0x05
    36e4:	8c 83       	std	Y+4, r24	; 0x04
    36e6:	7f 83       	std	Y+7, r23	; 0x07
    36e8:	6e 83       	std	Y+6, r22	; 0x06
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	f8 94       	cli
    36ee:	0f 92       	push	r0
    36f0:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <xTickCount>
    36f4:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    36f8:	9b 83       	std	Y+3, r25	; 0x03
    36fa:	8a 83       	std	Y+2, r24	; 0x02
    36fc:	8c 81       	ldd	r24, Y+4	; 0x04
    36fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3700:	fc 01       	movw	r30, r24
    3702:	90 81       	ld	r25, Z
    3704:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <xNumOfOverflows>
    3708:	98 17       	cp	r25, r24
    370a:	69 f0       	breq	.+26     	; 0x3726 <xTaskCheckForTimeOut+0x58>
    370c:	8c 81       	ldd	r24, Y+4	; 0x04
    370e:	9d 81       	ldd	r25, Y+5	; 0x05
    3710:	fc 01       	movw	r30, r24
    3712:	21 81       	ldd	r18, Z+1	; 0x01
    3714:	32 81       	ldd	r19, Z+2	; 0x02
    3716:	8a 81       	ldd	r24, Y+2	; 0x02
    3718:	9b 81       	ldd	r25, Y+3	; 0x03
    371a:	82 17       	cp	r24, r18
    371c:	93 07       	cpc	r25, r19
    371e:	18 f0       	brcs	.+6      	; 0x3726 <xTaskCheckForTimeOut+0x58>
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	89 83       	std	Y+1, r24	; 0x01
    3724:	30 c0       	rjmp	.+96     	; 0x3786 <xTaskCheckForTimeOut+0xb8>
    3726:	8c 81       	ldd	r24, Y+4	; 0x04
    3728:	9d 81       	ldd	r25, Y+5	; 0x05
    372a:	fc 01       	movw	r30, r24
    372c:	81 81       	ldd	r24, Z+1	; 0x01
    372e:	92 81       	ldd	r25, Z+2	; 0x02
    3730:	2a 81       	ldd	r18, Y+2	; 0x02
    3732:	3b 81       	ldd	r19, Y+3	; 0x03
    3734:	28 1b       	sub	r18, r24
    3736:	39 0b       	sbc	r19, r25
    3738:	8e 81       	ldd	r24, Y+6	; 0x06
    373a:	9f 81       	ldd	r25, Y+7	; 0x07
    373c:	fc 01       	movw	r30, r24
    373e:	80 81       	ld	r24, Z
    3740:	91 81       	ldd	r25, Z+1	; 0x01
    3742:	28 17       	cp	r18, r24
    3744:	39 07       	cpc	r19, r25
    3746:	e8 f4       	brcc	.+58     	; 0x3782 <xTaskCheckForTimeOut+0xb4>
    3748:	8e 81       	ldd	r24, Y+6	; 0x06
    374a:	9f 81       	ldd	r25, Y+7	; 0x07
    374c:	fc 01       	movw	r30, r24
    374e:	20 81       	ld	r18, Z
    3750:	31 81       	ldd	r19, Z+1	; 0x01
    3752:	8c 81       	ldd	r24, Y+4	; 0x04
    3754:	9d 81       	ldd	r25, Y+5	; 0x05
    3756:	fc 01       	movw	r30, r24
    3758:	41 81       	ldd	r20, Z+1	; 0x01
    375a:	52 81       	ldd	r21, Z+2	; 0x02
    375c:	8a 81       	ldd	r24, Y+2	; 0x02
    375e:	9b 81       	ldd	r25, Y+3	; 0x03
    3760:	ba 01       	movw	r22, r20
    3762:	68 1b       	sub	r22, r24
    3764:	79 0b       	sbc	r23, r25
    3766:	cb 01       	movw	r24, r22
    3768:	28 0f       	add	r18, r24
    376a:	39 1f       	adc	r19, r25
    376c:	8e 81       	ldd	r24, Y+6	; 0x06
    376e:	9f 81       	ldd	r25, Y+7	; 0x07
    3770:	fc 01       	movw	r30, r24
    3772:	31 83       	std	Z+1, r19	; 0x01
    3774:	20 83       	st	Z, r18
    3776:	8c 81       	ldd	r24, Y+4	; 0x04
    3778:	9d 81       	ldd	r25, Y+5	; 0x05
    377a:	0e 94 4b 1b 	call	0x3696	; 0x3696 <vTaskSetTimeOutState>
    377e:	19 82       	std	Y+1, r1	; 0x01
    3780:	02 c0       	rjmp	.+4      	; 0x3786 <xTaskCheckForTimeOut+0xb8>
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	89 83       	std	Y+1, r24	; 0x01
    3786:	0f 90       	pop	r0
    3788:	0f be       	out	0x3f, r0	; 63
    378a:	89 81       	ldd	r24, Y+1	; 0x01
    378c:	27 96       	adiw	r28, 0x07	; 7
    378e:	0f b6       	in	r0, 0x3f	; 63
    3790:	f8 94       	cli
    3792:	de bf       	out	0x3e, r29	; 62
    3794:	0f be       	out	0x3f, r0	; 63
    3796:	cd bf       	out	0x3d, r28	; 61
    3798:	df 91       	pop	r29
    379a:	cf 91       	pop	r28
    379c:	08 95       	ret

0000379e <vTaskMissedYield>:
    379e:	cf 93       	push	r28
    37a0:	df 93       	push	r29
    37a2:	cd b7       	in	r28, 0x3d	; 61
    37a4:	de b7       	in	r29, 0x3e	; 62
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <xYieldPending>
    37ac:	00 00       	nop
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	08 95       	ret

000037b4 <prvIdleTask>:
    37b4:	cf 93       	push	r28
    37b6:	df 93       	push	r29
    37b8:	00 d0       	rcall	.+0      	; 0x37ba <prvIdleTask+0x6>
    37ba:	cd b7       	in	r28, 0x3d	; 61
    37bc:	de b7       	in	r29, 0x3e	; 62
    37be:	9a 83       	std	Y+2, r25	; 0x02
    37c0:	89 83       	std	Y+1, r24	; 0x01
    37c2:	0e 94 2a 1c 	call	0x3854	; 0x3854 <prvCheckTasksWaitingTermination>
    37c6:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <pxReadyTasksLists>
    37ca:	82 30       	cpi	r24, 0x02	; 2
    37cc:	10 f0       	brcs	.+4      	; 0x37d2 <prvIdleTask+0x1e>
    37ce:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vPortYield>
    37d2:	0e 94 c7 08 	call	0x118e	; 0x118e <vApplicationIdleHook>
    37d6:	f5 cf       	rjmp	.-22     	; 0x37c2 <prvIdleTask+0xe>

000037d8 <prvInitialiseTaskLists>:
    37d8:	cf 93       	push	r28
    37da:	df 93       	push	r29
    37dc:	1f 92       	push	r1
    37de:	cd b7       	in	r28, 0x3d	; 61
    37e0:	de b7       	in	r29, 0x3e	; 62
    37e2:	19 82       	std	Y+1, r1	; 0x01
    37e4:	13 c0       	rjmp	.+38     	; 0x380c <prvInitialiseTaskLists+0x34>
    37e6:	89 81       	ldd	r24, Y+1	; 0x01
    37e8:	28 2f       	mov	r18, r24
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	c9 01       	movw	r24, r18
    37ee:	88 0f       	add	r24, r24
    37f0:	99 1f       	adc	r25, r25
    37f2:	88 0f       	add	r24, r24
    37f4:	99 1f       	adc	r25, r25
    37f6:	88 0f       	add	r24, r24
    37f8:	99 1f       	adc	r25, r25
    37fa:	82 0f       	add	r24, r18
    37fc:	93 1f       	adc	r25, r19
    37fe:	8f 5a       	subi	r24, 0xAF	; 175
    3800:	98 4f       	sbci	r25, 0xF8	; 248
    3802:	0e 94 3d 0b 	call	0x167a	; 0x167a <vListInitialise>
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	8f 5f       	subi	r24, 0xFF	; 255
    380a:	89 83       	std	Y+1, r24	; 0x01
    380c:	89 81       	ldd	r24, Y+1	; 0x01
    380e:	84 30       	cpi	r24, 0x04	; 4
    3810:	50 f3       	brcs	.-44     	; 0x37e6 <prvInitialiseTaskLists+0xe>
    3812:	85 e7       	ldi	r24, 0x75	; 117
    3814:	97 e0       	ldi	r25, 0x07	; 7
    3816:	0e 94 3d 0b 	call	0x167a	; 0x167a <vListInitialise>
    381a:	8e e7       	ldi	r24, 0x7E	; 126
    381c:	97 e0       	ldi	r25, 0x07	; 7
    381e:	0e 94 3d 0b 	call	0x167a	; 0x167a <vListInitialise>
    3822:	8b e8       	ldi	r24, 0x8B	; 139
    3824:	97 e0       	ldi	r25, 0x07	; 7
    3826:	0e 94 3d 0b 	call	0x167a	; 0x167a <vListInitialise>
    382a:	84 e9       	ldi	r24, 0x94	; 148
    382c:	97 e0       	ldi	r25, 0x07	; 7
    382e:	0e 94 3d 0b 	call	0x167a	; 0x167a <vListInitialise>
    3832:	85 e7       	ldi	r24, 0x75	; 117
    3834:	97 e0       	ldi	r25, 0x07	; 7
    3836:	90 93 88 07 	sts	0x0788, r25	; 0x800788 <pxDelayedTaskList+0x1>
    383a:	80 93 87 07 	sts	0x0787, r24	; 0x800787 <pxDelayedTaskList>
    383e:	8e e7       	ldi	r24, 0x7E	; 126
    3840:	97 e0       	ldi	r25, 0x07	; 7
    3842:	90 93 8a 07 	sts	0x078A, r25	; 0x80078a <pxOverflowDelayedTaskList+0x1>
    3846:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <pxOverflowDelayedTaskList>
    384a:	00 00       	nop
    384c:	0f 90       	pop	r0
    384e:	df 91       	pop	r29
    3850:	cf 91       	pop	r28
    3852:	08 95       	ret

00003854 <prvCheckTasksWaitingTermination>:
    3854:	cf 93       	push	r28
    3856:	df 93       	push	r29
    3858:	00 d0       	rcall	.+0      	; 0x385a <prvCheckTasksWaitingTermination+0x6>
    385a:	1f 92       	push	r1
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62
    3860:	2f c0       	rjmp	.+94     	; 0x38c0 <prvCheckTasksWaitingTermination+0x6c>
    3862:	0e 94 a4 18 	call	0x3148	; 0x3148 <vTaskSuspendAll>
    3866:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <xTasksWaitingTermination>
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	99 23       	and	r25, r25
    386e:	09 f0       	breq	.+2      	; 0x3872 <prvCheckTasksWaitingTermination+0x1e>
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	89 83       	std	Y+1, r24	; 0x01
    3874:	0e 94 b1 18 	call	0x3162	; 0x3162 <xTaskResumeAll>
    3878:	89 81       	ldd	r24, Y+1	; 0x01
    387a:	88 23       	and	r24, r24
    387c:	09 f5       	brne	.+66     	; 0x38c0 <prvCheckTasksWaitingTermination+0x6c>
    387e:	0f b6       	in	r0, 0x3f	; 63
    3880:	f8 94       	cli
    3882:	0f 92       	push	r0
    3884:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <xTasksWaitingTermination+0x5>
    3888:	90 91 9a 07 	lds	r25, 0x079A	; 0x80079a <xTasksWaitingTermination+0x6>
    388c:	fc 01       	movw	r30, r24
    388e:	86 81       	ldd	r24, Z+6	; 0x06
    3890:	97 81       	ldd	r25, Z+7	; 0x07
    3892:	9b 83       	std	Y+3, r25	; 0x03
    3894:	8a 83       	std	Y+2, r24	; 0x02
    3896:	8a 81       	ldd	r24, Y+2	; 0x02
    3898:	9b 81       	ldd	r25, Y+3	; 0x03
    389a:	02 96       	adiw	r24, 0x02	; 2
    389c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <uxListRemove>
    38a0:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <uxCurrentNumberOfTasks>
    38a4:	81 50       	subi	r24, 0x01	; 1
    38a6:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <uxCurrentNumberOfTasks>
    38aa:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <uxDeletedTasksWaitingCleanUp>
    38ae:	81 50       	subi	r24, 0x01	; 1
    38b0:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <uxDeletedTasksWaitingCleanUp>
    38b4:	0f 90       	pop	r0
    38b6:	0f be       	out	0x3f, r0	; 63
    38b8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ba:	9b 81       	ldd	r25, Y+3	; 0x03
    38bc:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <prvDeleteTCB>
    38c0:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <uxDeletedTasksWaitingCleanUp>
    38c4:	88 23       	and	r24, r24
    38c6:	69 f6       	brne	.-102    	; 0x3862 <prvCheckTasksWaitingTermination+0xe>
    38c8:	00 00       	nop
    38ca:	0f 90       	pop	r0
    38cc:	0f 90       	pop	r0
    38ce:	0f 90       	pop	r0
    38d0:	df 91       	pop	r29
    38d2:	cf 91       	pop	r28
    38d4:	08 95       	ret

000038d6 <prvDeleteTCB>:
    38d6:	cf 93       	push	r28
    38d8:	df 93       	push	r29
    38da:	00 d0       	rcall	.+0      	; 0x38dc <prvDeleteTCB+0x6>
    38dc:	cd b7       	in	r28, 0x3d	; 61
    38de:	de b7       	in	r29, 0x3e	; 62
    38e0:	9a 83       	std	Y+2, r25	; 0x02
    38e2:	89 83       	std	Y+1, r24	; 0x01
    38e4:	89 81       	ldd	r24, Y+1	; 0x01
    38e6:	9a 81       	ldd	r25, Y+2	; 0x02
    38e8:	fc 01       	movw	r30, r24
    38ea:	87 89       	ldd	r24, Z+23	; 0x17
    38ec:	90 8d       	ldd	r25, Z+24	; 0x18
    38ee:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <vPortFree>
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	9a 81       	ldd	r25, Y+2	; 0x02
    38f6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <vPortFree>
    38fa:	00 00       	nop
    38fc:	0f 90       	pop	r0
    38fe:	0f 90       	pop	r0
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	08 95       	ret

00003906 <prvResetNextTaskUnblockTime>:
    3906:	cf 93       	push	r28
    3908:	df 93       	push	r29
    390a:	00 d0       	rcall	.+0      	; 0x390c <prvResetNextTaskUnblockTime+0x6>
    390c:	cd b7       	in	r28, 0x3d	; 61
    390e:	de b7       	in	r29, 0x3e	; 62
    3910:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    3914:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    3918:	fc 01       	movw	r30, r24
    391a:	80 81       	ld	r24, Z
    391c:	88 23       	and	r24, r24
    391e:	39 f4       	brne	.+14     	; 0x392e <prvResetNextTaskUnblockTime+0x28>
    3920:	8f ef       	ldi	r24, 0xFF	; 255
    3922:	9f ef       	ldi	r25, 0xFF	; 255
    3924:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3928:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>
    392c:	15 c0       	rjmp	.+42     	; 0x3958 <prvResetNextTaskUnblockTime+0x52>
    392e:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    3932:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    3936:	fc 01       	movw	r30, r24
    3938:	85 81       	ldd	r24, Z+5	; 0x05
    393a:	96 81       	ldd	r25, Z+6	; 0x06
    393c:	fc 01       	movw	r30, r24
    393e:	86 81       	ldd	r24, Z+6	; 0x06
    3940:	97 81       	ldd	r25, Z+7	; 0x07
    3942:	9a 83       	std	Y+2, r25	; 0x02
    3944:	89 83       	std	Y+1, r24	; 0x01
    3946:	89 81       	ldd	r24, Y+1	; 0x01
    3948:	9a 81       	ldd	r25, Y+2	; 0x02
    394a:	fc 01       	movw	r30, r24
    394c:	82 81       	ldd	r24, Z+2	; 0x02
    394e:	93 81       	ldd	r25, Z+3	; 0x03
    3950:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3954:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>
    3958:	00 00       	nop
    395a:	0f 90       	pop	r0
    395c:	0f 90       	pop	r0
    395e:	df 91       	pop	r29
    3960:	cf 91       	pop	r28
    3962:	08 95       	ret

00003964 <xTaskPriorityDisinherit>:
    3964:	cf 93       	push	r28
    3966:	df 93       	push	r29
    3968:	00 d0       	rcall	.+0      	; 0x396a <xTaskPriorityDisinherit+0x6>
    396a:	00 d0       	rcall	.+0      	; 0x396c <xTaskPriorityDisinherit+0x8>
    396c:	1f 92       	push	r1
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	9d 83       	std	Y+5, r25	; 0x05
    3974:	8c 83       	std	Y+4, r24	; 0x04
    3976:	8c 81       	ldd	r24, Y+4	; 0x04
    3978:	9d 81       	ldd	r25, Y+5	; 0x05
    397a:	9b 83       	std	Y+3, r25	; 0x03
    397c:	8a 83       	std	Y+2, r24	; 0x02
    397e:	19 82       	std	Y+1, r1	; 0x01
    3980:	8c 81       	ldd	r24, Y+4	; 0x04
    3982:	9d 81       	ldd	r25, Y+5	; 0x05
    3984:	89 2b       	or	r24, r25
    3986:	09 f4       	brne	.+2      	; 0x398a <xTaskPriorityDisinherit+0x26>
    3988:	61 c0       	rjmp	.+194    	; 0x3a4c <xTaskPriorityDisinherit+0xe8>
    398a:	8a 81       	ldd	r24, Y+2	; 0x02
    398c:	9b 81       	ldd	r25, Y+3	; 0x03
    398e:	fc 01       	movw	r30, r24
    3990:	84 a1       	ldd	r24, Z+36	; 0x24
    3992:	2f ef       	ldi	r18, 0xFF	; 255
    3994:	28 0f       	add	r18, r24
    3996:	8a 81       	ldd	r24, Y+2	; 0x02
    3998:	9b 81       	ldd	r25, Y+3	; 0x03
    399a:	fc 01       	movw	r30, r24
    399c:	24 a3       	std	Z+36, r18	; 0x24
    399e:	8a 81       	ldd	r24, Y+2	; 0x02
    39a0:	9b 81       	ldd	r25, Y+3	; 0x03
    39a2:	fc 01       	movw	r30, r24
    39a4:	26 89       	ldd	r18, Z+22	; 0x16
    39a6:	8a 81       	ldd	r24, Y+2	; 0x02
    39a8:	9b 81       	ldd	r25, Y+3	; 0x03
    39aa:	fc 01       	movw	r30, r24
    39ac:	83 a1       	ldd	r24, Z+35	; 0x23
    39ae:	28 17       	cp	r18, r24
    39b0:	09 f4       	brne	.+2      	; 0x39b4 <xTaskPriorityDisinherit+0x50>
    39b2:	4c c0       	rjmp	.+152    	; 0x3a4c <xTaskPriorityDisinherit+0xe8>
    39b4:	8a 81       	ldd	r24, Y+2	; 0x02
    39b6:	9b 81       	ldd	r25, Y+3	; 0x03
    39b8:	fc 01       	movw	r30, r24
    39ba:	84 a1       	ldd	r24, Z+36	; 0x24
    39bc:	88 23       	and	r24, r24
    39be:	09 f0       	breq	.+2      	; 0x39c2 <xTaskPriorityDisinherit+0x5e>
    39c0:	45 c0       	rjmp	.+138    	; 0x3a4c <xTaskPriorityDisinherit+0xe8>
    39c2:	8a 81       	ldd	r24, Y+2	; 0x02
    39c4:	9b 81       	ldd	r25, Y+3	; 0x03
    39c6:	02 96       	adiw	r24, 0x02	; 2
    39c8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <uxListRemove>
    39cc:	8a 81       	ldd	r24, Y+2	; 0x02
    39ce:	9b 81       	ldd	r25, Y+3	; 0x03
    39d0:	fc 01       	movw	r30, r24
    39d2:	23 a1       	ldd	r18, Z+35	; 0x23
    39d4:	8a 81       	ldd	r24, Y+2	; 0x02
    39d6:	9b 81       	ldd	r25, Y+3	; 0x03
    39d8:	fc 01       	movw	r30, r24
    39da:	26 8b       	std	Z+22, r18	; 0x16
    39dc:	8a 81       	ldd	r24, Y+2	; 0x02
    39de:	9b 81       	ldd	r25, Y+3	; 0x03
    39e0:	fc 01       	movw	r30, r24
    39e2:	86 89       	ldd	r24, Z+22	; 0x16
    39e4:	88 2f       	mov	r24, r24
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	24 e0       	ldi	r18, 0x04	; 4
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	28 1b       	sub	r18, r24
    39ee:	39 0b       	sbc	r19, r25
    39f0:	8a 81       	ldd	r24, Y+2	; 0x02
    39f2:	9b 81       	ldd	r25, Y+3	; 0x03
    39f4:	fc 01       	movw	r30, r24
    39f6:	35 87       	std	Z+13, r19	; 0x0d
    39f8:	24 87       	std	Z+12, r18	; 0x0c
    39fa:	8a 81       	ldd	r24, Y+2	; 0x02
    39fc:	9b 81       	ldd	r25, Y+3	; 0x03
    39fe:	fc 01       	movw	r30, r24
    3a00:	96 89       	ldd	r25, Z+22	; 0x16
    3a02:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTopReadyPriority>
    3a06:	89 17       	cp	r24, r25
    3a08:	30 f4       	brcc	.+12     	; 0x3a16 <xTaskPriorityDisinherit+0xb2>
    3a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a0e:	fc 01       	movw	r30, r24
    3a10:	86 89       	ldd	r24, Z+22	; 0x16
    3a12:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTopReadyPriority>
    3a16:	8a 81       	ldd	r24, Y+2	; 0x02
    3a18:	9b 81       	ldd	r25, Y+3	; 0x03
    3a1a:	ac 01       	movw	r20, r24
    3a1c:	4e 5f       	subi	r20, 0xFE	; 254
    3a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a20:	8a 81       	ldd	r24, Y+2	; 0x02
    3a22:	9b 81       	ldd	r25, Y+3	; 0x03
    3a24:	fc 01       	movw	r30, r24
    3a26:	86 89       	ldd	r24, Z+22	; 0x16
    3a28:	28 2f       	mov	r18, r24
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	c9 01       	movw	r24, r18
    3a2e:	88 0f       	add	r24, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	88 0f       	add	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	88 0f       	add	r24, r24
    3a38:	99 1f       	adc	r25, r25
    3a3a:	82 0f       	add	r24, r18
    3a3c:	93 1f       	adc	r25, r19
    3a3e:	8f 5a       	subi	r24, 0xAF	; 175
    3a40:	98 4f       	sbci	r25, 0xF8	; 248
    3a42:	ba 01       	movw	r22, r20
    3a44:	0e 94 85 0b 	call	0x170a	; 0x170a <vListInsertEnd>
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	89 83       	std	Y+1, r24	; 0x01
    3a4c:	89 81       	ldd	r24, Y+1	; 0x01
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	0f 90       	pop	r0
    3a54:	0f 90       	pop	r0
    3a56:	0f 90       	pop	r0
    3a58:	df 91       	pop	r29
    3a5a:	cf 91       	pop	r28
    3a5c:	08 95       	ret

00003a5e <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3a5e:	cf 93       	push	r28
    3a60:	df 93       	push	r29
    3a62:	cd b7       	in	r28, 0x3d	; 61
    3a64:	de b7       	in	r29, 0x3e	; 62
    3a66:	27 97       	sbiw	r28, 0x07	; 7
    3a68:	0f b6       	in	r0, 0x3f	; 63
    3a6a:	f8 94       	cli
    3a6c:	de bf       	out	0x3e, r29	; 62
    3a6e:	0f be       	out	0x3f, r0	; 63
    3a70:	cd bf       	out	0x3d, r28	; 61
    3a72:	9e 83       	std	Y+6, r25	; 0x06
    3a74:	8d 83       	std	Y+5, r24	; 0x05
    3a76:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3a78:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <xTickCount>
    3a7c:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    3a80:	9a 83       	std	Y+2, r25	; 0x02
    3a82:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3a84:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    3a88:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3a8c:	02 96       	adiw	r24, 0x02	; 2
    3a8e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    3a92:	29 81       	ldd	r18, Y+1	; 0x01
    3a94:	3a 81       	ldd	r19, Y+2	; 0x02
    3a96:	8d 81       	ldd	r24, Y+5	; 0x05
    3a98:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9a:	82 0f       	add	r24, r18
    3a9c:	93 1f       	adc	r25, r19
    3a9e:	9c 83       	std	Y+4, r25	; 0x04
    3aa0:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3aa2:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    3aa6:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3aaa:	2b 81       	ldd	r18, Y+3	; 0x03
    3aac:	3c 81       	ldd	r19, Y+4	; 0x04
    3aae:	fc 01       	movw	r30, r24
    3ab0:	33 83       	std	Z+3, r19	; 0x03
    3ab2:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    3ab4:	2b 81       	ldd	r18, Y+3	; 0x03
    3ab6:	3c 81       	ldd	r19, Y+4	; 0x04
    3ab8:	89 81       	ldd	r24, Y+1	; 0x01
    3aba:	9a 81       	ldd	r25, Y+2	; 0x02
    3abc:	28 17       	cp	r18, r24
    3abe:	39 07       	cpc	r19, r25
    3ac0:	78 f4       	brcc	.+30     	; 0x3ae0 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3ac2:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    3ac6:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3aca:	9c 01       	movw	r18, r24
    3acc:	2e 5f       	subi	r18, 0xFE	; 254
    3ace:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad0:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <pxOverflowDelayedTaskList>
    3ad4:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <pxOverflowDelayedTaskList+0x1>
    3ad8:	b9 01       	movw	r22, r18
    3ada:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3ade:	1d c0       	rjmp	.+58     	; 0x3b1a <prvAddCurrentTaskToDelayedList+0xbc>
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3ae0:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
    3ae4:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
    3ae8:	9c 01       	movw	r18, r24
    3aea:	2e 5f       	subi	r18, 0xFE	; 254
    3aec:	3f 4f       	sbci	r19, 0xFF	; 255
    3aee:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <pxDelayedTaskList>
    3af2:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <pxDelayedTaskList+0x1>
    3af6:	b9 01       	movw	r22, r18
    3af8:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    3afc:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <xNextTaskUnblockTime>
    3b00:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3b04:	2b 81       	ldd	r18, Y+3	; 0x03
    3b06:	3c 81       	ldd	r19, Y+4	; 0x04
    3b08:	28 17       	cp	r18, r24
    3b0a:	39 07       	cpc	r19, r25
    3b0c:	30 f4       	brcc	.+12     	; 0x3b1a <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    3b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b10:	9c 81       	ldd	r25, Y+4	; 0x04
    3b12:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <xNextTaskUnblockTime+0x1>
    3b16:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3b1a:	00 00       	nop
    3b1c:	27 96       	adiw	r28, 0x07	; 7
    3b1e:	0f b6       	in	r0, 0x3f	; 63
    3b20:	f8 94       	cli
    3b22:	de bf       	out	0x3e, r29	; 62
    3b24:	0f be       	out	0x3f, r0	; 63
    3b26:	cd bf       	out	0x3d, r28	; 61
    3b28:	df 91       	pop	r29
    3b2a:	cf 91       	pop	r28
    3b2c:	08 95       	ret

00003b2e <__subsf3>:
    3b2e:	50 58       	subi	r21, 0x80	; 128

00003b30 <__addsf3>:
    3b30:	bb 27       	eor	r27, r27
    3b32:	aa 27       	eor	r26, r26
    3b34:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <__addsf3x>
    3b38:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__fp_round>
    3b3c:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <__fp_pscA>
    3b40:	38 f0       	brcs	.+14     	; 0x3b50 <__addsf3+0x20>
    3b42:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <__fp_pscB>
    3b46:	20 f0       	brcs	.+8      	; 0x3b50 <__addsf3+0x20>
    3b48:	39 f4       	brne	.+14     	; 0x3b58 <__addsf3+0x28>
    3b4a:	9f 3f       	cpi	r25, 0xFF	; 255
    3b4c:	19 f4       	brne	.+6      	; 0x3b54 <__addsf3+0x24>
    3b4e:	26 f4       	brtc	.+8      	; 0x3b58 <__addsf3+0x28>
    3b50:	0c 94 7d 1e 	jmp	0x3cfa	; 0x3cfa <__fp_nan>
    3b54:	0e f4       	brtc	.+2      	; 0x3b58 <__addsf3+0x28>
    3b56:	e0 95       	com	r30
    3b58:	e7 fb       	bst	r30, 7
    3b5a:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__fp_inf>

00003b5e <__addsf3x>:
    3b5e:	e9 2f       	mov	r30, r25
    3b60:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__fp_split3>
    3b64:	58 f3       	brcs	.-42     	; 0x3b3c <__addsf3+0xc>
    3b66:	ba 17       	cp	r27, r26
    3b68:	62 07       	cpc	r22, r18
    3b6a:	73 07       	cpc	r23, r19
    3b6c:	84 07       	cpc	r24, r20
    3b6e:	95 07       	cpc	r25, r21
    3b70:	20 f0       	brcs	.+8      	; 0x3b7a <__addsf3x+0x1c>
    3b72:	79 f4       	brne	.+30     	; 0x3b92 <__addsf3x+0x34>
    3b74:	a6 f5       	brtc	.+104    	; 0x3bde <__addsf3x+0x80>
    3b76:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__fp_zero>
    3b7a:	0e f4       	brtc	.+2      	; 0x3b7e <__addsf3x+0x20>
    3b7c:	e0 95       	com	r30
    3b7e:	0b 2e       	mov	r0, r27
    3b80:	ba 2f       	mov	r27, r26
    3b82:	a0 2d       	mov	r26, r0
    3b84:	0b 01       	movw	r0, r22
    3b86:	b9 01       	movw	r22, r18
    3b88:	90 01       	movw	r18, r0
    3b8a:	0c 01       	movw	r0, r24
    3b8c:	ca 01       	movw	r24, r20
    3b8e:	a0 01       	movw	r20, r0
    3b90:	11 24       	eor	r1, r1
    3b92:	ff 27       	eor	r31, r31
    3b94:	59 1b       	sub	r21, r25
    3b96:	99 f0       	breq	.+38     	; 0x3bbe <__addsf3x+0x60>
    3b98:	59 3f       	cpi	r21, 0xF9	; 249
    3b9a:	50 f4       	brcc	.+20     	; 0x3bb0 <__addsf3x+0x52>
    3b9c:	50 3e       	cpi	r21, 0xE0	; 224
    3b9e:	68 f1       	brcs	.+90     	; 0x3bfa <__addsf3x+0x9c>
    3ba0:	1a 16       	cp	r1, r26
    3ba2:	f0 40       	sbci	r31, 0x00	; 0
    3ba4:	a2 2f       	mov	r26, r18
    3ba6:	23 2f       	mov	r18, r19
    3ba8:	34 2f       	mov	r19, r20
    3baa:	44 27       	eor	r20, r20
    3bac:	58 5f       	subi	r21, 0xF8	; 248
    3bae:	f3 cf       	rjmp	.-26     	; 0x3b96 <__addsf3x+0x38>
    3bb0:	46 95       	lsr	r20
    3bb2:	37 95       	ror	r19
    3bb4:	27 95       	ror	r18
    3bb6:	a7 95       	ror	r26
    3bb8:	f0 40       	sbci	r31, 0x00	; 0
    3bba:	53 95       	inc	r21
    3bbc:	c9 f7       	brne	.-14     	; 0x3bb0 <__addsf3x+0x52>
    3bbe:	7e f4       	brtc	.+30     	; 0x3bde <__addsf3x+0x80>
    3bc0:	1f 16       	cp	r1, r31
    3bc2:	ba 0b       	sbc	r27, r26
    3bc4:	62 0b       	sbc	r22, r18
    3bc6:	73 0b       	sbc	r23, r19
    3bc8:	84 0b       	sbc	r24, r20
    3bca:	ba f0       	brmi	.+46     	; 0x3bfa <__addsf3x+0x9c>
    3bcc:	91 50       	subi	r25, 0x01	; 1
    3bce:	a1 f0       	breq	.+40     	; 0x3bf8 <__addsf3x+0x9a>
    3bd0:	ff 0f       	add	r31, r31
    3bd2:	bb 1f       	adc	r27, r27
    3bd4:	66 1f       	adc	r22, r22
    3bd6:	77 1f       	adc	r23, r23
    3bd8:	88 1f       	adc	r24, r24
    3bda:	c2 f7       	brpl	.-16     	; 0x3bcc <__addsf3x+0x6e>
    3bdc:	0e c0       	rjmp	.+28     	; 0x3bfa <__addsf3x+0x9c>
    3bde:	ba 0f       	add	r27, r26
    3be0:	62 1f       	adc	r22, r18
    3be2:	73 1f       	adc	r23, r19
    3be4:	84 1f       	adc	r24, r20
    3be6:	48 f4       	brcc	.+18     	; 0x3bfa <__addsf3x+0x9c>
    3be8:	87 95       	ror	r24
    3bea:	77 95       	ror	r23
    3bec:	67 95       	ror	r22
    3bee:	b7 95       	ror	r27
    3bf0:	f7 95       	ror	r31
    3bf2:	9e 3f       	cpi	r25, 0xFE	; 254
    3bf4:	08 f0       	brcs	.+2      	; 0x3bf8 <__addsf3x+0x9a>
    3bf6:	b0 cf       	rjmp	.-160    	; 0x3b58 <__addsf3+0x28>
    3bf8:	93 95       	inc	r25
    3bfa:	88 0f       	add	r24, r24
    3bfc:	08 f0       	brcs	.+2      	; 0x3c00 <__addsf3x+0xa2>
    3bfe:	99 27       	eor	r25, r25
    3c00:	ee 0f       	add	r30, r30
    3c02:	97 95       	ror	r25
    3c04:	87 95       	ror	r24
    3c06:	08 95       	ret

00003c08 <__fixsfsi>:
    3c08:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <__fixunssfsi>
    3c0c:	68 94       	set
    3c0e:	b1 11       	cpse	r27, r1
    3c10:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__fp_szero>
    3c14:	08 95       	ret

00003c16 <__fixunssfsi>:
    3c16:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <__fp_splitA>
    3c1a:	88 f0       	brcs	.+34     	; 0x3c3e <__fixunssfsi+0x28>
    3c1c:	9f 57       	subi	r25, 0x7F	; 127
    3c1e:	98 f0       	brcs	.+38     	; 0x3c46 <__fixunssfsi+0x30>
    3c20:	b9 2f       	mov	r27, r25
    3c22:	99 27       	eor	r25, r25
    3c24:	b7 51       	subi	r27, 0x17	; 23
    3c26:	b0 f0       	brcs	.+44     	; 0x3c54 <__fixunssfsi+0x3e>
    3c28:	e1 f0       	breq	.+56     	; 0x3c62 <__fixunssfsi+0x4c>
    3c2a:	66 0f       	add	r22, r22
    3c2c:	77 1f       	adc	r23, r23
    3c2e:	88 1f       	adc	r24, r24
    3c30:	99 1f       	adc	r25, r25
    3c32:	1a f0       	brmi	.+6      	; 0x3c3a <__fixunssfsi+0x24>
    3c34:	ba 95       	dec	r27
    3c36:	c9 f7       	brne	.-14     	; 0x3c2a <__fixunssfsi+0x14>
    3c38:	14 c0       	rjmp	.+40     	; 0x3c62 <__fixunssfsi+0x4c>
    3c3a:	b1 30       	cpi	r27, 0x01	; 1
    3c3c:	91 f0       	breq	.+36     	; 0x3c62 <__fixunssfsi+0x4c>
    3c3e:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <__fp_zero>
    3c42:	b1 e0       	ldi	r27, 0x01	; 1
    3c44:	08 95       	ret
    3c46:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__fp_zero>
    3c4a:	67 2f       	mov	r22, r23
    3c4c:	78 2f       	mov	r23, r24
    3c4e:	88 27       	eor	r24, r24
    3c50:	b8 5f       	subi	r27, 0xF8	; 248
    3c52:	39 f0       	breq	.+14     	; 0x3c62 <__fixunssfsi+0x4c>
    3c54:	b9 3f       	cpi	r27, 0xF9	; 249
    3c56:	cc f3       	brlt	.-14     	; 0x3c4a <__fixunssfsi+0x34>
    3c58:	86 95       	lsr	r24
    3c5a:	77 95       	ror	r23
    3c5c:	67 95       	ror	r22
    3c5e:	b3 95       	inc	r27
    3c60:	d9 f7       	brne	.-10     	; 0x3c58 <__fixunssfsi+0x42>
    3c62:	3e f4       	brtc	.+14     	; 0x3c72 <__fixunssfsi+0x5c>
    3c64:	90 95       	com	r25
    3c66:	80 95       	com	r24
    3c68:	70 95       	com	r23
    3c6a:	61 95       	neg	r22
    3c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c70:	9f 4f       	sbci	r25, 0xFF	; 255
    3c72:	08 95       	ret

00003c74 <__floatunsisf>:
    3c74:	e8 94       	clt
    3c76:	09 c0       	rjmp	.+18     	; 0x3c8a <__floatsisf+0x12>

00003c78 <__floatsisf>:
    3c78:	97 fb       	bst	r25, 7
    3c7a:	3e f4       	brtc	.+14     	; 0x3c8a <__floatsisf+0x12>
    3c7c:	90 95       	com	r25
    3c7e:	80 95       	com	r24
    3c80:	70 95       	com	r23
    3c82:	61 95       	neg	r22
    3c84:	7f 4f       	sbci	r23, 0xFF	; 255
    3c86:	8f 4f       	sbci	r24, 0xFF	; 255
    3c88:	9f 4f       	sbci	r25, 0xFF	; 255
    3c8a:	99 23       	and	r25, r25
    3c8c:	a9 f0       	breq	.+42     	; 0x3cb8 <__floatsisf+0x40>
    3c8e:	f9 2f       	mov	r31, r25
    3c90:	96 e9       	ldi	r25, 0x96	; 150
    3c92:	bb 27       	eor	r27, r27
    3c94:	93 95       	inc	r25
    3c96:	f6 95       	lsr	r31
    3c98:	87 95       	ror	r24
    3c9a:	77 95       	ror	r23
    3c9c:	67 95       	ror	r22
    3c9e:	b7 95       	ror	r27
    3ca0:	f1 11       	cpse	r31, r1
    3ca2:	f8 cf       	rjmp	.-16     	; 0x3c94 <__floatsisf+0x1c>
    3ca4:	fa f4       	brpl	.+62     	; 0x3ce4 <__floatsisf+0x6c>
    3ca6:	bb 0f       	add	r27, r27
    3ca8:	11 f4       	brne	.+4      	; 0x3cae <__floatsisf+0x36>
    3caa:	60 ff       	sbrs	r22, 0
    3cac:	1b c0       	rjmp	.+54     	; 0x3ce4 <__floatsisf+0x6c>
    3cae:	6f 5f       	subi	r22, 0xFF	; 255
    3cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb2:	8f 4f       	sbci	r24, 0xFF	; 255
    3cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb6:	16 c0       	rjmp	.+44     	; 0x3ce4 <__floatsisf+0x6c>
    3cb8:	88 23       	and	r24, r24
    3cba:	11 f0       	breq	.+4      	; 0x3cc0 <__floatsisf+0x48>
    3cbc:	96 e9       	ldi	r25, 0x96	; 150
    3cbe:	11 c0       	rjmp	.+34     	; 0x3ce2 <__floatsisf+0x6a>
    3cc0:	77 23       	and	r23, r23
    3cc2:	21 f0       	breq	.+8      	; 0x3ccc <__floatsisf+0x54>
    3cc4:	9e e8       	ldi	r25, 0x8E	; 142
    3cc6:	87 2f       	mov	r24, r23
    3cc8:	76 2f       	mov	r23, r22
    3cca:	05 c0       	rjmp	.+10     	; 0x3cd6 <__floatsisf+0x5e>
    3ccc:	66 23       	and	r22, r22
    3cce:	71 f0       	breq	.+28     	; 0x3cec <__floatsisf+0x74>
    3cd0:	96 e8       	ldi	r25, 0x86	; 134
    3cd2:	86 2f       	mov	r24, r22
    3cd4:	70 e0       	ldi	r23, 0x00	; 0
    3cd6:	60 e0       	ldi	r22, 0x00	; 0
    3cd8:	2a f0       	brmi	.+10     	; 0x3ce4 <__floatsisf+0x6c>
    3cda:	9a 95       	dec	r25
    3cdc:	66 0f       	add	r22, r22
    3cde:	77 1f       	adc	r23, r23
    3ce0:	88 1f       	adc	r24, r24
    3ce2:	da f7       	brpl	.-10     	; 0x3cda <__floatsisf+0x62>
    3ce4:	88 0f       	add	r24, r24
    3ce6:	96 95       	lsr	r25
    3ce8:	87 95       	ror	r24
    3cea:	97 f9       	bld	r25, 7
    3cec:	08 95       	ret

00003cee <__fp_inf>:
    3cee:	97 f9       	bld	r25, 7
    3cf0:	9f 67       	ori	r25, 0x7F	; 127
    3cf2:	80 e8       	ldi	r24, 0x80	; 128
    3cf4:	70 e0       	ldi	r23, 0x00	; 0
    3cf6:	60 e0       	ldi	r22, 0x00	; 0
    3cf8:	08 95       	ret

00003cfa <__fp_nan>:
    3cfa:	9f ef       	ldi	r25, 0xFF	; 255
    3cfc:	80 ec       	ldi	r24, 0xC0	; 192
    3cfe:	08 95       	ret

00003d00 <__fp_pscA>:
    3d00:	00 24       	eor	r0, r0
    3d02:	0a 94       	dec	r0
    3d04:	16 16       	cp	r1, r22
    3d06:	17 06       	cpc	r1, r23
    3d08:	18 06       	cpc	r1, r24
    3d0a:	09 06       	cpc	r0, r25
    3d0c:	08 95       	ret

00003d0e <__fp_pscB>:
    3d0e:	00 24       	eor	r0, r0
    3d10:	0a 94       	dec	r0
    3d12:	12 16       	cp	r1, r18
    3d14:	13 06       	cpc	r1, r19
    3d16:	14 06       	cpc	r1, r20
    3d18:	05 06       	cpc	r0, r21
    3d1a:	08 95       	ret

00003d1c <__fp_round>:
    3d1c:	09 2e       	mov	r0, r25
    3d1e:	03 94       	inc	r0
    3d20:	00 0c       	add	r0, r0
    3d22:	11 f4       	brne	.+4      	; 0x3d28 <__fp_round+0xc>
    3d24:	88 23       	and	r24, r24
    3d26:	52 f0       	brmi	.+20     	; 0x3d3c <__fp_round+0x20>
    3d28:	bb 0f       	add	r27, r27
    3d2a:	40 f4       	brcc	.+16     	; 0x3d3c <__fp_round+0x20>
    3d2c:	bf 2b       	or	r27, r31
    3d2e:	11 f4       	brne	.+4      	; 0x3d34 <__fp_round+0x18>
    3d30:	60 ff       	sbrs	r22, 0
    3d32:	04 c0       	rjmp	.+8      	; 0x3d3c <__fp_round+0x20>
    3d34:	6f 5f       	subi	r22, 0xFF	; 255
    3d36:	7f 4f       	sbci	r23, 0xFF	; 255
    3d38:	8f 4f       	sbci	r24, 0xFF	; 255
    3d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d3c:	08 95       	ret

00003d3e <__fp_split3>:
    3d3e:	57 fd       	sbrc	r21, 7
    3d40:	90 58       	subi	r25, 0x80	; 128
    3d42:	44 0f       	add	r20, r20
    3d44:	55 1f       	adc	r21, r21
    3d46:	59 f0       	breq	.+22     	; 0x3d5e <__fp_splitA+0x10>
    3d48:	5f 3f       	cpi	r21, 0xFF	; 255
    3d4a:	71 f0       	breq	.+28     	; 0x3d68 <__fp_splitA+0x1a>
    3d4c:	47 95       	ror	r20

00003d4e <__fp_splitA>:
    3d4e:	88 0f       	add	r24, r24
    3d50:	97 fb       	bst	r25, 7
    3d52:	99 1f       	adc	r25, r25
    3d54:	61 f0       	breq	.+24     	; 0x3d6e <__fp_splitA+0x20>
    3d56:	9f 3f       	cpi	r25, 0xFF	; 255
    3d58:	79 f0       	breq	.+30     	; 0x3d78 <__fp_splitA+0x2a>
    3d5a:	87 95       	ror	r24
    3d5c:	08 95       	ret
    3d5e:	12 16       	cp	r1, r18
    3d60:	13 06       	cpc	r1, r19
    3d62:	14 06       	cpc	r1, r20
    3d64:	55 1f       	adc	r21, r21
    3d66:	f2 cf       	rjmp	.-28     	; 0x3d4c <__fp_split3+0xe>
    3d68:	46 95       	lsr	r20
    3d6a:	f1 df       	rcall	.-30     	; 0x3d4e <__fp_splitA>
    3d6c:	08 c0       	rjmp	.+16     	; 0x3d7e <__fp_splitA+0x30>
    3d6e:	16 16       	cp	r1, r22
    3d70:	17 06       	cpc	r1, r23
    3d72:	18 06       	cpc	r1, r24
    3d74:	99 1f       	adc	r25, r25
    3d76:	f1 cf       	rjmp	.-30     	; 0x3d5a <__fp_splitA+0xc>
    3d78:	86 95       	lsr	r24
    3d7a:	71 05       	cpc	r23, r1
    3d7c:	61 05       	cpc	r22, r1
    3d7e:	08 94       	sec
    3d80:	08 95       	ret

00003d82 <__fp_zero>:
    3d82:	e8 94       	clt

00003d84 <__fp_szero>:
    3d84:	bb 27       	eor	r27, r27
    3d86:	66 27       	eor	r22, r22
    3d88:	77 27       	eor	r23, r23
    3d8a:	cb 01       	movw	r24, r22
    3d8c:	97 f9       	bld	r25, 7
    3d8e:	08 95       	ret

00003d90 <pow>:
    3d90:	fa 01       	movw	r30, r20
    3d92:	ee 0f       	add	r30, r30
    3d94:	ff 1f       	adc	r31, r31
    3d96:	30 96       	adiw	r30, 0x00	; 0
    3d98:	21 05       	cpc	r18, r1
    3d9a:	31 05       	cpc	r19, r1
    3d9c:	a1 f1       	breq	.+104    	; 0x3e06 <pow+0x76>
    3d9e:	61 15       	cp	r22, r1
    3da0:	71 05       	cpc	r23, r1
    3da2:	61 f4       	brne	.+24     	; 0x3dbc <pow+0x2c>
    3da4:	80 38       	cpi	r24, 0x80	; 128
    3da6:	bf e3       	ldi	r27, 0x3F	; 63
    3da8:	9b 07       	cpc	r25, r27
    3daa:	49 f1       	breq	.+82     	; 0x3dfe <pow+0x6e>
    3dac:	68 94       	set
    3dae:	90 38       	cpi	r25, 0x80	; 128
    3db0:	81 05       	cpc	r24, r1
    3db2:	61 f0       	breq	.+24     	; 0x3dcc <pow+0x3c>
    3db4:	80 38       	cpi	r24, 0x80	; 128
    3db6:	bf ef       	ldi	r27, 0xFF	; 255
    3db8:	9b 07       	cpc	r25, r27
    3dba:	41 f0       	breq	.+16     	; 0x3dcc <pow+0x3c>
    3dbc:	99 23       	and	r25, r25
    3dbe:	4a f5       	brpl	.+82     	; 0x3e12 <pow+0x82>
    3dc0:	ff 3f       	cpi	r31, 0xFF	; 255
    3dc2:	e1 05       	cpc	r30, r1
    3dc4:	31 05       	cpc	r19, r1
    3dc6:	21 05       	cpc	r18, r1
    3dc8:	19 f1       	breq	.+70     	; 0x3e10 <pow+0x80>
    3dca:	e8 94       	clt
    3dcc:	08 94       	sec
    3dce:	e7 95       	ror	r30
    3dd0:	d9 01       	movw	r26, r18
    3dd2:	aa 23       	and	r26, r26
    3dd4:	29 f4       	brne	.+10     	; 0x3de0 <pow+0x50>
    3dd6:	ab 2f       	mov	r26, r27
    3dd8:	be 2f       	mov	r27, r30
    3dda:	f8 5f       	subi	r31, 0xF8	; 248
    3ddc:	d0 f3       	brcs	.-12     	; 0x3dd2 <pow+0x42>
    3dde:	10 c0       	rjmp	.+32     	; 0x3e00 <pow+0x70>
    3de0:	ff 5f       	subi	r31, 0xFF	; 255
    3de2:	70 f4       	brcc	.+28     	; 0x3e00 <pow+0x70>
    3de4:	a6 95       	lsr	r26
    3de6:	e0 f7       	brcc	.-8      	; 0x3de0 <pow+0x50>
    3de8:	f7 39       	cpi	r31, 0x97	; 151
    3dea:	50 f0       	brcs	.+20     	; 0x3e00 <pow+0x70>
    3dec:	19 f0       	breq	.+6      	; 0x3df4 <pow+0x64>
    3dee:	ff 3a       	cpi	r31, 0xAF	; 175
    3df0:	38 f4       	brcc	.+14     	; 0x3e00 <pow+0x70>
    3df2:	9f 77       	andi	r25, 0x7F	; 127
    3df4:	9f 93       	push	r25
    3df6:	0d d0       	rcall	.+26     	; 0x3e12 <pow+0x82>
    3df8:	0f 90       	pop	r0
    3dfa:	07 fc       	sbrc	r0, 7
    3dfc:	90 58       	subi	r25, 0x80	; 128
    3dfe:	08 95       	ret
    3e00:	46 f0       	brts	.+16     	; 0x3e12 <pow+0x82>
    3e02:	0c 94 7d 1e 	jmp	0x3cfa	; 0x3cfa <__fp_nan>
    3e06:	60 e0       	ldi	r22, 0x00	; 0
    3e08:	70 e0       	ldi	r23, 0x00	; 0
    3e0a:	80 e8       	ldi	r24, 0x80	; 128
    3e0c:	9f e3       	ldi	r25, 0x3F	; 63
    3e0e:	08 95       	ret
    3e10:	4f e7       	ldi	r20, 0x7F	; 127
    3e12:	9f 77       	andi	r25, 0x7F	; 127
    3e14:	5f 93       	push	r21
    3e16:	4f 93       	push	r20
    3e18:	3f 93       	push	r19
    3e1a:	2f 93       	push	r18
    3e1c:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <log>
    3e20:	2f 91       	pop	r18
    3e22:	3f 91       	pop	r19
    3e24:	4f 91       	pop	r20
    3e26:	5f 91       	pop	r21
    3e28:	0e 94 3f 20 	call	0x407e	; 0x407e <__mulsf3>
    3e2c:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <exp>
    3e30:	29 f4       	brne	.+10     	; 0x3e3c <pow+0xac>
    3e32:	16 f0       	brts	.+4      	; 0x3e38 <pow+0xa8>
    3e34:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__fp_inf>
    3e38:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__fp_zero>
    3e3c:	0c 94 7d 1e 	jmp	0x3cfa	; 0x3cfa <__fp_nan>

00003e40 <exp>:
    3e40:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <__fp_splitA>
    3e44:	a8 f3       	brcs	.-22     	; 0x3e30 <pow+0xa0>
    3e46:	96 38       	cpi	r25, 0x86	; 134
    3e48:	a0 f7       	brcc	.-24     	; 0x3e32 <pow+0xa2>
    3e4a:	07 f8       	bld	r0, 7
    3e4c:	0f 92       	push	r0
    3e4e:	e8 94       	clt
    3e50:	2b e3       	ldi	r18, 0x3B	; 59
    3e52:	3a ea       	ldi	r19, 0xAA	; 170
    3e54:	48 eb       	ldi	r20, 0xB8	; 184
    3e56:	5f e7       	ldi	r21, 0x7F	; 127
    3e58:	0e 94 55 20 	call	0x40aa	; 0x40aa <__mulsf3_pse>
    3e5c:	0f 92       	push	r0
    3e5e:	0f 92       	push	r0
    3e60:	0f 92       	push	r0
    3e62:	4d b7       	in	r20, 0x3d	; 61
    3e64:	5e b7       	in	r21, 0x3e	; 62
    3e66:	0f 92       	push	r0
    3e68:	0e 94 0b 20 	call	0x4016	; 0x4016 <modf>
    3e6c:	ec e7       	ldi	r30, 0x7C	; 124
    3e6e:	f0 e0       	ldi	r31, 0x00	; 0
    3e70:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <__fp_powser>
    3e74:	4f 91       	pop	r20
    3e76:	5f 91       	pop	r21
    3e78:	ef 91       	pop	r30
    3e7a:	ff 91       	pop	r31
    3e7c:	e5 95       	asr	r30
    3e7e:	ee 1f       	adc	r30, r30
    3e80:	ff 1f       	adc	r31, r31
    3e82:	49 f0       	breq	.+18     	; 0x3e96 <exp+0x56>
    3e84:	fe 57       	subi	r31, 0x7E	; 126
    3e86:	e0 68       	ori	r30, 0x80	; 128
    3e88:	44 27       	eor	r20, r20
    3e8a:	ee 0f       	add	r30, r30
    3e8c:	44 1f       	adc	r20, r20
    3e8e:	fa 95       	dec	r31
    3e90:	e1 f7       	brne	.-8      	; 0x3e8a <exp+0x4a>
    3e92:	41 95       	neg	r20
    3e94:	55 0b       	sbc	r21, r21
    3e96:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <ldexp>
    3e9a:	0f 90       	pop	r0
    3e9c:	07 fe       	sbrs	r0, 7
    3e9e:	0c 94 79 1f 	jmp	0x3ef2	; 0x3ef2 <inverse>
    3ea2:	08 95       	ret

00003ea4 <__fp_powser>:
    3ea4:	df 93       	push	r29
    3ea6:	cf 93       	push	r28
    3ea8:	1f 93       	push	r17
    3eaa:	0f 93       	push	r16
    3eac:	ff 92       	push	r15
    3eae:	ef 92       	push	r14
    3eb0:	df 92       	push	r13
    3eb2:	7b 01       	movw	r14, r22
    3eb4:	8c 01       	movw	r16, r24
    3eb6:	68 94       	set
    3eb8:	06 c0       	rjmp	.+12     	; 0x3ec6 <__fp_powser+0x22>
    3eba:	da 2e       	mov	r13, r26
    3ebc:	ef 01       	movw	r28, r30
    3ebe:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__mulsf3x>
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	e8 94       	clt
    3ec6:	a5 91       	lpm	r26, Z+
    3ec8:	25 91       	lpm	r18, Z+
    3eca:	35 91       	lpm	r19, Z+
    3ecc:	45 91       	lpm	r20, Z+
    3ece:	55 91       	lpm	r21, Z+
    3ed0:	a6 f3       	brts	.-24     	; 0x3eba <__fp_powser+0x16>
    3ed2:	ef 01       	movw	r28, r30
    3ed4:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <__addsf3x>
    3ed8:	fe 01       	movw	r30, r28
    3eda:	97 01       	movw	r18, r14
    3edc:	a8 01       	movw	r20, r16
    3ede:	da 94       	dec	r13
    3ee0:	69 f7       	brne	.-38     	; 0x3ebc <__fp_powser+0x18>
    3ee2:	df 90       	pop	r13
    3ee4:	ef 90       	pop	r14
    3ee6:	ff 90       	pop	r15
    3ee8:	0f 91       	pop	r16
    3eea:	1f 91       	pop	r17
    3eec:	cf 91       	pop	r28
    3eee:	df 91       	pop	r29
    3ef0:	08 95       	ret

00003ef2 <inverse>:
    3ef2:	9b 01       	movw	r18, r22
    3ef4:	ac 01       	movw	r20, r24
    3ef6:	60 e0       	ldi	r22, 0x00	; 0
    3ef8:	70 e0       	ldi	r23, 0x00	; 0
    3efa:	80 e8       	ldi	r24, 0x80	; 128
    3efc:	9f e3       	ldi	r25, 0x3F	; 63
    3efe:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__divsf3>
    3f02:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__fp_inf>
    3f06:	0c 94 1e 21 	jmp	0x423c	; 0x423c <__fp_mpack>

00003f0a <ldexp>:
    3f0a:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <__fp_splitA>
    3f0e:	d8 f3       	brcs	.-10     	; 0x3f06 <inverse+0x14>
    3f10:	99 23       	and	r25, r25
    3f12:	c9 f3       	breq	.-14     	; 0x3f06 <inverse+0x14>
    3f14:	94 0f       	add	r25, r20
    3f16:	51 1d       	adc	r21, r1
    3f18:	a3 f3       	brvs	.-24     	; 0x3f02 <inverse+0x10>
    3f1a:	91 50       	subi	r25, 0x01	; 1
    3f1c:	50 40       	sbci	r21, 0x00	; 0
    3f1e:	94 f0       	brlt	.+36     	; 0x3f44 <ldexp+0x3a>
    3f20:	59 f0       	breq	.+22     	; 0x3f38 <ldexp+0x2e>
    3f22:	88 23       	and	r24, r24
    3f24:	32 f0       	brmi	.+12     	; 0x3f32 <ldexp+0x28>
    3f26:	66 0f       	add	r22, r22
    3f28:	77 1f       	adc	r23, r23
    3f2a:	88 1f       	adc	r24, r24
    3f2c:	91 50       	subi	r25, 0x01	; 1
    3f2e:	50 40       	sbci	r21, 0x00	; 0
    3f30:	c1 f7       	brne	.-16     	; 0x3f22 <ldexp+0x18>
    3f32:	9e 3f       	cpi	r25, 0xFE	; 254
    3f34:	51 05       	cpc	r21, r1
    3f36:	2c f7       	brge	.-54     	; 0x3f02 <inverse+0x10>
    3f38:	88 0f       	add	r24, r24
    3f3a:	91 1d       	adc	r25, r1
    3f3c:	96 95       	lsr	r25
    3f3e:	87 95       	ror	r24
    3f40:	97 f9       	bld	r25, 7
    3f42:	08 95       	ret
    3f44:	5f 3f       	cpi	r21, 0xFF	; 255
    3f46:	ac f0       	brlt	.+42     	; 0x3f72 <ldexp+0x68>
    3f48:	98 3e       	cpi	r25, 0xE8	; 232
    3f4a:	9c f0       	brlt	.+38     	; 0x3f72 <ldexp+0x68>
    3f4c:	bb 27       	eor	r27, r27
    3f4e:	86 95       	lsr	r24
    3f50:	77 95       	ror	r23
    3f52:	67 95       	ror	r22
    3f54:	b7 95       	ror	r27
    3f56:	08 f4       	brcc	.+2      	; 0x3f5a <ldexp+0x50>
    3f58:	b1 60       	ori	r27, 0x01	; 1
    3f5a:	93 95       	inc	r25
    3f5c:	c1 f7       	brne	.-16     	; 0x3f4e <ldexp+0x44>
    3f5e:	bb 0f       	add	r27, r27
    3f60:	58 f7       	brcc	.-42     	; 0x3f38 <ldexp+0x2e>
    3f62:	11 f4       	brne	.+4      	; 0x3f68 <ldexp+0x5e>
    3f64:	60 ff       	sbrs	r22, 0
    3f66:	e8 cf       	rjmp	.-48     	; 0x3f38 <ldexp+0x2e>
    3f68:	6f 5f       	subi	r22, 0xFF	; 255
    3f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f70:	e3 cf       	rjmp	.-58     	; 0x3f38 <ldexp+0x2e>
    3f72:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__fp_szero>
    3f76:	16 f0       	brts	.+4      	; 0x3f7c <ldexp+0x72>
    3f78:	0c 94 1e 21 	jmp	0x423c	; 0x423c <__fp_mpack>
    3f7c:	0c 94 7d 1e 	jmp	0x3cfa	; 0x3cfa <__fp_nan>
    3f80:	68 94       	set
    3f82:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__fp_inf>

00003f86 <log>:
    3f86:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <__fp_splitA>
    3f8a:	a8 f3       	brcs	.-22     	; 0x3f76 <ldexp+0x6c>
    3f8c:	99 23       	and	r25, r25
    3f8e:	c1 f3       	breq	.-16     	; 0x3f80 <ldexp+0x76>
    3f90:	ae f3       	brts	.-22     	; 0x3f7c <ldexp+0x72>
    3f92:	df 93       	push	r29
    3f94:	cf 93       	push	r28
    3f96:	1f 93       	push	r17
    3f98:	0f 93       	push	r16
    3f9a:	ff 92       	push	r15
    3f9c:	c9 2f       	mov	r28, r25
    3f9e:	dd 27       	eor	r29, r29
    3fa0:	88 23       	and	r24, r24
    3fa2:	2a f0       	brmi	.+10     	; 0x3fae <log+0x28>
    3fa4:	21 97       	sbiw	r28, 0x01	; 1
    3fa6:	66 0f       	add	r22, r22
    3fa8:	77 1f       	adc	r23, r23
    3faa:	88 1f       	adc	r24, r24
    3fac:	da f7       	brpl	.-10     	; 0x3fa4 <log+0x1e>
    3fae:	20 e0       	ldi	r18, 0x00	; 0
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	40 e8       	ldi	r20, 0x80	; 128
    3fb4:	5f eb       	ldi	r21, 0xBF	; 191
    3fb6:	9f e3       	ldi	r25, 0x3F	; 63
    3fb8:	88 39       	cpi	r24, 0x98	; 152
    3fba:	20 f0       	brcs	.+8      	; 0x3fc4 <log+0x3e>
    3fbc:	80 3e       	cpi	r24, 0xE0	; 224
    3fbe:	38 f0       	brcs	.+14     	; 0x3fce <log+0x48>
    3fc0:	21 96       	adiw	r28, 0x01	; 1
    3fc2:	8f 77       	andi	r24, 0x7F	; 127
    3fc4:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__addsf3>
    3fc8:	e4 ea       	ldi	r30, 0xA4	; 164
    3fca:	f0 e0       	ldi	r31, 0x00	; 0
    3fcc:	04 c0       	rjmp	.+8      	; 0x3fd6 <log+0x50>
    3fce:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__addsf3>
    3fd2:	e1 ed       	ldi	r30, 0xD1	; 209
    3fd4:	f0 e0       	ldi	r31, 0x00	; 0
    3fd6:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <__fp_powser>
    3fda:	8b 01       	movw	r16, r22
    3fdc:	be 01       	movw	r22, r28
    3fde:	ec 01       	movw	r28, r24
    3fe0:	fb 2e       	mov	r15, r27
    3fe2:	6f 57       	subi	r22, 0x7F	; 127
    3fe4:	71 09       	sbc	r23, r1
    3fe6:	75 95       	asr	r23
    3fe8:	77 1f       	adc	r23, r23
    3fea:	88 0b       	sbc	r24, r24
    3fec:	99 0b       	sbc	r25, r25
    3fee:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <__floatsisf>
    3ff2:	28 e1       	ldi	r18, 0x18	; 24
    3ff4:	32 e7       	ldi	r19, 0x72	; 114
    3ff6:	41 e3       	ldi	r20, 0x31	; 49
    3ff8:	5f e3       	ldi	r21, 0x3F	; 63
    3ffa:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__mulsf3x>
    3ffe:	af 2d       	mov	r26, r15
    4000:	98 01       	movw	r18, r16
    4002:	ae 01       	movw	r20, r28
    4004:	ff 90       	pop	r15
    4006:	0f 91       	pop	r16
    4008:	1f 91       	pop	r17
    400a:	cf 91       	pop	r28
    400c:	df 91       	pop	r29
    400e:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <__addsf3x>
    4012:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__fp_round>

00004016 <modf>:
    4016:	fa 01       	movw	r30, r20
    4018:	dc 01       	movw	r26, r24
    401a:	aa 0f       	add	r26, r26
    401c:	bb 1f       	adc	r27, r27
    401e:	9b 01       	movw	r18, r22
    4020:	ac 01       	movw	r20, r24
    4022:	bf 57       	subi	r27, 0x7F	; 127
    4024:	28 f4       	brcc	.+10     	; 0x4030 <modf+0x1a>
    4026:	22 27       	eor	r18, r18
    4028:	33 27       	eor	r19, r19
    402a:	44 27       	eor	r20, r20
    402c:	50 78       	andi	r21, 0x80	; 128
    402e:	20 c0       	rjmp	.+64     	; 0x4070 <modf+0x5a>
    4030:	b7 51       	subi	r27, 0x17	; 23
    4032:	90 f4       	brcc	.+36     	; 0x4058 <modf+0x42>
    4034:	ab 2f       	mov	r26, r27
    4036:	00 24       	eor	r0, r0
    4038:	46 95       	lsr	r20
    403a:	37 95       	ror	r19
    403c:	27 95       	ror	r18
    403e:	01 1c       	adc	r0, r1
    4040:	a3 95       	inc	r26
    4042:	d2 f3       	brmi	.-12     	; 0x4038 <modf+0x22>
    4044:	00 20       	and	r0, r0
    4046:	71 f0       	breq	.+28     	; 0x4064 <modf+0x4e>
    4048:	22 0f       	add	r18, r18
    404a:	33 1f       	adc	r19, r19
    404c:	44 1f       	adc	r20, r20
    404e:	b3 95       	inc	r27
    4050:	da f3       	brmi	.-10     	; 0x4048 <modf+0x32>
    4052:	0e d0       	rcall	.+28     	; 0x4070 <modf+0x5a>
    4054:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <__subsf3>
    4058:	61 30       	cpi	r22, 0x01	; 1
    405a:	71 05       	cpc	r23, r1
    405c:	a0 e8       	ldi	r26, 0x80	; 128
    405e:	8a 07       	cpc	r24, r26
    4060:	b9 46       	sbci	r27, 0x69	; 105
    4062:	30 f4       	brcc	.+12     	; 0x4070 <modf+0x5a>
    4064:	9b 01       	movw	r18, r22
    4066:	ac 01       	movw	r20, r24
    4068:	66 27       	eor	r22, r22
    406a:	77 27       	eor	r23, r23
    406c:	88 27       	eor	r24, r24
    406e:	90 78       	andi	r25, 0x80	; 128
    4070:	30 96       	adiw	r30, 0x00	; 0
    4072:	21 f0       	breq	.+8      	; 0x407c <modf+0x66>
    4074:	20 83       	st	Z, r18
    4076:	31 83       	std	Z+1, r19	; 0x01
    4078:	42 83       	std	Z+2, r20	; 0x02
    407a:	53 83       	std	Z+3, r21	; 0x03
    407c:	08 95       	ret

0000407e <__mulsf3>:
    407e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__mulsf3x>
    4082:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__fp_round>
    4086:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <__fp_pscA>
    408a:	38 f0       	brcs	.+14     	; 0x409a <__mulsf3+0x1c>
    408c:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <__fp_pscB>
    4090:	20 f0       	brcs	.+8      	; 0x409a <__mulsf3+0x1c>
    4092:	95 23       	and	r25, r21
    4094:	11 f0       	breq	.+4      	; 0x409a <__mulsf3+0x1c>
    4096:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__fp_inf>
    409a:	0c 94 7d 1e 	jmp	0x3cfa	; 0x3cfa <__fp_nan>
    409e:	11 24       	eor	r1, r1
    40a0:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__fp_szero>

000040a4 <__mulsf3x>:
    40a4:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__fp_split3>
    40a8:	70 f3       	brcs	.-36     	; 0x4086 <__mulsf3+0x8>

000040aa <__mulsf3_pse>:
    40aa:	95 9f       	mul	r25, r21
    40ac:	c1 f3       	breq	.-16     	; 0x409e <__mulsf3+0x20>
    40ae:	95 0f       	add	r25, r21
    40b0:	50 e0       	ldi	r21, 0x00	; 0
    40b2:	55 1f       	adc	r21, r21
    40b4:	62 9f       	mul	r22, r18
    40b6:	f0 01       	movw	r30, r0
    40b8:	72 9f       	mul	r23, r18
    40ba:	bb 27       	eor	r27, r27
    40bc:	f0 0d       	add	r31, r0
    40be:	b1 1d       	adc	r27, r1
    40c0:	63 9f       	mul	r22, r19
    40c2:	aa 27       	eor	r26, r26
    40c4:	f0 0d       	add	r31, r0
    40c6:	b1 1d       	adc	r27, r1
    40c8:	aa 1f       	adc	r26, r26
    40ca:	64 9f       	mul	r22, r20
    40cc:	66 27       	eor	r22, r22
    40ce:	b0 0d       	add	r27, r0
    40d0:	a1 1d       	adc	r26, r1
    40d2:	66 1f       	adc	r22, r22
    40d4:	82 9f       	mul	r24, r18
    40d6:	22 27       	eor	r18, r18
    40d8:	b0 0d       	add	r27, r0
    40da:	a1 1d       	adc	r26, r1
    40dc:	62 1f       	adc	r22, r18
    40de:	73 9f       	mul	r23, r19
    40e0:	b0 0d       	add	r27, r0
    40e2:	a1 1d       	adc	r26, r1
    40e4:	62 1f       	adc	r22, r18
    40e6:	83 9f       	mul	r24, r19
    40e8:	a0 0d       	add	r26, r0
    40ea:	61 1d       	adc	r22, r1
    40ec:	22 1f       	adc	r18, r18
    40ee:	74 9f       	mul	r23, r20
    40f0:	33 27       	eor	r19, r19
    40f2:	a0 0d       	add	r26, r0
    40f4:	61 1d       	adc	r22, r1
    40f6:	23 1f       	adc	r18, r19
    40f8:	84 9f       	mul	r24, r20
    40fa:	60 0d       	add	r22, r0
    40fc:	21 1d       	adc	r18, r1
    40fe:	82 2f       	mov	r24, r18
    4100:	76 2f       	mov	r23, r22
    4102:	6a 2f       	mov	r22, r26
    4104:	11 24       	eor	r1, r1
    4106:	9f 57       	subi	r25, 0x7F	; 127
    4108:	50 40       	sbci	r21, 0x00	; 0
    410a:	9a f0       	brmi	.+38     	; 0x4132 <__mulsf3_pse+0x88>
    410c:	f1 f0       	breq	.+60     	; 0x414a <__mulsf3_pse+0xa0>
    410e:	88 23       	and	r24, r24
    4110:	4a f0       	brmi	.+18     	; 0x4124 <__mulsf3_pse+0x7a>
    4112:	ee 0f       	add	r30, r30
    4114:	ff 1f       	adc	r31, r31
    4116:	bb 1f       	adc	r27, r27
    4118:	66 1f       	adc	r22, r22
    411a:	77 1f       	adc	r23, r23
    411c:	88 1f       	adc	r24, r24
    411e:	91 50       	subi	r25, 0x01	; 1
    4120:	50 40       	sbci	r21, 0x00	; 0
    4122:	a9 f7       	brne	.-22     	; 0x410e <__mulsf3_pse+0x64>
    4124:	9e 3f       	cpi	r25, 0xFE	; 254
    4126:	51 05       	cpc	r21, r1
    4128:	80 f0       	brcs	.+32     	; 0x414a <__mulsf3_pse+0xa0>
    412a:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__fp_inf>
    412e:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__fp_szero>
    4132:	5f 3f       	cpi	r21, 0xFF	; 255
    4134:	e4 f3       	brlt	.-8      	; 0x412e <__mulsf3_pse+0x84>
    4136:	98 3e       	cpi	r25, 0xE8	; 232
    4138:	d4 f3       	brlt	.-12     	; 0x412e <__mulsf3_pse+0x84>
    413a:	86 95       	lsr	r24
    413c:	77 95       	ror	r23
    413e:	67 95       	ror	r22
    4140:	b7 95       	ror	r27
    4142:	f7 95       	ror	r31
    4144:	e7 95       	ror	r30
    4146:	9f 5f       	subi	r25, 0xFF	; 255
    4148:	c1 f7       	brne	.-16     	; 0x413a <__mulsf3_pse+0x90>
    414a:	fe 2b       	or	r31, r30
    414c:	88 0f       	add	r24, r24
    414e:	91 1d       	adc	r25, r1
    4150:	96 95       	lsr	r25
    4152:	87 95       	ror	r24
    4154:	97 f9       	bld	r25, 7
    4156:	08 95       	ret

00004158 <__divsf3>:
    4158:	0e 94 c0 20 	call	0x4180	; 0x4180 <__divsf3x>
    415c:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__fp_round>
    4160:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <__fp_pscB>
    4164:	58 f0       	brcs	.+22     	; 0x417c <__divsf3+0x24>
    4166:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <__fp_pscA>
    416a:	40 f0       	brcs	.+16     	; 0x417c <__divsf3+0x24>
    416c:	29 f4       	brne	.+10     	; 0x4178 <__divsf3+0x20>
    416e:	5f 3f       	cpi	r21, 0xFF	; 255
    4170:	29 f0       	breq	.+10     	; 0x417c <__divsf3+0x24>
    4172:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__fp_inf>
    4176:	51 11       	cpse	r21, r1
    4178:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__fp_szero>
    417c:	0c 94 7d 1e 	jmp	0x3cfa	; 0x3cfa <__fp_nan>

00004180 <__divsf3x>:
    4180:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__fp_split3>
    4184:	68 f3       	brcs	.-38     	; 0x4160 <__divsf3+0x8>

00004186 <__divsf3_pse>:
    4186:	99 23       	and	r25, r25
    4188:	b1 f3       	breq	.-20     	; 0x4176 <__divsf3+0x1e>
    418a:	55 23       	and	r21, r21
    418c:	91 f3       	breq	.-28     	; 0x4172 <__divsf3+0x1a>
    418e:	95 1b       	sub	r25, r21
    4190:	55 0b       	sbc	r21, r21
    4192:	bb 27       	eor	r27, r27
    4194:	aa 27       	eor	r26, r26
    4196:	62 17       	cp	r22, r18
    4198:	73 07       	cpc	r23, r19
    419a:	84 07       	cpc	r24, r20
    419c:	38 f0       	brcs	.+14     	; 0x41ac <__divsf3_pse+0x26>
    419e:	9f 5f       	subi	r25, 0xFF	; 255
    41a0:	5f 4f       	sbci	r21, 0xFF	; 255
    41a2:	22 0f       	add	r18, r18
    41a4:	33 1f       	adc	r19, r19
    41a6:	44 1f       	adc	r20, r20
    41a8:	aa 1f       	adc	r26, r26
    41aa:	a9 f3       	breq	.-22     	; 0x4196 <__divsf3_pse+0x10>
    41ac:	35 d0       	rcall	.+106    	; 0x4218 <__divsf3_pse+0x92>
    41ae:	0e 2e       	mov	r0, r30
    41b0:	3a f0       	brmi	.+14     	; 0x41c0 <__divsf3_pse+0x3a>
    41b2:	e0 e8       	ldi	r30, 0x80	; 128
    41b4:	32 d0       	rcall	.+100    	; 0x421a <__divsf3_pse+0x94>
    41b6:	91 50       	subi	r25, 0x01	; 1
    41b8:	50 40       	sbci	r21, 0x00	; 0
    41ba:	e6 95       	lsr	r30
    41bc:	00 1c       	adc	r0, r0
    41be:	ca f7       	brpl	.-14     	; 0x41b2 <__divsf3_pse+0x2c>
    41c0:	2b d0       	rcall	.+86     	; 0x4218 <__divsf3_pse+0x92>
    41c2:	fe 2f       	mov	r31, r30
    41c4:	29 d0       	rcall	.+82     	; 0x4218 <__divsf3_pse+0x92>
    41c6:	66 0f       	add	r22, r22
    41c8:	77 1f       	adc	r23, r23
    41ca:	88 1f       	adc	r24, r24
    41cc:	bb 1f       	adc	r27, r27
    41ce:	26 17       	cp	r18, r22
    41d0:	37 07       	cpc	r19, r23
    41d2:	48 07       	cpc	r20, r24
    41d4:	ab 07       	cpc	r26, r27
    41d6:	b0 e8       	ldi	r27, 0x80	; 128
    41d8:	09 f0       	breq	.+2      	; 0x41dc <__divsf3_pse+0x56>
    41da:	bb 0b       	sbc	r27, r27
    41dc:	80 2d       	mov	r24, r0
    41de:	bf 01       	movw	r22, r30
    41e0:	ff 27       	eor	r31, r31
    41e2:	93 58       	subi	r25, 0x83	; 131
    41e4:	5f 4f       	sbci	r21, 0xFF	; 255
    41e6:	3a f0       	brmi	.+14     	; 0x41f6 <__divsf3_pse+0x70>
    41e8:	9e 3f       	cpi	r25, 0xFE	; 254
    41ea:	51 05       	cpc	r21, r1
    41ec:	78 f0       	brcs	.+30     	; 0x420c <__divsf3_pse+0x86>
    41ee:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__fp_inf>
    41f2:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__fp_szero>
    41f6:	5f 3f       	cpi	r21, 0xFF	; 255
    41f8:	e4 f3       	brlt	.-8      	; 0x41f2 <__divsf3_pse+0x6c>
    41fa:	98 3e       	cpi	r25, 0xE8	; 232
    41fc:	d4 f3       	brlt	.-12     	; 0x41f2 <__divsf3_pse+0x6c>
    41fe:	86 95       	lsr	r24
    4200:	77 95       	ror	r23
    4202:	67 95       	ror	r22
    4204:	b7 95       	ror	r27
    4206:	f7 95       	ror	r31
    4208:	9f 5f       	subi	r25, 0xFF	; 255
    420a:	c9 f7       	brne	.-14     	; 0x41fe <__divsf3_pse+0x78>
    420c:	88 0f       	add	r24, r24
    420e:	91 1d       	adc	r25, r1
    4210:	96 95       	lsr	r25
    4212:	87 95       	ror	r24
    4214:	97 f9       	bld	r25, 7
    4216:	08 95       	ret
    4218:	e1 e0       	ldi	r30, 0x01	; 1
    421a:	66 0f       	add	r22, r22
    421c:	77 1f       	adc	r23, r23
    421e:	88 1f       	adc	r24, r24
    4220:	bb 1f       	adc	r27, r27
    4222:	62 17       	cp	r22, r18
    4224:	73 07       	cpc	r23, r19
    4226:	84 07       	cpc	r24, r20
    4228:	ba 07       	cpc	r27, r26
    422a:	20 f0       	brcs	.+8      	; 0x4234 <__divsf3_pse+0xae>
    422c:	62 1b       	sub	r22, r18
    422e:	73 0b       	sbc	r23, r19
    4230:	84 0b       	sbc	r24, r20
    4232:	ba 0b       	sbc	r27, r26
    4234:	ee 1f       	adc	r30, r30
    4236:	88 f7       	brcc	.-30     	; 0x421a <__divsf3_pse+0x94>
    4238:	e0 95       	com	r30
    423a:	08 95       	ret

0000423c <__fp_mpack>:
    423c:	9f 3f       	cpi	r25, 0xFF	; 255
    423e:	31 f0       	breq	.+12     	; 0x424c <__fp_mpack_finite+0xc>

00004240 <__fp_mpack_finite>:
    4240:	91 50       	subi	r25, 0x01	; 1
    4242:	20 f4       	brcc	.+8      	; 0x424c <__fp_mpack_finite+0xc>
    4244:	87 95       	ror	r24
    4246:	77 95       	ror	r23
    4248:	67 95       	ror	r22
    424a:	b7 95       	ror	r27
    424c:	88 0f       	add	r24, r24
    424e:	91 1d       	adc	r25, r1
    4250:	96 95       	lsr	r25
    4252:	87 95       	ror	r24
    4254:	97 f9       	bld	r25, 7
    4256:	08 95       	ret

00004258 <__udivmodsi4>:
    4258:	a1 e2       	ldi	r26, 0x21	; 33
    425a:	1a 2e       	mov	r1, r26
    425c:	aa 1b       	sub	r26, r26
    425e:	bb 1b       	sub	r27, r27
    4260:	fd 01       	movw	r30, r26
    4262:	0d c0       	rjmp	.+26     	; 0x427e <__udivmodsi4_ep>

00004264 <__udivmodsi4_loop>:
    4264:	aa 1f       	adc	r26, r26
    4266:	bb 1f       	adc	r27, r27
    4268:	ee 1f       	adc	r30, r30
    426a:	ff 1f       	adc	r31, r31
    426c:	a2 17       	cp	r26, r18
    426e:	b3 07       	cpc	r27, r19
    4270:	e4 07       	cpc	r30, r20
    4272:	f5 07       	cpc	r31, r21
    4274:	20 f0       	brcs	.+8      	; 0x427e <__udivmodsi4_ep>
    4276:	a2 1b       	sub	r26, r18
    4278:	b3 0b       	sbc	r27, r19
    427a:	e4 0b       	sbc	r30, r20
    427c:	f5 0b       	sbc	r31, r21

0000427e <__udivmodsi4_ep>:
    427e:	66 1f       	adc	r22, r22
    4280:	77 1f       	adc	r23, r23
    4282:	88 1f       	adc	r24, r24
    4284:	99 1f       	adc	r25, r25
    4286:	1a 94       	dec	r1
    4288:	69 f7       	brne	.-38     	; 0x4264 <__udivmodsi4_loop>
    428a:	60 95       	com	r22
    428c:	70 95       	com	r23
    428e:	80 95       	com	r24
    4290:	90 95       	com	r25
    4292:	9b 01       	movw	r18, r22
    4294:	ac 01       	movw	r20, r24
    4296:	bd 01       	movw	r22, r26
    4298:	cf 01       	movw	r24, r30
    429a:	08 95       	ret

0000429c <malloc>:
    429c:	0f 93       	push	r16
    429e:	1f 93       	push	r17
    42a0:	cf 93       	push	r28
    42a2:	df 93       	push	r29
    42a4:	82 30       	cpi	r24, 0x02	; 2
    42a6:	91 05       	cpc	r25, r1
    42a8:	10 f4       	brcc	.+4      	; 0x42ae <malloc+0x12>
    42aa:	82 e0       	ldi	r24, 0x02	; 2
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	e0 91 ae 07 	lds	r30, 0x07AE	; 0x8007ae <__flp>
    42b2:	f0 91 af 07 	lds	r31, 0x07AF	; 0x8007af <__flp+0x1>
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	a0 e0       	ldi	r26, 0x00	; 0
    42bc:	b0 e0       	ldi	r27, 0x00	; 0
    42be:	30 97       	sbiw	r30, 0x00	; 0
    42c0:	19 f1       	breq	.+70     	; 0x4308 <malloc+0x6c>
    42c2:	40 81       	ld	r20, Z
    42c4:	51 81       	ldd	r21, Z+1	; 0x01
    42c6:	02 81       	ldd	r16, Z+2	; 0x02
    42c8:	13 81       	ldd	r17, Z+3	; 0x03
    42ca:	48 17       	cp	r20, r24
    42cc:	59 07       	cpc	r21, r25
    42ce:	c8 f0       	brcs	.+50     	; 0x4302 <malloc+0x66>
    42d0:	84 17       	cp	r24, r20
    42d2:	95 07       	cpc	r25, r21
    42d4:	69 f4       	brne	.+26     	; 0x42f0 <malloc+0x54>
    42d6:	10 97       	sbiw	r26, 0x00	; 0
    42d8:	31 f0       	breq	.+12     	; 0x42e6 <malloc+0x4a>
    42da:	12 96       	adiw	r26, 0x02	; 2
    42dc:	0c 93       	st	X, r16
    42de:	12 97       	sbiw	r26, 0x02	; 2
    42e0:	13 96       	adiw	r26, 0x03	; 3
    42e2:	1c 93       	st	X, r17
    42e4:	27 c0       	rjmp	.+78     	; 0x4334 <malloc+0x98>
    42e6:	00 93 ae 07 	sts	0x07AE, r16	; 0x8007ae <__flp>
    42ea:	10 93 af 07 	sts	0x07AF, r17	; 0x8007af <__flp+0x1>
    42ee:	22 c0       	rjmp	.+68     	; 0x4334 <malloc+0x98>
    42f0:	21 15       	cp	r18, r1
    42f2:	31 05       	cpc	r19, r1
    42f4:	19 f0       	breq	.+6      	; 0x42fc <malloc+0x60>
    42f6:	42 17       	cp	r20, r18
    42f8:	53 07       	cpc	r21, r19
    42fa:	18 f4       	brcc	.+6      	; 0x4302 <malloc+0x66>
    42fc:	9a 01       	movw	r18, r20
    42fe:	bd 01       	movw	r22, r26
    4300:	ef 01       	movw	r28, r30
    4302:	df 01       	movw	r26, r30
    4304:	f8 01       	movw	r30, r16
    4306:	db cf       	rjmp	.-74     	; 0x42be <malloc+0x22>
    4308:	21 15       	cp	r18, r1
    430a:	31 05       	cpc	r19, r1
    430c:	f9 f0       	breq	.+62     	; 0x434c <malloc+0xb0>
    430e:	28 1b       	sub	r18, r24
    4310:	39 0b       	sbc	r19, r25
    4312:	24 30       	cpi	r18, 0x04	; 4
    4314:	31 05       	cpc	r19, r1
    4316:	80 f4       	brcc	.+32     	; 0x4338 <malloc+0x9c>
    4318:	8a 81       	ldd	r24, Y+2	; 0x02
    431a:	9b 81       	ldd	r25, Y+3	; 0x03
    431c:	61 15       	cp	r22, r1
    431e:	71 05       	cpc	r23, r1
    4320:	21 f0       	breq	.+8      	; 0x432a <malloc+0x8e>
    4322:	fb 01       	movw	r30, r22
    4324:	93 83       	std	Z+3, r25	; 0x03
    4326:	82 83       	std	Z+2, r24	; 0x02
    4328:	04 c0       	rjmp	.+8      	; 0x4332 <malloc+0x96>
    432a:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <__flp+0x1>
    432e:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <__flp>
    4332:	fe 01       	movw	r30, r28
    4334:	32 96       	adiw	r30, 0x02	; 2
    4336:	44 c0       	rjmp	.+136    	; 0x43c0 <malloc+0x124>
    4338:	fe 01       	movw	r30, r28
    433a:	e2 0f       	add	r30, r18
    433c:	f3 1f       	adc	r31, r19
    433e:	81 93       	st	Z+, r24
    4340:	91 93       	st	Z+, r25
    4342:	22 50       	subi	r18, 0x02	; 2
    4344:	31 09       	sbc	r19, r1
    4346:	39 83       	std	Y+1, r19	; 0x01
    4348:	28 83       	st	Y, r18
    434a:	3a c0       	rjmp	.+116    	; 0x43c0 <malloc+0x124>
    434c:	20 91 ac 07 	lds	r18, 0x07AC	; 0x8007ac <__brkval>
    4350:	30 91 ad 07 	lds	r19, 0x07AD	; 0x8007ad <__brkval+0x1>
    4354:	23 2b       	or	r18, r19
    4356:	41 f4       	brne	.+16     	; 0x4368 <malloc+0xcc>
    4358:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    435c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4360:	30 93 ad 07 	sts	0x07AD, r19	; 0x8007ad <__brkval+0x1>
    4364:	20 93 ac 07 	sts	0x07AC, r18	; 0x8007ac <__brkval>
    4368:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    436c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4370:	21 15       	cp	r18, r1
    4372:	31 05       	cpc	r19, r1
    4374:	41 f4       	brne	.+16     	; 0x4386 <malloc+0xea>
    4376:	2d b7       	in	r18, 0x3d	; 61
    4378:	3e b7       	in	r19, 0x3e	; 62
    437a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    437e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4382:	24 1b       	sub	r18, r20
    4384:	35 0b       	sbc	r19, r21
    4386:	e0 91 ac 07 	lds	r30, 0x07AC	; 0x8007ac <__brkval>
    438a:	f0 91 ad 07 	lds	r31, 0x07AD	; 0x8007ad <__brkval+0x1>
    438e:	e2 17       	cp	r30, r18
    4390:	f3 07       	cpc	r31, r19
    4392:	a0 f4       	brcc	.+40     	; 0x43bc <malloc+0x120>
    4394:	2e 1b       	sub	r18, r30
    4396:	3f 0b       	sbc	r19, r31
    4398:	28 17       	cp	r18, r24
    439a:	39 07       	cpc	r19, r25
    439c:	78 f0       	brcs	.+30     	; 0x43bc <malloc+0x120>
    439e:	ac 01       	movw	r20, r24
    43a0:	4e 5f       	subi	r20, 0xFE	; 254
    43a2:	5f 4f       	sbci	r21, 0xFF	; 255
    43a4:	24 17       	cp	r18, r20
    43a6:	35 07       	cpc	r19, r21
    43a8:	48 f0       	brcs	.+18     	; 0x43bc <malloc+0x120>
    43aa:	4e 0f       	add	r20, r30
    43ac:	5f 1f       	adc	r21, r31
    43ae:	50 93 ad 07 	sts	0x07AD, r21	; 0x8007ad <__brkval+0x1>
    43b2:	40 93 ac 07 	sts	0x07AC, r20	; 0x8007ac <__brkval>
    43b6:	81 93       	st	Z+, r24
    43b8:	91 93       	st	Z+, r25
    43ba:	02 c0       	rjmp	.+4      	; 0x43c0 <malloc+0x124>
    43bc:	e0 e0       	ldi	r30, 0x00	; 0
    43be:	f0 e0       	ldi	r31, 0x00	; 0
    43c0:	cf 01       	movw	r24, r30
    43c2:	df 91       	pop	r29
    43c4:	cf 91       	pop	r28
    43c6:	1f 91       	pop	r17
    43c8:	0f 91       	pop	r16
    43ca:	08 95       	ret

000043cc <free>:
    43cc:	cf 93       	push	r28
    43ce:	df 93       	push	r29
    43d0:	00 97       	sbiw	r24, 0x00	; 0
    43d2:	09 f4       	brne	.+2      	; 0x43d6 <free+0xa>
    43d4:	81 c0       	rjmp	.+258    	; 0x44d8 <free+0x10c>
    43d6:	fc 01       	movw	r30, r24
    43d8:	32 97       	sbiw	r30, 0x02	; 2
    43da:	13 82       	std	Z+3, r1	; 0x03
    43dc:	12 82       	std	Z+2, r1	; 0x02
    43de:	a0 91 ae 07 	lds	r26, 0x07AE	; 0x8007ae <__flp>
    43e2:	b0 91 af 07 	lds	r27, 0x07AF	; 0x8007af <__flp+0x1>
    43e6:	10 97       	sbiw	r26, 0x00	; 0
    43e8:	81 f4       	brne	.+32     	; 0x440a <free+0x3e>
    43ea:	20 81       	ld	r18, Z
    43ec:	31 81       	ldd	r19, Z+1	; 0x01
    43ee:	82 0f       	add	r24, r18
    43f0:	93 1f       	adc	r25, r19
    43f2:	20 91 ac 07 	lds	r18, 0x07AC	; 0x8007ac <__brkval>
    43f6:	30 91 ad 07 	lds	r19, 0x07AD	; 0x8007ad <__brkval+0x1>
    43fa:	28 17       	cp	r18, r24
    43fc:	39 07       	cpc	r19, r25
    43fe:	51 f5       	brne	.+84     	; 0x4454 <free+0x88>
    4400:	f0 93 ad 07 	sts	0x07AD, r31	; 0x8007ad <__brkval+0x1>
    4404:	e0 93 ac 07 	sts	0x07AC, r30	; 0x8007ac <__brkval>
    4408:	67 c0       	rjmp	.+206    	; 0x44d8 <free+0x10c>
    440a:	ed 01       	movw	r28, r26
    440c:	20 e0       	ldi	r18, 0x00	; 0
    440e:	30 e0       	ldi	r19, 0x00	; 0
    4410:	ce 17       	cp	r28, r30
    4412:	df 07       	cpc	r29, r31
    4414:	40 f4       	brcc	.+16     	; 0x4426 <free+0x5a>
    4416:	4a 81       	ldd	r20, Y+2	; 0x02
    4418:	5b 81       	ldd	r21, Y+3	; 0x03
    441a:	9e 01       	movw	r18, r28
    441c:	41 15       	cp	r20, r1
    441e:	51 05       	cpc	r21, r1
    4420:	f1 f0       	breq	.+60     	; 0x445e <free+0x92>
    4422:	ea 01       	movw	r28, r20
    4424:	f5 cf       	rjmp	.-22     	; 0x4410 <free+0x44>
    4426:	d3 83       	std	Z+3, r29	; 0x03
    4428:	c2 83       	std	Z+2, r28	; 0x02
    442a:	40 81       	ld	r20, Z
    442c:	51 81       	ldd	r21, Z+1	; 0x01
    442e:	84 0f       	add	r24, r20
    4430:	95 1f       	adc	r25, r21
    4432:	c8 17       	cp	r28, r24
    4434:	d9 07       	cpc	r29, r25
    4436:	59 f4       	brne	.+22     	; 0x444e <free+0x82>
    4438:	88 81       	ld	r24, Y
    443a:	99 81       	ldd	r25, Y+1	; 0x01
    443c:	84 0f       	add	r24, r20
    443e:	95 1f       	adc	r25, r21
    4440:	02 96       	adiw	r24, 0x02	; 2
    4442:	91 83       	std	Z+1, r25	; 0x01
    4444:	80 83       	st	Z, r24
    4446:	8a 81       	ldd	r24, Y+2	; 0x02
    4448:	9b 81       	ldd	r25, Y+3	; 0x03
    444a:	93 83       	std	Z+3, r25	; 0x03
    444c:	82 83       	std	Z+2, r24	; 0x02
    444e:	21 15       	cp	r18, r1
    4450:	31 05       	cpc	r19, r1
    4452:	29 f4       	brne	.+10     	; 0x445e <free+0x92>
    4454:	f0 93 af 07 	sts	0x07AF, r31	; 0x8007af <__flp+0x1>
    4458:	e0 93 ae 07 	sts	0x07AE, r30	; 0x8007ae <__flp>
    445c:	3d c0       	rjmp	.+122    	; 0x44d8 <free+0x10c>
    445e:	e9 01       	movw	r28, r18
    4460:	fb 83       	std	Y+3, r31	; 0x03
    4462:	ea 83       	std	Y+2, r30	; 0x02
    4464:	49 91       	ld	r20, Y+
    4466:	59 91       	ld	r21, Y+
    4468:	c4 0f       	add	r28, r20
    446a:	d5 1f       	adc	r29, r21
    446c:	ec 17       	cp	r30, r28
    446e:	fd 07       	cpc	r31, r29
    4470:	61 f4       	brne	.+24     	; 0x448a <free+0xbe>
    4472:	80 81       	ld	r24, Z
    4474:	91 81       	ldd	r25, Z+1	; 0x01
    4476:	84 0f       	add	r24, r20
    4478:	95 1f       	adc	r25, r21
    447a:	02 96       	adiw	r24, 0x02	; 2
    447c:	e9 01       	movw	r28, r18
    447e:	99 83       	std	Y+1, r25	; 0x01
    4480:	88 83       	st	Y, r24
    4482:	82 81       	ldd	r24, Z+2	; 0x02
    4484:	93 81       	ldd	r25, Z+3	; 0x03
    4486:	9b 83       	std	Y+3, r25	; 0x03
    4488:	8a 83       	std	Y+2, r24	; 0x02
    448a:	e0 e0       	ldi	r30, 0x00	; 0
    448c:	f0 e0       	ldi	r31, 0x00	; 0
    448e:	12 96       	adiw	r26, 0x02	; 2
    4490:	8d 91       	ld	r24, X+
    4492:	9c 91       	ld	r25, X
    4494:	13 97       	sbiw	r26, 0x03	; 3
    4496:	00 97       	sbiw	r24, 0x00	; 0
    4498:	19 f0       	breq	.+6      	; 0x44a0 <free+0xd4>
    449a:	fd 01       	movw	r30, r26
    449c:	dc 01       	movw	r26, r24
    449e:	f7 cf       	rjmp	.-18     	; 0x448e <free+0xc2>
    44a0:	8d 91       	ld	r24, X+
    44a2:	9c 91       	ld	r25, X
    44a4:	11 97       	sbiw	r26, 0x01	; 1
    44a6:	9d 01       	movw	r18, r26
    44a8:	2e 5f       	subi	r18, 0xFE	; 254
    44aa:	3f 4f       	sbci	r19, 0xFF	; 255
    44ac:	82 0f       	add	r24, r18
    44ae:	93 1f       	adc	r25, r19
    44b0:	20 91 ac 07 	lds	r18, 0x07AC	; 0x8007ac <__brkval>
    44b4:	30 91 ad 07 	lds	r19, 0x07AD	; 0x8007ad <__brkval+0x1>
    44b8:	28 17       	cp	r18, r24
    44ba:	39 07       	cpc	r19, r25
    44bc:	69 f4       	brne	.+26     	; 0x44d8 <free+0x10c>
    44be:	30 97       	sbiw	r30, 0x00	; 0
    44c0:	29 f4       	brne	.+10     	; 0x44cc <free+0x100>
    44c2:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <__flp+0x1>
    44c6:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <__flp>
    44ca:	02 c0       	rjmp	.+4      	; 0x44d0 <free+0x104>
    44cc:	13 82       	std	Z+3, r1	; 0x03
    44ce:	12 82       	std	Z+2, r1	; 0x02
    44d0:	b0 93 ad 07 	sts	0x07AD, r27	; 0x8007ad <__brkval+0x1>
    44d4:	a0 93 ac 07 	sts	0x07AC, r26	; 0x8007ac <__brkval>
    44d8:	df 91       	pop	r29
    44da:	cf 91       	pop	r28
    44dc:	08 95       	ret

000044de <memcpy>:
    44de:	fb 01       	movw	r30, r22
    44e0:	dc 01       	movw	r26, r24
    44e2:	02 c0       	rjmp	.+4      	; 0x44e8 <memcpy+0xa>
    44e4:	01 90       	ld	r0, Z+
    44e6:	0d 92       	st	X+, r0
    44e8:	41 50       	subi	r20, 0x01	; 1
    44ea:	50 40       	sbci	r21, 0x00	; 0
    44ec:	d8 f7       	brcc	.-10     	; 0x44e4 <memcpy+0x6>
    44ee:	08 95       	ret

000044f0 <memset>:
    44f0:	dc 01       	movw	r26, r24
    44f2:	01 c0       	rjmp	.+2      	; 0x44f6 <memset+0x6>
    44f4:	6d 93       	st	X+, r22
    44f6:	41 50       	subi	r20, 0x01	; 1
    44f8:	50 40       	sbci	r21, 0x00	; 0
    44fa:	e0 f7       	brcc	.-8      	; 0x44f4 <memset+0x4>
    44fc:	08 95       	ret

000044fe <_exit>:
    44fe:	f8 94       	cli

00004500 <__stop_program>:
    4500:	ff cf       	rjmp	.-2      	; 0x4500 <__stop_program>
