
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00003aca  00003b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003aca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ec  00800142  00800142  00003ba0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003ba0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003bd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e8  00000000  00000000  00003c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004108  00000000  00000000  000040f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000126f  00000000  00000000  00008200  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037aa  00000000  00000000  0000946f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013b4  00000000  00000000  0000cc1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c6f  00000000  00000000  0000dfd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a20  00000000  00000000  0000fc3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  0001265f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__ctors_end>
       4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      34:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__vector_13>
      38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      40:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__vector_16>
      44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      50:	0c 94 25 0c 	jmp	0x184a	; 0x184a <__vector_20>
      54:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__vector_21>
      58:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      5c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      60:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      64:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      68:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      6c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      70:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__vector_28>
      74:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__vector_29>
      78:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	08 00       	.word	0x0008	; ????
      a6:	00 00       	nop
      a8:	be 92       	st	-X, r11
      aa:	24 49       	sbci	r18, 0x94	; 148
      ac:	12 3e       	cpi	r17, 0xE2	; 226
      ae:	ab aa       	std	Y+51, r10	; 0x33
      b0:	aa 2a       	or	r10, r26
      b2:	be cd       	rjmp	.-1156   	; 0xfffffc30 <__eeprom_end+0xff7efc30>
      b4:	cc cc       	rjmp	.-1640   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
      b6:	4c 3e       	cpi	r20, 0xEC	; 236
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	be ab       	std	Y+54, r27	; 0x36
      be:	aa aa       	std	Y+50, r10	; 0x32
      c0:	aa 3e       	cpi	r26, 0xEA	; 234
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	bf 00       	.word	0x00bf	; ????
      c8:	00 00       	nop
      ca:	80 3f       	cpi	r24, 0xF0	; 240
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 08       	sbc	r0, r0
      d2:	41 78       	andi	r20, 0x81	; 129
      d4:	d3 bb       	out	0x13, r29	; 19
      d6:	43 87       	std	Z+11, r20	; 0x0b
      d8:	d1 13       	cpse	r29, r17
      da:	3d 19       	sub	r19, r13
      dc:	0e 3c       	cpi	r16, 0xCE	; 206
      de:	c3 bd       	out	0x23, r28	; 35
      e0:	42 82       	std	Z+2, r4	; 0x02
      e2:	ad 2b       	or	r26, r29
      e4:	3e 68       	ori	r19, 0x8E	; 142
      e6:	ec 82       	std	Y+4, r14	; 0x04
      e8:	76 be       	out	0x36, r7	; 54
      ea:	d9 8f       	std	Y+25, r29	; 0x19
      ec:	e1 a9       	ldd	r30, Z+49	; 0x31
      ee:	3e 4c       	sbci	r19, 0xCE	; 206
      f0:	80 ef       	ldi	r24, 0xF0	; 240
      f2:	ff be       	out	0x3f, r15	; 63
      f4:	01 c4       	rjmp	.+2050   	; 0x8f8 <__vector_16+0x2>
      f6:	ff 7f       	andi	r31, 0xFF	; 255
      f8:	3f 00       	.word	0x003f	; ????
      fa:	00 00       	nop
	...

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d8 e0       	ldi	r29, 0x08	; 8
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
     10a:	11 e0       	ldi	r17, 0x01	; 1
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	ea ec       	ldi	r30, 0xCA	; 202
     112:	fa e3       	ldi	r31, 0x3A	; 58
     114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x10>
     116:	05 90       	lpm	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	a2 34       	cpi	r26, 0x42	; 66
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0xc>

00000120 <__do_clear_bss>:
     120:	27 e0       	ldi	r18, 0x07	; 7
     122:	a2 e4       	ldi	r26, 0x42	; 66
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	ae 32       	cpi	r26, 0x2E	; 46
     12c:	b2 07       	cpc	r27, r18
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
     130:	0e 94 cb 03 	call	0x796	; 0x796 <main>
     134:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <_exit>

00000138 <__bad_interrupt>:
     138:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013c <make_frame>:
		case RIGHT:
		if (player.direction == UP || player.direction == DOWN)
		player.direction = direction;
		break;
	}
}
     13c:	cf 92       	push	r12
     13e:	df 92       	push	r13
     140:	ef 92       	push	r14
     142:	ff 92       	push	r15
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	00 d0       	rcall	.+0      	; 0x14a <make_frame+0xe>
     14a:	00 d0       	rcall	.+0      	; 0x14c <make_frame+0x10>
     14c:	00 d0       	rcall	.+0      	; 0x14e <make_frame+0x12>
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
     152:	9e 83       	std	Y+6, r25	; 0x06
     154:	8d 83       	std	Y+5, r24	; 0x05
     156:	1a 82       	std	Y+2, r1	; 0x02
     158:	19 82       	std	Y+1, r1	; 0x01
     15a:	6b c0       	rjmp	.+214    	; 0x232 <make_frame+0xf6>
     15c:	1c 82       	std	Y+4, r1	; 0x04
     15e:	1b 82       	std	Y+3, r1	; 0x03
     160:	5e c0       	rjmp	.+188    	; 0x21e <make_frame+0xe2>
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	9a 81       	ldd	r25, Y+2	; 0x02
     166:	88 0f       	add	r24, r24
     168:	99 1f       	adc	r25, r25
     16a:	9c 01       	movw	r18, r24
     16c:	22 0f       	add	r18, r18
     16e:	33 1f       	adc	r19, r19
     170:	22 0f       	add	r18, r18
     172:	33 1f       	adc	r19, r19
     174:	82 0f       	add	r24, r18
     176:	93 1f       	adc	r25, r19
     178:	2b 81       	ldd	r18, Y+3	; 0x03
     17a:	3c 81       	ldd	r19, Y+4	; 0x04
     17c:	82 0f       	add	r24, r18
     17e:	93 1f       	adc	r25, r19
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	82 5a       	subi	r24, 0xA2	; 162
     186:	9e 4f       	sbci	r25, 0xFE	; 254
     188:	fc 01       	movw	r30, r24
     18a:	80 81       	ld	r24, Z
     18c:	91 81       	ldd	r25, Z+1	; 0x01
     18e:	89 2b       	or	r24, r25
     190:	09 f4       	brne	.+2      	; 0x194 <make_frame+0x58>
     192:	40 c0       	rjmp	.+128    	; 0x214 <make_frame+0xd8>
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	9a 81       	ldd	r25, Y+2	; 0x02
     198:	88 0f       	add	r24, r24
     19a:	99 1f       	adc	r25, r25
     19c:	8e 5b       	subi	r24, 0xBE	; 190
     19e:	9e 4f       	sbci	r25, 0xFE	; 254
     1a0:	fc 01       	movw	r30, r24
     1a2:	80 81       	ld	r24, Z
     1a4:	91 81       	ldd	r25, Z+1	; 0x01
     1a6:	cc 01       	movw	r24, r24
     1a8:	a0 e0       	ldi	r26, 0x00	; 0
     1aa:	b0 e0       	ldi	r27, 0x00	; 0
     1ac:	bc 01       	movw	r22, r24
     1ae:	cd 01       	movw	r24, r26
     1b0:	0e 94 1e 19 	call	0x323c	; 0x323c <__floatunsisf>
     1b4:	6b 01       	movw	r12, r22
     1b6:	7c 01       	movw	r14, r24
     1b8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ba:	9c 81       	ldd	r25, Y+4	; 0x04
     1bc:	09 2e       	mov	r0, r25
     1be:	00 0c       	add	r0, r0
     1c0:	aa 0b       	sbc	r26, r26
     1c2:	bb 0b       	sbc	r27, r27
     1c4:	bc 01       	movw	r22, r24
     1c6:	cd 01       	movw	r24, r26
     1c8:	0e 94 20 19 	call	0x3240	; 0x3240 <__floatsisf>
     1cc:	dc 01       	movw	r26, r24
     1ce:	cb 01       	movw	r24, r22
     1d0:	9c 01       	movw	r18, r24
     1d2:	ad 01       	movw	r20, r26
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	90 e4       	ldi	r25, 0x40	; 64
     1dc:	0e 94 ac 19 	call	0x3358	; 0x3358 <pow>
     1e0:	dc 01       	movw	r26, r24
     1e2:	cb 01       	movw	r24, r22
     1e4:	9c 01       	movw	r18, r24
     1e6:	ad 01       	movw	r20, r26
     1e8:	c7 01       	movw	r24, r14
     1ea:	b6 01       	movw	r22, r12
     1ec:	0e 94 83 18 	call	0x3106	; 0x3106 <__addsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	bc 01       	movw	r22, r24
     1f6:	cd 01       	movw	r24, r26
     1f8:	0e 94 ef 18 	call	0x31de	; 0x31de <__fixunssfsi>
     1fc:	dc 01       	movw	r26, r24
     1fe:	cb 01       	movw	r24, r22
     200:	9c 01       	movw	r18, r24
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	9a 81       	ldd	r25, Y+2	; 0x02
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	8e 5b       	subi	r24, 0xBE	; 190
     20c:	9e 4f       	sbci	r25, 0xFE	; 254
     20e:	fc 01       	movw	r30, r24
     210:	31 83       	std	Z+1, r19	; 0x01
     212:	20 83       	st	Z, r18
     214:	8b 81       	ldd	r24, Y+3	; 0x03
     216:	9c 81       	ldd	r25, Y+4	; 0x04
     218:	01 96       	adiw	r24, 0x01	; 1
     21a:	9c 83       	std	Y+4, r25	; 0x04
     21c:	8b 83       	std	Y+3, r24	; 0x03
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	9c 81       	ldd	r25, Y+4	; 0x04
     222:	0a 97       	sbiw	r24, 0x0a	; 10
     224:	0c f4       	brge	.+2      	; 0x228 <make_frame+0xec>
     226:	9d cf       	rjmp	.-198    	; 0x162 <make_frame+0x26>
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	9a 81       	ldd	r25, Y+2	; 0x02
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	9a 83       	std	Y+2, r25	; 0x02
     230:	89 83       	std	Y+1, r24	; 0x01
     232:	89 81       	ldd	r24, Y+1	; 0x01
     234:	9a 81       	ldd	r25, Y+2	; 0x02
     236:	0e 97       	sbiw	r24, 0x0e	; 14
     238:	0c f4       	brge	.+2      	; 0x23c <make_frame+0x100>
     23a:	90 cf       	rjmp	.-224    	; 0x15c <make_frame+0x20>
     23c:	85 e0       	ldi	r24, 0x05	; 5
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 37 13 	call	0x266e	; 0x266e <vTaskDelay>
     244:	88 cf       	rjmp	.-240    	; 0x156 <make_frame+0x1a>

00000246 <die>:
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	66 e0       	ldi	r22, 0x06	; 6
     250:	85 e1       	ldi	r24, 0x15	; 21
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	0e 94 b2 04 	call	0x964	; 0x964 <com_send_bytes>
     258:	00 00       	nop
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <move_player>:
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	29 97       	sbiw	r28, 0x09	; 9
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	09 83       	std	Y+1, r16	; 0x01
     27a:	1a 83       	std	Y+2, r17	; 0x02
     27c:	2b 83       	std	Y+3, r18	; 0x03
     27e:	3c 83       	std	Y+4, r19	; 0x04
     280:	4d 83       	std	Y+5, r20	; 0x05
     282:	5e 83       	std	Y+6, r21	; 0x06
     284:	6f 83       	std	Y+7, r22	; 0x07
     286:	78 87       	std	Y+8, r23	; 0x08
     288:	89 87       	std	Y+9, r24	; 0x09
     28a:	8d 81       	ldd	r24, Y+5	; 0x05
     28c:	88 2f       	mov	r24, r24
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	91 05       	cpc	r25, r1
     294:	b9 f0       	breq	.+46     	; 0x2c4 <move_player+0x64>
     296:	82 30       	cpi	r24, 0x02	; 2
     298:	91 05       	cpc	r25, r1
     29a:	1c f4       	brge	.+6      	; 0x2a2 <move_player+0x42>
     29c:	89 2b       	or	r24, r25
     29e:	39 f0       	breq	.+14     	; 0x2ae <move_player+0x4e>
     2a0:	37 c0       	rjmp	.+110    	; 0x310 <move_player+0xb0>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	91 05       	cpc	r25, r1
     2a6:	c1 f0       	breq	.+48     	; 0x2d8 <move_player+0x78>
     2a8:	03 97       	sbiw	r24, 0x03	; 3
     2aa:	09 f1       	breq	.+66     	; 0x2ee <move_player+0x8e>
     2ac:	31 c0       	rjmp	.+98     	; 0x310 <move_player+0xb0>
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	9a 81       	ldd	r25, Y+2	; 0x02
     2b2:	18 16       	cp	r1, r24
     2b4:	19 06       	cpc	r1, r25
     2b6:	2c f5       	brge	.+74     	; 0x302 <move_player+0xa2>
     2b8:	89 81       	ldd	r24, Y+1	; 0x01
     2ba:	9a 81       	ldd	r25, Y+2	; 0x02
     2bc:	01 97       	sbiw	r24, 0x01	; 1
     2be:	9a 83       	std	Y+2, r25	; 0x02
     2c0:	89 83       	std	Y+1, r24	; 0x01
     2c2:	1f c0       	rjmp	.+62     	; 0x302 <move_player+0xa2>
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	9a 81       	ldd	r25, Y+2	; 0x02
     2c8:	0e 97       	sbiw	r24, 0x0e	; 14
     2ca:	ec f4       	brge	.+58     	; 0x306 <move_player+0xa6>
     2cc:	89 81       	ldd	r24, Y+1	; 0x01
     2ce:	9a 81       	ldd	r25, Y+2	; 0x02
     2d0:	01 96       	adiw	r24, 0x01	; 1
     2d2:	9a 83       	std	Y+2, r25	; 0x02
     2d4:	89 83       	std	Y+1, r24	; 0x01
     2d6:	17 c0       	rjmp	.+46     	; 0x306 <move_player+0xa6>
     2d8:	8b 81       	ldd	r24, Y+3	; 0x03
     2da:	9c 81       	ldd	r25, Y+4	; 0x04
     2dc:	18 16       	cp	r1, r24
     2de:	19 06       	cpc	r1, r25
     2e0:	a4 f4       	brge	.+40     	; 0x30a <move_player+0xaa>
     2e2:	8b 81       	ldd	r24, Y+3	; 0x03
     2e4:	9c 81       	ldd	r25, Y+4	; 0x04
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	9c 83       	std	Y+4, r25	; 0x04
     2ea:	8b 83       	std	Y+3, r24	; 0x03
     2ec:	0e c0       	rjmp	.+28     	; 0x30a <move_player+0xaa>
     2ee:	8b 81       	ldd	r24, Y+3	; 0x03
     2f0:	9c 81       	ldd	r25, Y+4	; 0x04
     2f2:	0a 97       	sbiw	r24, 0x0a	; 10
     2f4:	64 f4       	brge	.+24     	; 0x30e <move_player+0xae>
     2f6:	8b 81       	ldd	r24, Y+3	; 0x03
     2f8:	9c 81       	ldd	r25, Y+4	; 0x04
     2fa:	01 96       	adiw	r24, 0x01	; 1
     2fc:	9c 83       	std	Y+4, r25	; 0x04
     2fe:	8b 83       	std	Y+3, r24	; 0x03
     300:	06 c0       	rjmp	.+12     	; 0x30e <move_player+0xae>
     302:	00 00       	nop
     304:	05 c0       	rjmp	.+10     	; 0x310 <move_player+0xb0>
     306:	00 00       	nop
     308:	03 c0       	rjmp	.+6      	; 0x310 <move_player+0xb0>
     30a:	00 00       	nop
     30c:	01 c0       	rjmp	.+2      	; 0x310 <move_player+0xb0>
     30e:	00 00       	nop
     310:	00 00       	nop
     312:	29 96       	adiw	r28, 0x09	; 9
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	f8 94       	cli
     318:	de bf       	out	0x3e, r29	; 62
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	cd bf       	out	0x3d, r28	; 61
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	08 95       	ret

00000328 <game_processing>:
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	63 97       	sbiw	r28, 0x13	; 19
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	f8 94       	cli
     33a:	de bf       	out	0x3e, r29	; 62
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	cd bf       	out	0x3d, r28	; 61
     340:	9b 8b       	std	Y+19, r25	; 0x13
     342:	8a 8b       	std	Y+18, r24	; 0x12
     344:	19 82       	std	Y+1, r1	; 0x01
     346:	84 e0       	ldi	r24, 0x04	; 4
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <playerOne+0x1>
     34e:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <playerOne>
     352:	84 e0       	ldi	r24, 0x04	; 4
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <playerOne+0x3>
     35a:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <playerOne+0x2>
     35e:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <playerOne+0x4>
     362:	85 e0       	ldi	r24, 0x05	; 5
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	9f 87       	std	Y+15, r25	; 0x0f
     368:	8e 87       	std	Y+14, r24	; 0x0e
     36a:	85 e0       	ldi	r24, 0x05	; 5
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	99 8b       	std	Y+17, r25	; 0x11
     370:	88 8b       	std	Y+16, r24	; 0x10
     372:	8e 85       	ldd	r24, Y+14	; 0x0e
     374:	9f 85       	ldd	r25, Y+15	; 0x0f
     376:	a8 89       	ldd	r26, Y+16	; 0x10
     378:	b9 89       	ldd	r27, Y+17	; 0x11
     37a:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <playerOne+0x5>
     37e:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <playerOne+0x6>
     382:	a0 93 7d 02 	sts	0x027D, r26	; 0x80027d <playerOne+0x7>
     386:	b0 93 7e 02 	sts	0x027E, r27	; 0x80027e <playerOne+0x8>
     38a:	8a e0       	ldi	r24, 0x0A	; 10
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <playerTwo+0x1>
     392:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <playerTwo>
     396:	85 e0       	ldi	r24, 0x05	; 5
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <playerTwo+0x3>
     39e:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <playerTwo+0x2>
     3a2:	83 e0       	ldi	r24, 0x03	; 3
     3a4:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <playerTwo+0x4>
     3a8:	4d c1       	rjmp	.+666    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
     3aa:	1b 82       	std	Y+3, r1	; 0x03
     3ac:	1a 82       	std	Y+2, r1	; 0x02
     3ae:	3f c0       	rjmp	.+126    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     3b0:	1d 82       	std	Y+5, r1	; 0x05
     3b2:	1c 82       	std	Y+4, r1	; 0x04
     3b4:	33 c0       	rjmp	.+102    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     3b6:	8a 81       	ldd	r24, Y+2	; 0x02
     3b8:	9b 81       	ldd	r25, Y+3	; 0x03
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	9c 01       	movw	r18, r24
     3c0:	22 0f       	add	r18, r18
     3c2:	33 1f       	adc	r19, r19
     3c4:	22 0f       	add	r18, r18
     3c6:	33 1f       	adc	r19, r19
     3c8:	82 0f       	add	r24, r18
     3ca:	93 1f       	adc	r25, r19
     3cc:	2c 81       	ldd	r18, Y+4	; 0x04
     3ce:	3d 81       	ldd	r19, Y+5	; 0x05
     3d0:	82 0f       	add	r24, r18
     3d2:	93 1f       	adc	r25, r19
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	82 5a       	subi	r24, 0xA2	; 162
     3da:	9e 4f       	sbci	r25, 0xFE	; 254
     3dc:	fc 01       	movw	r30, r24
     3de:	80 81       	ld	r24, Z
     3e0:	91 81       	ldd	r25, Z+1	; 0x01
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	b1 f4       	brne	.+44     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3e6:	8a 81       	ldd	r24, Y+2	; 0x02
     3e8:	9b 81       	ldd	r25, Y+3	; 0x03
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	9c 01       	movw	r18, r24
     3f0:	22 0f       	add	r18, r18
     3f2:	33 1f       	adc	r19, r19
     3f4:	22 0f       	add	r18, r18
     3f6:	33 1f       	adc	r19, r19
     3f8:	82 0f       	add	r24, r18
     3fa:	93 1f       	adc	r25, r19
     3fc:	2c 81       	ldd	r18, Y+4	; 0x04
     3fe:	3d 81       	ldd	r19, Y+5	; 0x05
     400:	82 0f       	add	r24, r18
     402:	93 1f       	adc	r25, r19
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	82 5a       	subi	r24, 0xA2	; 162
     40a:	9e 4f       	sbci	r25, 0xFE	; 254
     40c:	fc 01       	movw	r30, r24
     40e:	11 82       	std	Z+1, r1	; 0x01
     410:	10 82       	st	Z, r1
     412:	8c 81       	ldd	r24, Y+4	; 0x04
     414:	9d 81       	ldd	r25, Y+5	; 0x05
     416:	01 96       	adiw	r24, 0x01	; 1
     418:	9d 83       	std	Y+5, r25	; 0x05
     41a:	8c 83       	std	Y+4, r24	; 0x04
     41c:	8c 81       	ldd	r24, Y+4	; 0x04
     41e:	9d 81       	ldd	r25, Y+5	; 0x05
     420:	0a 97       	sbiw	r24, 0x0a	; 10
     422:	4c f2       	brlt	.-110    	; 0x3b6 <game_processing+0x8e>
     424:	8a 81       	ldd	r24, Y+2	; 0x02
     426:	9b 81       	ldd	r25, Y+3	; 0x03
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	9b 83       	std	Y+3, r25	; 0x03
     42c:	8a 83       	std	Y+2, r24	; 0x02
     42e:	8a 81       	ldd	r24, Y+2	; 0x02
     430:	9b 81       	ldd	r25, Y+3	; 0x03
     432:	0e 97       	sbiw	r24, 0x0e	; 14
     434:	0c f4       	brge	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     436:	bc cf       	rjmp	.-136    	; 0x3b0 <game_processing+0x88>
     438:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <playerOne>
     43c:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <playerOne+0x1>
     440:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <playerOne+0x5>
     444:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <playerOne+0x6>
     448:	28 17       	cp	r18, r24
     44a:	39 07       	cpc	r19, r25
     44c:	09 f0       	breq	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44e:	4e c0       	rjmp	.+156    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     450:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <playerOne+0x2>
     454:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <playerOne+0x3>
     458:	9f 83       	std	Y+7, r25	; 0x07
     45a:	8e 83       	std	Y+6, r24	; 0x06
     45c:	3c c0       	rjmp	.+120    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     45e:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <playerOne+0x5>
     462:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <playerOne+0x6>
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	9c 01       	movw	r18, r24
     46c:	22 0f       	add	r18, r18
     46e:	33 1f       	adc	r19, r19
     470:	22 0f       	add	r18, r18
     472:	33 1f       	adc	r19, r19
     474:	82 0f       	add	r24, r18
     476:	93 1f       	adc	r25, r19
     478:	2e 81       	ldd	r18, Y+6	; 0x06
     47a:	3f 81       	ldd	r19, Y+7	; 0x07
     47c:	82 0f       	add	r24, r18
     47e:	93 1f       	adc	r25, r19
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	82 5a       	subi	r24, 0xA2	; 162
     486:	9e 4f       	sbci	r25, 0xFE	; 254
     488:	fc 01       	movw	r30, r24
     48a:	80 81       	ld	r24, Z
     48c:	91 81       	ldd	r25, Z+1	; 0x01
     48e:	02 97       	sbiw	r24, 0x02	; 2
     490:	19 f4       	brne	.+6      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	89 83       	std	Y+1, r24	; 0x01
     496:	1a c0       	rjmp	.+52     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     498:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <playerOne+0x5>
     49c:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <playerOne+0x6>
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	9c 01       	movw	r18, r24
     4a6:	22 0f       	add	r18, r18
     4a8:	33 1f       	adc	r19, r19
     4aa:	22 0f       	add	r18, r18
     4ac:	33 1f       	adc	r19, r19
     4ae:	82 0f       	add	r24, r18
     4b0:	93 1f       	adc	r25, r19
     4b2:	2e 81       	ldd	r18, Y+6	; 0x06
     4b4:	3f 81       	ldd	r19, Y+7	; 0x07
     4b6:	82 0f       	add	r24, r18
     4b8:	93 1f       	adc	r25, r19
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	82 5a       	subi	r24, 0xA2	; 162
     4c0:	9e 4f       	sbci	r25, 0xFE	; 254
     4c2:	21 e0       	ldi	r18, 0x01	; 1
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	fc 01       	movw	r30, r24
     4c8:	31 83       	std	Z+1, r19	; 0x01
     4ca:	20 83       	st	Z, r18
     4cc:	8e 81       	ldd	r24, Y+6	; 0x06
     4ce:	9f 81       	ldd	r25, Y+7	; 0x07
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	9f 83       	std	Y+7, r25	; 0x07
     4d4:	8e 83       	std	Y+6, r24	; 0x06
     4d6:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <playerOne+0x7>
     4da:	30 91 7e 02 	lds	r19, 0x027E	; 0x80027e <playerOne+0x8>
     4de:	8e 81       	ldd	r24, Y+6	; 0x06
     4e0:	9f 81       	ldd	r25, Y+7	; 0x07
     4e2:	28 17       	cp	r18, r24
     4e4:	39 07       	cpc	r19, r25
     4e6:	0c f0       	brlt	.+2      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4e8:	ba cf       	rjmp	.-140    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     4ea:	4d c0       	rjmp	.+154    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     4ec:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <playerOne>
     4f0:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <playerOne+0x1>
     4f4:	99 87       	std	Y+9, r25	; 0x09
     4f6:	88 87       	std	Y+8, r24	; 0x08
     4f8:	3c c0       	rjmp	.+120    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     4fa:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <playerOne+0x7>
     4fe:	30 91 7e 02 	lds	r19, 0x027E	; 0x80027e <playerOne+0x8>
     502:	88 85       	ldd	r24, Y+8	; 0x08
     504:	99 85       	ldd	r25, Y+9	; 0x09
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	ac 01       	movw	r20, r24
     50c:	44 0f       	add	r20, r20
     50e:	55 1f       	adc	r21, r21
     510:	44 0f       	add	r20, r20
     512:	55 1f       	adc	r21, r21
     514:	84 0f       	add	r24, r20
     516:	95 1f       	adc	r25, r21
     518:	82 0f       	add	r24, r18
     51a:	93 1f       	adc	r25, r19
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	82 5a       	subi	r24, 0xA2	; 162
     522:	9e 4f       	sbci	r25, 0xFE	; 254
     524:	fc 01       	movw	r30, r24
     526:	80 81       	ld	r24, Z
     528:	91 81       	ldd	r25, Z+1	; 0x01
     52a:	02 97       	sbiw	r24, 0x02	; 2
     52c:	19 f4       	brne	.+6      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	89 83       	std	Y+1, r24	; 0x01
     532:	1a c0       	rjmp	.+52     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
     534:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <playerOne+0x7>
     538:	30 91 7e 02 	lds	r19, 0x027E	; 0x80027e <playerOne+0x8>
     53c:	88 85       	ldd	r24, Y+8	; 0x08
     53e:	99 85       	ldd	r25, Y+9	; 0x09
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	ac 01       	movw	r20, r24
     546:	44 0f       	add	r20, r20
     548:	55 1f       	adc	r21, r21
     54a:	44 0f       	add	r20, r20
     54c:	55 1f       	adc	r21, r21
     54e:	84 0f       	add	r24, r20
     550:	95 1f       	adc	r25, r21
     552:	82 0f       	add	r24, r18
     554:	93 1f       	adc	r25, r19
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	82 5a       	subi	r24, 0xA2	; 162
     55c:	9e 4f       	sbci	r25, 0xFE	; 254
     55e:	21 e0       	ldi	r18, 0x01	; 1
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	fc 01       	movw	r30, r24
     564:	31 83       	std	Z+1, r19	; 0x01
     566:	20 83       	st	Z, r18
     568:	88 85       	ldd	r24, Y+8	; 0x08
     56a:	99 85       	ldd	r25, Y+9	; 0x09
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	99 87       	std	Y+9, r25	; 0x09
     570:	88 87       	std	Y+8, r24	; 0x08
     572:	20 91 7b 02 	lds	r18, 0x027B	; 0x80027b <playerOne+0x5>
     576:	30 91 7c 02 	lds	r19, 0x027C	; 0x80027c <playerOne+0x6>
     57a:	88 85       	ldd	r24, Y+8	; 0x08
     57c:	99 85       	ldd	r25, Y+9	; 0x09
     57e:	28 17       	cp	r18, r24
     580:	39 07       	cpc	r19, r25
     582:	0c f0       	brlt	.+2      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     584:	ba cf       	rjmp	.-140    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     586:	1b 86       	std	Y+11, r1	; 0x0b
     588:	1a 86       	std	Y+10, r1	; 0x0a
     58a:	3f c0       	rjmp	.+126    	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
     58c:	1d 86       	std	Y+13, r1	; 0x0d
     58e:	1c 86       	std	Y+12, r1	; 0x0c
     590:	33 c0       	rjmp	.+102    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
     592:	8a 85       	ldd	r24, Y+10	; 0x0a
     594:	9b 85       	ldd	r25, Y+11	; 0x0b
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	9c 01       	movw	r18, r24
     59c:	22 0f       	add	r18, r18
     59e:	33 1f       	adc	r19, r19
     5a0:	22 0f       	add	r18, r18
     5a2:	33 1f       	adc	r19, r19
     5a4:	82 0f       	add	r24, r18
     5a6:	93 1f       	adc	r25, r19
     5a8:	2c 85       	ldd	r18, Y+12	; 0x0c
     5aa:	3d 85       	ldd	r19, Y+13	; 0x0d
     5ac:	82 0f       	add	r24, r18
     5ae:	93 1f       	adc	r25, r19
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	82 5a       	subi	r24, 0xA2	; 162
     5b6:	9e 4f       	sbci	r25, 0xFE	; 254
     5b8:	fc 01       	movw	r30, r24
     5ba:	80 81       	ld	r24, Z
     5bc:	91 81       	ldd	r25, Z+1	; 0x01
     5be:	02 97       	sbiw	r24, 0x02	; 2
     5c0:	b1 f4       	brne	.+44     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
     5c2:	8a 85       	ldd	r24, Y+10	; 0x0a
     5c4:	9b 85       	ldd	r25, Y+11	; 0x0b
     5c6:	88 0f       	add	r24, r24
     5c8:	99 1f       	adc	r25, r25
     5ca:	9c 01       	movw	r18, r24
     5cc:	22 0f       	add	r18, r18
     5ce:	33 1f       	adc	r19, r19
     5d0:	22 0f       	add	r18, r18
     5d2:	33 1f       	adc	r19, r19
     5d4:	82 0f       	add	r24, r18
     5d6:	93 1f       	adc	r25, r19
     5d8:	2c 85       	ldd	r18, Y+12	; 0x0c
     5da:	3d 85       	ldd	r19, Y+13	; 0x0d
     5dc:	82 0f       	add	r24, r18
     5de:	93 1f       	adc	r25, r19
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	82 5a       	subi	r24, 0xA2	; 162
     5e6:	9e 4f       	sbci	r25, 0xFE	; 254
     5e8:	fc 01       	movw	r30, r24
     5ea:	11 82       	std	Z+1, r1	; 0x01
     5ec:	10 82       	st	Z, r1
     5ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     5f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	9d 87       	std	Y+13, r25	; 0x0d
     5f6:	8c 87       	std	Y+12, r24	; 0x0c
     5f8:	8c 85       	ldd	r24, Y+12	; 0x0c
     5fa:	9d 85       	ldd	r25, Y+13	; 0x0d
     5fc:	0a 97       	sbiw	r24, 0x0a	; 10
     5fe:	4c f2       	brlt	.-110    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
     600:	8a 85       	ldd	r24, Y+10	; 0x0a
     602:	9b 85       	ldd	r25, Y+11	; 0x0b
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	9b 87       	std	Y+11, r25	; 0x0b
     608:	8a 87       	std	Y+10, r24	; 0x0a
     60a:	8a 85       	ldd	r24, Y+10	; 0x0a
     60c:	9b 85       	ldd	r25, Y+11	; 0x0b
     60e:	0e 97       	sbiw	r24, 0x0e	; 14
     610:	0c f4       	brge	.+2      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
     612:	bc cf       	rjmp	.-136    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
     614:	00 91 76 02 	lds	r16, 0x0276	; 0x800276 <playerOne>
     618:	10 91 77 02 	lds	r17, 0x0277	; 0x800277 <playerOne+0x1>
     61c:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <playerOne+0x2>
     620:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <playerOne+0x3>
     624:	40 91 7a 02 	lds	r20, 0x027A	; 0x80027a <playerOne+0x4>
     628:	50 91 7b 02 	lds	r21, 0x027B	; 0x80027b <playerOne+0x5>
     62c:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <playerOne+0x6>
     630:	70 91 7d 02 	lds	r23, 0x027D	; 0x80027d <playerOne+0x7>
     634:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <playerOne+0x8>
     638:	0e 94 30 01 	call	0x260	; 0x260 <move_player>
     63c:	88 ee       	ldi	r24, 0xE8	; 232
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	0e 94 37 13 	call	0x266e	; 0x266e <vTaskDelay>
     644:	99 81       	ldd	r25, Y+1	; 0x01
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	89 27       	eor	r24, r25
     64a:	88 23       	and	r24, r24
     64c:	09 f0       	breq	.+2      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     64e:	ad ce       	rjmp	.-678    	; 0x3aa <game_processing+0x82>
     650:	0e 94 23 01 	call	0x246	; 0x246 <die>
     654:	a9 ce       	rjmp	.-686    	; 0x3a8 <game_processing+0x80>

00000656 <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
	// Set SER to 1
	PORTD |= _BV(PORTD2);
     65e:	8b e2       	ldi	r24, 0x2B	; 43
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	2b e2       	ldi	r18, 0x2B	; 43
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	f9 01       	movw	r30, r18
     668:	20 81       	ld	r18, Z
     66a:	24 60       	ori	r18, 0x04	; 4
     66c:	fc 01       	movw	r30, r24
     66e:	20 83       	st	Z, r18
}
     670:	00 00       	nop
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
	// one SCK pulse
	PORTD |= _BV(PORTD5);
     680:	8b e2       	ldi	r24, 0x2B	; 43
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	2b e2       	ldi	r18, 0x2B	; 43
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	f9 01       	movw	r30, r18
     68a:	20 81       	ld	r18, Z
     68c:	20 62       	ori	r18, 0x20	; 32
     68e:	fc 01       	movw	r30, r24
     690:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     692:	8b e2       	ldi	r24, 0x2B	; 43
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	2b e2       	ldi	r18, 0x2B	; 43
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	f9 01       	movw	r30, r18
     69c:	20 81       	ld	r18, Z
     69e:	2f 7d       	andi	r18, 0xDF	; 223
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
     6a4:	8b e2       	ldi	r24, 0x2B	; 43
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	2b e2       	ldi	r18, 0x2B	; 43
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	f9 01       	movw	r30, r18
     6ae:	20 81       	ld	r18, Z
     6b0:	20 61       	ori	r18, 0x10	; 16
     6b2:	fc 01       	movw	r30, r24
     6b4:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     6b6:	8b e2       	ldi	r24, 0x2B	; 43
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	2b e2       	ldi	r18, 0x2B	; 43
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	f9 01       	movw	r30, r18
     6c0:	20 81       	ld	r18, Z
     6c2:	2f 7e       	andi	r18, 0xEF	; 239
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 83       	st	Z, r18
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
     6c8:	8b e2       	ldi	r24, 0x2B	; 43
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	2b e2       	ldi	r18, 0x2B	; 43
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	f9 01       	movw	r30, r18
     6d2:	20 81       	ld	r18, Z
     6d4:	2b 7f       	andi	r18, 0xFB	; 251
     6d6:	fc 01       	movw	r30, r24
     6d8:	20 83       	st	Z, r18
}
     6da:	00 00       	nop
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <load_col_value>:

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <load_col_value+0x6>
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	9a 83       	std	Y+2, r25	; 0x02
     6ee:	89 83       	std	Y+1, r24	; 0x01
	PORTA = ~(col_value & 0xFF);
     6f0:	82 e2       	ldi	r24, 0x22	; 34
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	29 81       	ldd	r18, Y+1	; 0x01
     6f6:	20 95       	com	r18
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     6fc:	85 e2       	ldi	r24, 0x25	; 37
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	25 e2       	ldi	r18, 0x25	; 37
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	f9 01       	movw	r30, r18
     706:	20 81       	ld	r18, Z
     708:	23 60       	ori	r18, 0x03	; 3
     70a:	fc 01       	movw	r30, r24
     70c:	20 83       	st	Z, r18
	PORTB &= ~((col_value >> 8) & 0x03);
     70e:	85 e2       	ldi	r24, 0x25	; 37
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	25 e2       	ldi	r18, 0x25	; 37
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	f9 01       	movw	r30, r18
     718:	40 81       	ld	r20, Z
     71a:	29 81       	ldd	r18, Y+1	; 0x01
     71c:	3a 81       	ldd	r19, Y+2	; 0x02
     71e:	23 2f       	mov	r18, r19
     720:	33 27       	eor	r19, r19
     722:	23 70       	andi	r18, 0x03	; 3
     724:	20 95       	com	r18
     726:	24 23       	and	r18, r20
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
}
     72c:	00 00       	nop
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <handle_display>:

//-----------------------------------------
void handle_display(void)
{
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
	static uint8_t col = 0;
	
	if (col == 0)
     740:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <col.2819>
     744:	88 23       	and	r24, r24
     746:	11 f4       	brne	.+4      	; 0x74c <handle_display+0x14>
	prepare_shiftregister();
     748:	0e 94 2b 03 	call	0x656	; 0x656 <prepare_shiftregister>
	
	load_col_value(frame_buffer[col]);
     74c:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <col.2819>
     750:	88 2f       	mov	r24, r24
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	8e 5b       	subi	r24, 0xBE	; 190
     75a:	9e 4f       	sbci	r25, 0xFE	; 254
     75c:	fc 01       	movw	r30, r24
     75e:	80 81       	ld	r24, Z
     760:	91 81       	ldd	r25, Z+1	; 0x01
     762:	0e 94 71 03 	call	0x6e2	; 0x6e2 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     766:	0e 94 3c 03 	call	0x678	; 0x678 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	if (col++ > 13)
     76a:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <col.2819>
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	98 0f       	add	r25, r24
     772:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <col.2819>
     776:	8e 30       	cpi	r24, 0x0E	; 14
     778:	10 f0       	brcs	.+4      	; 0x77e <handle_display+0x46>
	col = 0;
     77a:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <col.2819>
}
     77e:	00 00       	nop
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
	//
}
     78e:	00 00       	nop
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <main>:

//-----------------------------------------
int main(void)
{
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	0f 93       	push	r16
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	00 d0       	rcall	.+0      	; 0x7a2 <main+0xc>
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     7a6:	0e 94 cc 04 	call	0x998	; 0x998 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     7aa:	8b e2       	ldi	r24, 0x2B	; 43
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	2b e2       	ldi	r18, 0x2B	; 43
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	f9 01       	movw	r30, r18
     7b4:	20 81       	ld	r18, Z
     7b6:	2f 7b       	andi	r18, 0xBF	; 191
     7b8:	fc 01       	movw	r30, r24
     7ba:	20 83       	st	Z, r18

	/* Semaphores creation */
	xGameStateSemaphore = xSemaphoreCreateMutex();
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <xQueueCreateMutex>
     7c2:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <xGameStateSemaphore+0x1>
     7c6:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <xGameStateSemaphore>
	xPlayerOneSemaphore = xSemaphoreCreateMutex();
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <xQueueCreateMutex>
     7d0:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <xPlayerOneSemaphore+0x1>
     7d4:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <xPlayerOneSemaphore>
	xPlayerTwoSemaphore = xSemaphoreCreateMutex();
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <xQueueCreateMutex>
     7de:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <xPlayerTwoSemaphore+0x1>
     7e2:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <xPlayerTwoSemaphore>
	xGameOverSemaphore = xSemaphoreCreateMutex();
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <xQueueCreateMutex>
     7ec:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <xGameOverSemaphore+0x1>
     7f0:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <xGameOverSemaphore>

	//BaseType_t taskReadJoystick = xTaskCreate(read_joystick, (const char*)"Read joystick", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
	BaseType_t taskGameProcessing = xTaskCreate(game_processing, (const char*)"Game processing", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     7f4:	e1 2c       	mov	r14, r1
     7f6:	f1 2c       	mov	r15, r1
     7f8:	00 e0       	ldi	r16, 0x00	; 0
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	45 e5       	ldi	r20, 0x55	; 85
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	61 e2       	ldi	r22, 0x21	; 33
     804:	71 e0       	ldi	r23, 0x01	; 1
     806:	84 e9       	ldi	r24, 0x94	; 148
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <xTaskCreate>
     80e:	89 83       	std	Y+1, r24	; 0x01
	BaseType_t taskMakeFrame = xTaskCreate(make_frame, (const char*)"Make frame", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL );
     810:	e1 2c       	mov	r14, r1
     812:	f1 2c       	mov	r15, r1
     814:	00 e0       	ldi	r16, 0x00	; 0
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	45 e5       	ldi	r20, 0x55	; 85
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	61 e3       	ldi	r22, 0x31	; 49
     820:	71 e0       	ldi	r23, 0x01	; 1
     822:	8e e9       	ldi	r24, 0x9E	; 158
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <xTaskCreate>
     82a:	8a 83       	std	Y+2, r24	; 0x02


	// Start the display handler timer
	init_display_timer(handle_display);
     82c:	8c e9       	ldi	r24, 0x9C	; 156
     82e:	93 e0       	ldi	r25, 0x03	; 3
     830:	0e 94 48 04 	call	0x890	; 0x890 <init_display_timer>
	
	sei();
     834:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
     836:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <vTaskStartScheduler>
	
	//Should never reach here
	while (1) {}
     83a:	ff cf       	rjmp	.-2      	; 0x83a <main+0xa4>

0000083c <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
	_x_rx_com_queue = x_rx_queue;
}
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	00 d0       	rcall	.+0      	; 0x842 <_com_call_back+0x6>
     842:	00 d0       	rcall	.+0      	; 0x844 <_com_call_back+0x8>
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	9b 83       	std	Y+3, r25	; 0x03
     84a:	8a 83       	std	Y+2, r24	; 0x02
     84c:	6c 83       	std	Y+4, r22	; 0x04
     84e:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_x_rx_com_queue>
     852:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <_x_rx_com_queue+0x1>
     856:	89 2b       	or	r24, r25
     858:	99 f0       	breq	.+38     	; 0x880 <_com_call_back+0x44>
     85a:	19 82       	std	Y+1, r1	; 0x01
     85c:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <_x_rx_com_queue>
     860:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <_x_rx_com_queue+0x1>
     864:	be 01       	movw	r22, r28
     866:	6c 5f       	subi	r22, 0xFC	; 252
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	ae 01       	movw	r20, r28
     86e:	4f 5f       	subi	r20, 0xFF	; 255
     870:	5f 4f       	sbci	r21, 0xFF	; 255
     872:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <xQueueGenericSendFromISR>
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	88 23       	and	r24, r24
     87a:	11 f0       	breq	.+4      	; 0x880 <_com_call_back+0x44>
     87c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <vPortYield>
     880:	00 00       	nop
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <init_display_timer>:

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	00 d0       	rcall	.+0      	; 0x896 <init_display_timer+0x6>
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	9a 83       	std	Y+2, r25	; 0x02
     89c:	89 83       	std	Y+1, r24	; 0x01
	cb_ptr = cb;
     89e:	89 81       	ldd	r24, Y+1	; 0x01
     8a0:	9a 81       	ldd	r25, Y+2	; 0x02
     8a2:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <cb_ptr+0x1>
     8a6:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
     8aa:	87 e4       	ldi	r24, 0x47	; 71
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	2a e0       	ldi	r18, 0x0A	; 10
     8b0:	fc 01       	movw	r30, r24
     8b2:	20 83       	st	Z, r18
	TCCR0A |= _BV(WGM01); // Mode 2
     8b4:	84 e4       	ldi	r24, 0x44	; 68
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	24 e4       	ldi	r18, 0x44	; 68
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	f9 01       	movw	r30, r18
     8be:	20 81       	ld	r18, Z
     8c0:	22 60       	ori	r18, 0x02	; 2
     8c2:	fc 01       	movw	r30, r24
     8c4:	20 83       	st	Z, r18
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
     8c6:	8e e6       	ldi	r24, 0x6E	; 110
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	2e e6       	ldi	r18, 0x6E	; 110
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	f9 01       	movw	r30, r18
     8d0:	20 81       	ld	r18, Z
     8d2:	22 60       	ori	r18, 0x02	; 2
     8d4:	fc 01       	movw	r30, r24
     8d6:	20 83       	st	Z, r18
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
     8d8:	85 e4       	ldi	r24, 0x45	; 69
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	25 e4       	ldi	r18, 0x45	; 69
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	f9 01       	movw	r30, r18
     8e2:	20 81       	ld	r18, Z
     8e4:	25 60       	ori	r18, 0x05	; 5
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18
}
     8ea:	00 00       	nop
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <__vector_16>:

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
     8f6:	1f 92       	push	r1
     8f8:	0f 92       	push	r0
     8fa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	4f 93       	push	r20
     908:	5f 93       	push	r21
     90a:	6f 93       	push	r22
     90c:	7f 93       	push	r23
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	af 93       	push	r26
     914:	bf 93       	push	r27
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
	if (cb_ptr)
     922:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <cb_ptr>
     926:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <cb_ptr+0x1>
     92a:	89 2b       	or	r24, r25
     92c:	31 f0       	breq	.+12     	; 0x93a <__stack+0x3b>
	{
		cb_ptr();
     92e:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <cb_ptr>
     932:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <cb_ptr+0x1>
     936:	fc 01       	movw	r30, r24
     938:	09 95       	icall
	}
}
     93a:	00 00       	nop
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	ff 91       	pop	r31
     942:	ef 91       	pop	r30
     944:	bf 91       	pop	r27
     946:	af 91       	pop	r26
     948:	9f 91       	pop	r25
     94a:	8f 91       	pop	r24
     94c:	7f 91       	pop	r23
     94e:	6f 91       	pop	r22
     950:	5f 91       	pop	r21
     952:	4f 91       	pop	r20
     954:	3f 91       	pop	r19
     956:	2f 91       	pop	r18
     958:	0f 90       	pop	r0
     95a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     95e:	0f 90       	pop	r0
     960:	1f 90       	pop	r1
     962:	18 95       	reti

00000964 <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	00 d0       	rcall	.+0      	; 0x96a <com_send_bytes+0x6>
     96a:	1f 92       	push	r1
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	9a 83       	std	Y+2, r25	; 0x02
     972:	89 83       	std	Y+1, r24	; 0x01
     974:	6b 83       	std	Y+3, r22	; 0x03
	serial_send_bytes(_com_serial_instance, bytes, len);
     976:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <_com_serial_instance>
     97a:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <_com_serial_instance+0x1>
     97e:	29 81       	ldd	r18, Y+1	; 0x01
     980:	3a 81       	ldd	r19, Y+2	; 0x02
     982:	4b 81       	ldd	r20, Y+3	; 0x03
     984:	b9 01       	movw	r22, r18
     986:	0e 94 c6 0b 	call	0x178c	; 0x178c <serial_send_bytes>
}
     98a:	00 00       	nop
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     998:	8f 92       	push	r8
     99a:	9f 92       	push	r9
     99c:	af 92       	push	r10
     99e:	bf 92       	push	r11
     9a0:	cf 92       	push	r12
     9a2:	df 92       	push	r13
     9a4:	ef 92       	push	r14
     9a6:	0f 93       	push	r16
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     9b0:	87 e9       	ldi	r24, 0x97	; 151
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	0e 94 84 05 	call	0xb08	; 0xb08 <buffer_init>
	buffer_init(&_com_tx_buffer);
     9b8:	8a eb       	ldi	r24, 0xBA	; 186
     9ba:	92 e0       	ldi	r25, 0x02	; 2
     9bc:	0e 94 84 05 	call	0xb08	; 0xb08 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     9c0:	0f 2e       	mov	r0, r31
     9c2:	fe e1       	ldi	r31, 0x1E	; 30
     9c4:	8f 2e       	mov	r8, r31
     9c6:	f4 e0       	ldi	r31, 0x04	; 4
     9c8:	9f 2e       	mov	r9, r31
     9ca:	f0 2d       	mov	r31, r0
     9cc:	0f 2e       	mov	r0, r31
     9ce:	fa eb       	ldi	r31, 0xBA	; 186
     9d0:	af 2e       	mov	r10, r31
     9d2:	f2 e0       	ldi	r31, 0x02	; 2
     9d4:	bf 2e       	mov	r11, r31
     9d6:	f0 2d       	mov	r31, r0
     9d8:	0f 2e       	mov	r0, r31
     9da:	f7 e9       	ldi	r31, 0x97	; 151
     9dc:	cf 2e       	mov	r12, r31
     9de:	f2 e0       	ldi	r31, 0x02	; 2
     9e0:	df 2e       	mov	r13, r31
     9e2:	f0 2d       	mov	r31, r0
     9e4:	e1 2c       	mov	r14, r1
     9e6:	00 e0       	ldi	r16, 0x00	; 0
     9e8:	23 e0       	ldi	r18, 0x03	; 3
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	52 ec       	ldi	r21, 0xC2	; 194
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	0e 94 05 0b 	call	0x160a	; 0x160a <serial_new_instance>
     9f8:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <_com_serial_instance+0x1>
     9fc:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     a00:	88 e2       	ldi	r24, 0x28	; 40
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	28 e2       	ldi	r18, 0x28	; 40
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	f9 01       	movw	r30, r18
     a0a:	20 81       	ld	r18, Z
     a0c:	23 6c       	ori	r18, 0xC3	; 195
     a0e:	fc 01       	movw	r30, r24
     a10:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
     a12:	8b e2       	ldi	r24, 0x2B	; 43
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	2b e2       	ldi	r18, 0x2B	; 43
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	f9 01       	movw	r30, r18
     a1c:	20 81       	ld	r18, Z
     a1e:	28 60       	ori	r18, 0x08	; 8
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     a24:	8a e2       	ldi	r24, 0x2A	; 42
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	2a e2       	ldi	r18, 0x2A	; 42
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	f9 01       	movw	r30, r18
     a2e:	20 81       	ld	r18, Z
     a30:	24 67       	ori	r18, 0x74	; 116
     a32:	fc 01       	movw	r30, r24
     a34:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     a36:	8b e2       	ldi	r24, 0x2B	; 43
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	2b e2       	ldi	r18, 0x2B	; 43
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	f9 01       	movw	r30, r18
     a40:	20 81       	ld	r18, Z
     a42:	20 64       	ori	r18, 0x40	; 64
     a44:	fc 01       	movw	r30, r24
     a46:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
     a48:	81 e2       	ldi	r24, 0x21	; 33
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	fc 01       	movw	r30, r24
     a4e:	80 81       	ld	r24, Z
     a50:	81 e2       	ldi	r24, 0x21	; 33
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	2f ef       	ldi	r18, 0xFF	; 255
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
     a5a:	84 e2       	ldi	r24, 0x24	; 36
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	24 e2       	ldi	r18, 0x24	; 36
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	f9 01       	movw	r30, r18
     a64:	20 81       	ld	r18, Z
     a66:	23 60       	ori	r18, 0x03	; 3
     a68:	fc 01       	movw	r30, r24
     a6a:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     a6c:	84 e2       	ldi	r24, 0x24	; 36
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	24 e2       	ldi	r18, 0x24	; 36
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	f9 01       	movw	r30, r18
     a76:	20 81       	ld	r18, Z
     a78:	2c 63       	ori	r18, 0x3C	; 60
     a7a:	fc 01       	movw	r30, r24
     a7c:	20 83       	st	Z, r18
}
     a7e:	00 00       	nop
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	0f 91       	pop	r16
     a86:	ef 90       	pop	r14
     a88:	df 90       	pop	r13
     a8a:	cf 90       	pop	r12
     a8c:	bf 90       	pop	r11
     a8e:	af 90       	pop	r10
     a90:	9f 90       	pop	r9
     a92:	8f 90       	pop	r8
     a94:	08 95       	ret

00000a96 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	1f 92       	push	r1
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
     aa2:	85 e2       	ldi	r24, 0x25	; 37
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	25 e2       	ldi	r18, 0x25	; 37
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	f9 01       	movw	r30, r18
     aac:	20 81       	ld	r18, Z
     aae:	23 7c       	andi	r18, 0xC3	; 195
     ab0:	fc 01       	movw	r30, r24
     ab2:	20 83       	st	Z, r18
		PORTB |= task_no << 2;
     ab4:	85 e2       	ldi	r24, 0x25	; 37
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	25 e2       	ldi	r18, 0x25	; 37
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	f9 01       	movw	r30, r18
     abe:	20 81       	ld	r18, Z
     ac0:	42 2f       	mov	r20, r18
     ac2:	29 81       	ldd	r18, Y+1	; 0x01
     ac4:	22 2f       	mov	r18, r18
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	22 0f       	add	r18, r18
     aca:	33 1f       	adc	r19, r19
     acc:	22 0f       	add	r18, r18
     ace:	33 1f       	adc	r19, r19
     ad0:	24 2b       	or	r18, r20
     ad2:	fc 01       	movw	r30, r24
     ad4:	20 83       	st	Z, r18
	}
     ad6:	00 00       	nop
     ad8:	0f 90       	pop	r0
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	1f 92       	push	r1
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
     aec:	85 e2       	ldi	r24, 0x25	; 37
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	25 e2       	ldi	r18, 0x25	; 37
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	f9 01       	movw	r30, r18
     af6:	20 81       	ld	r18, Z
     af8:	23 7c       	andi	r18, 0xC3	; 195
     afa:	fc 01       	movw	r30, r24
     afc:	20 83       	st	Z, r18
	}
     afe:	00 00       	nop
     b00:	0f 90       	pop	r0
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <buffer_init+0x6>
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	9a 83       	std	Y+2, r25	; 0x02
     b14:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	9a 81       	ldd	r25, Y+2	; 0x02
     b1a:	fc 01       	movw	r30, r24
     b1c:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
     b20:	9a 81       	ldd	r25, Y+2	; 0x02
     b22:	fc 01       	movw	r30, r24
     b24:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
     b26:	89 81       	ldd	r24, Y+1	; 0x01
     b28:	9a 81       	ldd	r25, Y+2	; 0x02
     b2a:	fc 01       	movw	r30, r24
     b2c:	12 a2       	std	Z+34, r1	; 0x22
}
     b2e:	00 00       	nop
     b30:	0f 90       	pop	r0
     b32:	0f 90       	pop	r0
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	08 95       	ret

00000b3a <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <buffer_get_item+0x6>
     b40:	00 d0       	rcall	.+0      	; 0xb42 <buffer_get_item+0x8>
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	9a 83       	std	Y+2, r25	; 0x02
     b48:	89 83       	std	Y+1, r24	; 0x01
     b4a:	7c 83       	std	Y+4, r23	; 0x04
     b4c:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	9a 81       	ldd	r25, Y+2	; 0x02
     b52:	fc 01       	movw	r30, r24
     b54:	82 a1       	ldd	r24, Z+34	; 0x22
     b56:	88 23       	and	r24, r24
     b58:	81 f1       	breq	.+96     	; 0xbba <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	9a 81       	ldd	r25, Y+2	; 0x02
     b5e:	fc 01       	movw	r30, r24
     b60:	81 a1       	ldd	r24, Z+33	; 0x21
     b62:	88 2f       	mov	r24, r24
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	29 81       	ldd	r18, Y+1	; 0x01
     b68:	3a 81       	ldd	r19, Y+2	; 0x02
     b6a:	82 0f       	add	r24, r18
     b6c:	93 1f       	adc	r25, r19
     b6e:	fc 01       	movw	r30, r24
     b70:	20 81       	ld	r18, Z
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	9c 81       	ldd	r25, Y+4	; 0x04
     b76:	fc 01       	movw	r30, r24
     b78:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	9a 81       	ldd	r25, Y+2	; 0x02
     b7e:	fc 01       	movw	r30, r24
     b80:	81 a1       	ldd	r24, Z+33	; 0x21
     b82:	88 2f       	mov	r24, r24
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	8f 71       	andi	r24, 0x1F	; 31
     b8a:	90 78       	andi	r25, 0x80	; 128
     b8c:	99 23       	and	r25, r25
     b8e:	24 f4       	brge	.+8      	; 0xb98 <buffer_get_item+0x5e>
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	80 6e       	ori	r24, 0xE0	; 224
     b94:	9f 6f       	ori	r25, 0xFF	; 255
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	28 2f       	mov	r18, r24
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	9a 81       	ldd	r25, Y+2	; 0x02
     b9e:	fc 01       	movw	r30, r24
     ba0:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	9a 81       	ldd	r25, Y+2	; 0x02
     ba6:	fc 01       	movw	r30, r24
     ba8:	82 a1       	ldd	r24, Z+34	; 0x22
     baa:	2f ef       	ldi	r18, 0xFF	; 255
     bac:	28 0f       	add	r18, r24
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	9a 81       	ldd	r25, Y+2	; 0x02
     bb2:	fc 01       	movw	r30, r24
     bb4:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
     bba:	81 e0       	ldi	r24, 0x01	; 1
}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <buffer_put_item+0x6>
     bd0:	1f 92       	push	r1
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	9a 83       	std	Y+2, r25	; 0x02
     bd8:	89 83       	std	Y+1, r24	; 0x01
     bda:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	9a 81       	ldd	r25, Y+2	; 0x02
     be0:	fc 01       	movw	r30, r24
     be2:	82 a1       	ldd	r24, Z+34	; 0x22
     be4:	80 32       	cpi	r24, 0x20	; 32
     be6:	68 f5       	brcc	.+90     	; 0xc42 <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
     bec:	fc 01       	movw	r30, r24
     bee:	80 a1       	ldd	r24, Z+32	; 0x20
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	29 81       	ldd	r18, Y+1	; 0x01
     bf6:	3a 81       	ldd	r19, Y+2	; 0x02
     bf8:	82 0f       	add	r24, r18
     bfa:	93 1f       	adc	r25, r19
     bfc:	2b 81       	ldd	r18, Y+3	; 0x03
     bfe:	fc 01       	movw	r30, r24
     c00:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	9a 81       	ldd	r25, Y+2	; 0x02
     c06:	fc 01       	movw	r30, r24
     c08:	80 a1       	ldd	r24, Z+32	; 0x20
     c0a:	88 2f       	mov	r24, r24
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	8f 71       	andi	r24, 0x1F	; 31
     c12:	90 78       	andi	r25, 0x80	; 128
     c14:	99 23       	and	r25, r25
     c16:	24 f4       	brge	.+8      	; 0xc20 <buffer_put_item+0x56>
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	80 6e       	ori	r24, 0xE0	; 224
     c1c:	9f 6f       	ori	r25, 0xFF	; 255
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	28 2f       	mov	r18, r24
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	9a 81       	ldd	r25, Y+2	; 0x02
     c26:	fc 01       	movw	r30, r24
     c28:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	fc 01       	movw	r30, r24
     c30:	82 a1       	ldd	r24, Z+34	; 0x22
     c32:	21 e0       	ldi	r18, 0x01	; 1
     c34:	28 0f       	add	r18, r24
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	fc 01       	movw	r30, r24
     c3c:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
     c42:	82 e0       	ldi	r24, 0x02	; 2
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	00 d0       	rcall	.+0      	; 0xc56 <vListInitialise+0x6>
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	9a 83       	std	Y+2, r25	; 0x02
     c5c:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	9a 81       	ldd	r25, Y+2	; 0x02
     c62:	9c 01       	movw	r18, r24
     c64:	2d 5f       	subi	r18, 0xFD	; 253
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	fc 01       	movw	r30, r24
     c6e:	32 83       	std	Z+2, r19	; 0x02
     c70:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	9a 81       	ldd	r25, Y+2	; 0x02
     c76:	2f ef       	ldi	r18, 0xFF	; 255
     c78:	3f ef       	ldi	r19, 0xFF	; 255
     c7a:	fc 01       	movw	r30, r24
     c7c:	34 83       	std	Z+4, r19	; 0x04
     c7e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	9c 01       	movw	r18, r24
     c86:	2d 5f       	subi	r18, 0xFD	; 253
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	9a 81       	ldd	r25, Y+2	; 0x02
     c8e:	fc 01       	movw	r30, r24
     c90:	36 83       	std	Z+6, r19	; 0x06
     c92:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	9a 81       	ldd	r25, Y+2	; 0x02
     c98:	9c 01       	movw	r18, r24
     c9a:	2d 5f       	subi	r18, 0xFD	; 253
     c9c:	3f 4f       	sbci	r19, 0xFF	; 255
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	9a 81       	ldd	r25, Y+2	; 0x02
     ca2:	fc 01       	movw	r30, r24
     ca4:	30 87       	std	Z+8, r19	; 0x08
     ca6:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	fc 01       	movw	r30, r24
     cae:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     cb0:	00 00       	nop
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <vListInitialiseItem+0x6>
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	9a 83       	std	Y+2, r25	; 0x02
     cc8:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	fc 01       	movw	r30, r24
     cd0:	11 86       	std	Z+9, r1	; 0x09
     cd2:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     cd4:	00 00       	nop
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	08 95       	ret

00000ce0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <vListInsertEnd+0x6>
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <vListInsertEnd+0x8>
     ce8:	00 d0       	rcall	.+0      	; 0xcea <vListInsertEnd+0xa>
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	9c 83       	std	Y+4, r25	; 0x04
     cf0:	8b 83       	std	Y+3, r24	; 0x03
     cf2:	7e 83       	std	Y+6, r23	; 0x06
     cf4:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	9c 81       	ldd	r25, Y+4	; 0x04
     cfa:	fc 01       	movw	r30, r24
     cfc:	81 81       	ldd	r24, Z+1	; 0x01
     cfe:	92 81       	ldd	r25, Z+2	; 0x02
     d00:	9a 83       	std	Y+2, r25	; 0x02
     d02:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     d04:	8d 81       	ldd	r24, Y+5	; 0x05
     d06:	9e 81       	ldd	r25, Y+6	; 0x06
     d08:	29 81       	ldd	r18, Y+1	; 0x01
     d0a:	3a 81       	ldd	r19, Y+2	; 0x02
     d0c:	fc 01       	movw	r30, r24
     d0e:	33 83       	std	Z+3, r19	; 0x03
     d10:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9a 81       	ldd	r25, Y+2	; 0x02
     d16:	fc 01       	movw	r30, r24
     d18:	24 81       	ldd	r18, Z+4	; 0x04
     d1a:	35 81       	ldd	r19, Z+5	; 0x05
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	9e 81       	ldd	r25, Y+6	; 0x06
     d20:	fc 01       	movw	r30, r24
     d22:	35 83       	std	Z+5, r19	; 0x05
     d24:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	9a 81       	ldd	r25, Y+2	; 0x02
     d2a:	fc 01       	movw	r30, r24
     d2c:	84 81       	ldd	r24, Z+4	; 0x04
     d2e:	95 81       	ldd	r25, Z+5	; 0x05
     d30:	2d 81       	ldd	r18, Y+5	; 0x05
     d32:	3e 81       	ldd	r19, Y+6	; 0x06
     d34:	fc 01       	movw	r30, r24
     d36:	33 83       	std	Z+3, r19	; 0x03
     d38:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	2d 81       	ldd	r18, Y+5	; 0x05
     d40:	3e 81       	ldd	r19, Y+6	; 0x06
     d42:	fc 01       	movw	r30, r24
     d44:	35 83       	std	Z+5, r19	; 0x05
     d46:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d48:	8d 81       	ldd	r24, Y+5	; 0x05
     d4a:	9e 81       	ldd	r25, Y+6	; 0x06
     d4c:	2b 81       	ldd	r18, Y+3	; 0x03
     d4e:	3c 81       	ldd	r19, Y+4	; 0x04
     d50:	fc 01       	movw	r30, r24
     d52:	31 87       	std	Z+9, r19	; 0x09
     d54:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	9c 81       	ldd	r25, Y+4	; 0x04
     d5a:	fc 01       	movw	r30, r24
     d5c:	80 81       	ld	r24, Z
     d5e:	21 e0       	ldi	r18, 0x01	; 1
     d60:	28 0f       	add	r18, r24
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	9c 81       	ldd	r25, Y+4	; 0x04
     d66:	fc 01       	movw	r30, r24
     d68:	20 83       	st	Z, r18
}
     d6a:	00 00       	nop
     d6c:	26 96       	adiw	r28, 0x06	; 6
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	28 97       	sbiw	r28, 0x08	; 8
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	f8 94       	cli
     d8c:	de bf       	out	0x3e, r29	; 62
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	cd bf       	out	0x3d, r28	; 61
     d92:	9e 83       	std	Y+6, r25	; 0x06
     d94:	8d 83       	std	Y+5, r24	; 0x05
     d96:	78 87       	std	Y+8, r23	; 0x08
     d98:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     d9a:	8f 81       	ldd	r24, Y+7	; 0x07
     d9c:	98 85       	ldd	r25, Y+8	; 0x08
     d9e:	fc 01       	movw	r30, r24
     da0:	80 81       	ld	r24, Z
     da2:	91 81       	ldd	r25, Z+1	; 0x01
     da4:	9c 83       	std	Y+4, r25	; 0x04
     da6:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	41 f4       	brne	.+16     	; 0xdc0 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	fc 01       	movw	r30, r24
     db6:	87 81       	ldd	r24, Z+7	; 0x07
     db8:	90 85       	ldd	r25, Z+8	; 0x08
     dba:	9a 83       	std	Y+2, r25	; 0x02
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	1a c0       	rjmp	.+52     	; 0xdf4 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	9e 81       	ldd	r25, Y+6	; 0x06
     dc4:	03 96       	adiw	r24, 0x03	; 3
     dc6:	9a 83       	std	Y+2, r25	; 0x02
     dc8:	89 83       	std	Y+1, r24	; 0x01
     dca:	07 c0       	rjmp	.+14     	; 0xdda <vListInsert+0x5c>
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	fc 01       	movw	r30, r24
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	9a 83       	std	Y+2, r25	; 0x02
     dd8:	89 83       	std	Y+1, r24	; 0x01
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	9a 81       	ldd	r25, Y+2	; 0x02
     dde:	fc 01       	movw	r30, r24
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	93 81       	ldd	r25, Z+3	; 0x03
     de4:	fc 01       	movw	r30, r24
     de6:	20 81       	ld	r18, Z
     de8:	31 81       	ldd	r19, Z+1	; 0x01
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	9c 81       	ldd	r25, Y+4	; 0x04
     dee:	82 17       	cp	r24, r18
     df0:	93 07       	cpc	r25, r19
     df2:	60 f7       	brcc	.-40     	; 0xdcc <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	9a 81       	ldd	r25, Y+2	; 0x02
     df8:	fc 01       	movw	r30, r24
     dfa:	22 81       	ldd	r18, Z+2	; 0x02
     dfc:	33 81       	ldd	r19, Z+3	; 0x03
     dfe:	8f 81       	ldd	r24, Y+7	; 0x07
     e00:	98 85       	ldd	r25, Y+8	; 0x08
     e02:	fc 01       	movw	r30, r24
     e04:	33 83       	std	Z+3, r19	; 0x03
     e06:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     e08:	8f 81       	ldd	r24, Y+7	; 0x07
     e0a:	98 85       	ldd	r25, Y+8	; 0x08
     e0c:	fc 01       	movw	r30, r24
     e0e:	82 81       	ldd	r24, Z+2	; 0x02
     e10:	93 81       	ldd	r25, Z+3	; 0x03
     e12:	2f 81       	ldd	r18, Y+7	; 0x07
     e14:	38 85       	ldd	r19, Y+8	; 0x08
     e16:	fc 01       	movw	r30, r24
     e18:	35 83       	std	Z+5, r19	; 0x05
     e1a:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     e1c:	8f 81       	ldd	r24, Y+7	; 0x07
     e1e:	98 85       	ldd	r25, Y+8	; 0x08
     e20:	29 81       	ldd	r18, Y+1	; 0x01
     e22:	3a 81       	ldd	r19, Y+2	; 0x02
     e24:	fc 01       	movw	r30, r24
     e26:	35 83       	std	Z+5, r19	; 0x05
     e28:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	2f 81       	ldd	r18, Y+7	; 0x07
     e30:	38 85       	ldd	r19, Y+8	; 0x08
     e32:	fc 01       	movw	r30, r24
     e34:	33 83       	std	Z+3, r19	; 0x03
     e36:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     e38:	8f 81       	ldd	r24, Y+7	; 0x07
     e3a:	98 85       	ldd	r25, Y+8	; 0x08
     e3c:	2d 81       	ldd	r18, Y+5	; 0x05
     e3e:	3e 81       	ldd	r19, Y+6	; 0x06
     e40:	fc 01       	movw	r30, r24
     e42:	31 87       	std	Z+9, r19	; 0x09
     e44:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	fc 01       	movw	r30, r24
     e4c:	80 81       	ld	r24, Z
     e4e:	21 e0       	ldi	r18, 0x01	; 1
     e50:	28 0f       	add	r18, r24
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
     e54:	9e 81       	ldd	r25, Y+6	; 0x06
     e56:	fc 01       	movw	r30, r24
     e58:	20 83       	st	Z, r18
}
     e5a:	00 00       	nop
     e5c:	28 96       	adiw	r28, 0x08	; 8
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	08 95       	ret

00000e6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	00 d0       	rcall	.+0      	; 0xe74 <uxListRemove+0x6>
     e74:	00 d0       	rcall	.+0      	; 0xe76 <uxListRemove+0x8>
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	9c 83       	std	Y+4, r25	; 0x04
     e7c:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	fc 01       	movw	r30, r24
     e84:	80 85       	ldd	r24, Z+8	; 0x08
     e86:	91 85       	ldd	r25, Z+9	; 0x09
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	fc 01       	movw	r30, r24
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	2b 81       	ldd	r18, Y+3	; 0x03
     e98:	3c 81       	ldd	r19, Y+4	; 0x04
     e9a:	f9 01       	movw	r30, r18
     e9c:	24 81       	ldd	r18, Z+4	; 0x04
     e9e:	35 81       	ldd	r19, Z+5	; 0x05
     ea0:	fc 01       	movw	r30, r24
     ea2:	35 83       	std	Z+5, r19	; 0x05
     ea4:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	9c 81       	ldd	r25, Y+4	; 0x04
     eaa:	fc 01       	movw	r30, r24
     eac:	84 81       	ldd	r24, Z+4	; 0x04
     eae:	95 81       	ldd	r25, Z+5	; 0x05
     eb0:	2b 81       	ldd	r18, Y+3	; 0x03
     eb2:	3c 81       	ldd	r19, Y+4	; 0x04
     eb4:	f9 01       	movw	r30, r18
     eb6:	22 81       	ldd	r18, Z+2	; 0x02
     eb8:	33 81       	ldd	r19, Z+3	; 0x03
     eba:	fc 01       	movw	r30, r24
     ebc:	33 83       	std	Z+3, r19	; 0x03
     ebe:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	fc 01       	movw	r30, r24
     ec6:	21 81       	ldd	r18, Z+1	; 0x01
     ec8:	32 81       	ldd	r19, Z+2	; 0x02
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	28 17       	cp	r18, r24
     ed0:	39 07       	cpc	r19, r25
     ed2:	51 f4       	brne	.+20     	; 0xee8 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	9c 81       	ldd	r25, Y+4	; 0x04
     ed8:	fc 01       	movw	r30, r24
     eda:	24 81       	ldd	r18, Z+4	; 0x04
     edc:	35 81       	ldd	r19, Z+5	; 0x05
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	9a 81       	ldd	r25, Y+2	; 0x02
     ee2:	fc 01       	movw	r30, r24
     ee4:	32 83       	std	Z+2, r19	; 0x02
     ee6:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	fc 01       	movw	r30, r24
     eee:	11 86       	std	Z+9, r1	; 0x09
     ef0:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	fc 01       	movw	r30, r24
     ef8:	80 81       	ld	r24, Z
     efa:	2f ef       	ldi	r18, 0xFF	; 255
     efc:	28 0f       	add	r18, r24
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	9a 81       	ldd	r25, Y+2	; 0x02
     f02:	fc 01       	movw	r30, r24
     f04:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	fc 01       	movw	r30, r24
     f0c:	80 81       	ld	r24, Z
}
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	28 97       	sbiw	r28, 0x08	; 8
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	9c 83       	std	Y+4, r25	; 0x04
     f32:	8b 83       	std	Y+3, r24	; 0x03
     f34:	7e 83       	std	Y+6, r23	; 0x06
     f36:	6d 83       	std	Y+5, r22	; 0x05
     f38:	58 87       	std	Y+8, r21	; 0x08
     f3a:	4f 83       	std	Y+7, r20	; 0x07
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	21 e1       	ldi	r18, 0x11	; 17
     f42:	fc 01       	movw	r30, r24
     f44:	20 83       	st	Z, r18
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	9c 81       	ldd	r25, Y+4	; 0x04
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	9c 83       	std	Y+4, r25	; 0x04
     f4e:	8b 83       	std	Y+3, r24	; 0x03
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	9c 81       	ldd	r25, Y+4	; 0x04
     f54:	22 e2       	ldi	r18, 0x22	; 34
     f56:	fc 01       	movw	r30, r24
     f58:	20 83       	st	Z, r18
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	9c 81       	ldd	r25, Y+4	; 0x04
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	9c 83       	std	Y+4, r25	; 0x04
     f62:	8b 83       	std	Y+3, r24	; 0x03
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	9c 81       	ldd	r25, Y+4	; 0x04
     f68:	23 e3       	ldi	r18, 0x33	; 51
     f6a:	fc 01       	movw	r30, r24
     f6c:	20 83       	st	Z, r18
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	9c 83       	std	Y+4, r25	; 0x04
     f76:	8b 83       	std	Y+3, r24	; 0x03
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	9e 81       	ldd	r25, Y+6	; 0x06
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	29 81       	ldd	r18, Y+1	; 0x01
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	9c 81       	ldd	r25, Y+4	; 0x04
     f86:	fc 01       	movw	r30, r24
     f88:	20 83       	st	Z, r18
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	9c 83       	std	Y+4, r25	; 0x04
     f92:	8b 83       	std	Y+3, r24	; 0x03
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	89 2f       	mov	r24, r25
     f9a:	99 27       	eor	r25, r25
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	29 81       	ldd	r18, Y+1	; 0x01
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	fc 01       	movw	r30, r24
     fa8:	20 83       	st	Z, r18
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	9c 81       	ldd	r25, Y+4	; 0x04
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	9c 83       	std	Y+4, r25	; 0x04
     fb2:	8b 83       	std	Y+3, r24	; 0x03
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	fc 01       	movw	r30, r24
     fba:	10 82       	st	Z, r1
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	9c 83       	std	Y+4, r25	; 0x04
     fc4:	8b 83       	std	Y+3, r24	; 0x03
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	9c 81       	ldd	r25, Y+4	; 0x04
     fca:	20 e8       	ldi	r18, 0x80	; 128
     fcc:	fc 01       	movw	r30, r24
     fce:	20 83       	st	Z, r18
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	9c 81       	ldd	r25, Y+4	; 0x04
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	9c 83       	std	Y+4, r25	; 0x04
     fd8:	8b 83       	std	Y+3, r24	; 0x03
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	9c 81       	ldd	r25, Y+4	; 0x04
     fde:	fc 01       	movw	r30, r24
     fe0:	10 82       	st	Z, r1
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	9c 81       	ldd	r25, Y+4	; 0x04
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	9c 83       	std	Y+4, r25	; 0x04
     fea:	8b 83       	std	Y+3, r24	; 0x03
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	22 e0       	ldi	r18, 0x02	; 2
     ff2:	fc 01       	movw	r30, r24
     ff4:	20 83       	st	Z, r18
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	9c 83       	std	Y+4, r25	; 0x04
     ffe:	8b 83       	std	Y+3, r24	; 0x03
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	23 e0       	ldi	r18, 0x03	; 3
    1006:	fc 01       	movw	r30, r24
    1008:	20 83       	st	Z, r18
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	9c 81       	ldd	r25, Y+4	; 0x04
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	9c 83       	std	Y+4, r25	; 0x04
    1012:	8b 83       	std	Y+3, r24	; 0x03
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	24 e0       	ldi	r18, 0x04	; 4
    101a:	fc 01       	movw	r30, r24
    101c:	20 83       	st	Z, r18
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	9c 83       	std	Y+4, r25	; 0x04
    1026:	8b 83       	std	Y+3, r24	; 0x03
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	25 e0       	ldi	r18, 0x05	; 5
    102e:	fc 01       	movw	r30, r24
    1030:	20 83       	st	Z, r18
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	9c 83       	std	Y+4, r25	; 0x04
    103a:	8b 83       	std	Y+3, r24	; 0x03
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	26 e0       	ldi	r18, 0x06	; 6
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	9c 83       	std	Y+4, r25	; 0x04
    104e:	8b 83       	std	Y+3, r24	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	27 e0       	ldi	r18, 0x07	; 7
    1056:	fc 01       	movw	r30, r24
    1058:	20 83       	st	Z, r18
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	9c 81       	ldd	r25, Y+4	; 0x04
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	9c 83       	std	Y+4, r25	; 0x04
    1062:	8b 83       	std	Y+3, r24	; 0x03
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	28 e0       	ldi	r18, 0x08	; 8
    106a:	fc 01       	movw	r30, r24
    106c:	20 83       	st	Z, r18
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	9c 81       	ldd	r25, Y+4	; 0x04
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	9c 83       	std	Y+4, r25	; 0x04
    1076:	8b 83       	std	Y+3, r24	; 0x03
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	29 e0       	ldi	r18, 0x09	; 9
    107e:	fc 01       	movw	r30, r24
    1080:	20 83       	st	Z, r18
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	9c 81       	ldd	r25, Y+4	; 0x04
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	9c 83       	std	Y+4, r25	; 0x04
    108a:	8b 83       	std	Y+3, r24	; 0x03
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	20 e1       	ldi	r18, 0x10	; 16
    1092:	fc 01       	movw	r30, r24
    1094:	20 83       	st	Z, r18
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	9c 83       	std	Y+4, r25	; 0x04
    109e:	8b 83       	std	Y+3, r24	; 0x03
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	21 e1       	ldi	r18, 0x11	; 17
    10a6:	fc 01       	movw	r30, r24
    10a8:	20 83       	st	Z, r18
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9c 81       	ldd	r25, Y+4	; 0x04
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	9c 83       	std	Y+4, r25	; 0x04
    10b2:	8b 83       	std	Y+3, r24	; 0x03
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	22 e1       	ldi	r18, 0x12	; 18
    10ba:	fc 01       	movw	r30, r24
    10bc:	20 83       	st	Z, r18
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	9c 81       	ldd	r25, Y+4	; 0x04
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	9c 83       	std	Y+4, r25	; 0x04
    10c6:	8b 83       	std	Y+3, r24	; 0x03
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	23 e1       	ldi	r18, 0x13	; 19
    10ce:	fc 01       	movw	r30, r24
    10d0:	20 83       	st	Z, r18
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	9c 81       	ldd	r25, Y+4	; 0x04
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	9c 83       	std	Y+4, r25	; 0x04
    10da:	8b 83       	std	Y+3, r24	; 0x03
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	24 e1       	ldi	r18, 0x14	; 20
    10e2:	fc 01       	movw	r30, r24
    10e4:	20 83       	st	Z, r18
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	9c 83       	std	Y+4, r25	; 0x04
    10ee:	8b 83       	std	Y+3, r24	; 0x03
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	25 e1       	ldi	r18, 0x15	; 21
    10f6:	fc 01       	movw	r30, r24
    10f8:	20 83       	st	Z, r18
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	8b 83       	std	Y+3, r24	; 0x03
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	26 e1       	ldi	r18, 0x16	; 22
    110a:	fc 01       	movw	r30, r24
    110c:	20 83       	st	Z, r18
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	9c 83       	std	Y+4, r25	; 0x04
    1116:	8b 83       	std	Y+3, r24	; 0x03
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	27 e1       	ldi	r18, 0x17	; 23
    111e:	fc 01       	movw	r30, r24
    1120:	20 83       	st	Z, r18
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	28 e1       	ldi	r18, 0x18	; 24
    1132:	fc 01       	movw	r30, r24
    1134:	20 83       	st	Z, r18
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	9c 83       	std	Y+4, r25	; 0x04
    113e:	8b 83       	std	Y+3, r24	; 0x03
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	9c 81       	ldd	r25, Y+4	; 0x04
    1144:	29 e1       	ldi	r18, 0x19	; 25
    1146:	fc 01       	movw	r30, r24
    1148:	20 83       	st	Z, r18
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	9c 83       	std	Y+4, r25	; 0x04
    1152:	8b 83       	std	Y+3, r24	; 0x03
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	20 e2       	ldi	r18, 0x20	; 32
    115a:	fc 01       	movw	r30, r24
    115c:	20 83       	st	Z, r18
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	9c 83       	std	Y+4, r25	; 0x04
    1166:	8b 83       	std	Y+3, r24	; 0x03
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04
    116c:	21 e2       	ldi	r18, 0x21	; 33
    116e:	fc 01       	movw	r30, r24
    1170:	20 83       	st	Z, r18
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	9c 83       	std	Y+4, r25	; 0x04
    117a:	8b 83       	std	Y+3, r24	; 0x03
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	22 e2       	ldi	r18, 0x22	; 34
    1182:	fc 01       	movw	r30, r24
    1184:	20 83       	st	Z, r18
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	9c 83       	std	Y+4, r25	; 0x04
    118e:	8b 83       	std	Y+3, r24	; 0x03
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	23 e2       	ldi	r18, 0x23	; 35
    1196:	fc 01       	movw	r30, r24
    1198:	20 83       	st	Z, r18
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	9c 83       	std	Y+4, r25	; 0x04
    11a2:	8b 83       	std	Y+3, r24	; 0x03
    11a4:	8f 81       	ldd	r24, Y+7	; 0x07
    11a6:	98 85       	ldd	r25, Y+8	; 0x08
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	29 81       	ldd	r18, Y+1	; 0x01
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	9c 81       	ldd	r25, Y+4	; 0x04
    11b2:	fc 01       	movw	r30, r24
    11b4:	20 83       	st	Z, r18
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	9c 83       	std	Y+4, r25	; 0x04
    11be:	8b 83       	std	Y+3, r24	; 0x03
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	9a 81       	ldd	r25, Y+2	; 0x02
    11c4:	89 2f       	mov	r24, r25
    11c6:	99 27       	eor	r25, r25
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	29 81       	ldd	r18, Y+1	; 0x01
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	fc 01       	movw	r30, r24
    11d4:	20 83       	st	Z, r18
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	9c 83       	std	Y+4, r25	; 0x04
    11de:	8b 83       	std	Y+3, r24	; 0x03
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	26 e2       	ldi	r18, 0x26	; 38
    11e6:	fc 01       	movw	r30, r24
    11e8:	20 83       	st	Z, r18
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	9c 83       	std	Y+4, r25	; 0x04
    11f2:	8b 83       	std	Y+3, r24	; 0x03
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	27 e2       	ldi	r18, 0x27	; 39
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 83       	st	Z, r18
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	9c 83       	std	Y+4, r25	; 0x04
    1206:	8b 83       	std	Y+3, r24	; 0x03
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	28 e2       	ldi	r18, 0x28	; 40
    120e:	fc 01       	movw	r30, r24
    1210:	20 83       	st	Z, r18
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	9c 83       	std	Y+4, r25	; 0x04
    121a:	8b 83       	std	Y+3, r24	; 0x03
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	29 e2       	ldi	r18, 0x29	; 41
    1222:	fc 01       	movw	r30, r24
    1224:	20 83       	st	Z, r18
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	9c 83       	std	Y+4, r25	; 0x04
    122e:	8b 83       	std	Y+3, r24	; 0x03
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	20 e3       	ldi	r18, 0x30	; 48
    1236:	fc 01       	movw	r30, r24
    1238:	20 83       	st	Z, r18
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	9c 83       	std	Y+4, r25	; 0x04
    1242:	8b 83       	std	Y+3, r24	; 0x03
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	21 e3       	ldi	r18, 0x31	; 49
    124a:	fc 01       	movw	r30, r24
    124c:	20 83       	st	Z, r18
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	9c 83       	std	Y+4, r25	; 0x04
    1256:	8b 83       	std	Y+3, r24	; 0x03
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	28 96       	adiw	r28, 0x08	; 8
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	08 95       	ret

0000126e <xPortStartScheduler>:
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	0e 94 24 0a 	call	0x1448	; 0x1448 <prvSetupTimerInterrupt>
    127a:	a0 91 cd 06 	lds	r26, 0x06CD	; 0x8006cd <pxCurrentTCB>
    127e:	b0 91 ce 06 	lds	r27, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    1282:	cd 91       	ld	r28, X+
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	dd 91       	ld	r29, X+
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	ff 91       	pop	r31
    128c:	ef 91       	pop	r30
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	bf 91       	pop	r27
    1294:	af 91       	pop	r26
    1296:	9f 91       	pop	r25
    1298:	8f 91       	pop	r24
    129a:	7f 91       	pop	r23
    129c:	6f 91       	pop	r22
    129e:	5f 91       	pop	r21
    12a0:	4f 91       	pop	r20
    12a2:	3f 91       	pop	r19
    12a4:	2f 91       	pop	r18
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	ff 90       	pop	r15
    12ac:	ef 90       	pop	r14
    12ae:	df 90       	pop	r13
    12b0:	cf 90       	pop	r12
    12b2:	bf 90       	pop	r11
    12b4:	af 90       	pop	r10
    12b6:	9f 90       	pop	r9
    12b8:	8f 90       	pop	r8
    12ba:	7f 90       	pop	r7
    12bc:	6f 90       	pop	r6
    12be:	5f 90       	pop	r5
    12c0:	4f 90       	pop	r4
    12c2:	3f 90       	pop	r3
    12c4:	2f 90       	pop	r2
    12c6:	1f 90       	pop	r1
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	08 95       	ret
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	08 95       	ret

000012d8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    12d8:	0f 92       	push	r0
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	0f 92       	push	r0
    12e0:	1f 92       	push	r1
    12e2:	11 24       	eor	r1, r1
    12e4:	2f 92       	push	r2
    12e6:	3f 92       	push	r3
    12e8:	4f 92       	push	r4
    12ea:	5f 92       	push	r5
    12ec:	6f 92       	push	r6
    12ee:	7f 92       	push	r7
    12f0:	8f 92       	push	r8
    12f2:	9f 92       	push	r9
    12f4:	af 92       	push	r10
    12f6:	bf 92       	push	r11
    12f8:	cf 92       	push	r12
    12fa:	df 92       	push	r13
    12fc:	ef 92       	push	r14
    12fe:	ff 92       	push	r15
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	2f 93       	push	r18
    1306:	3f 93       	push	r19
    1308:	4f 93       	push	r20
    130a:	5f 93       	push	r21
    130c:	6f 93       	push	r22
    130e:	7f 93       	push	r23
    1310:	8f 93       	push	r24
    1312:	9f 93       	push	r25
    1314:	af 93       	push	r26
    1316:	bf 93       	push	r27
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	ef 93       	push	r30
    131e:	ff 93       	push	r31
    1320:	a0 91 cd 06 	lds	r26, 0x06CD	; 0x8006cd <pxCurrentTCB>
    1324:	b0 91 ce 06 	lds	r27, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    1328:	0d b6       	in	r0, 0x3d	; 61
    132a:	0d 92       	st	X+, r0
    132c:	0e b6       	in	r0, 0x3e	; 62
    132e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1330:	0e 94 20 15 	call	0x2a40	; 0x2a40 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1334:	a0 91 cd 06 	lds	r26, 0x06CD	; 0x8006cd <pxCurrentTCB>
    1338:	b0 91 ce 06 	lds	r27, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    133c:	cd 91       	ld	r28, X+
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	dd 91       	ld	r29, X+
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	ff 91       	pop	r31
    1346:	ef 91       	pop	r30
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	bf 91       	pop	r27
    134e:	af 91       	pop	r26
    1350:	9f 91       	pop	r25
    1352:	8f 91       	pop	r24
    1354:	7f 91       	pop	r23
    1356:	6f 91       	pop	r22
    1358:	5f 91       	pop	r21
    135a:	4f 91       	pop	r20
    135c:	3f 91       	pop	r19
    135e:	2f 91       	pop	r18
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	df 90       	pop	r13
    136a:	cf 90       	pop	r12
    136c:	bf 90       	pop	r11
    136e:	af 90       	pop	r10
    1370:	9f 90       	pop	r9
    1372:	8f 90       	pop	r8
    1374:	7f 90       	pop	r7
    1376:	6f 90       	pop	r6
    1378:	5f 90       	pop	r5
    137a:	4f 90       	pop	r4
    137c:	3f 90       	pop	r3
    137e:	2f 90       	pop	r2
    1380:	1f 90       	pop	r1
    1382:	0f 90       	pop	r0
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1388:	08 95       	ret
	...

0000138c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	0f 92       	push	r0
    1394:	1f 92       	push	r1
    1396:	11 24       	eor	r1, r1
    1398:	2f 92       	push	r2
    139a:	3f 92       	push	r3
    139c:	4f 92       	push	r4
    139e:	5f 92       	push	r5
    13a0:	6f 92       	push	r6
    13a2:	7f 92       	push	r7
    13a4:	8f 92       	push	r8
    13a6:	9f 92       	push	r9
    13a8:	af 92       	push	r10
    13aa:	bf 92       	push	r11
    13ac:	cf 92       	push	r12
    13ae:	df 92       	push	r13
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	2f 93       	push	r18
    13ba:	3f 93       	push	r19
    13bc:	4f 93       	push	r20
    13be:	5f 93       	push	r21
    13c0:	6f 93       	push	r22
    13c2:	7f 93       	push	r23
    13c4:	8f 93       	push	r24
    13c6:	9f 93       	push	r25
    13c8:	af 93       	push	r26
    13ca:	bf 93       	push	r27
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	ef 93       	push	r30
    13d2:	ff 93       	push	r31
    13d4:	a0 91 cd 06 	lds	r26, 0x06CD	; 0x8006cd <pxCurrentTCB>
    13d8:	b0 91 ce 06 	lds	r27, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    13dc:	0d b6       	in	r0, 0x3d	; 61
    13de:	0d 92       	st	X+, r0
    13e0:	0e b6       	in	r0, 0x3e	; 62
    13e2:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    13e4:	0e 94 33 14 	call	0x2866	; 0x2866 <xTaskIncrementTick>
    13e8:	88 23       	and	r24, r24
    13ea:	11 f0       	breq	.+4      	; 0x13f0 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    13ec:	0e 94 20 15 	call	0x2a40	; 0x2a40 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    13f0:	a0 91 cd 06 	lds	r26, 0x06CD	; 0x8006cd <pxCurrentTCB>
    13f4:	b0 91 ce 06 	lds	r27, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    13f8:	cd 91       	ld	r28, X+
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	dd 91       	ld	r29, X+
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	ff 91       	pop	r31
    1402:	ef 91       	pop	r30
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	bf 91       	pop	r27
    140a:	af 91       	pop	r26
    140c:	9f 91       	pop	r25
    140e:	8f 91       	pop	r24
    1410:	7f 91       	pop	r23
    1412:	6f 91       	pop	r22
    1414:	5f 91       	pop	r21
    1416:	4f 91       	pop	r20
    1418:	3f 91       	pop	r19
    141a:	2f 91       	pop	r18
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	ff 90       	pop	r15
    1422:	ef 90       	pop	r14
    1424:	df 90       	pop	r13
    1426:	cf 90       	pop	r12
    1428:	bf 90       	pop	r11
    142a:	af 90       	pop	r10
    142c:	9f 90       	pop	r9
    142e:	8f 90       	pop	r8
    1430:	7f 90       	pop	r7
    1432:	6f 90       	pop	r6
    1434:	5f 90       	pop	r5
    1436:	4f 90       	pop	r4
    1438:	3f 90       	pop	r3
    143a:	2f 90       	pop	r2
    143c:	1f 90       	pop	r1
    143e:	0f 90       	pop	r0
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1444:	08 95       	ret
	...

00001448 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	00 d0       	rcall	.+0      	; 0x144e <prvSetupTimerInterrupt+0x6>
    144e:	00 d0       	rcall	.+0      	; 0x1450 <prvSetupTimerInterrupt+0x8>
    1450:	00 d0       	rcall	.+0      	; 0x1452 <prvSetupTimerInterrupt+0xa>
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1456:	89 e9       	ldi	r24, 0x99	; 153
    1458:	99 e3       	ldi	r25, 0x39	; 57
    145a:	a0 e0       	ldi	r26, 0x00	; 0
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	ab 83       	std	Y+3, r26	; 0x03
    1464:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
    146a:	ab 81       	ldd	r26, Y+3	; 0x03
    146c:	bc 81       	ldd	r27, Y+4	; 0x04
    146e:	68 94       	set
    1470:	15 f8       	bld	r1, 5
    1472:	b6 95       	lsr	r27
    1474:	a7 95       	ror	r26
    1476:	97 95       	ror	r25
    1478:	87 95       	ror	r24
    147a:	16 94       	lsr	r1
    147c:	d1 f7       	brne	.-12     	; 0x1472 <prvSetupTimerInterrupt+0x2a>
    147e:	89 83       	std	Y+1, r24	; 0x01
    1480:	9a 83       	std	Y+2, r25	; 0x02
    1482:	ab 83       	std	Y+3, r26	; 0x03
    1484:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	9a 81       	ldd	r25, Y+2	; 0x02
    148a:	ab 81       	ldd	r26, Y+3	; 0x03
    148c:	bc 81       	ldd	r27, Y+4	; 0x04
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	a1 09       	sbc	r26, r1
    1492:	b1 09       	sbc	r27, r1
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	ab 83       	std	Y+3, r26	; 0x03
    149a:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	ab 81       	ldd	r26, Y+3	; 0x03
    14a6:	bc 81       	ldd	r27, Y+4	; 0x04
    14a8:	89 2f       	mov	r24, r25
    14aa:	9a 2f       	mov	r25, r26
    14ac:	ab 2f       	mov	r26, r27
    14ae:	bb 27       	eor	r27, r27
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	9a 83       	std	Y+2, r25	; 0x02
    14b4:	ab 83       	std	Y+3, r26	; 0x03
    14b6:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    14bc:	89 e8       	ldi	r24, 0x89	; 137
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	2e 81       	ldd	r18, Y+6	; 0x06
    14c2:	fc 01       	movw	r30, r24
    14c4:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    14c6:	88 e8       	ldi	r24, 0x88	; 136
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	2d 81       	ldd	r18, Y+5	; 0x05
    14cc:	fc 01       	movw	r30, r24
    14ce:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    14d0:	8b e0       	ldi	r24, 0x0B	; 11
    14d2:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    14d4:	81 e8       	ldi	r24, 0x81	; 129
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	2d 81       	ldd	r18, Y+5	; 0x05
    14da:	fc 01       	movw	r30, r24
    14dc:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    14de:	8f e6       	ldi	r24, 0x6F	; 111
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	fc 01       	movw	r30, r24
    14e4:	80 81       	ld	r24, Z
    14e6:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	82 60       	ori	r24, 0x02	; 2
    14ec:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    14ee:	8f e6       	ldi	r24, 0x6F	; 111
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	2d 81       	ldd	r18, Y+5	; 0x05
    14f4:	fc 01       	movw	r30, r24
    14f6:	20 83       	st	Z, r18
}
    14f8:	00 00       	nop
    14fa:	26 96       	adiw	r28, 0x06	; 6
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	08 95       	ret

0000150c <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    150c:	0e 94 c6 09 	call	0x138c	; 0x138c <vPortYieldFromTick>
		asm volatile ( "reti" );
    1510:	18 95       	reti
	...

00001514 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	00 d0       	rcall	.+0      	; 0x151a <pvPortMalloc+0x6>
    151a:	00 d0       	rcall	.+0      	; 0x151c <pvPortMalloc+0x8>
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	9c 83       	std	Y+4, r25	; 0x04
    1522:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    1524:	1a 82       	std	Y+2, r1	; 0x02
    1526:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    1528:	0e 94 8f 13 	call	0x271e	; 0x271e <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    152c:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <pucAlignedHeap.2084>
    1530:	90 91 c8 06 	lds	r25, 0x06C8	; 0x8006c8 <pucAlignedHeap.2084+0x1>
    1534:	89 2b       	or	r24, r25
    1536:	31 f4       	brne	.+12     	; 0x1544 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1538:	8e ed       	ldi	r24, 0xDE	; 222
    153a:	92 e0       	ldi	r25, 0x02	; 2
    153c:	90 93 c8 06 	sts	0x06C8, r25	; 0x8006c8 <pucAlignedHeap.2084+0x1>
    1540:	80 93 c7 06 	sts	0x06C7, r24	; 0x8006c7 <pucAlignedHeap.2084>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1544:	20 91 c5 06 	lds	r18, 0x06C5	; 0x8006c5 <xNextFreeByte>
    1548:	30 91 c6 06 	lds	r19, 0x06C6	; 0x8006c6 <xNextFreeByte+0x1>
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	82 0f       	add	r24, r18
    1552:	93 1f       	adc	r25, r19
    1554:	87 3e       	cpi	r24, 0xE7	; 231
    1556:	93 40       	sbci	r25, 0x03	; 3
    1558:	38 f5       	brcc	.+78     	; 0x15a8 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    155a:	20 91 c5 06 	lds	r18, 0x06C5	; 0x8006c5 <xNextFreeByte>
    155e:	30 91 c6 06 	lds	r19, 0x06C6	; 0x8006c6 <xNextFreeByte+0x1>
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	28 0f       	add	r18, r24
    1568:	39 1f       	adc	r19, r25
    156a:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <xNextFreeByte>
    156e:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1572:	82 17       	cp	r24, r18
    1574:	93 07       	cpc	r25, r19
    1576:	c0 f4       	brcc	.+48     	; 0x15a8 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1578:	20 91 c7 06 	lds	r18, 0x06C7	; 0x8006c7 <pucAlignedHeap.2084>
    157c:	30 91 c8 06 	lds	r19, 0x06C8	; 0x8006c8 <pucAlignedHeap.2084+0x1>
    1580:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <xNextFreeByte>
    1584:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <xNextFreeByte+0x1>
    1588:	82 0f       	add	r24, r18
    158a:	93 1f       	adc	r25, r19
    158c:	9a 83       	std	Y+2, r25	; 0x02
    158e:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    1590:	20 91 c5 06 	lds	r18, 0x06C5	; 0x8006c5 <xNextFreeByte>
    1594:	30 91 c6 06 	lds	r19, 0x06C6	; 0x8006c6 <xNextFreeByte+0x1>
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	82 0f       	add	r24, r18
    159e:	93 1f       	adc	r25, r19
    15a0:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <xNextFreeByte+0x1>
    15a4:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    15a8:	0e 94 9c 13 	call	0x2738	; 0x2738 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
}
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <vPortFree+0x6>
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	9a 83       	std	Y+2, r25	; 0x02
    15ca:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    15cc:	00 00       	nop
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	08 95       	ret

000015d8 <_serial_tx_int_on>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	00 d0       	rcall	.+0      	; 0x15de <_serial_tx_int_on+0x6>
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	9a 83       	std	Y+2, r25	; 0x02
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	05 97       	sbiw	r24, 0x05	; 5
    15ec:	29 81       	ldd	r18, Y+1	; 0x01
    15ee:	3a 81       	ldd	r19, Y+2	; 0x02
    15f0:	25 50       	subi	r18, 0x05	; 5
    15f2:	31 09       	sbc	r19, r1
    15f4:	f9 01       	movw	r30, r18
    15f6:	20 81       	ld	r18, Z
    15f8:	20 62       	ori	r18, 0x20	; 32
    15fa:	fc 01       	movw	r30, r24
    15fc:	20 83       	st	Z, r18
    15fe:	00 00       	nop
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	08 95       	ret

0000160a <serial_new_instance>:
    160a:	8f 92       	push	r8
    160c:	9f 92       	push	r9
    160e:	af 92       	push	r10
    1610:	bf 92       	push	r11
    1612:	cf 92       	push	r12
    1614:	df 92       	push	r13
    1616:	ef 92       	push	r14
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	61 97       	sbiw	r28, 0x11	; 17
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	8c 83       	std	Y+4, r24	; 0x04
    1632:	4d 83       	std	Y+5, r20	; 0x05
    1634:	5e 83       	std	Y+6, r21	; 0x06
    1636:	6f 83       	std	Y+7, r22	; 0x07
    1638:	78 87       	std	Y+8, r23	; 0x08
    163a:	29 87       	std	Y+9, r18	; 0x09
    163c:	0a 87       	std	Y+10, r16	; 0x0a
    163e:	eb 86       	std	Y+11, r14	; 0x0b
    1640:	dd 86       	std	Y+13, r13	; 0x0d
    1642:	cc 86       	std	Y+12, r12	; 0x0c
    1644:	bf 86       	std	Y+15, r11	; 0x0f
    1646:	ae 86       	std	Y+14, r10	; 0x0e
    1648:	99 8a       	std	Y+17, r9	; 0x11
    164a:	88 8a       	std	Y+16, r8	; 0x10
    164c:	88 e0       	ldi	r24, 0x08	; 8
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 32 1c 	call	0x3864	; 0x3864 <malloc>
    1654:	9a 83       	std	Y+2, r25	; 0x02
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	8c 81       	ldd	r24, Y+4	; 0x04
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	87 53       	subi	r24, 0x37	; 55
    1664:	99 4f       	sbci	r25, 0xF9	; 249
    1666:	29 81       	ldd	r18, Y+1	; 0x01
    1668:	3a 81       	ldd	r19, Y+2	; 0x02
    166a:	fc 01       	movw	r30, r24
    166c:	31 83       	std	Z+1, r19	; 0x01
    166e:	20 83       	st	Z, r18
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	88 2f       	mov	r24, r24
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	8a 5f       	subi	r24, 0xFA	; 250
    167c:	9e 4f       	sbci	r25, 0xFE	; 254
    167e:	fc 01       	movw	r30, r24
    1680:	20 81       	ld	r18, Z
    1682:	31 81       	ldd	r19, Z+1	; 0x01
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	9a 81       	ldd	r25, Y+2	; 0x02
    1688:	fc 01       	movw	r30, r24
    168a:	31 83       	std	Z+1, r19	; 0x01
    168c:	20 83       	st	Z, r18
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	2e 85       	ldd	r18, Y+14	; 0x0e
    1694:	3f 85       	ldd	r19, Y+15	; 0x0f
    1696:	fc 01       	movw	r30, r24
    1698:	33 83       	std	Z+3, r19	; 0x03
    169a:	22 83       	std	Z+2, r18	; 0x02
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	9a 81       	ldd	r25, Y+2	; 0x02
    16a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    16a2:	3d 85       	ldd	r19, Y+13	; 0x0d
    16a4:	fc 01       	movw	r30, r24
    16a6:	35 83       	std	Z+5, r19	; 0x05
    16a8:	24 83       	std	Z+4, r18	; 0x04
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	9a 81       	ldd	r25, Y+2	; 0x02
    16ae:	28 89       	ldd	r18, Y+16	; 0x10
    16b0:	39 89       	ldd	r19, Y+17	; 0x11
    16b2:	fc 01       	movw	r30, r24
    16b4:	37 83       	std	Z+7, r19	; 0x07
    16b6:	26 83       	std	Z+6, r18	; 0x06
    16b8:	8f e5       	ldi	r24, 0x5F	; 95
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	fc 01       	movw	r30, r24
    16be:	80 81       	ld	r24, Z
    16c0:	8b 83       	std	Y+3, r24	; 0x03
    16c2:	f8 94       	cli
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	fc 01       	movw	r30, r24
    16ca:	80 81       	ld	r24, Z
    16cc:	91 81       	ldd	r25, Z+1	; 0x01
    16ce:	06 97       	sbiw	r24, 0x06	; 6
    16d0:	29 81       	ldd	r18, Y+1	; 0x01
    16d2:	3a 81       	ldd	r19, Y+2	; 0x02
    16d4:	f9 01       	movw	r30, r18
    16d6:	20 81       	ld	r18, Z
    16d8:	31 81       	ldd	r19, Z+1	; 0x01
    16da:	26 50       	subi	r18, 0x06	; 6
    16dc:	31 09       	sbc	r19, r1
    16de:	f9 01       	movw	r30, r18
    16e0:	20 81       	ld	r18, Z
    16e2:	22 60       	ori	r18, 0x02	; 2
    16e4:	fc 01       	movw	r30, r24
    16e6:	20 83       	st	Z, r18
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
    16ec:	fc 01       	movw	r30, r24
    16ee:	80 81       	ld	r24, Z
    16f0:	91 81       	ldd	r25, Z+1	; 0x01
    16f2:	8c 01       	movw	r16, r24
    16f4:	02 50       	subi	r16, 0x02	; 2
    16f6:	11 09       	sbc	r17, r1
    16f8:	8d 81       	ldd	r24, Y+5	; 0x05
    16fa:	9e 81       	ldd	r25, Y+6	; 0x06
    16fc:	af 81       	ldd	r26, Y+7	; 0x07
    16fe:	b8 85       	ldd	r27, Y+8	; 0x08
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	aa 1f       	adc	r26, r26
    1706:	bb 1f       	adc	r27, r27
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	aa 1f       	adc	r26, r26
    170e:	bb 1f       	adc	r27, r27
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	aa 1f       	adc	r26, r26
    1716:	bb 1f       	adc	r27, r27
    1718:	9c 01       	movw	r18, r24
    171a:	ad 01       	movw	r20, r26
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a1 ee       	ldi	r26, 0xE1	; 225
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodsi4>
    172c:	da 01       	movw	r26, r20
    172e:	c9 01       	movw	r24, r18
    1730:	81 50       	subi	r24, 0x01	; 1
    1732:	f8 01       	movw	r30, r16
    1734:	80 83       	st	Z, r24
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	fc 01       	movw	r30, r24
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	05 97       	sbiw	r24, 0x05	; 5
    1742:	28 e9       	ldi	r18, 0x98	; 152
    1744:	fc 01       	movw	r30, r24
    1746:	20 83       	st	Z, r18
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	9a 81       	ldd	r25, Y+2	; 0x02
    174c:	fc 01       	movw	r30, r24
    174e:	80 81       	ld	r24, Z
    1750:	91 81       	ldd	r25, Z+1	; 0x01
    1752:	04 97       	sbiw	r24, 0x04	; 4
    1754:	26 e0       	ldi	r18, 0x06	; 6
    1756:	fc 01       	movw	r30, r24
    1758:	20 83       	st	Z, r18
    175a:	8f e5       	ldi	r24, 0x5F	; 95
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	2b 81       	ldd	r18, Y+3	; 0x03
    1760:	fc 01       	movw	r30, r24
    1762:	20 83       	st	Z, r18
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	9a 81       	ldd	r25, Y+2	; 0x02
    1768:	61 96       	adiw	r28, 0x11	; 17
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	ef 90       	pop	r14
    177e:	df 90       	pop	r13
    1780:	cf 90       	pop	r12
    1782:	bf 90       	pop	r11
    1784:	af 90       	pop	r10
    1786:	9f 90       	pop	r9
    1788:	8f 90       	pop	r8
    178a:	08 95       	ret

0000178c <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	00 d0       	rcall	.+0      	; 0x1792 <serial_send_bytes+0x6>
    1792:	00 d0       	rcall	.+0      	; 0x1794 <serial_send_bytes+0x8>
    1794:	00 d0       	rcall	.+0      	; 0x1796 <serial_send_bytes+0xa>
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	9b 83       	std	Y+3, r25	; 0x03
    179c:	8a 83       	std	Y+2, r24	; 0x02
    179e:	7d 83       	std	Y+5, r23	; 0x05
    17a0:	6c 83       	std	Y+4, r22	; 0x04
    17a2:	4e 83       	std	Y+6, r20	; 0x06
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	9b 81       	ldd	r25, Y+3	; 0x03
    17a8:	fc 01       	movw	r30, r24
    17aa:	82 81       	ldd	r24, Z+2	; 0x02
    17ac:	93 81       	ldd	r25, Z+3	; 0x03
    17ae:	89 2b       	or	r24, r25
    17b0:	a9 f0       	breq	.+42     	; 0x17dc <serial_send_bytes+0x50>
    17b2:	8e 81       	ldd	r24, Y+6	; 0x06
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	9b 81       	ldd	r25, Y+3	; 0x03
    17bc:	fc 01       	movw	r30, r24
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	fc 01       	movw	r30, r24
    17c4:	82 a1       	ldd	r24, Z+34	; 0x22
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	40 e2       	ldi	r20, 0x20	; 32
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	ba 01       	movw	r22, r20
    17d0:	68 1b       	sub	r22, r24
    17d2:	79 0b       	sbc	r23, r25
    17d4:	cb 01       	movw	r24, r22
    17d6:	82 17       	cp	r24, r18
    17d8:	93 07       	cpc	r25, r19
    17da:	54 f0       	brlt	.+20     	; 0x17f0 <serial_send_bytes+0x64>
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	9b 81       	ldd	r25, Y+3	; 0x03
    17e0:	fc 01       	movw	r30, r24
    17e2:	82 81       	ldd	r24, Z+2	; 0x02
    17e4:	93 81       	ldd	r25, Z+3	; 0x03
    17e6:	89 2b       	or	r24, r25
    17e8:	29 f4       	brne	.+10     	; 0x17f4 <serial_send_bytes+0x68>
    17ea:	8e 81       	ldd	r24, Y+6	; 0x06
    17ec:	82 30       	cpi	r24, 0x02	; 2
    17ee:	10 f0       	brcs	.+4      	; 0x17f4 <serial_send_bytes+0x68>
		return BUFFER_FULL;
    17f0:	82 e0       	ldi	r24, 0x02	; 2
    17f2:	22 c0       	rjmp	.+68     	; 0x1838 <serial_send_bytes+0xac>
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    17f4:	19 82       	std	Y+1, r1	; 0x01
    17f6:	14 c0       	rjmp	.+40     	; 0x1820 <serial_send_bytes+0x94>
		buffer_put_item(handle->_tx_buf, buf[i]);
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	88 2f       	mov	r24, r24
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1800:	3d 81       	ldd	r19, Y+5	; 0x05
    1802:	82 0f       	add	r24, r18
    1804:	93 1f       	adc	r25, r19
    1806:	fc 01       	movw	r30, r24
    1808:	20 81       	ld	r18, Z
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	9b 81       	ldd	r25, Y+3	; 0x03
    180e:	fc 01       	movw	r30, r24
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	93 81       	ldd	r25, Z+3	; 0x03
    1814:	62 2f       	mov	r22, r18
    1816:	0e 94 e5 05 	call	0xbca	; 0xbca <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	8f 5f       	subi	r24, 0xFF	; 255
    181e:	89 83       	std	Y+1, r24	; 0x01
    1820:	99 81       	ldd	r25, Y+1	; 0x01
    1822:	8e 81       	ldd	r24, Y+6	; 0x06
    1824:	98 17       	cp	r25, r24
    1826:	40 f3       	brcs	.-48     	; 0x17f8 <serial_send_bytes+0x6c>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	9b 81       	ldd	r25, Y+3	; 0x03
    182c:	fc 01       	movw	r30, r24
    182e:	80 81       	ld	r24, Z
    1830:	91 81       	ldd	r25, Z+1	; 0x01
    1832:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <_serial_tx_int_on>
	return BUFFER_OK;
    1836:	80 e0       	ldi	r24, 0x00	; 0
}
    1838:	26 96       	adiw	r28, 0x06	; 6
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	08 95       	ret

0000184a <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    184a:	1f 92       	push	r1
    184c:	0f 92       	push	r0
    184e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1852:	0f 92       	push	r0
    1854:	11 24       	eor	r1, r1
    1856:	2f 93       	push	r18
    1858:	3f 93       	push	r19
    185a:	4f 93       	push	r20
    185c:	5f 93       	push	r21
    185e:	6f 93       	push	r22
    1860:	7f 93       	push	r23
    1862:	8f 93       	push	r24
    1864:	9f 93       	push	r25
    1866:	af 93       	push	r26
    1868:	bf 93       	push	r27
    186a:	ef 93       	push	r30
    186c:	ff 93       	push	r31
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	1f 92       	push	r1
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1878:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <_ser_handle>
    187c:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <_ser_handle+0x1>
    1880:	89 2b       	or	r24, r25
    1882:	31 f1       	breq	.+76     	; 0x18d0 <__vector_20+0x86>
		item = UDR0;
    1884:	86 ec       	ldi	r24, 0xC6	; 198
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	fc 01       	movw	r30, r24
    188a:	80 81       	ld	r24, Z
    188c:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    188e:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <_ser_handle>
    1892:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <_ser_handle+0x1>
    1896:	fc 01       	movw	r30, r24
    1898:	84 81       	ldd	r24, Z+4	; 0x04
    189a:	95 81       	ldd	r25, Z+5	; 0x05
    189c:	69 81       	ldd	r22, Y+1	; 0x01
    189e:	0e 94 e5 05 	call	0xbca	; 0xbca <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    18a2:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <_ser_handle>
    18a6:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <_ser_handle+0x1>
    18aa:	fc 01       	movw	r30, r24
    18ac:	86 81       	ldd	r24, Z+6	; 0x06
    18ae:	97 81       	ldd	r25, Z+7	; 0x07
    18b0:	89 2b       	or	r24, r25
    18b2:	71 f0       	breq	.+28     	; 0x18d0 <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    18b4:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <_ser_handle>
    18b8:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <_ser_handle+0x1>
    18bc:	fc 01       	movw	r30, r24
    18be:	26 81       	ldd	r18, Z+6	; 0x06
    18c0:	37 81       	ldd	r19, Z+7	; 0x07
    18c2:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <_ser_handle>
    18c6:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <_ser_handle+0x1>
    18ca:	69 81       	ldd	r22, Y+1	; 0x01
    18cc:	f9 01       	movw	r30, r18
    18ce:	09 95       	icall
		}
	}
}
    18d0:	00 00       	nop
    18d2:	0f 90       	pop	r0
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	ff 91       	pop	r31
    18da:	ef 91       	pop	r30
    18dc:	bf 91       	pop	r27
    18de:	af 91       	pop	r26
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	7f 91       	pop	r23
    18e6:	6f 91       	pop	r22
    18e8:	5f 91       	pop	r21
    18ea:	4f 91       	pop	r20
    18ec:	3f 91       	pop	r19
    18ee:	2f 91       	pop	r18
    18f0:	0f 90       	pop	r0
    18f2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18f6:	0f 90       	pop	r0
    18f8:	1f 90       	pop	r1
    18fa:	18 95       	reti

000018fc <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    18fc:	1f 92       	push	r1
    18fe:	0f 92       	push	r0
    1900:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1904:	0f 92       	push	r0
    1906:	11 24       	eor	r1, r1
    1908:	2f 93       	push	r18
    190a:	3f 93       	push	r19
    190c:	4f 93       	push	r20
    190e:	5f 93       	push	r21
    1910:	6f 93       	push	r22
    1912:	7f 93       	push	r23
    1914:	8f 93       	push	r24
    1916:	9f 93       	push	r25
    1918:	af 93       	push	r26
    191a:	bf 93       	push	r27
    191c:	ef 93       	push	r30
    191e:	ff 93       	push	r31
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	1f 92       	push	r1
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    192a:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <_ser_handle>
    192e:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <_ser_handle+0x1>
    1932:	89 2b       	or	r24, r25
    1934:	f9 f0       	breq	.+62     	; 0x1974 <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    1936:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <_ser_handle>
    193a:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <_ser_handle+0x1>
    193e:	fc 01       	movw	r30, r24
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	93 81       	ldd	r25, Z+3	; 0x03
    1944:	9e 01       	movw	r18, r28
    1946:	2f 5f       	subi	r18, 0xFF	; 255
    1948:	3f 4f       	sbci	r19, 0xFF	; 255
    194a:	b9 01       	movw	r22, r18
    194c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <buffer_get_item>
    1950:	88 23       	and	r24, r24
    1952:	31 f4       	brne	.+12     	; 0x1960 <__vector_21+0x64>
			UDR0 = item;
    1954:	86 ec       	ldi	r24, 0xC6	; 198
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	29 81       	ldd	r18, Y+1	; 0x01
    195a:	fc 01       	movw	r30, r24
    195c:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    195e:	13 c0       	rjmp	.+38     	; 0x1986 <__vector_21+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
			UDR0 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    1960:	81 ec       	ldi	r24, 0xC1	; 193
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	21 ec       	ldi	r18, 0xC1	; 193
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	f9 01       	movw	r30, r18
    196a:	20 81       	ld	r18, Z
    196c:	2f 7d       	andi	r18, 0xDF	; 223
    196e:	fc 01       	movw	r30, r24
    1970:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    1974:	81 ec       	ldi	r24, 0xC1	; 193
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	21 ec       	ldi	r18, 0xC1	; 193
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	f9 01       	movw	r30, r18
    197e:	20 81       	ld	r18, Z
    1980:	2f 7d       	andi	r18, 0xDF	; 223
    1982:	fc 01       	movw	r30, r24
    1984:	20 83       	st	Z, r18
	}
}
    1986:	00 00       	nop
    1988:	0f 90       	pop	r0
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	ff 91       	pop	r31
    1990:	ef 91       	pop	r30
    1992:	bf 91       	pop	r27
    1994:	af 91       	pop	r26
    1996:	9f 91       	pop	r25
    1998:	8f 91       	pop	r24
    199a:	7f 91       	pop	r23
    199c:	6f 91       	pop	r22
    199e:	5f 91       	pop	r21
    19a0:	4f 91       	pop	r20
    19a2:	3f 91       	pop	r19
    19a4:	2f 91       	pop	r18
    19a6:	0f 90       	pop	r0
    19a8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    19ac:	0f 90       	pop	r0
    19ae:	1f 90       	pop	r1
    19b0:	18 95       	reti

000019b2 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    19b2:	1f 92       	push	r1
    19b4:	0f 92       	push	r0
    19b6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    19ba:	0f 92       	push	r0
    19bc:	11 24       	eor	r1, r1
    19be:	2f 93       	push	r18
    19c0:	3f 93       	push	r19
    19c2:	4f 93       	push	r20
    19c4:	5f 93       	push	r21
    19c6:	6f 93       	push	r22
    19c8:	7f 93       	push	r23
    19ca:	8f 93       	push	r24
    19cc:	9f 93       	push	r25
    19ce:	af 93       	push	r26
    19d0:	bf 93       	push	r27
    19d2:	ef 93       	push	r30
    19d4:	ff 93       	push	r31
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	1f 92       	push	r1
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    19e0:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <_ser_handle+0x2>
    19e4:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <_ser_handle+0x3>
    19e8:	89 2b       	or	r24, r25
    19ea:	31 f1       	breq	.+76     	; 0x1a38 <__vector_28+0x86>
		item = UDR1;
    19ec:	8e ec       	ldi	r24, 0xCE	; 206
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	fc 01       	movw	r30, r24
    19f2:	80 81       	ld	r24, Z
    19f4:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    19f6:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <_ser_handle+0x2>
    19fa:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <_ser_handle+0x3>
    19fe:	fc 01       	movw	r30, r24
    1a00:	84 81       	ldd	r24, Z+4	; 0x04
    1a02:	95 81       	ldd	r25, Z+5	; 0x05
    1a04:	69 81       	ldd	r22, Y+1	; 0x01
    1a06:	0e 94 e5 05 	call	0xbca	; 0xbca <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    1a0a:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <_ser_handle+0x2>
    1a0e:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <_ser_handle+0x3>
    1a12:	fc 01       	movw	r30, r24
    1a14:	86 81       	ldd	r24, Z+6	; 0x06
    1a16:	97 81       	ldd	r25, Z+7	; 0x07
    1a18:	89 2b       	or	r24, r25
    1a1a:	71 f0       	breq	.+28     	; 0x1a38 <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    1a1c:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <_ser_handle+0x2>
    1a20:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <_ser_handle+0x3>
    1a24:	fc 01       	movw	r30, r24
    1a26:	26 81       	ldd	r18, Z+6	; 0x06
    1a28:	37 81       	ldd	r19, Z+7	; 0x07
    1a2a:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <_ser_handle+0x2>
    1a2e:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <_ser_handle+0x3>
    1a32:	69 81       	ldd	r22, Y+1	; 0x01
    1a34:	f9 01       	movw	r30, r18
    1a36:	09 95       	icall
		}
	}
}
    1a38:	00 00       	nop
    1a3a:	0f 90       	pop	r0
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	ff 91       	pop	r31
    1a42:	ef 91       	pop	r30
    1a44:	bf 91       	pop	r27
    1a46:	af 91       	pop	r26
    1a48:	9f 91       	pop	r25
    1a4a:	8f 91       	pop	r24
    1a4c:	7f 91       	pop	r23
    1a4e:	6f 91       	pop	r22
    1a50:	5f 91       	pop	r21
    1a52:	4f 91       	pop	r20
    1a54:	3f 91       	pop	r19
    1a56:	2f 91       	pop	r18
    1a58:	0f 90       	pop	r0
    1a5a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a5e:	0f 90       	pop	r0
    1a60:	1f 90       	pop	r1
    1a62:	18 95       	reti

00001a64 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    1a64:	1f 92       	push	r1
    1a66:	0f 92       	push	r0
    1a68:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a6c:	0f 92       	push	r0
    1a6e:	11 24       	eor	r1, r1
    1a70:	2f 93       	push	r18
    1a72:	3f 93       	push	r19
    1a74:	4f 93       	push	r20
    1a76:	5f 93       	push	r21
    1a78:	6f 93       	push	r22
    1a7a:	7f 93       	push	r23
    1a7c:	8f 93       	push	r24
    1a7e:	9f 93       	push	r25
    1a80:	af 93       	push	r26
    1a82:	bf 93       	push	r27
    1a84:	ef 93       	push	r30
    1a86:	ff 93       	push	r31
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	1f 92       	push	r1
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1a92:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <_ser_handle+0x2>
    1a96:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <_ser_handle+0x3>
    1a9a:	89 2b       	or	r24, r25
    1a9c:	f9 f0       	breq	.+62     	; 0x1adc <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1a9e:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <_ser_handle+0x2>
    1aa2:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <_ser_handle+0x3>
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	9e 01       	movw	r18, r28
    1aae:	2f 5f       	subi	r18, 0xFF	; 255
    1ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab2:	b9 01       	movw	r22, r18
    1ab4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <buffer_get_item>
    1ab8:	88 23       	and	r24, r24
    1aba:	31 f4       	brne	.+12     	; 0x1ac8 <__vector_29+0x64>
			UDR1 = item;
    1abc:	8e ec       	ldi	r24, 0xCE	; 206
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	29 81       	ldd	r18, Y+1	; 0x01
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    1ac6:	13 c0       	rjmp	.+38     	; 0x1aee <__vector_29+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
			UDR1 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    1ac8:	89 ec       	ldi	r24, 0xC9	; 201
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	29 ec       	ldi	r18, 0xC9	; 201
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	f9 01       	movw	r30, r18
    1ad2:	20 81       	ld	r18, Z
    1ad4:	2f 7d       	andi	r18, 0xDF	; 223
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    1ada:	09 c0       	rjmp	.+18     	; 0x1aee <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    1adc:	89 ec       	ldi	r24, 0xC9	; 201
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	29 ec       	ldi	r18, 0xC9	; 201
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	f9 01       	movw	r30, r18
    1ae6:	20 81       	ld	r18, Z
    1ae8:	2f 7d       	andi	r18, 0xDF	; 223
    1aea:	fc 01       	movw	r30, r24
    1aec:	20 83       	st	Z, r18
	}
}
    1aee:	00 00       	nop
    1af0:	0f 90       	pop	r0
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	ff 91       	pop	r31
    1af8:	ef 91       	pop	r30
    1afa:	bf 91       	pop	r27
    1afc:	af 91       	pop	r26
    1afe:	9f 91       	pop	r25
    1b00:	8f 91       	pop	r24
    1b02:	7f 91       	pop	r23
    1b04:	6f 91       	pop	r22
    1b06:	5f 91       	pop	r21
    1b08:	4f 91       	pop	r20
    1b0a:	3f 91       	pop	r19
    1b0c:	2f 91       	pop	r18
    1b0e:	0f 90       	pop	r0
    1b10:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b14:	0f 90       	pop	r0
    1b16:	1f 90       	pop	r1
    1b18:	18 95       	reti

00001b1a <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <xQueueGenericReset+0x6>
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <xQueueGenericReset+0x8>
    1b22:	1f 92       	push	r1
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	9c 83       	std	Y+4, r25	; 0x04
    1b2a:	8b 83       	std	Y+3, r24	; 0x03
    1b2c:	6d 83       	std	Y+5, r22	; 0x05
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	9a 83       	std	Y+2, r25	; 0x02
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	0f 92       	push	r0
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b40:	fc 01       	movw	r30, r24
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	29 81       	ldd	r18, Y+1	; 0x01
    1b48:	3a 81       	ldd	r19, Y+2	; 0x02
    1b4a:	f9 01       	movw	r30, r18
    1b4c:	23 8d       	ldd	r18, Z+27	; 0x1b
    1b4e:	42 2f       	mov	r20, r18
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	29 81       	ldd	r18, Y+1	; 0x01
    1b54:	3a 81       	ldd	r19, Y+2	; 0x02
    1b56:	f9 01       	movw	r30, r18
    1b58:	24 8d       	ldd	r18, Z+28	; 0x1c
    1b5a:	22 2f       	mov	r18, r18
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	42 9f       	mul	r20, r18
    1b60:	b0 01       	movw	r22, r0
    1b62:	43 9f       	mul	r20, r19
    1b64:	70 0d       	add	r23, r0
    1b66:	52 9f       	mul	r21, r18
    1b68:	70 0d       	add	r23, r0
    1b6a:	11 24       	eor	r1, r1
    1b6c:	9b 01       	movw	r18, r22
    1b6e:	28 0f       	add	r18, r24
    1b70:	39 1f       	adc	r19, r25
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	9a 81       	ldd	r25, Y+2	; 0x02
    1b76:	fc 01       	movw	r30, r24
    1b78:	33 83       	std	Z+3, r19	; 0x03
    1b7a:	22 83       	std	Z+2, r18	; 0x02
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b80:	fc 01       	movw	r30, r24
    1b82:	12 8e       	std	Z+26, r1	; 0x1a
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	9a 81       	ldd	r25, Y+2	; 0x02
    1b88:	fc 01       	movw	r30, r24
    1b8a:	20 81       	ld	r18, Z
    1b8c:	31 81       	ldd	r19, Z+1	; 0x01
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	9a 81       	ldd	r25, Y+2	; 0x02
    1b92:	fc 01       	movw	r30, r24
    1b94:	35 83       	std	Z+5, r19	; 0x05
    1b96:	24 83       	std	Z+4, r18	; 0x04
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	80 81       	ld	r24, Z
    1ba0:	91 81       	ldd	r25, Z+1	; 0x01
    1ba2:	29 81       	ldd	r18, Y+1	; 0x01
    1ba4:	3a 81       	ldd	r19, Y+2	; 0x02
    1ba6:	f9 01       	movw	r30, r18
    1ba8:	23 8d       	ldd	r18, Z+27	; 0x1b
    1baa:	22 2f       	mov	r18, r18
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	a9 01       	movw	r20, r18
    1bb0:	41 50       	subi	r20, 0x01	; 1
    1bb2:	51 09       	sbc	r21, r1
    1bb4:	29 81       	ldd	r18, Y+1	; 0x01
    1bb6:	3a 81       	ldd	r19, Y+2	; 0x02
    1bb8:	f9 01       	movw	r30, r18
    1bba:	24 8d       	ldd	r18, Z+28	; 0x1c
    1bbc:	22 2f       	mov	r18, r18
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	42 9f       	mul	r20, r18
    1bc2:	b0 01       	movw	r22, r0
    1bc4:	43 9f       	mul	r20, r19
    1bc6:	70 0d       	add	r23, r0
    1bc8:	52 9f       	mul	r21, r18
    1bca:	70 0d       	add	r23, r0
    1bcc:	11 24       	eor	r1, r1
    1bce:	9b 01       	movw	r18, r22
    1bd0:	28 0f       	add	r18, r24
    1bd2:	39 1f       	adc	r19, r25
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	fc 01       	movw	r30, r24
    1bda:	37 83       	std	Z+7, r19	; 0x07
    1bdc:	26 83       	std	Z+6, r18	; 0x06
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	9a 81       	ldd	r25, Y+2	; 0x02
    1be2:	2f ef       	ldi	r18, 0xFF	; 255
    1be4:	fc 01       	movw	r30, r24
    1be6:	25 8f       	std	Z+29, r18	; 0x1d
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	9a 81       	ldd	r25, Y+2	; 0x02
    1bec:	2f ef       	ldi	r18, 0xFF	; 255
    1bee:	fc 01       	movw	r30, r24
    1bf0:	26 8f       	std	Z+30, r18	; 0x1e
    1bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf4:	88 23       	and	r24, r24
    1bf6:	81 f4       	brne	.+32     	; 0x1c18 <xQueueGenericReset+0xfe>
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	80 85       	ldd	r24, Z+8	; 0x08
    1c00:	88 23       	and	r24, r24
    1c02:	a1 f0       	breq	.+40     	; 0x1c2c <xQueueGenericReset+0x112>
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	08 96       	adiw	r24, 0x08	; 8
    1c0a:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <xTaskRemoveFromEventList>
    1c0e:	88 23       	and	r24, r24
    1c10:	69 f0       	breq	.+26     	; 0x1c2c <xQueueGenericReset+0x112>
    1c12:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <vPortYield>
    1c16:	0a c0       	rjmp	.+20     	; 0x1c2c <xQueueGenericReset+0x112>
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	08 96       	adiw	r24, 0x08	; 8
    1c1e:	0e 94 28 06 	call	0xc50	; 0xc50 <vListInitialise>
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	41 96       	adiw	r24, 0x11	; 17
    1c28:	0e 94 28 06 	call	0xc50	; 0xc50 <vListInitialise>
    1c2c:	0f 90       	pop	r0
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	08 95       	ret

00001c42 <xQueueGenericCreate>:
    1c42:	0f 93       	push	r16
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	29 97       	sbiw	r28, 0x09	; 9
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	8f 83       	std	Y+7, r24	; 0x07
    1c5c:	68 87       	std	Y+8, r22	; 0x08
    1c5e:	49 87       	std	Y+9, r20	; 0x09
    1c60:	88 85       	ldd	r24, Y+8	; 0x08
    1c62:	88 23       	and	r24, r24
    1c64:	19 f4       	brne	.+6      	; 0x1c6c <xQueueGenericCreate+0x2a>
    1c66:	1a 82       	std	Y+2, r1	; 0x02
    1c68:	19 82       	std	Y+1, r1	; 0x01
    1c6a:	0f c0       	rjmp	.+30     	; 0x1c8a <xQueueGenericCreate+0x48>
    1c6c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6e:	48 2f       	mov	r20, r24
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	88 85       	ldd	r24, Y+8	; 0x08
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	42 9f       	mul	r20, r18
    1c7a:	c0 01       	movw	r24, r0
    1c7c:	43 9f       	mul	r20, r19
    1c7e:	90 0d       	add	r25, r0
    1c80:	52 9f       	mul	r21, r18
    1c82:	90 0d       	add	r25, r0
    1c84:	11 24       	eor	r1, r1
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8e:	81 96       	adiw	r24, 0x21	; 33
    1c90:	0e 94 8a 0a 	call	0x1514	; 0x1514 <pvPortMalloc>
    1c94:	9c 83       	std	Y+4, r25	; 0x04
    1c96:	8b 83       	std	Y+3, r24	; 0x03
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9c:	89 2b       	or	r24, r25
    1c9e:	81 f0       	breq	.+32     	; 0x1cc0 <xQueueGenericCreate+0x7e>
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca4:	81 96       	adiw	r24, 0x21	; 33
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	2b 81       	ldd	r18, Y+3	; 0x03
    1cac:	3c 81       	ldd	r19, Y+4	; 0x04
    1cae:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb2:	89 01       	movw	r16, r18
    1cb4:	29 85       	ldd	r18, Y+9	; 0x09
    1cb6:	ac 01       	movw	r20, r24
    1cb8:	68 85       	ldd	r22, Y+8	; 0x08
    1cba:	8f 81       	ldd	r24, Y+7	; 0x07
    1cbc:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <prvInitialiseNewQueue>
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	29 96       	adiw	r28, 0x09	; 9
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	08 95       	ret

00001cda <prvInitialiseNewQueue>:
    1cda:	0f 93       	push	r16
    1cdc:	1f 93       	push	r17
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	27 97       	sbiw	r28, 0x07	; 7
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	6a 83       	std	Y+2, r22	; 0x02
    1cf6:	5c 83       	std	Y+4, r21	; 0x04
    1cf8:	4b 83       	std	Y+3, r20	; 0x03
    1cfa:	2d 83       	std	Y+5, r18	; 0x05
    1cfc:	1f 83       	std	Y+7, r17	; 0x07
    1cfe:	0e 83       	std	Y+6, r16	; 0x06
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	88 23       	and	r24, r24
    1d04:	41 f4       	brne	.+16     	; 0x1d16 <prvInitialiseNewQueue+0x3c>
    1d06:	8e 81       	ldd	r24, Y+6	; 0x06
    1d08:	9f 81       	ldd	r25, Y+7	; 0x07
    1d0a:	2e 81       	ldd	r18, Y+6	; 0x06
    1d0c:	3f 81       	ldd	r19, Y+7	; 0x07
    1d0e:	fc 01       	movw	r30, r24
    1d10:	31 83       	std	Z+1, r19	; 0x01
    1d12:	20 83       	st	Z, r18
    1d14:	07 c0       	rjmp	.+14     	; 0x1d24 <prvInitialiseNewQueue+0x4a>
    1d16:	8e 81       	ldd	r24, Y+6	; 0x06
    1d18:	9f 81       	ldd	r25, Y+7	; 0x07
    1d1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d1e:	fc 01       	movw	r30, r24
    1d20:	31 83       	std	Z+1, r19	; 0x01
    1d22:	20 83       	st	Z, r18
    1d24:	8e 81       	ldd	r24, Y+6	; 0x06
    1d26:	9f 81       	ldd	r25, Y+7	; 0x07
    1d28:	29 81       	ldd	r18, Y+1	; 0x01
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	23 8f       	std	Z+27, r18	; 0x1b
    1d2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d30:	9f 81       	ldd	r25, Y+7	; 0x07
    1d32:	2a 81       	ldd	r18, Y+2	; 0x02
    1d34:	fc 01       	movw	r30, r24
    1d36:	24 8f       	std	Z+28, r18	; 0x1c
    1d38:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d3c:	61 e0       	ldi	r22, 0x01	; 1
    1d3e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <xQueueGenericReset>
    1d42:	8e 81       	ldd	r24, Y+6	; 0x06
    1d44:	9f 81       	ldd	r25, Y+7	; 0x07
    1d46:	2d 81       	ldd	r18, Y+5	; 0x05
    1d48:	fc 01       	movw	r30, r24
    1d4a:	20 a3       	std	Z+32, r18	; 0x20
    1d4c:	00 00       	nop
    1d4e:	27 96       	adiw	r28, 0x07	; 7
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	1f 91       	pop	r17
    1d60:	0f 91       	pop	r16
    1d62:	08 95       	ret

00001d64 <prvInitialiseMutex>:
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <prvInitialiseMutex+0x6>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	89 2b       	or	r24, r25
    1d78:	b9 f0       	breq	.+46     	; 0x1da8 <prvInitialiseMutex+0x44>
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7e:	fc 01       	movw	r30, r24
    1d80:	13 82       	std	Z+3, r1	; 0x03
    1d82:	12 82       	std	Z+2, r1	; 0x02
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	fc 01       	movw	r30, r24
    1d8a:	11 82       	std	Z+1, r1	; 0x01
    1d8c:	10 82       	st	Z, r1
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	9a 81       	ldd	r25, Y+2	; 0x02
    1d92:	fc 01       	movw	r30, r24
    1d94:	16 82       	std	Z+6, r1	; 0x06
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	40 e0       	ldi	r20, 0x00	; 0
    1d9e:	50 e0       	ldi	r21, 0x00	; 0
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <xQueueGenericSend>
    1da8:	00 00       	nop
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	08 95       	ret

00001db4 <xQueueCreateMutex>:
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <xQueueCreateMutex+0x6>
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <xQueueCreateMutex+0x8>
    1dbc:	1f 92       	push	r1
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	8d 83       	std	Y+5, r24	; 0x05
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	1a 82       	std	Y+2, r1	; 0x02
    1dca:	4d 81       	ldd	r20, Y+5	; 0x05
    1dcc:	6a 81       	ldd	r22, Y+2	; 0x02
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <xQueueGenericCreate>
    1dd4:	9c 83       	std	Y+4, r25	; 0x04
    1dd6:	8b 83       	std	Y+3, r24	; 0x03
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <prvInitialiseMutex>
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	9c 81       	ldd	r25, Y+4	; 0x04
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	08 95       	ret

00001df4 <xQueueGenericSend>:
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	2e 97       	sbiw	r28, 0x0e	; 14
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	99 87       	std	Y+9, r25	; 0x09
    1e0a:	88 87       	std	Y+8, r24	; 0x08
    1e0c:	7b 87       	std	Y+11, r23	; 0x0b
    1e0e:	6a 87       	std	Y+10, r22	; 0x0a
    1e10:	5d 87       	std	Y+13, r21	; 0x0d
    1e12:	4c 87       	std	Y+12, r20	; 0x0c
    1e14:	2e 87       	std	Y+14, r18	; 0x0e
    1e16:	19 82       	std	Y+1, r1	; 0x01
    1e18:	88 85       	ldd	r24, Y+8	; 0x08
    1e1a:	99 85       	ldd	r25, Y+9	; 0x09
    1e1c:	9b 83       	std	Y+3, r25	; 0x03
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	0f 92       	push	r0
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	9b 81       	ldd	r25, Y+3	; 0x03
    1e32:	fc 01       	movw	r30, r24
    1e34:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e36:	28 17       	cp	r18, r24
    1e38:	18 f0       	brcs	.+6      	; 0x1e40 <xQueueGenericSend+0x4c>
    1e3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e3c:	82 30       	cpi	r24, 0x02	; 2
    1e3e:	11 f5       	brne	.+68     	; 0x1e84 <xQueueGenericSend+0x90>
    1e40:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e42:	3b 85       	ldd	r19, Y+11	; 0x0b
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	9b 81       	ldd	r25, Y+3	; 0x03
    1e48:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e4a:	b9 01       	movw	r22, r18
    1e4c:	0e 94 0a 10 	call	0x2014	; 0x2014 <prvCopyDataToQueue>
    1e50:	8c 83       	std	Y+4, r24	; 0x04
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	9b 81       	ldd	r25, Y+3	; 0x03
    1e56:	fc 01       	movw	r30, r24
    1e58:	81 89       	ldd	r24, Z+17	; 0x11
    1e5a:	88 23       	and	r24, r24
    1e5c:	51 f0       	breq	.+20     	; 0x1e72 <xQueueGenericSend+0x7e>
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	9b 81       	ldd	r25, Y+3	; 0x03
    1e62:	41 96       	adiw	r24, 0x11	; 17
    1e64:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <xTaskRemoveFromEventList>
    1e68:	88 23       	and	r24, r24
    1e6a:	41 f0       	breq	.+16     	; 0x1e7c <xQueueGenericSend+0x88>
    1e6c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <vPortYield>
    1e70:	05 c0       	rjmp	.+10     	; 0x1e7c <xQueueGenericSend+0x88>
    1e72:	8c 81       	ldd	r24, Y+4	; 0x04
    1e74:	88 23       	and	r24, r24
    1e76:	11 f0       	breq	.+4      	; 0x1e7c <xQueueGenericSend+0x88>
    1e78:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <vPortYield>
    1e7c:	0f 90       	pop	r0
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	60 c0       	rjmp	.+192    	; 0x1f44 <xQueueGenericSend+0x150>
    1e84:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e86:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e88:	89 2b       	or	r24, r25
    1e8a:	21 f4       	brne	.+8      	; 0x1e94 <xQueueGenericSend+0xa0>
    1e8c:	0f 90       	pop	r0
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	58 c0       	rjmp	.+176    	; 0x1f44 <xQueueGenericSend+0x150>
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	88 23       	and	r24, r24
    1e98:	31 f4       	brne	.+12     	; 0x1ea6 <xQueueGenericSend+0xb2>
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	05 96       	adiw	r24, 0x05	; 5
    1e9e:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <vTaskSetTimeOutState>
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	0f 90       	pop	r0
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	0e 94 8f 13 	call	0x271e	; 0x271e <vTaskSuspendAll>
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	f8 94       	cli
    1eb2:	0f 92       	push	r0
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb8:	fc 01       	movw	r30, r24
    1eba:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ebc:	8f 3f       	cpi	r24, 0xFF	; 255
    1ebe:	21 f4       	brne	.+8      	; 0x1ec8 <xQueueGenericSend+0xd4>
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	15 8e       	std	Z+29, r1	; 0x1d
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ecc:	fc 01       	movw	r30, r24
    1ece:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ed0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ed2:	21 f4       	brne	.+8      	; 0x1edc <xQueueGenericSend+0xe8>
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	fc 01       	movw	r30, r24
    1eda:	16 8e       	std	Z+30, r1	; 0x1e
    1edc:	0f 90       	pop	r0
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	9e 01       	movw	r18, r28
    1ee2:	24 5f       	subi	r18, 0xF4	; 244
    1ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	05 96       	adiw	r24, 0x05	; 5
    1eea:	b9 01       	movw	r22, r18
    1eec:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <xTaskCheckForTimeOut>
    1ef0:	88 23       	and	r24, r24
    1ef2:	09 f5       	brne	.+66     	; 0x1f36 <xQueueGenericSend+0x142>
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef8:	0e 94 38 11 	call	0x2270	; 0x2270 <prvIsQueueFull>
    1efc:	88 23       	and	r24, r24
    1efe:	a1 f0       	breq	.+40     	; 0x1f28 <xQueueGenericSend+0x134>
    1f00:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f02:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	9b 81       	ldd	r25, Y+3	; 0x03
    1f08:	08 96       	adiw	r24, 0x08	; 8
    1f0a:	b9 01       	movw	r22, r18
    1f0c:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <vTaskPlaceOnEventList>
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	9b 81       	ldd	r25, Y+3	; 0x03
    1f14:	0e 94 da 10 	call	0x21b4	; 0x21b4 <prvUnlockQueue>
    1f18:	0e 94 9c 13 	call	0x2738	; 0x2738 <xTaskResumeAll>
    1f1c:	88 23       	and	r24, r24
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <xQueueGenericSend+0x12e>
    1f20:	7f cf       	rjmp	.-258    	; 0x1e20 <xQueueGenericSend+0x2c>
    1f22:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <vPortYield>
    1f26:	7c cf       	rjmp	.-264    	; 0x1e20 <xQueueGenericSend+0x2c>
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2c:	0e 94 da 10 	call	0x21b4	; 0x21b4 <prvUnlockQueue>
    1f30:	0e 94 9c 13 	call	0x2738	; 0x2738 <xTaskResumeAll>
    1f34:	75 cf       	rjmp	.-278    	; 0x1e20 <xQueueGenericSend+0x2c>
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3a:	0e 94 da 10 	call	0x21b4	; 0x21b4 <prvUnlockQueue>
    1f3e:	0e 94 9c 13 	call	0x2738	; 0x2738 <xTaskResumeAll>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	2e 96       	adiw	r28, 0x0e	; 14
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	08 95       	ret

00001f56 <xQueueGenericSendFromISR>:
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	2c 97       	sbiw	r28, 0x0c	; 12
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	9f 83       	std	Y+7, r25	; 0x07
    1f6c:	8e 83       	std	Y+6, r24	; 0x06
    1f6e:	79 87       	std	Y+9, r23	; 0x09
    1f70:	68 87       	std	Y+8, r22	; 0x08
    1f72:	5b 87       	std	Y+11, r21	; 0x0b
    1f74:	4a 87       	std	Y+10, r20	; 0x0a
    1f76:	2c 87       	std	Y+12, r18	; 0x0c
    1f78:	8e 81       	ldd	r24, Y+6	; 0x06
    1f7a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f7c:	9b 83       	std	Y+3, r25	; 0x03
    1f7e:	8a 83       	std	Y+2, r24	; 0x02
    1f80:	1c 82       	std	Y+4, r1	; 0x04
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	9b 81       	ldd	r25, Y+3	; 0x03
    1f86:	fc 01       	movw	r30, r24
    1f88:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8e:	fc 01       	movw	r30, r24
    1f90:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f92:	28 17       	cp	r18, r24
    1f94:	18 f0       	brcs	.+6      	; 0x1f9c <xQueueGenericSendFromISR+0x46>
    1f96:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	89 f5       	brne	.+98     	; 0x1ffe <xQueueGenericSendFromISR+0xa8>
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	86 8d       	ldd	r24, Z+30	; 0x1e
    1fa4:	8d 83       	std	Y+5, r24	; 0x05
    1fa6:	28 85       	ldd	r18, Y+8	; 0x08
    1fa8:	39 85       	ldd	r19, Y+9	; 0x09
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	9b 81       	ldd	r25, Y+3	; 0x03
    1fae:	4c 85       	ldd	r20, Y+12	; 0x0c
    1fb0:	b9 01       	movw	r22, r18
    1fb2:	0e 94 0a 10 	call	0x2014	; 0x2014 <prvCopyDataToQueue>
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1fba:	b9 f4       	brne	.+46     	; 0x1fea <xQueueGenericSendFromISR+0x94>
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	81 89       	ldd	r24, Z+17	; 0x11
    1fc4:	88 23       	and	r24, r24
    1fc6:	c1 f0       	breq	.+48     	; 0x1ff8 <xQueueGenericSendFromISR+0xa2>
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	9b 81       	ldd	r25, Y+3	; 0x03
    1fcc:	41 96       	adiw	r24, 0x11	; 17
    1fce:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <xTaskRemoveFromEventList>
    1fd2:	88 23       	and	r24, r24
    1fd4:	89 f0       	breq	.+34     	; 0x1ff8 <xQueueGenericSendFromISR+0xa2>
    1fd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fda:	89 2b       	or	r24, r25
    1fdc:	69 f0       	breq	.+26     	; 0x1ff8 <xQueueGenericSendFromISR+0xa2>
    1fde:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fe0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fe2:	21 e0       	ldi	r18, 0x01	; 1
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	20 83       	st	Z, r18
    1fe8:	07 c0       	rjmp	.+14     	; 0x1ff8 <xQueueGenericSendFromISR+0xa2>
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	8f 5f       	subi	r24, 0xFF	; 255
    1fee:	28 2f       	mov	r18, r24
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	26 8f       	std	Z+30, r18	; 0x1e
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	01 c0       	rjmp	.+2      	; 0x2000 <xQueueGenericSendFromISR+0xaa>
    1ffe:	19 82       	std	Y+1, r1	; 0x01
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	2c 96       	adiw	r28, 0x0c	; 12
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	08 95       	ret

00002014 <prvCopyDataToQueue>:
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	27 97       	sbiw	r28, 0x07	; 7
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	9c 83       	std	Y+4, r25	; 0x04
    202a:	8b 83       	std	Y+3, r24	; 0x03
    202c:	7e 83       	std	Y+6, r23	; 0x06
    202e:	6d 83       	std	Y+5, r22	; 0x05
    2030:	4f 83       	std	Y+7, r20	; 0x07
    2032:	19 82       	std	Y+1, r1	; 0x01
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	fc 01       	movw	r30, r24
    203a:	82 8d       	ldd	r24, Z+26	; 0x1a
    203c:	8a 83       	std	Y+2, r24	; 0x02
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	9c 81       	ldd	r25, Y+4	; 0x04
    2042:	fc 01       	movw	r30, r24
    2044:	84 8d       	ldd	r24, Z+28	; 0x1c
    2046:	88 23       	and	r24, r24
    2048:	b1 f4       	brne	.+44     	; 0x2076 <prvCopyDataToQueue+0x62>
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	fc 01       	movw	r30, r24
    2050:	80 81       	ld	r24, Z
    2052:	91 81       	ldd	r25, Z+1	; 0x01
    2054:	89 2b       	or	r24, r25
    2056:	09 f0       	breq	.+2      	; 0x205a <prvCopyDataToQueue+0x46>
    2058:	9c c0       	rjmp	.+312    	; 0x2192 <prvCopyDataToQueue+0x17e>
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	fc 01       	movw	r30, r24
    2060:	82 81       	ldd	r24, Z+2	; 0x02
    2062:	93 81       	ldd	r25, Z+3	; 0x03
    2064:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <xTaskPriorityDisinherit>
    2068:	89 83       	std	Y+1, r24	; 0x01
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	fc 01       	movw	r30, r24
    2070:	13 82       	std	Z+3, r1	; 0x03
    2072:	12 82       	std	Z+2, r1	; 0x02
    2074:	8e c0       	rjmp	.+284    	; 0x2192 <prvCopyDataToQueue+0x17e>
    2076:	8f 81       	ldd	r24, Y+7	; 0x07
    2078:	88 23       	and	r24, r24
    207a:	d9 f5       	brne	.+118    	; 0x20f2 <prvCopyDataToQueue+0xde>
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	fc 01       	movw	r30, r24
    2082:	84 8d       	ldd	r24, Z+28	; 0x1c
    2084:	48 2f       	mov	r20, r24
    2086:	50 e0       	ldi	r21, 0x00	; 0
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	9c 81       	ldd	r25, Y+4	; 0x04
    208c:	fc 01       	movw	r30, r24
    208e:	84 81       	ldd	r24, Z+4	; 0x04
    2090:	95 81       	ldd	r25, Z+5	; 0x05
    2092:	2d 81       	ldd	r18, Y+5	; 0x05
    2094:	3e 81       	ldd	r19, Y+6	; 0x06
    2096:	b9 01       	movw	r22, r18
    2098:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <memcpy>
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	fc 01       	movw	r30, r24
    20a2:	24 81       	ldd	r18, Z+4	; 0x04
    20a4:	35 81       	ldd	r19, Z+5	; 0x05
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	9c 81       	ldd	r25, Y+4	; 0x04
    20aa:	fc 01       	movw	r30, r24
    20ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    20ae:	88 2f       	mov	r24, r24
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	28 0f       	add	r18, r24
    20b4:	39 1f       	adc	r19, r25
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	fc 01       	movw	r30, r24
    20bc:	35 83       	std	Z+5, r19	; 0x05
    20be:	24 83       	std	Z+4, r18	; 0x04
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	fc 01       	movw	r30, r24
    20c6:	24 81       	ldd	r18, Z+4	; 0x04
    20c8:	35 81       	ldd	r19, Z+5	; 0x05
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	fc 01       	movw	r30, r24
    20d0:	82 81       	ldd	r24, Z+2	; 0x02
    20d2:	93 81       	ldd	r25, Z+3	; 0x03
    20d4:	28 17       	cp	r18, r24
    20d6:	39 07       	cpc	r19, r25
    20d8:	08 f4       	brcc	.+2      	; 0x20dc <prvCopyDataToQueue+0xc8>
    20da:	5b c0       	rjmp	.+182    	; 0x2192 <prvCopyDataToQueue+0x17e>
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	fc 01       	movw	r30, r24
    20e2:	20 81       	ld	r18, Z
    20e4:	31 81       	ldd	r19, Z+1	; 0x01
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	fc 01       	movw	r30, r24
    20ec:	35 83       	std	Z+5, r19	; 0x05
    20ee:	24 83       	std	Z+4, r18	; 0x04
    20f0:	50 c0       	rjmp	.+160    	; 0x2192 <prvCopyDataToQueue+0x17e>
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	fc 01       	movw	r30, r24
    20f8:	84 8d       	ldd	r24, Z+28	; 0x1c
    20fa:	48 2f       	mov	r20, r24
    20fc:	50 e0       	ldi	r21, 0x00	; 0
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	9c 81       	ldd	r25, Y+4	; 0x04
    2102:	fc 01       	movw	r30, r24
    2104:	86 81       	ldd	r24, Z+6	; 0x06
    2106:	97 81       	ldd	r25, Z+7	; 0x07
    2108:	2d 81       	ldd	r18, Y+5	; 0x05
    210a:	3e 81       	ldd	r19, Y+6	; 0x06
    210c:	b9 01       	movw	r22, r18
    210e:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <memcpy>
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	fc 01       	movw	r30, r24
    2118:	26 81       	ldd	r18, Z+6	; 0x06
    211a:	37 81       	ldd	r19, Z+7	; 0x07
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	fc 01       	movw	r30, r24
    2122:	84 8d       	ldd	r24, Z+28	; 0x1c
    2124:	88 2f       	mov	r24, r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	91 95       	neg	r25
    212a:	81 95       	neg	r24
    212c:	91 09       	sbc	r25, r1
    212e:	28 0f       	add	r18, r24
    2130:	39 1f       	adc	r19, r25
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	9c 81       	ldd	r25, Y+4	; 0x04
    2136:	fc 01       	movw	r30, r24
    2138:	37 83       	std	Z+7, r19	; 0x07
    213a:	26 83       	std	Z+6, r18	; 0x06
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	9c 81       	ldd	r25, Y+4	; 0x04
    2140:	fc 01       	movw	r30, r24
    2142:	26 81       	ldd	r18, Z+6	; 0x06
    2144:	37 81       	ldd	r19, Z+7	; 0x07
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	fc 01       	movw	r30, r24
    214c:	80 81       	ld	r24, Z
    214e:	91 81       	ldd	r25, Z+1	; 0x01
    2150:	28 17       	cp	r18, r24
    2152:	39 07       	cpc	r19, r25
    2154:	a8 f4       	brcc	.+42     	; 0x2180 <prvCopyDataToQueue+0x16c>
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	fc 01       	movw	r30, r24
    215c:	22 81       	ldd	r18, Z+2	; 0x02
    215e:	33 81       	ldd	r19, Z+3	; 0x03
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	9c 81       	ldd	r25, Y+4	; 0x04
    2164:	fc 01       	movw	r30, r24
    2166:	84 8d       	ldd	r24, Z+28	; 0x1c
    2168:	88 2f       	mov	r24, r24
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	91 95       	neg	r25
    216e:	81 95       	neg	r24
    2170:	91 09       	sbc	r25, r1
    2172:	28 0f       	add	r18, r24
    2174:	39 1f       	adc	r19, r25
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	9c 81       	ldd	r25, Y+4	; 0x04
    217a:	fc 01       	movw	r30, r24
    217c:	37 83       	std	Z+7, r19	; 0x07
    217e:	26 83       	std	Z+6, r18	; 0x06
    2180:	8f 81       	ldd	r24, Y+7	; 0x07
    2182:	82 30       	cpi	r24, 0x02	; 2
    2184:	31 f4       	brne	.+12     	; 0x2192 <prvCopyDataToQueue+0x17e>
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	88 23       	and	r24, r24
    218a:	19 f0       	breq	.+6      	; 0x2192 <prvCopyDataToQueue+0x17e>
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	81 50       	subi	r24, 0x01	; 1
    2190:	8a 83       	std	Y+2, r24	; 0x02
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	21 e0       	ldi	r18, 0x01	; 1
    2196:	28 0f       	add	r18, r24
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	9c 81       	ldd	r25, Y+4	; 0x04
    219c:	fc 01       	movw	r30, r24
    219e:	22 8f       	std	Z+26, r18	; 0x1a
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	27 96       	adiw	r28, 0x07	; 7
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	08 95       	ret

000021b4 <prvUnlockQueue>:
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <prvUnlockQueue+0x6>
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <prvUnlockQueue+0x8>
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	9c 83       	std	Y+4, r25	; 0x04
    21c2:	8b 83       	std	Y+3, r24	; 0x03
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	0f 92       	push	r0
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	9c 81       	ldd	r25, Y+4	; 0x04
    21ce:	fc 01       	movw	r30, r24
    21d0:	86 8d       	ldd	r24, Z+30	; 0x1e
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	12 c0       	rjmp	.+36     	; 0x21fa <prvUnlockQueue+0x46>
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	fc 01       	movw	r30, r24
    21dc:	81 89       	ldd	r24, Z+17	; 0x11
    21de:	88 23       	and	r24, r24
    21e0:	81 f0       	breq	.+32     	; 0x2202 <prvUnlockQueue+0x4e>
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	41 96       	adiw	r24, 0x11	; 17
    21e8:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <xTaskRemoveFromEventList>
    21ec:	88 23       	and	r24, r24
    21ee:	11 f0       	breq	.+4      	; 0x21f4 <prvUnlockQueue+0x40>
    21f0:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <vTaskMissedYield>
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	81 50       	subi	r24, 0x01	; 1
    21f8:	89 83       	std	Y+1, r24	; 0x01
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	18 16       	cp	r1, r24
    21fe:	5c f3       	brlt	.-42     	; 0x21d6 <prvUnlockQueue+0x22>
    2200:	01 c0       	rjmp	.+2      	; 0x2204 <prvUnlockQueue+0x50>
    2202:	00 00       	nop
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	2f ef       	ldi	r18, 0xFF	; 255
    220a:	fc 01       	movw	r30, r24
    220c:	26 8f       	std	Z+30, r18	; 0x1e
    220e:	0f 90       	pop	r0
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	0f 92       	push	r0
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	9c 81       	ldd	r25, Y+4	; 0x04
    221c:	fc 01       	movw	r30, r24
    221e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2220:	8a 83       	std	Y+2, r24	; 0x02
    2222:	12 c0       	rjmp	.+36     	; 0x2248 <prvUnlockQueue+0x94>
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	9c 81       	ldd	r25, Y+4	; 0x04
    2228:	fc 01       	movw	r30, r24
    222a:	80 85       	ldd	r24, Z+8	; 0x08
    222c:	88 23       	and	r24, r24
    222e:	81 f0       	breq	.+32     	; 0x2250 <prvUnlockQueue+0x9c>
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	9c 81       	ldd	r25, Y+4	; 0x04
    2234:	08 96       	adiw	r24, 0x08	; 8
    2236:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <xTaskRemoveFromEventList>
    223a:	88 23       	and	r24, r24
    223c:	11 f0       	breq	.+4      	; 0x2242 <prvUnlockQueue+0x8e>
    223e:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <vTaskMissedYield>
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	81 50       	subi	r24, 0x01	; 1
    2246:	8a 83       	std	Y+2, r24	; 0x02
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	18 16       	cp	r1, r24
    224c:	5c f3       	brlt	.-42     	; 0x2224 <prvUnlockQueue+0x70>
    224e:	01 c0       	rjmp	.+2      	; 0x2252 <prvUnlockQueue+0x9e>
    2250:	00 00       	nop
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	2f ef       	ldi	r18, 0xFF	; 255
    2258:	fc 01       	movw	r30, r24
    225a:	25 8f       	std	Z+29, r18	; 0x1d
    225c:	0f 90       	pop	r0
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	00 00       	nop
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	08 95       	ret

00002270 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	00 d0       	rcall	.+0      	; 0x2276 <prvIsQueueFull+0x6>
    2276:	1f 92       	push	r1
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	9b 83       	std	Y+3, r25	; 0x03
    227e:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	9b 81       	ldd	r25, Y+3	; 0x03
    228a:	fc 01       	movw	r30, r24
    228c:	22 8d       	ldd	r18, Z+26	; 0x1a
    228e:	8a 81       	ldd	r24, Y+2	; 0x02
    2290:	9b 81       	ldd	r25, Y+3	; 0x03
    2292:	fc 01       	movw	r30, r24
    2294:	83 8d       	ldd	r24, Z+27	; 0x1b
    2296:	28 17       	cp	r18, r24
    2298:	19 f4       	brne	.+6      	; 0x22a0 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	01 c0       	rjmp	.+2      	; 0x22a2 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    22a0:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    22a2:	0f 90       	pop	r0
    22a4:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	08 95       	ret

000022b4 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    22b4:	8f 92       	push	r8
    22b6:	9f 92       	push	r9
    22b8:	af 92       	push	r10
    22ba:	bf 92       	push	r11
    22bc:	cf 92       	push	r12
    22be:	df 92       	push	r13
    22c0:	ef 92       	push	r14
    22c2:	ff 92       	push	r15
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
    22c8:	cf 93       	push	r28
    22ca:	df 93       	push	r29
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	60 97       	sbiw	r28, 0x10	; 16
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	9f 83       	std	Y+7, r25	; 0x07
    22de:	8e 83       	std	Y+6, r24	; 0x06
    22e0:	79 87       	std	Y+9, r23	; 0x09
    22e2:	68 87       	std	Y+8, r22	; 0x08
    22e4:	5b 87       	std	Y+11, r21	; 0x0b
    22e6:	4a 87       	std	Y+10, r20	; 0x0a
    22e8:	3d 87       	std	Y+13, r19	; 0x0d
    22ea:	2c 87       	std	Y+12, r18	; 0x0c
    22ec:	0e 87       	std	Y+14, r16	; 0x0e
    22ee:	f8 8a       	std	Y+16, r15	; 0x10
    22f0:	ef 86       	std	Y+15, r14	; 0x0f
    22f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    22f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    22f6:	0e 94 8a 0a 	call	0x1514	; 0x1514 <pvPortMalloc>
    22fa:	9d 83       	std	Y+5, r25	; 0x05
    22fc:	8c 83       	std	Y+4, r24	; 0x04
    22fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2300:	9d 81       	ldd	r25, Y+5	; 0x05
    2302:	89 2b       	or	r24, r25
    2304:	b9 f0       	breq	.+46     	; 0x2334 <xTaskCreate+0x80>
    2306:	8c e2       	ldi	r24, 0x2C	; 44
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <pvPortMalloc>
    230e:	9a 83       	std	Y+2, r25	; 0x02
    2310:	89 83       	std	Y+1, r24	; 0x01
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	89 2b       	or	r24, r25
    2318:	41 f0       	breq	.+16     	; 0x232a <xTaskCreate+0x76>
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	9a 81       	ldd	r25, Y+2	; 0x02
    231e:	2c 81       	ldd	r18, Y+4	; 0x04
    2320:	3d 81       	ldd	r19, Y+5	; 0x05
    2322:	fc 01       	movw	r30, r24
    2324:	30 8f       	std	Z+24, r19	; 0x18
    2326:	27 8b       	std	Z+23, r18	; 0x17
    2328:	07 c0       	rjmp	.+14     	; 0x2338 <xTaskCreate+0x84>
    232a:	8c 81       	ldd	r24, Y+4	; 0x04
    232c:	9d 81       	ldd	r25, Y+5	; 0x05
    232e:	0e 94 df 0a 	call	0x15be	; 0x15be <vPortFree>
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <xTaskCreate+0x84>
    2334:	1a 82       	std	Y+2, r1	; 0x02
    2336:	19 82       	std	Y+1, r1	; 0x01
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	9a 81       	ldd	r25, Y+2	; 0x02
    233c:	89 2b       	or	r24, r25
    233e:	09 f1       	breq	.+66     	; 0x2382 <xTaskCreate+0xce>
    2340:	8a 85       	ldd	r24, Y+10	; 0x0a
    2342:	9b 85       	ldd	r25, Y+11	; 0x0b
    2344:	cc 01       	movw	r24, r24
    2346:	a0 e0       	ldi	r26, 0x00	; 0
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	09 81       	ldd	r16, Y+1	; 0x01
    234c:	1a 81       	ldd	r17, Y+2	; 0x02
    234e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2350:	58 89       	ldd	r21, Y+16	; 0x10
    2352:	2c 85       	ldd	r18, Y+12	; 0x0c
    2354:	3d 85       	ldd	r19, Y+13	; 0x0d
    2356:	68 85       	ldd	r22, Y+8	; 0x08
    2358:	79 85       	ldd	r23, Y+9	; 0x09
    235a:	ee 81       	ldd	r30, Y+6	; 0x06
    235c:	ff 81       	ldd	r31, Y+7	; 0x07
    235e:	81 2c       	mov	r8, r1
    2360:	91 2c       	mov	r9, r1
    2362:	58 01       	movw	r10, r16
    2364:	6a 01       	movw	r12, r20
    2366:	ee 84       	ldd	r14, Y+14	; 0x0e
    2368:	89 01       	movw	r16, r18
    236a:	9c 01       	movw	r18, r24
    236c:	ad 01       	movw	r20, r26
    236e:	cf 01       	movw	r24, r30
    2370:	0e 94 d7 11 	call	0x23ae	; 0x23ae <prvInitialiseNewTask>
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	9a 81       	ldd	r25, Y+2	; 0x02
    2378:	0e 94 b3 12 	call	0x2566	; 0x2566 <prvAddNewTaskToReadyList>
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	8b 83       	std	Y+3, r24	; 0x03
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <xTaskCreate+0xd2>
    2382:	8f ef       	ldi	r24, 0xFF	; 255
    2384:	8b 83       	std	Y+3, r24	; 0x03
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	60 96       	adiw	r28, 0x10	; 16
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	ff 90       	pop	r15
    239e:	ef 90       	pop	r14
    23a0:	df 90       	pop	r13
    23a2:	cf 90       	pop	r12
    23a4:	bf 90       	pop	r11
    23a6:	af 90       	pop	r10
    23a8:	9f 90       	pop	r9
    23aa:	8f 90       	pop	r8
    23ac:	08 95       	ret

000023ae <prvInitialiseNewTask>:
    23ae:	8f 92       	push	r8
    23b0:	9f 92       	push	r9
    23b2:	af 92       	push	r10
    23b4:	bf 92       	push	r11
    23b6:	cf 92       	push	r12
    23b8:	df 92       	push	r13
    23ba:	ef 92       	push	r14
    23bc:	0f 93       	push	r16
    23be:	1f 93       	push	r17
    23c0:	cf 93       	push	r28
    23c2:	df 93       	push	r29
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	64 97       	sbiw	r28, 0x14	; 20
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	9d 83       	std	Y+5, r25	; 0x05
    23d6:	8c 83       	std	Y+4, r24	; 0x04
    23d8:	7f 83       	std	Y+7, r23	; 0x07
    23da:	6e 83       	std	Y+6, r22	; 0x06
    23dc:	28 87       	std	Y+8, r18	; 0x08
    23de:	39 87       	std	Y+9, r19	; 0x09
    23e0:	4a 87       	std	Y+10, r20	; 0x0a
    23e2:	5b 87       	std	Y+11, r21	; 0x0b
    23e4:	1d 87       	std	Y+13, r17	; 0x0d
    23e6:	0c 87       	std	Y+12, r16	; 0x0c
    23e8:	ee 86       	std	Y+14, r14	; 0x0e
    23ea:	d8 8a       	std	Y+16, r13	; 0x10
    23ec:	cf 86       	std	Y+15, r12	; 0x0f
    23ee:	ba 8a       	std	Y+18, r11	; 0x12
    23f0:	a9 8a       	std	Y+17, r10	; 0x11
    23f2:	9c 8a       	std	Y+20, r9	; 0x14
    23f4:	8b 8a       	std	Y+19, r8	; 0x13
    23f6:	28 85       	ldd	r18, Y+8	; 0x08
    23f8:	39 85       	ldd	r19, Y+9	; 0x09
    23fa:	89 89       	ldd	r24, Y+17	; 0x11
    23fc:	9a 89       	ldd	r25, Y+18	; 0x12
    23fe:	fc 01       	movw	r30, r24
    2400:	87 89       	ldd	r24, Z+23	; 0x17
    2402:	90 8d       	ldd	r25, Z+24	; 0x18
    2404:	a9 01       	movw	r20, r18
    2406:	65 ea       	ldi	r22, 0xA5	; 165
    2408:	70 e0       	ldi	r23, 0x00	; 0
    240a:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <memset>
    240e:	89 89       	ldd	r24, Y+17	; 0x11
    2410:	9a 89       	ldd	r25, Y+18	; 0x12
    2412:	fc 01       	movw	r30, r24
    2414:	27 89       	ldd	r18, Z+23	; 0x17
    2416:	30 8d       	ldd	r19, Z+24	; 0x18
    2418:	88 85       	ldd	r24, Y+8	; 0x08
    241a:	99 85       	ldd	r25, Y+9	; 0x09
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	82 0f       	add	r24, r18
    2420:	93 1f       	adc	r25, r19
    2422:	9b 83       	std	Y+3, r25	; 0x03
    2424:	8a 83       	std	Y+2, r24	; 0x02
    2426:	19 82       	std	Y+1, r1	; 0x01
    2428:	21 c0       	rjmp	.+66     	; 0x246c <prvInitialiseNewTask+0xbe>
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	88 2f       	mov	r24, r24
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	29 81       	ldd	r18, Y+1	; 0x01
    2432:	22 2f       	mov	r18, r18
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	4e 81       	ldd	r20, Y+6	; 0x06
    2438:	5f 81       	ldd	r21, Y+7	; 0x07
    243a:	24 0f       	add	r18, r20
    243c:	35 1f       	adc	r19, r21
    243e:	f9 01       	movw	r30, r18
    2440:	40 81       	ld	r20, Z
    2442:	29 89       	ldd	r18, Y+17	; 0x11
    2444:	3a 89       	ldd	r19, Y+18	; 0x12
    2446:	82 0f       	add	r24, r18
    2448:	93 1f       	adc	r25, r19
    244a:	49 96       	adiw	r24, 0x19	; 25
    244c:	fc 01       	movw	r30, r24
    244e:	40 83       	st	Z, r20
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	88 2f       	mov	r24, r24
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	2e 81       	ldd	r18, Y+6	; 0x06
    2458:	3f 81       	ldd	r19, Y+7	; 0x07
    245a:	82 0f       	add	r24, r18
    245c:	93 1f       	adc	r25, r19
    245e:	fc 01       	movw	r30, r24
    2460:	80 81       	ld	r24, Z
    2462:	88 23       	and	r24, r24
    2464:	39 f0       	breq	.+14     	; 0x2474 <prvInitialiseNewTask+0xc6>
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	8f 5f       	subi	r24, 0xFF	; 255
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	88 30       	cpi	r24, 0x08	; 8
    2470:	e0 f2       	brcs	.-72     	; 0x242a <prvInitialiseNewTask+0x7c>
    2472:	01 c0       	rjmp	.+2      	; 0x2476 <prvInitialiseNewTask+0xc8>
    2474:	00 00       	nop
    2476:	89 89       	ldd	r24, Y+17	; 0x11
    2478:	9a 89       	ldd	r25, Y+18	; 0x12
    247a:	fc 01       	movw	r30, r24
    247c:	10 a2       	std	Z+32, r1	; 0x20
    247e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2480:	84 30       	cpi	r24, 0x04	; 4
    2482:	10 f0       	brcs	.+4      	; 0x2488 <prvInitialiseNewTask+0xda>
    2484:	83 e0       	ldi	r24, 0x03	; 3
    2486:	8e 87       	std	Y+14, r24	; 0x0e
    2488:	89 89       	ldd	r24, Y+17	; 0x11
    248a:	9a 89       	ldd	r25, Y+18	; 0x12
    248c:	2e 85       	ldd	r18, Y+14	; 0x0e
    248e:	fc 01       	movw	r30, r24
    2490:	26 8b       	std	Z+22, r18	; 0x16
    2492:	89 89       	ldd	r24, Y+17	; 0x11
    2494:	9a 89       	ldd	r25, Y+18	; 0x12
    2496:	2e 85       	ldd	r18, Y+14	; 0x0e
    2498:	fc 01       	movw	r30, r24
    249a:	23 a3       	std	Z+35, r18	; 0x23
    249c:	89 89       	ldd	r24, Y+17	; 0x11
    249e:	9a 89       	ldd	r25, Y+18	; 0x12
    24a0:	fc 01       	movw	r30, r24
    24a2:	14 a2       	std	Z+36, r1	; 0x24
    24a4:	89 89       	ldd	r24, Y+17	; 0x11
    24a6:	9a 89       	ldd	r25, Y+18	; 0x12
    24a8:	02 96       	adiw	r24, 0x02	; 2
    24aa:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInitialiseItem>
    24ae:	89 89       	ldd	r24, Y+17	; 0x11
    24b0:	9a 89       	ldd	r25, Y+18	; 0x12
    24b2:	0c 96       	adiw	r24, 0x0c	; 12
    24b4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInitialiseItem>
    24b8:	89 89       	ldd	r24, Y+17	; 0x11
    24ba:	9a 89       	ldd	r25, Y+18	; 0x12
    24bc:	29 89       	ldd	r18, Y+17	; 0x11
    24be:	3a 89       	ldd	r19, Y+18	; 0x12
    24c0:	fc 01       	movw	r30, r24
    24c2:	31 87       	std	Z+9, r19	; 0x09
    24c4:	20 87       	std	Z+8, r18	; 0x08
    24c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    24c8:	88 2f       	mov	r24, r24
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	24 e0       	ldi	r18, 0x04	; 4
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	28 1b       	sub	r18, r24
    24d2:	39 0b       	sbc	r19, r25
    24d4:	89 89       	ldd	r24, Y+17	; 0x11
    24d6:	9a 89       	ldd	r25, Y+18	; 0x12
    24d8:	fc 01       	movw	r30, r24
    24da:	35 87       	std	Z+13, r19	; 0x0d
    24dc:	24 87       	std	Z+12, r18	; 0x0c
    24de:	89 89       	ldd	r24, Y+17	; 0x11
    24e0:	9a 89       	ldd	r25, Y+18	; 0x12
    24e2:	29 89       	ldd	r18, Y+17	; 0x11
    24e4:	3a 89       	ldd	r19, Y+18	; 0x12
    24e6:	fc 01       	movw	r30, r24
    24e8:	33 8b       	std	Z+19, r19	; 0x13
    24ea:	22 8b       	std	Z+18, r18	; 0x12
    24ec:	89 89       	ldd	r24, Y+17	; 0x11
    24ee:	9a 89       	ldd	r25, Y+18	; 0x12
    24f0:	fc 01       	movw	r30, r24
    24f2:	16 a2       	std	Z+38, r1	; 0x26
    24f4:	15 a2       	std	Z+37, r1	; 0x25
    24f6:	89 89       	ldd	r24, Y+17	; 0x11
    24f8:	9a 89       	ldd	r25, Y+18	; 0x12
    24fa:	fc 01       	movw	r30, r24
    24fc:	17 a2       	std	Z+39, r1	; 0x27
    24fe:	10 a6       	std	Z+40, r1	; 0x28
    2500:	11 a6       	std	Z+41, r1	; 0x29
    2502:	12 a6       	std	Z+42, r1	; 0x2a
    2504:	89 89       	ldd	r24, Y+17	; 0x11
    2506:	9a 89       	ldd	r25, Y+18	; 0x12
    2508:	fc 01       	movw	r30, r24
    250a:	13 a6       	std	Z+43, r1	; 0x2b
    250c:	4c 85       	ldd	r20, Y+12	; 0x0c
    250e:	5d 85       	ldd	r21, Y+13	; 0x0d
    2510:	2c 81       	ldd	r18, Y+4	; 0x04
    2512:	3d 81       	ldd	r19, Y+5	; 0x05
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	9b 81       	ldd	r25, Y+3	; 0x03
    2518:	b9 01       	movw	r22, r18
    251a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <pxPortInitialiseStack>
    251e:	9c 01       	movw	r18, r24
    2520:	89 89       	ldd	r24, Y+17	; 0x11
    2522:	9a 89       	ldd	r25, Y+18	; 0x12
    2524:	fc 01       	movw	r30, r24
    2526:	31 83       	std	Z+1, r19	; 0x01
    2528:	20 83       	st	Z, r18
    252a:	8f 85       	ldd	r24, Y+15	; 0x0f
    252c:	98 89       	ldd	r25, Y+16	; 0x10
    252e:	89 2b       	or	r24, r25
    2530:	39 f0       	breq	.+14     	; 0x2540 <prvInitialiseNewTask+0x192>
    2532:	8f 85       	ldd	r24, Y+15	; 0x0f
    2534:	98 89       	ldd	r25, Y+16	; 0x10
    2536:	29 89       	ldd	r18, Y+17	; 0x11
    2538:	3a 89       	ldd	r19, Y+18	; 0x12
    253a:	fc 01       	movw	r30, r24
    253c:	31 83       	std	Z+1, r19	; 0x01
    253e:	20 83       	st	Z, r18
    2540:	00 00       	nop
    2542:	64 96       	adiw	r28, 0x14	; 20
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	1f 91       	pop	r17
    2554:	0f 91       	pop	r16
    2556:	ef 90       	pop	r14
    2558:	df 90       	pop	r13
    255a:	cf 90       	pop	r12
    255c:	bf 90       	pop	r11
    255e:	af 90       	pop	r10
    2560:	9f 90       	pop	r9
    2562:	8f 90       	pop	r8
    2564:	08 95       	ret

00002566 <prvAddNewTaskToReadyList>:
    2566:	cf 93       	push	r28
    2568:	df 93       	push	r29
    256a:	00 d0       	rcall	.+0      	; 0x256c <prvAddNewTaskToReadyList+0x6>
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	0f 92       	push	r0
    257a:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <uxCurrentNumberOfTasks>
    257e:	8f 5f       	subi	r24, 0xFF	; 255
    2580:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <uxCurrentNumberOfTasks>
    2584:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxCurrentTCB>
    2588:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    258c:	89 2b       	or	r24, r25
    258e:	69 f4       	brne	.+26     	; 0x25aa <prvAddNewTaskToReadyList+0x44>
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	9a 81       	ldd	r25, Y+2	; 0x02
    2594:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <pxCurrentTCB+0x1>
    2598:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <pxCurrentTCB>
    259c:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <uxCurrentNumberOfTasks>
    25a0:	81 30       	cpi	r24, 0x01	; 1
    25a2:	c9 f4       	brne	.+50     	; 0x25d6 <prvAddNewTaskToReadyList+0x70>
    25a4:	0e 94 d7 16 	call	0x2dae	; 0x2dae <prvInitialiseTaskLists>
    25a8:	16 c0       	rjmp	.+44     	; 0x25d6 <prvAddNewTaskToReadyList+0x70>
    25aa:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <xSchedulerRunning>
    25ae:	88 23       	and	r24, r24
    25b0:	91 f4       	brne	.+36     	; 0x25d6 <prvAddNewTaskToReadyList+0x70>
    25b2:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxCurrentTCB>
    25b6:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    25ba:	fc 01       	movw	r30, r24
    25bc:	26 89       	ldd	r18, Z+22	; 0x16
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	9a 81       	ldd	r25, Y+2	; 0x02
    25c2:	fc 01       	movw	r30, r24
    25c4:	86 89       	ldd	r24, Z+22	; 0x16
    25c6:	82 17       	cp	r24, r18
    25c8:	30 f0       	brcs	.+12     	; 0x25d6 <prvAddNewTaskToReadyList+0x70>
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	9a 81       	ldd	r25, Y+2	; 0x02
    25ce:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <pxCurrentTCB+0x1>
    25d2:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <pxCurrentTCB>
    25d6:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <uxTaskNumber>
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <uxTaskNumber>
    25e0:	20 91 24 07 	lds	r18, 0x0724	; 0x800724 <uxTaskNumber>
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	fc 01       	movw	r30, r24
    25ea:	21 a3       	std	Z+33, r18	; 0x21
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	9a 81       	ldd	r25, Y+2	; 0x02
    25f0:	fc 01       	movw	r30, r24
    25f2:	96 89       	ldd	r25, Z+22	; 0x16
    25f4:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxTopReadyPriority>
    25f8:	89 17       	cp	r24, r25
    25fa:	30 f4       	brcc	.+12     	; 0x2608 <prvAddNewTaskToReadyList+0xa2>
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	fc 01       	movw	r30, r24
    2602:	86 89       	ldd	r24, Z+22	; 0x16
    2604:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <uxTopReadyPriority>
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	ac 01       	movw	r20, r24
    260e:	4e 5f       	subi	r20, 0xFE	; 254
    2610:	5f 4f       	sbci	r21, 0xFF	; 255
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	9a 81       	ldd	r25, Y+2	; 0x02
    2616:	fc 01       	movw	r30, r24
    2618:	86 89       	ldd	r24, Z+22	; 0x16
    261a:	28 2f       	mov	r18, r24
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	c9 01       	movw	r24, r18
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	82 0f       	add	r24, r18
    262e:	93 1f       	adc	r25, r19
    2630:	81 53       	subi	r24, 0x31	; 49
    2632:	99 4f       	sbci	r25, 0xF9	; 249
    2634:	ba 01       	movw	r22, r20
    2636:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInsertEnd>
    263a:	0f 90       	pop	r0
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <xSchedulerRunning>
    2642:	88 23       	and	r24, r24
    2644:	71 f0       	breq	.+28     	; 0x2662 <prvAddNewTaskToReadyList+0xfc>
    2646:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxCurrentTCB>
    264a:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    264e:	fc 01       	movw	r30, r24
    2650:	26 89       	ldd	r18, Z+22	; 0x16
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	9a 81       	ldd	r25, Y+2	; 0x02
    2656:	fc 01       	movw	r30, r24
    2658:	86 89       	ldd	r24, Z+22	; 0x16
    265a:	28 17       	cp	r18, r24
    265c:	10 f4       	brcc	.+4      	; 0x2662 <prvAddNewTaskToReadyList+0xfc>
    265e:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <vPortYield>
    2662:	00 00       	nop
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	08 95       	ret

0000266e <vTaskDelay>:
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	00 d0       	rcall	.+0      	; 0x2674 <vTaskDelay+0x6>
    2674:	1f 92       	push	r1
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	9b 83       	std	Y+3, r25	; 0x03
    267c:	8a 83       	std	Y+2, r24	; 0x02
    267e:	19 82       	std	Y+1, r1	; 0x01
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	9b 81       	ldd	r25, Y+3	; 0x03
    2684:	89 2b       	or	r24, r25
    2686:	51 f0       	breq	.+20     	; 0x269c <vTaskDelay+0x2e>
    2688:	0e 94 8f 13 	call	0x271e	; 0x271e <vTaskSuspendAll>
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	9b 81       	ldd	r25, Y+3	; 0x03
    2690:	60 e0       	ldi	r22, 0x00	; 0
    2692:	0e 94 1a 18 	call	0x3034	; 0x3034 <prvAddCurrentTaskToDelayedList>
    2696:	0e 94 9c 13 	call	0x2738	; 0x2738 <xTaskResumeAll>
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	88 23       	and	r24, r24
    26a0:	11 f4       	brne	.+4      	; 0x26a6 <vTaskDelay+0x38>
    26a2:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <vPortYield>
    26a6:	00 00       	nop
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	08 95       	ret

000026b4 <vTaskStartScheduler>:
    26b4:	ef 92       	push	r14
    26b6:	ff 92       	push	r15
    26b8:	0f 93       	push	r16
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
    26be:	1f 92       	push	r1
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	0f 2e       	mov	r0, r31
    26c6:	f7 e2       	ldi	r31, 0x27	; 39
    26c8:	ef 2e       	mov	r14, r31
    26ca:	f7 e0       	ldi	r31, 0x07	; 7
    26cc:	ff 2e       	mov	r15, r31
    26ce:	f0 2d       	mov	r31, r0
    26d0:	00 e0       	ldi	r16, 0x00	; 0
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	45 e5       	ldi	r20, 0x55	; 85
    26d8:	50 e0       	ldi	r21, 0x00	; 0
    26da:	6c e3       	ldi	r22, 0x3C	; 60
    26dc:	71 e0       	ldi	r23, 0x01	; 1
    26de:	85 ec       	ldi	r24, 0xC5	; 197
    26e0:	96 e1       	ldi	r25, 0x16	; 22
    26e2:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <xTaskCreate>
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	81 30       	cpi	r24, 0x01	; 1
    26ec:	81 f4       	brne	.+32     	; 0x270e <vTaskStartScheduler+0x5a>
    26ee:	f8 94       	cli
    26f0:	8f ef       	ldi	r24, 0xFF	; 255
    26f2:	9f ef       	ldi	r25, 0xFF	; 255
    26f4:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <xNextTaskUnblockTime+0x1>
    26f8:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <xNextTaskUnblockTime>
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <xSchedulerRunning>
    2702:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <xTickCount+0x1>
    2706:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <xTickCount>
    270a:	0e 94 37 09 	call	0x126e	; 0x126e <xPortStartScheduler>
    270e:	00 00       	nop
    2710:	0f 90       	pop	r0
    2712:	df 91       	pop	r29
    2714:	cf 91       	pop	r28
    2716:	0f 91       	pop	r16
    2718:	ff 90       	pop	r15
    271a:	ef 90       	pop	r14
    271c:	08 95       	ret

0000271e <vTaskSuspendAll>:
    271e:	cf 93       	push	r28
    2720:	df 93       	push	r29
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    2726:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <uxSchedulerSuspended>
    272a:	8f 5f       	subi	r24, 0xFF	; 255
    272c:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <uxSchedulerSuspended>
    2730:	00 00       	nop
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	08 95       	ret

00002738 <xTaskResumeAll>:
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	00 d0       	rcall	.+0      	; 0x273e <xTaskResumeAll+0x6>
    273e:	00 d0       	rcall	.+0      	; 0x2740 <xTaskResumeAll+0x8>
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	1a 82       	std	Y+2, r1	; 0x02
    2746:	19 82       	std	Y+1, r1	; 0x01
    2748:	1b 82       	std	Y+3, r1	; 0x03
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	f8 94       	cli
    274e:	0f 92       	push	r0
    2750:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <uxSchedulerSuspended>
    2754:	81 50       	subi	r24, 0x01	; 1
    2756:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <uxSchedulerSuspended>
    275a:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <uxSchedulerSuspended>
    275e:	88 23       	and	r24, r24
    2760:	09 f0       	breq	.+2      	; 0x2764 <xTaskResumeAll+0x2c>
    2762:	77 c0       	rjmp	.+238    	; 0x2852 <xTaskResumeAll+0x11a>
    2764:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <uxCurrentNumberOfTasks>
    2768:	88 23       	and	r24, r24
    276a:	09 f4       	brne	.+2      	; 0x276e <xTaskResumeAll+0x36>
    276c:	72 c0       	rjmp	.+228    	; 0x2852 <xTaskResumeAll+0x11a>
    276e:	49 c0       	rjmp	.+146    	; 0x2802 <xTaskResumeAll+0xca>
    2770:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <xPendingReadyList+0x5>
    2774:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <xPendingReadyList+0x6>
    2778:	fc 01       	movw	r30, r24
    277a:	86 81       	ldd	r24, Z+6	; 0x06
    277c:	97 81       	ldd	r25, Z+7	; 0x07
    277e:	9a 83       	std	Y+2, r25	; 0x02
    2780:	89 83       	std	Y+1, r24	; 0x01
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	9a 81       	ldd	r25, Y+2	; 0x02
    2786:	0c 96       	adiw	r24, 0x0c	; 12
    2788:	0e 94 37 07 	call	0xe6e	; 0xe6e <uxListRemove>
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	9a 81       	ldd	r25, Y+2	; 0x02
    2790:	02 96       	adiw	r24, 0x02	; 2
    2792:	0e 94 37 07 	call	0xe6e	; 0xe6e <uxListRemove>
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	9a 81       	ldd	r25, Y+2	; 0x02
    279a:	fc 01       	movw	r30, r24
    279c:	96 89       	ldd	r25, Z+22	; 0x16
    279e:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxTopReadyPriority>
    27a2:	89 17       	cp	r24, r25
    27a4:	30 f4       	brcc	.+12     	; 0x27b2 <xTaskResumeAll+0x7a>
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	9a 81       	ldd	r25, Y+2	; 0x02
    27aa:	fc 01       	movw	r30, r24
    27ac:	86 89       	ldd	r24, Z+22	; 0x16
    27ae:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <uxTopReadyPriority>
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	ac 01       	movw	r20, r24
    27b8:	4e 5f       	subi	r20, 0xFE	; 254
    27ba:	5f 4f       	sbci	r21, 0xFF	; 255
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	9a 81       	ldd	r25, Y+2	; 0x02
    27c0:	fc 01       	movw	r30, r24
    27c2:	86 89       	ldd	r24, Z+22	; 0x16
    27c4:	28 2f       	mov	r18, r24
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	c9 01       	movw	r24, r18
    27ca:	88 0f       	add	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	88 0f       	add	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	82 0f       	add	r24, r18
    27d8:	93 1f       	adc	r25, r19
    27da:	81 53       	subi	r24, 0x31	; 49
    27dc:	99 4f       	sbci	r25, 0xF9	; 249
    27de:	ba 01       	movw	r22, r20
    27e0:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInsertEnd>
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	fc 01       	movw	r30, r24
    27ea:	26 89       	ldd	r18, Z+22	; 0x16
    27ec:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxCurrentTCB>
    27f0:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    27f4:	fc 01       	movw	r30, r24
    27f6:	86 89       	ldd	r24, Z+22	; 0x16
    27f8:	28 17       	cp	r18, r24
    27fa:	18 f0       	brcs	.+6      	; 0x2802 <xTaskResumeAll+0xca>
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <xYieldPending>
    2802:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <xPendingReadyList>
    2806:	88 23       	and	r24, r24
    2808:	09 f0       	breq	.+2      	; 0x280c <xTaskResumeAll+0xd4>
    280a:	b2 cf       	rjmp	.-156    	; 0x2770 <xTaskResumeAll+0x38>
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	9a 81       	ldd	r25, Y+2	; 0x02
    2810:	89 2b       	or	r24, r25
    2812:	11 f0       	breq	.+4      	; 0x2818 <xTaskResumeAll+0xe0>
    2814:	0e 94 6e 17 	call	0x2edc	; 0x2edc <prvResetNextTaskUnblockTime>
    2818:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <uxPendedTicks>
    281c:	8c 83       	std	Y+4, r24	; 0x04
    281e:	8c 81       	ldd	r24, Y+4	; 0x04
    2820:	88 23       	and	r24, r24
    2822:	79 f0       	breq	.+30     	; 0x2842 <xTaskResumeAll+0x10a>
    2824:	0e 94 33 14 	call	0x2866	; 0x2866 <xTaskIncrementTick>
    2828:	88 23       	and	r24, r24
    282a:	19 f0       	breq	.+6      	; 0x2832 <xTaskResumeAll+0xfa>
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <xYieldPending>
    2832:	8c 81       	ldd	r24, Y+4	; 0x04
    2834:	81 50       	subi	r24, 0x01	; 1
    2836:	8c 83       	std	Y+4, r24	; 0x04
    2838:	8c 81       	ldd	r24, Y+4	; 0x04
    283a:	88 23       	and	r24, r24
    283c:	99 f7       	brne	.-26     	; 0x2824 <xTaskResumeAll+0xec>
    283e:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <uxPendedTicks>
    2842:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <xYieldPending>
    2846:	88 23       	and	r24, r24
    2848:	21 f0       	breq	.+8      	; 0x2852 <xTaskResumeAll+0x11a>
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	8b 83       	std	Y+3, r24	; 0x03
    284e:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <vPortYield>
    2852:	0f 90       	pop	r0
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	8b 81       	ldd	r24, Y+3	; 0x03
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	08 95       	ret

00002866 <xTaskIncrementTick>:
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	29 97       	sbiw	r28, 0x09	; 9
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	19 82       	std	Y+1, r1	; 0x01
    287c:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <uxSchedulerSuspended>
    2880:	88 23       	and	r24, r24
    2882:	09 f0       	breq	.+2      	; 0x2886 <xTaskIncrementTick+0x20>
    2884:	c8 c0       	rjmp	.+400    	; 0x2a16 <xTaskIncrementTick+0x1b0>
    2886:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <xTickCount>
    288a:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <xTickCount+0x1>
    288e:	01 96       	adiw	r24, 0x01	; 1
    2890:	9b 83       	std	Y+3, r25	; 0x03
    2892:	8a 83       	std	Y+2, r24	; 0x02
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	9b 81       	ldd	r25, Y+3	; 0x03
    2898:	90 93 1e 07 	sts	0x071E, r25	; 0x80071e <xTickCount+0x1>
    289c:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <xTickCount>
    28a0:	8a 81       	ldd	r24, Y+2	; 0x02
    28a2:	9b 81       	ldd	r25, Y+3	; 0x03
    28a4:	89 2b       	or	r24, r25
    28a6:	d9 f4       	brne	.+54     	; 0x28de <xTaskIncrementTick+0x78>
    28a8:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <pxDelayedTaskList>
    28ac:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <pxDelayedTaskList+0x1>
    28b0:	9d 83       	std	Y+5, r25	; 0x05
    28b2:	8c 83       	std	Y+4, r24	; 0x04
    28b4:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <pxOverflowDelayedTaskList>
    28b8:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <pxOverflowDelayedTaskList+0x1>
    28bc:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <pxDelayedTaskList+0x1>
    28c0:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <pxDelayedTaskList>
    28c4:	8c 81       	ldd	r24, Y+4	; 0x04
    28c6:	9d 81       	ldd	r25, Y+5	; 0x05
    28c8:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <pxOverflowDelayedTaskList+0x1>
    28cc:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <pxOverflowDelayedTaskList>
    28d0:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <xNumOfOverflows>
    28d4:	8f 5f       	subi	r24, 0xFF	; 255
    28d6:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <xNumOfOverflows>
    28da:	0e 94 6e 17 	call	0x2edc	; 0x2edc <prvResetNextTaskUnblockTime>
    28de:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <xNextTaskUnblockTime>
    28e2:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <xNextTaskUnblockTime+0x1>
    28e6:	2a 81       	ldd	r18, Y+2	; 0x02
    28e8:	3b 81       	ldd	r19, Y+3	; 0x03
    28ea:	28 17       	cp	r18, r24
    28ec:	39 07       	cpc	r19, r25
    28ee:	08 f4       	brcc	.+2      	; 0x28f2 <xTaskIncrementTick+0x8c>
    28f0:	78 c0       	rjmp	.+240    	; 0x29e2 <xTaskIncrementTick+0x17c>
    28f2:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <pxDelayedTaskList>
    28f6:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <pxDelayedTaskList+0x1>
    28fa:	fc 01       	movw	r30, r24
    28fc:	80 81       	ld	r24, Z
    28fe:	88 23       	and	r24, r24
    2900:	39 f4       	brne	.+14     	; 0x2910 <xTaskIncrementTick+0xaa>
    2902:	8f ef       	ldi	r24, 0xFF	; 255
    2904:	9f ef       	ldi	r25, 0xFF	; 255
    2906:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <xNextTaskUnblockTime+0x1>
    290a:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <xNextTaskUnblockTime>
    290e:	69 c0       	rjmp	.+210    	; 0x29e2 <xTaskIncrementTick+0x17c>
    2910:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <pxDelayedTaskList>
    2914:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <pxDelayedTaskList+0x1>
    2918:	fc 01       	movw	r30, r24
    291a:	85 81       	ldd	r24, Z+5	; 0x05
    291c:	96 81       	ldd	r25, Z+6	; 0x06
    291e:	fc 01       	movw	r30, r24
    2920:	86 81       	ldd	r24, Z+6	; 0x06
    2922:	97 81       	ldd	r25, Z+7	; 0x07
    2924:	9f 83       	std	Y+7, r25	; 0x07
    2926:	8e 83       	std	Y+6, r24	; 0x06
    2928:	8e 81       	ldd	r24, Y+6	; 0x06
    292a:	9f 81       	ldd	r25, Y+7	; 0x07
    292c:	fc 01       	movw	r30, r24
    292e:	82 81       	ldd	r24, Z+2	; 0x02
    2930:	93 81       	ldd	r25, Z+3	; 0x03
    2932:	99 87       	std	Y+9, r25	; 0x09
    2934:	88 87       	std	Y+8, r24	; 0x08
    2936:	2a 81       	ldd	r18, Y+2	; 0x02
    2938:	3b 81       	ldd	r19, Y+3	; 0x03
    293a:	88 85       	ldd	r24, Y+8	; 0x08
    293c:	99 85       	ldd	r25, Y+9	; 0x09
    293e:	28 17       	cp	r18, r24
    2940:	39 07       	cpc	r19, r25
    2942:	38 f4       	brcc	.+14     	; 0x2952 <xTaskIncrementTick+0xec>
    2944:	88 85       	ldd	r24, Y+8	; 0x08
    2946:	99 85       	ldd	r25, Y+9	; 0x09
    2948:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <xNextTaskUnblockTime+0x1>
    294c:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <xNextTaskUnblockTime>
    2950:	48 c0       	rjmp	.+144    	; 0x29e2 <xTaskIncrementTick+0x17c>
    2952:	8e 81       	ldd	r24, Y+6	; 0x06
    2954:	9f 81       	ldd	r25, Y+7	; 0x07
    2956:	02 96       	adiw	r24, 0x02	; 2
    2958:	0e 94 37 07 	call	0xe6e	; 0xe6e <uxListRemove>
    295c:	8e 81       	ldd	r24, Y+6	; 0x06
    295e:	9f 81       	ldd	r25, Y+7	; 0x07
    2960:	fc 01       	movw	r30, r24
    2962:	84 89       	ldd	r24, Z+20	; 0x14
    2964:	95 89       	ldd	r25, Z+21	; 0x15
    2966:	89 2b       	or	r24, r25
    2968:	29 f0       	breq	.+10     	; 0x2974 <xTaskIncrementTick+0x10e>
    296a:	8e 81       	ldd	r24, Y+6	; 0x06
    296c:	9f 81       	ldd	r25, Y+7	; 0x07
    296e:	0c 96       	adiw	r24, 0x0c	; 12
    2970:	0e 94 37 07 	call	0xe6e	; 0xe6e <uxListRemove>
    2974:	8e 81       	ldd	r24, Y+6	; 0x06
    2976:	9f 81       	ldd	r25, Y+7	; 0x07
    2978:	fc 01       	movw	r30, r24
    297a:	96 89       	ldd	r25, Z+22	; 0x16
    297c:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxTopReadyPriority>
    2980:	89 17       	cp	r24, r25
    2982:	30 f4       	brcc	.+12     	; 0x2990 <xTaskIncrementTick+0x12a>
    2984:	8e 81       	ldd	r24, Y+6	; 0x06
    2986:	9f 81       	ldd	r25, Y+7	; 0x07
    2988:	fc 01       	movw	r30, r24
    298a:	86 89       	ldd	r24, Z+22	; 0x16
    298c:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <uxTopReadyPriority>
    2990:	8e 81       	ldd	r24, Y+6	; 0x06
    2992:	9f 81       	ldd	r25, Y+7	; 0x07
    2994:	ac 01       	movw	r20, r24
    2996:	4e 5f       	subi	r20, 0xFE	; 254
    2998:	5f 4f       	sbci	r21, 0xFF	; 255
    299a:	8e 81       	ldd	r24, Y+6	; 0x06
    299c:	9f 81       	ldd	r25, Y+7	; 0x07
    299e:	fc 01       	movw	r30, r24
    29a0:	86 89       	ldd	r24, Z+22	; 0x16
    29a2:	28 2f       	mov	r18, r24
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	c9 01       	movw	r24, r18
    29a8:	88 0f       	add	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	88 0f       	add	r24, r24
    29ae:	99 1f       	adc	r25, r25
    29b0:	88 0f       	add	r24, r24
    29b2:	99 1f       	adc	r25, r25
    29b4:	82 0f       	add	r24, r18
    29b6:	93 1f       	adc	r25, r19
    29b8:	81 53       	subi	r24, 0x31	; 49
    29ba:	99 4f       	sbci	r25, 0xF9	; 249
    29bc:	ba 01       	movw	r22, r20
    29be:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInsertEnd>
    29c2:	8e 81       	ldd	r24, Y+6	; 0x06
    29c4:	9f 81       	ldd	r25, Y+7	; 0x07
    29c6:	fc 01       	movw	r30, r24
    29c8:	26 89       	ldd	r18, Z+22	; 0x16
    29ca:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxCurrentTCB>
    29ce:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    29d2:	fc 01       	movw	r30, r24
    29d4:	86 89       	ldd	r24, Z+22	; 0x16
    29d6:	28 17       	cp	r18, r24
    29d8:	08 f4       	brcc	.+2      	; 0x29dc <xTaskIncrementTick+0x176>
    29da:	8b cf       	rjmp	.-234    	; 0x28f2 <xTaskIncrementTick+0x8c>
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	88 cf       	rjmp	.-240    	; 0x28f2 <xTaskIncrementTick+0x8c>
    29e2:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxCurrentTCB>
    29e6:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    29ea:	fc 01       	movw	r30, r24
    29ec:	86 89       	ldd	r24, Z+22	; 0x16
    29ee:	28 2f       	mov	r18, r24
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	c9 01       	movw	r24, r18
    29f4:	88 0f       	add	r24, r24
    29f6:	99 1f       	adc	r25, r25
    29f8:	88 0f       	add	r24, r24
    29fa:	99 1f       	adc	r25, r25
    29fc:	88 0f       	add	r24, r24
    29fe:	99 1f       	adc	r25, r25
    2a00:	82 0f       	add	r24, r18
    2a02:	93 1f       	adc	r25, r19
    2a04:	81 53       	subi	r24, 0x31	; 49
    2a06:	99 4f       	sbci	r25, 0xF9	; 249
    2a08:	fc 01       	movw	r30, r24
    2a0a:	80 81       	ld	r24, Z
    2a0c:	82 30       	cpi	r24, 0x02	; 2
    2a0e:	40 f0       	brcs	.+16     	; 0x2a20 <xTaskIncrementTick+0x1ba>
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	89 83       	std	Y+1, r24	; 0x01
    2a14:	05 c0       	rjmp	.+10     	; 0x2a20 <xTaskIncrementTick+0x1ba>
    2a16:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <uxPendedTicks>
    2a1a:	8f 5f       	subi	r24, 0xFF	; 255
    2a1c:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <uxPendedTicks>
    2a20:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <xYieldPending>
    2a24:	88 23       	and	r24, r24
    2a26:	11 f0       	breq	.+4      	; 0x2a2c <xTaskIncrementTick+0x1c6>
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	89 83       	std	Y+1, r24	; 0x01
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	29 96       	adiw	r28, 0x09	; 9
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	df 91       	pop	r29
    2a3c:	cf 91       	pop	r28
    2a3e:	08 95       	ret

00002a40 <vTaskSwitchContext>:
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <vTaskSwitchContext+0x6>
    2a46:	1f 92       	push	r1
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
    2a4c:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <uxSchedulerSuspended>
    2a50:	88 23       	and	r24, r24
    2a52:	21 f0       	breq	.+8      	; 0x2a5c <vTaskSwitchContext+0x1c>
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <xYieldPending>
    2a5a:	71 c0       	rjmp	.+226    	; 0x2b3e <vTaskSwitchContext+0xfe>
    2a5c:	10 92 22 07 	sts	0x0722, r1	; 0x800722 <xYieldPending>
    2a60:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxCurrentTCB>
    2a64:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    2a68:	fc 01       	movw	r30, r24
    2a6a:	85 a1       	ldd	r24, Z+37	; 0x25
    2a6c:	96 a1       	ldd	r25, Z+38	; 0x26
    2a6e:	0e 94 70 05 	call	0xae0	; 0xae0 <switch_out>
    2a72:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxTopReadyPriority>
    2a76:	89 83       	std	Y+1, r24	; 0x01
    2a78:	03 c0       	rjmp	.+6      	; 0x2a80 <vTaskSwitchContext+0x40>
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	81 50       	subi	r24, 0x01	; 1
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	28 2f       	mov	r18, r24
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	c9 01       	movw	r24, r18
    2a88:	88 0f       	add	r24, r24
    2a8a:	99 1f       	adc	r25, r25
    2a8c:	88 0f       	add	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	82 0f       	add	r24, r18
    2a96:	93 1f       	adc	r25, r19
    2a98:	81 53       	subi	r24, 0x31	; 49
    2a9a:	99 4f       	sbci	r25, 0xF9	; 249
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	80 81       	ld	r24, Z
    2aa0:	88 23       	and	r24, r24
    2aa2:	59 f3       	breq	.-42     	; 0x2a7a <vTaskSwitchContext+0x3a>
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	28 2f       	mov	r18, r24
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	c9 01       	movw	r24, r18
    2aac:	88 0f       	add	r24, r24
    2aae:	99 1f       	adc	r25, r25
    2ab0:	88 0f       	add	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	82 0f       	add	r24, r18
    2aba:	93 1f       	adc	r25, r19
    2abc:	81 53       	subi	r24, 0x31	; 49
    2abe:	99 4f       	sbci	r25, 0xF9	; 249
    2ac0:	9b 83       	std	Y+3, r25	; 0x03
    2ac2:	8a 83       	std	Y+2, r24	; 0x02
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac8:	fc 01       	movw	r30, r24
    2aca:	81 81       	ldd	r24, Z+1	; 0x01
    2acc:	92 81       	ldd	r25, Z+2	; 0x02
    2ace:	fc 01       	movw	r30, r24
    2ad0:	22 81       	ldd	r18, Z+2	; 0x02
    2ad2:	33 81       	ldd	r19, Z+3	; 0x03
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad8:	fc 01       	movw	r30, r24
    2ada:	32 83       	std	Z+2, r19	; 0x02
    2adc:	21 83       	std	Z+1, r18	; 0x01
    2ade:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	21 81       	ldd	r18, Z+1	; 0x01
    2ae6:	32 81       	ldd	r19, Z+2	; 0x02
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	9b 81       	ldd	r25, Y+3	; 0x03
    2aec:	03 96       	adiw	r24, 0x03	; 3
    2aee:	28 17       	cp	r18, r24
    2af0:	39 07       	cpc	r19, r25
    2af2:	69 f4       	brne	.+26     	; 0x2b0e <vTaskSwitchContext+0xce>
    2af4:	8a 81       	ldd	r24, Y+2	; 0x02
    2af6:	9b 81       	ldd	r25, Y+3	; 0x03
    2af8:	fc 01       	movw	r30, r24
    2afa:	81 81       	ldd	r24, Z+1	; 0x01
    2afc:	92 81       	ldd	r25, Z+2	; 0x02
    2afe:	fc 01       	movw	r30, r24
    2b00:	22 81       	ldd	r18, Z+2	; 0x02
    2b02:	33 81       	ldd	r19, Z+3	; 0x03
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	9b 81       	ldd	r25, Y+3	; 0x03
    2b08:	fc 01       	movw	r30, r24
    2b0a:	32 83       	std	Z+2, r19	; 0x02
    2b0c:	21 83       	std	Z+1, r18	; 0x01
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	9b 81       	ldd	r25, Y+3	; 0x03
    2b12:	fc 01       	movw	r30, r24
    2b14:	81 81       	ldd	r24, Z+1	; 0x01
    2b16:	92 81       	ldd	r25, Z+2	; 0x02
    2b18:	fc 01       	movw	r30, r24
    2b1a:	86 81       	ldd	r24, Z+6	; 0x06
    2b1c:	97 81       	ldd	r25, Z+7	; 0x07
    2b1e:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <pxCurrentTCB+0x1>
    2b22:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <pxCurrentTCB>
    2b26:	89 81       	ldd	r24, Y+1	; 0x01
    2b28:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <uxTopReadyPriority>
    2b2c:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxCurrentTCB>
    2b30:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    2b34:	fc 01       	movw	r30, r24
    2b36:	85 a1       	ldd	r24, Z+37	; 0x25
    2b38:	96 a1       	ldd	r25, Z+38	; 0x26
    2b3a:	0e 94 4b 05 	call	0xa96	; 0xa96 <switch_in>
    2b3e:	00 00       	nop
    2b40:	0f 90       	pop	r0
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	df 91       	pop	r29
    2b48:	cf 91       	pop	r28
    2b4a:	08 95       	ret

00002b4c <vTaskPlaceOnEventList>:
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <vTaskPlaceOnEventList+0x6>
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <vTaskPlaceOnEventList+0x8>
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	9a 83       	std	Y+2, r25	; 0x02
    2b5a:	89 83       	std	Y+1, r24	; 0x01
    2b5c:	7c 83       	std	Y+4, r23	; 0x04
    2b5e:	6b 83       	std	Y+3, r22	; 0x03
    2b60:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxCurrentTCB>
    2b64:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    2b68:	9c 01       	movw	r18, r24
    2b6a:	24 5f       	subi	r18, 0xF4	; 244
    2b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	9a 81       	ldd	r25, Y+2	; 0x02
    2b72:	b9 01       	movw	r22, r18
    2b74:	0e 94 bf 06 	call	0xd7e	; 0xd7e <vListInsert>
    2b78:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7c:	61 e0       	ldi	r22, 0x01	; 1
    2b7e:	0e 94 1a 18 	call	0x3034	; 0x3034 <prvAddCurrentTaskToDelayedList>
    2b82:	00 00       	nop
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	0f 90       	pop	r0
    2b8a:	0f 90       	pop	r0
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	08 95       	ret

00002b92 <xTaskRemoveFromEventList>:
    2b92:	cf 93       	push	r28
    2b94:	df 93       	push	r29
    2b96:	00 d0       	rcall	.+0      	; 0x2b98 <xTaskRemoveFromEventList+0x6>
    2b98:	00 d0       	rcall	.+0      	; 0x2b9a <xTaskRemoveFromEventList+0x8>
    2b9a:	1f 92       	push	r1
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    2ba0:	9d 83       	std	Y+5, r25	; 0x05
    2ba2:	8c 83       	std	Y+4, r24	; 0x04
    2ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba8:	fc 01       	movw	r30, r24
    2baa:	85 81       	ldd	r24, Z+5	; 0x05
    2bac:	96 81       	ldd	r25, Z+6	; 0x06
    2bae:	fc 01       	movw	r30, r24
    2bb0:	86 81       	ldd	r24, Z+6	; 0x06
    2bb2:	97 81       	ldd	r25, Z+7	; 0x07
    2bb4:	9b 83       	std	Y+3, r25	; 0x03
    2bb6:	8a 83       	std	Y+2, r24	; 0x02
    2bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bba:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbc:	0c 96       	adiw	r24, 0x0c	; 12
    2bbe:	0e 94 37 07 	call	0xe6e	; 0xe6e <uxListRemove>
    2bc2:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <uxSchedulerSuspended>
    2bc6:	88 23       	and	r24, r24
    2bc8:	69 f5       	brne	.+90     	; 0x2c24 <xTaskRemoveFromEventList+0x92>
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bce:	02 96       	adiw	r24, 0x02	; 2
    2bd0:	0e 94 37 07 	call	0xe6e	; 0xe6e <uxListRemove>
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd8:	fc 01       	movw	r30, r24
    2bda:	96 89       	ldd	r25, Z+22	; 0x16
    2bdc:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxTopReadyPriority>
    2be0:	89 17       	cp	r24, r25
    2be2:	30 f4       	brcc	.+12     	; 0x2bf0 <xTaskRemoveFromEventList+0x5e>
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	9b 81       	ldd	r25, Y+3	; 0x03
    2be8:	fc 01       	movw	r30, r24
    2bea:	86 89       	ldd	r24, Z+22	; 0x16
    2bec:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <uxTopReadyPriority>
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf4:	ac 01       	movw	r20, r24
    2bf6:	4e 5f       	subi	r20, 0xFE	; 254
    2bf8:	5f 4f       	sbci	r21, 0xFF	; 255
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfe:	fc 01       	movw	r30, r24
    2c00:	86 89       	ldd	r24, Z+22	; 0x16
    2c02:	28 2f       	mov	r18, r24
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	c9 01       	movw	r24, r18
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	88 0f       	add	r24, r24
    2c0e:	99 1f       	adc	r25, r25
    2c10:	88 0f       	add	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	82 0f       	add	r24, r18
    2c16:	93 1f       	adc	r25, r19
    2c18:	81 53       	subi	r24, 0x31	; 49
    2c1a:	99 4f       	sbci	r25, 0xF9	; 249
    2c1c:	ba 01       	movw	r22, r20
    2c1e:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInsertEnd>
    2c22:	08 c0       	rjmp	.+16     	; 0x2c34 <xTaskRemoveFromEventList+0xa2>
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	9b 81       	ldd	r25, Y+3	; 0x03
    2c28:	0c 96       	adiw	r24, 0x0c	; 12
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	89 e0       	ldi	r24, 0x09	; 9
    2c2e:	97 e0       	ldi	r25, 0x07	; 7
    2c30:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInsertEnd>
    2c34:	8a 81       	ldd	r24, Y+2	; 0x02
    2c36:	9b 81       	ldd	r25, Y+3	; 0x03
    2c38:	fc 01       	movw	r30, r24
    2c3a:	26 89       	ldd	r18, Z+22	; 0x16
    2c3c:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxCurrentTCB>
    2c40:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    2c44:	fc 01       	movw	r30, r24
    2c46:	86 89       	ldd	r24, Z+22	; 0x16
    2c48:	82 17       	cp	r24, r18
    2c4a:	30 f4       	brcc	.+12     	; 0x2c58 <xTaskRemoveFromEventList+0xc6>
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	89 83       	std	Y+1, r24	; 0x01
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <xYieldPending>
    2c56:	01 c0       	rjmp	.+2      	; 0x2c5a <xTaskRemoveFromEventList+0xc8>
    2c58:	19 82       	std	Y+1, r1	; 0x01
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	08 95       	ret

00002c6c <vTaskSetTimeOutState>:
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	00 d0       	rcall	.+0      	; 0x2c72 <vTaskSetTimeOutState+0x6>
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    2c76:	9a 83       	std	Y+2, r25	; 0x02
    2c78:	89 83       	std	Y+1, r24	; 0x01
    2c7a:	20 91 23 07 	lds	r18, 0x0723	; 0x800723 <xNumOfOverflows>
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	9a 81       	ldd	r25, Y+2	; 0x02
    2c82:	fc 01       	movw	r30, r24
    2c84:	20 83       	st	Z, r18
    2c86:	20 91 1d 07 	lds	r18, 0x071D	; 0x80071d <xTickCount>
    2c8a:	30 91 1e 07 	lds	r19, 0x071E	; 0x80071e <xTickCount+0x1>
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	9a 81       	ldd	r25, Y+2	; 0x02
    2c92:	fc 01       	movw	r30, r24
    2c94:	32 83       	std	Z+2, r19	; 0x02
    2c96:	21 83       	std	Z+1, r18	; 0x01
    2c98:	00 00       	nop
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	08 95       	ret

00002ca4 <xTaskCheckForTimeOut>:
    2ca4:	cf 93       	push	r28
    2ca6:	df 93       	push	r29
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	27 97       	sbiw	r28, 0x07	; 7
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	de bf       	out	0x3e, r29	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	cd bf       	out	0x3d, r28	; 61
    2cb8:	9d 83       	std	Y+5, r25	; 0x05
    2cba:	8c 83       	std	Y+4, r24	; 0x04
    2cbc:	7f 83       	std	Y+7, r23	; 0x07
    2cbe:	6e 83       	std	Y+6, r22	; 0x06
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	f8 94       	cli
    2cc4:	0f 92       	push	r0
    2cc6:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <xTickCount>
    2cca:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <xTickCount+0x1>
    2cce:	9b 83       	std	Y+3, r25	; 0x03
    2cd0:	8a 83       	std	Y+2, r24	; 0x02
    2cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	90 81       	ld	r25, Z
    2cda:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <xNumOfOverflows>
    2cde:	98 17       	cp	r25, r24
    2ce0:	69 f0       	breq	.+26     	; 0x2cfc <xTaskCheckForTimeOut+0x58>
    2ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	21 81       	ldd	r18, Z+1	; 0x01
    2cea:	32 81       	ldd	r19, Z+2	; 0x02
    2cec:	8a 81       	ldd	r24, Y+2	; 0x02
    2cee:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf0:	82 17       	cp	r24, r18
    2cf2:	93 07       	cpc	r25, r19
    2cf4:	18 f0       	brcs	.+6      	; 0x2cfc <xTaskCheckForTimeOut+0x58>
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	30 c0       	rjmp	.+96     	; 0x2d5c <xTaskCheckForTimeOut+0xb8>
    2cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cfe:	9d 81       	ldd	r25, Y+5	; 0x05
    2d00:	fc 01       	movw	r30, r24
    2d02:	81 81       	ldd	r24, Z+1	; 0x01
    2d04:	92 81       	ldd	r25, Z+2	; 0x02
    2d06:	2a 81       	ldd	r18, Y+2	; 0x02
    2d08:	3b 81       	ldd	r19, Y+3	; 0x03
    2d0a:	28 1b       	sub	r18, r24
    2d0c:	39 0b       	sbc	r19, r25
    2d0e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d10:	9f 81       	ldd	r25, Y+7	; 0x07
    2d12:	fc 01       	movw	r30, r24
    2d14:	80 81       	ld	r24, Z
    2d16:	91 81       	ldd	r25, Z+1	; 0x01
    2d18:	28 17       	cp	r18, r24
    2d1a:	39 07       	cpc	r19, r25
    2d1c:	e8 f4       	brcc	.+58     	; 0x2d58 <xTaskCheckForTimeOut+0xb4>
    2d1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d20:	9f 81       	ldd	r25, Y+7	; 0x07
    2d22:	fc 01       	movw	r30, r24
    2d24:	20 81       	ld	r18, Z
    2d26:	31 81       	ldd	r19, Z+1	; 0x01
    2d28:	8c 81       	ldd	r24, Y+4	; 0x04
    2d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	41 81       	ldd	r20, Z+1	; 0x01
    2d30:	52 81       	ldd	r21, Z+2	; 0x02
    2d32:	8a 81       	ldd	r24, Y+2	; 0x02
    2d34:	9b 81       	ldd	r25, Y+3	; 0x03
    2d36:	ba 01       	movw	r22, r20
    2d38:	68 1b       	sub	r22, r24
    2d3a:	79 0b       	sbc	r23, r25
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	28 0f       	add	r18, r24
    2d40:	39 1f       	adc	r19, r25
    2d42:	8e 81       	ldd	r24, Y+6	; 0x06
    2d44:	9f 81       	ldd	r25, Y+7	; 0x07
    2d46:	fc 01       	movw	r30, r24
    2d48:	31 83       	std	Z+1, r19	; 0x01
    2d4a:	20 83       	st	Z, r18
    2d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d50:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <vTaskSetTimeOutState>
    2d54:	19 82       	std	Y+1, r1	; 0x01
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <xTaskCheckForTimeOut+0xb8>
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	89 83       	std	Y+1, r24	; 0x01
    2d5c:	0f 90       	pop	r0
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	27 96       	adiw	r28, 0x07	; 7
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	df 91       	pop	r29
    2d70:	cf 91       	pop	r28
    2d72:	08 95       	ret

00002d74 <vTaskMissedYield>:
    2d74:	cf 93       	push	r28
    2d76:	df 93       	push	r29
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <xYieldPending>
    2d82:	00 00       	nop
    2d84:	df 91       	pop	r29
    2d86:	cf 91       	pop	r28
    2d88:	08 95       	ret

00002d8a <prvIdleTask>:
    2d8a:	cf 93       	push	r28
    2d8c:	df 93       	push	r29
    2d8e:	00 d0       	rcall	.+0      	; 0x2d90 <prvIdleTask+0x6>
    2d90:	cd b7       	in	r28, 0x3d	; 61
    2d92:	de b7       	in	r29, 0x3e	; 62
    2d94:	9a 83       	std	Y+2, r25	; 0x02
    2d96:	89 83       	std	Y+1, r24	; 0x01
    2d98:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <prvCheckTasksWaitingTermination>
    2d9c:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <pxReadyTasksLists>
    2da0:	82 30       	cpi	r24, 0x02	; 2
    2da2:	10 f0       	brcs	.+4      	; 0x2da8 <prvIdleTask+0x1e>
    2da4:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <vPortYield>
    2da8:	0e 94 c3 03 	call	0x786	; 0x786 <vApplicationIdleHook>
    2dac:	f5 cf       	rjmp	.-22     	; 0x2d98 <prvIdleTask+0xe>

00002dae <prvInitialiseTaskLists>:
    2dae:	cf 93       	push	r28
    2db0:	df 93       	push	r29
    2db2:	1f 92       	push	r1
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	19 82       	std	Y+1, r1	; 0x01
    2dba:	13 c0       	rjmp	.+38     	; 0x2de2 <prvInitialiseTaskLists+0x34>
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	28 2f       	mov	r18, r24
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	c9 01       	movw	r24, r18
    2dc4:	88 0f       	add	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	88 0f       	add	r24, r24
    2dca:	99 1f       	adc	r25, r25
    2dcc:	88 0f       	add	r24, r24
    2dce:	99 1f       	adc	r25, r25
    2dd0:	82 0f       	add	r24, r18
    2dd2:	93 1f       	adc	r25, r19
    2dd4:	81 53       	subi	r24, 0x31	; 49
    2dd6:	99 4f       	sbci	r25, 0xF9	; 249
    2dd8:	0e 94 28 06 	call	0xc50	; 0xc50 <vListInitialise>
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	8f 5f       	subi	r24, 0xFF	; 255
    2de0:	89 83       	std	Y+1, r24	; 0x01
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	84 30       	cpi	r24, 0x04	; 4
    2de6:	50 f3       	brcs	.-44     	; 0x2dbc <prvInitialiseTaskLists+0xe>
    2de8:	83 ef       	ldi	r24, 0xF3	; 243
    2dea:	96 e0       	ldi	r25, 0x06	; 6
    2dec:	0e 94 28 06 	call	0xc50	; 0xc50 <vListInitialise>
    2df0:	8c ef       	ldi	r24, 0xFC	; 252
    2df2:	96 e0       	ldi	r25, 0x06	; 6
    2df4:	0e 94 28 06 	call	0xc50	; 0xc50 <vListInitialise>
    2df8:	89 e0       	ldi	r24, 0x09	; 9
    2dfa:	97 e0       	ldi	r25, 0x07	; 7
    2dfc:	0e 94 28 06 	call	0xc50	; 0xc50 <vListInitialise>
    2e00:	82 e1       	ldi	r24, 0x12	; 18
    2e02:	97 e0       	ldi	r25, 0x07	; 7
    2e04:	0e 94 28 06 	call	0xc50	; 0xc50 <vListInitialise>
    2e08:	83 ef       	ldi	r24, 0xF3	; 243
    2e0a:	96 e0       	ldi	r25, 0x06	; 6
    2e0c:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <pxDelayedTaskList+0x1>
    2e10:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <pxDelayedTaskList>
    2e14:	8c ef       	ldi	r24, 0xFC	; 252
    2e16:	96 e0       	ldi	r25, 0x06	; 6
    2e18:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <pxOverflowDelayedTaskList+0x1>
    2e1c:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <pxOverflowDelayedTaskList>
    2e20:	00 00       	nop
    2e22:	0f 90       	pop	r0
    2e24:	df 91       	pop	r29
    2e26:	cf 91       	pop	r28
    2e28:	08 95       	ret

00002e2a <prvCheckTasksWaitingTermination>:
    2e2a:	cf 93       	push	r28
    2e2c:	df 93       	push	r29
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <prvCheckTasksWaitingTermination+0x6>
    2e30:	1f 92       	push	r1
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	2f c0       	rjmp	.+94     	; 0x2e96 <prvCheckTasksWaitingTermination+0x6c>
    2e38:	0e 94 8f 13 	call	0x271e	; 0x271e <vTaskSuspendAll>
    2e3c:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <xTasksWaitingTermination>
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	99 23       	and	r25, r25
    2e44:	09 f0       	breq	.+2      	; 0x2e48 <prvCheckTasksWaitingTermination+0x1e>
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	89 83       	std	Y+1, r24	; 0x01
    2e4a:	0e 94 9c 13 	call	0x2738	; 0x2738 <xTaskResumeAll>
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	88 23       	and	r24, r24
    2e52:	09 f5       	brne	.+66     	; 0x2e96 <prvCheckTasksWaitingTermination+0x6c>
    2e54:	0f b6       	in	r0, 0x3f	; 63
    2e56:	f8 94       	cli
    2e58:	0f 92       	push	r0
    2e5a:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xTasksWaitingTermination+0x5>
    2e5e:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <xTasksWaitingTermination+0x6>
    2e62:	fc 01       	movw	r30, r24
    2e64:	86 81       	ldd	r24, Z+6	; 0x06
    2e66:	97 81       	ldd	r25, Z+7	; 0x07
    2e68:	9b 83       	std	Y+3, r25	; 0x03
    2e6a:	8a 83       	std	Y+2, r24	; 0x02
    2e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e70:	02 96       	adiw	r24, 0x02	; 2
    2e72:	0e 94 37 07 	call	0xe6e	; 0xe6e <uxListRemove>
    2e76:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <uxCurrentNumberOfTasks>
    2e7a:	81 50       	subi	r24, 0x01	; 1
    2e7c:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <uxCurrentNumberOfTasks>
    2e80:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <uxDeletedTasksWaitingCleanUp>
    2e84:	81 50       	subi	r24, 0x01	; 1
    2e86:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <uxDeletedTasksWaitingCleanUp>
    2e8a:	0f 90       	pop	r0
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e90:	9b 81       	ldd	r25, Y+3	; 0x03
    2e92:	0e 94 56 17 	call	0x2eac	; 0x2eac <prvDeleteTCB>
    2e96:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <uxDeletedTasksWaitingCleanUp>
    2e9a:	88 23       	and	r24, r24
    2e9c:	69 f6       	brne	.-102    	; 0x2e38 <prvCheckTasksWaitingTermination+0xe>
    2e9e:	00 00       	nop
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	df 91       	pop	r29
    2ea8:	cf 91       	pop	r28
    2eaa:	08 95       	ret

00002eac <prvDeleteTCB>:
    2eac:	cf 93       	push	r28
    2eae:	df 93       	push	r29
    2eb0:	00 d0       	rcall	.+0      	; 0x2eb2 <prvDeleteTCB+0x6>
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
    2eb6:	9a 83       	std	Y+2, r25	; 0x02
    2eb8:	89 83       	std	Y+1, r24	; 0x01
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	87 89       	ldd	r24, Z+23	; 0x17
    2ec2:	90 8d       	ldd	r25, Z+24	; 0x18
    2ec4:	0e 94 df 0a 	call	0x15be	; 0x15be <vPortFree>
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
    2eca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ecc:	0e 94 df 0a 	call	0x15be	; 0x15be <vPortFree>
    2ed0:	00 00       	nop
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	08 95       	ret

00002edc <prvResetNextTaskUnblockTime>:
    2edc:	cf 93       	push	r28
    2ede:	df 93       	push	r29
    2ee0:	00 d0       	rcall	.+0      	; 0x2ee2 <prvResetNextTaskUnblockTime+0x6>
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <pxDelayedTaskList>
    2eea:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <pxDelayedTaskList+0x1>
    2eee:	fc 01       	movw	r30, r24
    2ef0:	80 81       	ld	r24, Z
    2ef2:	88 23       	and	r24, r24
    2ef4:	39 f4       	brne	.+14     	; 0x2f04 <prvResetNextTaskUnblockTime+0x28>
    2ef6:	8f ef       	ldi	r24, 0xFF	; 255
    2ef8:	9f ef       	ldi	r25, 0xFF	; 255
    2efa:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <xNextTaskUnblockTime+0x1>
    2efe:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <xNextTaskUnblockTime>
    2f02:	15 c0       	rjmp	.+42     	; 0x2f2e <prvResetNextTaskUnblockTime+0x52>
    2f04:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <pxDelayedTaskList>
    2f08:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <pxDelayedTaskList+0x1>
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	85 81       	ldd	r24, Z+5	; 0x05
    2f10:	96 81       	ldd	r25, Z+6	; 0x06
    2f12:	fc 01       	movw	r30, r24
    2f14:	86 81       	ldd	r24, Z+6	; 0x06
    2f16:	97 81       	ldd	r25, Z+7	; 0x07
    2f18:	9a 83       	std	Y+2, r25	; 0x02
    2f1a:	89 83       	std	Y+1, r24	; 0x01
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f20:	fc 01       	movw	r30, r24
    2f22:	82 81       	ldd	r24, Z+2	; 0x02
    2f24:	93 81       	ldd	r25, Z+3	; 0x03
    2f26:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <xNextTaskUnblockTime+0x1>
    2f2a:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <xNextTaskUnblockTime>
    2f2e:	00 00       	nop
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	08 95       	ret

00002f3a <xTaskPriorityDisinherit>:
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	00 d0       	rcall	.+0      	; 0x2f40 <xTaskPriorityDisinherit+0x6>
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <xTaskPriorityDisinherit+0x8>
    2f42:	1f 92       	push	r1
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62
    2f48:	9d 83       	std	Y+5, r25	; 0x05
    2f4a:	8c 83       	std	Y+4, r24	; 0x04
    2f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f50:	9b 83       	std	Y+3, r25	; 0x03
    2f52:	8a 83       	std	Y+2, r24	; 0x02
    2f54:	19 82       	std	Y+1, r1	; 0x01
    2f56:	8c 81       	ldd	r24, Y+4	; 0x04
    2f58:	9d 81       	ldd	r25, Y+5	; 0x05
    2f5a:	89 2b       	or	r24, r25
    2f5c:	09 f4       	brne	.+2      	; 0x2f60 <xTaskPriorityDisinherit+0x26>
    2f5e:	61 c0       	rjmp	.+194    	; 0x3022 <xTaskPriorityDisinherit+0xe8>
    2f60:	8a 81       	ldd	r24, Y+2	; 0x02
    2f62:	9b 81       	ldd	r25, Y+3	; 0x03
    2f64:	fc 01       	movw	r30, r24
    2f66:	84 a1       	ldd	r24, Z+36	; 0x24
    2f68:	2f ef       	ldi	r18, 0xFF	; 255
    2f6a:	28 0f       	add	r18, r24
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f70:	fc 01       	movw	r30, r24
    2f72:	24 a3       	std	Z+36, r18	; 0x24
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	9b 81       	ldd	r25, Y+3	; 0x03
    2f78:	fc 01       	movw	r30, r24
    2f7a:	26 89       	ldd	r18, Z+22	; 0x16
    2f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f80:	fc 01       	movw	r30, r24
    2f82:	83 a1       	ldd	r24, Z+35	; 0x23
    2f84:	28 17       	cp	r18, r24
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <xTaskPriorityDisinherit+0x50>
    2f88:	4c c0       	rjmp	.+152    	; 0x3022 <xTaskPriorityDisinherit+0xe8>
    2f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8e:	fc 01       	movw	r30, r24
    2f90:	84 a1       	ldd	r24, Z+36	; 0x24
    2f92:	88 23       	and	r24, r24
    2f94:	09 f0       	breq	.+2      	; 0x2f98 <xTaskPriorityDisinherit+0x5e>
    2f96:	45 c0       	rjmp	.+138    	; 0x3022 <xTaskPriorityDisinherit+0xe8>
    2f98:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9c:	02 96       	adiw	r24, 0x02	; 2
    2f9e:	0e 94 37 07 	call	0xe6e	; 0xe6e <uxListRemove>
    2fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	23 a1       	ldd	r18, Z+35	; 0x23
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	9b 81       	ldd	r25, Y+3	; 0x03
    2fae:	fc 01       	movw	r30, r24
    2fb0:	26 8b       	std	Z+22, r18	; 0x16
    2fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	86 89       	ldd	r24, Z+22	; 0x16
    2fba:	88 2f       	mov	r24, r24
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	24 e0       	ldi	r18, 0x04	; 4
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	28 1b       	sub	r18, r24
    2fc4:	39 0b       	sbc	r19, r25
    2fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fca:	fc 01       	movw	r30, r24
    2fcc:	35 87       	std	Z+13, r19	; 0x0d
    2fce:	24 87       	std	Z+12, r18	; 0x0c
    2fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	96 89       	ldd	r25, Z+22	; 0x16
    2fd8:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <uxTopReadyPriority>
    2fdc:	89 17       	cp	r24, r25
    2fde:	30 f4       	brcc	.+12     	; 0x2fec <xTaskPriorityDisinherit+0xb2>
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	86 89       	ldd	r24, Z+22	; 0x16
    2fe8:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <uxTopReadyPriority>
    2fec:	8a 81       	ldd	r24, Y+2	; 0x02
    2fee:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff0:	ac 01       	movw	r20, r24
    2ff2:	4e 5f       	subi	r20, 0xFE	; 254
    2ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	86 89       	ldd	r24, Z+22	; 0x16
    2ffe:	28 2f       	mov	r18, r24
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	c9 01       	movw	r24, r18
    3004:	88 0f       	add	r24, r24
    3006:	99 1f       	adc	r25, r25
    3008:	88 0f       	add	r24, r24
    300a:	99 1f       	adc	r25, r25
    300c:	88 0f       	add	r24, r24
    300e:	99 1f       	adc	r25, r25
    3010:	82 0f       	add	r24, r18
    3012:	93 1f       	adc	r25, r19
    3014:	81 53       	subi	r24, 0x31	; 49
    3016:	99 4f       	sbci	r25, 0xF9	; 249
    3018:	ba 01       	movw	r22, r20
    301a:	0e 94 70 06 	call	0xce0	; 0xce0 <vListInsertEnd>
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	89 83       	std	Y+1, r24	; 0x01
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	0f 90       	pop	r0
    302c:	0f 90       	pop	r0
    302e:	df 91       	pop	r29
    3030:	cf 91       	pop	r28
    3032:	08 95       	ret

00003034 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
    303c:	27 97       	sbiw	r28, 0x07	; 7
    303e:	0f b6       	in	r0, 0x3f	; 63
    3040:	f8 94       	cli
    3042:	de bf       	out	0x3e, r29	; 62
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	cd bf       	out	0x3d, r28	; 61
    3048:	9e 83       	std	Y+6, r25	; 0x06
    304a:	8d 83       	std	Y+5, r24	; 0x05
    304c:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    304e:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <xTickCount>
    3052:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <xTickCount+0x1>
    3056:	9a 83       	std	Y+2, r25	; 0x02
    3058:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    305a:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxCurrentTCB>
    305e:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    3062:	02 96       	adiw	r24, 0x02	; 2
    3064:	0e 94 37 07 	call	0xe6e	; 0xe6e <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    3068:	29 81       	ldd	r18, Y+1	; 0x01
    306a:	3a 81       	ldd	r19, Y+2	; 0x02
    306c:	8d 81       	ldd	r24, Y+5	; 0x05
    306e:	9e 81       	ldd	r25, Y+6	; 0x06
    3070:	82 0f       	add	r24, r18
    3072:	93 1f       	adc	r25, r19
    3074:	9c 83       	std	Y+4, r25	; 0x04
    3076:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3078:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxCurrentTCB>
    307c:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    3080:	2b 81       	ldd	r18, Y+3	; 0x03
    3082:	3c 81       	ldd	r19, Y+4	; 0x04
    3084:	fc 01       	movw	r30, r24
    3086:	33 83       	std	Z+3, r19	; 0x03
    3088:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    308a:	2b 81       	ldd	r18, Y+3	; 0x03
    308c:	3c 81       	ldd	r19, Y+4	; 0x04
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	9a 81       	ldd	r25, Y+2	; 0x02
    3092:	28 17       	cp	r18, r24
    3094:	39 07       	cpc	r19, r25
    3096:	78 f4       	brcc	.+30     	; 0x30b6 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3098:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxCurrentTCB>
    309c:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    30a0:	9c 01       	movw	r18, r24
    30a2:	2e 5f       	subi	r18, 0xFE	; 254
    30a4:	3f 4f       	sbci	r19, 0xFF	; 255
    30a6:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <pxOverflowDelayedTaskList>
    30aa:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <pxOverflowDelayedTaskList+0x1>
    30ae:	b9 01       	movw	r22, r18
    30b0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    30b4:	1d c0       	rjmp	.+58     	; 0x30f0 <prvAddCurrentTaskToDelayedList+0xbc>
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    30b6:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxCurrentTCB>
    30ba:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxCurrentTCB+0x1>
    30be:	9c 01       	movw	r18, r24
    30c0:	2e 5f       	subi	r18, 0xFE	; 254
    30c2:	3f 4f       	sbci	r19, 0xFF	; 255
    30c4:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <pxDelayedTaskList>
    30c8:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <pxDelayedTaskList+0x1>
    30cc:	b9 01       	movw	r22, r18
    30ce:	0e 94 bf 06 	call	0xd7e	; 0xd7e <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    30d2:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <xNextTaskUnblockTime>
    30d6:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <xNextTaskUnblockTime+0x1>
    30da:	2b 81       	ldd	r18, Y+3	; 0x03
    30dc:	3c 81       	ldd	r19, Y+4	; 0x04
    30de:	28 17       	cp	r18, r24
    30e0:	39 07       	cpc	r19, r25
    30e2:	30 f4       	brcc	.+12     	; 0x30f0 <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    30e4:	8b 81       	ldd	r24, Y+3	; 0x03
    30e6:	9c 81       	ldd	r25, Y+4	; 0x04
    30e8:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <xNextTaskUnblockTime+0x1>
    30ec:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    30f0:	00 00       	nop
    30f2:	27 96       	adiw	r28, 0x07	; 7
    30f4:	0f b6       	in	r0, 0x3f	; 63
    30f6:	f8 94       	cli
    30f8:	de bf       	out	0x3e, r29	; 62
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	cd bf       	out	0x3d, r28	; 61
    30fe:	df 91       	pop	r29
    3100:	cf 91       	pop	r28
    3102:	08 95       	ret

00003104 <__subsf3>:
    3104:	50 58       	subi	r21, 0x80	; 128

00003106 <__addsf3>:
    3106:	bb 27       	eor	r27, r27
    3108:	aa 27       	eor	r26, r26
    310a:	0e 94 9a 18 	call	0x3134	; 0x3134 <__addsf3x>
    310e:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__fp_round>
    3112:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__fp_pscA>
    3116:	38 f0       	brcs	.+14     	; 0x3126 <__addsf3+0x20>
    3118:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fp_pscB>
    311c:	20 f0       	brcs	.+8      	; 0x3126 <__addsf3+0x20>
    311e:	39 f4       	brne	.+14     	; 0x312e <__addsf3+0x28>
    3120:	9f 3f       	cpi	r25, 0xFF	; 255
    3122:	19 f4       	brne	.+6      	; 0x312a <__addsf3+0x24>
    3124:	26 f4       	brtc	.+8      	; 0x312e <__addsf3+0x28>
    3126:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__fp_nan>
    312a:	0e f4       	brtc	.+2      	; 0x312e <__addsf3+0x28>
    312c:	e0 95       	com	r30
    312e:	e7 fb       	bst	r30, 7
    3130:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__fp_inf>

00003134 <__addsf3x>:
    3134:	e9 2f       	mov	r30, r25
    3136:	0e 94 83 19 	call	0x3306	; 0x3306 <__fp_split3>
    313a:	58 f3       	brcs	.-42     	; 0x3112 <__addsf3+0xc>
    313c:	ba 17       	cp	r27, r26
    313e:	62 07       	cpc	r22, r18
    3140:	73 07       	cpc	r23, r19
    3142:	84 07       	cpc	r24, r20
    3144:	95 07       	cpc	r25, r21
    3146:	20 f0       	brcs	.+8      	; 0x3150 <__addsf3x+0x1c>
    3148:	79 f4       	brne	.+30     	; 0x3168 <__addsf3x+0x34>
    314a:	a6 f5       	brtc	.+104    	; 0x31b4 <__addsf3x+0x80>
    314c:	0c 94 a5 19 	jmp	0x334a	; 0x334a <__fp_zero>
    3150:	0e f4       	brtc	.+2      	; 0x3154 <__addsf3x+0x20>
    3152:	e0 95       	com	r30
    3154:	0b 2e       	mov	r0, r27
    3156:	ba 2f       	mov	r27, r26
    3158:	a0 2d       	mov	r26, r0
    315a:	0b 01       	movw	r0, r22
    315c:	b9 01       	movw	r22, r18
    315e:	90 01       	movw	r18, r0
    3160:	0c 01       	movw	r0, r24
    3162:	ca 01       	movw	r24, r20
    3164:	a0 01       	movw	r20, r0
    3166:	11 24       	eor	r1, r1
    3168:	ff 27       	eor	r31, r31
    316a:	59 1b       	sub	r21, r25
    316c:	99 f0       	breq	.+38     	; 0x3194 <__addsf3x+0x60>
    316e:	59 3f       	cpi	r21, 0xF9	; 249
    3170:	50 f4       	brcc	.+20     	; 0x3186 <__addsf3x+0x52>
    3172:	50 3e       	cpi	r21, 0xE0	; 224
    3174:	68 f1       	brcs	.+90     	; 0x31d0 <__addsf3x+0x9c>
    3176:	1a 16       	cp	r1, r26
    3178:	f0 40       	sbci	r31, 0x00	; 0
    317a:	a2 2f       	mov	r26, r18
    317c:	23 2f       	mov	r18, r19
    317e:	34 2f       	mov	r19, r20
    3180:	44 27       	eor	r20, r20
    3182:	58 5f       	subi	r21, 0xF8	; 248
    3184:	f3 cf       	rjmp	.-26     	; 0x316c <__addsf3x+0x38>
    3186:	46 95       	lsr	r20
    3188:	37 95       	ror	r19
    318a:	27 95       	ror	r18
    318c:	a7 95       	ror	r26
    318e:	f0 40       	sbci	r31, 0x00	; 0
    3190:	53 95       	inc	r21
    3192:	c9 f7       	brne	.-14     	; 0x3186 <__addsf3x+0x52>
    3194:	7e f4       	brtc	.+30     	; 0x31b4 <__addsf3x+0x80>
    3196:	1f 16       	cp	r1, r31
    3198:	ba 0b       	sbc	r27, r26
    319a:	62 0b       	sbc	r22, r18
    319c:	73 0b       	sbc	r23, r19
    319e:	84 0b       	sbc	r24, r20
    31a0:	ba f0       	brmi	.+46     	; 0x31d0 <__addsf3x+0x9c>
    31a2:	91 50       	subi	r25, 0x01	; 1
    31a4:	a1 f0       	breq	.+40     	; 0x31ce <__addsf3x+0x9a>
    31a6:	ff 0f       	add	r31, r31
    31a8:	bb 1f       	adc	r27, r27
    31aa:	66 1f       	adc	r22, r22
    31ac:	77 1f       	adc	r23, r23
    31ae:	88 1f       	adc	r24, r24
    31b0:	c2 f7       	brpl	.-16     	; 0x31a2 <__addsf3x+0x6e>
    31b2:	0e c0       	rjmp	.+28     	; 0x31d0 <__addsf3x+0x9c>
    31b4:	ba 0f       	add	r27, r26
    31b6:	62 1f       	adc	r22, r18
    31b8:	73 1f       	adc	r23, r19
    31ba:	84 1f       	adc	r24, r20
    31bc:	48 f4       	brcc	.+18     	; 0x31d0 <__addsf3x+0x9c>
    31be:	87 95       	ror	r24
    31c0:	77 95       	ror	r23
    31c2:	67 95       	ror	r22
    31c4:	b7 95       	ror	r27
    31c6:	f7 95       	ror	r31
    31c8:	9e 3f       	cpi	r25, 0xFE	; 254
    31ca:	08 f0       	brcs	.+2      	; 0x31ce <__addsf3x+0x9a>
    31cc:	b0 cf       	rjmp	.-160    	; 0x312e <__addsf3+0x28>
    31ce:	93 95       	inc	r25
    31d0:	88 0f       	add	r24, r24
    31d2:	08 f0       	brcs	.+2      	; 0x31d6 <__addsf3x+0xa2>
    31d4:	99 27       	eor	r25, r25
    31d6:	ee 0f       	add	r30, r30
    31d8:	97 95       	ror	r25
    31da:	87 95       	ror	r24
    31dc:	08 95       	ret

000031de <__fixunssfsi>:
    31de:	0e 94 8b 19 	call	0x3316	; 0x3316 <__fp_splitA>
    31e2:	88 f0       	brcs	.+34     	; 0x3206 <__fixunssfsi+0x28>
    31e4:	9f 57       	subi	r25, 0x7F	; 127
    31e6:	98 f0       	brcs	.+38     	; 0x320e <__fixunssfsi+0x30>
    31e8:	b9 2f       	mov	r27, r25
    31ea:	99 27       	eor	r25, r25
    31ec:	b7 51       	subi	r27, 0x17	; 23
    31ee:	b0 f0       	brcs	.+44     	; 0x321c <__fixunssfsi+0x3e>
    31f0:	e1 f0       	breq	.+56     	; 0x322a <__fixunssfsi+0x4c>
    31f2:	66 0f       	add	r22, r22
    31f4:	77 1f       	adc	r23, r23
    31f6:	88 1f       	adc	r24, r24
    31f8:	99 1f       	adc	r25, r25
    31fa:	1a f0       	brmi	.+6      	; 0x3202 <__fixunssfsi+0x24>
    31fc:	ba 95       	dec	r27
    31fe:	c9 f7       	brne	.-14     	; 0x31f2 <__fixunssfsi+0x14>
    3200:	14 c0       	rjmp	.+40     	; 0x322a <__fixunssfsi+0x4c>
    3202:	b1 30       	cpi	r27, 0x01	; 1
    3204:	91 f0       	breq	.+36     	; 0x322a <__fixunssfsi+0x4c>
    3206:	0e 94 a5 19 	call	0x334a	; 0x334a <__fp_zero>
    320a:	b1 e0       	ldi	r27, 0x01	; 1
    320c:	08 95       	ret
    320e:	0c 94 a5 19 	jmp	0x334a	; 0x334a <__fp_zero>
    3212:	67 2f       	mov	r22, r23
    3214:	78 2f       	mov	r23, r24
    3216:	88 27       	eor	r24, r24
    3218:	b8 5f       	subi	r27, 0xF8	; 248
    321a:	39 f0       	breq	.+14     	; 0x322a <__fixunssfsi+0x4c>
    321c:	b9 3f       	cpi	r27, 0xF9	; 249
    321e:	cc f3       	brlt	.-14     	; 0x3212 <__fixunssfsi+0x34>
    3220:	86 95       	lsr	r24
    3222:	77 95       	ror	r23
    3224:	67 95       	ror	r22
    3226:	b3 95       	inc	r27
    3228:	d9 f7       	brne	.-10     	; 0x3220 <__fixunssfsi+0x42>
    322a:	3e f4       	brtc	.+14     	; 0x323a <__fixunssfsi+0x5c>
    322c:	90 95       	com	r25
    322e:	80 95       	com	r24
    3230:	70 95       	com	r23
    3232:	61 95       	neg	r22
    3234:	7f 4f       	sbci	r23, 0xFF	; 255
    3236:	8f 4f       	sbci	r24, 0xFF	; 255
    3238:	9f 4f       	sbci	r25, 0xFF	; 255
    323a:	08 95       	ret

0000323c <__floatunsisf>:
    323c:	e8 94       	clt
    323e:	09 c0       	rjmp	.+18     	; 0x3252 <__floatsisf+0x12>

00003240 <__floatsisf>:
    3240:	97 fb       	bst	r25, 7
    3242:	3e f4       	brtc	.+14     	; 0x3252 <__floatsisf+0x12>
    3244:	90 95       	com	r25
    3246:	80 95       	com	r24
    3248:	70 95       	com	r23
    324a:	61 95       	neg	r22
    324c:	7f 4f       	sbci	r23, 0xFF	; 255
    324e:	8f 4f       	sbci	r24, 0xFF	; 255
    3250:	9f 4f       	sbci	r25, 0xFF	; 255
    3252:	99 23       	and	r25, r25
    3254:	a9 f0       	breq	.+42     	; 0x3280 <__floatsisf+0x40>
    3256:	f9 2f       	mov	r31, r25
    3258:	96 e9       	ldi	r25, 0x96	; 150
    325a:	bb 27       	eor	r27, r27
    325c:	93 95       	inc	r25
    325e:	f6 95       	lsr	r31
    3260:	87 95       	ror	r24
    3262:	77 95       	ror	r23
    3264:	67 95       	ror	r22
    3266:	b7 95       	ror	r27
    3268:	f1 11       	cpse	r31, r1
    326a:	f8 cf       	rjmp	.-16     	; 0x325c <__floatsisf+0x1c>
    326c:	fa f4       	brpl	.+62     	; 0x32ac <__floatsisf+0x6c>
    326e:	bb 0f       	add	r27, r27
    3270:	11 f4       	brne	.+4      	; 0x3276 <__floatsisf+0x36>
    3272:	60 ff       	sbrs	r22, 0
    3274:	1b c0       	rjmp	.+54     	; 0x32ac <__floatsisf+0x6c>
    3276:	6f 5f       	subi	r22, 0xFF	; 255
    3278:	7f 4f       	sbci	r23, 0xFF	; 255
    327a:	8f 4f       	sbci	r24, 0xFF	; 255
    327c:	9f 4f       	sbci	r25, 0xFF	; 255
    327e:	16 c0       	rjmp	.+44     	; 0x32ac <__floatsisf+0x6c>
    3280:	88 23       	and	r24, r24
    3282:	11 f0       	breq	.+4      	; 0x3288 <__floatsisf+0x48>
    3284:	96 e9       	ldi	r25, 0x96	; 150
    3286:	11 c0       	rjmp	.+34     	; 0x32aa <__floatsisf+0x6a>
    3288:	77 23       	and	r23, r23
    328a:	21 f0       	breq	.+8      	; 0x3294 <__floatsisf+0x54>
    328c:	9e e8       	ldi	r25, 0x8E	; 142
    328e:	87 2f       	mov	r24, r23
    3290:	76 2f       	mov	r23, r22
    3292:	05 c0       	rjmp	.+10     	; 0x329e <__floatsisf+0x5e>
    3294:	66 23       	and	r22, r22
    3296:	71 f0       	breq	.+28     	; 0x32b4 <__floatsisf+0x74>
    3298:	96 e8       	ldi	r25, 0x86	; 134
    329a:	86 2f       	mov	r24, r22
    329c:	70 e0       	ldi	r23, 0x00	; 0
    329e:	60 e0       	ldi	r22, 0x00	; 0
    32a0:	2a f0       	brmi	.+10     	; 0x32ac <__floatsisf+0x6c>
    32a2:	9a 95       	dec	r25
    32a4:	66 0f       	add	r22, r22
    32a6:	77 1f       	adc	r23, r23
    32a8:	88 1f       	adc	r24, r24
    32aa:	da f7       	brpl	.-10     	; 0x32a2 <__floatsisf+0x62>
    32ac:	88 0f       	add	r24, r24
    32ae:	96 95       	lsr	r25
    32b0:	87 95       	ror	r24
    32b2:	97 f9       	bld	r25, 7
    32b4:	08 95       	ret

000032b6 <__fp_inf>:
    32b6:	97 f9       	bld	r25, 7
    32b8:	9f 67       	ori	r25, 0x7F	; 127
    32ba:	80 e8       	ldi	r24, 0x80	; 128
    32bc:	70 e0       	ldi	r23, 0x00	; 0
    32be:	60 e0       	ldi	r22, 0x00	; 0
    32c0:	08 95       	ret

000032c2 <__fp_nan>:
    32c2:	9f ef       	ldi	r25, 0xFF	; 255
    32c4:	80 ec       	ldi	r24, 0xC0	; 192
    32c6:	08 95       	ret

000032c8 <__fp_pscA>:
    32c8:	00 24       	eor	r0, r0
    32ca:	0a 94       	dec	r0
    32cc:	16 16       	cp	r1, r22
    32ce:	17 06       	cpc	r1, r23
    32d0:	18 06       	cpc	r1, r24
    32d2:	09 06       	cpc	r0, r25
    32d4:	08 95       	ret

000032d6 <__fp_pscB>:
    32d6:	00 24       	eor	r0, r0
    32d8:	0a 94       	dec	r0
    32da:	12 16       	cp	r1, r18
    32dc:	13 06       	cpc	r1, r19
    32de:	14 06       	cpc	r1, r20
    32e0:	05 06       	cpc	r0, r21
    32e2:	08 95       	ret

000032e4 <__fp_round>:
    32e4:	09 2e       	mov	r0, r25
    32e6:	03 94       	inc	r0
    32e8:	00 0c       	add	r0, r0
    32ea:	11 f4       	brne	.+4      	; 0x32f0 <__fp_round+0xc>
    32ec:	88 23       	and	r24, r24
    32ee:	52 f0       	brmi	.+20     	; 0x3304 <__fp_round+0x20>
    32f0:	bb 0f       	add	r27, r27
    32f2:	40 f4       	brcc	.+16     	; 0x3304 <__fp_round+0x20>
    32f4:	bf 2b       	or	r27, r31
    32f6:	11 f4       	brne	.+4      	; 0x32fc <__fp_round+0x18>
    32f8:	60 ff       	sbrs	r22, 0
    32fa:	04 c0       	rjmp	.+8      	; 0x3304 <__fp_round+0x20>
    32fc:	6f 5f       	subi	r22, 0xFF	; 255
    32fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3300:	8f 4f       	sbci	r24, 0xFF	; 255
    3302:	9f 4f       	sbci	r25, 0xFF	; 255
    3304:	08 95       	ret

00003306 <__fp_split3>:
    3306:	57 fd       	sbrc	r21, 7
    3308:	90 58       	subi	r25, 0x80	; 128
    330a:	44 0f       	add	r20, r20
    330c:	55 1f       	adc	r21, r21
    330e:	59 f0       	breq	.+22     	; 0x3326 <__fp_splitA+0x10>
    3310:	5f 3f       	cpi	r21, 0xFF	; 255
    3312:	71 f0       	breq	.+28     	; 0x3330 <__fp_splitA+0x1a>
    3314:	47 95       	ror	r20

00003316 <__fp_splitA>:
    3316:	88 0f       	add	r24, r24
    3318:	97 fb       	bst	r25, 7
    331a:	99 1f       	adc	r25, r25
    331c:	61 f0       	breq	.+24     	; 0x3336 <__fp_splitA+0x20>
    331e:	9f 3f       	cpi	r25, 0xFF	; 255
    3320:	79 f0       	breq	.+30     	; 0x3340 <__fp_splitA+0x2a>
    3322:	87 95       	ror	r24
    3324:	08 95       	ret
    3326:	12 16       	cp	r1, r18
    3328:	13 06       	cpc	r1, r19
    332a:	14 06       	cpc	r1, r20
    332c:	55 1f       	adc	r21, r21
    332e:	f2 cf       	rjmp	.-28     	; 0x3314 <__fp_split3+0xe>
    3330:	46 95       	lsr	r20
    3332:	f1 df       	rcall	.-30     	; 0x3316 <__fp_splitA>
    3334:	08 c0       	rjmp	.+16     	; 0x3346 <__fp_splitA+0x30>
    3336:	16 16       	cp	r1, r22
    3338:	17 06       	cpc	r1, r23
    333a:	18 06       	cpc	r1, r24
    333c:	99 1f       	adc	r25, r25
    333e:	f1 cf       	rjmp	.-30     	; 0x3322 <__fp_splitA+0xc>
    3340:	86 95       	lsr	r24
    3342:	71 05       	cpc	r23, r1
    3344:	61 05       	cpc	r22, r1
    3346:	08 94       	sec
    3348:	08 95       	ret

0000334a <__fp_zero>:
    334a:	e8 94       	clt

0000334c <__fp_szero>:
    334c:	bb 27       	eor	r27, r27
    334e:	66 27       	eor	r22, r22
    3350:	77 27       	eor	r23, r23
    3352:	cb 01       	movw	r24, r22
    3354:	97 f9       	bld	r25, 7
    3356:	08 95       	ret

00003358 <pow>:
    3358:	fa 01       	movw	r30, r20
    335a:	ee 0f       	add	r30, r30
    335c:	ff 1f       	adc	r31, r31
    335e:	30 96       	adiw	r30, 0x00	; 0
    3360:	21 05       	cpc	r18, r1
    3362:	31 05       	cpc	r19, r1
    3364:	a1 f1       	breq	.+104    	; 0x33ce <pow+0x76>
    3366:	61 15       	cp	r22, r1
    3368:	71 05       	cpc	r23, r1
    336a:	61 f4       	brne	.+24     	; 0x3384 <pow+0x2c>
    336c:	80 38       	cpi	r24, 0x80	; 128
    336e:	bf e3       	ldi	r27, 0x3F	; 63
    3370:	9b 07       	cpc	r25, r27
    3372:	49 f1       	breq	.+82     	; 0x33c6 <pow+0x6e>
    3374:	68 94       	set
    3376:	90 38       	cpi	r25, 0x80	; 128
    3378:	81 05       	cpc	r24, r1
    337a:	61 f0       	breq	.+24     	; 0x3394 <pow+0x3c>
    337c:	80 38       	cpi	r24, 0x80	; 128
    337e:	bf ef       	ldi	r27, 0xFF	; 255
    3380:	9b 07       	cpc	r25, r27
    3382:	41 f0       	breq	.+16     	; 0x3394 <pow+0x3c>
    3384:	99 23       	and	r25, r25
    3386:	4a f5       	brpl	.+82     	; 0x33da <pow+0x82>
    3388:	ff 3f       	cpi	r31, 0xFF	; 255
    338a:	e1 05       	cpc	r30, r1
    338c:	31 05       	cpc	r19, r1
    338e:	21 05       	cpc	r18, r1
    3390:	19 f1       	breq	.+70     	; 0x33d8 <pow+0x80>
    3392:	e8 94       	clt
    3394:	08 94       	sec
    3396:	e7 95       	ror	r30
    3398:	d9 01       	movw	r26, r18
    339a:	aa 23       	and	r26, r26
    339c:	29 f4       	brne	.+10     	; 0x33a8 <pow+0x50>
    339e:	ab 2f       	mov	r26, r27
    33a0:	be 2f       	mov	r27, r30
    33a2:	f8 5f       	subi	r31, 0xF8	; 248
    33a4:	d0 f3       	brcs	.-12     	; 0x339a <pow+0x42>
    33a6:	10 c0       	rjmp	.+32     	; 0x33c8 <pow+0x70>
    33a8:	ff 5f       	subi	r31, 0xFF	; 255
    33aa:	70 f4       	brcc	.+28     	; 0x33c8 <pow+0x70>
    33ac:	a6 95       	lsr	r26
    33ae:	e0 f7       	brcc	.-8      	; 0x33a8 <pow+0x50>
    33b0:	f7 39       	cpi	r31, 0x97	; 151
    33b2:	50 f0       	brcs	.+20     	; 0x33c8 <pow+0x70>
    33b4:	19 f0       	breq	.+6      	; 0x33bc <pow+0x64>
    33b6:	ff 3a       	cpi	r31, 0xAF	; 175
    33b8:	38 f4       	brcc	.+14     	; 0x33c8 <pow+0x70>
    33ba:	9f 77       	andi	r25, 0x7F	; 127
    33bc:	9f 93       	push	r25
    33be:	0d d0       	rcall	.+26     	; 0x33da <pow+0x82>
    33c0:	0f 90       	pop	r0
    33c2:	07 fc       	sbrc	r0, 7
    33c4:	90 58       	subi	r25, 0x80	; 128
    33c6:	08 95       	ret
    33c8:	46 f0       	brts	.+16     	; 0x33da <pow+0x82>
    33ca:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__fp_nan>
    33ce:	60 e0       	ldi	r22, 0x00	; 0
    33d0:	70 e0       	ldi	r23, 0x00	; 0
    33d2:	80 e8       	ldi	r24, 0x80	; 128
    33d4:	9f e3       	ldi	r25, 0x3F	; 63
    33d6:	08 95       	ret
    33d8:	4f e7       	ldi	r20, 0x7F	; 127
    33da:	9f 77       	andi	r25, 0x7F	; 127
    33dc:	5f 93       	push	r21
    33de:	4f 93       	push	r20
    33e0:	3f 93       	push	r19
    33e2:	2f 93       	push	r18
    33e4:	0e 94 a7 1a 	call	0x354e	; 0x354e <log>
    33e8:	2f 91       	pop	r18
    33ea:	3f 91       	pop	r19
    33ec:	4f 91       	pop	r20
    33ee:	5f 91       	pop	r21
    33f0:	0e 94 23 1b 	call	0x3646	; 0x3646 <__mulsf3>
    33f4:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <exp>
    33f8:	29 f4       	brne	.+10     	; 0x3404 <pow+0xac>
    33fa:	16 f0       	brts	.+4      	; 0x3400 <pow+0xa8>
    33fc:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__fp_inf>
    3400:	0c 94 a5 19 	jmp	0x334a	; 0x334a <__fp_zero>
    3404:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__fp_nan>

00003408 <exp>:
    3408:	0e 94 8b 19 	call	0x3316	; 0x3316 <__fp_splitA>
    340c:	a8 f3       	brcs	.-22     	; 0x33f8 <pow+0xa0>
    340e:	96 38       	cpi	r25, 0x86	; 134
    3410:	a0 f7       	brcc	.-24     	; 0x33fa <pow+0xa2>
    3412:	07 f8       	bld	r0, 7
    3414:	0f 92       	push	r0
    3416:	e8 94       	clt
    3418:	2b e3       	ldi	r18, 0x3B	; 59
    341a:	3a ea       	ldi	r19, 0xAA	; 170
    341c:	48 eb       	ldi	r20, 0xB8	; 184
    341e:	5f e7       	ldi	r21, 0x7F	; 127
    3420:	0e 94 39 1b 	call	0x3672	; 0x3672 <__mulsf3_pse>
    3424:	0f 92       	push	r0
    3426:	0f 92       	push	r0
    3428:	0f 92       	push	r0
    342a:	4d b7       	in	r20, 0x3d	; 61
    342c:	5e b7       	in	r21, 0x3e	; 62
    342e:	0f 92       	push	r0
    3430:	0e 94 ef 1a 	call	0x35de	; 0x35de <modf>
    3434:	ec e7       	ldi	r30, 0x7C	; 124
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	0e 94 36 1a 	call	0x346c	; 0x346c <__fp_powser>
    343c:	4f 91       	pop	r20
    343e:	5f 91       	pop	r21
    3440:	ef 91       	pop	r30
    3442:	ff 91       	pop	r31
    3444:	e5 95       	asr	r30
    3446:	ee 1f       	adc	r30, r30
    3448:	ff 1f       	adc	r31, r31
    344a:	49 f0       	breq	.+18     	; 0x345e <exp+0x56>
    344c:	fe 57       	subi	r31, 0x7E	; 126
    344e:	e0 68       	ori	r30, 0x80	; 128
    3450:	44 27       	eor	r20, r20
    3452:	ee 0f       	add	r30, r30
    3454:	44 1f       	adc	r20, r20
    3456:	fa 95       	dec	r31
    3458:	e1 f7       	brne	.-8      	; 0x3452 <exp+0x4a>
    345a:	41 95       	neg	r20
    345c:	55 0b       	sbc	r21, r21
    345e:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <ldexp>
    3462:	0f 90       	pop	r0
    3464:	07 fe       	sbrs	r0, 7
    3466:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <inverse>
    346a:	08 95       	ret

0000346c <__fp_powser>:
    346c:	df 93       	push	r29
    346e:	cf 93       	push	r28
    3470:	1f 93       	push	r17
    3472:	0f 93       	push	r16
    3474:	ff 92       	push	r15
    3476:	ef 92       	push	r14
    3478:	df 92       	push	r13
    347a:	7b 01       	movw	r14, r22
    347c:	8c 01       	movw	r16, r24
    347e:	68 94       	set
    3480:	06 c0       	rjmp	.+12     	; 0x348e <__fp_powser+0x22>
    3482:	da 2e       	mov	r13, r26
    3484:	ef 01       	movw	r28, r30
    3486:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3x>
    348a:	fe 01       	movw	r30, r28
    348c:	e8 94       	clt
    348e:	a5 91       	lpm	r26, Z+
    3490:	25 91       	lpm	r18, Z+
    3492:	35 91       	lpm	r19, Z+
    3494:	45 91       	lpm	r20, Z+
    3496:	55 91       	lpm	r21, Z+
    3498:	a6 f3       	brts	.-24     	; 0x3482 <__fp_powser+0x16>
    349a:	ef 01       	movw	r28, r30
    349c:	0e 94 9a 18 	call	0x3134	; 0x3134 <__addsf3x>
    34a0:	fe 01       	movw	r30, r28
    34a2:	97 01       	movw	r18, r14
    34a4:	a8 01       	movw	r20, r16
    34a6:	da 94       	dec	r13
    34a8:	69 f7       	brne	.-38     	; 0x3484 <__fp_powser+0x18>
    34aa:	df 90       	pop	r13
    34ac:	ef 90       	pop	r14
    34ae:	ff 90       	pop	r15
    34b0:	0f 91       	pop	r16
    34b2:	1f 91       	pop	r17
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	08 95       	ret

000034ba <inverse>:
    34ba:	9b 01       	movw	r18, r22
    34bc:	ac 01       	movw	r20, r24
    34be:	60 e0       	ldi	r22, 0x00	; 0
    34c0:	70 e0       	ldi	r23, 0x00	; 0
    34c2:	80 e8       	ldi	r24, 0x80	; 128
    34c4:	9f e3       	ldi	r25, 0x3F	; 63
    34c6:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <__divsf3>
    34ca:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__fp_inf>
    34ce:	0c 94 02 1c 	jmp	0x3804	; 0x3804 <__fp_mpack>

000034d2 <ldexp>:
    34d2:	0e 94 8b 19 	call	0x3316	; 0x3316 <__fp_splitA>
    34d6:	d8 f3       	brcs	.-10     	; 0x34ce <inverse+0x14>
    34d8:	99 23       	and	r25, r25
    34da:	c9 f3       	breq	.-14     	; 0x34ce <inverse+0x14>
    34dc:	94 0f       	add	r25, r20
    34de:	51 1d       	adc	r21, r1
    34e0:	a3 f3       	brvs	.-24     	; 0x34ca <inverse+0x10>
    34e2:	91 50       	subi	r25, 0x01	; 1
    34e4:	50 40       	sbci	r21, 0x00	; 0
    34e6:	94 f0       	brlt	.+36     	; 0x350c <ldexp+0x3a>
    34e8:	59 f0       	breq	.+22     	; 0x3500 <ldexp+0x2e>
    34ea:	88 23       	and	r24, r24
    34ec:	32 f0       	brmi	.+12     	; 0x34fa <ldexp+0x28>
    34ee:	66 0f       	add	r22, r22
    34f0:	77 1f       	adc	r23, r23
    34f2:	88 1f       	adc	r24, r24
    34f4:	91 50       	subi	r25, 0x01	; 1
    34f6:	50 40       	sbci	r21, 0x00	; 0
    34f8:	c1 f7       	brne	.-16     	; 0x34ea <ldexp+0x18>
    34fa:	9e 3f       	cpi	r25, 0xFE	; 254
    34fc:	51 05       	cpc	r21, r1
    34fe:	2c f7       	brge	.-54     	; 0x34ca <inverse+0x10>
    3500:	88 0f       	add	r24, r24
    3502:	91 1d       	adc	r25, r1
    3504:	96 95       	lsr	r25
    3506:	87 95       	ror	r24
    3508:	97 f9       	bld	r25, 7
    350a:	08 95       	ret
    350c:	5f 3f       	cpi	r21, 0xFF	; 255
    350e:	ac f0       	brlt	.+42     	; 0x353a <ldexp+0x68>
    3510:	98 3e       	cpi	r25, 0xE8	; 232
    3512:	9c f0       	brlt	.+38     	; 0x353a <ldexp+0x68>
    3514:	bb 27       	eor	r27, r27
    3516:	86 95       	lsr	r24
    3518:	77 95       	ror	r23
    351a:	67 95       	ror	r22
    351c:	b7 95       	ror	r27
    351e:	08 f4       	brcc	.+2      	; 0x3522 <ldexp+0x50>
    3520:	b1 60       	ori	r27, 0x01	; 1
    3522:	93 95       	inc	r25
    3524:	c1 f7       	brne	.-16     	; 0x3516 <ldexp+0x44>
    3526:	bb 0f       	add	r27, r27
    3528:	58 f7       	brcc	.-42     	; 0x3500 <ldexp+0x2e>
    352a:	11 f4       	brne	.+4      	; 0x3530 <ldexp+0x5e>
    352c:	60 ff       	sbrs	r22, 0
    352e:	e8 cf       	rjmp	.-48     	; 0x3500 <ldexp+0x2e>
    3530:	6f 5f       	subi	r22, 0xFF	; 255
    3532:	7f 4f       	sbci	r23, 0xFF	; 255
    3534:	8f 4f       	sbci	r24, 0xFF	; 255
    3536:	9f 4f       	sbci	r25, 0xFF	; 255
    3538:	e3 cf       	rjmp	.-58     	; 0x3500 <ldexp+0x2e>
    353a:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__fp_szero>
    353e:	16 f0       	brts	.+4      	; 0x3544 <ldexp+0x72>
    3540:	0c 94 02 1c 	jmp	0x3804	; 0x3804 <__fp_mpack>
    3544:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__fp_nan>
    3548:	68 94       	set
    354a:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__fp_inf>

0000354e <log>:
    354e:	0e 94 8b 19 	call	0x3316	; 0x3316 <__fp_splitA>
    3552:	a8 f3       	brcs	.-22     	; 0x353e <ldexp+0x6c>
    3554:	99 23       	and	r25, r25
    3556:	c1 f3       	breq	.-16     	; 0x3548 <ldexp+0x76>
    3558:	ae f3       	brts	.-22     	; 0x3544 <ldexp+0x72>
    355a:	df 93       	push	r29
    355c:	cf 93       	push	r28
    355e:	1f 93       	push	r17
    3560:	0f 93       	push	r16
    3562:	ff 92       	push	r15
    3564:	c9 2f       	mov	r28, r25
    3566:	dd 27       	eor	r29, r29
    3568:	88 23       	and	r24, r24
    356a:	2a f0       	brmi	.+10     	; 0x3576 <log+0x28>
    356c:	21 97       	sbiw	r28, 0x01	; 1
    356e:	66 0f       	add	r22, r22
    3570:	77 1f       	adc	r23, r23
    3572:	88 1f       	adc	r24, r24
    3574:	da f7       	brpl	.-10     	; 0x356c <log+0x1e>
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	40 e8       	ldi	r20, 0x80	; 128
    357c:	5f eb       	ldi	r21, 0xBF	; 191
    357e:	9f e3       	ldi	r25, 0x3F	; 63
    3580:	88 39       	cpi	r24, 0x98	; 152
    3582:	20 f0       	brcs	.+8      	; 0x358c <log+0x3e>
    3584:	80 3e       	cpi	r24, 0xE0	; 224
    3586:	38 f0       	brcs	.+14     	; 0x3596 <log+0x48>
    3588:	21 96       	adiw	r28, 0x01	; 1
    358a:	8f 77       	andi	r24, 0x7F	; 127
    358c:	0e 94 83 18 	call	0x3106	; 0x3106 <__addsf3>
    3590:	e4 ea       	ldi	r30, 0xA4	; 164
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	04 c0       	rjmp	.+8      	; 0x359e <log+0x50>
    3596:	0e 94 83 18 	call	0x3106	; 0x3106 <__addsf3>
    359a:	e1 ed       	ldi	r30, 0xD1	; 209
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	0e 94 36 1a 	call	0x346c	; 0x346c <__fp_powser>
    35a2:	8b 01       	movw	r16, r22
    35a4:	be 01       	movw	r22, r28
    35a6:	ec 01       	movw	r28, r24
    35a8:	fb 2e       	mov	r15, r27
    35aa:	6f 57       	subi	r22, 0x7F	; 127
    35ac:	71 09       	sbc	r23, r1
    35ae:	75 95       	asr	r23
    35b0:	77 1f       	adc	r23, r23
    35b2:	88 0b       	sbc	r24, r24
    35b4:	99 0b       	sbc	r25, r25
    35b6:	0e 94 20 19 	call	0x3240	; 0x3240 <__floatsisf>
    35ba:	28 e1       	ldi	r18, 0x18	; 24
    35bc:	32 e7       	ldi	r19, 0x72	; 114
    35be:	41 e3       	ldi	r20, 0x31	; 49
    35c0:	5f e3       	ldi	r21, 0x3F	; 63
    35c2:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3x>
    35c6:	af 2d       	mov	r26, r15
    35c8:	98 01       	movw	r18, r16
    35ca:	ae 01       	movw	r20, r28
    35cc:	ff 90       	pop	r15
    35ce:	0f 91       	pop	r16
    35d0:	1f 91       	pop	r17
    35d2:	cf 91       	pop	r28
    35d4:	df 91       	pop	r29
    35d6:	0e 94 9a 18 	call	0x3134	; 0x3134 <__addsf3x>
    35da:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__fp_round>

000035de <modf>:
    35de:	fa 01       	movw	r30, r20
    35e0:	dc 01       	movw	r26, r24
    35e2:	aa 0f       	add	r26, r26
    35e4:	bb 1f       	adc	r27, r27
    35e6:	9b 01       	movw	r18, r22
    35e8:	ac 01       	movw	r20, r24
    35ea:	bf 57       	subi	r27, 0x7F	; 127
    35ec:	28 f4       	brcc	.+10     	; 0x35f8 <modf+0x1a>
    35ee:	22 27       	eor	r18, r18
    35f0:	33 27       	eor	r19, r19
    35f2:	44 27       	eor	r20, r20
    35f4:	50 78       	andi	r21, 0x80	; 128
    35f6:	20 c0       	rjmp	.+64     	; 0x3638 <modf+0x5a>
    35f8:	b7 51       	subi	r27, 0x17	; 23
    35fa:	90 f4       	brcc	.+36     	; 0x3620 <modf+0x42>
    35fc:	ab 2f       	mov	r26, r27
    35fe:	00 24       	eor	r0, r0
    3600:	46 95       	lsr	r20
    3602:	37 95       	ror	r19
    3604:	27 95       	ror	r18
    3606:	01 1c       	adc	r0, r1
    3608:	a3 95       	inc	r26
    360a:	d2 f3       	brmi	.-12     	; 0x3600 <modf+0x22>
    360c:	00 20       	and	r0, r0
    360e:	71 f0       	breq	.+28     	; 0x362c <modf+0x4e>
    3610:	22 0f       	add	r18, r18
    3612:	33 1f       	adc	r19, r19
    3614:	44 1f       	adc	r20, r20
    3616:	b3 95       	inc	r27
    3618:	da f3       	brmi	.-10     	; 0x3610 <modf+0x32>
    361a:	0e d0       	rcall	.+28     	; 0x3638 <modf+0x5a>
    361c:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__subsf3>
    3620:	61 30       	cpi	r22, 0x01	; 1
    3622:	71 05       	cpc	r23, r1
    3624:	a0 e8       	ldi	r26, 0x80	; 128
    3626:	8a 07       	cpc	r24, r26
    3628:	b9 46       	sbci	r27, 0x69	; 105
    362a:	30 f4       	brcc	.+12     	; 0x3638 <modf+0x5a>
    362c:	9b 01       	movw	r18, r22
    362e:	ac 01       	movw	r20, r24
    3630:	66 27       	eor	r22, r22
    3632:	77 27       	eor	r23, r23
    3634:	88 27       	eor	r24, r24
    3636:	90 78       	andi	r25, 0x80	; 128
    3638:	30 96       	adiw	r30, 0x00	; 0
    363a:	21 f0       	breq	.+8      	; 0x3644 <modf+0x66>
    363c:	20 83       	st	Z, r18
    363e:	31 83       	std	Z+1, r19	; 0x01
    3640:	42 83       	std	Z+2, r20	; 0x02
    3642:	53 83       	std	Z+3, r21	; 0x03
    3644:	08 95       	ret

00003646 <__mulsf3>:
    3646:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3x>
    364a:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__fp_round>
    364e:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__fp_pscA>
    3652:	38 f0       	brcs	.+14     	; 0x3662 <__mulsf3+0x1c>
    3654:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fp_pscB>
    3658:	20 f0       	brcs	.+8      	; 0x3662 <__mulsf3+0x1c>
    365a:	95 23       	and	r25, r21
    365c:	11 f0       	breq	.+4      	; 0x3662 <__mulsf3+0x1c>
    365e:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__fp_inf>
    3662:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__fp_nan>
    3666:	11 24       	eor	r1, r1
    3668:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__fp_szero>

0000366c <__mulsf3x>:
    366c:	0e 94 83 19 	call	0x3306	; 0x3306 <__fp_split3>
    3670:	70 f3       	brcs	.-36     	; 0x364e <__mulsf3+0x8>

00003672 <__mulsf3_pse>:
    3672:	95 9f       	mul	r25, r21
    3674:	c1 f3       	breq	.-16     	; 0x3666 <__mulsf3+0x20>
    3676:	95 0f       	add	r25, r21
    3678:	50 e0       	ldi	r21, 0x00	; 0
    367a:	55 1f       	adc	r21, r21
    367c:	62 9f       	mul	r22, r18
    367e:	f0 01       	movw	r30, r0
    3680:	72 9f       	mul	r23, r18
    3682:	bb 27       	eor	r27, r27
    3684:	f0 0d       	add	r31, r0
    3686:	b1 1d       	adc	r27, r1
    3688:	63 9f       	mul	r22, r19
    368a:	aa 27       	eor	r26, r26
    368c:	f0 0d       	add	r31, r0
    368e:	b1 1d       	adc	r27, r1
    3690:	aa 1f       	adc	r26, r26
    3692:	64 9f       	mul	r22, r20
    3694:	66 27       	eor	r22, r22
    3696:	b0 0d       	add	r27, r0
    3698:	a1 1d       	adc	r26, r1
    369a:	66 1f       	adc	r22, r22
    369c:	82 9f       	mul	r24, r18
    369e:	22 27       	eor	r18, r18
    36a0:	b0 0d       	add	r27, r0
    36a2:	a1 1d       	adc	r26, r1
    36a4:	62 1f       	adc	r22, r18
    36a6:	73 9f       	mul	r23, r19
    36a8:	b0 0d       	add	r27, r0
    36aa:	a1 1d       	adc	r26, r1
    36ac:	62 1f       	adc	r22, r18
    36ae:	83 9f       	mul	r24, r19
    36b0:	a0 0d       	add	r26, r0
    36b2:	61 1d       	adc	r22, r1
    36b4:	22 1f       	adc	r18, r18
    36b6:	74 9f       	mul	r23, r20
    36b8:	33 27       	eor	r19, r19
    36ba:	a0 0d       	add	r26, r0
    36bc:	61 1d       	adc	r22, r1
    36be:	23 1f       	adc	r18, r19
    36c0:	84 9f       	mul	r24, r20
    36c2:	60 0d       	add	r22, r0
    36c4:	21 1d       	adc	r18, r1
    36c6:	82 2f       	mov	r24, r18
    36c8:	76 2f       	mov	r23, r22
    36ca:	6a 2f       	mov	r22, r26
    36cc:	11 24       	eor	r1, r1
    36ce:	9f 57       	subi	r25, 0x7F	; 127
    36d0:	50 40       	sbci	r21, 0x00	; 0
    36d2:	9a f0       	brmi	.+38     	; 0x36fa <__mulsf3_pse+0x88>
    36d4:	f1 f0       	breq	.+60     	; 0x3712 <__mulsf3_pse+0xa0>
    36d6:	88 23       	and	r24, r24
    36d8:	4a f0       	brmi	.+18     	; 0x36ec <__mulsf3_pse+0x7a>
    36da:	ee 0f       	add	r30, r30
    36dc:	ff 1f       	adc	r31, r31
    36de:	bb 1f       	adc	r27, r27
    36e0:	66 1f       	adc	r22, r22
    36e2:	77 1f       	adc	r23, r23
    36e4:	88 1f       	adc	r24, r24
    36e6:	91 50       	subi	r25, 0x01	; 1
    36e8:	50 40       	sbci	r21, 0x00	; 0
    36ea:	a9 f7       	brne	.-22     	; 0x36d6 <__mulsf3_pse+0x64>
    36ec:	9e 3f       	cpi	r25, 0xFE	; 254
    36ee:	51 05       	cpc	r21, r1
    36f0:	80 f0       	brcs	.+32     	; 0x3712 <__mulsf3_pse+0xa0>
    36f2:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__fp_inf>
    36f6:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__fp_szero>
    36fa:	5f 3f       	cpi	r21, 0xFF	; 255
    36fc:	e4 f3       	brlt	.-8      	; 0x36f6 <__mulsf3_pse+0x84>
    36fe:	98 3e       	cpi	r25, 0xE8	; 232
    3700:	d4 f3       	brlt	.-12     	; 0x36f6 <__mulsf3_pse+0x84>
    3702:	86 95       	lsr	r24
    3704:	77 95       	ror	r23
    3706:	67 95       	ror	r22
    3708:	b7 95       	ror	r27
    370a:	f7 95       	ror	r31
    370c:	e7 95       	ror	r30
    370e:	9f 5f       	subi	r25, 0xFF	; 255
    3710:	c1 f7       	brne	.-16     	; 0x3702 <__mulsf3_pse+0x90>
    3712:	fe 2b       	or	r31, r30
    3714:	88 0f       	add	r24, r24
    3716:	91 1d       	adc	r25, r1
    3718:	96 95       	lsr	r25
    371a:	87 95       	ror	r24
    371c:	97 f9       	bld	r25, 7
    371e:	08 95       	ret

00003720 <__divsf3>:
    3720:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__divsf3x>
    3724:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__fp_round>
    3728:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fp_pscB>
    372c:	58 f0       	brcs	.+22     	; 0x3744 <__divsf3+0x24>
    372e:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__fp_pscA>
    3732:	40 f0       	brcs	.+16     	; 0x3744 <__divsf3+0x24>
    3734:	29 f4       	brne	.+10     	; 0x3740 <__divsf3+0x20>
    3736:	5f 3f       	cpi	r21, 0xFF	; 255
    3738:	29 f0       	breq	.+10     	; 0x3744 <__divsf3+0x24>
    373a:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__fp_inf>
    373e:	51 11       	cpse	r21, r1
    3740:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__fp_szero>
    3744:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__fp_nan>

00003748 <__divsf3x>:
    3748:	0e 94 83 19 	call	0x3306	; 0x3306 <__fp_split3>
    374c:	68 f3       	brcs	.-38     	; 0x3728 <__divsf3+0x8>

0000374e <__divsf3_pse>:
    374e:	99 23       	and	r25, r25
    3750:	b1 f3       	breq	.-20     	; 0x373e <__divsf3+0x1e>
    3752:	55 23       	and	r21, r21
    3754:	91 f3       	breq	.-28     	; 0x373a <__divsf3+0x1a>
    3756:	95 1b       	sub	r25, r21
    3758:	55 0b       	sbc	r21, r21
    375a:	bb 27       	eor	r27, r27
    375c:	aa 27       	eor	r26, r26
    375e:	62 17       	cp	r22, r18
    3760:	73 07       	cpc	r23, r19
    3762:	84 07       	cpc	r24, r20
    3764:	38 f0       	brcs	.+14     	; 0x3774 <__divsf3_pse+0x26>
    3766:	9f 5f       	subi	r25, 0xFF	; 255
    3768:	5f 4f       	sbci	r21, 0xFF	; 255
    376a:	22 0f       	add	r18, r18
    376c:	33 1f       	adc	r19, r19
    376e:	44 1f       	adc	r20, r20
    3770:	aa 1f       	adc	r26, r26
    3772:	a9 f3       	breq	.-22     	; 0x375e <__divsf3_pse+0x10>
    3774:	35 d0       	rcall	.+106    	; 0x37e0 <__divsf3_pse+0x92>
    3776:	0e 2e       	mov	r0, r30
    3778:	3a f0       	brmi	.+14     	; 0x3788 <__divsf3_pse+0x3a>
    377a:	e0 e8       	ldi	r30, 0x80	; 128
    377c:	32 d0       	rcall	.+100    	; 0x37e2 <__divsf3_pse+0x94>
    377e:	91 50       	subi	r25, 0x01	; 1
    3780:	50 40       	sbci	r21, 0x00	; 0
    3782:	e6 95       	lsr	r30
    3784:	00 1c       	adc	r0, r0
    3786:	ca f7       	brpl	.-14     	; 0x377a <__divsf3_pse+0x2c>
    3788:	2b d0       	rcall	.+86     	; 0x37e0 <__divsf3_pse+0x92>
    378a:	fe 2f       	mov	r31, r30
    378c:	29 d0       	rcall	.+82     	; 0x37e0 <__divsf3_pse+0x92>
    378e:	66 0f       	add	r22, r22
    3790:	77 1f       	adc	r23, r23
    3792:	88 1f       	adc	r24, r24
    3794:	bb 1f       	adc	r27, r27
    3796:	26 17       	cp	r18, r22
    3798:	37 07       	cpc	r19, r23
    379a:	48 07       	cpc	r20, r24
    379c:	ab 07       	cpc	r26, r27
    379e:	b0 e8       	ldi	r27, 0x80	; 128
    37a0:	09 f0       	breq	.+2      	; 0x37a4 <__divsf3_pse+0x56>
    37a2:	bb 0b       	sbc	r27, r27
    37a4:	80 2d       	mov	r24, r0
    37a6:	bf 01       	movw	r22, r30
    37a8:	ff 27       	eor	r31, r31
    37aa:	93 58       	subi	r25, 0x83	; 131
    37ac:	5f 4f       	sbci	r21, 0xFF	; 255
    37ae:	3a f0       	brmi	.+14     	; 0x37be <__divsf3_pse+0x70>
    37b0:	9e 3f       	cpi	r25, 0xFE	; 254
    37b2:	51 05       	cpc	r21, r1
    37b4:	78 f0       	brcs	.+30     	; 0x37d4 <__divsf3_pse+0x86>
    37b6:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__fp_inf>
    37ba:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__fp_szero>
    37be:	5f 3f       	cpi	r21, 0xFF	; 255
    37c0:	e4 f3       	brlt	.-8      	; 0x37ba <__divsf3_pse+0x6c>
    37c2:	98 3e       	cpi	r25, 0xE8	; 232
    37c4:	d4 f3       	brlt	.-12     	; 0x37ba <__divsf3_pse+0x6c>
    37c6:	86 95       	lsr	r24
    37c8:	77 95       	ror	r23
    37ca:	67 95       	ror	r22
    37cc:	b7 95       	ror	r27
    37ce:	f7 95       	ror	r31
    37d0:	9f 5f       	subi	r25, 0xFF	; 255
    37d2:	c9 f7       	brne	.-14     	; 0x37c6 <__divsf3_pse+0x78>
    37d4:	88 0f       	add	r24, r24
    37d6:	91 1d       	adc	r25, r1
    37d8:	96 95       	lsr	r25
    37da:	87 95       	ror	r24
    37dc:	97 f9       	bld	r25, 7
    37de:	08 95       	ret
    37e0:	e1 e0       	ldi	r30, 0x01	; 1
    37e2:	66 0f       	add	r22, r22
    37e4:	77 1f       	adc	r23, r23
    37e6:	88 1f       	adc	r24, r24
    37e8:	bb 1f       	adc	r27, r27
    37ea:	62 17       	cp	r22, r18
    37ec:	73 07       	cpc	r23, r19
    37ee:	84 07       	cpc	r24, r20
    37f0:	ba 07       	cpc	r27, r26
    37f2:	20 f0       	brcs	.+8      	; 0x37fc <__divsf3_pse+0xae>
    37f4:	62 1b       	sub	r22, r18
    37f6:	73 0b       	sbc	r23, r19
    37f8:	84 0b       	sbc	r24, r20
    37fa:	ba 0b       	sbc	r27, r26
    37fc:	ee 1f       	adc	r30, r30
    37fe:	88 f7       	brcc	.-30     	; 0x37e2 <__divsf3_pse+0x94>
    3800:	e0 95       	com	r30
    3802:	08 95       	ret

00003804 <__fp_mpack>:
    3804:	9f 3f       	cpi	r25, 0xFF	; 255
    3806:	31 f0       	breq	.+12     	; 0x3814 <__fp_mpack_finite+0xc>

00003808 <__fp_mpack_finite>:
    3808:	91 50       	subi	r25, 0x01	; 1
    380a:	20 f4       	brcc	.+8      	; 0x3814 <__fp_mpack_finite+0xc>
    380c:	87 95       	ror	r24
    380e:	77 95       	ror	r23
    3810:	67 95       	ror	r22
    3812:	b7 95       	ror	r27
    3814:	88 0f       	add	r24, r24
    3816:	91 1d       	adc	r25, r1
    3818:	96 95       	lsr	r25
    381a:	87 95       	ror	r24
    381c:	97 f9       	bld	r25, 7
    381e:	08 95       	ret

00003820 <__udivmodsi4>:
    3820:	a1 e2       	ldi	r26, 0x21	; 33
    3822:	1a 2e       	mov	r1, r26
    3824:	aa 1b       	sub	r26, r26
    3826:	bb 1b       	sub	r27, r27
    3828:	fd 01       	movw	r30, r26
    382a:	0d c0       	rjmp	.+26     	; 0x3846 <__udivmodsi4_ep>

0000382c <__udivmodsi4_loop>:
    382c:	aa 1f       	adc	r26, r26
    382e:	bb 1f       	adc	r27, r27
    3830:	ee 1f       	adc	r30, r30
    3832:	ff 1f       	adc	r31, r31
    3834:	a2 17       	cp	r26, r18
    3836:	b3 07       	cpc	r27, r19
    3838:	e4 07       	cpc	r30, r20
    383a:	f5 07       	cpc	r31, r21
    383c:	20 f0       	brcs	.+8      	; 0x3846 <__udivmodsi4_ep>
    383e:	a2 1b       	sub	r26, r18
    3840:	b3 0b       	sbc	r27, r19
    3842:	e4 0b       	sbc	r30, r20
    3844:	f5 0b       	sbc	r31, r21

00003846 <__udivmodsi4_ep>:
    3846:	66 1f       	adc	r22, r22
    3848:	77 1f       	adc	r23, r23
    384a:	88 1f       	adc	r24, r24
    384c:	99 1f       	adc	r25, r25
    384e:	1a 94       	dec	r1
    3850:	69 f7       	brne	.-38     	; 0x382c <__udivmodsi4_loop>
    3852:	60 95       	com	r22
    3854:	70 95       	com	r23
    3856:	80 95       	com	r24
    3858:	90 95       	com	r25
    385a:	9b 01       	movw	r18, r22
    385c:	ac 01       	movw	r20, r24
    385e:	bd 01       	movw	r22, r26
    3860:	cf 01       	movw	r24, r30
    3862:	08 95       	ret

00003864 <malloc>:
    3864:	0f 93       	push	r16
    3866:	1f 93       	push	r17
    3868:	cf 93       	push	r28
    386a:	df 93       	push	r29
    386c:	82 30       	cpi	r24, 0x02	; 2
    386e:	91 05       	cpc	r25, r1
    3870:	10 f4       	brcc	.+4      	; 0x3876 <malloc+0x12>
    3872:	82 e0       	ldi	r24, 0x02	; 2
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <__flp>
    387a:	f0 91 2d 07 	lds	r31, 0x072D	; 0x80072d <__flp+0x1>
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	a0 e0       	ldi	r26, 0x00	; 0
    3884:	b0 e0       	ldi	r27, 0x00	; 0
    3886:	30 97       	sbiw	r30, 0x00	; 0
    3888:	19 f1       	breq	.+70     	; 0x38d0 <malloc+0x6c>
    388a:	40 81       	ld	r20, Z
    388c:	51 81       	ldd	r21, Z+1	; 0x01
    388e:	02 81       	ldd	r16, Z+2	; 0x02
    3890:	13 81       	ldd	r17, Z+3	; 0x03
    3892:	48 17       	cp	r20, r24
    3894:	59 07       	cpc	r21, r25
    3896:	c8 f0       	brcs	.+50     	; 0x38ca <malloc+0x66>
    3898:	84 17       	cp	r24, r20
    389a:	95 07       	cpc	r25, r21
    389c:	69 f4       	brne	.+26     	; 0x38b8 <malloc+0x54>
    389e:	10 97       	sbiw	r26, 0x00	; 0
    38a0:	31 f0       	breq	.+12     	; 0x38ae <malloc+0x4a>
    38a2:	12 96       	adiw	r26, 0x02	; 2
    38a4:	0c 93       	st	X, r16
    38a6:	12 97       	sbiw	r26, 0x02	; 2
    38a8:	13 96       	adiw	r26, 0x03	; 3
    38aa:	1c 93       	st	X, r17
    38ac:	27 c0       	rjmp	.+78     	; 0x38fc <malloc+0x98>
    38ae:	00 93 2c 07 	sts	0x072C, r16	; 0x80072c <__flp>
    38b2:	10 93 2d 07 	sts	0x072D, r17	; 0x80072d <__flp+0x1>
    38b6:	22 c0       	rjmp	.+68     	; 0x38fc <malloc+0x98>
    38b8:	21 15       	cp	r18, r1
    38ba:	31 05       	cpc	r19, r1
    38bc:	19 f0       	breq	.+6      	; 0x38c4 <malloc+0x60>
    38be:	42 17       	cp	r20, r18
    38c0:	53 07       	cpc	r21, r19
    38c2:	18 f4       	brcc	.+6      	; 0x38ca <malloc+0x66>
    38c4:	9a 01       	movw	r18, r20
    38c6:	bd 01       	movw	r22, r26
    38c8:	ef 01       	movw	r28, r30
    38ca:	df 01       	movw	r26, r30
    38cc:	f8 01       	movw	r30, r16
    38ce:	db cf       	rjmp	.-74     	; 0x3886 <malloc+0x22>
    38d0:	21 15       	cp	r18, r1
    38d2:	31 05       	cpc	r19, r1
    38d4:	f9 f0       	breq	.+62     	; 0x3914 <malloc+0xb0>
    38d6:	28 1b       	sub	r18, r24
    38d8:	39 0b       	sbc	r19, r25
    38da:	24 30       	cpi	r18, 0x04	; 4
    38dc:	31 05       	cpc	r19, r1
    38de:	80 f4       	brcc	.+32     	; 0x3900 <malloc+0x9c>
    38e0:	8a 81       	ldd	r24, Y+2	; 0x02
    38e2:	9b 81       	ldd	r25, Y+3	; 0x03
    38e4:	61 15       	cp	r22, r1
    38e6:	71 05       	cpc	r23, r1
    38e8:	21 f0       	breq	.+8      	; 0x38f2 <malloc+0x8e>
    38ea:	fb 01       	movw	r30, r22
    38ec:	93 83       	std	Z+3, r25	; 0x03
    38ee:	82 83       	std	Z+2, r24	; 0x02
    38f0:	04 c0       	rjmp	.+8      	; 0x38fa <malloc+0x96>
    38f2:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <__flp+0x1>
    38f6:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <__flp>
    38fa:	fe 01       	movw	r30, r28
    38fc:	32 96       	adiw	r30, 0x02	; 2
    38fe:	44 c0       	rjmp	.+136    	; 0x3988 <malloc+0x124>
    3900:	fe 01       	movw	r30, r28
    3902:	e2 0f       	add	r30, r18
    3904:	f3 1f       	adc	r31, r19
    3906:	81 93       	st	Z+, r24
    3908:	91 93       	st	Z+, r25
    390a:	22 50       	subi	r18, 0x02	; 2
    390c:	31 09       	sbc	r19, r1
    390e:	39 83       	std	Y+1, r19	; 0x01
    3910:	28 83       	st	Y, r18
    3912:	3a c0       	rjmp	.+116    	; 0x3988 <malloc+0x124>
    3914:	20 91 2a 07 	lds	r18, 0x072A	; 0x80072a <__brkval>
    3918:	30 91 2b 07 	lds	r19, 0x072B	; 0x80072b <__brkval+0x1>
    391c:	23 2b       	or	r18, r19
    391e:	41 f4       	brne	.+16     	; 0x3930 <malloc+0xcc>
    3920:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3924:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3928:	30 93 2b 07 	sts	0x072B, r19	; 0x80072b <__brkval+0x1>
    392c:	20 93 2a 07 	sts	0x072A, r18	; 0x80072a <__brkval>
    3930:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3934:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3938:	21 15       	cp	r18, r1
    393a:	31 05       	cpc	r19, r1
    393c:	41 f4       	brne	.+16     	; 0x394e <malloc+0xea>
    393e:	2d b7       	in	r18, 0x3d	; 61
    3940:	3e b7       	in	r19, 0x3e	; 62
    3942:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3946:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    394a:	24 1b       	sub	r18, r20
    394c:	35 0b       	sbc	r19, r21
    394e:	e0 91 2a 07 	lds	r30, 0x072A	; 0x80072a <__brkval>
    3952:	f0 91 2b 07 	lds	r31, 0x072B	; 0x80072b <__brkval+0x1>
    3956:	e2 17       	cp	r30, r18
    3958:	f3 07       	cpc	r31, r19
    395a:	a0 f4       	brcc	.+40     	; 0x3984 <malloc+0x120>
    395c:	2e 1b       	sub	r18, r30
    395e:	3f 0b       	sbc	r19, r31
    3960:	28 17       	cp	r18, r24
    3962:	39 07       	cpc	r19, r25
    3964:	78 f0       	brcs	.+30     	; 0x3984 <malloc+0x120>
    3966:	ac 01       	movw	r20, r24
    3968:	4e 5f       	subi	r20, 0xFE	; 254
    396a:	5f 4f       	sbci	r21, 0xFF	; 255
    396c:	24 17       	cp	r18, r20
    396e:	35 07       	cpc	r19, r21
    3970:	48 f0       	brcs	.+18     	; 0x3984 <malloc+0x120>
    3972:	4e 0f       	add	r20, r30
    3974:	5f 1f       	adc	r21, r31
    3976:	50 93 2b 07 	sts	0x072B, r21	; 0x80072b <__brkval+0x1>
    397a:	40 93 2a 07 	sts	0x072A, r20	; 0x80072a <__brkval>
    397e:	81 93       	st	Z+, r24
    3980:	91 93       	st	Z+, r25
    3982:	02 c0       	rjmp	.+4      	; 0x3988 <malloc+0x124>
    3984:	e0 e0       	ldi	r30, 0x00	; 0
    3986:	f0 e0       	ldi	r31, 0x00	; 0
    3988:	cf 01       	movw	r24, r30
    398a:	df 91       	pop	r29
    398c:	cf 91       	pop	r28
    398e:	1f 91       	pop	r17
    3990:	0f 91       	pop	r16
    3992:	08 95       	ret

00003994 <free>:
    3994:	cf 93       	push	r28
    3996:	df 93       	push	r29
    3998:	00 97       	sbiw	r24, 0x00	; 0
    399a:	09 f4       	brne	.+2      	; 0x399e <free+0xa>
    399c:	81 c0       	rjmp	.+258    	; 0x3aa0 <free+0x10c>
    399e:	fc 01       	movw	r30, r24
    39a0:	32 97       	sbiw	r30, 0x02	; 2
    39a2:	13 82       	std	Z+3, r1	; 0x03
    39a4:	12 82       	std	Z+2, r1	; 0x02
    39a6:	a0 91 2c 07 	lds	r26, 0x072C	; 0x80072c <__flp>
    39aa:	b0 91 2d 07 	lds	r27, 0x072D	; 0x80072d <__flp+0x1>
    39ae:	10 97       	sbiw	r26, 0x00	; 0
    39b0:	81 f4       	brne	.+32     	; 0x39d2 <free+0x3e>
    39b2:	20 81       	ld	r18, Z
    39b4:	31 81       	ldd	r19, Z+1	; 0x01
    39b6:	82 0f       	add	r24, r18
    39b8:	93 1f       	adc	r25, r19
    39ba:	20 91 2a 07 	lds	r18, 0x072A	; 0x80072a <__brkval>
    39be:	30 91 2b 07 	lds	r19, 0x072B	; 0x80072b <__brkval+0x1>
    39c2:	28 17       	cp	r18, r24
    39c4:	39 07       	cpc	r19, r25
    39c6:	51 f5       	brne	.+84     	; 0x3a1c <free+0x88>
    39c8:	f0 93 2b 07 	sts	0x072B, r31	; 0x80072b <__brkval+0x1>
    39cc:	e0 93 2a 07 	sts	0x072A, r30	; 0x80072a <__brkval>
    39d0:	67 c0       	rjmp	.+206    	; 0x3aa0 <free+0x10c>
    39d2:	ed 01       	movw	r28, r26
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	ce 17       	cp	r28, r30
    39da:	df 07       	cpc	r29, r31
    39dc:	40 f4       	brcc	.+16     	; 0x39ee <free+0x5a>
    39de:	4a 81       	ldd	r20, Y+2	; 0x02
    39e0:	5b 81       	ldd	r21, Y+3	; 0x03
    39e2:	9e 01       	movw	r18, r28
    39e4:	41 15       	cp	r20, r1
    39e6:	51 05       	cpc	r21, r1
    39e8:	f1 f0       	breq	.+60     	; 0x3a26 <free+0x92>
    39ea:	ea 01       	movw	r28, r20
    39ec:	f5 cf       	rjmp	.-22     	; 0x39d8 <free+0x44>
    39ee:	d3 83       	std	Z+3, r29	; 0x03
    39f0:	c2 83       	std	Z+2, r28	; 0x02
    39f2:	40 81       	ld	r20, Z
    39f4:	51 81       	ldd	r21, Z+1	; 0x01
    39f6:	84 0f       	add	r24, r20
    39f8:	95 1f       	adc	r25, r21
    39fa:	c8 17       	cp	r28, r24
    39fc:	d9 07       	cpc	r29, r25
    39fe:	59 f4       	brne	.+22     	; 0x3a16 <free+0x82>
    3a00:	88 81       	ld	r24, Y
    3a02:	99 81       	ldd	r25, Y+1	; 0x01
    3a04:	84 0f       	add	r24, r20
    3a06:	95 1f       	adc	r25, r21
    3a08:	02 96       	adiw	r24, 0x02	; 2
    3a0a:	91 83       	std	Z+1, r25	; 0x01
    3a0c:	80 83       	st	Z, r24
    3a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a10:	9b 81       	ldd	r25, Y+3	; 0x03
    3a12:	93 83       	std	Z+3, r25	; 0x03
    3a14:	82 83       	std	Z+2, r24	; 0x02
    3a16:	21 15       	cp	r18, r1
    3a18:	31 05       	cpc	r19, r1
    3a1a:	29 f4       	brne	.+10     	; 0x3a26 <free+0x92>
    3a1c:	f0 93 2d 07 	sts	0x072D, r31	; 0x80072d <__flp+0x1>
    3a20:	e0 93 2c 07 	sts	0x072C, r30	; 0x80072c <__flp>
    3a24:	3d c0       	rjmp	.+122    	; 0x3aa0 <free+0x10c>
    3a26:	e9 01       	movw	r28, r18
    3a28:	fb 83       	std	Y+3, r31	; 0x03
    3a2a:	ea 83       	std	Y+2, r30	; 0x02
    3a2c:	49 91       	ld	r20, Y+
    3a2e:	59 91       	ld	r21, Y+
    3a30:	c4 0f       	add	r28, r20
    3a32:	d5 1f       	adc	r29, r21
    3a34:	ec 17       	cp	r30, r28
    3a36:	fd 07       	cpc	r31, r29
    3a38:	61 f4       	brne	.+24     	; 0x3a52 <free+0xbe>
    3a3a:	80 81       	ld	r24, Z
    3a3c:	91 81       	ldd	r25, Z+1	; 0x01
    3a3e:	84 0f       	add	r24, r20
    3a40:	95 1f       	adc	r25, r21
    3a42:	02 96       	adiw	r24, 0x02	; 2
    3a44:	e9 01       	movw	r28, r18
    3a46:	99 83       	std	Y+1, r25	; 0x01
    3a48:	88 83       	st	Y, r24
    3a4a:	82 81       	ldd	r24, Z+2	; 0x02
    3a4c:	93 81       	ldd	r25, Z+3	; 0x03
    3a4e:	9b 83       	std	Y+3, r25	; 0x03
    3a50:	8a 83       	std	Y+2, r24	; 0x02
    3a52:	e0 e0       	ldi	r30, 0x00	; 0
    3a54:	f0 e0       	ldi	r31, 0x00	; 0
    3a56:	12 96       	adiw	r26, 0x02	; 2
    3a58:	8d 91       	ld	r24, X+
    3a5a:	9c 91       	ld	r25, X
    3a5c:	13 97       	sbiw	r26, 0x03	; 3
    3a5e:	00 97       	sbiw	r24, 0x00	; 0
    3a60:	19 f0       	breq	.+6      	; 0x3a68 <free+0xd4>
    3a62:	fd 01       	movw	r30, r26
    3a64:	dc 01       	movw	r26, r24
    3a66:	f7 cf       	rjmp	.-18     	; 0x3a56 <free+0xc2>
    3a68:	8d 91       	ld	r24, X+
    3a6a:	9c 91       	ld	r25, X
    3a6c:	11 97       	sbiw	r26, 0x01	; 1
    3a6e:	9d 01       	movw	r18, r26
    3a70:	2e 5f       	subi	r18, 0xFE	; 254
    3a72:	3f 4f       	sbci	r19, 0xFF	; 255
    3a74:	82 0f       	add	r24, r18
    3a76:	93 1f       	adc	r25, r19
    3a78:	20 91 2a 07 	lds	r18, 0x072A	; 0x80072a <__brkval>
    3a7c:	30 91 2b 07 	lds	r19, 0x072B	; 0x80072b <__brkval+0x1>
    3a80:	28 17       	cp	r18, r24
    3a82:	39 07       	cpc	r19, r25
    3a84:	69 f4       	brne	.+26     	; 0x3aa0 <free+0x10c>
    3a86:	30 97       	sbiw	r30, 0x00	; 0
    3a88:	29 f4       	brne	.+10     	; 0x3a94 <free+0x100>
    3a8a:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <__flp+0x1>
    3a8e:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <__flp>
    3a92:	02 c0       	rjmp	.+4      	; 0x3a98 <free+0x104>
    3a94:	13 82       	std	Z+3, r1	; 0x03
    3a96:	12 82       	std	Z+2, r1	; 0x02
    3a98:	b0 93 2b 07 	sts	0x072B, r27	; 0x80072b <__brkval+0x1>
    3a9c:	a0 93 2a 07 	sts	0x072A, r26	; 0x80072a <__brkval>
    3aa0:	df 91       	pop	r29
    3aa2:	cf 91       	pop	r28
    3aa4:	08 95       	ret

00003aa6 <memcpy>:
    3aa6:	fb 01       	movw	r30, r22
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	02 c0       	rjmp	.+4      	; 0x3ab0 <memcpy+0xa>
    3aac:	01 90       	ld	r0, Z+
    3aae:	0d 92       	st	X+, r0
    3ab0:	41 50       	subi	r20, 0x01	; 1
    3ab2:	50 40       	sbci	r21, 0x00	; 0
    3ab4:	d8 f7       	brcc	.-10     	; 0x3aac <memcpy+0x6>
    3ab6:	08 95       	ret

00003ab8 <memset>:
    3ab8:	dc 01       	movw	r26, r24
    3aba:	01 c0       	rjmp	.+2      	; 0x3abe <memset+0x6>
    3abc:	6d 93       	st	X+, r22
    3abe:	41 50       	subi	r20, 0x01	; 1
    3ac0:	50 40       	sbci	r21, 0x00	; 0
    3ac2:	e0 f7       	brcc	.-8      	; 0x3abc <memset+0x4>
    3ac4:	08 95       	ret

00003ac6 <_exit>:
    3ac6:	f8 94       	cli

00003ac8 <__stop_program>:
    3ac8:	ff cf       	rjmp	.-2      	; 0x3ac8 <__stop_program>
