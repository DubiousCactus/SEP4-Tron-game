
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00003d96  00003e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ec  00800150  00800150  00003e7a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003e7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003eac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e8  00000000  00000000  00003eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000414d  00000000  00000000  000043d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001278  00000000  00000000  00008521  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037f8  00000000  00000000  00009799  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001370  00000000  00000000  0000cf94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c80  00000000  00000000  0000e304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002978  00000000  00000000  0000ff84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  000128fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__ctors_end>
       4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      34:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <__vector_13>
      38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      40:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__vector_16>
      44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      50:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__vector_20>
      54:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__vector_21>
      58:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      5c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      60:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      64:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      68:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      6c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      70:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__vector_28>
      74:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__vector_29>
      78:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	08 00       	.word	0x0008	; ????
      a6:	00 00       	nop
      a8:	be 92       	st	-X, r11
      aa:	24 49       	sbci	r18, 0x94	; 148
      ac:	12 3e       	cpi	r17, 0xE2	; 226
      ae:	ab aa       	std	Y+51, r10	; 0x33
      b0:	aa 2a       	or	r10, r26
      b2:	be cd       	rjmp	.-1156   	; 0xfffffc30 <__eeprom_end+0xff7efc30>
      b4:	cc cc       	rjmp	.-1640   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
      b6:	4c 3e       	cpi	r20, 0xEC	; 236
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	be ab       	std	Y+54, r27	; 0x36
      be:	aa aa       	std	Y+50, r10	; 0x32
      c0:	aa 3e       	cpi	r26, 0xEA	; 234
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	bf 00       	.word	0x00bf	; ????
      c8:	00 00       	nop
      ca:	80 3f       	cpi	r24, 0xF0	; 240
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 08       	sbc	r0, r0
      d2:	41 78       	andi	r20, 0x81	; 129
      d4:	d3 bb       	out	0x13, r29	; 19
      d6:	43 87       	std	Z+11, r20	; 0x0b
      d8:	d1 13       	cpse	r29, r17
      da:	3d 19       	sub	r19, r13
      dc:	0e 3c       	cpi	r16, 0xCE	; 206
      de:	c3 bd       	out	0x23, r28	; 35
      e0:	42 82       	std	Z+2, r4	; 0x02
      e2:	ad 2b       	or	r26, r29
      e4:	3e 68       	ori	r19, 0x8E	; 142
      e6:	ec 82       	std	Y+4, r14	; 0x04
      e8:	76 be       	out	0x36, r7	; 54
      ea:	d9 8f       	std	Y+25, r29	; 0x19
      ec:	e1 a9       	ldd	r30, Z+49	; 0x31
      ee:	3e 4c       	sbci	r19, 0xCE	; 206
      f0:	80 ef       	ldi	r24, 0xF0	; 240
      f2:	ff be       	out	0x3f, r15	; 63
      f4:	01 c4       	rjmp	.+2050   	; 0x8f8 <prepare_shiftregister+0x2>
      f6:	ff 7f       	andi	r31, 0xFF	; 255
      f8:	3f 00       	.word	0x003f	; ????
      fa:	00 00       	nop
	...

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d8 e0       	ldi	r29, 0x08	; 8
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
     10a:	11 e0       	ldi	r17, 0x01	; 1
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	e6 e9       	ldi	r30, 0x96	; 150
     112:	fd e3       	ldi	r31, 0x3D	; 61
     114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x10>
     116:	05 90       	lpm	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	a0 35       	cpi	r26, 0x50	; 80
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0xc>

00000120 <__do_clear_bss>:
     120:	27 e0       	ldi	r18, 0x07	; 7
     122:	a0 e5       	ldi	r26, 0x50	; 80
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	ac 33       	cpi	r26, 0x3C	; 60
     12c:	b2 07       	cpc	r27, r18
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
     130:	0e 94 1b 05 	call	0xa36	; 0xa36 <main>
     134:	0c 94 c9 1e 	jmp	0x3d92	; 0x3d92 <_exit>

00000138 <__bad_interrupt>:
     138:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013c <make_frame>:
	vTaskDelete(NULL);
}

/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	2a 97       	sbiw	r28, 0x0a	; 10
     14a:	0f b6       	in	r0, 0x3f	; 63
     14c:	f8 94       	cli
     14e:	de bf       	out	0x3e, r29	; 62
     150:	0f be       	out	0x3f, r0	; 63
     152:	cd bf       	out	0x3d, r28	; 61
     154:	9a 87       	std	Y+10, r25	; 0x0a
     156:	89 87       	std	Y+9, r24	; 0x09
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     158:	1a 82       	std	Y+2, r1	; 0x02
     15a:	19 82       	std	Y+1, r1	; 0x01
     15c:	1a c0       	rjmp	.+52     	; 0x192 <make_frame+0x56>
			for (int i = 0; i < 14; i++) { //For each column
     15e:	1c 82       	std	Y+4, r1	; 0x04
     160:	1b 82       	std	Y+3, r1	; 0x03
     162:	0e c0       	rjmp	.+28     	; 0x180 <make_frame+0x44>
				frame_buffer[i]	= 0;
     164:	8b 81       	ldd	r24, Y+3	; 0x03
     166:	9c 81       	ldd	r25, Y+4	; 0x04
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	80 5b       	subi	r24, 0xB0	; 176
     16e:	9e 4f       	sbci	r25, 0xFE	; 254
     170:	fc 01       	movw	r30, r24
     172:	11 82       	std	Z+1, r1	; 0x01
     174:	10 82       	st	Z, r1
/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
			for (int i = 0; i < 14; i++) { //For each column
     176:	8b 81       	ldd	r24, Y+3	; 0x03
     178:	9c 81       	ldd	r25, Y+4	; 0x04
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	9c 83       	std	Y+4, r25	; 0x04
     17e:	8b 83       	std	Y+3, r24	; 0x03
     180:	8b 81       	ldd	r24, Y+3	; 0x03
     182:	9c 81       	ldd	r25, Y+4	; 0x04
     184:	0e 97       	sbiw	r24, 0x0e	; 14
     186:	74 f3       	brlt	.-36     	; 0x164 <make_frame+0x28>

/* TODO: protect frame_buffer with a mutex */
void make_frame(void *pvParameters)
{
	for(;;) {
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     188:	89 81       	ldd	r24, Y+1	; 0x01
     18a:	9a 81       	ldd	r25, Y+2	; 0x02
     18c:	01 96       	adiw	r24, 0x01	; 1
     18e:	9a 83       	std	Y+2, r25	; 0x02
     190:	89 83       	std	Y+1, r24	; 0x01
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	9a 81       	ldd	r25, Y+2	; 0x02
     196:	0a 97       	sbiw	r24, 0x0a	; 10
     198:	14 f3       	brlt	.-60     	; 0x15e <make_frame+0x22>
				frame_buffer[i]	= 0;
			}
		}

		/* Create frame from gameState */
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     19a:	1e 82       	std	Y+6, r1	; 0x06
     19c:	1d 82       	std	Y+5, r1	; 0x05
     19e:	65 c0       	rjmp	.+202    	; 0x26a <make_frame+0x12e>
			for (int i = 0; i < 14; i++) { //For each column
     1a0:	18 86       	std	Y+8, r1	; 0x08
     1a2:	1f 82       	std	Y+7, r1	; 0x07
     1a4:	58 c0       	rjmp	.+176    	; 0x256 <make_frame+0x11a>
				if (gameState[i][j] != 0) { //Add up
     1a6:	8f 81       	ldd	r24, Y+7	; 0x07
     1a8:	98 85       	ldd	r25, Y+8	; 0x08
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	9c 01       	movw	r18, r24
     1b0:	22 0f       	add	r18, r18
     1b2:	33 1f       	adc	r19, r19
     1b4:	22 0f       	add	r18, r18
     1b6:	33 1f       	adc	r19, r19
     1b8:	82 0f       	add	r24, r18
     1ba:	93 1f       	adc	r25, r19
     1bc:	2d 81       	ldd	r18, Y+5	; 0x05
     1be:	3e 81       	ldd	r19, Y+6	; 0x06
     1c0:	82 0f       	add	r24, r18
     1c2:	93 1f       	adc	r25, r19
     1c4:	88 0f       	add	r24, r24
     1c6:	99 1f       	adc	r25, r25
     1c8:	84 59       	subi	r24, 0x94	; 148
     1ca:	9e 4f       	sbci	r25, 0xFE	; 254
     1cc:	fc 01       	movw	r30, r24
     1ce:	80 81       	ld	r24, Z
     1d0:	91 81       	ldd	r25, Z+1	; 0x01
     1d2:	89 2b       	or	r24, r25
     1d4:	d9 f1       	breq	.+118    	; 0x24c <make_frame+0x110>
					frame_buffer[i]	+= (int) (pow(2,  j) + 0.5);
     1d6:	8f 81       	ldd	r24, Y+7	; 0x07
     1d8:	98 85       	ldd	r25, Y+8	; 0x08
     1da:	88 0f       	add	r24, r24
     1dc:	99 1f       	adc	r25, r25
     1de:	80 5b       	subi	r24, 0xB0	; 176
     1e0:	9e 4f       	sbci	r25, 0xFE	; 254
     1e2:	fc 01       	movw	r30, r24
     1e4:	00 81       	ld	r16, Z
     1e6:	11 81       	ldd	r17, Z+1	; 0x01
     1e8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ea:	9e 81       	ldd	r25, Y+6	; 0x06
     1ec:	09 2e       	mov	r0, r25
     1ee:	00 0c       	add	r0, r0
     1f0:	aa 0b       	sbc	r26, r26
     1f2:	bb 0b       	sbc	r27, r27
     1f4:	bc 01       	movw	r22, r24
     1f6:	cd 01       	movw	r24, r26
     1f8:	0e 94 86 1a 	call	0x350c	; 0x350c <__floatsisf>
     1fc:	dc 01       	movw	r26, r24
     1fe:	cb 01       	movw	r24, r22
     200:	9c 01       	movw	r18, r24
     202:	ad 01       	movw	r20, r26
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e4       	ldi	r25, 0x40	; 64
     20c:	0e 94 12 1b 	call	0x3624	; 0x3624 <pow>
     210:	dc 01       	movw	r26, r24
     212:	cb 01       	movw	r24, r22
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	5f e3       	ldi	r21, 0x3F	; 63
     21c:	bc 01       	movw	r22, r24
     21e:	cd 01       	movw	r24, r26
     220:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__addsf3>
     224:	dc 01       	movw	r26, r24
     226:	cb 01       	movw	r24, r22
     228:	bc 01       	movw	r22, r24
     22a:	cd 01       	movw	r24, r26
     22c:	0e 94 4e 1a 	call	0x349c	; 0x349c <__fixsfsi>
     230:	dc 01       	movw	r26, r24
     232:	cb 01       	movw	r24, r22
     234:	98 01       	movw	r18, r16
     236:	28 0f       	add	r18, r24
     238:	39 1f       	adc	r19, r25
     23a:	8f 81       	ldd	r24, Y+7	; 0x07
     23c:	98 85       	ldd	r25, Y+8	; 0x08
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	80 5b       	subi	r24, 0xB0	; 176
     244:	9e 4f       	sbci	r25, 0xFE	; 254
     246:	fc 01       	movw	r30, r24
     248:	31 83       	std	Z+1, r19	; 0x01
     24a:	20 83       	st	Z, r18
			}
		}

		/* Create frame from gameState */
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
			for (int i = 0; i < 14; i++) { //For each column
     24c:	8f 81       	ldd	r24, Y+7	; 0x07
     24e:	98 85       	ldd	r25, Y+8	; 0x08
     250:	01 96       	adiw	r24, 0x01	; 1
     252:	98 87       	std	Y+8, r25	; 0x08
     254:	8f 83       	std	Y+7, r24	; 0x07
     256:	8f 81       	ldd	r24, Y+7	; 0x07
     258:	98 85       	ldd	r25, Y+8	; 0x08
     25a:	0e 97       	sbiw	r24, 0x0e	; 14
     25c:	0c f4       	brge	.+2      	; 0x260 <make_frame+0x124>
     25e:	a3 cf       	rjmp	.-186    	; 0x1a6 <make_frame+0x6a>
				frame_buffer[i]	= 0;
			}
		}

		/* Create frame from gameState */
		for (int j = 0; j < 10; j++) { //Cumulate bits of each line
     260:	8d 81       	ldd	r24, Y+5	; 0x05
     262:	9e 81       	ldd	r25, Y+6	; 0x06
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	9e 83       	std	Y+6, r25	; 0x06
     268:	8d 83       	std	Y+5, r24	; 0x05
     26a:	8d 81       	ldd	r24, Y+5	; 0x05
     26c:	9e 81       	ldd	r25, Y+6	; 0x06
     26e:	0a 97       	sbiw	r24, 0x0a	; 10
     270:	0c f4       	brge	.+2      	; 0x274 <make_frame+0x138>
     272:	96 cf       	rjmp	.-212    	; 0x1a0 <make_frame+0x64>
					frame_buffer[i]	+= (int) (pow(2,  j) + 0.5);
				}
			}
		}

		vTaskDelay(50);
     274:	82 e3       	ldi	r24, 0x32	; 50
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 96 14 	call	0x292c	; 0x292c <vTaskDelay>
	}
     27c:	6d cf       	rjmp	.-294    	; 0x158 <make_frame+0x1c>

0000027e <die>:

	vTaskDelete(NULL);
}

void die()
{
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
	//TODO
	com_send_bytes("DEAD!\n", 6);
     286:	66 e0       	ldi	r22, 0x06	; 6
     288:	85 e1       	ldi	r24, 0x15	; 21
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 11 06 	call	0xc22	; 0xc22 <com_send_bytes>
}
     290:	00 00       	nop
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <move_player>:

void move_player(Position* player)
{
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	00 d0       	rcall	.+0      	; 0x29e <move_player+0x6>
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	9a 83       	std	Y+2, r25	; 0x02
     2a4:	89 83       	std	Y+1, r24	; 0x01
	switch ((*player).direction) {
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	9a 81       	ldd	r25, Y+2	; 0x02
     2aa:	fc 01       	movw	r30, r24
     2ac:	84 81       	ldd	r24, Z+4	; 0x04
     2ae:	88 2f       	mov	r24, r24
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	81 30       	cpi	r24, 0x01	; 1
     2b4:	91 05       	cpc	r25, r1
     2b6:	21 f1       	breq	.+72     	; 0x300 <move_player+0x68>
     2b8:	82 30       	cpi	r24, 0x02	; 2
     2ba:	91 05       	cpc	r25, r1
     2bc:	1c f4       	brge	.+6      	; 0x2c4 <move_player+0x2c>
     2be:	89 2b       	or	r24, r25
     2c0:	41 f0       	breq	.+16     	; 0x2d2 <move_player+0x3a>
		(*player).y++;
		break;
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     2c2:	65 c0       	rjmp	.+202    	; 0x38e <move_player+0xf6>
	com_send_bytes("DEAD!\n", 6);
}

void move_player(Position* player)
{
	switch ((*player).direction) {
     2c4:	82 30       	cpi	r24, 0x02	; 2
     2c6:	91 05       	cpc	r25, r1
     2c8:	81 f1       	breq	.+96     	; 0x32a <move_player+0x92>
     2ca:	03 97       	sbiw	r24, 0x03	; 3
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <move_player+0x38>
     2ce:	43 c0       	rjmp	.+134    	; 0x356 <move_player+0xbe>
		(*player).y++;
		break;
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     2d0:	5e c0       	rjmp	.+188    	; 0x38e <move_player+0xf6>

void move_player(Position* player)
{
	switch ((*player).direction) {
		case LEFT:
		if ((*player).x > 0)
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	9a 81       	ldd	r25, Y+2	; 0x02
     2d6:	fc 01       	movw	r30, r24
     2d8:	80 81       	ld	r24, Z
     2da:	91 81       	ldd	r25, Z+1	; 0x01
     2dc:	18 16       	cp	r1, r24
     2de:	19 06       	cpc	r1, r25
     2e0:	0c f0       	brlt	.+2      	; 0x2e4 <move_player+0x4c>
     2e2:	4e c0       	rjmp	.+156    	; 0x380 <move_player+0xe8>
		(*player).x--;
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	fc 01       	movw	r30, r24
     2ea:	80 81       	ld	r24, Z
     2ec:	91 81       	ldd	r25, Z+1	; 0x01
     2ee:	9c 01       	movw	r18, r24
     2f0:	21 50       	subi	r18, 0x01	; 1
     2f2:	31 09       	sbc	r19, r1
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	fc 01       	movw	r30, r24
     2fa:	31 83       	std	Z+1, r19	; 0x01
     2fc:	20 83       	st	Z, r18
		break;
     2fe:	40 c0       	rjmp	.+128    	; 0x380 <move_player+0xe8>
		case RIGHT:
		if ((*player).x < 14)
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	9a 81       	ldd	r25, Y+2	; 0x02
     304:	fc 01       	movw	r30, r24
     306:	80 81       	ld	r24, Z
     308:	91 81       	ldd	r25, Z+1	; 0x01
     30a:	0e 97       	sbiw	r24, 0x0e	; 14
     30c:	dc f5       	brge	.+118    	; 0x384 <move_player+0xec>
		(*player).x++;
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	9a 81       	ldd	r25, Y+2	; 0x02
     312:	fc 01       	movw	r30, r24
     314:	80 81       	ld	r24, Z
     316:	91 81       	ldd	r25, Z+1	; 0x01
     318:	9c 01       	movw	r18, r24
     31a:	2f 5f       	subi	r18, 0xFF	; 255
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	9a 81       	ldd	r25, Y+2	; 0x02
     322:	fc 01       	movw	r30, r24
     324:	31 83       	std	Z+1, r19	; 0x01
     326:	20 83       	st	Z, r18
		break;
     328:	2d c0       	rjmp	.+90     	; 0x384 <move_player+0xec>
		case UP:
		if ((*player).y > 0)
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	fc 01       	movw	r30, r24
     330:	82 81       	ldd	r24, Z+2	; 0x02
     332:	93 81       	ldd	r25, Z+3	; 0x03
     334:	18 16       	cp	r1, r24
     336:	19 06       	cpc	r1, r25
     338:	3c f5       	brge	.+78     	; 0x388 <move_player+0xf0>
		(*player).y--;
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	fc 01       	movw	r30, r24
     340:	82 81       	ldd	r24, Z+2	; 0x02
     342:	93 81       	ldd	r25, Z+3	; 0x03
     344:	9c 01       	movw	r18, r24
     346:	21 50       	subi	r18, 0x01	; 1
     348:	31 09       	sbc	r19, r1
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	9a 81       	ldd	r25, Y+2	; 0x02
     34e:	fc 01       	movw	r30, r24
     350:	33 83       	std	Z+3, r19	; 0x03
     352:	22 83       	std	Z+2, r18	; 0x02
		break;
     354:	19 c0       	rjmp	.+50     	; 0x388 <move_player+0xf0>
		case DOWN:
		if ((*player).y < 10)
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	9a 81       	ldd	r25, Y+2	; 0x02
     35a:	fc 01       	movw	r30, r24
     35c:	82 81       	ldd	r24, Z+2	; 0x02
     35e:	93 81       	ldd	r25, Z+3	; 0x03
     360:	0a 97       	sbiw	r24, 0x0a	; 10
     362:	a4 f4       	brge	.+40     	; 0x38c <move_player+0xf4>
		(*player).y++;
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	9a 81       	ldd	r25, Y+2	; 0x02
     368:	fc 01       	movw	r30, r24
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	9c 01       	movw	r18, r24
     370:	2f 5f       	subi	r18, 0xFF	; 255
     372:	3f 4f       	sbci	r19, 0xFF	; 255
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	9a 81       	ldd	r25, Y+2	; 0x02
     378:	fc 01       	movw	r30, r24
     37a:	33 83       	std	Z+3, r19	; 0x03
     37c:	22 83       	std	Z+2, r18	; 0x02
		break;
     37e:	06 c0       	rjmp	.+12     	; 0x38c <move_player+0xf4>
{
	switch ((*player).direction) {
		case LEFT:
		if ((*player).x > 0)
		(*player).x--;
		break;
     380:	00 00       	nop
     382:	05 c0       	rjmp	.+10     	; 0x38e <move_player+0xf6>
		case RIGHT:
		if ((*player).x < 14)
		(*player).x++;
		break;
     384:	00 00       	nop
     386:	03 c0       	rjmp	.+6      	; 0x38e <move_player+0xf6>
		case UP:
		if ((*player).y > 0)
		(*player).y--;
		break;
     388:	00 00       	nop
     38a:	01 c0       	rjmp	.+2      	; 0x38e <move_player+0xf6>
		case DOWN:
		if ((*player).y < 10)
		(*player).y++;
		break;
     38c:	00 00       	nop
	}

	//TODO: Figure out the front collision detection and death mechanism
}
     38e:	00 00       	nop
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <game_processing>:


/* TODO: protect gameState with a mutex */
void game_processing(void *pvParameters)
{
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	63 97       	sbiw	r28, 0x13	; 19
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	9b 8b       	std	Y+19, r25	; 0x13
     3b0:	8a 8b       	std	Y+18, r24	; 0x12
	/* Populate gameState from the players' positions and tracks:
	* Start at turn[i] to compare with turn[i - 1] for each player
	*/

	bool collision = false;
     3b2:	19 82       	std	Y+1, r1	; 0x01

	playerOne.x = 5;
     3b4:	85 e0       	ldi	r24, 0x05	; 5
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <playerOne+0x1>
     3bc:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <playerOne>
	playerOne.y = 5;
     3c0:	85 e0       	ldi	r24, 0x05	; 5
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <playerOne+0x3>
     3c8:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <playerOne+0x2>
	playerOne.direction = LEFT;
     3cc:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <playerOne+0x4>
	Turn turn0;
	turn0.x = 5;
     3d0:	85 e0       	ldi	r24, 0x05	; 5
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	9f 87       	std	Y+15, r25	; 0x0f
     3d6:	8e 87       	std	Y+14, r24	; 0x0e
	turn0.y = 5;
     3d8:	85 e0       	ldi	r24, 0x05	; 5
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	99 8b       	std	Y+17, r25	; 0x11
     3de:	88 8b       	std	Y+16, r24	; 0x10
	playerOne.turns[0] = turn0;
     3e0:	8e 85       	ldd	r24, Y+14	; 0x0e
     3e2:	9f 85       	ldd	r25, Y+15	; 0x0f
     3e4:	a8 89       	ldd	r26, Y+16	; 0x10
     3e6:	b9 89       	ldd	r27, Y+17	; 0x11
     3e8:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <playerOne+0x5>
     3ec:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <playerOne+0x6>
     3f0:	a0 93 8b 02 	sts	0x028B, r26	; 0x80028b <playerOne+0x7>
     3f4:	b0 93 8c 02 	sts	0x028C, r27	; 0x80028c <playerOne+0x8>

	playerTwo.x = 10;
     3f8:	8a e0       	ldi	r24, 0x0A	; 10
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <playerTwo+0x1>
     400:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <playerTwo>
	playerTwo.y = 5;
     404:	85 e0       	ldi	r24, 0x05	; 5
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <playerTwo+0x3>
     40c:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <playerTwo+0x2>
	playerTwo.direction = DOWN;
     410:	83 e0       	ldi	r24, 0x03	; 3
     412:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <playerTwo+0x4>

	for(;;) {


		while(!collision) {
     416:	49 c1       	rjmp	.+658    	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
			
			/* Erase player one */
			for (int i = 0; i < 14; i++)
     418:	1b 82       	std	Y+3, r1	; 0x03
     41a:	1a 82       	std	Y+2, r1	; 0x02
     41c:	3f c0       	rjmp	.+126    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
				for (int j = 0; j < 10; j++)
     41e:	1d 82       	std	Y+5, r1	; 0x05
     420:	1c 82       	std	Y+4, r1	; 0x04
     422:	33 c0       	rjmp	.+102    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
					if (gameState[i][j] == 1)
     424:	8a 81       	ldd	r24, Y+2	; 0x02
     426:	9b 81       	ldd	r25, Y+3	; 0x03
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	9c 01       	movw	r18, r24
     42e:	22 0f       	add	r18, r18
     430:	33 1f       	adc	r19, r19
     432:	22 0f       	add	r18, r18
     434:	33 1f       	adc	r19, r19
     436:	82 0f       	add	r24, r18
     438:	93 1f       	adc	r25, r19
     43a:	2c 81       	ldd	r18, Y+4	; 0x04
     43c:	3d 81       	ldd	r19, Y+5	; 0x05
     43e:	82 0f       	add	r24, r18
     440:	93 1f       	adc	r25, r19
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	84 59       	subi	r24, 0x94	; 148
     448:	9e 4f       	sbci	r25, 0xFE	; 254
     44a:	fc 01       	movw	r30, r24
     44c:	80 81       	ld	r24, Z
     44e:	91 81       	ldd	r25, Z+1	; 0x01
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	b1 f4       	brne	.+44     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
						gameState[i][j] = 0;
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	9b 81       	ldd	r25, Y+3	; 0x03
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	9c 01       	movw	r18, r24
     45e:	22 0f       	add	r18, r18
     460:	33 1f       	adc	r19, r19
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	82 0f       	add	r24, r18
     468:	93 1f       	adc	r25, r19
     46a:	2c 81       	ldd	r18, Y+4	; 0x04
     46c:	3d 81       	ldd	r19, Y+5	; 0x05
     46e:	82 0f       	add	r24, r18
     470:	93 1f       	adc	r25, r19
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	84 59       	subi	r24, 0x94	; 148
     478:	9e 4f       	sbci	r25, 0xFE	; 254
     47a:	fc 01       	movw	r30, r24
     47c:	11 82       	std	Z+1, r1	; 0x01
     47e:	10 82       	st	Z, r1

		while(!collision) {
			
			/* Erase player one */
			for (int i = 0; i < 14; i++)
				for (int j = 0; j < 10; j++)
     480:	8c 81       	ldd	r24, Y+4	; 0x04
     482:	9d 81       	ldd	r25, Y+5	; 0x05
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	9d 83       	std	Y+5, r25	; 0x05
     488:	8c 83       	std	Y+4, r24	; 0x04
     48a:	8c 81       	ldd	r24, Y+4	; 0x04
     48c:	9d 81       	ldd	r25, Y+5	; 0x05
     48e:	0a 97       	sbiw	r24, 0x0a	; 10
     490:	4c f2       	brlt	.-110    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>


		while(!collision) {
			
			/* Erase player one */
			for (int i = 0; i < 14; i++)
     492:	8a 81       	ldd	r24, Y+2	; 0x02
     494:	9b 81       	ldd	r25, Y+3	; 0x03
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	9b 83       	std	Y+3, r25	; 0x03
     49a:	8a 83       	std	Y+2, r24	; 0x02
     49c:	8a 81       	ldd	r24, Y+2	; 0x02
     49e:	9b 81       	ldd	r25, Y+3	; 0x03
     4a0:	0e 97       	sbiw	r24, 0x0e	; 14
     4a2:	0c f4       	brge	.+2      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4a4:	bc cf       	rjmp	.-136    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
					if (gameState[i][j] == 1)
						gameState[i][j] = 0;
			
			if ((sizeof(playerOne.turns) / sizeof(playerOne.turns[0])) < 2) { //Didn't turn yet !

				if (playerOne.x == playerOne.turns[0].x) { //Vertical line
     4a6:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <playerOne>
     4aa:	30 91 85 02 	lds	r19, 0x0285	; 0x800285 <playerOne+0x1>
     4ae:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <playerOne+0x5>
     4b2:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <playerOne+0x6>
     4b6:	28 17       	cp	r18, r24
     4b8:	39 07       	cpc	r19, r25
     4ba:	09 f0       	breq	.+2      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4bc:	4e c0       	rjmp	.+156    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>

					//Turn on LEDs for this line
					for (int j = playerOne.y; j <= playerOne.turns[0].y; j++) {
     4be:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <playerOne+0x2>
     4c2:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <playerOne+0x3>
     4c6:	9f 83       	std	Y+7, r25	; 0x07
     4c8:	8e 83       	std	Y+6, r24	; 0x06
     4ca:	3c c0       	rjmp	.+120    	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
						if (gameState[playerOne.turns[0].x][j] == 2) { //Collision with player two !!
     4cc:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <playerOne+0x5>
     4d0:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <playerOne+0x6>
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	9c 01       	movw	r18, r24
     4da:	22 0f       	add	r18, r18
     4dc:	33 1f       	adc	r19, r19
     4de:	22 0f       	add	r18, r18
     4e0:	33 1f       	adc	r19, r19
     4e2:	82 0f       	add	r24, r18
     4e4:	93 1f       	adc	r25, r19
     4e6:	2e 81       	ldd	r18, Y+6	; 0x06
     4e8:	3f 81       	ldd	r19, Y+7	; 0x07
     4ea:	82 0f       	add	r24, r18
     4ec:	93 1f       	adc	r25, r19
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	84 59       	subi	r24, 0x94	; 148
     4f4:	9e 4f       	sbci	r25, 0xFE	; 254
     4f6:	fc 01       	movw	r30, r24
     4f8:	80 81       	ld	r24, Z
     4fa:	91 81       	ldd	r25, Z+1	; 0x01
     4fc:	02 97       	sbiw	r24, 0x02	; 2
     4fe:	19 f4       	brne	.+6      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
							collision = 1;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	89 83       	std	Y+1, r24	; 0x01
     504:	1a c0       	rjmp	.+52     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
							} else {
							gameState[playerOne.turns[0].x][j] = 1;
     506:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <playerOne+0x5>
     50a:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <playerOne+0x6>
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	9c 01       	movw	r18, r24
     514:	22 0f       	add	r18, r18
     516:	33 1f       	adc	r19, r19
     518:	22 0f       	add	r18, r18
     51a:	33 1f       	adc	r19, r19
     51c:	82 0f       	add	r24, r18
     51e:	93 1f       	adc	r25, r19
     520:	2e 81       	ldd	r18, Y+6	; 0x06
     522:	3f 81       	ldd	r19, Y+7	; 0x07
     524:	82 0f       	add	r24, r18
     526:	93 1f       	adc	r25, r19
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	84 59       	subi	r24, 0x94	; 148
     52e:	9e 4f       	sbci	r25, 0xFE	; 254
     530:	21 e0       	ldi	r18, 0x01	; 1
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	fc 01       	movw	r30, r24
     536:	31 83       	std	Z+1, r19	; 0x01
     538:	20 83       	st	Z, r18
			if ((sizeof(playerOne.turns) / sizeof(playerOne.turns[0])) < 2) { //Didn't turn yet !

				if (playerOne.x == playerOne.turns[0].x) { //Vertical line

					//Turn on LEDs for this line
					for (int j = playerOne.y; j <= playerOne.turns[0].y; j++) {
     53a:	8e 81       	ldd	r24, Y+6	; 0x06
     53c:	9f 81       	ldd	r25, Y+7	; 0x07
     53e:	01 96       	adiw	r24, 0x01	; 1
     540:	9f 83       	std	Y+7, r25	; 0x07
     542:	8e 83       	std	Y+6, r24	; 0x06
     544:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <playerOne+0x7>
     548:	30 91 8c 02 	lds	r19, 0x028C	; 0x80028c <playerOne+0x8>
     54c:	8e 81       	ldd	r24, Y+6	; 0x06
     54e:	9f 81       	ldd	r25, Y+7	; 0x07
     550:	28 17       	cp	r18, r24
     552:	39 07       	cpc	r19, r25
     554:	0c f0       	brlt	.+2      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     556:	ba cf       	rjmp	.-140    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     558:	59 c0       	rjmp	.+178    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
							} else {
							gameState[playerOne.turns[0].x][j] = 1;
						}
					}

					} else if (playerOne.y == playerOne.turns[0].y) { //Horizontal line
     55a:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <playerOne+0x2>
     55e:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <playerOne+0x3>
     562:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <playerOne+0x7>
     566:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <playerOne+0x8>
     56a:	28 17       	cp	r18, r24
     56c:	39 07       	cpc	r19, r25
     56e:	09 f0       	breq	.+2      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     570:	4d c0       	rjmp	.+154    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
					
					for (int j = playerOne.x; j <= playerOne.turns[0].x; j++) {
     572:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <playerOne>
     576:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <playerOne+0x1>
     57a:	99 87       	std	Y+9, r25	; 0x09
     57c:	88 87       	std	Y+8, r24	; 0x08
     57e:	3c c0       	rjmp	.+120    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
						if (gameState[j][playerOne.turns[0].y] == 2) { //Collision with player two !!
     580:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <playerOne+0x7>
     584:	30 91 8c 02 	lds	r19, 0x028C	; 0x80028c <playerOne+0x8>
     588:	88 85       	ldd	r24, Y+8	; 0x08
     58a:	99 85       	ldd	r25, Y+9	; 0x09
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	ac 01       	movw	r20, r24
     592:	44 0f       	add	r20, r20
     594:	55 1f       	adc	r21, r21
     596:	44 0f       	add	r20, r20
     598:	55 1f       	adc	r21, r21
     59a:	84 0f       	add	r24, r20
     59c:	95 1f       	adc	r25, r21
     59e:	82 0f       	add	r24, r18
     5a0:	93 1f       	adc	r25, r19
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	84 59       	subi	r24, 0x94	; 148
     5a8:	9e 4f       	sbci	r25, 0xFE	; 254
     5aa:	fc 01       	movw	r30, r24
     5ac:	80 81       	ld	r24, Z
     5ae:	91 81       	ldd	r25, Z+1	; 0x01
     5b0:	02 97       	sbiw	r24, 0x02	; 2
     5b2:	19 f4       	brne	.+6      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
							collision = 1;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	89 83       	std	Y+1, r24	; 0x01
     5b8:	1a c0       	rjmp	.+52     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
							} else {
							gameState[j][playerOne.turns[0].y] = 1;
     5ba:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <playerOne+0x7>
     5be:	30 91 8c 02 	lds	r19, 0x028C	; 0x80028c <playerOne+0x8>
     5c2:	88 85       	ldd	r24, Y+8	; 0x08
     5c4:	99 85       	ldd	r25, Y+9	; 0x09
     5c6:	88 0f       	add	r24, r24
     5c8:	99 1f       	adc	r25, r25
     5ca:	ac 01       	movw	r20, r24
     5cc:	44 0f       	add	r20, r20
     5ce:	55 1f       	adc	r21, r21
     5d0:	44 0f       	add	r20, r20
     5d2:	55 1f       	adc	r21, r21
     5d4:	84 0f       	add	r24, r20
     5d6:	95 1f       	adc	r25, r21
     5d8:	82 0f       	add	r24, r18
     5da:	93 1f       	adc	r25, r19
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	84 59       	subi	r24, 0x94	; 148
     5e2:	9e 4f       	sbci	r25, 0xFE	; 254
     5e4:	21 e0       	ldi	r18, 0x01	; 1
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	fc 01       	movw	r30, r24
     5ea:	31 83       	std	Z+1, r19	; 0x01
     5ec:	20 83       	st	Z, r18
						}
					}

					} else if (playerOne.y == playerOne.turns[0].y) { //Horizontal line
					
					for (int j = playerOne.x; j <= playerOne.turns[0].x; j++) {
     5ee:	88 85       	ldd	r24, Y+8	; 0x08
     5f0:	99 85       	ldd	r25, Y+9	; 0x09
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	99 87       	std	Y+9, r25	; 0x09
     5f6:	88 87       	std	Y+8, r24	; 0x08
     5f8:	20 91 89 02 	lds	r18, 0x0289	; 0x800289 <playerOne+0x5>
     5fc:	30 91 8a 02 	lds	r19, 0x028A	; 0x80028a <playerOne+0x6>
     600:	88 85       	ldd	r24, Y+8	; 0x08
     602:	99 85       	ldd	r25, Y+9	; 0x09
     604:	28 17       	cp	r18, r24
     606:	39 07       	cpc	r19, r25
     608:	0c f0       	brlt	.+2      	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     60a:	ba cf       	rjmp	.-140    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
					}
				}
			}

			/* Erase player two */
			for (int i = 0; i < 14; i++)
     60c:	1b 86       	std	Y+11, r1	; 0x0b
     60e:	1a 86       	std	Y+10, r1	; 0x0a
     610:	3f c0       	rjmp	.+126    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
			for (int j = 0; j < 10; j++)
     612:	1d 86       	std	Y+13, r1	; 0x0d
     614:	1c 86       	std	Y+12, r1	; 0x0c
     616:	33 c0       	rjmp	.+102    	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
			if (gameState[i][j] == 2)
     618:	8a 85       	ldd	r24, Y+10	; 0x0a
     61a:	9b 85       	ldd	r25, Y+11	; 0x0b
     61c:	88 0f       	add	r24, r24
     61e:	99 1f       	adc	r25, r25
     620:	9c 01       	movw	r18, r24
     622:	22 0f       	add	r18, r18
     624:	33 1f       	adc	r19, r19
     626:	22 0f       	add	r18, r18
     628:	33 1f       	adc	r19, r19
     62a:	82 0f       	add	r24, r18
     62c:	93 1f       	adc	r25, r19
     62e:	2c 85       	ldd	r18, Y+12	; 0x0c
     630:	3d 85       	ldd	r19, Y+13	; 0x0d
     632:	82 0f       	add	r24, r18
     634:	93 1f       	adc	r25, r19
     636:	88 0f       	add	r24, r24
     638:	99 1f       	adc	r25, r25
     63a:	84 59       	subi	r24, 0x94	; 148
     63c:	9e 4f       	sbci	r25, 0xFE	; 254
     63e:	fc 01       	movw	r30, r24
     640:	80 81       	ld	r24, Z
     642:	91 81       	ldd	r25, Z+1	; 0x01
     644:	02 97       	sbiw	r24, 0x02	; 2
     646:	b1 f4       	brne	.+44     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
			gameState[i][j] = 0;
     648:	8a 85       	ldd	r24, Y+10	; 0x0a
     64a:	9b 85       	ldd	r25, Y+11	; 0x0b
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	9c 01       	movw	r18, r24
     652:	22 0f       	add	r18, r18
     654:	33 1f       	adc	r19, r19
     656:	22 0f       	add	r18, r18
     658:	33 1f       	adc	r19, r19
     65a:	82 0f       	add	r24, r18
     65c:	93 1f       	adc	r25, r19
     65e:	2c 85       	ldd	r18, Y+12	; 0x0c
     660:	3d 85       	ldd	r19, Y+13	; 0x0d
     662:	82 0f       	add	r24, r18
     664:	93 1f       	adc	r25, r19
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	84 59       	subi	r24, 0x94	; 148
     66c:	9e 4f       	sbci	r25, 0xFE	; 254
     66e:	fc 01       	movw	r30, r24
     670:	11 82       	std	Z+1, r1	; 0x01
     672:	10 82       	st	Z, r1
				}
			}

			/* Erase player two */
			for (int i = 0; i < 14; i++)
			for (int j = 0; j < 10; j++)
     674:	8c 85       	ldd	r24, Y+12	; 0x0c
     676:	9d 85       	ldd	r25, Y+13	; 0x0d
     678:	01 96       	adiw	r24, 0x01	; 1
     67a:	9d 87       	std	Y+13, r25	; 0x0d
     67c:	8c 87       	std	Y+12, r24	; 0x0c
     67e:	8c 85       	ldd	r24, Y+12	; 0x0c
     680:	9d 85       	ldd	r25, Y+13	; 0x0d
     682:	0a 97       	sbiw	r24, 0x0a	; 10
     684:	4c f2       	brlt	.-110    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
					}
				}
			}

			/* Erase player two */
			for (int i = 0; i < 14; i++)
     686:	8a 85       	ldd	r24, Y+10	; 0x0a
     688:	9b 85       	ldd	r25, Y+11	; 0x0b
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	9b 87       	std	Y+11, r25	; 0x0b
     68e:	8a 87       	std	Y+10, r24	; 0x0a
     690:	8a 85       	ldd	r24, Y+10	; 0x0a
     692:	9b 85       	ldd	r25, Y+11	; 0x0b
     694:	0e 97       	sbiw	r24, 0x0e	; 14
     696:	0c f4       	brge	.+2      	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
     698:	bc cf       	rjmp	.-136    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
			//}
			//}
			//}

			/* Move players in their current direction */
			move_player(&playerOne);
     69a:	84 e8       	ldi	r24, 0x84	; 132
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	0e 94 4c 01 	call	0x298	; 0x298 <move_player>
			//move_player(playerTwo);

			vTaskDelay(1000);
     6a2:	88 ee       	ldi	r24, 0xE8	; 232
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	0e 94 96 14 	call	0x292c	; 0x292c <vTaskDelay>
	playerTwo.direction = DOWN;

	for(;;) {


		while(!collision) {
     6aa:	99 81       	ldd	r25, Y+1	; 0x01
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	89 27       	eor	r24, r25
     6b0:	88 23       	and	r24, r24
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
     6b4:	b1 ce       	rjmp	.-670    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			//move_player(playerTwo);

			vTaskDelay(1000);
		}

		die();
     6b6:	0e 94 3f 01 	call	0x27e	; 0x27e <die>
	}
     6ba:	ad ce       	rjmp	.-678    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

000006bc <read_joystick>:

}


void read_joystick(void *pvParameters)
{
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	2c 97       	sbiw	r28, 0x0c	; 12
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	9c 87       	std	Y+12, r25	; 0x0c
     6d2:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t Left;
	uint8_t Up;
	uint8_t Down;
	uint8_t Pushed;
	Direction direction;
	uint8_t debounceCounter = 0;
     6d4:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t debounceThreshold = 15;
     6d6:	8f e0       	ldi	r24, 0x0F	; 15
     6d8:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t turnPlayer = 0;
     6da:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t isPressing = 0;
     6dc:	1c 82       	std	Y+4, r1	; 0x04

	for (;;) {
		/*Constantly checking joystick state*/
		Right	= !(PINC>>1 & 0x01);
     6de:	86 e2       	ldi	r24, 0x26	; 38
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	fc 01       	movw	r30, r24
     6e4:	80 81       	ld	r24, Z
     6e6:	86 95       	lsr	r24
     6e8:	88 2f       	mov	r24, r24
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	81 70       	andi	r24, 0x01	; 1
     6ee:	99 27       	eor	r25, r25
     6f0:	21 e0       	ldi	r18, 0x01	; 1
     6f2:	89 2b       	or	r24, r25
     6f4:	09 f0       	breq	.+2      	; 0x6f8 <read_joystick+0x3c>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	2e 83       	std	Y+6, r18	; 0x06
		Left	= !(PINC>>7 & 0x01);
     6fa:	86 e2       	ldi	r24, 0x26	; 38
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	fc 01       	movw	r30, r24
     700:	80 81       	ld	r24, Z
     702:	88 1f       	adc	r24, r24
     704:	88 27       	eor	r24, r24
     706:	88 1f       	adc	r24, r24
     708:	88 2f       	mov	r24, r24
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	81 70       	andi	r24, 0x01	; 1
     70e:	99 27       	eor	r25, r25
     710:	21 e0       	ldi	r18, 0x01	; 1
     712:	89 2b       	or	r24, r25
     714:	09 f0       	breq	.+2      	; 0x718 <read_joystick+0x5c>
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	2f 83       	std	Y+7, r18	; 0x07
		Up		= !(PINC>>6 & 0x01);
     71a:	86 e2       	ldi	r24, 0x26	; 38
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	fc 01       	movw	r30, r24
     720:	80 81       	ld	r24, Z
     722:	82 95       	swap	r24
     724:	86 95       	lsr	r24
     726:	86 95       	lsr	r24
     728:	83 70       	andi	r24, 0x03	; 3
     72a:	88 2f       	mov	r24, r24
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	81 70       	andi	r24, 0x01	; 1
     730:	99 27       	eor	r25, r25
     732:	21 e0       	ldi	r18, 0x01	; 1
     734:	89 2b       	or	r24, r25
     736:	09 f0       	breq	.+2      	; 0x73a <read_joystick+0x7e>
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	28 87       	std	Y+8, r18	; 0x08
		Down	= !(PINC>>0 & 0x01);
     73c:	86 e2       	ldi	r24, 0x26	; 38
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	fc 01       	movw	r30, r24
     742:	80 81       	ld	r24, Z
     744:	88 2f       	mov	r24, r24
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	81 70       	andi	r24, 0x01	; 1
     74a:	99 27       	eor	r25, r25
     74c:	21 e0       	ldi	r18, 0x01	; 1
     74e:	89 2b       	or	r24, r25
     750:	09 f0       	breq	.+2      	; 0x754 <read_joystick+0x98>
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	29 87       	std	Y+9, r18	; 0x09
		Pushed  = !(PIND>>3 & 0x01);
     756:	89 e2       	ldi	r24, 0x29	; 41
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	fc 01       	movw	r30, r24
     75c:	80 81       	ld	r24, Z
     75e:	86 95       	lsr	r24
     760:	86 95       	lsr	r24
     762:	86 95       	lsr	r24
     764:	88 2f       	mov	r24, r24
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	81 70       	andi	r24, 0x01	; 1
     76a:	99 27       	eor	r25, r25
     76c:	21 e0       	ldi	r18, 0x01	; 1
     76e:	89 2b       	or	r24, r25
     770:	09 f0       	breq	.+2      	; 0x774 <read_joystick+0xb8>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	2a 87       	std	Y+10, r18	; 0x0a

		if (Down){
     776:	89 85       	ldd	r24, Y+9	; 0x09
     778:	88 23       	and	r24, r24
     77a:	39 f0       	breq	.+14     	; 0x78a <read_joystick+0xce>
			direction = DOWN;
     77c:	83 e0       	ldi	r24, 0x03	; 3
     77e:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	8c 83       	std	Y+4, r24	; 0x04
     788:	23 c0       	rjmp	.+70     	; 0x7d0 <read_joystick+0x114>
		} else if (Right) {
     78a:	8e 81       	ldd	r24, Y+6	; 0x06
     78c:	88 23       	and	r24, r24
     78e:	39 f0       	breq	.+14     	; 0x79e <read_joystick+0xe2>
			direction = RIGHT;
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	8c 83       	std	Y+4, r24	; 0x04
     79c:	19 c0       	rjmp	.+50     	; 0x7d0 <read_joystick+0x114>
		} else if (Up) {
     79e:	88 85       	ldd	r24, Y+8	; 0x08
     7a0:	88 23       	and	r24, r24
     7a2:	39 f0       	breq	.+14     	; 0x7b2 <read_joystick+0xf6>
			direction = UP;
     7a4:	82 e0       	ldi	r24, 0x02	; 2
     7a6:	89 83       	std	Y+1, r24	; 0x01
			turnPlayer = 1;
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	8c 83       	std	Y+4, r24	; 0x04
     7b0:	0f c0       	rjmp	.+30     	; 0x7d0 <read_joystick+0x114>
		} else if (Left) {
     7b2:	8f 81       	ldd	r24, Y+7	; 0x07
     7b4:	88 23       	and	r24, r24
     7b6:	31 f0       	breq	.+12     	; 0x7c4 <read_joystick+0x108>
			direction = LEFT;
     7b8:	19 82       	std	Y+1, r1	; 0x01
			turnPlayer = 1;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	8b 83       	std	Y+3, r24	; 0x03
			isPressing = 1;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	8c 83       	std	Y+4, r24	; 0x04
     7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <read_joystick+0x114>
			} else if (Pushed) {
     7c4:	8a 85       	ldd	r24, Y+10	; 0x0a
     7c6:	88 23       	and	r24, r24
     7c8:	11 f0       	breq	.+4      	; 0x7ce <read_joystick+0x112>
			//TODO: pause game
			debounceCounter = 0;
     7ca:	1a 82       	std	Y+2, r1	; 0x02
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <read_joystick+0x114>
			} else {
			isPressing = 0;
     7ce:	1c 82       	std	Y+4, r1	; 0x04
			//debounceCounter = 0;
		}

		if (turnPlayer && !isPressing && (++debounceCounter >= debounceThreshold)) {
     7d0:	8b 81       	ldd	r24, Y+3	; 0x03
     7d2:	88 23       	and	r24, r24
     7d4:	c9 f0       	breq	.+50     	; 0x808 <read_joystick+0x14c>
     7d6:	8c 81       	ldd	r24, Y+4	; 0x04
     7d8:	88 23       	and	r24, r24
     7da:	b1 f4       	brne	.+44     	; 0x808 <read_joystick+0x14c>
     7dc:	8a 81       	ldd	r24, Y+2	; 0x02
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	8a 83       	std	Y+2, r24	; 0x02
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	8d 81       	ldd	r24, Y+5	; 0x05
     7e6:	98 17       	cp	r25, r24
     7e8:	78 f0       	brcs	.+30     	; 0x808 <read_joystick+0x14c>
			com_send_bytes("move", 4);
     7ea:	64 e0       	ldi	r22, 0x04	; 4
     7ec:	8c e1       	ldi	r24, 0x1C	; 28
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 11 06 	call	0xc22	; 0xc22 <com_send_bytes>
			turn_player(&playerOne, direction);
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	88 2f       	mov	r24, r24
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	bc 01       	movw	r22, r24
     7fc:	84 e8       	ldi	r24, 0x84	; 132
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	0e 94 09 04 	call	0x812	; 0x812 <turn_player>
			turnPlayer = 0;
     804:	1b 82       	std	Y+3, r1	; 0x03
			debounceCounter = 0;
     806:	1a 82       	std	Y+2, r1	; 0x02
		}
		vTaskDelay(20);
     808:	84 e1       	ldi	r24, 0x14	; 20
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 96 14 	call	0x292c	; 0x292c <vTaskDelay>
	}
     810:	66 cf       	rjmp	.-308    	; 0x6de <read_joystick+0x22>

00000812 <turn_player>:



/* Changes the player's direction: will be applied in game_processing() */
void turn_player(Position* player, Direction direction)
{
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	00 d0       	rcall	.+0      	; 0x818 <turn_player+0x6>
     818:	1f 92       	push	r1
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	9a 83       	std	Y+2, r25	; 0x02
     820:	89 83       	std	Y+1, r24	; 0x01
     822:	6b 83       	std	Y+3, r22	; 0x03

	switch (direction) {
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	88 2f       	mov	r24, r24
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	91 05       	cpc	r25, r1
     82e:	09 f4       	brne	.+2      	; 0x832 <turn_player+0x20>
     830:	42 c0       	rjmp	.+132    	; 0x8b6 <turn_player+0xa4>
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	91 05       	cpc	r25, r1
     836:	1c f4       	brge	.+6      	; 0x83e <turn_player+0x2c>
     838:	89 2b       	or	r24, r25
     83a:	59 f1       	breq	.+86     	; 0x892 <turn_player+0x80>
		case RIGHT:
		if ((*player).direction == UP || (*player).direction == DOWN)
		(*player).direction = direction;
		break;
	}
}
     83c:	55 c0       	rjmp	.+170    	; 0x8e8 <turn_player+0xd6>

/* Changes the player's direction: will be applied in game_processing() */
void turn_player(Position* player, Direction direction)
{

	switch (direction) {
     83e:	82 30       	cpi	r24, 0x02	; 2
     840:	91 05       	cpc	r25, r1
     842:	19 f0       	breq	.+6      	; 0x84a <turn_player+0x38>
     844:	03 97       	sbiw	r24, 0x03	; 3
     846:	99 f0       	breq	.+38     	; 0x86e <turn_player+0x5c>
		case RIGHT:
		if ((*player).direction == UP || (*player).direction == DOWN)
		(*player).direction = direction;
		break;
	}
}
     848:	4f c0       	rjmp	.+158    	; 0x8e8 <turn_player+0xd6>
void turn_player(Position* player, Direction direction)
{

	switch (direction) {
		case UP:
		if ((*player).direction == LEFT || (*player).direction == RIGHT)
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	9a 81       	ldd	r25, Y+2	; 0x02
     84e:	fc 01       	movw	r30, r24
     850:	84 81       	ldd	r24, Z+4	; 0x04
     852:	88 23       	and	r24, r24
     854:	31 f0       	breq	.+12     	; 0x862 <turn_player+0x50>
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	9a 81       	ldd	r25, Y+2	; 0x02
     85a:	fc 01       	movw	r30, r24
     85c:	84 81       	ldd	r24, Z+4	; 0x04
     85e:	81 30       	cpi	r24, 0x01	; 1
     860:	e1 f5       	brne	.+120    	; 0x8da <turn_player+0xc8>
		(*player).direction = direction;
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	9a 81       	ldd	r25, Y+2	; 0x02
     866:	2b 81       	ldd	r18, Y+3	; 0x03
     868:	fc 01       	movw	r30, r24
     86a:	24 83       	std	Z+4, r18	; 0x04
		break;
     86c:	36 c0       	rjmp	.+108    	; 0x8da <turn_player+0xc8>
		case DOWN:
		if ((*player).direction == LEFT || (*player).direction == RIGHT)
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	9a 81       	ldd	r25, Y+2	; 0x02
     872:	fc 01       	movw	r30, r24
     874:	84 81       	ldd	r24, Z+4	; 0x04
     876:	88 23       	and	r24, r24
     878:	31 f0       	breq	.+12     	; 0x886 <turn_player+0x74>
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	9a 81       	ldd	r25, Y+2	; 0x02
     87e:	fc 01       	movw	r30, r24
     880:	84 81       	ldd	r24, Z+4	; 0x04
     882:	81 30       	cpi	r24, 0x01	; 1
     884:	61 f5       	brne	.+88     	; 0x8de <turn_player+0xcc>
		(*player).direction = direction;
     886:	89 81       	ldd	r24, Y+1	; 0x01
     888:	9a 81       	ldd	r25, Y+2	; 0x02
     88a:	2b 81       	ldd	r18, Y+3	; 0x03
     88c:	fc 01       	movw	r30, r24
     88e:	24 83       	std	Z+4, r18	; 0x04
		break;
     890:	26 c0       	rjmp	.+76     	; 0x8de <turn_player+0xcc>
		case LEFT:
		if ((*player).direction == UP || (*player).direction == DOWN)
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	9a 81       	ldd	r25, Y+2	; 0x02
     896:	fc 01       	movw	r30, r24
     898:	84 81       	ldd	r24, Z+4	; 0x04
     89a:	82 30       	cpi	r24, 0x02	; 2
     89c:	31 f0       	breq	.+12     	; 0x8aa <turn_player+0x98>
     89e:	89 81       	ldd	r24, Y+1	; 0x01
     8a0:	9a 81       	ldd	r25, Y+2	; 0x02
     8a2:	fc 01       	movw	r30, r24
     8a4:	84 81       	ldd	r24, Z+4	; 0x04
     8a6:	83 30       	cpi	r24, 0x03	; 3
     8a8:	e1 f4       	brne	.+56     	; 0x8e2 <turn_player+0xd0>
		(*player).direction = direction;
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	9a 81       	ldd	r25, Y+2	; 0x02
     8ae:	2b 81       	ldd	r18, Y+3	; 0x03
     8b0:	fc 01       	movw	r30, r24
     8b2:	24 83       	std	Z+4, r18	; 0x04
		break;
     8b4:	16 c0       	rjmp	.+44     	; 0x8e2 <turn_player+0xd0>
		case RIGHT:
		if ((*player).direction == UP || (*player).direction == DOWN)
     8b6:	89 81       	ldd	r24, Y+1	; 0x01
     8b8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ba:	fc 01       	movw	r30, r24
     8bc:	84 81       	ldd	r24, Z+4	; 0x04
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	31 f0       	breq	.+12     	; 0x8ce <turn_player+0xbc>
     8c2:	89 81       	ldd	r24, Y+1	; 0x01
     8c4:	9a 81       	ldd	r25, Y+2	; 0x02
     8c6:	fc 01       	movw	r30, r24
     8c8:	84 81       	ldd	r24, Z+4	; 0x04
     8ca:	83 30       	cpi	r24, 0x03	; 3
     8cc:	61 f4       	brne	.+24     	; 0x8e6 <turn_player+0xd4>
		(*player).direction = direction;
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	9a 81       	ldd	r25, Y+2	; 0x02
     8d2:	2b 81       	ldd	r18, Y+3	; 0x03
     8d4:	fc 01       	movw	r30, r24
     8d6:	24 83       	std	Z+4, r18	; 0x04
		break;
     8d8:	06 c0       	rjmp	.+12     	; 0x8e6 <turn_player+0xd4>

	switch (direction) {
		case UP:
		if ((*player).direction == LEFT || (*player).direction == RIGHT)
		(*player).direction = direction;
		break;
     8da:	00 00       	nop
     8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <turn_player+0xd6>
		case DOWN:
		if ((*player).direction == LEFT || (*player).direction == RIGHT)
		(*player).direction = direction;
		break;
     8de:	00 00       	nop
     8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <turn_player+0xd6>
		case LEFT:
		if ((*player).direction == UP || (*player).direction == DOWN)
		(*player).direction = direction;
		break;
     8e2:	00 00       	nop
     8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <turn_player+0xd6>
		case RIGHT:
		if ((*player).direction == UP || (*player).direction == DOWN)
		(*player).direction = direction;
		break;
     8e6:	00 00       	nop
	}
}
     8e8:	00 00       	nop
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
	// Set SER to 1
	PORTD |= _BV(PORTD2);
     8fe:	8b e2       	ldi	r24, 0x2B	; 43
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	2b e2       	ldi	r18, 0x2B	; 43
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	f9 01       	movw	r30, r18
     908:	20 81       	ld	r18, Z
     90a:	24 60       	ori	r18, 0x04	; 4
     90c:	fc 01       	movw	r30, r24
     90e:	20 83       	st	Z, r18
}
     910:	00 00       	nop
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
	// one SCK pulse
	PORTD |= _BV(PORTD5);
     920:	8b e2       	ldi	r24, 0x2B	; 43
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	2b e2       	ldi	r18, 0x2B	; 43
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	f9 01       	movw	r30, r18
     92a:	20 81       	ld	r18, Z
     92c:	20 62       	ori	r18, 0x20	; 32
     92e:	fc 01       	movw	r30, r24
     930:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     932:	8b e2       	ldi	r24, 0x2B	; 43
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	2b e2       	ldi	r18, 0x2B	; 43
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	f9 01       	movw	r30, r18
     93c:	20 81       	ld	r18, Z
     93e:	2f 7d       	andi	r18, 0xDF	; 223
     940:	fc 01       	movw	r30, r24
     942:	20 83       	st	Z, r18
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
     944:	8b e2       	ldi	r24, 0x2B	; 43
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	2b e2       	ldi	r18, 0x2B	; 43
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	f9 01       	movw	r30, r18
     94e:	20 81       	ld	r18, Z
     950:	20 61       	ori	r18, 0x10	; 16
     952:	fc 01       	movw	r30, r24
     954:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     956:	8b e2       	ldi	r24, 0x2B	; 43
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	2b e2       	ldi	r18, 0x2B	; 43
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	f9 01       	movw	r30, r18
     960:	20 81       	ld	r18, Z
     962:	2f 7e       	andi	r18, 0xEF	; 239
     964:	fc 01       	movw	r30, r24
     966:	20 83       	st	Z, r18
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
     968:	8b e2       	ldi	r24, 0x2B	; 43
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	2b e2       	ldi	r18, 0x2B	; 43
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	f9 01       	movw	r30, r18
     972:	20 81       	ld	r18, Z
     974:	2b 7f       	andi	r18, 0xFB	; 251
     976:	fc 01       	movw	r30, r24
     978:	20 83       	st	Z, r18
}
     97a:	00 00       	nop
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <load_col_value>:

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	00 d0       	rcall	.+0      	; 0x988 <load_col_value+0x6>
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
     98c:	9a 83       	std	Y+2, r25	; 0x02
     98e:	89 83       	std	Y+1, r24	; 0x01
	PORTA = ~(col_value & 0xFF);
     990:	82 e2       	ldi	r24, 0x22	; 34
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	29 81       	ldd	r18, Y+1	; 0x01
     996:	20 95       	com	r18
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     99c:	85 e2       	ldi	r24, 0x25	; 37
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	25 e2       	ldi	r18, 0x25	; 37
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	f9 01       	movw	r30, r18
     9a6:	20 81       	ld	r18, Z
     9a8:	23 60       	ori	r18, 0x03	; 3
     9aa:	fc 01       	movw	r30, r24
     9ac:	20 83       	st	Z, r18
	PORTB &= ~((col_value >> 8) & 0x03);
     9ae:	85 e2       	ldi	r24, 0x25	; 37
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	25 e2       	ldi	r18, 0x25	; 37
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	f9 01       	movw	r30, r18
     9b8:	40 81       	ld	r20, Z
     9ba:	29 81       	ldd	r18, Y+1	; 0x01
     9bc:	3a 81       	ldd	r19, Y+2	; 0x02
     9be:	23 2f       	mov	r18, r19
     9c0:	33 27       	eor	r19, r19
     9c2:	23 70       	andi	r18, 0x03	; 3
     9c4:	20 95       	com	r18
     9c6:	24 23       	and	r18, r20
     9c8:	fc 01       	movw	r30, r24
     9ca:	20 83       	st	Z, r18
}
     9cc:	00 00       	nop
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <handle_display>:

//-----------------------------------------
void handle_display(void)
{
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
	static uint8_t col = 0;
	
	if (col == 0)
     9e0:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <col.2827>
     9e4:	88 23       	and	r24, r24
     9e6:	11 f4       	brne	.+4      	; 0x9ec <handle_display+0x14>
	prepare_shiftregister();
     9e8:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <prepare_shiftregister>
	
	load_col_value(frame_buffer[col]);
     9ec:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <col.2827>
     9f0:	88 2f       	mov	r24, r24
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	88 0f       	add	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	80 5b       	subi	r24, 0xB0	; 176
     9fa:	9e 4f       	sbci	r25, 0xFE	; 254
     9fc:	fc 01       	movw	r30, r24
     9fe:	80 81       	ld	r24, Z
     a00:	91 81       	ldd	r25, Z+1	; 0x01
     a02:	0e 94 c1 04 	call	0x982	; 0x982 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     a06:	0e 94 8c 04 	call	0x918	; 0x918 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	if (col++ > 13)
     a0a:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <col.2827>
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	98 0f       	add	r25, r24
     a12:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <col.2827>
     a16:	8e 30       	cpi	r24, 0x0E	; 14
     a18:	10 f0       	brcs	.+4      	; 0xa1e <handle_display+0x46>
	col = 0;
     a1a:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <col.2827>
}
     a1e:	00 00       	nop
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
	//
}
     a2e:	00 00       	nop
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <main>:

//-----------------------------------------
int main(void)
{
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	0f 93       	push	r16
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	00 d0       	rcall	.+0      	; 0xa42 <main+0xc>
     a42:	1f 92       	push	r1
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     a48:	0e 94 2b 06 	call	0xc56	; 0xc56 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     a4c:	8b e2       	ldi	r24, 0x2B	; 43
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	2b e2       	ldi	r18, 0x2B	; 43
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	f9 01       	movw	r30, r18
     a56:	20 81       	ld	r18, Z
     a58:	2f 7b       	andi	r18, 0xBF	; 191
     a5a:	fc 01       	movw	r30, r24
     a5c:	20 83       	st	Z, r18

	/* Semaphores creation */
	xGameStateSemaphore = xSemaphoreCreateMutex();
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	0e 94 39 10 	call	0x2072	; 0x2072 <xQueueCreateMutex>
     a64:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <xGameStateSemaphore+0x1>
     a68:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <xGameStateSemaphore>
	xPlayerOneSemaphore = xSemaphoreCreateMutex();
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	0e 94 39 10 	call	0x2072	; 0x2072 <xQueueCreateMutex>
     a72:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <xPlayerOneSemaphore+0x1>
     a76:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <xPlayerOneSemaphore>
	xPlayerTwoSemaphore = xSemaphoreCreateMutex();
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	0e 94 39 10 	call	0x2072	; 0x2072 <xQueueCreateMutex>
     a80:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <xPlayerTwoSemaphore+0x1>
     a84:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <xPlayerTwoSemaphore>
	xGameOverSemaphore = xSemaphoreCreateMutex();
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	0e 94 39 10 	call	0x2072	; 0x2072 <xQueueCreateMutex>
     a8e:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <xGameOverSemaphore+0x1>
     a92:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <xGameOverSemaphore>

	BaseType_t taskReadJoystick = xTaskCreate(read_joystick, (const char*)"Read joystick", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     a96:	e1 2c       	mov	r14, r1
     a98:	f1 2c       	mov	r15, r1
     a9a:	00 e0       	ldi	r16, 0x00	; 0
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	45 e5       	ldi	r20, 0x55	; 85
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	61 e2       	ldi	r22, 0x21	; 33
     aa6:	71 e0       	ldi	r23, 0x01	; 1
     aa8:	8e e5       	ldi	r24, 0x5E	; 94
     aaa:	93 e0       	ldi	r25, 0x03	; 3
     aac:	0e 94 b9 12 	call	0x2572	; 0x2572 <xTaskCreate>
     ab0:	89 83       	std	Y+1, r24	; 0x01
	BaseType_t taskGameProcessing = xTaskCreate(game_processing, (const char*)"Game processing", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     ab2:	e1 2c       	mov	r14, r1
     ab4:	f1 2c       	mov	r15, r1
     ab6:	00 e0       	ldi	r16, 0x00	; 0
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	45 e5       	ldi	r20, 0x55	; 85
     abe:	50 e0       	ldi	r21, 0x00	; 0
     ac0:	6f e2       	ldi	r22, 0x2F	; 47
     ac2:	71 e0       	ldi	r23, 0x01	; 1
     ac4:	8d ec       	ldi	r24, 0xCD	; 205
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	0e 94 b9 12 	call	0x2572	; 0x2572 <xTaskCreate>
     acc:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t taskMakeFrame = xTaskCreate(make_frame, (const char*)"Make frame", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL );
     ace:	e1 2c       	mov	r14, r1
     ad0:	f1 2c       	mov	r15, r1
     ad2:	00 e0       	ldi	r16, 0x00	; 0
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	45 e5       	ldi	r20, 0x55	; 85
     ada:	50 e0       	ldi	r21, 0x00	; 0
     adc:	6f e3       	ldi	r22, 0x3F	; 63
     ade:	71 e0       	ldi	r23, 0x01	; 1
     ae0:	8e e9       	ldi	r24, 0x9E	; 158
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 b9 12 	call	0x2572	; 0x2572 <xTaskCreate>
     ae8:	8b 83       	std	Y+3, r24	; 0x03


	// Start the display handler timer
	init_display_timer(handle_display);
     aea:	8c ee       	ldi	r24, 0xEC	; 236
     aec:	94 e0       	ldi	r25, 0x04	; 4
     aee:	0e 94 a7 05 	call	0xb4e	; 0xb4e <init_display_timer>
	
	sei();
     af2:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
     af4:	0e 94 b9 14 	call	0x2972	; 0x2972 <vTaskStartScheduler>
	
	//Should never reach here
	while (1) {}
     af8:	ff cf       	rjmp	.-2      	; 0xaf8 <main+0xc2>

00000afa <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
	_x_rx_com_queue = x_rx_queue;
}
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	00 d0       	rcall	.+0      	; 0xb00 <_com_call_back+0x6>
     b00:	00 d0       	rcall	.+0      	; 0xb02 <_com_call_back+0x8>
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	9b 83       	std	Y+3, r25	; 0x03
     b08:	8a 83       	std	Y+2, r24	; 0x02
     b0a:	6c 83       	std	Y+4, r22	; 0x04
     b0c:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_x_rx_com_queue>
     b10:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <_x_rx_com_queue+0x1>
     b14:	89 2b       	or	r24, r25
     b16:	99 f0       	breq	.+38     	; 0xb3e <_com_call_back+0x44>
     b18:	19 82       	std	Y+1, r1	; 0x01
     b1a:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_x_rx_com_queue>
     b1e:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <_x_rx_com_queue+0x1>
     b22:	be 01       	movw	r22, r28
     b24:	6c 5f       	subi	r22, 0xFC	; 252
     b26:	7f 4f       	sbci	r23, 0xFF	; 255
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	ae 01       	movw	r20, r28
     b2c:	4f 5f       	subi	r20, 0xFF	; 255
     b2e:	5f 4f       	sbci	r21, 0xFF	; 255
     b30:	0e 94 0a 11 	call	0x2214	; 0x2214 <xQueueGenericSendFromISR>
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	88 23       	and	r24, r24
     b38:	11 f0       	breq	.+4      	; 0xb3e <_com_call_back+0x44>
     b3a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <vPortYield>
     b3e:	00 00       	nop
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	08 95       	ret

00000b4e <init_display_timer>:

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	00 d0       	rcall	.+0      	; 0xb54 <init_display_timer+0x6>
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	9a 83       	std	Y+2, r25	; 0x02
     b5a:	89 83       	std	Y+1, r24	; 0x01
	cb_ptr = cb;
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <cb_ptr+0x1>
     b64:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
     b68:	87 e4       	ldi	r24, 0x47	; 71
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	2a e0       	ldi	r18, 0x0A	; 10
     b6e:	fc 01       	movw	r30, r24
     b70:	20 83       	st	Z, r18
	TCCR0A |= _BV(WGM01); // Mode 2
     b72:	84 e4       	ldi	r24, 0x44	; 68
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	24 e4       	ldi	r18, 0x44	; 68
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	f9 01       	movw	r30, r18
     b7c:	20 81       	ld	r18, Z
     b7e:	22 60       	ori	r18, 0x02	; 2
     b80:	fc 01       	movw	r30, r24
     b82:	20 83       	st	Z, r18
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
     b84:	8e e6       	ldi	r24, 0x6E	; 110
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	2e e6       	ldi	r18, 0x6E	; 110
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	f9 01       	movw	r30, r18
     b8e:	20 81       	ld	r18, Z
     b90:	22 60       	ori	r18, 0x02	; 2
     b92:	fc 01       	movw	r30, r24
     b94:	20 83       	st	Z, r18
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
     b96:	85 e4       	ldi	r24, 0x45	; 69
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	25 e4       	ldi	r18, 0x45	; 69
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	f9 01       	movw	r30, r18
     ba0:	20 81       	ld	r18, Z
     ba2:	25 60       	ori	r18, 0x05	; 5
     ba4:	fc 01       	movw	r30, r24
     ba6:	20 83       	st	Z, r18
}
     ba8:	00 00       	nop
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <__vector_16>:

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bbc:	0f 92       	push	r0
     bbe:	11 24       	eor	r1, r1
     bc0:	2f 93       	push	r18
     bc2:	3f 93       	push	r19
     bc4:	4f 93       	push	r20
     bc6:	5f 93       	push	r21
     bc8:	6f 93       	push	r22
     bca:	7f 93       	push	r23
     bcc:	8f 93       	push	r24
     bce:	9f 93       	push	r25
     bd0:	af 93       	push	r26
     bd2:	bf 93       	push	r27
     bd4:	ef 93       	push	r30
     bd6:	ff 93       	push	r31
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
	if (cb_ptr)
     be0:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <cb_ptr>
     be4:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <cb_ptr+0x1>
     be8:	89 2b       	or	r24, r25
     bea:	31 f0       	breq	.+12     	; 0xbf8 <__vector_16+0x44>
	{
		cb_ptr();
     bec:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <cb_ptr>
     bf0:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <cb_ptr+0x1>
     bf4:	fc 01       	movw	r30, r24
     bf6:	09 95       	icall
	}
}
     bf8:	00 00       	nop
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	ff 91       	pop	r31
     c00:	ef 91       	pop	r30
     c02:	bf 91       	pop	r27
     c04:	af 91       	pop	r26
     c06:	9f 91       	pop	r25
     c08:	8f 91       	pop	r24
     c0a:	7f 91       	pop	r23
     c0c:	6f 91       	pop	r22
     c0e:	5f 91       	pop	r21
     c10:	4f 91       	pop	r20
     c12:	3f 91       	pop	r19
     c14:	2f 91       	pop	r18
     c16:	0f 90       	pop	r0
     c18:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c1c:	0f 90       	pop	r0
     c1e:	1f 90       	pop	r1
     c20:	18 95       	reti

00000c22 <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	00 d0       	rcall	.+0      	; 0xc28 <com_send_bytes+0x6>
     c28:	1f 92       	push	r1
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	89 83       	std	Y+1, r24	; 0x01
     c32:	6b 83       	std	Y+3, r22	; 0x03
	serial_send_bytes(_com_serial_instance, bytes, len);
     c34:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <_com_serial_instance>
     c38:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <_com_serial_instance+0x1>
     c3c:	29 81       	ldd	r18, Y+1	; 0x01
     c3e:	3a 81       	ldd	r19, Y+2	; 0x02
     c40:	4b 81       	ldd	r20, Y+3	; 0x03
     c42:	b9 01       	movw	r22, r18
     c44:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <serial_send_bytes>
}
     c48:	00 00       	nop
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     c56:	8f 92       	push	r8
     c58:	9f 92       	push	r9
     c5a:	af 92       	push	r10
     c5c:	bf 92       	push	r11
     c5e:	cf 92       	push	r12
     c60:	df 92       	push	r13
     c62:	ef 92       	push	r14
     c64:	0f 93       	push	r16
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     c6e:	85 ea       	ldi	r24, 0xA5	; 165
     c70:	92 e0       	ldi	r25, 0x02	; 2
     c72:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <buffer_init>
	buffer_init(&_com_tx_buffer);
     c76:	88 ec       	ldi	r24, 0xC8	; 200
     c78:	92 e0       	ldi	r25, 0x02	; 2
     c7a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     c7e:	0f 2e       	mov	r0, r31
     c80:	fd e7       	ldi	r31, 0x7D	; 125
     c82:	8f 2e       	mov	r8, r31
     c84:	f5 e0       	ldi	r31, 0x05	; 5
     c86:	9f 2e       	mov	r9, r31
     c88:	f0 2d       	mov	r31, r0
     c8a:	0f 2e       	mov	r0, r31
     c8c:	f8 ec       	ldi	r31, 0xC8	; 200
     c8e:	af 2e       	mov	r10, r31
     c90:	f2 e0       	ldi	r31, 0x02	; 2
     c92:	bf 2e       	mov	r11, r31
     c94:	f0 2d       	mov	r31, r0
     c96:	0f 2e       	mov	r0, r31
     c98:	f5 ea       	ldi	r31, 0xA5	; 165
     c9a:	cf 2e       	mov	r12, r31
     c9c:	f2 e0       	ldi	r31, 0x02	; 2
     c9e:	df 2e       	mov	r13, r31
     ca0:	f0 2d       	mov	r31, r0
     ca2:	e1 2c       	mov	r14, r1
     ca4:	00 e0       	ldi	r16, 0x00	; 0
     ca6:	23 e0       	ldi	r18, 0x03	; 3
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	52 ec       	ldi	r21, 0xC2	; 194
     cac:	61 e0       	ldi	r22, 0x01	; 1
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <serial_new_instance>
     cb6:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <_com_serial_instance+0x1>
     cba:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     cbe:	88 e2       	ldi	r24, 0x28	; 40
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	28 e2       	ldi	r18, 0x28	; 40
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	f9 01       	movw	r30, r18
     cc8:	20 81       	ld	r18, Z
     cca:	23 6c       	ori	r18, 0xC3	; 195
     ccc:	fc 01       	movw	r30, r24
     cce:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
     cd0:	8b e2       	ldi	r24, 0x2B	; 43
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	2b e2       	ldi	r18, 0x2B	; 43
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	f9 01       	movw	r30, r18
     cda:	20 81       	ld	r18, Z
     cdc:	28 60       	ori	r18, 0x08	; 8
     cde:	fc 01       	movw	r30, r24
     ce0:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     ce2:	8a e2       	ldi	r24, 0x2A	; 42
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	2a e2       	ldi	r18, 0x2A	; 42
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	f9 01       	movw	r30, r18
     cec:	20 81       	ld	r18, Z
     cee:	24 67       	ori	r18, 0x74	; 116
     cf0:	fc 01       	movw	r30, r24
     cf2:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     cf4:	8b e2       	ldi	r24, 0x2B	; 43
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	2b e2       	ldi	r18, 0x2B	; 43
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	f9 01       	movw	r30, r18
     cfe:	20 81       	ld	r18, Z
     d00:	20 64       	ori	r18, 0x40	; 64
     d02:	fc 01       	movw	r30, r24
     d04:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
     d06:	81 e2       	ldi	r24, 0x21	; 33
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	fc 01       	movw	r30, r24
     d0c:	80 81       	ld	r24, Z
     d0e:	81 e2       	ldi	r24, 0x21	; 33
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	2f ef       	ldi	r18, 0xFF	; 255
     d14:	fc 01       	movw	r30, r24
     d16:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
     d18:	84 e2       	ldi	r24, 0x24	; 36
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	24 e2       	ldi	r18, 0x24	; 36
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	f9 01       	movw	r30, r18
     d22:	20 81       	ld	r18, Z
     d24:	23 60       	ori	r18, 0x03	; 3
     d26:	fc 01       	movw	r30, r24
     d28:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     d2a:	84 e2       	ldi	r24, 0x24	; 36
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	24 e2       	ldi	r18, 0x24	; 36
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	f9 01       	movw	r30, r18
     d34:	20 81       	ld	r18, Z
     d36:	2c 63       	ori	r18, 0x3C	; 60
     d38:	fc 01       	movw	r30, r24
     d3a:	20 83       	st	Z, r18
}
     d3c:	00 00       	nop
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	0f 91       	pop	r16
     d44:	ef 90       	pop	r14
     d46:	df 90       	pop	r13
     d48:	cf 90       	pop	r12
     d4a:	bf 90       	pop	r11
     d4c:	af 90       	pop	r10
     d4e:	9f 90       	pop	r9
     d50:	8f 90       	pop	r8
     d52:	08 95       	ret

00000d54 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	1f 92       	push	r1
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
     d60:	85 e2       	ldi	r24, 0x25	; 37
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	25 e2       	ldi	r18, 0x25	; 37
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	f9 01       	movw	r30, r18
     d6a:	20 81       	ld	r18, Z
     d6c:	23 7c       	andi	r18, 0xC3	; 195
     d6e:	fc 01       	movw	r30, r24
     d70:	20 83       	st	Z, r18
		PORTB |= task_no << 2;
     d72:	85 e2       	ldi	r24, 0x25	; 37
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	25 e2       	ldi	r18, 0x25	; 37
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	f9 01       	movw	r30, r18
     d7c:	20 81       	ld	r18, Z
     d7e:	42 2f       	mov	r20, r18
     d80:	29 81       	ldd	r18, Y+1	; 0x01
     d82:	22 2f       	mov	r18, r18
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	22 0f       	add	r18, r18
     d88:	33 1f       	adc	r19, r19
     d8a:	22 0f       	add	r18, r18
     d8c:	33 1f       	adc	r19, r19
     d8e:	24 2b       	or	r18, r20
     d90:	fc 01       	movw	r30, r24
     d92:	20 83       	st	Z, r18
	}
     d94:	00 00       	nop
     d96:	0f 90       	pop	r0
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	08 95       	ret

00000d9e <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	1f 92       	push	r1
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	89 83       	std	Y+1, r24	; 0x01
		PORTB &= 0b11000011;
     daa:	85 e2       	ldi	r24, 0x25	; 37
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	25 e2       	ldi	r18, 0x25	; 37
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	f9 01       	movw	r30, r18
     db4:	20 81       	ld	r18, Z
     db6:	23 7c       	andi	r18, 0xC3	; 195
     db8:	fc 01       	movw	r30, r24
     dba:	20 83       	st	Z, r18
	}
     dbc:	00 00       	nop
     dbe:	0f 90       	pop	r0
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	08 95       	ret

00000dc6 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	00 d0       	rcall	.+0      	; 0xdcc <buffer_init+0x6>
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	9a 83       	std	Y+2, r25	; 0x02
     dd2:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	fc 01       	movw	r30, r24
     dda:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	fc 01       	movw	r30, r24
     de2:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	9a 81       	ldd	r25, Y+2	; 0x02
     de8:	fc 01       	movw	r30, r24
     dea:	12 a2       	std	Z+34, r1	; 0x22
}
     dec:	00 00       	nop
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret

00000df8 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <buffer_get_item+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <buffer_get_item+0x8>
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	9a 83       	std	Y+2, r25	; 0x02
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	7c 83       	std	Y+4, r23	; 0x04
     e0a:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	fc 01       	movw	r30, r24
     e12:	82 a1       	ldd	r24, Z+34	; 0x22
     e14:	88 23       	and	r24, r24
     e16:	81 f1       	breq	.+96     	; 0xe78 <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	fc 01       	movw	r30, r24
     e1e:	81 a1       	ldd	r24, Z+33	; 0x21
     e20:	88 2f       	mov	r24, r24
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	29 81       	ldd	r18, Y+1	; 0x01
     e26:	3a 81       	ldd	r19, Y+2	; 0x02
     e28:	82 0f       	add	r24, r18
     e2a:	93 1f       	adc	r25, r19
     e2c:	fc 01       	movw	r30, r24
     e2e:	20 81       	ld	r18, Z
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	9c 81       	ldd	r25, Y+4	; 0x04
     e34:	fc 01       	movw	r30, r24
     e36:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	9a 81       	ldd	r25, Y+2	; 0x02
     e3c:	fc 01       	movw	r30, r24
     e3e:	81 a1       	ldd	r24, Z+33	; 0x21
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	8f 71       	andi	r24, 0x1F	; 31
     e48:	90 78       	andi	r25, 0x80	; 128
     e4a:	99 23       	and	r25, r25
     e4c:	24 f4       	brge	.+8      	; 0xe56 <buffer_get_item+0x5e>
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	80 6e       	ori	r24, 0xE0	; 224
     e52:	9f 6f       	ori	r25, 0xFF	; 255
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	28 2f       	mov	r18, r24
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	9a 81       	ldd	r25, Y+2	; 0x02
     e5c:	fc 01       	movw	r30, r24
     e5e:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	9a 81       	ldd	r25, Y+2	; 0x02
     e64:	fc 01       	movw	r30, r24
     e66:	82 a1       	ldd	r24, Z+34	; 0x22
     e68:	2f ef       	ldi	r18, 0xFF	; 255
     e6a:	28 0f       	add	r18, r24
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	9a 81       	ldd	r25, Y+2	; 0x02
     e70:	fc 01       	movw	r30, r24
     e72:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
     e78:	81 e0       	ldi	r24, 0x01	; 1
}
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <buffer_put_item+0x6>
     e8e:	1f 92       	push	r1
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	9a 83       	std	Y+2, r25	; 0x02
     e96:	89 83       	std	Y+1, r24	; 0x01
     e98:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	9a 81       	ldd	r25, Y+2	; 0x02
     e9e:	fc 01       	movw	r30, r24
     ea0:	82 a1       	ldd	r24, Z+34	; 0x22
     ea2:	80 32       	cpi	r24, 0x20	; 32
     ea4:	68 f5       	brcc	.+90     	; 0xf00 <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	fc 01       	movw	r30, r24
     eac:	80 a1       	ldd	r24, Z+32	; 0x20
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	29 81       	ldd	r18, Y+1	; 0x01
     eb4:	3a 81       	ldd	r19, Y+2	; 0x02
     eb6:	82 0f       	add	r24, r18
     eb8:	93 1f       	adc	r25, r19
     eba:	2b 81       	ldd	r18, Y+3	; 0x03
     ebc:	fc 01       	movw	r30, r24
     ebe:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	fc 01       	movw	r30, r24
     ec6:	80 a1       	ldd	r24, Z+32	; 0x20
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	8f 71       	andi	r24, 0x1F	; 31
     ed0:	90 78       	andi	r25, 0x80	; 128
     ed2:	99 23       	and	r25, r25
     ed4:	24 f4       	brge	.+8      	; 0xede <buffer_put_item+0x56>
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	80 6e       	ori	r24, 0xE0	; 224
     eda:	9f 6f       	ori	r25, 0xFF	; 255
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	28 2f       	mov	r18, r24
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	fc 01       	movw	r30, r24
     ee6:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	fc 01       	movw	r30, r24
     eee:	82 a1       	ldd	r24, Z+34	; 0x22
     ef0:	21 e0       	ldi	r18, 0x01	; 1
     ef2:	28 0f       	add	r18, r24
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
     ef8:	fc 01       	movw	r30, r24
     efa:	22 a3       	std	Z+34, r18	; 0x22
		return BUFFER_OK;
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
     f00:	82 e0       	ldi	r24, 0x02	; 2
}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	00 d0       	rcall	.+0      	; 0xf14 <vListInitialise+0x6>
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
     f20:	9c 01       	movw	r18, r24
     f22:	2d 5f       	subi	r18, 0xFD	; 253
     f24:	3f 4f       	sbci	r19, 0xFF	; 255
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	fc 01       	movw	r30, r24
     f2c:	32 83       	std	Z+2, r19	; 0x02
     f2e:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	2f ef       	ldi	r18, 0xFF	; 255
     f36:	3f ef       	ldi	r19, 0xFF	; 255
     f38:	fc 01       	movw	r30, r24
     f3a:	34 83       	std	Z+4, r19	; 0x04
     f3c:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	9c 01       	movw	r18, r24
     f44:	2d 5f       	subi	r18, 0xFD	; 253
     f46:	3f 4f       	sbci	r19, 0xFF	; 255
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	fc 01       	movw	r30, r24
     f4e:	36 83       	std	Z+6, r19	; 0x06
     f50:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	9a 81       	ldd	r25, Y+2	; 0x02
     f56:	9c 01       	movw	r18, r24
     f58:	2d 5f       	subi	r18, 0xFD	; 253
     f5a:	3f 4f       	sbci	r19, 0xFF	; 255
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	fc 01       	movw	r30, r24
     f62:	30 87       	std	Z+8, r19	; 0x08
     f64:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	fc 01       	movw	r30, r24
     f6c:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     f6e:	00 00       	nop
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <vListInitialiseItem+0x6>
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	fc 01       	movw	r30, r24
     f8e:	11 86       	std	Z+9, r1	; 0x09
     f90:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     f92:	00 00       	nop
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	08 95       	ret

00000f9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <vListInsertEnd+0x6>
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <vListInsertEnd+0x8>
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <vListInsertEnd+0xa>
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	9c 83       	std	Y+4, r25	; 0x04
     fae:	8b 83       	std	Y+3, r24	; 0x03
     fb0:	7e 83       	std	Y+6, r23	; 0x06
     fb2:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	fc 01       	movw	r30, r24
     fba:	81 81       	ldd	r24, Z+1	; 0x01
     fbc:	92 81       	ldd	r25, Z+2	; 0x02
     fbe:	9a 83       	std	Y+2, r25	; 0x02
     fc0:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     fc2:	8d 81       	ldd	r24, Y+5	; 0x05
     fc4:	9e 81       	ldd	r25, Y+6	; 0x06
     fc6:	29 81       	ldd	r18, Y+1	; 0x01
     fc8:	3a 81       	ldd	r19, Y+2	; 0x02
     fca:	fc 01       	movw	r30, r24
     fcc:	33 83       	std	Z+3, r19	; 0x03
     fce:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	fc 01       	movw	r30, r24
     fd6:	24 81       	ldd	r18, Z+4	; 0x04
     fd8:	35 81       	ldd	r19, Z+5	; 0x05
     fda:	8d 81       	ldd	r24, Y+5	; 0x05
     fdc:	9e 81       	ldd	r25, Y+6	; 0x06
     fde:	fc 01       	movw	r30, r24
     fe0:	35 83       	std	Z+5, r19	; 0x05
     fe2:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	fc 01       	movw	r30, r24
     fea:	84 81       	ldd	r24, Z+4	; 0x04
     fec:	95 81       	ldd	r25, Z+5	; 0x05
     fee:	2d 81       	ldd	r18, Y+5	; 0x05
     ff0:	3e 81       	ldd	r19, Y+6	; 0x06
     ff2:	fc 01       	movw	r30, r24
     ff4:	33 83       	std	Z+3, r19	; 0x03
     ff6:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	2d 81       	ldd	r18, Y+5	; 0x05
     ffe:	3e 81       	ldd	r19, Y+6	; 0x06
    1000:	fc 01       	movw	r30, r24
    1002:	35 83       	std	Z+5, r19	; 0x05
    1004:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1006:	8d 81       	ldd	r24, Y+5	; 0x05
    1008:	9e 81       	ldd	r25, Y+6	; 0x06
    100a:	2b 81       	ldd	r18, Y+3	; 0x03
    100c:	3c 81       	ldd	r19, Y+4	; 0x04
    100e:	fc 01       	movw	r30, r24
    1010:	31 87       	std	Z+9, r19	; 0x09
    1012:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	fc 01       	movw	r30, r24
    101a:	80 81       	ld	r24, Z
    101c:	21 e0       	ldi	r18, 0x01	; 1
    101e:	28 0f       	add	r18, r24
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	9c 81       	ldd	r25, Y+4	; 0x04
    1024:	fc 01       	movw	r30, r24
    1026:	20 83       	st	Z, r18
}
    1028:	00 00       	nop
    102a:	26 96       	adiw	r28, 0x06	; 6
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	28 97       	sbiw	r28, 0x08	; 8
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	9e 83       	std	Y+6, r25	; 0x06
    1052:	8d 83       	std	Y+5, r24	; 0x05
    1054:	78 87       	std	Y+8, r23	; 0x08
    1056:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1058:	8f 81       	ldd	r24, Y+7	; 0x07
    105a:	98 85       	ldd	r25, Y+8	; 0x08
    105c:	fc 01       	movw	r30, r24
    105e:	80 81       	ld	r24, Z
    1060:	91 81       	ldd	r25, Z+1	; 0x01
    1062:	9c 83       	std	Y+4, r25	; 0x04
    1064:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	41 f4       	brne	.+16     	; 0x107e <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	fc 01       	movw	r30, r24
    1074:	87 81       	ldd	r24, Z+7	; 0x07
    1076:	90 85       	ldd	r25, Z+8	; 0x08
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	1a c0       	rjmp	.+52     	; 0x10b2 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	03 96       	adiw	r24, 0x03	; 3
    1084:	9a 83       	std	Y+2, r25	; 0x02
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	07 c0       	rjmp	.+14     	; 0x1098 <vListInsert+0x5c>
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	fc 01       	movw	r30, r24
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	fc 01       	movw	r30, r24
    109e:	82 81       	ldd	r24, Z+2	; 0x02
    10a0:	93 81       	ldd	r25, Z+3	; 0x03
    10a2:	fc 01       	movw	r30, r24
    10a4:	20 81       	ld	r18, Z
    10a6:	31 81       	ldd	r19, Z+1	; 0x01
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	82 17       	cp	r24, r18
    10ae:	93 07       	cpc	r25, r19
    10b0:	60 f7       	brcc	.-40     	; 0x108a <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	fc 01       	movw	r30, r24
    10b8:	22 81       	ldd	r18, Z+2	; 0x02
    10ba:	33 81       	ldd	r19, Z+3	; 0x03
    10bc:	8f 81       	ldd	r24, Y+7	; 0x07
    10be:	98 85       	ldd	r25, Y+8	; 0x08
    10c0:	fc 01       	movw	r30, r24
    10c2:	33 83       	std	Z+3, r19	; 0x03
    10c4:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    10c6:	8f 81       	ldd	r24, Y+7	; 0x07
    10c8:	98 85       	ldd	r25, Y+8	; 0x08
    10ca:	fc 01       	movw	r30, r24
    10cc:	82 81       	ldd	r24, Z+2	; 0x02
    10ce:	93 81       	ldd	r25, Z+3	; 0x03
    10d0:	2f 81       	ldd	r18, Y+7	; 0x07
    10d2:	38 85       	ldd	r19, Y+8	; 0x08
    10d4:	fc 01       	movw	r30, r24
    10d6:	35 83       	std	Z+5, r19	; 0x05
    10d8:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    10da:	8f 81       	ldd	r24, Y+7	; 0x07
    10dc:	98 85       	ldd	r25, Y+8	; 0x08
    10de:	29 81       	ldd	r18, Y+1	; 0x01
    10e0:	3a 81       	ldd	r19, Y+2	; 0x02
    10e2:	fc 01       	movw	r30, r24
    10e4:	35 83       	std	Z+5, r19	; 0x05
    10e6:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	2f 81       	ldd	r18, Y+7	; 0x07
    10ee:	38 85       	ldd	r19, Y+8	; 0x08
    10f0:	fc 01       	movw	r30, r24
    10f2:	33 83       	std	Z+3, r19	; 0x03
    10f4:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10f6:	8f 81       	ldd	r24, Y+7	; 0x07
    10f8:	98 85       	ldd	r25, Y+8	; 0x08
    10fa:	2d 81       	ldd	r18, Y+5	; 0x05
    10fc:	3e 81       	ldd	r19, Y+6	; 0x06
    10fe:	fc 01       	movw	r30, r24
    1100:	31 87       	std	Z+9, r19	; 0x09
    1102:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	fc 01       	movw	r30, r24
    110a:	80 81       	ld	r24, Z
    110c:	21 e0       	ldi	r18, 0x01	; 1
    110e:	28 0f       	add	r18, r24
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	fc 01       	movw	r30, r24
    1116:	20 83       	st	Z, r18
}
    1118:	00 00       	nop
    111a:	28 96       	adiw	r28, 0x08	; 8
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	08 95       	ret

0000112c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	00 d0       	rcall	.+0      	; 0x1132 <uxListRemove+0x6>
    1132:	00 d0       	rcall	.+0      	; 0x1134 <uxListRemove+0x8>
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	9c 83       	std	Y+4, r25	; 0x04
    113a:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	9c 81       	ldd	r25, Y+4	; 0x04
    1140:	fc 01       	movw	r30, r24
    1142:	80 85       	ldd	r24, Z+8	; 0x08
    1144:	91 85       	ldd	r25, Z+9	; 0x09
    1146:	9a 83       	std	Y+2, r25	; 0x02
    1148:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	fc 01       	movw	r30, r24
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	93 81       	ldd	r25, Z+3	; 0x03
    1154:	2b 81       	ldd	r18, Y+3	; 0x03
    1156:	3c 81       	ldd	r19, Y+4	; 0x04
    1158:	f9 01       	movw	r30, r18
    115a:	24 81       	ldd	r18, Z+4	; 0x04
    115c:	35 81       	ldd	r19, Z+5	; 0x05
    115e:	fc 01       	movw	r30, r24
    1160:	35 83       	std	Z+5, r19	; 0x05
    1162:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	9c 81       	ldd	r25, Y+4	; 0x04
    1168:	fc 01       	movw	r30, r24
    116a:	84 81       	ldd	r24, Z+4	; 0x04
    116c:	95 81       	ldd	r25, Z+5	; 0x05
    116e:	2b 81       	ldd	r18, Y+3	; 0x03
    1170:	3c 81       	ldd	r19, Y+4	; 0x04
    1172:	f9 01       	movw	r30, r18
    1174:	22 81       	ldd	r18, Z+2	; 0x02
    1176:	33 81       	ldd	r19, Z+3	; 0x03
    1178:	fc 01       	movw	r30, r24
    117a:	33 83       	std	Z+3, r19	; 0x03
    117c:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	fc 01       	movw	r30, r24
    1184:	21 81       	ldd	r18, Z+1	; 0x01
    1186:	32 81       	ldd	r19, Z+2	; 0x02
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	28 17       	cp	r18, r24
    118e:	39 07       	cpc	r19, r25
    1190:	51 f4       	brne	.+20     	; 0x11a6 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	fc 01       	movw	r30, r24
    1198:	24 81       	ldd	r18, Z+4	; 0x04
    119a:	35 81       	ldd	r19, Z+5	; 0x05
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	fc 01       	movw	r30, r24
    11a2:	32 83       	std	Z+2, r19	; 0x02
    11a4:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	fc 01       	movw	r30, r24
    11ac:	11 86       	std	Z+9, r1	; 0x09
    11ae:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	9a 81       	ldd	r25, Y+2	; 0x02
    11b4:	fc 01       	movw	r30, r24
    11b6:	80 81       	ld	r24, Z
    11b8:	2f ef       	ldi	r18, 0xFF	; 255
    11ba:	28 0f       	add	r18, r24
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	fc 01       	movw	r30, r24
    11c2:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	fc 01       	movw	r30, r24
    11ca:	80 81       	ld	r24, Z
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	08 95       	ret

000011da <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	28 97       	sbiw	r28, 0x08	; 8
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	9c 83       	std	Y+4, r25	; 0x04
    11f0:	8b 83       	std	Y+3, r24	; 0x03
    11f2:	7e 83       	std	Y+6, r23	; 0x06
    11f4:	6d 83       	std	Y+5, r22	; 0x05
    11f6:	58 87       	std	Y+8, r21	; 0x08
    11f8:	4f 83       	std	Y+7, r20	; 0x07
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	21 e1       	ldi	r18, 0x11	; 17
    1200:	fc 01       	movw	r30, r24
    1202:	20 83       	st	Z, r18
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	9c 83       	std	Y+4, r25	; 0x04
    120c:	8b 83       	std	Y+3, r24	; 0x03
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	22 e2       	ldi	r18, 0x22	; 34
    1214:	fc 01       	movw	r30, r24
    1216:	20 83       	st	Z, r18
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	9c 83       	std	Y+4, r25	; 0x04
    1220:	8b 83       	std	Y+3, r24	; 0x03
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	23 e3       	ldi	r18, 0x33	; 51
    1228:	fc 01       	movw	r30, r24
    122a:	20 83       	st	Z, r18
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	9c 83       	std	Y+4, r25	; 0x04
    1234:	8b 83       	std	Y+3, r24	; 0x03
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	9a 83       	std	Y+2, r25	; 0x02
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	29 81       	ldd	r18, Y+1	; 0x01
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	fc 01       	movw	r30, r24
    1246:	20 83       	st	Z, r18
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	9c 83       	std	Y+4, r25	; 0x04
    1250:	8b 83       	std	Y+3, r24	; 0x03
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	89 2f       	mov	r24, r25
    1258:	99 27       	eor	r25, r25
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	29 81       	ldd	r18, Y+1	; 0x01
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	fc 01       	movw	r30, r24
    1266:	20 83       	st	Z, r18
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	9c 83       	std	Y+4, r25	; 0x04
    1270:	8b 83       	std	Y+3, r24	; 0x03
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	fc 01       	movw	r30, r24
    1278:	10 82       	st	Z, r1
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	9c 83       	std	Y+4, r25	; 0x04
    1282:	8b 83       	std	Y+3, r24	; 0x03
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	9c 81       	ldd	r25, Y+4	; 0x04
    1288:	20 e8       	ldi	r18, 0x80	; 128
    128a:	fc 01       	movw	r30, r24
    128c:	20 83       	st	Z, r18
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	9c 83       	std	Y+4, r25	; 0x04
    1296:	8b 83       	std	Y+3, r24	; 0x03
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	fc 01       	movw	r30, r24
    129e:	10 82       	st	Z, r1
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	9c 83       	std	Y+4, r25	; 0x04
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	22 e0       	ldi	r18, 0x02	; 2
    12b0:	fc 01       	movw	r30, r24
    12b2:	20 83       	st	Z, r18
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	9c 83       	std	Y+4, r25	; 0x04
    12bc:	8b 83       	std	Y+3, r24	; 0x03
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	23 e0       	ldi	r18, 0x03	; 3
    12c4:	fc 01       	movw	r30, r24
    12c6:	20 83       	st	Z, r18
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	9c 83       	std	Y+4, r25	; 0x04
    12d0:	8b 83       	std	Y+3, r24	; 0x03
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	24 e0       	ldi	r18, 0x04	; 4
    12d8:	fc 01       	movw	r30, r24
    12da:	20 83       	st	Z, r18
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	9c 83       	std	Y+4, r25	; 0x04
    12e4:	8b 83       	std	Y+3, r24	; 0x03
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	25 e0       	ldi	r18, 0x05	; 5
    12ec:	fc 01       	movw	r30, r24
    12ee:	20 83       	st	Z, r18
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	9c 83       	std	Y+4, r25	; 0x04
    12f8:	8b 83       	std	Y+3, r24	; 0x03
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	26 e0       	ldi	r18, 0x06	; 6
    1300:	fc 01       	movw	r30, r24
    1302:	20 83       	st	Z, r18
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9c 83       	std	Y+4, r25	; 0x04
    130c:	8b 83       	std	Y+3, r24	; 0x03
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	27 e0       	ldi	r18, 0x07	; 7
    1314:	fc 01       	movw	r30, r24
    1316:	20 83       	st	Z, r18
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	9c 81       	ldd	r25, Y+4	; 0x04
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	9c 83       	std	Y+4, r25	; 0x04
    1320:	8b 83       	std	Y+3, r24	; 0x03
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	28 e0       	ldi	r18, 0x08	; 8
    1328:	fc 01       	movw	r30, r24
    132a:	20 83       	st	Z, r18
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	9c 83       	std	Y+4, r25	; 0x04
    1334:	8b 83       	std	Y+3, r24	; 0x03
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	29 e0       	ldi	r18, 0x09	; 9
    133c:	fc 01       	movw	r30, r24
    133e:	20 83       	st	Z, r18
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	9c 83       	std	Y+4, r25	; 0x04
    1348:	8b 83       	std	Y+3, r24	; 0x03
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	20 e1       	ldi	r18, 0x10	; 16
    1350:	fc 01       	movw	r30, r24
    1352:	20 83       	st	Z, r18
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	9c 83       	std	Y+4, r25	; 0x04
    135c:	8b 83       	std	Y+3, r24	; 0x03
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	21 e1       	ldi	r18, 0x11	; 17
    1364:	fc 01       	movw	r30, r24
    1366:	20 83       	st	Z, r18
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	9c 83       	std	Y+4, r25	; 0x04
    1370:	8b 83       	std	Y+3, r24	; 0x03
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	22 e1       	ldi	r18, 0x12	; 18
    1378:	fc 01       	movw	r30, r24
    137a:	20 83       	st	Z, r18
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	9c 83       	std	Y+4, r25	; 0x04
    1384:	8b 83       	std	Y+3, r24	; 0x03
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	23 e1       	ldi	r18, 0x13	; 19
    138c:	fc 01       	movw	r30, r24
    138e:	20 83       	st	Z, r18
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	9c 81       	ldd	r25, Y+4	; 0x04
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	9c 83       	std	Y+4, r25	; 0x04
    1398:	8b 83       	std	Y+3, r24	; 0x03
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	9c 81       	ldd	r25, Y+4	; 0x04
    139e:	24 e1       	ldi	r18, 0x14	; 20
    13a0:	fc 01       	movw	r30, r24
    13a2:	20 83       	st	Z, r18
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	9c 81       	ldd	r25, Y+4	; 0x04
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	9c 83       	std	Y+4, r25	; 0x04
    13ac:	8b 83       	std	Y+3, r24	; 0x03
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	25 e1       	ldi	r18, 0x15	; 21
    13b4:	fc 01       	movw	r30, r24
    13b6:	20 83       	st	Z, r18
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	9c 83       	std	Y+4, r25	; 0x04
    13c0:	8b 83       	std	Y+3, r24	; 0x03
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	26 e1       	ldi	r18, 0x16	; 22
    13c8:	fc 01       	movw	r30, r24
    13ca:	20 83       	st	Z, r18
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	9c 81       	ldd	r25, Y+4	; 0x04
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	9c 83       	std	Y+4, r25	; 0x04
    13d4:	8b 83       	std	Y+3, r24	; 0x03
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	27 e1       	ldi	r18, 0x17	; 23
    13dc:	fc 01       	movw	r30, r24
    13de:	20 83       	st	Z, r18
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	9c 83       	std	Y+4, r25	; 0x04
    13e8:	8b 83       	std	Y+3, r24	; 0x03
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	28 e1       	ldi	r18, 0x18	; 24
    13f0:	fc 01       	movw	r30, r24
    13f2:	20 83       	st	Z, r18
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	9c 81       	ldd	r25, Y+4	; 0x04
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	9c 83       	std	Y+4, r25	; 0x04
    13fc:	8b 83       	std	Y+3, r24	; 0x03
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	9c 81       	ldd	r25, Y+4	; 0x04
    1402:	29 e1       	ldi	r18, 0x19	; 25
    1404:	fc 01       	movw	r30, r24
    1406:	20 83       	st	Z, r18
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	9c 83       	std	Y+4, r25	; 0x04
    1410:	8b 83       	std	Y+3, r24	; 0x03
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	9c 81       	ldd	r25, Y+4	; 0x04
    1416:	20 e2       	ldi	r18, 0x20	; 32
    1418:	fc 01       	movw	r30, r24
    141a:	20 83       	st	Z, r18
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	9c 81       	ldd	r25, Y+4	; 0x04
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	9c 83       	std	Y+4, r25	; 0x04
    1424:	8b 83       	std	Y+3, r24	; 0x03
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	21 e2       	ldi	r18, 0x21	; 33
    142c:	fc 01       	movw	r30, r24
    142e:	20 83       	st	Z, r18
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	9c 81       	ldd	r25, Y+4	; 0x04
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	9c 83       	std	Y+4, r25	; 0x04
    1438:	8b 83       	std	Y+3, r24	; 0x03
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	22 e2       	ldi	r18, 0x22	; 34
    1440:	fc 01       	movw	r30, r24
    1442:	20 83       	st	Z, r18
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	9c 83       	std	Y+4, r25	; 0x04
    144c:	8b 83       	std	Y+3, r24	; 0x03
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	23 e2       	ldi	r18, 0x23	; 35
    1454:	fc 01       	movw	r30, r24
    1456:	20 83       	st	Z, r18
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	9c 83       	std	Y+4, r25	; 0x04
    1460:	8b 83       	std	Y+3, r24	; 0x03
    1462:	8f 81       	ldd	r24, Y+7	; 0x07
    1464:	98 85       	ldd	r25, Y+8	; 0x08
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	29 81       	ldd	r18, Y+1	; 0x01
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	fc 01       	movw	r30, r24
    1472:	20 83       	st	Z, r18
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	9c 83       	std	Y+4, r25	; 0x04
    147c:	8b 83       	std	Y+3, r24	; 0x03
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	89 2f       	mov	r24, r25
    1484:	99 27       	eor	r25, r25
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	29 81       	ldd	r18, Y+1	; 0x01
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	9c 83       	std	Y+4, r25	; 0x04
    149c:	8b 83       	std	Y+3, r24	; 0x03
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	26 e2       	ldi	r18, 0x26	; 38
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 83       	st	Z, r18
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	9c 81       	ldd	r25, Y+4	; 0x04
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	9c 83       	std	Y+4, r25	; 0x04
    14b0:	8b 83       	std	Y+3, r24	; 0x03
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	9c 81       	ldd	r25, Y+4	; 0x04
    14b6:	27 e2       	ldi	r18, 0x27	; 39
    14b8:	fc 01       	movw	r30, r24
    14ba:	20 83       	st	Z, r18
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	9c 83       	std	Y+4, r25	; 0x04
    14c4:	8b 83       	std	Y+3, r24	; 0x03
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	28 e2       	ldi	r18, 0x28	; 40
    14cc:	fc 01       	movw	r30, r24
    14ce:	20 83       	st	Z, r18
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	9c 83       	std	Y+4, r25	; 0x04
    14d8:	8b 83       	std	Y+3, r24	; 0x03
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	29 e2       	ldi	r18, 0x29	; 41
    14e0:	fc 01       	movw	r30, r24
    14e2:	20 83       	st	Z, r18
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	9c 83       	std	Y+4, r25	; 0x04
    14ec:	8b 83       	std	Y+3, r24	; 0x03
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	20 e3       	ldi	r18, 0x30	; 48
    14f4:	fc 01       	movw	r30, r24
    14f6:	20 83       	st	Z, r18
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	9c 83       	std	Y+4, r25	; 0x04
    1500:	8b 83       	std	Y+3, r24	; 0x03
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	9c 81       	ldd	r25, Y+4	; 0x04
    1506:	21 e3       	ldi	r18, 0x31	; 49
    1508:	fc 01       	movw	r30, r24
    150a:	20 83       	st	Z, r18
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	9c 83       	std	Y+4, r25	; 0x04
    1514:	8b 83       	std	Y+3, r24	; 0x03
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	28 96       	adiw	r28, 0x08	; 8
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	08 95       	ret

0000152c <xPortStartScheduler>:
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	0e 94 83 0b 	call	0x1706	; 0x1706 <prvSetupTimerInterrupt>
    1538:	a0 91 db 06 	lds	r26, 0x06DB	; 0x8006db <pxCurrentTCB>
    153c:	b0 91 dc 06 	lds	r27, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    1540:	cd 91       	ld	r28, X+
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	dd 91       	ld	r29, X+
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	ff 91       	pop	r31
    154a:	ef 91       	pop	r30
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	bf 91       	pop	r27
    1552:	af 91       	pop	r26
    1554:	9f 91       	pop	r25
    1556:	8f 91       	pop	r24
    1558:	7f 91       	pop	r23
    155a:	6f 91       	pop	r22
    155c:	5f 91       	pop	r21
    155e:	4f 91       	pop	r20
    1560:	3f 91       	pop	r19
    1562:	2f 91       	pop	r18
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	ff 90       	pop	r15
    156a:	ef 90       	pop	r14
    156c:	df 90       	pop	r13
    156e:	cf 90       	pop	r12
    1570:	bf 90       	pop	r11
    1572:	af 90       	pop	r10
    1574:	9f 90       	pop	r9
    1576:	8f 90       	pop	r8
    1578:	7f 90       	pop	r7
    157a:	6f 90       	pop	r6
    157c:	5f 90       	pop	r5
    157e:	4f 90       	pop	r4
    1580:	3f 90       	pop	r3
    1582:	2f 90       	pop	r2
    1584:	1f 90       	pop	r1
    1586:	0f 90       	pop	r0
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	0f 90       	pop	r0
    158c:	08 95       	ret
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	08 95       	ret

00001596 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1596:	0f 92       	push	r0
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	0f 92       	push	r0
    159e:	1f 92       	push	r1
    15a0:	11 24       	eor	r1, r1
    15a2:	2f 92       	push	r2
    15a4:	3f 92       	push	r3
    15a6:	4f 92       	push	r4
    15a8:	5f 92       	push	r5
    15aa:	6f 92       	push	r6
    15ac:	7f 92       	push	r7
    15ae:	8f 92       	push	r8
    15b0:	9f 92       	push	r9
    15b2:	af 92       	push	r10
    15b4:	bf 92       	push	r11
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	2f 93       	push	r18
    15c4:	3f 93       	push	r19
    15c6:	4f 93       	push	r20
    15c8:	5f 93       	push	r21
    15ca:	6f 93       	push	r22
    15cc:	7f 93       	push	r23
    15ce:	8f 93       	push	r24
    15d0:	9f 93       	push	r25
    15d2:	af 93       	push	r26
    15d4:	bf 93       	push	r27
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	ef 93       	push	r30
    15dc:	ff 93       	push	r31
    15de:	a0 91 db 06 	lds	r26, 0x06DB	; 0x8006db <pxCurrentTCB>
    15e2:	b0 91 dc 06 	lds	r27, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    15e6:	0d b6       	in	r0, 0x3d	; 61
    15e8:	0d 92       	st	X+, r0
    15ea:	0e b6       	in	r0, 0x3e	; 62
    15ec:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    15ee:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    15f2:	a0 91 db 06 	lds	r26, 0x06DB	; 0x8006db <pxCurrentTCB>
    15f6:	b0 91 dc 06 	lds	r27, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    15fa:	cd 91       	ld	r28, X+
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	dd 91       	ld	r29, X+
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	ff 91       	pop	r31
    1604:	ef 91       	pop	r30
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	bf 91       	pop	r27
    160c:	af 91       	pop	r26
    160e:	9f 91       	pop	r25
    1610:	8f 91       	pop	r24
    1612:	7f 91       	pop	r23
    1614:	6f 91       	pop	r22
    1616:	5f 91       	pop	r21
    1618:	4f 91       	pop	r20
    161a:	3f 91       	pop	r19
    161c:	2f 91       	pop	r18
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ff 90       	pop	r15
    1624:	ef 90       	pop	r14
    1626:	df 90       	pop	r13
    1628:	cf 90       	pop	r12
    162a:	bf 90       	pop	r11
    162c:	af 90       	pop	r10
    162e:	9f 90       	pop	r9
    1630:	8f 90       	pop	r8
    1632:	7f 90       	pop	r7
    1634:	6f 90       	pop	r6
    1636:	5f 90       	pop	r5
    1638:	4f 90       	pop	r4
    163a:	3f 90       	pop	r3
    163c:	2f 90       	pop	r2
    163e:	1f 90       	pop	r1
    1640:	0f 90       	pop	r0
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1646:	08 95       	ret
	...

0000164a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    164a:	0f 92       	push	r0
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	0f 92       	push	r0
    1652:	1f 92       	push	r1
    1654:	11 24       	eor	r1, r1
    1656:	2f 92       	push	r2
    1658:	3f 92       	push	r3
    165a:	4f 92       	push	r4
    165c:	5f 92       	push	r5
    165e:	6f 92       	push	r6
    1660:	7f 92       	push	r7
    1662:	8f 92       	push	r8
    1664:	9f 92       	push	r9
    1666:	af 92       	push	r10
    1668:	bf 92       	push	r11
    166a:	cf 92       	push	r12
    166c:	df 92       	push	r13
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	2f 93       	push	r18
    1678:	3f 93       	push	r19
    167a:	4f 93       	push	r20
    167c:	5f 93       	push	r21
    167e:	6f 93       	push	r22
    1680:	7f 93       	push	r23
    1682:	8f 93       	push	r24
    1684:	9f 93       	push	r25
    1686:	af 93       	push	r26
    1688:	bf 93       	push	r27
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	ef 93       	push	r30
    1690:	ff 93       	push	r31
    1692:	a0 91 db 06 	lds	r26, 0x06DB	; 0x8006db <pxCurrentTCB>
    1696:	b0 91 dc 06 	lds	r27, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    169a:	0d b6       	in	r0, 0x3d	; 61
    169c:	0d 92       	st	X+, r0
    169e:	0e b6       	in	r0, 0x3e	; 62
    16a0:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    16a2:	0e 94 92 15 	call	0x2b24	; 0x2b24 <xTaskIncrementTick>
    16a6:	88 23       	and	r24, r24
    16a8:	11 f0       	breq	.+4      	; 0x16ae <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    16aa:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    16ae:	a0 91 db 06 	lds	r26, 0x06DB	; 0x8006db <pxCurrentTCB>
    16b2:	b0 91 dc 06 	lds	r27, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    16b6:	cd 91       	ld	r28, X+
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	dd 91       	ld	r29, X+
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	ff 91       	pop	r31
    16c0:	ef 91       	pop	r30
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	bf 91       	pop	r27
    16c8:	af 91       	pop	r26
    16ca:	9f 91       	pop	r25
    16cc:	8f 91       	pop	r24
    16ce:	7f 91       	pop	r23
    16d0:	6f 91       	pop	r22
    16d2:	5f 91       	pop	r21
    16d4:	4f 91       	pop	r20
    16d6:	3f 91       	pop	r19
    16d8:	2f 91       	pop	r18
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	bf 90       	pop	r11
    16e8:	af 90       	pop	r10
    16ea:	9f 90       	pop	r9
    16ec:	8f 90       	pop	r8
    16ee:	7f 90       	pop	r7
    16f0:	6f 90       	pop	r6
    16f2:	5f 90       	pop	r5
    16f4:	4f 90       	pop	r4
    16f6:	3f 90       	pop	r3
    16f8:	2f 90       	pop	r2
    16fa:	1f 90       	pop	r1
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1702:	08 95       	ret
	...

00001706 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	00 d0       	rcall	.+0      	; 0x170c <prvSetupTimerInterrupt+0x6>
    170c:	00 d0       	rcall	.+0      	; 0x170e <prvSetupTimerInterrupt+0x8>
    170e:	00 d0       	rcall	.+0      	; 0x1710 <prvSetupTimerInterrupt+0xa>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1714:	89 e9       	ldi	r24, 0x99	; 153
    1716:	99 e3       	ldi	r25, 0x39	; 57
    1718:	a0 e0       	ldi	r26, 0x00	; 0
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	ab 83       	std	Y+3, r26	; 0x03
    1722:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	9a 81       	ldd	r25, Y+2	; 0x02
    1728:	ab 81       	ldd	r26, Y+3	; 0x03
    172a:	bc 81       	ldd	r27, Y+4	; 0x04
    172c:	68 94       	set
    172e:	15 f8       	bld	r1, 5
    1730:	b6 95       	lsr	r27
    1732:	a7 95       	ror	r26
    1734:	97 95       	ror	r25
    1736:	87 95       	ror	r24
    1738:	16 94       	lsr	r1
    173a:	d1 f7       	brne	.-12     	; 0x1730 <prvSetupTimerInterrupt+0x2a>
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	ab 83       	std	Y+3, r26	; 0x03
    1742:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	ab 81       	ldd	r26, Y+3	; 0x03
    174a:	bc 81       	ldd	r27, Y+4	; 0x04
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	a1 09       	sbc	r26, r1
    1750:	b1 09       	sbc	r27, r1
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	ab 83       	std	Y+3, r26	; 0x03
    1758:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	9a 81       	ldd	r25, Y+2	; 0x02
    1762:	ab 81       	ldd	r26, Y+3	; 0x03
    1764:	bc 81       	ldd	r27, Y+4	; 0x04
    1766:	89 2f       	mov	r24, r25
    1768:	9a 2f       	mov	r25, r26
    176a:	ab 2f       	mov	r26, r27
    176c:	bb 27       	eor	r27, r27
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	9a 83       	std	Y+2, r25	; 0x02
    1772:	ab 83       	std	Y+3, r26	; 0x03
    1774:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    177a:	89 e8       	ldi	r24, 0x89	; 137
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	2e 81       	ldd	r18, Y+6	; 0x06
    1780:	fc 01       	movw	r30, r24
    1782:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    1784:	88 e8       	ldi	r24, 0x88	; 136
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	2d 81       	ldd	r18, Y+5	; 0x05
    178a:	fc 01       	movw	r30, r24
    178c:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    178e:	8b e0       	ldi	r24, 0x0B	; 11
    1790:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    1792:	81 e8       	ldi	r24, 0x81	; 129
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	2d 81       	ldd	r18, Y+5	; 0x05
    1798:	fc 01       	movw	r30, r24
    179a:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    179c:	8f e6       	ldi	r24, 0x6F	; 111
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	fc 01       	movw	r30, r24
    17a2:	80 81       	ld	r24, Z
    17a4:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	82 60       	ori	r24, 0x02	; 2
    17aa:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    17ac:	8f e6       	ldi	r24, 0x6F	; 111
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	2d 81       	ldd	r18, Y+5	; 0x05
    17b2:	fc 01       	movw	r30, r24
    17b4:	20 83       	st	Z, r18
}
    17b6:	00 00       	nop
    17b8:	26 96       	adiw	r28, 0x06	; 6
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	08 95       	ret

000017ca <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    17ca:	0e 94 25 0b 	call	0x164a	; 0x164a <vPortYieldFromTick>
		asm volatile ( "reti" );
    17ce:	18 95       	reti
	...

000017d2 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <pvPortMalloc+0x6>
    17d8:	00 d0       	rcall	.+0      	; 0x17da <pvPortMalloc+0x8>
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	9c 83       	std	Y+4, r25	; 0x04
    17e0:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    17e2:	1a 82       	std	Y+2, r1	; 0x02
    17e4:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    17e6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    17ea:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <pucAlignedHeap.2084>
    17ee:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <pucAlignedHeap.2084+0x1>
    17f2:	89 2b       	or	r24, r25
    17f4:	31 f4       	brne	.+12     	; 0x1802 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    17f6:	8c ee       	ldi	r24, 0xEC	; 236
    17f8:	92 e0       	ldi	r25, 0x02	; 2
    17fa:	90 93 d6 06 	sts	0x06D6, r25	; 0x8006d6 <pucAlignedHeap.2084+0x1>
    17fe:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <pucAlignedHeap.2084>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1802:	20 91 d3 06 	lds	r18, 0x06D3	; 0x8006d3 <xNextFreeByte>
    1806:	30 91 d4 06 	lds	r19, 0x06D4	; 0x8006d4 <xNextFreeByte+0x1>
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	82 0f       	add	r24, r18
    1810:	93 1f       	adc	r25, r19
    1812:	87 3e       	cpi	r24, 0xE7	; 231
    1814:	93 40       	sbci	r25, 0x03	; 3
    1816:	38 f5       	brcc	.+78     	; 0x1866 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    1818:	20 91 d3 06 	lds	r18, 0x06D3	; 0x8006d3 <xNextFreeByte>
    181c:	30 91 d4 06 	lds	r19, 0x06D4	; 0x8006d4 <xNextFreeByte+0x1>
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	28 0f       	add	r18, r24
    1826:	39 1f       	adc	r19, r25
    1828:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <xNextFreeByte>
    182c:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1830:	82 17       	cp	r24, r18
    1832:	93 07       	cpc	r25, r19
    1834:	c0 f4       	brcc	.+48     	; 0x1866 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1836:	20 91 d5 06 	lds	r18, 0x06D5	; 0x8006d5 <pucAlignedHeap.2084>
    183a:	30 91 d6 06 	lds	r19, 0x06D6	; 0x8006d6 <pucAlignedHeap.2084+0x1>
    183e:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <xNextFreeByte>
    1842:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <xNextFreeByte+0x1>
    1846:	82 0f       	add	r24, r18
    1848:	93 1f       	adc	r25, r19
    184a:	9a 83       	std	Y+2, r25	; 0x02
    184c:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    184e:	20 91 d3 06 	lds	r18, 0x06D3	; 0x8006d3 <xNextFreeByte>
    1852:	30 91 d4 06 	lds	r19, 0x06D4	; 0x8006d4 <xNextFreeByte+0x1>
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	82 0f       	add	r24, r18
    185c:	93 1f       	adc	r25, r19
    185e:	90 93 d4 06 	sts	0x06D4, r25	; 0x8006d4 <xNextFreeByte+0x1>
    1862:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1866:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	08 95       	ret

0000187c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	00 d0       	rcall	.+0      	; 0x1882 <vPortFree+0x6>
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	9a 83       	std	Y+2, r25	; 0x02
    1888:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    188a:	00 00       	nop
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	08 95       	ret

00001896 <_serial_tx_int_on>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	00 d0       	rcall	.+0      	; 0x189c <_serial_tx_int_on+0x6>
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	9a 81       	ldd	r25, Y+2	; 0x02
    18a8:	05 97       	sbiw	r24, 0x05	; 5
    18aa:	29 81       	ldd	r18, Y+1	; 0x01
    18ac:	3a 81       	ldd	r19, Y+2	; 0x02
    18ae:	25 50       	subi	r18, 0x05	; 5
    18b0:	31 09       	sbc	r19, r1
    18b2:	f9 01       	movw	r30, r18
    18b4:	20 81       	ld	r18, Z
    18b6:	20 62       	ori	r18, 0x20	; 32
    18b8:	fc 01       	movw	r30, r24
    18ba:	20 83       	st	Z, r18
    18bc:	00 00       	nop
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	08 95       	ret

000018c8 <serial_new_instance>:
    18c8:	8f 92       	push	r8
    18ca:	9f 92       	push	r9
    18cc:	af 92       	push	r10
    18ce:	bf 92       	push	r11
    18d0:	cf 92       	push	r12
    18d2:	df 92       	push	r13
    18d4:	ef 92       	push	r14
    18d6:	0f 93       	push	r16
    18d8:	1f 93       	push	r17
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	61 97       	sbiw	r28, 0x11	; 17
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	8c 83       	std	Y+4, r24	; 0x04
    18f0:	4d 83       	std	Y+5, r20	; 0x05
    18f2:	5e 83       	std	Y+6, r21	; 0x06
    18f4:	6f 83       	std	Y+7, r22	; 0x07
    18f6:	78 87       	std	Y+8, r23	; 0x08
    18f8:	29 87       	std	Y+9, r18	; 0x09
    18fa:	0a 87       	std	Y+10, r16	; 0x0a
    18fc:	eb 86       	std	Y+11, r14	; 0x0b
    18fe:	dd 86       	std	Y+13, r13	; 0x0d
    1900:	cc 86       	std	Y+12, r12	; 0x0c
    1902:	bf 86       	std	Y+15, r11	; 0x0f
    1904:	ae 86       	std	Y+14, r10	; 0x0e
    1906:	99 8a       	std	Y+17, r9	; 0x11
    1908:	88 8a       	std	Y+16, r8	; 0x10
    190a:	88 e0       	ldi	r24, 0x08	; 8
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <malloc>
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	8c 81       	ldd	r24, Y+4	; 0x04
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	89 52       	subi	r24, 0x29	; 41
    1922:	99 4f       	sbci	r25, 0xF9	; 249
    1924:	29 81       	ldd	r18, Y+1	; 0x01
    1926:	3a 81       	ldd	r19, Y+2	; 0x02
    1928:	fc 01       	movw	r30, r24
    192a:	31 83       	std	Z+1, r19	; 0x01
    192c:	20 83       	st	Z, r18
    192e:	8c 81       	ldd	r24, Y+4	; 0x04
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	8a 5f       	subi	r24, 0xFA	; 250
    193a:	9e 4f       	sbci	r25, 0xFE	; 254
    193c:	fc 01       	movw	r30, r24
    193e:	20 81       	ld	r18, Z
    1940:	31 81       	ldd	r19, Z+1	; 0x01
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	9a 81       	ldd	r25, Y+2	; 0x02
    1946:	fc 01       	movw	r30, r24
    1948:	31 83       	std	Z+1, r19	; 0x01
    194a:	20 83       	st	Z, r18
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	2e 85       	ldd	r18, Y+14	; 0x0e
    1952:	3f 85       	ldd	r19, Y+15	; 0x0f
    1954:	fc 01       	movw	r30, r24
    1956:	33 83       	std	Z+3, r19	; 0x03
    1958:	22 83       	std	Z+2, r18	; 0x02
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1960:	3d 85       	ldd	r19, Y+13	; 0x0d
    1962:	fc 01       	movw	r30, r24
    1964:	35 83       	std	Z+5, r19	; 0x05
    1966:	24 83       	std	Z+4, r18	; 0x04
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	9a 81       	ldd	r25, Y+2	; 0x02
    196c:	28 89       	ldd	r18, Y+16	; 0x10
    196e:	39 89       	ldd	r19, Y+17	; 0x11
    1970:	fc 01       	movw	r30, r24
    1972:	37 83       	std	Z+7, r19	; 0x07
    1974:	26 83       	std	Z+6, r18	; 0x06
    1976:	8f e5       	ldi	r24, 0x5F	; 95
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	fc 01       	movw	r30, r24
    197c:	80 81       	ld	r24, Z
    197e:	8b 83       	std	Y+3, r24	; 0x03
    1980:	f8 94       	cli
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	fc 01       	movw	r30, r24
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	06 97       	sbiw	r24, 0x06	; 6
    198e:	29 81       	ldd	r18, Y+1	; 0x01
    1990:	3a 81       	ldd	r19, Y+2	; 0x02
    1992:	f9 01       	movw	r30, r18
    1994:	20 81       	ld	r18, Z
    1996:	31 81       	ldd	r19, Z+1	; 0x01
    1998:	26 50       	subi	r18, 0x06	; 6
    199a:	31 09       	sbc	r19, r1
    199c:	f9 01       	movw	r30, r18
    199e:	20 81       	ld	r18, Z
    19a0:	22 60       	ori	r18, 0x02	; 2
    19a2:	fc 01       	movw	r30, r24
    19a4:	20 83       	st	Z, r18
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	fc 01       	movw	r30, r24
    19ac:	80 81       	ld	r24, Z
    19ae:	91 81       	ldd	r25, Z+1	; 0x01
    19b0:	8c 01       	movw	r16, r24
    19b2:	02 50       	subi	r16, 0x02	; 2
    19b4:	11 09       	sbc	r17, r1
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	af 81       	ldd	r26, Y+7	; 0x07
    19bc:	b8 85       	ldd	r27, Y+8	; 0x08
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	aa 1f       	adc	r26, r26
    19c4:	bb 1f       	adc	r27, r27
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	aa 1f       	adc	r26, r26
    19cc:	bb 1f       	adc	r27, r27
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	aa 1f       	adc	r26, r26
    19d4:	bb 1f       	adc	r27, r27
    19d6:	9c 01       	movw	r18, r24
    19d8:	ad 01       	movw	r20, r26
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	a1 ee       	ldi	r26, 0xE1	; 225
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	bc 01       	movw	r22, r24
    19e4:	cd 01       	movw	r24, r26
    19e6:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__udivmodsi4>
    19ea:	da 01       	movw	r26, r20
    19ec:	c9 01       	movw	r24, r18
    19ee:	81 50       	subi	r24, 0x01	; 1
    19f0:	f8 01       	movw	r30, r16
    19f2:	80 83       	st	Z, r24
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	9a 81       	ldd	r25, Y+2	; 0x02
    19f8:	fc 01       	movw	r30, r24
    19fa:	80 81       	ld	r24, Z
    19fc:	91 81       	ldd	r25, Z+1	; 0x01
    19fe:	05 97       	sbiw	r24, 0x05	; 5
    1a00:	28 e9       	ldi	r18, 0x98	; 152
    1a02:	fc 01       	movw	r30, r24
    1a04:	20 83       	st	Z, r18
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	80 81       	ld	r24, Z
    1a0e:	91 81       	ldd	r25, Z+1	; 0x01
    1a10:	04 97       	sbiw	r24, 0x04	; 4
    1a12:	26 e0       	ldi	r18, 0x06	; 6
    1a14:	fc 01       	movw	r30, r24
    1a16:	20 83       	st	Z, r18
    1a18:	8f e5       	ldi	r24, 0x5F	; 95
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1e:	fc 01       	movw	r30, r24
    1a20:	20 83       	st	Z, r18
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	61 96       	adiw	r28, 0x11	; 17
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ef 90       	pop	r14
    1a3c:	df 90       	pop	r13
    1a3e:	cf 90       	pop	r12
    1a40:	bf 90       	pop	r11
    1a42:	af 90       	pop	r10
    1a44:	9f 90       	pop	r9
    1a46:	8f 90       	pop	r8
    1a48:	08 95       	ret

00001a4a <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <serial_send_bytes+0x6>
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <serial_send_bytes+0x8>
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <serial_send_bytes+0xa>
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	9b 83       	std	Y+3, r25	; 0x03
    1a5a:	8a 83       	std	Y+2, r24	; 0x02
    1a5c:	7d 83       	std	Y+5, r23	; 0x05
    1a5e:	6c 83       	std	Y+4, r22	; 0x04
    1a60:	4e 83       	std	Y+6, r20	; 0x06
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	9b 81       	ldd	r25, Y+3	; 0x03
    1a66:	fc 01       	movw	r30, r24
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	93 81       	ldd	r25, Z+3	; 0x03
    1a6c:	89 2b       	or	r24, r25
    1a6e:	a9 f0       	breq	.+42     	; 0x1a9a <serial_send_bytes+0x50>
    1a70:	8e 81       	ldd	r24, Y+6	; 0x06
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	fc 01       	movw	r30, r24
    1a82:	82 a1       	ldd	r24, Z+34	; 0x22
    1a84:	88 2f       	mov	r24, r24
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	40 e2       	ldi	r20, 0x20	; 32
    1a8a:	50 e0       	ldi	r21, 0x00	; 0
    1a8c:	ba 01       	movw	r22, r20
    1a8e:	68 1b       	sub	r22, r24
    1a90:	79 0b       	sbc	r23, r25
    1a92:	cb 01       	movw	r24, r22
    1a94:	82 17       	cp	r24, r18
    1a96:	93 07       	cpc	r25, r19
    1a98:	54 f0       	brlt	.+20     	; 0x1aae <serial_send_bytes+0x64>
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	82 81       	ldd	r24, Z+2	; 0x02
    1aa2:	93 81       	ldd	r25, Z+3	; 0x03
    1aa4:	89 2b       	or	r24, r25
    1aa6:	29 f4       	brne	.+10     	; 0x1ab2 <serial_send_bytes+0x68>
    1aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aaa:	82 30       	cpi	r24, 0x02	; 2
    1aac:	10 f0       	brcs	.+4      	; 0x1ab2 <serial_send_bytes+0x68>
		return BUFFER_FULL;
    1aae:	82 e0       	ldi	r24, 0x02	; 2
    1ab0:	22 c0       	rjmp	.+68     	; 0x1af6 <serial_send_bytes+0xac>
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    1ab2:	19 82       	std	Y+1, r1	; 0x01
    1ab4:	14 c0       	rjmp	.+40     	; 0x1ade <serial_send_bytes+0x94>
		buffer_put_item(handle->_tx_buf, buf[i]);
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	2c 81       	ldd	r18, Y+4	; 0x04
    1abe:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac0:	82 0f       	add	r24, r18
    1ac2:	93 1f       	adc	r25, r19
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	20 81       	ld	r18, Z
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	9b 81       	ldd	r25, Y+3	; 0x03
    1acc:	fc 01       	movw	r30, r24
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	93 81       	ldd	r25, Z+3	; 0x03
    1ad2:	62 2f       	mov	r22, r18
    1ad4:	0e 94 44 07 	call	0xe88	; 0xe88 <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	8f 5f       	subi	r24, 0xFF	; 255
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	99 81       	ldd	r25, Y+1	; 0x01
    1ae0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae2:	98 17       	cp	r25, r24
    1ae4:	40 f3       	brcs	.-48     	; 0x1ab6 <serial_send_bytes+0x6c>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aea:	fc 01       	movw	r30, r24
    1aec:	80 81       	ld	r24, Z
    1aee:	91 81       	ldd	r25, Z+1	; 0x01
    1af0:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_serial_tx_int_on>
	return BUFFER_OK;
    1af4:	80 e0       	ldi	r24, 0x00	; 0
}
    1af6:	26 96       	adiw	r28, 0x06	; 6
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	08 95       	ret

00001b08 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    1b08:	1f 92       	push	r1
    1b0a:	0f 92       	push	r0
    1b0c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b10:	0f 92       	push	r0
    1b12:	11 24       	eor	r1, r1
    1b14:	2f 93       	push	r18
    1b16:	3f 93       	push	r19
    1b18:	4f 93       	push	r20
    1b1a:	5f 93       	push	r21
    1b1c:	6f 93       	push	r22
    1b1e:	7f 93       	push	r23
    1b20:	8f 93       	push	r24
    1b22:	9f 93       	push	r25
    1b24:	af 93       	push	r26
    1b26:	bf 93       	push	r27
    1b28:	ef 93       	push	r30
    1b2a:	ff 93       	push	r31
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	1f 92       	push	r1
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1b36:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <_ser_handle>
    1b3a:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <_ser_handle+0x1>
    1b3e:	89 2b       	or	r24, r25
    1b40:	31 f1       	breq	.+76     	; 0x1b8e <__vector_20+0x86>
		item = UDR0;
    1b42:	86 ec       	ldi	r24, 0xC6	; 198
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	fc 01       	movw	r30, r24
    1b48:	80 81       	ld	r24, Z
    1b4a:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    1b4c:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <_ser_handle>
    1b50:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <_ser_handle+0x1>
    1b54:	fc 01       	movw	r30, r24
    1b56:	84 81       	ldd	r24, Z+4	; 0x04
    1b58:	95 81       	ldd	r25, Z+5	; 0x05
    1b5a:	69 81       	ldd	r22, Y+1	; 0x01
    1b5c:	0e 94 44 07 	call	0xe88	; 0xe88 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    1b60:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <_ser_handle>
    1b64:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <_ser_handle+0x1>
    1b68:	fc 01       	movw	r30, r24
    1b6a:	86 81       	ldd	r24, Z+6	; 0x06
    1b6c:	97 81       	ldd	r25, Z+7	; 0x07
    1b6e:	89 2b       	or	r24, r25
    1b70:	71 f0       	breq	.+28     	; 0x1b8e <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    1b72:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <_ser_handle>
    1b76:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <_ser_handle+0x1>
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	26 81       	ldd	r18, Z+6	; 0x06
    1b7e:	37 81       	ldd	r19, Z+7	; 0x07
    1b80:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <_ser_handle>
    1b84:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <_ser_handle+0x1>
    1b88:	69 81       	ldd	r22, Y+1	; 0x01
    1b8a:	f9 01       	movw	r30, r18
    1b8c:	09 95       	icall
		}
	}
}
    1b8e:	00 00       	nop
    1b90:	0f 90       	pop	r0
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	ff 91       	pop	r31
    1b98:	ef 91       	pop	r30
    1b9a:	bf 91       	pop	r27
    1b9c:	af 91       	pop	r26
    1b9e:	9f 91       	pop	r25
    1ba0:	8f 91       	pop	r24
    1ba2:	7f 91       	pop	r23
    1ba4:	6f 91       	pop	r22
    1ba6:	5f 91       	pop	r21
    1ba8:	4f 91       	pop	r20
    1baa:	3f 91       	pop	r19
    1bac:	2f 91       	pop	r18
    1bae:	0f 90       	pop	r0
    1bb0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1bb4:	0f 90       	pop	r0
    1bb6:	1f 90       	pop	r1
    1bb8:	18 95       	reti

00001bba <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    1bba:	1f 92       	push	r1
    1bbc:	0f 92       	push	r0
    1bbe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1bc2:	0f 92       	push	r0
    1bc4:	11 24       	eor	r1, r1
    1bc6:	2f 93       	push	r18
    1bc8:	3f 93       	push	r19
    1bca:	4f 93       	push	r20
    1bcc:	5f 93       	push	r21
    1bce:	6f 93       	push	r22
    1bd0:	7f 93       	push	r23
    1bd2:	8f 93       	push	r24
    1bd4:	9f 93       	push	r25
    1bd6:	af 93       	push	r26
    1bd8:	bf 93       	push	r27
    1bda:	ef 93       	push	r30
    1bdc:	ff 93       	push	r31
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	1f 92       	push	r1
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1be8:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <_ser_handle>
    1bec:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <_ser_handle+0x1>
    1bf0:	89 2b       	or	r24, r25
    1bf2:	f9 f0       	breq	.+62     	; 0x1c32 <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    1bf4:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <_ser_handle>
    1bf8:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <_ser_handle+0x1>
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	9e 01       	movw	r18, r28
    1c04:	2f 5f       	subi	r18, 0xFF	; 255
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	b9 01       	movw	r22, r18
    1c0a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <buffer_get_item>
    1c0e:	88 23       	and	r24, r24
    1c10:	31 f4       	brne	.+12     	; 0x1c1e <__vector_21+0x64>
			UDR0 = item;
    1c12:	86 ec       	ldi	r24, 0xC6	; 198
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	29 81       	ldd	r18, Y+1	; 0x01
    1c18:	fc 01       	movw	r30, r24
    1c1a:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    1c1c:	13 c0       	rjmp	.+38     	; 0x1c44 <__vector_21+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
			UDR0 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    1c1e:	81 ec       	ldi	r24, 0xC1	; 193
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	21 ec       	ldi	r18, 0xC1	; 193
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	f9 01       	movw	r30, r18
    1c28:	20 81       	ld	r18, Z
    1c2a:	2f 7d       	andi	r18, 0xDF	; 223
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
	}
}
    1c30:	09 c0       	rjmp	.+18     	; 0x1c44 <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    1c32:	81 ec       	ldi	r24, 0xC1	; 193
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	21 ec       	ldi	r18, 0xC1	; 193
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	f9 01       	movw	r30, r18
    1c3c:	20 81       	ld	r18, Z
    1c3e:	2f 7d       	andi	r18, 0xDF	; 223
    1c40:	fc 01       	movw	r30, r24
    1c42:	20 83       	st	Z, r18
	}
}
    1c44:	00 00       	nop
    1c46:	0f 90       	pop	r0
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	ff 91       	pop	r31
    1c4e:	ef 91       	pop	r30
    1c50:	bf 91       	pop	r27
    1c52:	af 91       	pop	r26
    1c54:	9f 91       	pop	r25
    1c56:	8f 91       	pop	r24
    1c58:	7f 91       	pop	r23
    1c5a:	6f 91       	pop	r22
    1c5c:	5f 91       	pop	r21
    1c5e:	4f 91       	pop	r20
    1c60:	3f 91       	pop	r19
    1c62:	2f 91       	pop	r18
    1c64:	0f 90       	pop	r0
    1c66:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c6a:	0f 90       	pop	r0
    1c6c:	1f 90       	pop	r1
    1c6e:	18 95       	reti

00001c70 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    1c70:	1f 92       	push	r1
    1c72:	0f 92       	push	r0
    1c74:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c78:	0f 92       	push	r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	2f 93       	push	r18
    1c7e:	3f 93       	push	r19
    1c80:	4f 93       	push	r20
    1c82:	5f 93       	push	r21
    1c84:	6f 93       	push	r22
    1c86:	7f 93       	push	r23
    1c88:	8f 93       	push	r24
    1c8a:	9f 93       	push	r25
    1c8c:	af 93       	push	r26
    1c8e:	bf 93       	push	r27
    1c90:	ef 93       	push	r30
    1c92:	ff 93       	push	r31
    1c94:	cf 93       	push	r28
    1c96:	df 93       	push	r29
    1c98:	1f 92       	push	r1
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1c9e:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <_ser_handle+0x2>
    1ca2:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <_ser_handle+0x3>
    1ca6:	89 2b       	or	r24, r25
    1ca8:	31 f1       	breq	.+76     	; 0x1cf6 <__vector_28+0x86>
		item = UDR1;
    1caa:	8e ec       	ldi	r24, 0xCE	; 206
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	fc 01       	movw	r30, r24
    1cb0:	80 81       	ld	r24, Z
    1cb2:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    1cb4:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <_ser_handle+0x2>
    1cb8:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <_ser_handle+0x3>
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	84 81       	ldd	r24, Z+4	; 0x04
    1cc0:	95 81       	ldd	r25, Z+5	; 0x05
    1cc2:	69 81       	ldd	r22, Y+1	; 0x01
    1cc4:	0e 94 44 07 	call	0xe88	; 0xe88 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    1cc8:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <_ser_handle+0x2>
    1ccc:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <_ser_handle+0x3>
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	86 81       	ldd	r24, Z+6	; 0x06
    1cd4:	97 81       	ldd	r25, Z+7	; 0x07
    1cd6:	89 2b       	or	r24, r25
    1cd8:	71 f0       	breq	.+28     	; 0x1cf6 <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    1cda:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <_ser_handle+0x2>
    1cde:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <_ser_handle+0x3>
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	26 81       	ldd	r18, Z+6	; 0x06
    1ce6:	37 81       	ldd	r19, Z+7	; 0x07
    1ce8:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <_ser_handle+0x2>
    1cec:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <_ser_handle+0x3>
    1cf0:	69 81       	ldd	r22, Y+1	; 0x01
    1cf2:	f9 01       	movw	r30, r18
    1cf4:	09 95       	icall
		}
	}
}
    1cf6:	00 00       	nop
    1cf8:	0f 90       	pop	r0
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	ff 91       	pop	r31
    1d00:	ef 91       	pop	r30
    1d02:	bf 91       	pop	r27
    1d04:	af 91       	pop	r26
    1d06:	9f 91       	pop	r25
    1d08:	8f 91       	pop	r24
    1d0a:	7f 91       	pop	r23
    1d0c:	6f 91       	pop	r22
    1d0e:	5f 91       	pop	r21
    1d10:	4f 91       	pop	r20
    1d12:	3f 91       	pop	r19
    1d14:	2f 91       	pop	r18
    1d16:	0f 90       	pop	r0
    1d18:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1d1c:	0f 90       	pop	r0
    1d1e:	1f 90       	pop	r1
    1d20:	18 95       	reti

00001d22 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    1d22:	1f 92       	push	r1
    1d24:	0f 92       	push	r0
    1d26:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1d2a:	0f 92       	push	r0
    1d2c:	11 24       	eor	r1, r1
    1d2e:	2f 93       	push	r18
    1d30:	3f 93       	push	r19
    1d32:	4f 93       	push	r20
    1d34:	5f 93       	push	r21
    1d36:	6f 93       	push	r22
    1d38:	7f 93       	push	r23
    1d3a:	8f 93       	push	r24
    1d3c:	9f 93       	push	r25
    1d3e:	af 93       	push	r26
    1d40:	bf 93       	push	r27
    1d42:	ef 93       	push	r30
    1d44:	ff 93       	push	r31
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	1f 92       	push	r1
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1d50:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <_ser_handle+0x2>
    1d54:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <_ser_handle+0x3>
    1d58:	89 2b       	or	r24, r25
    1d5a:	f9 f0       	breq	.+62     	; 0x1d9a <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1d5c:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <_ser_handle+0x2>
    1d60:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <_ser_handle+0x3>
    1d64:	fc 01       	movw	r30, r24
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	9e 01       	movw	r18, r28
    1d6c:	2f 5f       	subi	r18, 0xFF	; 255
    1d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d70:	b9 01       	movw	r22, r18
    1d72:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <buffer_get_item>
    1d76:	88 23       	and	r24, r24
    1d78:	31 f4       	brne	.+12     	; 0x1d86 <__vector_29+0x64>
			UDR1 = item;
    1d7a:	8e ec       	ldi	r24, 0xCE	; 206
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	29 81       	ldd	r18, Y+1	; 0x01
    1d80:	fc 01       	movw	r30, r24
    1d82:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    1d84:	13 c0       	rjmp	.+38     	; 0x1dac <__vector_29+0x8a>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
			UDR1 = item;
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    1d86:	89 ec       	ldi	r24, 0xC9	; 201
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	29 ec       	ldi	r18, 0xC9	; 201
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	f9 01       	movw	r30, r18
    1d90:	20 81       	ld	r18, Z
    1d92:	2f 7d       	andi	r18, 0xDF	; 223
    1d94:	fc 01       	movw	r30, r24
    1d96:	20 83       	st	Z, r18
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
	}
}
    1d98:	09 c0       	rjmp	.+18     	; 0x1dac <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    1d9a:	89 ec       	ldi	r24, 0xC9	; 201
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	29 ec       	ldi	r18, 0xC9	; 201
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	f9 01       	movw	r30, r18
    1da4:	20 81       	ld	r18, Z
    1da6:	2f 7d       	andi	r18, 0xDF	; 223
    1da8:	fc 01       	movw	r30, r24
    1daa:	20 83       	st	Z, r18
	}
}
    1dac:	00 00       	nop
    1dae:	0f 90       	pop	r0
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	ff 91       	pop	r31
    1db6:	ef 91       	pop	r30
    1db8:	bf 91       	pop	r27
    1dba:	af 91       	pop	r26
    1dbc:	9f 91       	pop	r25
    1dbe:	8f 91       	pop	r24
    1dc0:	7f 91       	pop	r23
    1dc2:	6f 91       	pop	r22
    1dc4:	5f 91       	pop	r21
    1dc6:	4f 91       	pop	r20
    1dc8:	3f 91       	pop	r19
    1dca:	2f 91       	pop	r18
    1dcc:	0f 90       	pop	r0
    1dce:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1dd2:	0f 90       	pop	r0
    1dd4:	1f 90       	pop	r1
    1dd6:	18 95       	reti

00001dd8 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1dd8:	cf 93       	push	r28
    1dda:	df 93       	push	r29
    1ddc:	00 d0       	rcall	.+0      	; 0x1dde <xQueueGenericReset+0x6>
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <xQueueGenericReset+0x8>
    1de0:	1f 92       	push	r1
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	9c 83       	std	Y+4, r25	; 0x04
    1de8:	8b 83       	std	Y+3, r24	; 0x03
    1dea:	6d 83       	std	Y+5, r22	; 0x05
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9c 81       	ldd	r25, Y+4	; 0x04
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	0f 92       	push	r0
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfe:	fc 01       	movw	r30, r24
    1e00:	80 81       	ld	r24, Z
    1e02:	91 81       	ldd	r25, Z+1	; 0x01
    1e04:	29 81       	ldd	r18, Y+1	; 0x01
    1e06:	3a 81       	ldd	r19, Y+2	; 0x02
    1e08:	f9 01       	movw	r30, r18
    1e0a:	23 8d       	ldd	r18, Z+27	; 0x1b
    1e0c:	42 2f       	mov	r20, r18
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
    1e10:	29 81       	ldd	r18, Y+1	; 0x01
    1e12:	3a 81       	ldd	r19, Y+2	; 0x02
    1e14:	f9 01       	movw	r30, r18
    1e16:	24 8d       	ldd	r18, Z+28	; 0x1c
    1e18:	22 2f       	mov	r18, r18
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	42 9f       	mul	r20, r18
    1e1e:	b0 01       	movw	r22, r0
    1e20:	43 9f       	mul	r20, r19
    1e22:	70 0d       	add	r23, r0
    1e24:	52 9f       	mul	r21, r18
    1e26:	70 0d       	add	r23, r0
    1e28:	11 24       	eor	r1, r1
    1e2a:	9b 01       	movw	r18, r22
    1e2c:	28 0f       	add	r18, r24
    1e2e:	39 1f       	adc	r19, r25
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	fc 01       	movw	r30, r24
    1e36:	33 83       	std	Z+3, r19	; 0x03
    1e38:	22 83       	std	Z+2, r18	; 0x02
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3e:	fc 01       	movw	r30, r24
    1e40:	12 8e       	std	Z+26, r1	; 0x1a
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
    1e46:	fc 01       	movw	r30, r24
    1e48:	20 81       	ld	r18, Z
    1e4a:	31 81       	ldd	r19, Z+1	; 0x01
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e50:	fc 01       	movw	r30, r24
    1e52:	35 83       	std	Z+5, r19	; 0x05
    1e54:	24 83       	std	Z+4, r18	; 0x04
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	80 81       	ld	r24, Z
    1e5e:	91 81       	ldd	r25, Z+1	; 0x01
    1e60:	29 81       	ldd	r18, Y+1	; 0x01
    1e62:	3a 81       	ldd	r19, Y+2	; 0x02
    1e64:	f9 01       	movw	r30, r18
    1e66:	23 8d       	ldd	r18, Z+27	; 0x1b
    1e68:	22 2f       	mov	r18, r18
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	a9 01       	movw	r20, r18
    1e6e:	41 50       	subi	r20, 0x01	; 1
    1e70:	51 09       	sbc	r21, r1
    1e72:	29 81       	ldd	r18, Y+1	; 0x01
    1e74:	3a 81       	ldd	r19, Y+2	; 0x02
    1e76:	f9 01       	movw	r30, r18
    1e78:	24 8d       	ldd	r18, Z+28	; 0x1c
    1e7a:	22 2f       	mov	r18, r18
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	42 9f       	mul	r20, r18
    1e80:	b0 01       	movw	r22, r0
    1e82:	43 9f       	mul	r20, r19
    1e84:	70 0d       	add	r23, r0
    1e86:	52 9f       	mul	r21, r18
    1e88:	70 0d       	add	r23, r0
    1e8a:	11 24       	eor	r1, r1
    1e8c:	9b 01       	movw	r18, r22
    1e8e:	28 0f       	add	r18, r24
    1e90:	39 1f       	adc	r19, r25
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	9a 81       	ldd	r25, Y+2	; 0x02
    1e96:	fc 01       	movw	r30, r24
    1e98:	37 83       	std	Z+7, r19	; 0x07
    1e9a:	26 83       	std	Z+6, r18	; 0x06
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea0:	2f ef       	ldi	r18, 0xFF	; 255
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	25 8f       	std	Z+29, r18	; 0x1d
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eaa:	2f ef       	ldi	r18, 0xFF	; 255
    1eac:	fc 01       	movw	r30, r24
    1eae:	26 8f       	std	Z+30, r18	; 0x1e
    1eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb2:	88 23       	and	r24, r24
    1eb4:	81 f4       	brne	.+32     	; 0x1ed6 <xQueueGenericReset+0xfe>
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	fc 01       	movw	r30, r24
    1ebc:	80 85       	ldd	r24, Z+8	; 0x08
    1ebe:	88 23       	and	r24, r24
    1ec0:	a1 f0       	breq	.+40     	; 0x1eea <xQueueGenericReset+0x112>
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec6:	08 96       	adiw	r24, 0x08	; 8
    1ec8:	0e 94 28 17 	call	0x2e50	; 0x2e50 <xTaskRemoveFromEventList>
    1ecc:	88 23       	and	r24, r24
    1ece:	69 f0       	breq	.+26     	; 0x1eea <xQueueGenericReset+0x112>
    1ed0:	0e 94 cb 0a 	call	0x1596	; 0x1596 <vPortYield>
    1ed4:	0a c0       	rjmp	.+20     	; 0x1eea <xQueueGenericReset+0x112>
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eda:	08 96       	adiw	r24, 0x08	; 8
    1edc:	0e 94 87 07 	call	0xf0e	; 0xf0e <vListInitialise>
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee4:	41 96       	adiw	r24, 0x11	; 17
    1ee6:	0e 94 87 07 	call	0xf0e	; 0xf0e <vListInitialise>
    1eea:	0f 90       	pop	r0
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	08 95       	ret

00001f00 <xQueueGenericCreate>:
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	29 97       	sbiw	r28, 0x09	; 9
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	8f 83       	std	Y+7, r24	; 0x07
    1f1a:	68 87       	std	Y+8, r22	; 0x08
    1f1c:	49 87       	std	Y+9, r20	; 0x09
    1f1e:	88 85       	ldd	r24, Y+8	; 0x08
    1f20:	88 23       	and	r24, r24
    1f22:	19 f4       	brne	.+6      	; 0x1f2a <xQueueGenericCreate+0x2a>
    1f24:	1a 82       	std	Y+2, r1	; 0x02
    1f26:	19 82       	std	Y+1, r1	; 0x01
    1f28:	0f c0       	rjmp	.+30     	; 0x1f48 <xQueueGenericCreate+0x48>
    1f2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2c:	48 2f       	mov	r20, r24
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	88 85       	ldd	r24, Y+8	; 0x08
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	42 9f       	mul	r20, r18
    1f38:	c0 01       	movw	r24, r0
    1f3a:	43 9f       	mul	r20, r19
    1f3c:	90 0d       	add	r25, r0
    1f3e:	52 9f       	mul	r21, r18
    1f40:	90 0d       	add	r25, r0
    1f42:	11 24       	eor	r1, r1
    1f44:	9a 83       	std	Y+2, r25	; 0x02
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4c:	81 96       	adiw	r24, 0x21	; 33
    1f4e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <pvPortMalloc>
    1f52:	9c 83       	std	Y+4, r25	; 0x04
    1f54:	8b 83       	std	Y+3, r24	; 0x03
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5a:	89 2b       	or	r24, r25
    1f5c:	81 f0       	breq	.+32     	; 0x1f7e <xQueueGenericCreate+0x7e>
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	9c 81       	ldd	r25, Y+4	; 0x04
    1f62:	81 96       	adiw	r24, 0x21	; 33
    1f64:	9e 83       	std	Y+6, r25	; 0x06
    1f66:	8d 83       	std	Y+5, r24	; 0x05
    1f68:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f70:	89 01       	movw	r16, r18
    1f72:	29 85       	ldd	r18, Y+9	; 0x09
    1f74:	ac 01       	movw	r20, r24
    1f76:	68 85       	ldd	r22, Y+8	; 0x08
    1f78:	8f 81       	ldd	r24, Y+7	; 0x07
    1f7a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <prvInitialiseNewQueue>
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	29 96       	adiw	r28, 0x09	; 9
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	1f 91       	pop	r17
    1f94:	0f 91       	pop	r16
    1f96:	08 95       	ret

00001f98 <prvInitialiseNewQueue>:
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	27 97       	sbiw	r28, 0x07	; 7
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	6a 83       	std	Y+2, r22	; 0x02
    1fb4:	5c 83       	std	Y+4, r21	; 0x04
    1fb6:	4b 83       	std	Y+3, r20	; 0x03
    1fb8:	2d 83       	std	Y+5, r18	; 0x05
    1fba:	1f 83       	std	Y+7, r17	; 0x07
    1fbc:	0e 83       	std	Y+6, r16	; 0x06
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	88 23       	and	r24, r24
    1fc2:	41 f4       	brne	.+16     	; 0x1fd4 <prvInitialiseNewQueue+0x3c>
    1fc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc8:	2e 81       	ldd	r18, Y+6	; 0x06
    1fca:	3f 81       	ldd	r19, Y+7	; 0x07
    1fcc:	fc 01       	movw	r30, r24
    1fce:	31 83       	std	Z+1, r19	; 0x01
    1fd0:	20 83       	st	Z, r18
    1fd2:	07 c0       	rjmp	.+14     	; 0x1fe2 <prvInitialiseNewQueue+0x4a>
    1fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fda:	3c 81       	ldd	r19, Y+4	; 0x04
    1fdc:	fc 01       	movw	r30, r24
    1fde:	31 83       	std	Z+1, r19	; 0x01
    1fe0:	20 83       	st	Z, r18
    1fe2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe6:	29 81       	ldd	r18, Y+1	; 0x01
    1fe8:	fc 01       	movw	r30, r24
    1fea:	23 8f       	std	Z+27, r18	; 0x1b
    1fec:	8e 81       	ldd	r24, Y+6	; 0x06
    1fee:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	24 8f       	std	Z+28, r18	; 0x1c
    1ff6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff8:	9f 81       	ldd	r25, Y+7	; 0x07
    1ffa:	61 e0       	ldi	r22, 0x01	; 1
    1ffc:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <xQueueGenericReset>
    2000:	8e 81       	ldd	r24, Y+6	; 0x06
    2002:	9f 81       	ldd	r25, Y+7	; 0x07
    2004:	2d 81       	ldd	r18, Y+5	; 0x05
    2006:	fc 01       	movw	r30, r24
    2008:	20 a3       	std	Z+32, r18	; 0x20
    200a:	00 00       	nop
    200c:	27 96       	adiw	r28, 0x07	; 7
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	1f 91       	pop	r17
    201e:	0f 91       	pop	r16
    2020:	08 95       	ret

00002022 <prvInitialiseMutex>:
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	00 d0       	rcall	.+0      	; 0x2028 <prvInitialiseMutex+0x6>
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	89 2b       	or	r24, r25
    2036:	b9 f0       	breq	.+46     	; 0x2066 <prvInitialiseMutex+0x44>
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	9a 81       	ldd	r25, Y+2	; 0x02
    203c:	fc 01       	movw	r30, r24
    203e:	13 82       	std	Z+3, r1	; 0x03
    2040:	12 82       	std	Z+2, r1	; 0x02
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	fc 01       	movw	r30, r24
    2048:	11 82       	std	Z+1, r1	; 0x01
    204a:	10 82       	st	Z, r1
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	9a 81       	ldd	r25, Y+2	; 0x02
    2050:	fc 01       	movw	r30, r24
    2052:	16 82       	std	Z+6, r1	; 0x06
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	60 e0       	ldi	r22, 0x00	; 0
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	0e 94 59 10 	call	0x20b2	; 0x20b2 <xQueueGenericSend>
    2066:	00 00       	nop
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	08 95       	ret

00002072 <xQueueCreateMutex>:
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	00 d0       	rcall	.+0      	; 0x2078 <xQueueCreateMutex+0x6>
    2078:	00 d0       	rcall	.+0      	; 0x207a <xQueueCreateMutex+0x8>
    207a:	1f 92       	push	r1
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	8d 83       	std	Y+5, r24	; 0x05
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	1a 82       	std	Y+2, r1	; 0x02
    2088:	4d 81       	ldd	r20, Y+5	; 0x05
    208a:	6a 81       	ldd	r22, Y+2	; 0x02
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <xQueueGenericCreate>
    2092:	9c 83       	std	Y+4, r25	; 0x04
    2094:	8b 83       	std	Y+3, r24	; 0x03
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	9c 81       	ldd	r25, Y+4	; 0x04
    209a:	0e 94 11 10 	call	0x2022	; 0x2022 <prvInitialiseMutex>
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	9c 81       	ldd	r25, Y+4	; 0x04
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	08 95       	ret

000020b2 <xQueueGenericSend>:
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	2e 97       	sbiw	r28, 0x0e	; 14
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	de bf       	out	0x3e, r29	; 62
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	cd bf       	out	0x3d, r28	; 61
    20c6:	99 87       	std	Y+9, r25	; 0x09
    20c8:	88 87       	std	Y+8, r24	; 0x08
    20ca:	7b 87       	std	Y+11, r23	; 0x0b
    20cc:	6a 87       	std	Y+10, r22	; 0x0a
    20ce:	5d 87       	std	Y+13, r21	; 0x0d
    20d0:	4c 87       	std	Y+12, r20	; 0x0c
    20d2:	2e 87       	std	Y+14, r18	; 0x0e
    20d4:	19 82       	std	Y+1, r1	; 0x01
    20d6:	88 85       	ldd	r24, Y+8	; 0x08
    20d8:	99 85       	ldd	r25, Y+9	; 0x09
    20da:	9b 83       	std	Y+3, r25	; 0x03
    20dc:	8a 83       	std	Y+2, r24	; 0x02
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	0f 92       	push	r0
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	9b 81       	ldd	r25, Y+3	; 0x03
    20e8:	fc 01       	movw	r30, r24
    20ea:	22 8d       	ldd	r18, Z+26	; 0x1a
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	9b 81       	ldd	r25, Y+3	; 0x03
    20f0:	fc 01       	movw	r30, r24
    20f2:	83 8d       	ldd	r24, Z+27	; 0x1b
    20f4:	28 17       	cp	r18, r24
    20f6:	18 f0       	brcs	.+6      	; 0x20fe <xQueueGenericSend+0x4c>
    20f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    20fa:	82 30       	cpi	r24, 0x02	; 2
    20fc:	11 f5       	brne	.+68     	; 0x2142 <xQueueGenericSend+0x90>
    20fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    2100:	3b 85       	ldd	r19, Y+11	; 0x0b
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	9b 81       	ldd	r25, Y+3	; 0x03
    2106:	4e 85       	ldd	r20, Y+14	; 0x0e
    2108:	b9 01       	movw	r22, r18
    210a:	0e 94 69 11 	call	0x22d2	; 0x22d2 <prvCopyDataToQueue>
    210e:	8c 83       	std	Y+4, r24	; 0x04
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	9b 81       	ldd	r25, Y+3	; 0x03
    2114:	fc 01       	movw	r30, r24
    2116:	81 89       	ldd	r24, Z+17	; 0x11
    2118:	88 23       	and	r24, r24
    211a:	51 f0       	breq	.+20     	; 0x2130 <xQueueGenericSend+0x7e>
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	9b 81       	ldd	r25, Y+3	; 0x03
    2120:	41 96       	adiw	r24, 0x11	; 17
    2122:	0e 94 28 17 	call	0x2e50	; 0x2e50 <xTaskRemoveFromEventList>
    2126:	88 23       	and	r24, r24
    2128:	41 f0       	breq	.+16     	; 0x213a <xQueueGenericSend+0x88>
    212a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <vPortYield>
    212e:	05 c0       	rjmp	.+10     	; 0x213a <xQueueGenericSend+0x88>
    2130:	8c 81       	ldd	r24, Y+4	; 0x04
    2132:	88 23       	and	r24, r24
    2134:	11 f0       	breq	.+4      	; 0x213a <xQueueGenericSend+0x88>
    2136:	0e 94 cb 0a 	call	0x1596	; 0x1596 <vPortYield>
    213a:	0f 90       	pop	r0
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	60 c0       	rjmp	.+192    	; 0x2202 <xQueueGenericSend+0x150>
    2142:	8c 85       	ldd	r24, Y+12	; 0x0c
    2144:	9d 85       	ldd	r25, Y+13	; 0x0d
    2146:	89 2b       	or	r24, r25
    2148:	21 f4       	brne	.+8      	; 0x2152 <xQueueGenericSend+0xa0>
    214a:	0f 90       	pop	r0
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	58 c0       	rjmp	.+176    	; 0x2202 <xQueueGenericSend+0x150>
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	88 23       	and	r24, r24
    2156:	31 f4       	brne	.+12     	; 0x2164 <xQueueGenericSend+0xb2>
    2158:	ce 01       	movw	r24, r28
    215a:	05 96       	adiw	r24, 0x05	; 5
    215c:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <vTaskSetTimeOutState>
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	0f 90       	pop	r0
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	0e 94 ee 14 	call	0x29dc	; 0x29dc <vTaskSuspendAll>
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	0f 92       	push	r0
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	9b 81       	ldd	r25, Y+3	; 0x03
    2176:	fc 01       	movw	r30, r24
    2178:	85 8d       	ldd	r24, Z+29	; 0x1d
    217a:	8f 3f       	cpi	r24, 0xFF	; 255
    217c:	21 f4       	brne	.+8      	; 0x2186 <xQueueGenericSend+0xd4>
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	9b 81       	ldd	r25, Y+3	; 0x03
    2182:	fc 01       	movw	r30, r24
    2184:	15 8e       	std	Z+29, r1	; 0x1d
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	9b 81       	ldd	r25, Y+3	; 0x03
    218a:	fc 01       	movw	r30, r24
    218c:	86 8d       	ldd	r24, Z+30	; 0x1e
    218e:	8f 3f       	cpi	r24, 0xFF	; 255
    2190:	21 f4       	brne	.+8      	; 0x219a <xQueueGenericSend+0xe8>
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	9b 81       	ldd	r25, Y+3	; 0x03
    2196:	fc 01       	movw	r30, r24
    2198:	16 8e       	std	Z+30, r1	; 0x1e
    219a:	0f 90       	pop	r0
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	9e 01       	movw	r18, r28
    21a0:	24 5f       	subi	r18, 0xF4	; 244
    21a2:	3f 4f       	sbci	r19, 0xFF	; 255
    21a4:	ce 01       	movw	r24, r28
    21a6:	05 96       	adiw	r24, 0x05	; 5
    21a8:	b9 01       	movw	r22, r18
    21aa:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <xTaskCheckForTimeOut>
    21ae:	88 23       	and	r24, r24
    21b0:	09 f5       	brne	.+66     	; 0x21f4 <xQueueGenericSend+0x142>
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	9b 81       	ldd	r25, Y+3	; 0x03
    21b6:	0e 94 97 12 	call	0x252e	; 0x252e <prvIsQueueFull>
    21ba:	88 23       	and	r24, r24
    21bc:	a1 f0       	breq	.+40     	; 0x21e6 <xQueueGenericSend+0x134>
    21be:	2c 85       	ldd	r18, Y+12	; 0x0c
    21c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	9b 81       	ldd	r25, Y+3	; 0x03
    21c6:	08 96       	adiw	r24, 0x08	; 8
    21c8:	b9 01       	movw	r22, r18
    21ca:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <vTaskPlaceOnEventList>
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	9b 81       	ldd	r25, Y+3	; 0x03
    21d2:	0e 94 39 12 	call	0x2472	; 0x2472 <prvUnlockQueue>
    21d6:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <xTaskResumeAll>
    21da:	88 23       	and	r24, r24
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <xQueueGenericSend+0x12e>
    21de:	7f cf       	rjmp	.-258    	; 0x20de <xQueueGenericSend+0x2c>
    21e0:	0e 94 cb 0a 	call	0x1596	; 0x1596 <vPortYield>
    21e4:	7c cf       	rjmp	.-264    	; 0x20de <xQueueGenericSend+0x2c>
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ea:	0e 94 39 12 	call	0x2472	; 0x2472 <prvUnlockQueue>
    21ee:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <xTaskResumeAll>
    21f2:	75 cf       	rjmp	.-278    	; 0x20de <xQueueGenericSend+0x2c>
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	9b 81       	ldd	r25, Y+3	; 0x03
    21f8:	0e 94 39 12 	call	0x2472	; 0x2472 <prvUnlockQueue>
    21fc:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <xTaskResumeAll>
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	2e 96       	adiw	r28, 0x0e	; 14
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	df 91       	pop	r29
    2210:	cf 91       	pop	r28
    2212:	08 95       	ret

00002214 <xQueueGenericSendFromISR>:
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	2c 97       	sbiw	r28, 0x0c	; 12
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	9f 83       	std	Y+7, r25	; 0x07
    222a:	8e 83       	std	Y+6, r24	; 0x06
    222c:	79 87       	std	Y+9, r23	; 0x09
    222e:	68 87       	std	Y+8, r22	; 0x08
    2230:	5b 87       	std	Y+11, r21	; 0x0b
    2232:	4a 87       	std	Y+10, r20	; 0x0a
    2234:	2c 87       	std	Y+12, r18	; 0x0c
    2236:	8e 81       	ldd	r24, Y+6	; 0x06
    2238:	9f 81       	ldd	r25, Y+7	; 0x07
    223a:	9b 83       	std	Y+3, r25	; 0x03
    223c:	8a 83       	std	Y+2, r24	; 0x02
    223e:	1c 82       	std	Y+4, r1	; 0x04
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	9b 81       	ldd	r25, Y+3	; 0x03
    2244:	fc 01       	movw	r30, r24
    2246:	22 8d       	ldd	r18, Z+26	; 0x1a
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	9b 81       	ldd	r25, Y+3	; 0x03
    224c:	fc 01       	movw	r30, r24
    224e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2250:	28 17       	cp	r18, r24
    2252:	18 f0       	brcs	.+6      	; 0x225a <xQueueGenericSendFromISR+0x46>
    2254:	8c 85       	ldd	r24, Y+12	; 0x0c
    2256:	82 30       	cpi	r24, 0x02	; 2
    2258:	89 f5       	brne	.+98     	; 0x22bc <xQueueGenericSendFromISR+0xa8>
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	9b 81       	ldd	r25, Y+3	; 0x03
    225e:	fc 01       	movw	r30, r24
    2260:	86 8d       	ldd	r24, Z+30	; 0x1e
    2262:	8d 83       	std	Y+5, r24	; 0x05
    2264:	28 85       	ldd	r18, Y+8	; 0x08
    2266:	39 85       	ldd	r19, Y+9	; 0x09
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	9b 81       	ldd	r25, Y+3	; 0x03
    226c:	4c 85       	ldd	r20, Y+12	; 0x0c
    226e:	b9 01       	movw	r22, r18
    2270:	0e 94 69 11 	call	0x22d2	; 0x22d2 <prvCopyDataToQueue>
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	8f 3f       	cpi	r24, 0xFF	; 255
    2278:	b9 f4       	brne	.+46     	; 0x22a8 <xQueueGenericSendFromISR+0x94>
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	9b 81       	ldd	r25, Y+3	; 0x03
    227e:	fc 01       	movw	r30, r24
    2280:	81 89       	ldd	r24, Z+17	; 0x11
    2282:	88 23       	and	r24, r24
    2284:	c1 f0       	breq	.+48     	; 0x22b6 <xQueueGenericSendFromISR+0xa2>
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	9b 81       	ldd	r25, Y+3	; 0x03
    228a:	41 96       	adiw	r24, 0x11	; 17
    228c:	0e 94 28 17 	call	0x2e50	; 0x2e50 <xTaskRemoveFromEventList>
    2290:	88 23       	and	r24, r24
    2292:	89 f0       	breq	.+34     	; 0x22b6 <xQueueGenericSendFromISR+0xa2>
    2294:	8a 85       	ldd	r24, Y+10	; 0x0a
    2296:	9b 85       	ldd	r25, Y+11	; 0x0b
    2298:	89 2b       	or	r24, r25
    229a:	69 f0       	breq	.+26     	; 0x22b6 <xQueueGenericSendFromISR+0xa2>
    229c:	8a 85       	ldd	r24, Y+10	; 0x0a
    229e:	9b 85       	ldd	r25, Y+11	; 0x0b
    22a0:	21 e0       	ldi	r18, 0x01	; 1
    22a2:	fc 01       	movw	r30, r24
    22a4:	20 83       	st	Z, r18
    22a6:	07 c0       	rjmp	.+14     	; 0x22b6 <xQueueGenericSendFromISR+0xa2>
    22a8:	8d 81       	ldd	r24, Y+5	; 0x05
    22aa:	8f 5f       	subi	r24, 0xFF	; 255
    22ac:	28 2f       	mov	r18, r24
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	9b 81       	ldd	r25, Y+3	; 0x03
    22b2:	fc 01       	movw	r30, r24
    22b4:	26 8f       	std	Z+30, r18	; 0x1e
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	01 c0       	rjmp	.+2      	; 0x22be <xQueueGenericSendFromISR+0xaa>
    22bc:	19 82       	std	Y+1, r1	; 0x01
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	2c 96       	adiw	r28, 0x0c	; 12
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	df 91       	pop	r29
    22ce:	cf 91       	pop	r28
    22d0:	08 95       	ret

000022d2 <prvCopyDataToQueue>:
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	27 97       	sbiw	r28, 0x07	; 7
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61
    22e6:	9c 83       	std	Y+4, r25	; 0x04
    22e8:	8b 83       	std	Y+3, r24	; 0x03
    22ea:	7e 83       	std	Y+6, r23	; 0x06
    22ec:	6d 83       	std	Y+5, r22	; 0x05
    22ee:	4f 83       	std	Y+7, r20	; 0x07
    22f0:	19 82       	std	Y+1, r1	; 0x01
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	fc 01       	movw	r30, r24
    22f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    22fa:	8a 83       	std	Y+2, r24	; 0x02
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	fc 01       	movw	r30, r24
    2302:	84 8d       	ldd	r24, Z+28	; 0x1c
    2304:	88 23       	and	r24, r24
    2306:	b1 f4       	brne	.+44     	; 0x2334 <prvCopyDataToQueue+0x62>
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	fc 01       	movw	r30, r24
    230e:	80 81       	ld	r24, Z
    2310:	91 81       	ldd	r25, Z+1	; 0x01
    2312:	89 2b       	or	r24, r25
    2314:	09 f0       	breq	.+2      	; 0x2318 <prvCopyDataToQueue+0x46>
    2316:	9c c0       	rjmp	.+312    	; 0x2450 <prvCopyDataToQueue+0x17e>
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	9c 81       	ldd	r25, Y+4	; 0x04
    231c:	fc 01       	movw	r30, r24
    231e:	82 81       	ldd	r24, Z+2	; 0x02
    2320:	93 81       	ldd	r25, Z+3	; 0x03
    2322:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <xTaskPriorityDisinherit>
    2326:	89 83       	std	Y+1, r24	; 0x01
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	fc 01       	movw	r30, r24
    232e:	13 82       	std	Z+3, r1	; 0x03
    2330:	12 82       	std	Z+2, r1	; 0x02
    2332:	8e c0       	rjmp	.+284    	; 0x2450 <prvCopyDataToQueue+0x17e>
    2334:	8f 81       	ldd	r24, Y+7	; 0x07
    2336:	88 23       	and	r24, r24
    2338:	d9 f5       	brne	.+118    	; 0x23b0 <prvCopyDataToQueue+0xde>
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	fc 01       	movw	r30, r24
    2340:	84 8d       	ldd	r24, Z+28	; 0x1c
    2342:	48 2f       	mov	r20, r24
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	9c 81       	ldd	r25, Y+4	; 0x04
    234a:	fc 01       	movw	r30, r24
    234c:	84 81       	ldd	r24, Z+4	; 0x04
    234e:	95 81       	ldd	r25, Z+5	; 0x05
    2350:	2d 81       	ldd	r18, Y+5	; 0x05
    2352:	3e 81       	ldd	r19, Y+6	; 0x06
    2354:	b9 01       	movw	r22, r18
    2356:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <memcpy>
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	9c 81       	ldd	r25, Y+4	; 0x04
    235e:	fc 01       	movw	r30, r24
    2360:	24 81       	ldd	r18, Z+4	; 0x04
    2362:	35 81       	ldd	r19, Z+5	; 0x05
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	fc 01       	movw	r30, r24
    236a:	84 8d       	ldd	r24, Z+28	; 0x1c
    236c:	88 2f       	mov	r24, r24
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	28 0f       	add	r18, r24
    2372:	39 1f       	adc	r19, r25
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	fc 01       	movw	r30, r24
    237a:	35 83       	std	Z+5, r19	; 0x05
    237c:	24 83       	std	Z+4, r18	; 0x04
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	9c 81       	ldd	r25, Y+4	; 0x04
    2382:	fc 01       	movw	r30, r24
    2384:	24 81       	ldd	r18, Z+4	; 0x04
    2386:	35 81       	ldd	r19, Z+5	; 0x05
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	9c 81       	ldd	r25, Y+4	; 0x04
    238c:	fc 01       	movw	r30, r24
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	93 81       	ldd	r25, Z+3	; 0x03
    2392:	28 17       	cp	r18, r24
    2394:	39 07       	cpc	r19, r25
    2396:	08 f4       	brcc	.+2      	; 0x239a <prvCopyDataToQueue+0xc8>
    2398:	5b c0       	rjmp	.+182    	; 0x2450 <prvCopyDataToQueue+0x17e>
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	9c 81       	ldd	r25, Y+4	; 0x04
    239e:	fc 01       	movw	r30, r24
    23a0:	20 81       	ld	r18, Z
    23a2:	31 81       	ldd	r19, Z+1	; 0x01
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	9c 81       	ldd	r25, Y+4	; 0x04
    23a8:	fc 01       	movw	r30, r24
    23aa:	35 83       	std	Z+5, r19	; 0x05
    23ac:	24 83       	std	Z+4, r18	; 0x04
    23ae:	50 c0       	rjmp	.+160    	; 0x2450 <prvCopyDataToQueue+0x17e>
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	9c 81       	ldd	r25, Y+4	; 0x04
    23b4:	fc 01       	movw	r30, r24
    23b6:	84 8d       	ldd	r24, Z+28	; 0x1c
    23b8:	48 2f       	mov	r20, r24
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	fc 01       	movw	r30, r24
    23c2:	86 81       	ldd	r24, Z+6	; 0x06
    23c4:	97 81       	ldd	r25, Z+7	; 0x07
    23c6:	2d 81       	ldd	r18, Y+5	; 0x05
    23c8:	3e 81       	ldd	r19, Y+6	; 0x06
    23ca:	b9 01       	movw	r22, r18
    23cc:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <memcpy>
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	fc 01       	movw	r30, r24
    23d6:	26 81       	ldd	r18, Z+6	; 0x06
    23d8:	37 81       	ldd	r19, Z+7	; 0x07
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	9c 81       	ldd	r25, Y+4	; 0x04
    23de:	fc 01       	movw	r30, r24
    23e0:	84 8d       	ldd	r24, Z+28	; 0x1c
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	91 95       	neg	r25
    23e8:	81 95       	neg	r24
    23ea:	91 09       	sbc	r25, r1
    23ec:	28 0f       	add	r18, r24
    23ee:	39 1f       	adc	r19, r25
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	9c 81       	ldd	r25, Y+4	; 0x04
    23f4:	fc 01       	movw	r30, r24
    23f6:	37 83       	std	Z+7, r19	; 0x07
    23f8:	26 83       	std	Z+6, r18	; 0x06
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	fc 01       	movw	r30, r24
    2400:	26 81       	ldd	r18, Z+6	; 0x06
    2402:	37 81       	ldd	r19, Z+7	; 0x07
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	9c 81       	ldd	r25, Y+4	; 0x04
    2408:	fc 01       	movw	r30, r24
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	28 17       	cp	r18, r24
    2410:	39 07       	cpc	r19, r25
    2412:	a8 f4       	brcc	.+42     	; 0x243e <prvCopyDataToQueue+0x16c>
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	fc 01       	movw	r30, r24
    241a:	22 81       	ldd	r18, Z+2	; 0x02
    241c:	33 81       	ldd	r19, Z+3	; 0x03
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	9c 81       	ldd	r25, Y+4	; 0x04
    2422:	fc 01       	movw	r30, r24
    2424:	84 8d       	ldd	r24, Z+28	; 0x1c
    2426:	88 2f       	mov	r24, r24
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	91 95       	neg	r25
    242c:	81 95       	neg	r24
    242e:	91 09       	sbc	r25, r1
    2430:	28 0f       	add	r18, r24
    2432:	39 1f       	adc	r19, r25
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	fc 01       	movw	r30, r24
    243a:	37 83       	std	Z+7, r19	; 0x07
    243c:	26 83       	std	Z+6, r18	; 0x06
    243e:	8f 81       	ldd	r24, Y+7	; 0x07
    2440:	82 30       	cpi	r24, 0x02	; 2
    2442:	31 f4       	brne	.+12     	; 0x2450 <prvCopyDataToQueue+0x17e>
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	88 23       	and	r24, r24
    2448:	19 f0       	breq	.+6      	; 0x2450 <prvCopyDataToQueue+0x17e>
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	81 50       	subi	r24, 0x01	; 1
    244e:	8a 83       	std	Y+2, r24	; 0x02
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	21 e0       	ldi	r18, 0x01	; 1
    2454:	28 0f       	add	r18, r24
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	9c 81       	ldd	r25, Y+4	; 0x04
    245a:	fc 01       	movw	r30, r24
    245c:	22 8f       	std	Z+26, r18	; 0x1a
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	27 96       	adiw	r28, 0x07	; 7
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28
    2470:	08 95       	ret

00002472 <prvUnlockQueue>:
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	00 d0       	rcall	.+0      	; 0x2478 <prvUnlockQueue+0x6>
    2478:	00 d0       	rcall	.+0      	; 0x247a <prvUnlockQueue+0x8>
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	9c 83       	std	Y+4, r25	; 0x04
    2480:	8b 83       	std	Y+3, r24	; 0x03
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	0f 92       	push	r0
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	9c 81       	ldd	r25, Y+4	; 0x04
    248c:	fc 01       	movw	r30, r24
    248e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2490:	89 83       	std	Y+1, r24	; 0x01
    2492:	12 c0       	rjmp	.+36     	; 0x24b8 <prvUnlockQueue+0x46>
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	9c 81       	ldd	r25, Y+4	; 0x04
    2498:	fc 01       	movw	r30, r24
    249a:	81 89       	ldd	r24, Z+17	; 0x11
    249c:	88 23       	and	r24, r24
    249e:	81 f0       	breq	.+32     	; 0x24c0 <prvUnlockQueue+0x4e>
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	9c 81       	ldd	r25, Y+4	; 0x04
    24a4:	41 96       	adiw	r24, 0x11	; 17
    24a6:	0e 94 28 17 	call	0x2e50	; 0x2e50 <xTaskRemoveFromEventList>
    24aa:	88 23       	and	r24, r24
    24ac:	11 f0       	breq	.+4      	; 0x24b2 <prvUnlockQueue+0x40>
    24ae:	0e 94 19 18 	call	0x3032	; 0x3032 <vTaskMissedYield>
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	81 50       	subi	r24, 0x01	; 1
    24b6:	89 83       	std	Y+1, r24	; 0x01
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	18 16       	cp	r1, r24
    24bc:	5c f3       	brlt	.-42     	; 0x2494 <prvUnlockQueue+0x22>
    24be:	01 c0       	rjmp	.+2      	; 0x24c2 <prvUnlockQueue+0x50>
    24c0:	00 00       	nop
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	9c 81       	ldd	r25, Y+4	; 0x04
    24c6:	2f ef       	ldi	r18, 0xFF	; 255
    24c8:	fc 01       	movw	r30, r24
    24ca:	26 8f       	std	Z+30, r18	; 0x1e
    24cc:	0f 90       	pop	r0
    24ce:	0f be       	out	0x3f, r0	; 63
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	0f 92       	push	r0
    24d6:	8b 81       	ldd	r24, Y+3	; 0x03
    24d8:	9c 81       	ldd	r25, Y+4	; 0x04
    24da:	fc 01       	movw	r30, r24
    24dc:	85 8d       	ldd	r24, Z+29	; 0x1d
    24de:	8a 83       	std	Y+2, r24	; 0x02
    24e0:	12 c0       	rjmp	.+36     	; 0x2506 <prvUnlockQueue+0x94>
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	fc 01       	movw	r30, r24
    24e8:	80 85       	ldd	r24, Z+8	; 0x08
    24ea:	88 23       	and	r24, r24
    24ec:	81 f0       	breq	.+32     	; 0x250e <prvUnlockQueue+0x9c>
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	9c 81       	ldd	r25, Y+4	; 0x04
    24f2:	08 96       	adiw	r24, 0x08	; 8
    24f4:	0e 94 28 17 	call	0x2e50	; 0x2e50 <xTaskRemoveFromEventList>
    24f8:	88 23       	and	r24, r24
    24fa:	11 f0       	breq	.+4      	; 0x2500 <prvUnlockQueue+0x8e>
    24fc:	0e 94 19 18 	call	0x3032	; 0x3032 <vTaskMissedYield>
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	81 50       	subi	r24, 0x01	; 1
    2504:	8a 83       	std	Y+2, r24	; 0x02
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	18 16       	cp	r1, r24
    250a:	5c f3       	brlt	.-42     	; 0x24e2 <prvUnlockQueue+0x70>
    250c:	01 c0       	rjmp	.+2      	; 0x2510 <prvUnlockQueue+0x9e>
    250e:	00 00       	nop
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	2f ef       	ldi	r18, 0xFF	; 255
    2516:	fc 01       	movw	r30, r24
    2518:	25 8f       	std	Z+29, r18	; 0x1d
    251a:	0f 90       	pop	r0
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	00 00       	nop
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	08 95       	ret

0000252e <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	00 d0       	rcall	.+0      	; 0x2534 <prvIsQueueFull+0x6>
    2534:	1f 92       	push	r1
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	9b 83       	std	Y+3, r25	; 0x03
    253c:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	9b 81       	ldd	r25, Y+3	; 0x03
    2548:	fc 01       	movw	r30, r24
    254a:	22 8d       	ldd	r18, Z+26	; 0x1a
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	9b 81       	ldd	r25, Y+3	; 0x03
    2550:	fc 01       	movw	r30, r24
    2552:	83 8d       	ldd	r24, Z+27	; 0x1b
    2554:	28 17       	cp	r18, r24
    2556:	19 f4       	brne	.+6      	; 0x255e <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	01 c0       	rjmp	.+2      	; 0x2560 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    255e:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2560:	0f 90       	pop	r0
    2562:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2564:	89 81       	ldd	r24, Y+1	; 0x01
}
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	df 91       	pop	r29
    256e:	cf 91       	pop	r28
    2570:	08 95       	ret

00002572 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    2572:	8f 92       	push	r8
    2574:	9f 92       	push	r9
    2576:	af 92       	push	r10
    2578:	bf 92       	push	r11
    257a:	cf 92       	push	r12
    257c:	df 92       	push	r13
    257e:	ef 92       	push	r14
    2580:	ff 92       	push	r15
    2582:	0f 93       	push	r16
    2584:	1f 93       	push	r17
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	60 97       	sbiw	r28, 0x10	; 16
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	9f 83       	std	Y+7, r25	; 0x07
    259c:	8e 83       	std	Y+6, r24	; 0x06
    259e:	79 87       	std	Y+9, r23	; 0x09
    25a0:	68 87       	std	Y+8, r22	; 0x08
    25a2:	5b 87       	std	Y+11, r21	; 0x0b
    25a4:	4a 87       	std	Y+10, r20	; 0x0a
    25a6:	3d 87       	std	Y+13, r19	; 0x0d
    25a8:	2c 87       	std	Y+12, r18	; 0x0c
    25aa:	0e 87       	std	Y+14, r16	; 0x0e
    25ac:	f8 8a       	std	Y+16, r15	; 0x10
    25ae:	ef 86       	std	Y+15, r14	; 0x0f
    25b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25b4:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <pvPortMalloc>
    25b8:	9d 83       	std	Y+5, r25	; 0x05
    25ba:	8c 83       	std	Y+4, r24	; 0x04
    25bc:	8c 81       	ldd	r24, Y+4	; 0x04
    25be:	9d 81       	ldd	r25, Y+5	; 0x05
    25c0:	89 2b       	or	r24, r25
    25c2:	b9 f0       	breq	.+46     	; 0x25f2 <xTaskCreate+0x80>
    25c4:	8c e2       	ldi	r24, 0x2C	; 44
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <pvPortMalloc>
    25cc:	9a 83       	std	Y+2, r25	; 0x02
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	9a 81       	ldd	r25, Y+2	; 0x02
    25d4:	89 2b       	or	r24, r25
    25d6:	41 f0       	breq	.+16     	; 0x25e8 <xTaskCreate+0x76>
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	2c 81       	ldd	r18, Y+4	; 0x04
    25de:	3d 81       	ldd	r19, Y+5	; 0x05
    25e0:	fc 01       	movw	r30, r24
    25e2:	30 8f       	std	Z+24, r19	; 0x18
    25e4:	27 8b       	std	Z+23, r18	; 0x17
    25e6:	07 c0       	rjmp	.+14     	; 0x25f6 <xTaskCreate+0x84>
    25e8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ea:	9d 81       	ldd	r25, Y+5	; 0x05
    25ec:	0e 94 3e 0c 	call	0x187c	; 0x187c <vPortFree>
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <xTaskCreate+0x84>
    25f2:	1a 82       	std	Y+2, r1	; 0x02
    25f4:	19 82       	std	Y+1, r1	; 0x01
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	9a 81       	ldd	r25, Y+2	; 0x02
    25fa:	89 2b       	or	r24, r25
    25fc:	09 f1       	breq	.+66     	; 0x2640 <xTaskCreate+0xce>
    25fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2600:	9b 85       	ldd	r25, Y+11	; 0x0b
    2602:	cc 01       	movw	r24, r24
    2604:	a0 e0       	ldi	r26, 0x00	; 0
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	09 81       	ldd	r16, Y+1	; 0x01
    260a:	1a 81       	ldd	r17, Y+2	; 0x02
    260c:	4f 85       	ldd	r20, Y+15	; 0x0f
    260e:	58 89       	ldd	r21, Y+16	; 0x10
    2610:	2c 85       	ldd	r18, Y+12	; 0x0c
    2612:	3d 85       	ldd	r19, Y+13	; 0x0d
    2614:	68 85       	ldd	r22, Y+8	; 0x08
    2616:	79 85       	ldd	r23, Y+9	; 0x09
    2618:	ee 81       	ldd	r30, Y+6	; 0x06
    261a:	ff 81       	ldd	r31, Y+7	; 0x07
    261c:	81 2c       	mov	r8, r1
    261e:	91 2c       	mov	r9, r1
    2620:	58 01       	movw	r10, r16
    2622:	6a 01       	movw	r12, r20
    2624:	ee 84       	ldd	r14, Y+14	; 0x0e
    2626:	89 01       	movw	r16, r18
    2628:	9c 01       	movw	r18, r24
    262a:	ad 01       	movw	r20, r26
    262c:	cf 01       	movw	r24, r30
    262e:	0e 94 36 13 	call	0x266c	; 0x266c <prvInitialiseNewTask>
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	9a 81       	ldd	r25, Y+2	; 0x02
    2636:	0e 94 12 14 	call	0x2824	; 0x2824 <prvAddNewTaskToReadyList>
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	8b 83       	std	Y+3, r24	; 0x03
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <xTaskCreate+0xd2>
    2640:	8f ef       	ldi	r24, 0xFF	; 255
    2642:	8b 83       	std	Y+3, r24	; 0x03
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	60 96       	adiw	r28, 0x10	; 16
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	1f 91       	pop	r17
    2658:	0f 91       	pop	r16
    265a:	ff 90       	pop	r15
    265c:	ef 90       	pop	r14
    265e:	df 90       	pop	r13
    2660:	cf 90       	pop	r12
    2662:	bf 90       	pop	r11
    2664:	af 90       	pop	r10
    2666:	9f 90       	pop	r9
    2668:	8f 90       	pop	r8
    266a:	08 95       	ret

0000266c <prvInitialiseNewTask>:
    266c:	8f 92       	push	r8
    266e:	9f 92       	push	r9
    2670:	af 92       	push	r10
    2672:	bf 92       	push	r11
    2674:	cf 92       	push	r12
    2676:	df 92       	push	r13
    2678:	ef 92       	push	r14
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	64 97       	sbiw	r28, 0x14	; 20
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	9d 83       	std	Y+5, r25	; 0x05
    2694:	8c 83       	std	Y+4, r24	; 0x04
    2696:	7f 83       	std	Y+7, r23	; 0x07
    2698:	6e 83       	std	Y+6, r22	; 0x06
    269a:	28 87       	std	Y+8, r18	; 0x08
    269c:	39 87       	std	Y+9, r19	; 0x09
    269e:	4a 87       	std	Y+10, r20	; 0x0a
    26a0:	5b 87       	std	Y+11, r21	; 0x0b
    26a2:	1d 87       	std	Y+13, r17	; 0x0d
    26a4:	0c 87       	std	Y+12, r16	; 0x0c
    26a6:	ee 86       	std	Y+14, r14	; 0x0e
    26a8:	d8 8a       	std	Y+16, r13	; 0x10
    26aa:	cf 86       	std	Y+15, r12	; 0x0f
    26ac:	ba 8a       	std	Y+18, r11	; 0x12
    26ae:	a9 8a       	std	Y+17, r10	; 0x11
    26b0:	9c 8a       	std	Y+20, r9	; 0x14
    26b2:	8b 8a       	std	Y+19, r8	; 0x13
    26b4:	28 85       	ldd	r18, Y+8	; 0x08
    26b6:	39 85       	ldd	r19, Y+9	; 0x09
    26b8:	89 89       	ldd	r24, Y+17	; 0x11
    26ba:	9a 89       	ldd	r25, Y+18	; 0x12
    26bc:	fc 01       	movw	r30, r24
    26be:	87 89       	ldd	r24, Z+23	; 0x17
    26c0:	90 8d       	ldd	r25, Z+24	; 0x18
    26c2:	a9 01       	movw	r20, r18
    26c4:	65 ea       	ldi	r22, 0xA5	; 165
    26c6:	70 e0       	ldi	r23, 0x00	; 0
    26c8:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <memset>
    26cc:	89 89       	ldd	r24, Y+17	; 0x11
    26ce:	9a 89       	ldd	r25, Y+18	; 0x12
    26d0:	fc 01       	movw	r30, r24
    26d2:	27 89       	ldd	r18, Z+23	; 0x17
    26d4:	30 8d       	ldd	r19, Z+24	; 0x18
    26d6:	88 85       	ldd	r24, Y+8	; 0x08
    26d8:	99 85       	ldd	r25, Y+9	; 0x09
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	82 0f       	add	r24, r18
    26de:	93 1f       	adc	r25, r19
    26e0:	9b 83       	std	Y+3, r25	; 0x03
    26e2:	8a 83       	std	Y+2, r24	; 0x02
    26e4:	19 82       	std	Y+1, r1	; 0x01
    26e6:	21 c0       	rjmp	.+66     	; 0x272a <prvInitialiseNewTask+0xbe>
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	29 81       	ldd	r18, Y+1	; 0x01
    26f0:	22 2f       	mov	r18, r18
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	4e 81       	ldd	r20, Y+6	; 0x06
    26f6:	5f 81       	ldd	r21, Y+7	; 0x07
    26f8:	24 0f       	add	r18, r20
    26fa:	35 1f       	adc	r19, r21
    26fc:	f9 01       	movw	r30, r18
    26fe:	40 81       	ld	r20, Z
    2700:	29 89       	ldd	r18, Y+17	; 0x11
    2702:	3a 89       	ldd	r19, Y+18	; 0x12
    2704:	82 0f       	add	r24, r18
    2706:	93 1f       	adc	r25, r19
    2708:	49 96       	adiw	r24, 0x19	; 25
    270a:	fc 01       	movw	r30, r24
    270c:	40 83       	st	Z, r20
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	88 2f       	mov	r24, r24
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	2e 81       	ldd	r18, Y+6	; 0x06
    2716:	3f 81       	ldd	r19, Y+7	; 0x07
    2718:	82 0f       	add	r24, r18
    271a:	93 1f       	adc	r25, r19
    271c:	fc 01       	movw	r30, r24
    271e:	80 81       	ld	r24, Z
    2720:	88 23       	and	r24, r24
    2722:	39 f0       	breq	.+14     	; 0x2732 <prvInitialiseNewTask+0xc6>
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	8f 5f       	subi	r24, 0xFF	; 255
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	88 30       	cpi	r24, 0x08	; 8
    272e:	e0 f2       	brcs	.-72     	; 0x26e8 <prvInitialiseNewTask+0x7c>
    2730:	01 c0       	rjmp	.+2      	; 0x2734 <prvInitialiseNewTask+0xc8>
    2732:	00 00       	nop
    2734:	89 89       	ldd	r24, Y+17	; 0x11
    2736:	9a 89       	ldd	r25, Y+18	; 0x12
    2738:	fc 01       	movw	r30, r24
    273a:	10 a2       	std	Z+32, r1	; 0x20
    273c:	8e 85       	ldd	r24, Y+14	; 0x0e
    273e:	84 30       	cpi	r24, 0x04	; 4
    2740:	10 f0       	brcs	.+4      	; 0x2746 <prvInitialiseNewTask+0xda>
    2742:	83 e0       	ldi	r24, 0x03	; 3
    2744:	8e 87       	std	Y+14, r24	; 0x0e
    2746:	89 89       	ldd	r24, Y+17	; 0x11
    2748:	9a 89       	ldd	r25, Y+18	; 0x12
    274a:	2e 85       	ldd	r18, Y+14	; 0x0e
    274c:	fc 01       	movw	r30, r24
    274e:	26 8b       	std	Z+22, r18	; 0x16
    2750:	89 89       	ldd	r24, Y+17	; 0x11
    2752:	9a 89       	ldd	r25, Y+18	; 0x12
    2754:	2e 85       	ldd	r18, Y+14	; 0x0e
    2756:	fc 01       	movw	r30, r24
    2758:	23 a3       	std	Z+35, r18	; 0x23
    275a:	89 89       	ldd	r24, Y+17	; 0x11
    275c:	9a 89       	ldd	r25, Y+18	; 0x12
    275e:	fc 01       	movw	r30, r24
    2760:	14 a2       	std	Z+36, r1	; 0x24
    2762:	89 89       	ldd	r24, Y+17	; 0x11
    2764:	9a 89       	ldd	r25, Y+18	; 0x12
    2766:	02 96       	adiw	r24, 0x02	; 2
    2768:	0e 94 bd 07 	call	0xf7a	; 0xf7a <vListInitialiseItem>
    276c:	89 89       	ldd	r24, Y+17	; 0x11
    276e:	9a 89       	ldd	r25, Y+18	; 0x12
    2770:	0c 96       	adiw	r24, 0x0c	; 12
    2772:	0e 94 bd 07 	call	0xf7a	; 0xf7a <vListInitialiseItem>
    2776:	89 89       	ldd	r24, Y+17	; 0x11
    2778:	9a 89       	ldd	r25, Y+18	; 0x12
    277a:	29 89       	ldd	r18, Y+17	; 0x11
    277c:	3a 89       	ldd	r19, Y+18	; 0x12
    277e:	fc 01       	movw	r30, r24
    2780:	31 87       	std	Z+9, r19	; 0x09
    2782:	20 87       	std	Z+8, r18	; 0x08
    2784:	8e 85       	ldd	r24, Y+14	; 0x0e
    2786:	88 2f       	mov	r24, r24
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	24 e0       	ldi	r18, 0x04	; 4
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	28 1b       	sub	r18, r24
    2790:	39 0b       	sbc	r19, r25
    2792:	89 89       	ldd	r24, Y+17	; 0x11
    2794:	9a 89       	ldd	r25, Y+18	; 0x12
    2796:	fc 01       	movw	r30, r24
    2798:	35 87       	std	Z+13, r19	; 0x0d
    279a:	24 87       	std	Z+12, r18	; 0x0c
    279c:	89 89       	ldd	r24, Y+17	; 0x11
    279e:	9a 89       	ldd	r25, Y+18	; 0x12
    27a0:	29 89       	ldd	r18, Y+17	; 0x11
    27a2:	3a 89       	ldd	r19, Y+18	; 0x12
    27a4:	fc 01       	movw	r30, r24
    27a6:	33 8b       	std	Z+19, r19	; 0x13
    27a8:	22 8b       	std	Z+18, r18	; 0x12
    27aa:	89 89       	ldd	r24, Y+17	; 0x11
    27ac:	9a 89       	ldd	r25, Y+18	; 0x12
    27ae:	fc 01       	movw	r30, r24
    27b0:	16 a2       	std	Z+38, r1	; 0x26
    27b2:	15 a2       	std	Z+37, r1	; 0x25
    27b4:	89 89       	ldd	r24, Y+17	; 0x11
    27b6:	9a 89       	ldd	r25, Y+18	; 0x12
    27b8:	fc 01       	movw	r30, r24
    27ba:	17 a2       	std	Z+39, r1	; 0x27
    27bc:	10 a6       	std	Z+40, r1	; 0x28
    27be:	11 a6       	std	Z+41, r1	; 0x29
    27c0:	12 a6       	std	Z+42, r1	; 0x2a
    27c2:	89 89       	ldd	r24, Y+17	; 0x11
    27c4:	9a 89       	ldd	r25, Y+18	; 0x12
    27c6:	fc 01       	movw	r30, r24
    27c8:	13 a6       	std	Z+43, r1	; 0x2b
    27ca:	4c 85       	ldd	r20, Y+12	; 0x0c
    27cc:	5d 85       	ldd	r21, Y+13	; 0x0d
    27ce:	2c 81       	ldd	r18, Y+4	; 0x04
    27d0:	3d 81       	ldd	r19, Y+5	; 0x05
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	9b 81       	ldd	r25, Y+3	; 0x03
    27d6:	b9 01       	movw	r22, r18
    27d8:	0e 94 ed 08 	call	0x11da	; 0x11da <pxPortInitialiseStack>
    27dc:	9c 01       	movw	r18, r24
    27de:	89 89       	ldd	r24, Y+17	; 0x11
    27e0:	9a 89       	ldd	r25, Y+18	; 0x12
    27e2:	fc 01       	movw	r30, r24
    27e4:	31 83       	std	Z+1, r19	; 0x01
    27e6:	20 83       	st	Z, r18
    27e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ea:	98 89       	ldd	r25, Y+16	; 0x10
    27ec:	89 2b       	or	r24, r25
    27ee:	39 f0       	breq	.+14     	; 0x27fe <prvInitialiseNewTask+0x192>
    27f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f2:	98 89       	ldd	r25, Y+16	; 0x10
    27f4:	29 89       	ldd	r18, Y+17	; 0x11
    27f6:	3a 89       	ldd	r19, Y+18	; 0x12
    27f8:	fc 01       	movw	r30, r24
    27fa:	31 83       	std	Z+1, r19	; 0x01
    27fc:	20 83       	st	Z, r18
    27fe:	00 00       	nop
    2800:	64 96       	adiw	r28, 0x14	; 20
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	1f 91       	pop	r17
    2812:	0f 91       	pop	r16
    2814:	ef 90       	pop	r14
    2816:	df 90       	pop	r13
    2818:	cf 90       	pop	r12
    281a:	bf 90       	pop	r11
    281c:	af 90       	pop	r10
    281e:	9f 90       	pop	r9
    2820:	8f 90       	pop	r8
    2822:	08 95       	ret

00002824 <prvAddNewTaskToReadyList>:
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	00 d0       	rcall	.+0      	; 0x282a <prvAddNewTaskToReadyList+0x6>
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	9a 83       	std	Y+2, r25	; 0x02
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	0f 92       	push	r0
    2838:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxCurrentNumberOfTasks>
    283c:	8f 5f       	subi	r24, 0xFF	; 255
    283e:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <uxCurrentNumberOfTasks>
    2842:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2846:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    284a:	89 2b       	or	r24, r25
    284c:	69 f4       	brne	.+26     	; 0x2868 <prvAddNewTaskToReadyList+0x44>
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	9a 81       	ldd	r25, Y+2	; 0x02
    2852:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <pxCurrentTCB+0x1>
    2856:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <pxCurrentTCB>
    285a:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxCurrentNumberOfTasks>
    285e:	81 30       	cpi	r24, 0x01	; 1
    2860:	c9 f4       	brne	.+50     	; 0x2894 <prvAddNewTaskToReadyList+0x70>
    2862:	0e 94 36 18 	call	0x306c	; 0x306c <prvInitialiseTaskLists>
    2866:	16 c0       	rjmp	.+44     	; 0x2894 <prvAddNewTaskToReadyList+0x70>
    2868:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <xSchedulerRunning>
    286c:	88 23       	and	r24, r24
    286e:	91 f4       	brne	.+36     	; 0x2894 <prvAddNewTaskToReadyList+0x70>
    2870:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2874:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    2878:	fc 01       	movw	r30, r24
    287a:	26 89       	ldd	r18, Z+22	; 0x16
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	9a 81       	ldd	r25, Y+2	; 0x02
    2880:	fc 01       	movw	r30, r24
    2882:	86 89       	ldd	r24, Z+22	; 0x16
    2884:	82 17       	cp	r24, r18
    2886:	30 f0       	brcs	.+12     	; 0x2894 <prvAddNewTaskToReadyList+0x70>
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	9a 81       	ldd	r25, Y+2	; 0x02
    288c:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <pxCurrentTCB+0x1>
    2890:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <pxCurrentTCB>
    2894:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <uxTaskNumber>
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <uxTaskNumber>
    289e:	20 91 32 07 	lds	r18, 0x0732	; 0x800732 <uxTaskNumber>
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	9a 81       	ldd	r25, Y+2	; 0x02
    28a6:	fc 01       	movw	r30, r24
    28a8:	21 a3       	std	Z+33, r18	; 0x21
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	fc 01       	movw	r30, r24
    28b0:	96 89       	ldd	r25, Z+22	; 0x16
    28b2:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxTopReadyPriority>
    28b6:	89 17       	cp	r24, r25
    28b8:	30 f4       	brcc	.+12     	; 0x28c6 <prvAddNewTaskToReadyList+0xa2>
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	9a 81       	ldd	r25, Y+2	; 0x02
    28be:	fc 01       	movw	r30, r24
    28c0:	86 89       	ldd	r24, Z+22	; 0x16
    28c2:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <uxTopReadyPriority>
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ca:	ac 01       	movw	r20, r24
    28cc:	4e 5f       	subi	r20, 0xFE	; 254
    28ce:	5f 4f       	sbci	r21, 0xFF	; 255
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	fc 01       	movw	r30, r24
    28d6:	86 89       	ldd	r24, Z+22	; 0x16
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	c9 01       	movw	r24, r18
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	82 0f       	add	r24, r18
    28ec:	93 1f       	adc	r25, r19
    28ee:	83 52       	subi	r24, 0x23	; 35
    28f0:	99 4f       	sbci	r25, 0xF9	; 249
    28f2:	ba 01       	movw	r22, r20
    28f4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <vListInsertEnd>
    28f8:	0f 90       	pop	r0
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <xSchedulerRunning>
    2900:	88 23       	and	r24, r24
    2902:	71 f0       	breq	.+28     	; 0x2920 <prvAddNewTaskToReadyList+0xfc>
    2904:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2908:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    290c:	fc 01       	movw	r30, r24
    290e:	26 89       	ldd	r18, Z+22	; 0x16
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	9a 81       	ldd	r25, Y+2	; 0x02
    2914:	fc 01       	movw	r30, r24
    2916:	86 89       	ldd	r24, Z+22	; 0x16
    2918:	28 17       	cp	r18, r24
    291a:	10 f4       	brcc	.+4      	; 0x2920 <prvAddNewTaskToReadyList+0xfc>
    291c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <vPortYield>
    2920:	00 00       	nop
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	08 95       	ret

0000292c <vTaskDelay>:
    292c:	cf 93       	push	r28
    292e:	df 93       	push	r29
    2930:	00 d0       	rcall	.+0      	; 0x2932 <vTaskDelay+0x6>
    2932:	1f 92       	push	r1
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	9b 83       	std	Y+3, r25	; 0x03
    293a:	8a 83       	std	Y+2, r24	; 0x02
    293c:	19 82       	std	Y+1, r1	; 0x01
    293e:	8a 81       	ldd	r24, Y+2	; 0x02
    2940:	9b 81       	ldd	r25, Y+3	; 0x03
    2942:	89 2b       	or	r24, r25
    2944:	51 f0       	breq	.+20     	; 0x295a <vTaskDelay+0x2e>
    2946:	0e 94 ee 14 	call	0x29dc	; 0x29dc <vTaskSuspendAll>
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	9b 81       	ldd	r25, Y+3	; 0x03
    294e:	60 e0       	ldi	r22, 0x00	; 0
    2950:	0e 94 79 19 	call	0x32f2	; 0x32f2 <prvAddCurrentTaskToDelayedList>
    2954:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <xTaskResumeAll>
    2958:	89 83       	std	Y+1, r24	; 0x01
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	88 23       	and	r24, r24
    295e:	11 f4       	brne	.+4      	; 0x2964 <vTaskDelay+0x38>
    2960:	0e 94 cb 0a 	call	0x1596	; 0x1596 <vPortYield>
    2964:	00 00       	nop
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	08 95       	ret

00002972 <vTaskStartScheduler>:
    2972:	ef 92       	push	r14
    2974:	ff 92       	push	r15
    2976:	0f 93       	push	r16
    2978:	cf 93       	push	r28
    297a:	df 93       	push	r29
    297c:	1f 92       	push	r1
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	0f 2e       	mov	r0, r31
    2984:	f5 e3       	ldi	r31, 0x35	; 53
    2986:	ef 2e       	mov	r14, r31
    2988:	f7 e0       	ldi	r31, 0x07	; 7
    298a:	ff 2e       	mov	r15, r31
    298c:	f0 2d       	mov	r31, r0
    298e:	00 e0       	ldi	r16, 0x00	; 0
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	45 e5       	ldi	r20, 0x55	; 85
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	6a e4       	ldi	r22, 0x4A	; 74
    299a:	71 e0       	ldi	r23, 0x01	; 1
    299c:	84 e2       	ldi	r24, 0x24	; 36
    299e:	98 e1       	ldi	r25, 0x18	; 24
    29a0:	0e 94 b9 12 	call	0x2572	; 0x2572 <xTaskCreate>
    29a4:	89 83       	std	Y+1, r24	; 0x01
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	81 30       	cpi	r24, 0x01	; 1
    29aa:	81 f4       	brne	.+32     	; 0x29cc <vTaskStartScheduler+0x5a>
    29ac:	f8 94       	cli
    29ae:	8f ef       	ldi	r24, 0xFF	; 255
    29b0:	9f ef       	ldi	r25, 0xFF	; 255
    29b2:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <xNextTaskUnblockTime+0x1>
    29b6:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <xNextTaskUnblockTime>
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <xSchedulerRunning>
    29c0:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <xTickCount+0x1>
    29c4:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <xTickCount>
    29c8:	0e 94 96 0a 	call	0x152c	; 0x152c <xPortStartScheduler>
    29cc:	00 00       	nop
    29ce:	0f 90       	pop	r0
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	0f 91       	pop	r16
    29d6:	ff 90       	pop	r15
    29d8:	ef 90       	pop	r14
    29da:	08 95       	ret

000029dc <vTaskSuspendAll>:
    29dc:	cf 93       	push	r28
    29de:	df 93       	push	r29
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxSchedulerSuspended>
    29e8:	8f 5f       	subi	r24, 0xFF	; 255
    29ea:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <uxSchedulerSuspended>
    29ee:	00 00       	nop
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	08 95       	ret

000029f6 <xTaskResumeAll>:
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <xTaskResumeAll+0x6>
    29fc:	00 d0       	rcall	.+0      	; 0x29fe <xTaskResumeAll+0x8>
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	1a 82       	std	Y+2, r1	; 0x02
    2a04:	19 82       	std	Y+1, r1	; 0x01
    2a06:	1b 82       	std	Y+3, r1	; 0x03
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	0f 92       	push	r0
    2a0e:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxSchedulerSuspended>
    2a12:	81 50       	subi	r24, 0x01	; 1
    2a14:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <uxSchedulerSuspended>
    2a18:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxSchedulerSuspended>
    2a1c:	88 23       	and	r24, r24
    2a1e:	09 f0       	breq	.+2      	; 0x2a22 <xTaskResumeAll+0x2c>
    2a20:	77 c0       	rjmp	.+238    	; 0x2b10 <xTaskResumeAll+0x11a>
    2a22:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxCurrentNumberOfTasks>
    2a26:	88 23       	and	r24, r24
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <xTaskResumeAll+0x36>
    2a2a:	72 c0       	rjmp	.+228    	; 0x2b10 <xTaskResumeAll+0x11a>
    2a2c:	49 c0       	rjmp	.+146    	; 0x2ac0 <xTaskResumeAll+0xca>
    2a2e:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <xPendingReadyList+0x5>
    2a32:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <xPendingReadyList+0x6>
    2a36:	fc 01       	movw	r30, r24
    2a38:	86 81       	ldd	r24, Z+6	; 0x06
    2a3a:	97 81       	ldd	r25, Z+7	; 0x07
    2a3c:	9a 83       	std	Y+2, r25	; 0x02
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	9a 81       	ldd	r25, Y+2	; 0x02
    2a44:	0c 96       	adiw	r24, 0x0c	; 12
    2a46:	0e 94 96 08 	call	0x112c	; 0x112c <uxListRemove>
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4e:	02 96       	adiw	r24, 0x02	; 2
    2a50:	0e 94 96 08 	call	0x112c	; 0x112c <uxListRemove>
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	9a 81       	ldd	r25, Y+2	; 0x02
    2a58:	fc 01       	movw	r30, r24
    2a5a:	96 89       	ldd	r25, Z+22	; 0x16
    2a5c:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxTopReadyPriority>
    2a60:	89 17       	cp	r24, r25
    2a62:	30 f4       	brcc	.+12     	; 0x2a70 <xTaskResumeAll+0x7a>
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	9a 81       	ldd	r25, Y+2	; 0x02
    2a68:	fc 01       	movw	r30, r24
    2a6a:	86 89       	ldd	r24, Z+22	; 0x16
    2a6c:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <uxTopReadyPriority>
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	9a 81       	ldd	r25, Y+2	; 0x02
    2a74:	ac 01       	movw	r20, r24
    2a76:	4e 5f       	subi	r20, 0xFE	; 254
    2a78:	5f 4f       	sbci	r21, 0xFF	; 255
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7e:	fc 01       	movw	r30, r24
    2a80:	86 89       	ldd	r24, Z+22	; 0x16
    2a82:	28 2f       	mov	r18, r24
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	c9 01       	movw	r24, r18
    2a88:	88 0f       	add	r24, r24
    2a8a:	99 1f       	adc	r25, r25
    2a8c:	88 0f       	add	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	82 0f       	add	r24, r18
    2a96:	93 1f       	adc	r25, r19
    2a98:	83 52       	subi	r24, 0x23	; 35
    2a9a:	99 4f       	sbci	r25, 0xF9	; 249
    2a9c:	ba 01       	movw	r22, r20
    2a9e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <vListInsertEnd>
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	26 89       	ldd	r18, Z+22	; 0x16
    2aaa:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2aae:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	86 89       	ldd	r24, Z+22	; 0x16
    2ab6:	28 17       	cp	r18, r24
    2ab8:	18 f0       	brcs	.+6      	; 0x2ac0 <xTaskResumeAll+0xca>
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <xYieldPending>
    2ac0:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xPendingReadyList>
    2ac4:	88 23       	and	r24, r24
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <xTaskResumeAll+0xd4>
    2ac8:	b2 cf       	rjmp	.-156    	; 0x2a2e <xTaskResumeAll+0x38>
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ace:	89 2b       	or	r24, r25
    2ad0:	11 f0       	breq	.+4      	; 0x2ad6 <xTaskResumeAll+0xe0>
    2ad2:	0e 94 cd 18 	call	0x319a	; 0x319a <prvResetNextTaskUnblockTime>
    2ad6:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <uxPendedTicks>
    2ada:	8c 83       	std	Y+4, r24	; 0x04
    2adc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ade:	88 23       	and	r24, r24
    2ae0:	79 f0       	breq	.+30     	; 0x2b00 <xTaskResumeAll+0x10a>
    2ae2:	0e 94 92 15 	call	0x2b24	; 0x2b24 <xTaskIncrementTick>
    2ae6:	88 23       	and	r24, r24
    2ae8:	19 f0       	breq	.+6      	; 0x2af0 <xTaskResumeAll+0xfa>
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <xYieldPending>
    2af0:	8c 81       	ldd	r24, Y+4	; 0x04
    2af2:	81 50       	subi	r24, 0x01	; 1
    2af4:	8c 83       	std	Y+4, r24	; 0x04
    2af6:	8c 81       	ldd	r24, Y+4	; 0x04
    2af8:	88 23       	and	r24, r24
    2afa:	99 f7       	brne	.-26     	; 0x2ae2 <xTaskResumeAll+0xec>
    2afc:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <uxPendedTicks>
    2b00:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <xYieldPending>
    2b04:	88 23       	and	r24, r24
    2b06:	21 f0       	breq	.+8      	; 0x2b10 <xTaskResumeAll+0x11a>
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	8b 83       	std	Y+3, r24	; 0x03
    2b0c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <vPortYield>
    2b10:	0f 90       	pop	r0
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	8b 81       	ldd	r24, Y+3	; 0x03
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	df 91       	pop	r29
    2b20:	cf 91       	pop	r28
    2b22:	08 95       	ret

00002b24 <xTaskIncrementTick>:
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	29 97       	sbiw	r28, 0x09	; 9
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	19 82       	std	Y+1, r1	; 0x01
    2b3a:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxSchedulerSuspended>
    2b3e:	88 23       	and	r24, r24
    2b40:	09 f0       	breq	.+2      	; 0x2b44 <xTaskIncrementTick+0x20>
    2b42:	c8 c0       	rjmp	.+400    	; 0x2cd4 <xTaskIncrementTick+0x1b0>
    2b44:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <xTickCount>
    2b48:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <xTickCount+0x1>
    2b4c:	01 96       	adiw	r24, 0x01	; 1
    2b4e:	9b 83       	std	Y+3, r25	; 0x03
    2b50:	8a 83       	std	Y+2, r24	; 0x02
    2b52:	8a 81       	ldd	r24, Y+2	; 0x02
    2b54:	9b 81       	ldd	r25, Y+3	; 0x03
    2b56:	90 93 2c 07 	sts	0x072C, r25	; 0x80072c <xTickCount+0x1>
    2b5a:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <xTickCount>
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	9b 81       	ldd	r25, Y+3	; 0x03
    2b62:	89 2b       	or	r24, r25
    2b64:	d9 f4       	brne	.+54     	; 0x2b9c <xTaskIncrementTick+0x78>
    2b66:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
    2b6a:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
    2b6e:	9d 83       	std	Y+5, r25	; 0x05
    2b70:	8c 83       	std	Y+4, r24	; 0x04
    2b72:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <pxOverflowDelayedTaskList>
    2b76:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <pxOverflowDelayedTaskList+0x1>
    2b7a:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxDelayedTaskList+0x1>
    2b7e:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxDelayedTaskList>
    2b82:	8c 81       	ldd	r24, Y+4	; 0x04
    2b84:	9d 81       	ldd	r25, Y+5	; 0x05
    2b86:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <pxOverflowDelayedTaskList+0x1>
    2b8a:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <pxOverflowDelayedTaskList>
    2b8e:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <xNumOfOverflows>
    2b92:	8f 5f       	subi	r24, 0xFF	; 255
    2b94:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <xNumOfOverflows>
    2b98:	0e 94 cd 18 	call	0x319a	; 0x319a <prvResetNextTaskUnblockTime>
    2b9c:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <xNextTaskUnblockTime>
    2ba0:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <xNextTaskUnblockTime+0x1>
    2ba4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ba6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ba8:	28 17       	cp	r18, r24
    2baa:	39 07       	cpc	r19, r25
    2bac:	08 f4       	brcc	.+2      	; 0x2bb0 <xTaskIncrementTick+0x8c>
    2bae:	78 c0       	rjmp	.+240    	; 0x2ca0 <xTaskIncrementTick+0x17c>
    2bb0:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
    2bb4:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
    2bb8:	fc 01       	movw	r30, r24
    2bba:	80 81       	ld	r24, Z
    2bbc:	88 23       	and	r24, r24
    2bbe:	39 f4       	brne	.+14     	; 0x2bce <xTaskIncrementTick+0xaa>
    2bc0:	8f ef       	ldi	r24, 0xFF	; 255
    2bc2:	9f ef       	ldi	r25, 0xFF	; 255
    2bc4:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <xNextTaskUnblockTime+0x1>
    2bc8:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <xNextTaskUnblockTime>
    2bcc:	69 c0       	rjmp	.+210    	; 0x2ca0 <xTaskIncrementTick+0x17c>
    2bce:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
    2bd2:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	85 81       	ldd	r24, Z+5	; 0x05
    2bda:	96 81       	ldd	r25, Z+6	; 0x06
    2bdc:	fc 01       	movw	r30, r24
    2bde:	86 81       	ldd	r24, Z+6	; 0x06
    2be0:	97 81       	ldd	r25, Z+7	; 0x07
    2be2:	9f 83       	std	Y+7, r25	; 0x07
    2be4:	8e 83       	std	Y+6, r24	; 0x06
    2be6:	8e 81       	ldd	r24, Y+6	; 0x06
    2be8:	9f 81       	ldd	r25, Y+7	; 0x07
    2bea:	fc 01       	movw	r30, r24
    2bec:	82 81       	ldd	r24, Z+2	; 0x02
    2bee:	93 81       	ldd	r25, Z+3	; 0x03
    2bf0:	99 87       	std	Y+9, r25	; 0x09
    2bf2:	88 87       	std	Y+8, r24	; 0x08
    2bf4:	2a 81       	ldd	r18, Y+2	; 0x02
    2bf6:	3b 81       	ldd	r19, Y+3	; 0x03
    2bf8:	88 85       	ldd	r24, Y+8	; 0x08
    2bfa:	99 85       	ldd	r25, Y+9	; 0x09
    2bfc:	28 17       	cp	r18, r24
    2bfe:	39 07       	cpc	r19, r25
    2c00:	38 f4       	brcc	.+14     	; 0x2c10 <xTaskIncrementTick+0xec>
    2c02:	88 85       	ldd	r24, Y+8	; 0x08
    2c04:	99 85       	ldd	r25, Y+9	; 0x09
    2c06:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <xNextTaskUnblockTime+0x1>
    2c0a:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <xNextTaskUnblockTime>
    2c0e:	48 c0       	rjmp	.+144    	; 0x2ca0 <xTaskIncrementTick+0x17c>
    2c10:	8e 81       	ldd	r24, Y+6	; 0x06
    2c12:	9f 81       	ldd	r25, Y+7	; 0x07
    2c14:	02 96       	adiw	r24, 0x02	; 2
    2c16:	0e 94 96 08 	call	0x112c	; 0x112c <uxListRemove>
    2c1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c1e:	fc 01       	movw	r30, r24
    2c20:	84 89       	ldd	r24, Z+20	; 0x14
    2c22:	95 89       	ldd	r25, Z+21	; 0x15
    2c24:	89 2b       	or	r24, r25
    2c26:	29 f0       	breq	.+10     	; 0x2c32 <xTaskIncrementTick+0x10e>
    2c28:	8e 81       	ldd	r24, Y+6	; 0x06
    2c2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c2c:	0c 96       	adiw	r24, 0x0c	; 12
    2c2e:	0e 94 96 08 	call	0x112c	; 0x112c <uxListRemove>
    2c32:	8e 81       	ldd	r24, Y+6	; 0x06
    2c34:	9f 81       	ldd	r25, Y+7	; 0x07
    2c36:	fc 01       	movw	r30, r24
    2c38:	96 89       	ldd	r25, Z+22	; 0x16
    2c3a:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxTopReadyPriority>
    2c3e:	89 17       	cp	r24, r25
    2c40:	30 f4       	brcc	.+12     	; 0x2c4e <xTaskIncrementTick+0x12a>
    2c42:	8e 81       	ldd	r24, Y+6	; 0x06
    2c44:	9f 81       	ldd	r25, Y+7	; 0x07
    2c46:	fc 01       	movw	r30, r24
    2c48:	86 89       	ldd	r24, Z+22	; 0x16
    2c4a:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <uxTopReadyPriority>
    2c4e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c50:	9f 81       	ldd	r25, Y+7	; 0x07
    2c52:	ac 01       	movw	r20, r24
    2c54:	4e 5f       	subi	r20, 0xFE	; 254
    2c56:	5f 4f       	sbci	r21, 0xFF	; 255
    2c58:	8e 81       	ldd	r24, Y+6	; 0x06
    2c5a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	86 89       	ldd	r24, Z+22	; 0x16
    2c60:	28 2f       	mov	r18, r24
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	c9 01       	movw	r24, r18
    2c66:	88 0f       	add	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	88 0f       	add	r24, r24
    2c70:	99 1f       	adc	r25, r25
    2c72:	82 0f       	add	r24, r18
    2c74:	93 1f       	adc	r25, r19
    2c76:	83 52       	subi	r24, 0x23	; 35
    2c78:	99 4f       	sbci	r25, 0xF9	; 249
    2c7a:	ba 01       	movw	r22, r20
    2c7c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <vListInsertEnd>
    2c80:	8e 81       	ldd	r24, Y+6	; 0x06
    2c82:	9f 81       	ldd	r25, Y+7	; 0x07
    2c84:	fc 01       	movw	r30, r24
    2c86:	26 89       	ldd	r18, Z+22	; 0x16
    2c88:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2c8c:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    2c90:	fc 01       	movw	r30, r24
    2c92:	86 89       	ldd	r24, Z+22	; 0x16
    2c94:	28 17       	cp	r18, r24
    2c96:	08 f4       	brcc	.+2      	; 0x2c9a <xTaskIncrementTick+0x176>
    2c98:	8b cf       	rjmp	.-234    	; 0x2bb0 <xTaskIncrementTick+0x8c>
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    2c9e:	88 cf       	rjmp	.-240    	; 0x2bb0 <xTaskIncrementTick+0x8c>
    2ca0:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2ca4:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    2ca8:	fc 01       	movw	r30, r24
    2caa:	86 89       	ldd	r24, Z+22	; 0x16
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	c9 01       	movw	r24, r18
    2cb2:	88 0f       	add	r24, r24
    2cb4:	99 1f       	adc	r25, r25
    2cb6:	88 0f       	add	r24, r24
    2cb8:	99 1f       	adc	r25, r25
    2cba:	88 0f       	add	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	82 0f       	add	r24, r18
    2cc0:	93 1f       	adc	r25, r19
    2cc2:	83 52       	subi	r24, 0x23	; 35
    2cc4:	99 4f       	sbci	r25, 0xF9	; 249
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	80 81       	ld	r24, Z
    2cca:	82 30       	cpi	r24, 0x02	; 2
    2ccc:	40 f0       	brcs	.+16     	; 0x2cde <xTaskIncrementTick+0x1ba>
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	89 83       	std	Y+1, r24	; 0x01
    2cd2:	05 c0       	rjmp	.+10     	; 0x2cde <xTaskIncrementTick+0x1ba>
    2cd4:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <uxPendedTicks>
    2cd8:	8f 5f       	subi	r24, 0xFF	; 255
    2cda:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <uxPendedTicks>
    2cde:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <xYieldPending>
    2ce2:	88 23       	and	r24, r24
    2ce4:	11 f0       	breq	.+4      	; 0x2cea <xTaskIncrementTick+0x1c6>
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	89 83       	std	Y+1, r24	; 0x01
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	29 96       	adiw	r28, 0x09	; 9
    2cee:	0f b6       	in	r0, 0x3f	; 63
    2cf0:	f8 94       	cli
    2cf2:	de bf       	out	0x3e, r29	; 62
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	08 95       	ret

00002cfe <vTaskSwitchContext>:
    2cfe:	cf 93       	push	r28
    2d00:	df 93       	push	r29
    2d02:	00 d0       	rcall	.+0      	; 0x2d04 <vTaskSwitchContext+0x6>
    2d04:	1f 92       	push	r1
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxSchedulerSuspended>
    2d0e:	88 23       	and	r24, r24
    2d10:	21 f0       	breq	.+8      	; 0x2d1a <vTaskSwitchContext+0x1c>
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <xYieldPending>
    2d18:	71 c0       	rjmp	.+226    	; 0x2dfc <vTaskSwitchContext+0xfe>
    2d1a:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <xYieldPending>
    2d1e:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2d22:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    2d26:	fc 01       	movw	r30, r24
    2d28:	85 a1       	ldd	r24, Z+37	; 0x25
    2d2a:	96 a1       	ldd	r25, Z+38	; 0x26
    2d2c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <switch_out>
    2d30:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxTopReadyPriority>
    2d34:	89 83       	std	Y+1, r24	; 0x01
    2d36:	03 c0       	rjmp	.+6      	; 0x2d3e <vTaskSwitchContext+0x40>
    2d38:	89 81       	ldd	r24, Y+1	; 0x01
    2d3a:	81 50       	subi	r24, 0x01	; 1
    2d3c:	89 83       	std	Y+1, r24	; 0x01
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	28 2f       	mov	r18, r24
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	c9 01       	movw	r24, r18
    2d46:	88 0f       	add	r24, r24
    2d48:	99 1f       	adc	r25, r25
    2d4a:	88 0f       	add	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	88 0f       	add	r24, r24
    2d50:	99 1f       	adc	r25, r25
    2d52:	82 0f       	add	r24, r18
    2d54:	93 1f       	adc	r25, r19
    2d56:	83 52       	subi	r24, 0x23	; 35
    2d58:	99 4f       	sbci	r25, 0xF9	; 249
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	80 81       	ld	r24, Z
    2d5e:	88 23       	and	r24, r24
    2d60:	59 f3       	breq	.-42     	; 0x2d38 <vTaskSwitchContext+0x3a>
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	28 2f       	mov	r18, r24
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	c9 01       	movw	r24, r18
    2d6a:	88 0f       	add	r24, r24
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	88 0f       	add	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	88 0f       	add	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	82 0f       	add	r24, r18
    2d78:	93 1f       	adc	r25, r19
    2d7a:	83 52       	subi	r24, 0x23	; 35
    2d7c:	99 4f       	sbci	r25, 0xF9	; 249
    2d7e:	9b 83       	std	Y+3, r25	; 0x03
    2d80:	8a 83       	std	Y+2, r24	; 0x02
    2d82:	8a 81       	ldd	r24, Y+2	; 0x02
    2d84:	9b 81       	ldd	r25, Y+3	; 0x03
    2d86:	fc 01       	movw	r30, r24
    2d88:	81 81       	ldd	r24, Z+1	; 0x01
    2d8a:	92 81       	ldd	r25, Z+2	; 0x02
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	22 81       	ldd	r18, Z+2	; 0x02
    2d90:	33 81       	ldd	r19, Z+3	; 0x03
    2d92:	8a 81       	ldd	r24, Y+2	; 0x02
    2d94:	9b 81       	ldd	r25, Y+3	; 0x03
    2d96:	fc 01       	movw	r30, r24
    2d98:	32 83       	std	Z+2, r19	; 0x02
    2d9a:	21 83       	std	Z+1, r18	; 0x01
    2d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2da0:	fc 01       	movw	r30, r24
    2da2:	21 81       	ldd	r18, Z+1	; 0x01
    2da4:	32 81       	ldd	r19, Z+2	; 0x02
    2da6:	8a 81       	ldd	r24, Y+2	; 0x02
    2da8:	9b 81       	ldd	r25, Y+3	; 0x03
    2daa:	03 96       	adiw	r24, 0x03	; 3
    2dac:	28 17       	cp	r18, r24
    2dae:	39 07       	cpc	r19, r25
    2db0:	69 f4       	brne	.+26     	; 0x2dcc <vTaskSwitchContext+0xce>
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	9b 81       	ldd	r25, Y+3	; 0x03
    2db6:	fc 01       	movw	r30, r24
    2db8:	81 81       	ldd	r24, Z+1	; 0x01
    2dba:	92 81       	ldd	r25, Z+2	; 0x02
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	22 81       	ldd	r18, Z+2	; 0x02
    2dc0:	33 81       	ldd	r19, Z+3	; 0x03
    2dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	32 83       	std	Z+2, r19	; 0x02
    2dca:	21 83       	std	Z+1, r18	; 0x01
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	81 81       	ldd	r24, Z+1	; 0x01
    2dd4:	92 81       	ldd	r25, Z+2	; 0x02
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	86 81       	ldd	r24, Z+6	; 0x06
    2dda:	97 81       	ldd	r25, Z+7	; 0x07
    2ddc:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <pxCurrentTCB+0x1>
    2de0:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <pxCurrentTCB>
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <uxTopReadyPriority>
    2dea:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2dee:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    2df2:	fc 01       	movw	r30, r24
    2df4:	85 a1       	ldd	r24, Z+37	; 0x25
    2df6:	96 a1       	ldd	r25, Z+38	; 0x26
    2df8:	0e 94 aa 06 	call	0xd54	; 0xd54 <switch_in>
    2dfc:	00 00       	nop
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	df 91       	pop	r29
    2e06:	cf 91       	pop	r28
    2e08:	08 95       	ret

00002e0a <vTaskPlaceOnEventList>:
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	00 d0       	rcall	.+0      	; 0x2e10 <vTaskPlaceOnEventList+0x6>
    2e10:	00 d0       	rcall	.+0      	; 0x2e12 <vTaskPlaceOnEventList+0x8>
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
    2e16:	9a 83       	std	Y+2, r25	; 0x02
    2e18:	89 83       	std	Y+1, r24	; 0x01
    2e1a:	7c 83       	std	Y+4, r23	; 0x04
    2e1c:	6b 83       	std	Y+3, r22	; 0x03
    2e1e:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2e22:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    2e26:	9c 01       	movw	r18, r24
    2e28:	24 5f       	subi	r18, 0xF4	; 244
    2e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e30:	b9 01       	movw	r22, r18
    2e32:	0e 94 1e 08 	call	0x103c	; 0x103c <vListInsert>
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3a:	61 e0       	ldi	r22, 0x01	; 1
    2e3c:	0e 94 79 19 	call	0x32f2	; 0x32f2 <prvAddCurrentTaskToDelayedList>
    2e40:	00 00       	nop
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	df 91       	pop	r29
    2e4c:	cf 91       	pop	r28
    2e4e:	08 95       	ret

00002e50 <xTaskRemoveFromEventList>:
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <xTaskRemoveFromEventList+0x6>
    2e56:	00 d0       	rcall	.+0      	; 0x2e58 <xTaskRemoveFromEventList+0x8>
    2e58:	1f 92       	push	r1
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	9d 83       	std	Y+5, r25	; 0x05
    2e60:	8c 83       	std	Y+4, r24	; 0x04
    2e62:	8c 81       	ldd	r24, Y+4	; 0x04
    2e64:	9d 81       	ldd	r25, Y+5	; 0x05
    2e66:	fc 01       	movw	r30, r24
    2e68:	85 81       	ldd	r24, Z+5	; 0x05
    2e6a:	96 81       	ldd	r25, Z+6	; 0x06
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	86 81       	ldd	r24, Z+6	; 0x06
    2e70:	97 81       	ldd	r25, Z+7	; 0x07
    2e72:	9b 83       	std	Y+3, r25	; 0x03
    2e74:	8a 83       	std	Y+2, r24	; 0x02
    2e76:	8a 81       	ldd	r24, Y+2	; 0x02
    2e78:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7a:	0c 96       	adiw	r24, 0x0c	; 12
    2e7c:	0e 94 96 08 	call	0x112c	; 0x112c <uxListRemove>
    2e80:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <uxSchedulerSuspended>
    2e84:	88 23       	and	r24, r24
    2e86:	69 f5       	brne	.+90     	; 0x2ee2 <xTaskRemoveFromEventList+0x92>
    2e88:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8c:	02 96       	adiw	r24, 0x02	; 2
    2e8e:	0e 94 96 08 	call	0x112c	; 0x112c <uxListRemove>
    2e92:	8a 81       	ldd	r24, Y+2	; 0x02
    2e94:	9b 81       	ldd	r25, Y+3	; 0x03
    2e96:	fc 01       	movw	r30, r24
    2e98:	96 89       	ldd	r25, Z+22	; 0x16
    2e9a:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxTopReadyPriority>
    2e9e:	89 17       	cp	r24, r25
    2ea0:	30 f4       	brcc	.+12     	; 0x2eae <xTaskRemoveFromEventList+0x5e>
    2ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea6:	fc 01       	movw	r30, r24
    2ea8:	86 89       	ldd	r24, Z+22	; 0x16
    2eaa:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <uxTopReadyPriority>
    2eae:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb2:	ac 01       	movw	r20, r24
    2eb4:	4e 5f       	subi	r20, 0xFE	; 254
    2eb6:	5f 4f       	sbci	r21, 0xFF	; 255
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	9b 81       	ldd	r25, Y+3	; 0x03
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	86 89       	ldd	r24, Z+22	; 0x16
    2ec0:	28 2f       	mov	r18, r24
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	c9 01       	movw	r24, r18
    2ec6:	88 0f       	add	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	88 0f       	add	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	88 0f       	add	r24, r24
    2ed0:	99 1f       	adc	r25, r25
    2ed2:	82 0f       	add	r24, r18
    2ed4:	93 1f       	adc	r25, r19
    2ed6:	83 52       	subi	r24, 0x23	; 35
    2ed8:	99 4f       	sbci	r25, 0xF9	; 249
    2eda:	ba 01       	movw	r22, r20
    2edc:	0e 94 cf 07 	call	0xf9e	; 0xf9e <vListInsertEnd>
    2ee0:	08 c0       	rjmp	.+16     	; 0x2ef2 <xTaskRemoveFromEventList+0xa2>
    2ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee6:	0c 96       	adiw	r24, 0x0c	; 12
    2ee8:	bc 01       	movw	r22, r24
    2eea:	87 e1       	ldi	r24, 0x17	; 23
    2eec:	97 e0       	ldi	r25, 0x07	; 7
    2eee:	0e 94 cf 07 	call	0xf9e	; 0xf9e <vListInsertEnd>
    2ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	26 89       	ldd	r18, Z+22	; 0x16
    2efa:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    2efe:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    2f02:	fc 01       	movw	r30, r24
    2f04:	86 89       	ldd	r24, Z+22	; 0x16
    2f06:	82 17       	cp	r24, r18
    2f08:	30 f4       	brcc	.+12     	; 0x2f16 <xTaskRemoveFromEventList+0xc6>
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	89 83       	std	Y+1, r24	; 0x01
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <xYieldPending>
    2f14:	01 c0       	rjmp	.+2      	; 0x2f18 <xTaskRemoveFromEventList+0xc8>
    2f16:	19 82       	std	Y+1, r1	; 0x01
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	df 91       	pop	r29
    2f26:	cf 91       	pop	r28
    2f28:	08 95       	ret

00002f2a <vTaskSetTimeOutState>:
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <vTaskSetTimeOutState+0x6>
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	9a 83       	std	Y+2, r25	; 0x02
    2f36:	89 83       	std	Y+1, r24	; 0x01
    2f38:	20 91 31 07 	lds	r18, 0x0731	; 0x800731 <xNumOfOverflows>
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f40:	fc 01       	movw	r30, r24
    2f42:	20 83       	st	Z, r18
    2f44:	20 91 2b 07 	lds	r18, 0x072B	; 0x80072b <xTickCount>
    2f48:	30 91 2c 07 	lds	r19, 0x072C	; 0x80072c <xTickCount+0x1>
    2f4c:	89 81       	ldd	r24, Y+1	; 0x01
    2f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f50:	fc 01       	movw	r30, r24
    2f52:	32 83       	std	Z+2, r19	; 0x02
    2f54:	21 83       	std	Z+1, r18	; 0x01
    2f56:	00 00       	nop
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	df 91       	pop	r29
    2f5e:	cf 91       	pop	r28
    2f60:	08 95       	ret

00002f62 <xTaskCheckForTimeOut>:
    2f62:	cf 93       	push	r28
    2f64:	df 93       	push	r29
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	27 97       	sbiw	r28, 0x07	; 7
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	9d 83       	std	Y+5, r25	; 0x05
    2f78:	8c 83       	std	Y+4, r24	; 0x04
    2f7a:	7f 83       	std	Y+7, r23	; 0x07
    2f7c:	6e 83       	std	Y+6, r22	; 0x06
    2f7e:	0f b6       	in	r0, 0x3f	; 63
    2f80:	f8 94       	cli
    2f82:	0f 92       	push	r0
    2f84:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <xTickCount>
    2f88:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <xTickCount+0x1>
    2f8c:	9b 83       	std	Y+3, r25	; 0x03
    2f8e:	8a 83       	std	Y+2, r24	; 0x02
    2f90:	8c 81       	ldd	r24, Y+4	; 0x04
    2f92:	9d 81       	ldd	r25, Y+5	; 0x05
    2f94:	fc 01       	movw	r30, r24
    2f96:	90 81       	ld	r25, Z
    2f98:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <xNumOfOverflows>
    2f9c:	98 17       	cp	r25, r24
    2f9e:	69 f0       	breq	.+26     	; 0x2fba <xTaskCheckForTimeOut+0x58>
    2fa0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa2:	9d 81       	ldd	r25, Y+5	; 0x05
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	21 81       	ldd	r18, Z+1	; 0x01
    2fa8:	32 81       	ldd	r19, Z+2	; 0x02
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	9b 81       	ldd	r25, Y+3	; 0x03
    2fae:	82 17       	cp	r24, r18
    2fb0:	93 07       	cpc	r25, r19
    2fb2:	18 f0       	brcs	.+6      	; 0x2fba <xTaskCheckForTimeOut+0x58>
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	89 83       	std	Y+1, r24	; 0x01
    2fb8:	30 c0       	rjmp	.+96     	; 0x301a <xTaskCheckForTimeOut+0xb8>
    2fba:	8c 81       	ldd	r24, Y+4	; 0x04
    2fbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	81 81       	ldd	r24, Z+1	; 0x01
    2fc2:	92 81       	ldd	r25, Z+2	; 0x02
    2fc4:	2a 81       	ldd	r18, Y+2	; 0x02
    2fc6:	3b 81       	ldd	r19, Y+3	; 0x03
    2fc8:	28 1b       	sub	r18, r24
    2fca:	39 0b       	sbc	r19, r25
    2fcc:	8e 81       	ldd	r24, Y+6	; 0x06
    2fce:	9f 81       	ldd	r25, Y+7	; 0x07
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	80 81       	ld	r24, Z
    2fd4:	91 81       	ldd	r25, Z+1	; 0x01
    2fd6:	28 17       	cp	r18, r24
    2fd8:	39 07       	cpc	r19, r25
    2fda:	e8 f4       	brcc	.+58     	; 0x3016 <xTaskCheckForTimeOut+0xb4>
    2fdc:	8e 81       	ldd	r24, Y+6	; 0x06
    2fde:	9f 81       	ldd	r25, Y+7	; 0x07
    2fe0:	fc 01       	movw	r30, r24
    2fe2:	20 81       	ld	r18, Z
    2fe4:	31 81       	ldd	r19, Z+1	; 0x01
    2fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe8:	9d 81       	ldd	r25, Y+5	; 0x05
    2fea:	fc 01       	movw	r30, r24
    2fec:	41 81       	ldd	r20, Z+1	; 0x01
    2fee:	52 81       	ldd	r21, Z+2	; 0x02
    2ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff4:	ba 01       	movw	r22, r20
    2ff6:	68 1b       	sub	r22, r24
    2ff8:	79 0b       	sbc	r23, r25
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	28 0f       	add	r18, r24
    2ffe:	39 1f       	adc	r19, r25
    3000:	8e 81       	ldd	r24, Y+6	; 0x06
    3002:	9f 81       	ldd	r25, Y+7	; 0x07
    3004:	fc 01       	movw	r30, r24
    3006:	31 83       	std	Z+1, r19	; 0x01
    3008:	20 83       	st	Z, r18
    300a:	8c 81       	ldd	r24, Y+4	; 0x04
    300c:	9d 81       	ldd	r25, Y+5	; 0x05
    300e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <vTaskSetTimeOutState>
    3012:	19 82       	std	Y+1, r1	; 0x01
    3014:	02 c0       	rjmp	.+4      	; 0x301a <xTaskCheckForTimeOut+0xb8>
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	89 83       	std	Y+1, r24	; 0x01
    301a:	0f 90       	pop	r0
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	27 96       	adiw	r28, 0x07	; 7
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	08 95       	ret

00003032 <vTaskMissedYield>:
    3032:	cf 93       	push	r28
    3034:	df 93       	push	r29
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <xYieldPending>
    3040:	00 00       	nop
    3042:	df 91       	pop	r29
    3044:	cf 91       	pop	r28
    3046:	08 95       	ret

00003048 <prvIdleTask>:
    3048:	cf 93       	push	r28
    304a:	df 93       	push	r29
    304c:	00 d0       	rcall	.+0      	; 0x304e <prvIdleTask+0x6>
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
    3052:	9a 83       	std	Y+2, r25	; 0x02
    3054:	89 83       	std	Y+1, r24	; 0x01
    3056:	0e 94 74 18 	call	0x30e8	; 0x30e8 <prvCheckTasksWaitingTermination>
    305a:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <pxReadyTasksLists>
    305e:	82 30       	cpi	r24, 0x02	; 2
    3060:	10 f0       	brcs	.+4      	; 0x3066 <prvIdleTask+0x1e>
    3062:	0e 94 cb 0a 	call	0x1596	; 0x1596 <vPortYield>
    3066:	0e 94 13 05 	call	0xa26	; 0xa26 <vApplicationIdleHook>
    306a:	f5 cf       	rjmp	.-22     	; 0x3056 <prvIdleTask+0xe>

0000306c <prvInitialiseTaskLists>:
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	1f 92       	push	r1
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	19 82       	std	Y+1, r1	; 0x01
    3078:	13 c0       	rjmp	.+38     	; 0x30a0 <prvInitialiseTaskLists+0x34>
    307a:	89 81       	ldd	r24, Y+1	; 0x01
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	c9 01       	movw	r24, r18
    3082:	88 0f       	add	r24, r24
    3084:	99 1f       	adc	r25, r25
    3086:	88 0f       	add	r24, r24
    3088:	99 1f       	adc	r25, r25
    308a:	88 0f       	add	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	82 0f       	add	r24, r18
    3090:	93 1f       	adc	r25, r19
    3092:	83 52       	subi	r24, 0x23	; 35
    3094:	99 4f       	sbci	r25, 0xF9	; 249
    3096:	0e 94 87 07 	call	0xf0e	; 0xf0e <vListInitialise>
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	8f 5f       	subi	r24, 0xFF	; 255
    309e:	89 83       	std	Y+1, r24	; 0x01
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	84 30       	cpi	r24, 0x04	; 4
    30a4:	50 f3       	brcs	.-44     	; 0x307a <prvInitialiseTaskLists+0xe>
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	97 e0       	ldi	r25, 0x07	; 7
    30aa:	0e 94 87 07 	call	0xf0e	; 0xf0e <vListInitialise>
    30ae:	8a e0       	ldi	r24, 0x0A	; 10
    30b0:	97 e0       	ldi	r25, 0x07	; 7
    30b2:	0e 94 87 07 	call	0xf0e	; 0xf0e <vListInitialise>
    30b6:	87 e1       	ldi	r24, 0x17	; 23
    30b8:	97 e0       	ldi	r25, 0x07	; 7
    30ba:	0e 94 87 07 	call	0xf0e	; 0xf0e <vListInitialise>
    30be:	80 e2       	ldi	r24, 0x20	; 32
    30c0:	97 e0       	ldi	r25, 0x07	; 7
    30c2:	0e 94 87 07 	call	0xf0e	; 0xf0e <vListInitialise>
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	97 e0       	ldi	r25, 0x07	; 7
    30ca:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxDelayedTaskList+0x1>
    30ce:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxDelayedTaskList>
    30d2:	8a e0       	ldi	r24, 0x0A	; 10
    30d4:	97 e0       	ldi	r25, 0x07	; 7
    30d6:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <pxOverflowDelayedTaskList+0x1>
    30da:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <pxOverflowDelayedTaskList>
    30de:	00 00       	nop
    30e0:	0f 90       	pop	r0
    30e2:	df 91       	pop	r29
    30e4:	cf 91       	pop	r28
    30e6:	08 95       	ret

000030e8 <prvCheckTasksWaitingTermination>:
    30e8:	cf 93       	push	r28
    30ea:	df 93       	push	r29
    30ec:	00 d0       	rcall	.+0      	; 0x30ee <prvCheckTasksWaitingTermination+0x6>
    30ee:	1f 92       	push	r1
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
    30f4:	2f c0       	rjmp	.+94     	; 0x3154 <prvCheckTasksWaitingTermination+0x6c>
    30f6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <vTaskSuspendAll>
    30fa:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <xTasksWaitingTermination>
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	99 23       	and	r25, r25
    3102:	09 f0       	breq	.+2      	; 0x3106 <prvCheckTasksWaitingTermination+0x1e>
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	89 83       	std	Y+1, r24	; 0x01
    3108:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <xTaskResumeAll>
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	88 23       	and	r24, r24
    3110:	09 f5       	brne	.+66     	; 0x3154 <prvCheckTasksWaitingTermination+0x6c>
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	0f 92       	push	r0
    3118:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <xTasksWaitingTermination+0x5>
    311c:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <xTasksWaitingTermination+0x6>
    3120:	fc 01       	movw	r30, r24
    3122:	86 81       	ldd	r24, Z+6	; 0x06
    3124:	97 81       	ldd	r25, Z+7	; 0x07
    3126:	9b 83       	std	Y+3, r25	; 0x03
    3128:	8a 83       	std	Y+2, r24	; 0x02
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	9b 81       	ldd	r25, Y+3	; 0x03
    312e:	02 96       	adiw	r24, 0x02	; 2
    3130:	0e 94 96 08 	call	0x112c	; 0x112c <uxListRemove>
    3134:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxCurrentNumberOfTasks>
    3138:	81 50       	subi	r24, 0x01	; 1
    313a:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <uxCurrentNumberOfTasks>
    313e:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <uxDeletedTasksWaitingCleanUp>
    3142:	81 50       	subi	r24, 0x01	; 1
    3144:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <uxDeletedTasksWaitingCleanUp>
    3148:	0f 90       	pop	r0
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	8a 81       	ldd	r24, Y+2	; 0x02
    314e:	9b 81       	ldd	r25, Y+3	; 0x03
    3150:	0e 94 b5 18 	call	0x316a	; 0x316a <prvDeleteTCB>
    3154:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <uxDeletedTasksWaitingCleanUp>
    3158:	88 23       	and	r24, r24
    315a:	69 f6       	brne	.-102    	; 0x30f6 <prvCheckTasksWaitingTermination+0xe>
    315c:	00 00       	nop
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	0f 90       	pop	r0
    3164:	df 91       	pop	r29
    3166:	cf 91       	pop	r28
    3168:	08 95       	ret

0000316a <prvDeleteTCB>:
    316a:	cf 93       	push	r28
    316c:	df 93       	push	r29
    316e:	00 d0       	rcall	.+0      	; 0x3170 <prvDeleteTCB+0x6>
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	9a 83       	std	Y+2, r25	; 0x02
    3176:	89 83       	std	Y+1, r24	; 0x01
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	9a 81       	ldd	r25, Y+2	; 0x02
    317c:	fc 01       	movw	r30, r24
    317e:	87 89       	ldd	r24, Z+23	; 0x17
    3180:	90 8d       	ldd	r25, Z+24	; 0x18
    3182:	0e 94 3e 0c 	call	0x187c	; 0x187c <vPortFree>
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	9a 81       	ldd	r25, Y+2	; 0x02
    318a:	0e 94 3e 0c 	call	0x187c	; 0x187c <vPortFree>
    318e:	00 00       	nop
    3190:	0f 90       	pop	r0
    3192:	0f 90       	pop	r0
    3194:	df 91       	pop	r29
    3196:	cf 91       	pop	r28
    3198:	08 95       	ret

0000319a <prvResetNextTaskUnblockTime>:
    319a:	cf 93       	push	r28
    319c:	df 93       	push	r29
    319e:	00 d0       	rcall	.+0      	; 0x31a0 <prvResetNextTaskUnblockTime+0x6>
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
    31a8:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
    31ac:	fc 01       	movw	r30, r24
    31ae:	80 81       	ld	r24, Z
    31b0:	88 23       	and	r24, r24
    31b2:	39 f4       	brne	.+14     	; 0x31c2 <prvResetNextTaskUnblockTime+0x28>
    31b4:	8f ef       	ldi	r24, 0xFF	; 255
    31b6:	9f ef       	ldi	r25, 0xFF	; 255
    31b8:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <xNextTaskUnblockTime+0x1>
    31bc:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <xNextTaskUnblockTime>
    31c0:	15 c0       	rjmp	.+42     	; 0x31ec <prvResetNextTaskUnblockTime+0x52>
    31c2:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
    31c6:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
    31ca:	fc 01       	movw	r30, r24
    31cc:	85 81       	ldd	r24, Z+5	; 0x05
    31ce:	96 81       	ldd	r25, Z+6	; 0x06
    31d0:	fc 01       	movw	r30, r24
    31d2:	86 81       	ldd	r24, Z+6	; 0x06
    31d4:	97 81       	ldd	r25, Z+7	; 0x07
    31d6:	9a 83       	std	Y+2, r25	; 0x02
    31d8:	89 83       	std	Y+1, r24	; 0x01
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	9a 81       	ldd	r25, Y+2	; 0x02
    31de:	fc 01       	movw	r30, r24
    31e0:	82 81       	ldd	r24, Z+2	; 0x02
    31e2:	93 81       	ldd	r25, Z+3	; 0x03
    31e4:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <xNextTaskUnblockTime+0x1>
    31e8:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <xNextTaskUnblockTime>
    31ec:	00 00       	nop
    31ee:	0f 90       	pop	r0
    31f0:	0f 90       	pop	r0
    31f2:	df 91       	pop	r29
    31f4:	cf 91       	pop	r28
    31f6:	08 95       	ret

000031f8 <xTaskPriorityDisinherit>:
    31f8:	cf 93       	push	r28
    31fa:	df 93       	push	r29
    31fc:	00 d0       	rcall	.+0      	; 0x31fe <xTaskPriorityDisinherit+0x6>
    31fe:	00 d0       	rcall	.+0      	; 0x3200 <xTaskPriorityDisinherit+0x8>
    3200:	1f 92       	push	r1
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62
    3206:	9d 83       	std	Y+5, r25	; 0x05
    3208:	8c 83       	std	Y+4, r24	; 0x04
    320a:	8c 81       	ldd	r24, Y+4	; 0x04
    320c:	9d 81       	ldd	r25, Y+5	; 0x05
    320e:	9b 83       	std	Y+3, r25	; 0x03
    3210:	8a 83       	std	Y+2, r24	; 0x02
    3212:	19 82       	std	Y+1, r1	; 0x01
    3214:	8c 81       	ldd	r24, Y+4	; 0x04
    3216:	9d 81       	ldd	r25, Y+5	; 0x05
    3218:	89 2b       	or	r24, r25
    321a:	09 f4       	brne	.+2      	; 0x321e <xTaskPriorityDisinherit+0x26>
    321c:	61 c0       	rjmp	.+194    	; 0x32e0 <xTaskPriorityDisinherit+0xe8>
    321e:	8a 81       	ldd	r24, Y+2	; 0x02
    3220:	9b 81       	ldd	r25, Y+3	; 0x03
    3222:	fc 01       	movw	r30, r24
    3224:	84 a1       	ldd	r24, Z+36	; 0x24
    3226:	2f ef       	ldi	r18, 0xFF	; 255
    3228:	28 0f       	add	r18, r24
    322a:	8a 81       	ldd	r24, Y+2	; 0x02
    322c:	9b 81       	ldd	r25, Y+3	; 0x03
    322e:	fc 01       	movw	r30, r24
    3230:	24 a3       	std	Z+36, r18	; 0x24
    3232:	8a 81       	ldd	r24, Y+2	; 0x02
    3234:	9b 81       	ldd	r25, Y+3	; 0x03
    3236:	fc 01       	movw	r30, r24
    3238:	26 89       	ldd	r18, Z+22	; 0x16
    323a:	8a 81       	ldd	r24, Y+2	; 0x02
    323c:	9b 81       	ldd	r25, Y+3	; 0x03
    323e:	fc 01       	movw	r30, r24
    3240:	83 a1       	ldd	r24, Z+35	; 0x23
    3242:	28 17       	cp	r18, r24
    3244:	09 f4       	brne	.+2      	; 0x3248 <xTaskPriorityDisinherit+0x50>
    3246:	4c c0       	rjmp	.+152    	; 0x32e0 <xTaskPriorityDisinherit+0xe8>
    3248:	8a 81       	ldd	r24, Y+2	; 0x02
    324a:	9b 81       	ldd	r25, Y+3	; 0x03
    324c:	fc 01       	movw	r30, r24
    324e:	84 a1       	ldd	r24, Z+36	; 0x24
    3250:	88 23       	and	r24, r24
    3252:	09 f0       	breq	.+2      	; 0x3256 <xTaskPriorityDisinherit+0x5e>
    3254:	45 c0       	rjmp	.+138    	; 0x32e0 <xTaskPriorityDisinherit+0xe8>
    3256:	8a 81       	ldd	r24, Y+2	; 0x02
    3258:	9b 81       	ldd	r25, Y+3	; 0x03
    325a:	02 96       	adiw	r24, 0x02	; 2
    325c:	0e 94 96 08 	call	0x112c	; 0x112c <uxListRemove>
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	9b 81       	ldd	r25, Y+3	; 0x03
    3264:	fc 01       	movw	r30, r24
    3266:	23 a1       	ldd	r18, Z+35	; 0x23
    3268:	8a 81       	ldd	r24, Y+2	; 0x02
    326a:	9b 81       	ldd	r25, Y+3	; 0x03
    326c:	fc 01       	movw	r30, r24
    326e:	26 8b       	std	Z+22, r18	; 0x16
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	9b 81       	ldd	r25, Y+3	; 0x03
    3274:	fc 01       	movw	r30, r24
    3276:	86 89       	ldd	r24, Z+22	; 0x16
    3278:	88 2f       	mov	r24, r24
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	24 e0       	ldi	r18, 0x04	; 4
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	28 1b       	sub	r18, r24
    3282:	39 0b       	sbc	r19, r25
    3284:	8a 81       	ldd	r24, Y+2	; 0x02
    3286:	9b 81       	ldd	r25, Y+3	; 0x03
    3288:	fc 01       	movw	r30, r24
    328a:	35 87       	std	Z+13, r19	; 0x0d
    328c:	24 87       	std	Z+12, r18	; 0x0c
    328e:	8a 81       	ldd	r24, Y+2	; 0x02
    3290:	9b 81       	ldd	r25, Y+3	; 0x03
    3292:	fc 01       	movw	r30, r24
    3294:	96 89       	ldd	r25, Z+22	; 0x16
    3296:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxTopReadyPriority>
    329a:	89 17       	cp	r24, r25
    329c:	30 f4       	brcc	.+12     	; 0x32aa <xTaskPriorityDisinherit+0xb2>
    329e:	8a 81       	ldd	r24, Y+2	; 0x02
    32a0:	9b 81       	ldd	r25, Y+3	; 0x03
    32a2:	fc 01       	movw	r30, r24
    32a4:	86 89       	ldd	r24, Z+22	; 0x16
    32a6:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <uxTopReadyPriority>
    32aa:	8a 81       	ldd	r24, Y+2	; 0x02
    32ac:	9b 81       	ldd	r25, Y+3	; 0x03
    32ae:	ac 01       	movw	r20, r24
    32b0:	4e 5f       	subi	r20, 0xFE	; 254
    32b2:	5f 4f       	sbci	r21, 0xFF	; 255
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	9b 81       	ldd	r25, Y+3	; 0x03
    32b8:	fc 01       	movw	r30, r24
    32ba:	86 89       	ldd	r24, Z+22	; 0x16
    32bc:	28 2f       	mov	r18, r24
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	c9 01       	movw	r24, r18
    32c2:	88 0f       	add	r24, r24
    32c4:	99 1f       	adc	r25, r25
    32c6:	88 0f       	add	r24, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	88 0f       	add	r24, r24
    32cc:	99 1f       	adc	r25, r25
    32ce:	82 0f       	add	r24, r18
    32d0:	93 1f       	adc	r25, r19
    32d2:	83 52       	subi	r24, 0x23	; 35
    32d4:	99 4f       	sbci	r25, 0xF9	; 249
    32d6:	ba 01       	movw	r22, r20
    32d8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <vListInsertEnd>
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	89 83       	std	Y+1, r24	; 0x01
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	08 95       	ret

000032f2 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    32f2:	cf 93       	push	r28
    32f4:	df 93       	push	r29
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
    32fa:	27 97       	sbiw	r28, 0x07	; 7
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	f8 94       	cli
    3300:	de bf       	out	0x3e, r29	; 62
    3302:	0f be       	out	0x3f, r0	; 63
    3304:	cd bf       	out	0x3d, r28	; 61
    3306:	9e 83       	std	Y+6, r25	; 0x06
    3308:	8d 83       	std	Y+5, r24	; 0x05
    330a:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    330c:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <xTickCount>
    3310:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <xTickCount+0x1>
    3314:	9a 83       	std	Y+2, r25	; 0x02
    3316:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3318:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    331c:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    3320:	02 96       	adiw	r24, 0x02	; 2
    3322:	0e 94 96 08 	call	0x112c	; 0x112c <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    3326:	29 81       	ldd	r18, Y+1	; 0x01
    3328:	3a 81       	ldd	r19, Y+2	; 0x02
    332a:	8d 81       	ldd	r24, Y+5	; 0x05
    332c:	9e 81       	ldd	r25, Y+6	; 0x06
    332e:	82 0f       	add	r24, r18
    3330:	93 1f       	adc	r25, r19
    3332:	9c 83       	std	Y+4, r25	; 0x04
    3334:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3336:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    333a:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    333e:	2b 81       	ldd	r18, Y+3	; 0x03
    3340:	3c 81       	ldd	r19, Y+4	; 0x04
    3342:	fc 01       	movw	r30, r24
    3344:	33 83       	std	Z+3, r19	; 0x03
    3346:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    3348:	2b 81       	ldd	r18, Y+3	; 0x03
    334a:	3c 81       	ldd	r19, Y+4	; 0x04
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	9a 81       	ldd	r25, Y+2	; 0x02
    3350:	28 17       	cp	r18, r24
    3352:	39 07       	cpc	r19, r25
    3354:	78 f4       	brcc	.+30     	; 0x3374 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3356:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    335a:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    335e:	9c 01       	movw	r18, r24
    3360:	2e 5f       	subi	r18, 0xFE	; 254
    3362:	3f 4f       	sbci	r19, 0xFF	; 255
    3364:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <pxOverflowDelayedTaskList>
    3368:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <pxOverflowDelayedTaskList+0x1>
    336c:	b9 01       	movw	r22, r18
    336e:	0e 94 1e 08 	call	0x103c	; 0x103c <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3372:	1d c0       	rjmp	.+58     	; 0x33ae <prvAddCurrentTaskToDelayedList+0xbc>
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3374:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <pxCurrentTCB>
    3378:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <pxCurrentTCB+0x1>
    337c:	9c 01       	movw	r18, r24
    337e:	2e 5f       	subi	r18, 0xFE	; 254
    3380:	3f 4f       	sbci	r19, 0xFF	; 255
    3382:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
    3386:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
    338a:	b9 01       	movw	r22, r18
    338c:	0e 94 1e 08 	call	0x103c	; 0x103c <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    3390:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <xNextTaskUnblockTime>
    3394:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <xNextTaskUnblockTime+0x1>
    3398:	2b 81       	ldd	r18, Y+3	; 0x03
    339a:	3c 81       	ldd	r19, Y+4	; 0x04
    339c:	28 17       	cp	r18, r24
    339e:	39 07       	cpc	r19, r25
    33a0:	30 f4       	brcc	.+12     	; 0x33ae <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    33a2:	8b 81       	ldd	r24, Y+3	; 0x03
    33a4:	9c 81       	ldd	r25, Y+4	; 0x04
    33a6:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <xNextTaskUnblockTime+0x1>
    33aa:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    33ae:	00 00       	nop
    33b0:	27 96       	adiw	r28, 0x07	; 7
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	f8 94       	cli
    33b6:	de bf       	out	0x3e, r29	; 62
    33b8:	0f be       	out	0x3f, r0	; 63
    33ba:	cd bf       	out	0x3d, r28	; 61
    33bc:	df 91       	pop	r29
    33be:	cf 91       	pop	r28
    33c0:	08 95       	ret

000033c2 <__subsf3>:
    33c2:	50 58       	subi	r21, 0x80	; 128

000033c4 <__addsf3>:
    33c4:	bb 27       	eor	r27, r27
    33c6:	aa 27       	eor	r26, r26
    33c8:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__addsf3x>
    33cc:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__fp_round>
    33d0:	0e 94 ca 1a 	call	0x3594	; 0x3594 <__fp_pscA>
    33d4:	38 f0       	brcs	.+14     	; 0x33e4 <__addsf3+0x20>
    33d6:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <__fp_pscB>
    33da:	20 f0       	brcs	.+8      	; 0x33e4 <__addsf3+0x20>
    33dc:	39 f4       	brne	.+14     	; 0x33ec <__addsf3+0x28>
    33de:	9f 3f       	cpi	r25, 0xFF	; 255
    33e0:	19 f4       	brne	.+6      	; 0x33e8 <__addsf3+0x24>
    33e2:	26 f4       	brtc	.+8      	; 0x33ec <__addsf3+0x28>
    33e4:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__fp_nan>
    33e8:	0e f4       	brtc	.+2      	; 0x33ec <__addsf3+0x28>
    33ea:	e0 95       	com	r30
    33ec:	e7 fb       	bst	r30, 7
    33ee:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_inf>

000033f2 <__addsf3x>:
    33f2:	e9 2f       	mov	r30, r25
    33f4:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__fp_split3>
    33f8:	58 f3       	brcs	.-42     	; 0x33d0 <__addsf3+0xc>
    33fa:	ba 17       	cp	r27, r26
    33fc:	62 07       	cpc	r22, r18
    33fe:	73 07       	cpc	r23, r19
    3400:	84 07       	cpc	r24, r20
    3402:	95 07       	cpc	r25, r21
    3404:	20 f0       	brcs	.+8      	; 0x340e <__addsf3x+0x1c>
    3406:	79 f4       	brne	.+30     	; 0x3426 <__addsf3x+0x34>
    3408:	a6 f5       	brtc	.+104    	; 0x3472 <__addsf3x+0x80>
    340a:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__fp_zero>
    340e:	0e f4       	brtc	.+2      	; 0x3412 <__addsf3x+0x20>
    3410:	e0 95       	com	r30
    3412:	0b 2e       	mov	r0, r27
    3414:	ba 2f       	mov	r27, r26
    3416:	a0 2d       	mov	r26, r0
    3418:	0b 01       	movw	r0, r22
    341a:	b9 01       	movw	r22, r18
    341c:	90 01       	movw	r18, r0
    341e:	0c 01       	movw	r0, r24
    3420:	ca 01       	movw	r24, r20
    3422:	a0 01       	movw	r20, r0
    3424:	11 24       	eor	r1, r1
    3426:	ff 27       	eor	r31, r31
    3428:	59 1b       	sub	r21, r25
    342a:	99 f0       	breq	.+38     	; 0x3452 <__addsf3x+0x60>
    342c:	59 3f       	cpi	r21, 0xF9	; 249
    342e:	50 f4       	brcc	.+20     	; 0x3444 <__addsf3x+0x52>
    3430:	50 3e       	cpi	r21, 0xE0	; 224
    3432:	68 f1       	brcs	.+90     	; 0x348e <__addsf3x+0x9c>
    3434:	1a 16       	cp	r1, r26
    3436:	f0 40       	sbci	r31, 0x00	; 0
    3438:	a2 2f       	mov	r26, r18
    343a:	23 2f       	mov	r18, r19
    343c:	34 2f       	mov	r19, r20
    343e:	44 27       	eor	r20, r20
    3440:	58 5f       	subi	r21, 0xF8	; 248
    3442:	f3 cf       	rjmp	.-26     	; 0x342a <__addsf3x+0x38>
    3444:	46 95       	lsr	r20
    3446:	37 95       	ror	r19
    3448:	27 95       	ror	r18
    344a:	a7 95       	ror	r26
    344c:	f0 40       	sbci	r31, 0x00	; 0
    344e:	53 95       	inc	r21
    3450:	c9 f7       	brne	.-14     	; 0x3444 <__addsf3x+0x52>
    3452:	7e f4       	brtc	.+30     	; 0x3472 <__addsf3x+0x80>
    3454:	1f 16       	cp	r1, r31
    3456:	ba 0b       	sbc	r27, r26
    3458:	62 0b       	sbc	r22, r18
    345a:	73 0b       	sbc	r23, r19
    345c:	84 0b       	sbc	r24, r20
    345e:	ba f0       	brmi	.+46     	; 0x348e <__addsf3x+0x9c>
    3460:	91 50       	subi	r25, 0x01	; 1
    3462:	a1 f0       	breq	.+40     	; 0x348c <__addsf3x+0x9a>
    3464:	ff 0f       	add	r31, r31
    3466:	bb 1f       	adc	r27, r27
    3468:	66 1f       	adc	r22, r22
    346a:	77 1f       	adc	r23, r23
    346c:	88 1f       	adc	r24, r24
    346e:	c2 f7       	brpl	.-16     	; 0x3460 <__addsf3x+0x6e>
    3470:	0e c0       	rjmp	.+28     	; 0x348e <__addsf3x+0x9c>
    3472:	ba 0f       	add	r27, r26
    3474:	62 1f       	adc	r22, r18
    3476:	73 1f       	adc	r23, r19
    3478:	84 1f       	adc	r24, r20
    347a:	48 f4       	brcc	.+18     	; 0x348e <__addsf3x+0x9c>
    347c:	87 95       	ror	r24
    347e:	77 95       	ror	r23
    3480:	67 95       	ror	r22
    3482:	b7 95       	ror	r27
    3484:	f7 95       	ror	r31
    3486:	9e 3f       	cpi	r25, 0xFE	; 254
    3488:	08 f0       	brcs	.+2      	; 0x348c <__addsf3x+0x9a>
    348a:	b0 cf       	rjmp	.-160    	; 0x33ec <__addsf3+0x28>
    348c:	93 95       	inc	r25
    348e:	88 0f       	add	r24, r24
    3490:	08 f0       	brcs	.+2      	; 0x3494 <__addsf3x+0xa2>
    3492:	99 27       	eor	r25, r25
    3494:	ee 0f       	add	r30, r30
    3496:	97 95       	ror	r25
    3498:	87 95       	ror	r24
    349a:	08 95       	ret

0000349c <__fixsfsi>:
    349c:	0e 94 55 1a 	call	0x34aa	; 0x34aa <__fixunssfsi>
    34a0:	68 94       	set
    34a2:	b1 11       	cpse	r27, r1
    34a4:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__fp_szero>
    34a8:	08 95       	ret

000034aa <__fixunssfsi>:
    34aa:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fp_splitA>
    34ae:	88 f0       	brcs	.+34     	; 0x34d2 <__fixunssfsi+0x28>
    34b0:	9f 57       	subi	r25, 0x7F	; 127
    34b2:	98 f0       	brcs	.+38     	; 0x34da <__fixunssfsi+0x30>
    34b4:	b9 2f       	mov	r27, r25
    34b6:	99 27       	eor	r25, r25
    34b8:	b7 51       	subi	r27, 0x17	; 23
    34ba:	b0 f0       	brcs	.+44     	; 0x34e8 <__fixunssfsi+0x3e>
    34bc:	e1 f0       	breq	.+56     	; 0x34f6 <__fixunssfsi+0x4c>
    34be:	66 0f       	add	r22, r22
    34c0:	77 1f       	adc	r23, r23
    34c2:	88 1f       	adc	r24, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	1a f0       	brmi	.+6      	; 0x34ce <__fixunssfsi+0x24>
    34c8:	ba 95       	dec	r27
    34ca:	c9 f7       	brne	.-14     	; 0x34be <__fixunssfsi+0x14>
    34cc:	14 c0       	rjmp	.+40     	; 0x34f6 <__fixunssfsi+0x4c>
    34ce:	b1 30       	cpi	r27, 0x01	; 1
    34d0:	91 f0       	breq	.+36     	; 0x34f6 <__fixunssfsi+0x4c>
    34d2:	0e 94 0b 1b 	call	0x3616	; 0x3616 <__fp_zero>
    34d6:	b1 e0       	ldi	r27, 0x01	; 1
    34d8:	08 95       	ret
    34da:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__fp_zero>
    34de:	67 2f       	mov	r22, r23
    34e0:	78 2f       	mov	r23, r24
    34e2:	88 27       	eor	r24, r24
    34e4:	b8 5f       	subi	r27, 0xF8	; 248
    34e6:	39 f0       	breq	.+14     	; 0x34f6 <__fixunssfsi+0x4c>
    34e8:	b9 3f       	cpi	r27, 0xF9	; 249
    34ea:	cc f3       	brlt	.-14     	; 0x34de <__fixunssfsi+0x34>
    34ec:	86 95       	lsr	r24
    34ee:	77 95       	ror	r23
    34f0:	67 95       	ror	r22
    34f2:	b3 95       	inc	r27
    34f4:	d9 f7       	brne	.-10     	; 0x34ec <__fixunssfsi+0x42>
    34f6:	3e f4       	brtc	.+14     	; 0x3506 <__fixunssfsi+0x5c>
    34f8:	90 95       	com	r25
    34fa:	80 95       	com	r24
    34fc:	70 95       	com	r23
    34fe:	61 95       	neg	r22
    3500:	7f 4f       	sbci	r23, 0xFF	; 255
    3502:	8f 4f       	sbci	r24, 0xFF	; 255
    3504:	9f 4f       	sbci	r25, 0xFF	; 255
    3506:	08 95       	ret

00003508 <__floatunsisf>:
    3508:	e8 94       	clt
    350a:	09 c0       	rjmp	.+18     	; 0x351e <__floatsisf+0x12>

0000350c <__floatsisf>:
    350c:	97 fb       	bst	r25, 7
    350e:	3e f4       	brtc	.+14     	; 0x351e <__floatsisf+0x12>
    3510:	90 95       	com	r25
    3512:	80 95       	com	r24
    3514:	70 95       	com	r23
    3516:	61 95       	neg	r22
    3518:	7f 4f       	sbci	r23, 0xFF	; 255
    351a:	8f 4f       	sbci	r24, 0xFF	; 255
    351c:	9f 4f       	sbci	r25, 0xFF	; 255
    351e:	99 23       	and	r25, r25
    3520:	a9 f0       	breq	.+42     	; 0x354c <__floatsisf+0x40>
    3522:	f9 2f       	mov	r31, r25
    3524:	96 e9       	ldi	r25, 0x96	; 150
    3526:	bb 27       	eor	r27, r27
    3528:	93 95       	inc	r25
    352a:	f6 95       	lsr	r31
    352c:	87 95       	ror	r24
    352e:	77 95       	ror	r23
    3530:	67 95       	ror	r22
    3532:	b7 95       	ror	r27
    3534:	f1 11       	cpse	r31, r1
    3536:	f8 cf       	rjmp	.-16     	; 0x3528 <__floatsisf+0x1c>
    3538:	fa f4       	brpl	.+62     	; 0x3578 <__floatsisf+0x6c>
    353a:	bb 0f       	add	r27, r27
    353c:	11 f4       	brne	.+4      	; 0x3542 <__floatsisf+0x36>
    353e:	60 ff       	sbrs	r22, 0
    3540:	1b c0       	rjmp	.+54     	; 0x3578 <__floatsisf+0x6c>
    3542:	6f 5f       	subi	r22, 0xFF	; 255
    3544:	7f 4f       	sbci	r23, 0xFF	; 255
    3546:	8f 4f       	sbci	r24, 0xFF	; 255
    3548:	9f 4f       	sbci	r25, 0xFF	; 255
    354a:	16 c0       	rjmp	.+44     	; 0x3578 <__floatsisf+0x6c>
    354c:	88 23       	and	r24, r24
    354e:	11 f0       	breq	.+4      	; 0x3554 <__floatsisf+0x48>
    3550:	96 e9       	ldi	r25, 0x96	; 150
    3552:	11 c0       	rjmp	.+34     	; 0x3576 <__floatsisf+0x6a>
    3554:	77 23       	and	r23, r23
    3556:	21 f0       	breq	.+8      	; 0x3560 <__floatsisf+0x54>
    3558:	9e e8       	ldi	r25, 0x8E	; 142
    355a:	87 2f       	mov	r24, r23
    355c:	76 2f       	mov	r23, r22
    355e:	05 c0       	rjmp	.+10     	; 0x356a <__floatsisf+0x5e>
    3560:	66 23       	and	r22, r22
    3562:	71 f0       	breq	.+28     	; 0x3580 <__floatsisf+0x74>
    3564:	96 e8       	ldi	r25, 0x86	; 134
    3566:	86 2f       	mov	r24, r22
    3568:	70 e0       	ldi	r23, 0x00	; 0
    356a:	60 e0       	ldi	r22, 0x00	; 0
    356c:	2a f0       	brmi	.+10     	; 0x3578 <__floatsisf+0x6c>
    356e:	9a 95       	dec	r25
    3570:	66 0f       	add	r22, r22
    3572:	77 1f       	adc	r23, r23
    3574:	88 1f       	adc	r24, r24
    3576:	da f7       	brpl	.-10     	; 0x356e <__floatsisf+0x62>
    3578:	88 0f       	add	r24, r24
    357a:	96 95       	lsr	r25
    357c:	87 95       	ror	r24
    357e:	97 f9       	bld	r25, 7
    3580:	08 95       	ret

00003582 <__fp_inf>:
    3582:	97 f9       	bld	r25, 7
    3584:	9f 67       	ori	r25, 0x7F	; 127
    3586:	80 e8       	ldi	r24, 0x80	; 128
    3588:	70 e0       	ldi	r23, 0x00	; 0
    358a:	60 e0       	ldi	r22, 0x00	; 0
    358c:	08 95       	ret

0000358e <__fp_nan>:
    358e:	9f ef       	ldi	r25, 0xFF	; 255
    3590:	80 ec       	ldi	r24, 0xC0	; 192
    3592:	08 95       	ret

00003594 <__fp_pscA>:
    3594:	00 24       	eor	r0, r0
    3596:	0a 94       	dec	r0
    3598:	16 16       	cp	r1, r22
    359a:	17 06       	cpc	r1, r23
    359c:	18 06       	cpc	r1, r24
    359e:	09 06       	cpc	r0, r25
    35a0:	08 95       	ret

000035a2 <__fp_pscB>:
    35a2:	00 24       	eor	r0, r0
    35a4:	0a 94       	dec	r0
    35a6:	12 16       	cp	r1, r18
    35a8:	13 06       	cpc	r1, r19
    35aa:	14 06       	cpc	r1, r20
    35ac:	05 06       	cpc	r0, r21
    35ae:	08 95       	ret

000035b0 <__fp_round>:
    35b0:	09 2e       	mov	r0, r25
    35b2:	03 94       	inc	r0
    35b4:	00 0c       	add	r0, r0
    35b6:	11 f4       	brne	.+4      	; 0x35bc <__fp_round+0xc>
    35b8:	88 23       	and	r24, r24
    35ba:	52 f0       	brmi	.+20     	; 0x35d0 <__fp_round+0x20>
    35bc:	bb 0f       	add	r27, r27
    35be:	40 f4       	brcc	.+16     	; 0x35d0 <__fp_round+0x20>
    35c0:	bf 2b       	or	r27, r31
    35c2:	11 f4       	brne	.+4      	; 0x35c8 <__fp_round+0x18>
    35c4:	60 ff       	sbrs	r22, 0
    35c6:	04 c0       	rjmp	.+8      	; 0x35d0 <__fp_round+0x20>
    35c8:	6f 5f       	subi	r22, 0xFF	; 255
    35ca:	7f 4f       	sbci	r23, 0xFF	; 255
    35cc:	8f 4f       	sbci	r24, 0xFF	; 255
    35ce:	9f 4f       	sbci	r25, 0xFF	; 255
    35d0:	08 95       	ret

000035d2 <__fp_split3>:
    35d2:	57 fd       	sbrc	r21, 7
    35d4:	90 58       	subi	r25, 0x80	; 128
    35d6:	44 0f       	add	r20, r20
    35d8:	55 1f       	adc	r21, r21
    35da:	59 f0       	breq	.+22     	; 0x35f2 <__fp_splitA+0x10>
    35dc:	5f 3f       	cpi	r21, 0xFF	; 255
    35de:	71 f0       	breq	.+28     	; 0x35fc <__fp_splitA+0x1a>
    35e0:	47 95       	ror	r20

000035e2 <__fp_splitA>:
    35e2:	88 0f       	add	r24, r24
    35e4:	97 fb       	bst	r25, 7
    35e6:	99 1f       	adc	r25, r25
    35e8:	61 f0       	breq	.+24     	; 0x3602 <__fp_splitA+0x20>
    35ea:	9f 3f       	cpi	r25, 0xFF	; 255
    35ec:	79 f0       	breq	.+30     	; 0x360c <__fp_splitA+0x2a>
    35ee:	87 95       	ror	r24
    35f0:	08 95       	ret
    35f2:	12 16       	cp	r1, r18
    35f4:	13 06       	cpc	r1, r19
    35f6:	14 06       	cpc	r1, r20
    35f8:	55 1f       	adc	r21, r21
    35fa:	f2 cf       	rjmp	.-28     	; 0x35e0 <__fp_split3+0xe>
    35fc:	46 95       	lsr	r20
    35fe:	f1 df       	rcall	.-30     	; 0x35e2 <__fp_splitA>
    3600:	08 c0       	rjmp	.+16     	; 0x3612 <__fp_splitA+0x30>
    3602:	16 16       	cp	r1, r22
    3604:	17 06       	cpc	r1, r23
    3606:	18 06       	cpc	r1, r24
    3608:	99 1f       	adc	r25, r25
    360a:	f1 cf       	rjmp	.-30     	; 0x35ee <__fp_splitA+0xc>
    360c:	86 95       	lsr	r24
    360e:	71 05       	cpc	r23, r1
    3610:	61 05       	cpc	r22, r1
    3612:	08 94       	sec
    3614:	08 95       	ret

00003616 <__fp_zero>:
    3616:	e8 94       	clt

00003618 <__fp_szero>:
    3618:	bb 27       	eor	r27, r27
    361a:	66 27       	eor	r22, r22
    361c:	77 27       	eor	r23, r23
    361e:	cb 01       	movw	r24, r22
    3620:	97 f9       	bld	r25, 7
    3622:	08 95       	ret

00003624 <pow>:
    3624:	fa 01       	movw	r30, r20
    3626:	ee 0f       	add	r30, r30
    3628:	ff 1f       	adc	r31, r31
    362a:	30 96       	adiw	r30, 0x00	; 0
    362c:	21 05       	cpc	r18, r1
    362e:	31 05       	cpc	r19, r1
    3630:	a1 f1       	breq	.+104    	; 0x369a <pow+0x76>
    3632:	61 15       	cp	r22, r1
    3634:	71 05       	cpc	r23, r1
    3636:	61 f4       	brne	.+24     	; 0x3650 <pow+0x2c>
    3638:	80 38       	cpi	r24, 0x80	; 128
    363a:	bf e3       	ldi	r27, 0x3F	; 63
    363c:	9b 07       	cpc	r25, r27
    363e:	49 f1       	breq	.+82     	; 0x3692 <pow+0x6e>
    3640:	68 94       	set
    3642:	90 38       	cpi	r25, 0x80	; 128
    3644:	81 05       	cpc	r24, r1
    3646:	61 f0       	breq	.+24     	; 0x3660 <pow+0x3c>
    3648:	80 38       	cpi	r24, 0x80	; 128
    364a:	bf ef       	ldi	r27, 0xFF	; 255
    364c:	9b 07       	cpc	r25, r27
    364e:	41 f0       	breq	.+16     	; 0x3660 <pow+0x3c>
    3650:	99 23       	and	r25, r25
    3652:	4a f5       	brpl	.+82     	; 0x36a6 <pow+0x82>
    3654:	ff 3f       	cpi	r31, 0xFF	; 255
    3656:	e1 05       	cpc	r30, r1
    3658:	31 05       	cpc	r19, r1
    365a:	21 05       	cpc	r18, r1
    365c:	19 f1       	breq	.+70     	; 0x36a4 <pow+0x80>
    365e:	e8 94       	clt
    3660:	08 94       	sec
    3662:	e7 95       	ror	r30
    3664:	d9 01       	movw	r26, r18
    3666:	aa 23       	and	r26, r26
    3668:	29 f4       	brne	.+10     	; 0x3674 <pow+0x50>
    366a:	ab 2f       	mov	r26, r27
    366c:	be 2f       	mov	r27, r30
    366e:	f8 5f       	subi	r31, 0xF8	; 248
    3670:	d0 f3       	brcs	.-12     	; 0x3666 <pow+0x42>
    3672:	10 c0       	rjmp	.+32     	; 0x3694 <pow+0x70>
    3674:	ff 5f       	subi	r31, 0xFF	; 255
    3676:	70 f4       	brcc	.+28     	; 0x3694 <pow+0x70>
    3678:	a6 95       	lsr	r26
    367a:	e0 f7       	brcc	.-8      	; 0x3674 <pow+0x50>
    367c:	f7 39       	cpi	r31, 0x97	; 151
    367e:	50 f0       	brcs	.+20     	; 0x3694 <pow+0x70>
    3680:	19 f0       	breq	.+6      	; 0x3688 <pow+0x64>
    3682:	ff 3a       	cpi	r31, 0xAF	; 175
    3684:	38 f4       	brcc	.+14     	; 0x3694 <pow+0x70>
    3686:	9f 77       	andi	r25, 0x7F	; 127
    3688:	9f 93       	push	r25
    368a:	0d d0       	rcall	.+26     	; 0x36a6 <pow+0x82>
    368c:	0f 90       	pop	r0
    368e:	07 fc       	sbrc	r0, 7
    3690:	90 58       	subi	r25, 0x80	; 128
    3692:	08 95       	ret
    3694:	46 f0       	brts	.+16     	; 0x36a6 <pow+0x82>
    3696:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__fp_nan>
    369a:	60 e0       	ldi	r22, 0x00	; 0
    369c:	70 e0       	ldi	r23, 0x00	; 0
    369e:	80 e8       	ldi	r24, 0x80	; 128
    36a0:	9f e3       	ldi	r25, 0x3F	; 63
    36a2:	08 95       	ret
    36a4:	4f e7       	ldi	r20, 0x7F	; 127
    36a6:	9f 77       	andi	r25, 0x7F	; 127
    36a8:	5f 93       	push	r21
    36aa:	4f 93       	push	r20
    36ac:	3f 93       	push	r19
    36ae:	2f 93       	push	r18
    36b0:	0e 94 0d 1c 	call	0x381a	; 0x381a <log>
    36b4:	2f 91       	pop	r18
    36b6:	3f 91       	pop	r19
    36b8:	4f 91       	pop	r20
    36ba:	5f 91       	pop	r21
    36bc:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    36c0:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <exp>
    36c4:	29 f4       	brne	.+10     	; 0x36d0 <pow+0xac>
    36c6:	16 f0       	brts	.+4      	; 0x36cc <pow+0xa8>
    36c8:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_inf>
    36cc:	0c 94 0b 1b 	jmp	0x3616	; 0x3616 <__fp_zero>
    36d0:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__fp_nan>

000036d4 <exp>:
    36d4:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fp_splitA>
    36d8:	a8 f3       	brcs	.-22     	; 0x36c4 <pow+0xa0>
    36da:	96 38       	cpi	r25, 0x86	; 134
    36dc:	a0 f7       	brcc	.-24     	; 0x36c6 <pow+0xa2>
    36de:	07 f8       	bld	r0, 7
    36e0:	0f 92       	push	r0
    36e2:	e8 94       	clt
    36e4:	2b e3       	ldi	r18, 0x3B	; 59
    36e6:	3a ea       	ldi	r19, 0xAA	; 170
    36e8:	48 eb       	ldi	r20, 0xB8	; 184
    36ea:	5f e7       	ldi	r21, 0x7F	; 127
    36ec:	0e 94 9f 1c 	call	0x393e	; 0x393e <__mulsf3_pse>
    36f0:	0f 92       	push	r0
    36f2:	0f 92       	push	r0
    36f4:	0f 92       	push	r0
    36f6:	4d b7       	in	r20, 0x3d	; 61
    36f8:	5e b7       	in	r21, 0x3e	; 62
    36fa:	0f 92       	push	r0
    36fc:	0e 94 55 1c 	call	0x38aa	; 0x38aa <modf>
    3700:	ec e7       	ldi	r30, 0x7C	; 124
    3702:	f0 e0       	ldi	r31, 0x00	; 0
    3704:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__fp_powser>
    3708:	4f 91       	pop	r20
    370a:	5f 91       	pop	r21
    370c:	ef 91       	pop	r30
    370e:	ff 91       	pop	r31
    3710:	e5 95       	asr	r30
    3712:	ee 1f       	adc	r30, r30
    3714:	ff 1f       	adc	r31, r31
    3716:	49 f0       	breq	.+18     	; 0x372a <exp+0x56>
    3718:	fe 57       	subi	r31, 0x7E	; 126
    371a:	e0 68       	ori	r30, 0x80	; 128
    371c:	44 27       	eor	r20, r20
    371e:	ee 0f       	add	r30, r30
    3720:	44 1f       	adc	r20, r20
    3722:	fa 95       	dec	r31
    3724:	e1 f7       	brne	.-8      	; 0x371e <exp+0x4a>
    3726:	41 95       	neg	r20
    3728:	55 0b       	sbc	r21, r21
    372a:	0e 94 cf 1b 	call	0x379e	; 0x379e <ldexp>
    372e:	0f 90       	pop	r0
    3730:	07 fe       	sbrs	r0, 7
    3732:	0c 94 c3 1b 	jmp	0x3786	; 0x3786 <inverse>
    3736:	08 95       	ret

00003738 <__fp_powser>:
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	1f 93       	push	r17
    373e:	0f 93       	push	r16
    3740:	ff 92       	push	r15
    3742:	ef 92       	push	r14
    3744:	df 92       	push	r13
    3746:	7b 01       	movw	r14, r22
    3748:	8c 01       	movw	r16, r24
    374a:	68 94       	set
    374c:	06 c0       	rjmp	.+12     	; 0x375a <__fp_powser+0x22>
    374e:	da 2e       	mov	r13, r26
    3750:	ef 01       	movw	r28, r30
    3752:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__mulsf3x>
    3756:	fe 01       	movw	r30, r28
    3758:	e8 94       	clt
    375a:	a5 91       	lpm	r26, Z+
    375c:	25 91       	lpm	r18, Z+
    375e:	35 91       	lpm	r19, Z+
    3760:	45 91       	lpm	r20, Z+
    3762:	55 91       	lpm	r21, Z+
    3764:	a6 f3       	brts	.-24     	; 0x374e <__fp_powser+0x16>
    3766:	ef 01       	movw	r28, r30
    3768:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__addsf3x>
    376c:	fe 01       	movw	r30, r28
    376e:	97 01       	movw	r18, r14
    3770:	a8 01       	movw	r20, r16
    3772:	da 94       	dec	r13
    3774:	69 f7       	brne	.-38     	; 0x3750 <__fp_powser+0x18>
    3776:	df 90       	pop	r13
    3778:	ef 90       	pop	r14
    377a:	ff 90       	pop	r15
    377c:	0f 91       	pop	r16
    377e:	1f 91       	pop	r17
    3780:	cf 91       	pop	r28
    3782:	df 91       	pop	r29
    3784:	08 95       	ret

00003786 <inverse>:
    3786:	9b 01       	movw	r18, r22
    3788:	ac 01       	movw	r20, r24
    378a:	60 e0       	ldi	r22, 0x00	; 0
    378c:	70 e0       	ldi	r23, 0x00	; 0
    378e:	80 e8       	ldi	r24, 0x80	; 128
    3790:	9f e3       	ldi	r25, 0x3F	; 63
    3792:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__divsf3>
    3796:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_inf>
    379a:	0c 94 68 1d 	jmp	0x3ad0	; 0x3ad0 <__fp_mpack>

0000379e <ldexp>:
    379e:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fp_splitA>
    37a2:	d8 f3       	brcs	.-10     	; 0x379a <inverse+0x14>
    37a4:	99 23       	and	r25, r25
    37a6:	c9 f3       	breq	.-14     	; 0x379a <inverse+0x14>
    37a8:	94 0f       	add	r25, r20
    37aa:	51 1d       	adc	r21, r1
    37ac:	a3 f3       	brvs	.-24     	; 0x3796 <inverse+0x10>
    37ae:	91 50       	subi	r25, 0x01	; 1
    37b0:	50 40       	sbci	r21, 0x00	; 0
    37b2:	94 f0       	brlt	.+36     	; 0x37d8 <ldexp+0x3a>
    37b4:	59 f0       	breq	.+22     	; 0x37cc <ldexp+0x2e>
    37b6:	88 23       	and	r24, r24
    37b8:	32 f0       	brmi	.+12     	; 0x37c6 <ldexp+0x28>
    37ba:	66 0f       	add	r22, r22
    37bc:	77 1f       	adc	r23, r23
    37be:	88 1f       	adc	r24, r24
    37c0:	91 50       	subi	r25, 0x01	; 1
    37c2:	50 40       	sbci	r21, 0x00	; 0
    37c4:	c1 f7       	brne	.-16     	; 0x37b6 <ldexp+0x18>
    37c6:	9e 3f       	cpi	r25, 0xFE	; 254
    37c8:	51 05       	cpc	r21, r1
    37ca:	2c f7       	brge	.-54     	; 0x3796 <inverse+0x10>
    37cc:	88 0f       	add	r24, r24
    37ce:	91 1d       	adc	r25, r1
    37d0:	96 95       	lsr	r25
    37d2:	87 95       	ror	r24
    37d4:	97 f9       	bld	r25, 7
    37d6:	08 95       	ret
    37d8:	5f 3f       	cpi	r21, 0xFF	; 255
    37da:	ac f0       	brlt	.+42     	; 0x3806 <ldexp+0x68>
    37dc:	98 3e       	cpi	r25, 0xE8	; 232
    37de:	9c f0       	brlt	.+38     	; 0x3806 <ldexp+0x68>
    37e0:	bb 27       	eor	r27, r27
    37e2:	86 95       	lsr	r24
    37e4:	77 95       	ror	r23
    37e6:	67 95       	ror	r22
    37e8:	b7 95       	ror	r27
    37ea:	08 f4       	brcc	.+2      	; 0x37ee <ldexp+0x50>
    37ec:	b1 60       	ori	r27, 0x01	; 1
    37ee:	93 95       	inc	r25
    37f0:	c1 f7       	brne	.-16     	; 0x37e2 <ldexp+0x44>
    37f2:	bb 0f       	add	r27, r27
    37f4:	58 f7       	brcc	.-42     	; 0x37cc <ldexp+0x2e>
    37f6:	11 f4       	brne	.+4      	; 0x37fc <ldexp+0x5e>
    37f8:	60 ff       	sbrs	r22, 0
    37fa:	e8 cf       	rjmp	.-48     	; 0x37cc <ldexp+0x2e>
    37fc:	6f 5f       	subi	r22, 0xFF	; 255
    37fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3800:	8f 4f       	sbci	r24, 0xFF	; 255
    3802:	9f 4f       	sbci	r25, 0xFF	; 255
    3804:	e3 cf       	rjmp	.-58     	; 0x37cc <ldexp+0x2e>
    3806:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__fp_szero>
    380a:	16 f0       	brts	.+4      	; 0x3810 <ldexp+0x72>
    380c:	0c 94 68 1d 	jmp	0x3ad0	; 0x3ad0 <__fp_mpack>
    3810:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__fp_nan>
    3814:	68 94       	set
    3816:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_inf>

0000381a <log>:
    381a:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fp_splitA>
    381e:	a8 f3       	brcs	.-22     	; 0x380a <ldexp+0x6c>
    3820:	99 23       	and	r25, r25
    3822:	c1 f3       	breq	.-16     	; 0x3814 <ldexp+0x76>
    3824:	ae f3       	brts	.-22     	; 0x3810 <ldexp+0x72>
    3826:	df 93       	push	r29
    3828:	cf 93       	push	r28
    382a:	1f 93       	push	r17
    382c:	0f 93       	push	r16
    382e:	ff 92       	push	r15
    3830:	c9 2f       	mov	r28, r25
    3832:	dd 27       	eor	r29, r29
    3834:	88 23       	and	r24, r24
    3836:	2a f0       	brmi	.+10     	; 0x3842 <log+0x28>
    3838:	21 97       	sbiw	r28, 0x01	; 1
    383a:	66 0f       	add	r22, r22
    383c:	77 1f       	adc	r23, r23
    383e:	88 1f       	adc	r24, r24
    3840:	da f7       	brpl	.-10     	; 0x3838 <log+0x1e>
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	40 e8       	ldi	r20, 0x80	; 128
    3848:	5f eb       	ldi	r21, 0xBF	; 191
    384a:	9f e3       	ldi	r25, 0x3F	; 63
    384c:	88 39       	cpi	r24, 0x98	; 152
    384e:	20 f0       	brcs	.+8      	; 0x3858 <log+0x3e>
    3850:	80 3e       	cpi	r24, 0xE0	; 224
    3852:	38 f0       	brcs	.+14     	; 0x3862 <log+0x48>
    3854:	21 96       	adiw	r28, 0x01	; 1
    3856:	8f 77       	andi	r24, 0x7F	; 127
    3858:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__addsf3>
    385c:	e4 ea       	ldi	r30, 0xA4	; 164
    385e:	f0 e0       	ldi	r31, 0x00	; 0
    3860:	04 c0       	rjmp	.+8      	; 0x386a <log+0x50>
    3862:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__addsf3>
    3866:	e1 ed       	ldi	r30, 0xD1	; 209
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__fp_powser>
    386e:	8b 01       	movw	r16, r22
    3870:	be 01       	movw	r22, r28
    3872:	ec 01       	movw	r28, r24
    3874:	fb 2e       	mov	r15, r27
    3876:	6f 57       	subi	r22, 0x7F	; 127
    3878:	71 09       	sbc	r23, r1
    387a:	75 95       	asr	r23
    387c:	77 1f       	adc	r23, r23
    387e:	88 0b       	sbc	r24, r24
    3880:	99 0b       	sbc	r25, r25
    3882:	0e 94 86 1a 	call	0x350c	; 0x350c <__floatsisf>
    3886:	28 e1       	ldi	r18, 0x18	; 24
    3888:	32 e7       	ldi	r19, 0x72	; 114
    388a:	41 e3       	ldi	r20, 0x31	; 49
    388c:	5f e3       	ldi	r21, 0x3F	; 63
    388e:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__mulsf3x>
    3892:	af 2d       	mov	r26, r15
    3894:	98 01       	movw	r18, r16
    3896:	ae 01       	movw	r20, r28
    3898:	ff 90       	pop	r15
    389a:	0f 91       	pop	r16
    389c:	1f 91       	pop	r17
    389e:	cf 91       	pop	r28
    38a0:	df 91       	pop	r29
    38a2:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__addsf3x>
    38a6:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__fp_round>

000038aa <modf>:
    38aa:	fa 01       	movw	r30, r20
    38ac:	dc 01       	movw	r26, r24
    38ae:	aa 0f       	add	r26, r26
    38b0:	bb 1f       	adc	r27, r27
    38b2:	9b 01       	movw	r18, r22
    38b4:	ac 01       	movw	r20, r24
    38b6:	bf 57       	subi	r27, 0x7F	; 127
    38b8:	28 f4       	brcc	.+10     	; 0x38c4 <modf+0x1a>
    38ba:	22 27       	eor	r18, r18
    38bc:	33 27       	eor	r19, r19
    38be:	44 27       	eor	r20, r20
    38c0:	50 78       	andi	r21, 0x80	; 128
    38c2:	20 c0       	rjmp	.+64     	; 0x3904 <modf+0x5a>
    38c4:	b7 51       	subi	r27, 0x17	; 23
    38c6:	90 f4       	brcc	.+36     	; 0x38ec <modf+0x42>
    38c8:	ab 2f       	mov	r26, r27
    38ca:	00 24       	eor	r0, r0
    38cc:	46 95       	lsr	r20
    38ce:	37 95       	ror	r19
    38d0:	27 95       	ror	r18
    38d2:	01 1c       	adc	r0, r1
    38d4:	a3 95       	inc	r26
    38d6:	d2 f3       	brmi	.-12     	; 0x38cc <modf+0x22>
    38d8:	00 20       	and	r0, r0
    38da:	71 f0       	breq	.+28     	; 0x38f8 <modf+0x4e>
    38dc:	22 0f       	add	r18, r18
    38de:	33 1f       	adc	r19, r19
    38e0:	44 1f       	adc	r20, r20
    38e2:	b3 95       	inc	r27
    38e4:	da f3       	brmi	.-10     	; 0x38dc <modf+0x32>
    38e6:	0e d0       	rcall	.+28     	; 0x3904 <modf+0x5a>
    38e8:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <__subsf3>
    38ec:	61 30       	cpi	r22, 0x01	; 1
    38ee:	71 05       	cpc	r23, r1
    38f0:	a0 e8       	ldi	r26, 0x80	; 128
    38f2:	8a 07       	cpc	r24, r26
    38f4:	b9 46       	sbci	r27, 0x69	; 105
    38f6:	30 f4       	brcc	.+12     	; 0x3904 <modf+0x5a>
    38f8:	9b 01       	movw	r18, r22
    38fa:	ac 01       	movw	r20, r24
    38fc:	66 27       	eor	r22, r22
    38fe:	77 27       	eor	r23, r23
    3900:	88 27       	eor	r24, r24
    3902:	90 78       	andi	r25, 0x80	; 128
    3904:	30 96       	adiw	r30, 0x00	; 0
    3906:	21 f0       	breq	.+8      	; 0x3910 <modf+0x66>
    3908:	20 83       	st	Z, r18
    390a:	31 83       	std	Z+1, r19	; 0x01
    390c:	42 83       	std	Z+2, r20	; 0x02
    390e:	53 83       	std	Z+3, r21	; 0x03
    3910:	08 95       	ret

00003912 <__mulsf3>:
    3912:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__mulsf3x>
    3916:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__fp_round>
    391a:	0e 94 ca 1a 	call	0x3594	; 0x3594 <__fp_pscA>
    391e:	38 f0       	brcs	.+14     	; 0x392e <__mulsf3+0x1c>
    3920:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <__fp_pscB>
    3924:	20 f0       	brcs	.+8      	; 0x392e <__mulsf3+0x1c>
    3926:	95 23       	and	r25, r21
    3928:	11 f0       	breq	.+4      	; 0x392e <__mulsf3+0x1c>
    392a:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_inf>
    392e:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__fp_nan>
    3932:	11 24       	eor	r1, r1
    3934:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__fp_szero>

00003938 <__mulsf3x>:
    3938:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__fp_split3>
    393c:	70 f3       	brcs	.-36     	; 0x391a <__mulsf3+0x8>

0000393e <__mulsf3_pse>:
    393e:	95 9f       	mul	r25, r21
    3940:	c1 f3       	breq	.-16     	; 0x3932 <__mulsf3+0x20>
    3942:	95 0f       	add	r25, r21
    3944:	50 e0       	ldi	r21, 0x00	; 0
    3946:	55 1f       	adc	r21, r21
    3948:	62 9f       	mul	r22, r18
    394a:	f0 01       	movw	r30, r0
    394c:	72 9f       	mul	r23, r18
    394e:	bb 27       	eor	r27, r27
    3950:	f0 0d       	add	r31, r0
    3952:	b1 1d       	adc	r27, r1
    3954:	63 9f       	mul	r22, r19
    3956:	aa 27       	eor	r26, r26
    3958:	f0 0d       	add	r31, r0
    395a:	b1 1d       	adc	r27, r1
    395c:	aa 1f       	adc	r26, r26
    395e:	64 9f       	mul	r22, r20
    3960:	66 27       	eor	r22, r22
    3962:	b0 0d       	add	r27, r0
    3964:	a1 1d       	adc	r26, r1
    3966:	66 1f       	adc	r22, r22
    3968:	82 9f       	mul	r24, r18
    396a:	22 27       	eor	r18, r18
    396c:	b0 0d       	add	r27, r0
    396e:	a1 1d       	adc	r26, r1
    3970:	62 1f       	adc	r22, r18
    3972:	73 9f       	mul	r23, r19
    3974:	b0 0d       	add	r27, r0
    3976:	a1 1d       	adc	r26, r1
    3978:	62 1f       	adc	r22, r18
    397a:	83 9f       	mul	r24, r19
    397c:	a0 0d       	add	r26, r0
    397e:	61 1d       	adc	r22, r1
    3980:	22 1f       	adc	r18, r18
    3982:	74 9f       	mul	r23, r20
    3984:	33 27       	eor	r19, r19
    3986:	a0 0d       	add	r26, r0
    3988:	61 1d       	adc	r22, r1
    398a:	23 1f       	adc	r18, r19
    398c:	84 9f       	mul	r24, r20
    398e:	60 0d       	add	r22, r0
    3990:	21 1d       	adc	r18, r1
    3992:	82 2f       	mov	r24, r18
    3994:	76 2f       	mov	r23, r22
    3996:	6a 2f       	mov	r22, r26
    3998:	11 24       	eor	r1, r1
    399a:	9f 57       	subi	r25, 0x7F	; 127
    399c:	50 40       	sbci	r21, 0x00	; 0
    399e:	9a f0       	brmi	.+38     	; 0x39c6 <__mulsf3_pse+0x88>
    39a0:	f1 f0       	breq	.+60     	; 0x39de <__mulsf3_pse+0xa0>
    39a2:	88 23       	and	r24, r24
    39a4:	4a f0       	brmi	.+18     	; 0x39b8 <__mulsf3_pse+0x7a>
    39a6:	ee 0f       	add	r30, r30
    39a8:	ff 1f       	adc	r31, r31
    39aa:	bb 1f       	adc	r27, r27
    39ac:	66 1f       	adc	r22, r22
    39ae:	77 1f       	adc	r23, r23
    39b0:	88 1f       	adc	r24, r24
    39b2:	91 50       	subi	r25, 0x01	; 1
    39b4:	50 40       	sbci	r21, 0x00	; 0
    39b6:	a9 f7       	brne	.-22     	; 0x39a2 <__mulsf3_pse+0x64>
    39b8:	9e 3f       	cpi	r25, 0xFE	; 254
    39ba:	51 05       	cpc	r21, r1
    39bc:	80 f0       	brcs	.+32     	; 0x39de <__mulsf3_pse+0xa0>
    39be:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_inf>
    39c2:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__fp_szero>
    39c6:	5f 3f       	cpi	r21, 0xFF	; 255
    39c8:	e4 f3       	brlt	.-8      	; 0x39c2 <__mulsf3_pse+0x84>
    39ca:	98 3e       	cpi	r25, 0xE8	; 232
    39cc:	d4 f3       	brlt	.-12     	; 0x39c2 <__mulsf3_pse+0x84>
    39ce:	86 95       	lsr	r24
    39d0:	77 95       	ror	r23
    39d2:	67 95       	ror	r22
    39d4:	b7 95       	ror	r27
    39d6:	f7 95       	ror	r31
    39d8:	e7 95       	ror	r30
    39da:	9f 5f       	subi	r25, 0xFF	; 255
    39dc:	c1 f7       	brne	.-16     	; 0x39ce <__mulsf3_pse+0x90>
    39de:	fe 2b       	or	r31, r30
    39e0:	88 0f       	add	r24, r24
    39e2:	91 1d       	adc	r25, r1
    39e4:	96 95       	lsr	r25
    39e6:	87 95       	ror	r24
    39e8:	97 f9       	bld	r25, 7
    39ea:	08 95       	ret

000039ec <__divsf3>:
    39ec:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__divsf3x>
    39f0:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__fp_round>
    39f4:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <__fp_pscB>
    39f8:	58 f0       	brcs	.+22     	; 0x3a10 <__divsf3+0x24>
    39fa:	0e 94 ca 1a 	call	0x3594	; 0x3594 <__fp_pscA>
    39fe:	40 f0       	brcs	.+16     	; 0x3a10 <__divsf3+0x24>
    3a00:	29 f4       	brne	.+10     	; 0x3a0c <__divsf3+0x20>
    3a02:	5f 3f       	cpi	r21, 0xFF	; 255
    3a04:	29 f0       	breq	.+10     	; 0x3a10 <__divsf3+0x24>
    3a06:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_inf>
    3a0a:	51 11       	cpse	r21, r1
    3a0c:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__fp_szero>
    3a10:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__fp_nan>

00003a14 <__divsf3x>:
    3a14:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__fp_split3>
    3a18:	68 f3       	brcs	.-38     	; 0x39f4 <__divsf3+0x8>

00003a1a <__divsf3_pse>:
    3a1a:	99 23       	and	r25, r25
    3a1c:	b1 f3       	breq	.-20     	; 0x3a0a <__divsf3+0x1e>
    3a1e:	55 23       	and	r21, r21
    3a20:	91 f3       	breq	.-28     	; 0x3a06 <__divsf3+0x1a>
    3a22:	95 1b       	sub	r25, r21
    3a24:	55 0b       	sbc	r21, r21
    3a26:	bb 27       	eor	r27, r27
    3a28:	aa 27       	eor	r26, r26
    3a2a:	62 17       	cp	r22, r18
    3a2c:	73 07       	cpc	r23, r19
    3a2e:	84 07       	cpc	r24, r20
    3a30:	38 f0       	brcs	.+14     	; 0x3a40 <__divsf3_pse+0x26>
    3a32:	9f 5f       	subi	r25, 0xFF	; 255
    3a34:	5f 4f       	sbci	r21, 0xFF	; 255
    3a36:	22 0f       	add	r18, r18
    3a38:	33 1f       	adc	r19, r19
    3a3a:	44 1f       	adc	r20, r20
    3a3c:	aa 1f       	adc	r26, r26
    3a3e:	a9 f3       	breq	.-22     	; 0x3a2a <__divsf3_pse+0x10>
    3a40:	35 d0       	rcall	.+106    	; 0x3aac <__divsf3_pse+0x92>
    3a42:	0e 2e       	mov	r0, r30
    3a44:	3a f0       	brmi	.+14     	; 0x3a54 <__divsf3_pse+0x3a>
    3a46:	e0 e8       	ldi	r30, 0x80	; 128
    3a48:	32 d0       	rcall	.+100    	; 0x3aae <__divsf3_pse+0x94>
    3a4a:	91 50       	subi	r25, 0x01	; 1
    3a4c:	50 40       	sbci	r21, 0x00	; 0
    3a4e:	e6 95       	lsr	r30
    3a50:	00 1c       	adc	r0, r0
    3a52:	ca f7       	brpl	.-14     	; 0x3a46 <__divsf3_pse+0x2c>
    3a54:	2b d0       	rcall	.+86     	; 0x3aac <__divsf3_pse+0x92>
    3a56:	fe 2f       	mov	r31, r30
    3a58:	29 d0       	rcall	.+82     	; 0x3aac <__divsf3_pse+0x92>
    3a5a:	66 0f       	add	r22, r22
    3a5c:	77 1f       	adc	r23, r23
    3a5e:	88 1f       	adc	r24, r24
    3a60:	bb 1f       	adc	r27, r27
    3a62:	26 17       	cp	r18, r22
    3a64:	37 07       	cpc	r19, r23
    3a66:	48 07       	cpc	r20, r24
    3a68:	ab 07       	cpc	r26, r27
    3a6a:	b0 e8       	ldi	r27, 0x80	; 128
    3a6c:	09 f0       	breq	.+2      	; 0x3a70 <__divsf3_pse+0x56>
    3a6e:	bb 0b       	sbc	r27, r27
    3a70:	80 2d       	mov	r24, r0
    3a72:	bf 01       	movw	r22, r30
    3a74:	ff 27       	eor	r31, r31
    3a76:	93 58       	subi	r25, 0x83	; 131
    3a78:	5f 4f       	sbci	r21, 0xFF	; 255
    3a7a:	3a f0       	brmi	.+14     	; 0x3a8a <__divsf3_pse+0x70>
    3a7c:	9e 3f       	cpi	r25, 0xFE	; 254
    3a7e:	51 05       	cpc	r21, r1
    3a80:	78 f0       	brcs	.+30     	; 0x3aa0 <__divsf3_pse+0x86>
    3a82:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_inf>
    3a86:	0c 94 0c 1b 	jmp	0x3618	; 0x3618 <__fp_szero>
    3a8a:	5f 3f       	cpi	r21, 0xFF	; 255
    3a8c:	e4 f3       	brlt	.-8      	; 0x3a86 <__divsf3_pse+0x6c>
    3a8e:	98 3e       	cpi	r25, 0xE8	; 232
    3a90:	d4 f3       	brlt	.-12     	; 0x3a86 <__divsf3_pse+0x6c>
    3a92:	86 95       	lsr	r24
    3a94:	77 95       	ror	r23
    3a96:	67 95       	ror	r22
    3a98:	b7 95       	ror	r27
    3a9a:	f7 95       	ror	r31
    3a9c:	9f 5f       	subi	r25, 0xFF	; 255
    3a9e:	c9 f7       	brne	.-14     	; 0x3a92 <__divsf3_pse+0x78>
    3aa0:	88 0f       	add	r24, r24
    3aa2:	91 1d       	adc	r25, r1
    3aa4:	96 95       	lsr	r25
    3aa6:	87 95       	ror	r24
    3aa8:	97 f9       	bld	r25, 7
    3aaa:	08 95       	ret
    3aac:	e1 e0       	ldi	r30, 0x01	; 1
    3aae:	66 0f       	add	r22, r22
    3ab0:	77 1f       	adc	r23, r23
    3ab2:	88 1f       	adc	r24, r24
    3ab4:	bb 1f       	adc	r27, r27
    3ab6:	62 17       	cp	r22, r18
    3ab8:	73 07       	cpc	r23, r19
    3aba:	84 07       	cpc	r24, r20
    3abc:	ba 07       	cpc	r27, r26
    3abe:	20 f0       	brcs	.+8      	; 0x3ac8 <__divsf3_pse+0xae>
    3ac0:	62 1b       	sub	r22, r18
    3ac2:	73 0b       	sbc	r23, r19
    3ac4:	84 0b       	sbc	r24, r20
    3ac6:	ba 0b       	sbc	r27, r26
    3ac8:	ee 1f       	adc	r30, r30
    3aca:	88 f7       	brcc	.-30     	; 0x3aae <__divsf3_pse+0x94>
    3acc:	e0 95       	com	r30
    3ace:	08 95       	ret

00003ad0 <__fp_mpack>:
    3ad0:	9f 3f       	cpi	r25, 0xFF	; 255
    3ad2:	31 f0       	breq	.+12     	; 0x3ae0 <__fp_mpack_finite+0xc>

00003ad4 <__fp_mpack_finite>:
    3ad4:	91 50       	subi	r25, 0x01	; 1
    3ad6:	20 f4       	brcc	.+8      	; 0x3ae0 <__fp_mpack_finite+0xc>
    3ad8:	87 95       	ror	r24
    3ada:	77 95       	ror	r23
    3adc:	67 95       	ror	r22
    3ade:	b7 95       	ror	r27
    3ae0:	88 0f       	add	r24, r24
    3ae2:	91 1d       	adc	r25, r1
    3ae4:	96 95       	lsr	r25
    3ae6:	87 95       	ror	r24
    3ae8:	97 f9       	bld	r25, 7
    3aea:	08 95       	ret

00003aec <__udivmodsi4>:
    3aec:	a1 e2       	ldi	r26, 0x21	; 33
    3aee:	1a 2e       	mov	r1, r26
    3af0:	aa 1b       	sub	r26, r26
    3af2:	bb 1b       	sub	r27, r27
    3af4:	fd 01       	movw	r30, r26
    3af6:	0d c0       	rjmp	.+26     	; 0x3b12 <__udivmodsi4_ep>

00003af8 <__udivmodsi4_loop>:
    3af8:	aa 1f       	adc	r26, r26
    3afa:	bb 1f       	adc	r27, r27
    3afc:	ee 1f       	adc	r30, r30
    3afe:	ff 1f       	adc	r31, r31
    3b00:	a2 17       	cp	r26, r18
    3b02:	b3 07       	cpc	r27, r19
    3b04:	e4 07       	cpc	r30, r20
    3b06:	f5 07       	cpc	r31, r21
    3b08:	20 f0       	brcs	.+8      	; 0x3b12 <__udivmodsi4_ep>
    3b0a:	a2 1b       	sub	r26, r18
    3b0c:	b3 0b       	sbc	r27, r19
    3b0e:	e4 0b       	sbc	r30, r20
    3b10:	f5 0b       	sbc	r31, r21

00003b12 <__udivmodsi4_ep>:
    3b12:	66 1f       	adc	r22, r22
    3b14:	77 1f       	adc	r23, r23
    3b16:	88 1f       	adc	r24, r24
    3b18:	99 1f       	adc	r25, r25
    3b1a:	1a 94       	dec	r1
    3b1c:	69 f7       	brne	.-38     	; 0x3af8 <__udivmodsi4_loop>
    3b1e:	60 95       	com	r22
    3b20:	70 95       	com	r23
    3b22:	80 95       	com	r24
    3b24:	90 95       	com	r25
    3b26:	9b 01       	movw	r18, r22
    3b28:	ac 01       	movw	r20, r24
    3b2a:	bd 01       	movw	r22, r26
    3b2c:	cf 01       	movw	r24, r30
    3b2e:	08 95       	ret

00003b30 <malloc>:
    3b30:	0f 93       	push	r16
    3b32:	1f 93       	push	r17
    3b34:	cf 93       	push	r28
    3b36:	df 93       	push	r29
    3b38:	82 30       	cpi	r24, 0x02	; 2
    3b3a:	91 05       	cpc	r25, r1
    3b3c:	10 f4       	brcc	.+4      	; 0x3b42 <malloc+0x12>
    3b3e:	82 e0       	ldi	r24, 0x02	; 2
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <__flp>
    3b46:	f0 91 3b 07 	lds	r31, 0x073B	; 0x80073b <__flp+0x1>
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	a0 e0       	ldi	r26, 0x00	; 0
    3b50:	b0 e0       	ldi	r27, 0x00	; 0
    3b52:	30 97       	sbiw	r30, 0x00	; 0
    3b54:	19 f1       	breq	.+70     	; 0x3b9c <malloc+0x6c>
    3b56:	40 81       	ld	r20, Z
    3b58:	51 81       	ldd	r21, Z+1	; 0x01
    3b5a:	02 81       	ldd	r16, Z+2	; 0x02
    3b5c:	13 81       	ldd	r17, Z+3	; 0x03
    3b5e:	48 17       	cp	r20, r24
    3b60:	59 07       	cpc	r21, r25
    3b62:	c8 f0       	brcs	.+50     	; 0x3b96 <malloc+0x66>
    3b64:	84 17       	cp	r24, r20
    3b66:	95 07       	cpc	r25, r21
    3b68:	69 f4       	brne	.+26     	; 0x3b84 <malloc+0x54>
    3b6a:	10 97       	sbiw	r26, 0x00	; 0
    3b6c:	31 f0       	breq	.+12     	; 0x3b7a <malloc+0x4a>
    3b6e:	12 96       	adiw	r26, 0x02	; 2
    3b70:	0c 93       	st	X, r16
    3b72:	12 97       	sbiw	r26, 0x02	; 2
    3b74:	13 96       	adiw	r26, 0x03	; 3
    3b76:	1c 93       	st	X, r17
    3b78:	27 c0       	rjmp	.+78     	; 0x3bc8 <malloc+0x98>
    3b7a:	00 93 3a 07 	sts	0x073A, r16	; 0x80073a <__flp>
    3b7e:	10 93 3b 07 	sts	0x073B, r17	; 0x80073b <__flp+0x1>
    3b82:	22 c0       	rjmp	.+68     	; 0x3bc8 <malloc+0x98>
    3b84:	21 15       	cp	r18, r1
    3b86:	31 05       	cpc	r19, r1
    3b88:	19 f0       	breq	.+6      	; 0x3b90 <malloc+0x60>
    3b8a:	42 17       	cp	r20, r18
    3b8c:	53 07       	cpc	r21, r19
    3b8e:	18 f4       	brcc	.+6      	; 0x3b96 <malloc+0x66>
    3b90:	9a 01       	movw	r18, r20
    3b92:	bd 01       	movw	r22, r26
    3b94:	ef 01       	movw	r28, r30
    3b96:	df 01       	movw	r26, r30
    3b98:	f8 01       	movw	r30, r16
    3b9a:	db cf       	rjmp	.-74     	; 0x3b52 <malloc+0x22>
    3b9c:	21 15       	cp	r18, r1
    3b9e:	31 05       	cpc	r19, r1
    3ba0:	f9 f0       	breq	.+62     	; 0x3be0 <malloc+0xb0>
    3ba2:	28 1b       	sub	r18, r24
    3ba4:	39 0b       	sbc	r19, r25
    3ba6:	24 30       	cpi	r18, 0x04	; 4
    3ba8:	31 05       	cpc	r19, r1
    3baa:	80 f4       	brcc	.+32     	; 0x3bcc <malloc+0x9c>
    3bac:	8a 81       	ldd	r24, Y+2	; 0x02
    3bae:	9b 81       	ldd	r25, Y+3	; 0x03
    3bb0:	61 15       	cp	r22, r1
    3bb2:	71 05       	cpc	r23, r1
    3bb4:	21 f0       	breq	.+8      	; 0x3bbe <malloc+0x8e>
    3bb6:	fb 01       	movw	r30, r22
    3bb8:	93 83       	std	Z+3, r25	; 0x03
    3bba:	82 83       	std	Z+2, r24	; 0x02
    3bbc:	04 c0       	rjmp	.+8      	; 0x3bc6 <malloc+0x96>
    3bbe:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <__flp+0x1>
    3bc2:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <__flp>
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	32 96       	adiw	r30, 0x02	; 2
    3bca:	44 c0       	rjmp	.+136    	; 0x3c54 <malloc+0x124>
    3bcc:	fe 01       	movw	r30, r28
    3bce:	e2 0f       	add	r30, r18
    3bd0:	f3 1f       	adc	r31, r19
    3bd2:	81 93       	st	Z+, r24
    3bd4:	91 93       	st	Z+, r25
    3bd6:	22 50       	subi	r18, 0x02	; 2
    3bd8:	31 09       	sbc	r19, r1
    3bda:	39 83       	std	Y+1, r19	; 0x01
    3bdc:	28 83       	st	Y, r18
    3bde:	3a c0       	rjmp	.+116    	; 0x3c54 <malloc+0x124>
    3be0:	20 91 38 07 	lds	r18, 0x0738	; 0x800738 <__brkval>
    3be4:	30 91 39 07 	lds	r19, 0x0739	; 0x800739 <__brkval+0x1>
    3be8:	23 2b       	or	r18, r19
    3bea:	41 f4       	brne	.+16     	; 0x3bfc <malloc+0xcc>
    3bec:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3bf0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3bf4:	30 93 39 07 	sts	0x0739, r19	; 0x800739 <__brkval+0x1>
    3bf8:	20 93 38 07 	sts	0x0738, r18	; 0x800738 <__brkval>
    3bfc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3c00:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3c04:	21 15       	cp	r18, r1
    3c06:	31 05       	cpc	r19, r1
    3c08:	41 f4       	brne	.+16     	; 0x3c1a <malloc+0xea>
    3c0a:	2d b7       	in	r18, 0x3d	; 61
    3c0c:	3e b7       	in	r19, 0x3e	; 62
    3c0e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3c12:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3c16:	24 1b       	sub	r18, r20
    3c18:	35 0b       	sbc	r19, r21
    3c1a:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <__brkval>
    3c1e:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <__brkval+0x1>
    3c22:	e2 17       	cp	r30, r18
    3c24:	f3 07       	cpc	r31, r19
    3c26:	a0 f4       	brcc	.+40     	; 0x3c50 <malloc+0x120>
    3c28:	2e 1b       	sub	r18, r30
    3c2a:	3f 0b       	sbc	r19, r31
    3c2c:	28 17       	cp	r18, r24
    3c2e:	39 07       	cpc	r19, r25
    3c30:	78 f0       	brcs	.+30     	; 0x3c50 <malloc+0x120>
    3c32:	ac 01       	movw	r20, r24
    3c34:	4e 5f       	subi	r20, 0xFE	; 254
    3c36:	5f 4f       	sbci	r21, 0xFF	; 255
    3c38:	24 17       	cp	r18, r20
    3c3a:	35 07       	cpc	r19, r21
    3c3c:	48 f0       	brcs	.+18     	; 0x3c50 <malloc+0x120>
    3c3e:	4e 0f       	add	r20, r30
    3c40:	5f 1f       	adc	r21, r31
    3c42:	50 93 39 07 	sts	0x0739, r21	; 0x800739 <__brkval+0x1>
    3c46:	40 93 38 07 	sts	0x0738, r20	; 0x800738 <__brkval>
    3c4a:	81 93       	st	Z+, r24
    3c4c:	91 93       	st	Z+, r25
    3c4e:	02 c0       	rjmp	.+4      	; 0x3c54 <malloc+0x124>
    3c50:	e0 e0       	ldi	r30, 0x00	; 0
    3c52:	f0 e0       	ldi	r31, 0x00	; 0
    3c54:	cf 01       	movw	r24, r30
    3c56:	df 91       	pop	r29
    3c58:	cf 91       	pop	r28
    3c5a:	1f 91       	pop	r17
    3c5c:	0f 91       	pop	r16
    3c5e:	08 95       	ret

00003c60 <free>:
    3c60:	cf 93       	push	r28
    3c62:	df 93       	push	r29
    3c64:	00 97       	sbiw	r24, 0x00	; 0
    3c66:	09 f4       	brne	.+2      	; 0x3c6a <free+0xa>
    3c68:	81 c0       	rjmp	.+258    	; 0x3d6c <free+0x10c>
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	32 97       	sbiw	r30, 0x02	; 2
    3c6e:	13 82       	std	Z+3, r1	; 0x03
    3c70:	12 82       	std	Z+2, r1	; 0x02
    3c72:	a0 91 3a 07 	lds	r26, 0x073A	; 0x80073a <__flp>
    3c76:	b0 91 3b 07 	lds	r27, 0x073B	; 0x80073b <__flp+0x1>
    3c7a:	10 97       	sbiw	r26, 0x00	; 0
    3c7c:	81 f4       	brne	.+32     	; 0x3c9e <free+0x3e>
    3c7e:	20 81       	ld	r18, Z
    3c80:	31 81       	ldd	r19, Z+1	; 0x01
    3c82:	82 0f       	add	r24, r18
    3c84:	93 1f       	adc	r25, r19
    3c86:	20 91 38 07 	lds	r18, 0x0738	; 0x800738 <__brkval>
    3c8a:	30 91 39 07 	lds	r19, 0x0739	; 0x800739 <__brkval+0x1>
    3c8e:	28 17       	cp	r18, r24
    3c90:	39 07       	cpc	r19, r25
    3c92:	51 f5       	brne	.+84     	; 0x3ce8 <free+0x88>
    3c94:	f0 93 39 07 	sts	0x0739, r31	; 0x800739 <__brkval+0x1>
    3c98:	e0 93 38 07 	sts	0x0738, r30	; 0x800738 <__brkval>
    3c9c:	67 c0       	rjmp	.+206    	; 0x3d6c <free+0x10c>
    3c9e:	ed 01       	movw	r28, r26
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	ce 17       	cp	r28, r30
    3ca6:	df 07       	cpc	r29, r31
    3ca8:	40 f4       	brcc	.+16     	; 0x3cba <free+0x5a>
    3caa:	4a 81       	ldd	r20, Y+2	; 0x02
    3cac:	5b 81       	ldd	r21, Y+3	; 0x03
    3cae:	9e 01       	movw	r18, r28
    3cb0:	41 15       	cp	r20, r1
    3cb2:	51 05       	cpc	r21, r1
    3cb4:	f1 f0       	breq	.+60     	; 0x3cf2 <free+0x92>
    3cb6:	ea 01       	movw	r28, r20
    3cb8:	f5 cf       	rjmp	.-22     	; 0x3ca4 <free+0x44>
    3cba:	d3 83       	std	Z+3, r29	; 0x03
    3cbc:	c2 83       	std	Z+2, r28	; 0x02
    3cbe:	40 81       	ld	r20, Z
    3cc0:	51 81       	ldd	r21, Z+1	; 0x01
    3cc2:	84 0f       	add	r24, r20
    3cc4:	95 1f       	adc	r25, r21
    3cc6:	c8 17       	cp	r28, r24
    3cc8:	d9 07       	cpc	r29, r25
    3cca:	59 f4       	brne	.+22     	; 0x3ce2 <free+0x82>
    3ccc:	88 81       	ld	r24, Y
    3cce:	99 81       	ldd	r25, Y+1	; 0x01
    3cd0:	84 0f       	add	r24, r20
    3cd2:	95 1f       	adc	r25, r21
    3cd4:	02 96       	adiw	r24, 0x02	; 2
    3cd6:	91 83       	std	Z+1, r25	; 0x01
    3cd8:	80 83       	st	Z, r24
    3cda:	8a 81       	ldd	r24, Y+2	; 0x02
    3cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cde:	93 83       	std	Z+3, r25	; 0x03
    3ce0:	82 83       	std	Z+2, r24	; 0x02
    3ce2:	21 15       	cp	r18, r1
    3ce4:	31 05       	cpc	r19, r1
    3ce6:	29 f4       	brne	.+10     	; 0x3cf2 <free+0x92>
    3ce8:	f0 93 3b 07 	sts	0x073B, r31	; 0x80073b <__flp+0x1>
    3cec:	e0 93 3a 07 	sts	0x073A, r30	; 0x80073a <__flp>
    3cf0:	3d c0       	rjmp	.+122    	; 0x3d6c <free+0x10c>
    3cf2:	e9 01       	movw	r28, r18
    3cf4:	fb 83       	std	Y+3, r31	; 0x03
    3cf6:	ea 83       	std	Y+2, r30	; 0x02
    3cf8:	49 91       	ld	r20, Y+
    3cfa:	59 91       	ld	r21, Y+
    3cfc:	c4 0f       	add	r28, r20
    3cfe:	d5 1f       	adc	r29, r21
    3d00:	ec 17       	cp	r30, r28
    3d02:	fd 07       	cpc	r31, r29
    3d04:	61 f4       	brne	.+24     	; 0x3d1e <free+0xbe>
    3d06:	80 81       	ld	r24, Z
    3d08:	91 81       	ldd	r25, Z+1	; 0x01
    3d0a:	84 0f       	add	r24, r20
    3d0c:	95 1f       	adc	r25, r21
    3d0e:	02 96       	adiw	r24, 0x02	; 2
    3d10:	e9 01       	movw	r28, r18
    3d12:	99 83       	std	Y+1, r25	; 0x01
    3d14:	88 83       	st	Y, r24
    3d16:	82 81       	ldd	r24, Z+2	; 0x02
    3d18:	93 81       	ldd	r25, Z+3	; 0x03
    3d1a:	9b 83       	std	Y+3, r25	; 0x03
    3d1c:	8a 83       	std	Y+2, r24	; 0x02
    3d1e:	e0 e0       	ldi	r30, 0x00	; 0
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	12 96       	adiw	r26, 0x02	; 2
    3d24:	8d 91       	ld	r24, X+
    3d26:	9c 91       	ld	r25, X
    3d28:	13 97       	sbiw	r26, 0x03	; 3
    3d2a:	00 97       	sbiw	r24, 0x00	; 0
    3d2c:	19 f0       	breq	.+6      	; 0x3d34 <free+0xd4>
    3d2e:	fd 01       	movw	r30, r26
    3d30:	dc 01       	movw	r26, r24
    3d32:	f7 cf       	rjmp	.-18     	; 0x3d22 <free+0xc2>
    3d34:	8d 91       	ld	r24, X+
    3d36:	9c 91       	ld	r25, X
    3d38:	11 97       	sbiw	r26, 0x01	; 1
    3d3a:	9d 01       	movw	r18, r26
    3d3c:	2e 5f       	subi	r18, 0xFE	; 254
    3d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d40:	82 0f       	add	r24, r18
    3d42:	93 1f       	adc	r25, r19
    3d44:	20 91 38 07 	lds	r18, 0x0738	; 0x800738 <__brkval>
    3d48:	30 91 39 07 	lds	r19, 0x0739	; 0x800739 <__brkval+0x1>
    3d4c:	28 17       	cp	r18, r24
    3d4e:	39 07       	cpc	r19, r25
    3d50:	69 f4       	brne	.+26     	; 0x3d6c <free+0x10c>
    3d52:	30 97       	sbiw	r30, 0x00	; 0
    3d54:	29 f4       	brne	.+10     	; 0x3d60 <free+0x100>
    3d56:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <__flp+0x1>
    3d5a:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <__flp>
    3d5e:	02 c0       	rjmp	.+4      	; 0x3d64 <free+0x104>
    3d60:	13 82       	std	Z+3, r1	; 0x03
    3d62:	12 82       	std	Z+2, r1	; 0x02
    3d64:	b0 93 39 07 	sts	0x0739, r27	; 0x800739 <__brkval+0x1>
    3d68:	a0 93 38 07 	sts	0x0738, r26	; 0x800738 <__brkval>
    3d6c:	df 91       	pop	r29
    3d6e:	cf 91       	pop	r28
    3d70:	08 95       	ret

00003d72 <memcpy>:
    3d72:	fb 01       	movw	r30, r22
    3d74:	dc 01       	movw	r26, r24
    3d76:	02 c0       	rjmp	.+4      	; 0x3d7c <memcpy+0xa>
    3d78:	01 90       	ld	r0, Z+
    3d7a:	0d 92       	st	X+, r0
    3d7c:	41 50       	subi	r20, 0x01	; 1
    3d7e:	50 40       	sbci	r21, 0x00	; 0
    3d80:	d8 f7       	brcc	.-10     	; 0x3d78 <memcpy+0x6>
    3d82:	08 95       	ret

00003d84 <memset>:
    3d84:	dc 01       	movw	r26, r24
    3d86:	01 c0       	rjmp	.+2      	; 0x3d8a <memset+0x6>
    3d88:	6d 93       	st	X+, r22
    3d8a:	41 50       	subi	r20, 0x01	; 1
    3d8c:	50 40       	sbci	r21, 0x00	; 0
    3d8e:	e0 f7       	brcc	.-8      	; 0x3d88 <memset+0x4>
    3d90:	08 95       	ret

00003d92 <_exit>:
    3d92:	f8 94       	cli

00003d94 <__stop_program>:
    3d94:	ff cf       	rjmp	.-2      	; 0x3d94 <__stop_program>
